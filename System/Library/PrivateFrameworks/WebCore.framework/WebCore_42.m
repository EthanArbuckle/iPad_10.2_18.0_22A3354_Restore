uint64_t WebCore::JSWritableStreamSinkOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSWritableStreamSinkOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::WritableStreamSink,WebCore::WritableStreamSink>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  JSC::JSCell *v16;
  JSC::JSObject *Object;
  uint64_t *v18;
  unint64_t SlowCase;
  uint64_t v20;
  int v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  JSC::Structure *v26;
  int v27;
  JSC::JSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  JSC::Structure *Allocator;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58[6];
  int v59;
  int v60;
  int v61;
  JSC::Structure *v62;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSWritableStreamSink::s_info
        + ~((_QWORD)&WebCore::JSWritableStreamSink::s_info << 32)) ^ (((unint64_t)&WebCore::JSWritableStreamSink::s_info
                                                                     + ~((_QWORD)&WebCore::JSWritableStreamSink::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSWritableStreamSink::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_29;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSWritableStreamSink::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = (unint64_t *)(v14 + 40136);
  v16 = *(JSC::JSCell **)(a1 + 656);
  LODWORD(v58[0]) = 23;
  if (((unint64_t)v16 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v16);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v14);
  }
  v18 = (uint64_t *)(v14 + 38904);
  SlowCase = *v15;
  if (*v15 < *(_QWORD *)(v14 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v14 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v54 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v14 + 40160);
    *(_QWORD *)(v14 + 40144) = SlowCase + HIDWORD(v54);
    *(_QWORD *)(v14 + 40152) = SlowCase + (int)v54;
LABEL_11:
    *v15 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v14, a1, v16, v58, &WebCore::JSWritableStreamSinkPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v20 = *v18;
  if (*(_QWORD *)(v14 + 38904) < *(_QWORD *)(v14 + 38912))
    goto LABEL_15;
  v20 = *(_QWORD *)(v14 + 38920);
  if ((v20 & 1) == 0)
  {
    v55 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(v14 + 38928);
    *(_QWORD *)(v14 + 38912) = v20 + HIDWORD(v55);
    *(_QWORD *)(v14 + 38920) = v20 + (int)v55;
LABEL_15:
    *v18 = v20 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM();
  v20 = JSC::LocalAllocator::allocateSlowCase();
LABEL_16:
  *(_DWORD *)v20 = 0;
  v21 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v20 = SlowCase >> 4;
  *(_DWORD *)(v20 + 4) = v21;
  *(_QWORD *)(v20 + 8) = 0;
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>((JSC::VM *)v14, (uint64_t)&WebCore::JSWritableStreamSink::s_info, &WebCore::JSWritableStreamSinkPrototypeTableValues, (JSC::JSObject *)v20);
  v22 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v24 = JSC::JSString::create(v14, v58);
  v25 = v58[0];
  v58[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE));
  v61 = *(_DWORD *)v20;
  v62 = v26;
  v27 = JSC::Structure::outOfLineCapacity(v26);
  v59 = 0;
  v60 = v27;
  v58[0] = (WTF::StringImpl *)&v60;
  v58[1] = (WTF::StringImpl *)v20;
  v58[2] = (WTF::StringImpl *)v14;
  v58[3] = (WTF::StringImpl *)&v61;
  v58[4] = (WTF::StringImpl *)&v62;
  v58[5] = (WTF::StringImpl *)&v59;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v26, (JSC::VM *)v14, v22, 6, (uint64_t)v58);
  if ((*(_BYTE *)((16 * *(unsigned int *)v20) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v20, v14, v59, v24);
  *((_DWORD *)v26 + 4) |= 0x10u;
  LODWORD(v58[0]) = 23;
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v28 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v20);
    if (v28)
      JSC::JSObject::didBecomePrototype(v28, (JSC::VM *)v14);
  }
  v29 = *v15;
  if (*v15 >= *(_QWORD *)(v14 + 40144))
  {
    v29 = *(_QWORD *)(v14 + 40152);
    if ((v29 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v29 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_26;
    }
    v56 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v14 + 40160);
    *(_QWORD *)(v14 + 40144) = v29 + HIDWORD(v56);
    *(_QWORD *)(v14 + 40152) = v29 + (int)v56;
  }
  *v15 = v29 + 128;
LABEL_26:
  *(_DWORD *)v29 = 0;
  MEMORY[0x19AEA4278](v29, v14, a1, v20, v58, &WebCore::JSWritableStreamSink::s_info, 0, 0);
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v29, (uint64_t)&WebCore::JSWritableStreamSink::s_info);
LABEL_29:
  v30 = *(_QWORD *)(a1 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1848);
  if (v33)
    goto LABEL_49;
  v34 = *(_QWORD *)(v31 + 22648);
  v35 = __ldaxr((unsigned __int8 *)v34);
  v57 = v4;
  if (v35)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_34:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1848))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v58, "IsoSpace T");
    v62 = 0;
    MEMORY[0x19AEA3204](v37, v58, v30 + 192, v30 + 1872, 32, 8, &v62);
    v39 = (uint64_t)v62;
    v62 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v58[0];
    v58[0] = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1848);
    *(_QWORD *)(v36 + 1848) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v32 + 1848);
  *(_QWORD *)(v32 + 1848) = v33;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v34);
  v4 = v57;
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_48:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_49:
  v46 = v33[3];
  if (v46 < v33[4])
  {
LABEL_50:
    v33[3] = v46 + 32;
    goto LABEL_51;
  }
  v46 = v33[5];
  if ((v46 & 1) == 0)
  {
    v53 = *(_QWORD *)(v46 + 8) ^ v33[6];
    v33[4] = v46 + HIDWORD(v53);
    v33[5] = v46 + (int)v53;
    goto LABEL_50;
  }
  JSC::sanitizeStackForVM();
  v46 = JSC::LocalAllocator::allocateSlowCase();
LABEL_51:
  *(_DWORD *)v46 = 0;
  WebCore::JSDOMObject::JSDOMObject(v46, v13);
  v47 = *a2;
  *a2 = 0;
  *(_QWORD *)(v46 + 24) = v47;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v48 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE337428 & 1) == 0)
  {
    qword_1EE337420 = (uint64_t)&off_1E3343CA0;
    byte_1EE337428 = 1;
  }
  v58[0] = v4;
  if ((v46 & 8) != 0)
    v49 = (v46 - 112) | 1;
  else
    v49 = v46 & 0xFFFFFFFFFFFFC000;
  if ((v49 & 1) != 0)
    v50 = v49 + 47;
  else
    v50 = *(_QWORD *)v49 + 32;
  Allocator = *(JSC::Structure **)(v50 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v50 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v46;
  *((_QWORD *)Allocator + 1) = &qword_1EE337420;
  *((_QWORD *)Allocator + 2) = v48;
  v62 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v48 + 32), (uint64_t *)v58, (uint64_t *)&v62);
  if (v62)
    *((_QWORD *)v62 + 1) = 3;
  return v46;
}

uint64_t WebCore::convertDictionary<WebCore::CryptoAlgorithmX25519Params>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v27 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v25);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v7);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (*((_DWORD *)v27 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v27, "name", 5, "X25519Params", 13, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  v29 = (WTF::StringImpl *)v8;
  v10 = a2[7];
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
        goto LABEL_16;
    }
    else if (!v11)
    {
LABEL_16:
      v28 = v11;
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (*((_DWORD *)v10 + 20))
  {
    v12 = v28;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    {
      v26 = 1;
      v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v24);
        else
          *(_DWORD *)v12 -= 2;
      }
      v12 = 0;
      v20 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v12 = v28;
  }
  v26 = 0;
  v25 = 0;
  WTF::AtomStringImpl::addLiteral();
  v13 = v29;
  v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v29);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = (uint64_t)v27;
  if (!*((_DWORD *)v27 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v27), (result & 1) == 0))
  {
    if (v15 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v27, "publicKey", 10, "X25519Params", 13, "CryptoKey", 10);
    }
    else
    {
      v29 = a2[7];
      if ((v15 & 0xFFFE000000000002) == 0)
      {
        v16 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
        v17 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v16)
        {
          v18 = 16 * v16;
          if ((char **)v18 != &WebCore::JSCryptoKey::s_info)
          {
            do
            {
              v18 = *(_QWORD *)(v18 + 16);
              v17 = v18 != 0;
            }
            while ((char **)v18 != &WebCore::JSCryptoKey::s_info && v18 != 0);
          }
        }
        if (v17)
        {
          v21 = *(_QWORD *)(v15 + 24);
          if (v21)
          {
            v22 = (unsigned int *)(v21 + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 + 1, v22));
            if (v12)
              *(_DWORD *)v12 += 2;
            *(_QWORD *)a3 = off_1E3345B48;
            *(_QWORD *)(a3 + 8) = v12;
            *(_QWORD *)(a3 + 24) = v21;
            *(_DWORD *)(a3 + 32) = 0;
            v20 = v26;
            if (v26 == -1)
              goto LABEL_38;
            goto LABEL_37;
          }
        }
      }
      JSC::throwTypeError();
    }
  }
  v20 = 0;
LABEL_36:
  *(_DWORD *)(a3 + 32) = 1;
LABEL_37:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3344088[v20])(&v29, &v25);
LABEL_38:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy(v12, v14);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmX25519Params::~CryptoAlgorithmX25519Params(WebCore::CryptoAlgorithmX25519Params *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::JSXMLDocument::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    goto LABEL_13;
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
LABEL_13:
        WebCore::JSNode::analyzeHeap(a1, a2);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, *(_QWORD *)(a1 + 24) + 736);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXMLDocumentPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSXMLDocumentPrototype::create(WebCore::JSXMLDocumentPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSXMLDocument::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSXMLDocumentPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLDocument>,(WebCore::DOMConstructorID)499>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3992);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDocument>,(WebCore::DOMConstructorID)441>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLDocument>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSXMLDocument::s_info + ~((_QWORD)&WebCore::JSXMLDocument::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLDocument::s_info + ~((_QWORD)&WebCore::JSXMLDocument::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSXMLDocument::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSXMLDocument::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSDocument::prototype((WebCore::JSDocument *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSXMLDocumentPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSXMLDocumentPrototype::create((WebCore::JSXMLDocumentPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSXMLDocument::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSXMLDocument::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3992) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsXMLDocumentConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXMLDocumentPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLDocument>,(WebCore::DOMConstructorID)499>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSXMLDocument::subspaceForImpl(WebCore::JSXMLDocument *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4072);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 4072);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 4072);
    *(_QWORD *)(v8 + 4072) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 4072);
  *(_QWORD *)(v3 + 4072) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSXMLHttpRequest::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSXMLHttpRequest::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::parseEnumerationFromString<WebCore::XMLHttpRequest::ResponseType>(uint64_t a1)
{
  int v1;
  int v2;
  char **v4;

  if (a1)
  {
    v1 = *(_DWORD *)(a1 + 4);
    if (v1)
    {
      v4 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::XMLHttpRequest::ResponseType> [5]>::tryGet<WTF::String>(a1);
      if (!v4)
      {
        v1 = 0;
        v2 = 0;
        return v1 | (v2 << 8);
      }
      v1 = *(unsigned __int8 *)v4;
    }
    v2 = 1;
    return v1 | (v2 << 8);
  }
  v1 = 0;
  v2 = 1;
  return v1 | (v2 << 8);
}

char **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::XMLHttpRequest::ResponseType> [5]>::tryGet<WTF::String>(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char **v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v2 = *(unsigned int *)(a1 + 4) | ((unint64_t)((*(_DWORD *)(a1 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v1 = 0;
    v2 = 0x100000000;
  }
  v7 = v1;
  v8 = v2;
  v9 = BYTE4(v2);
  v10 = 1;
  v3 = &WebCore::parseEnumerationFromString<WebCore::XMLHttpRequest::ResponseType>(WTF::String const&)::mappings;
  if ((WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> [3]>::tryGet<WTF::String>(WTF::String const&)const::{lambda(WTF::String&)#1}::operator()<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> const>((uint64_t)&v7, "arraybuffer", 12) & 1) == 0)
  {
    if ((WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> [3]>::tryGet<WTF::String>(WTF::String const&)const::{lambda(WTF::String&)#1}::operator()<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> const>((uint64_t)&v7, "blob", 5) & 1) != 0)
    {
      v3 = &off_1E3342038;
    }
    else if ((WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> [3]>::tryGet<WTF::String>(WTF::String const&)const::{lambda(WTF::String&)#1}::operator()<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> const>((uint64_t)&v7, "document", 9) & 1) != 0)
    {
      v3 = &off_1E3342050;
    }
    else if ((WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> [3]>::tryGet<WTF::String>(WTF::String const&)const::{lambda(WTF::String&)#1}::operator()<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> const>((uint64_t)&v7, "json", 5) & 1) != 0)
    {
      v3 = &off_1E3342068;
    }
    else
    {
      v5 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> [3]>::tryGet<WTF::String>(WTF::String const&)const::{lambda(WTF::String&)#1}::operator()<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CanvasLineCap> const>((uint64_t)&v7, "text", 5);
      v6 = 15;
      if (v5)
        v6 = 12;
      v3 = &(&WebCore::parseEnumerationFromString<WebCore::XMLHttpRequest::ResponseType>(WTF::String const&)::mappings)[v6];
    }
  }
  if (v3 == (char **)&unk_1E3342098)
    return 0;
  else
    return v3 + 2;
}

uint64_t WebCore::parseEnumeration<WebCore::XMLHttpRequest::ResponseType>(JSC::JSGlobalObject *a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  uint64_t v7;

  v7 = a2;
  JSC::JSValue::toWTFString((JSC::JSValue *)&v7, a1, &v6);
  v3 = WebCore::parseEnumerationFromString<WebCore::XMLHttpRequest::ResponseType>((uint64_t)v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

JSC::VM *WebCore::JSDOMConstructor<WebCore::JSXMLHttpRequest>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  unint64_t v12;
  WebCore::JSDOMGlobalObject *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v6 = a2 + 41952;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768);
  v16 = 0;
  v17 = a1;
  v18 = -1;
  v19 = 0x1000000;
  v20 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a1, (JSC::VM *)a2, v7, 0xFFFE000000000000, 6, (uint64_t)&v16);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = JSC::JSString::create(a2, &v16);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v9;
  if (a1 && v9 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  v11 = *(_QWORD *)(*(_QWORD *)v6 + 1968);
  v16 = 0;
  v17 = a1;
  v18 = -1;
  v19 = 0x1000000;
  v20 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a1, (JSC::VM *)a2, v11, v9, 6, (uint64_t)&v16);
  v12 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v14 = WebCore::JSXMLHttpRequest::prototype((WebCore::JSXMLHttpRequest *)a2, a3, v13);
  v16 = 0;
  v17 = a1;
  v18 = -1;
  v19 = 0x1000000;
  v20 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a1, (JSC::VM *)a2, v12, v14, 14, (uint64_t)&v16);
  return JSC::reifyStaticProperties<5u>((JSC::VM *)a2, (uint64_t)&WebCore::JSXMLHttpRequest::s_info, &WebCore::JSXMLHttpRequestConstructorTableValues, (JSC::JSObject *)a1);
}

uint64_t WebCore::JSXMLHttpRequest::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 56);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSXMLHttpRequestEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSXMLHttpRequestEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSXMLHttpRequestEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXMLHttpRequest::estimatedSize(WebCore::JSXMLHttpRequest *this, JSC::JSCell *a2, JSC::VM *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = JSC::JSObject::estimatedSize(this, a2, a3);
  v5 = *((_QWORD *)this + 3);
  if ((*(_WORD *)(v5 + 24) & 0x700) != 0x400)
  {
    v6 = 0;
    return v6 + v4;
  }
  v7 = *(unsigned int *)(v5 + 496);
  if ((v7 & 0x80000000) == 0)
  {
    v6 = 2 * v7;
    return v6 + v4;
  }
  result = 268;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXMLHttpRequest::visitChildren(WebCore::JSXMLHttpRequest *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  uint64_t v11;
  char v12;

  v10[0] = a2;
  v10[1] = this;
  v12 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v11 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    goto LABEL_12;
  }
  *((_QWORD *)a2 + 11) = v10;
  WebCore::JSEventTarget::visitChildren(this, a2, a3);
  WebCore::JSXMLHttpRequest::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
  v6 = *((_QWORD *)this + 3);
  if ((*(_WORD *)(v6 + 24) & 0x700) != 0x400)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v8 = *(unsigned int *)(v6 + 496);
  if ((v8 & 0x80000000) != 0)
  {
    __break(0xC471u);
LABEL_12:
    JUMPOUT(0x19515F978);
  }
  v7 = 2 * v8;
LABEL_7:
  result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v7);
  if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
    result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  *(_QWORD *)(v10[0] + 88) = v11;
  return result;
}

uint64_t WebCore::JSXMLHttpRequest::JSXMLHttpRequest(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 56;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 56;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t *WTF::Ref<WebCore::XMLHttpRequestEventTarget,WTF::RawPtrTraits<WebCore::XMLHttpRequestEventTarget>,WTF::DefaultRefDerefTraits<WebCore::XMLHttpRequestEventTarget>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    }
  }
  return a1;
}

uint64_t WebCore::JSXMLHttpRequest::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 - 32);
  *a2 = v2 - 56;
  return this;
}

uint64_t WebCore::JSXMLHttpRequest::finishCreation(uint64_t this, JSC::VM *a2)
{
  uint64_t v2;
  unsigned int v3;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v2 = *(_QWORD *)(this + 24);
  if ((*(_WORD *)(v2 + 24) & 0x700) == 0x400)
  {
    v3 = *(_DWORD *)(v2 + 496);
    if ((v3 & 0x80000000) != 0)
    {
      this = 268;
      __break(0xC471u);
    }
    else if (v3 >= 0x81)
    {
      return JSC::Heap::reportExtraMemoryAllocatedSlowCase();
    }
  }
  return this;
}

unint64_t WebCore::JSXMLHttpRequest::createPrototype(WebCore::JSXMLHttpRequest *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v5 = (JSC::JSCell *)WebCore::JSXMLHttpRequestEventTarget::prototype(this, a2, a3);
  Structure = WebCore::JSXMLHttpRequestPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSXMLHttpRequestPrototype::create(this, Structure, v7, v8);
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXMLHttpRequest>,(WebCore::DOMConstructorID)922>(uint64_t a1, uint64_t a2)
{
  unint64_t SlowCase;
  JSC::JSCell *v6;
  _QWORD *v7;
  unint64_t v8;

  SlowCase = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7376);
  if (SlowCase)
    return SlowCase;
  v6 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestEventTarget>,(WebCore::DOMConstructorID)923>(a1, a2);
  WebCore::JSDOMConstructor<WebCore::JSXMLHttpRequest>::createStructure((uint64_t *)a1, a2, v6);
  v7 = *(_QWORD **)(a1 + 41456);
  SlowCase = v7[2846];
  if (SlowCase >= v7[2847])
  {
    SlowCase = v7[2848];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_5;
    }
    v8 = *(_QWORD *)(SlowCase + 8) ^ v7[2849];
    v7[2847] = SlowCase + HIDWORD(v8);
    v7[2848] = SlowCase + (int)v8;
  }
  v7[2846] = SlowCase + 48;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSXMLHttpRequest>::initializeProperties(SlowCase, a1, (JSC::VM *)a2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7376) = SlowCase;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return SlowCase;
}

unint64_t WebCore::jsXMLHttpRequestConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXMLHttpRequestPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXMLHttpRequest>,(WebCore::DOMConstructorID)922>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsXMLHttpRequest_onreadystatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 8);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1632), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 8) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 7) + 16))((uint64_t)v5 - 56);
  else
    --*((_DWORD *)v5 - 8);
  return v9;
}

BOOL WebCore::IDLAttribute<WebCore::JSXMLHttpRequest>::set<&WebCore::setJSXMLHttpRequest_onreadystatechangeSetter,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  unint64_t v5;

  v4 = *(_DWORD **)(a1 + 56);
  v5 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  WebCore::setJSXMLHttpRequest_onreadystatechangeSetter(v4, v5, a3);
  return 1;
}

unint64_t WebCore::jsXMLHttpRequest_readyState(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(*(_QWORD *)(a2 + 24) + 25) & 7 | 0xFFFE000000000000;
}

unint64_t WebCore::jsXMLHttpRequest_timeout(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 28);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

BOOL WebCore::setJSXMLHttpRequest_timeout(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  JSC::VM *v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  JSValue v12;
  unsigned int v13;
  int v14;
  char v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v6 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(a2);
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(_QWORD *)(v6 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v13);
  v8 = v14 == 0;
  if (!v14)
  {
    WebCore::XMLHttpRequest::setTimeout(v7 - 56, v13, &v17);
    if (v19)
    {
      v10 = (WTF::StringImpl *)v17;
      v15 = v17;
      v11 = v18;
      v16 = v18;
      if (!*((_QWORD *)v5 + 2))
      {
        v12.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v16);
        JSC::VM::throwException(v5, a1, v12);
        v11 = v16;
      }
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  return v8;
}

uint64_t WebCore::jsXMLHttpRequest_withCredentials(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(*(_QWORD *)(a2 + 24) + 24) & 2) != 0)
    return 7;
  else
    return 6;
}

BOOL WebCore::setJSXMLHttpRequest_withCredentials(JSC *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  double v7;
  _BOOL4 v8;
  uint64_t v9;
  JSValue v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __int16 v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  WTF::StringImpl *v20;

  v5 = *((_QWORD *)a1 + 7);
  v6 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(a2);
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v7 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v8 = a3 == 7;
      goto LABEL_6;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v8 = 1;
          goto LABEL_6;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v8 = !v15;
    goto LABEL_6;
  }
  v8 = v7 > 0.0 || v7 < 0.0;
LABEL_6:
  v9 = *(_QWORD *)(v6 + 24);
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  if ((*(_WORD *)(v9 + 24) & 0x604) != 0)
  {
    v20 = 0;
    if (!*(_QWORD *)(v5 + 16))
    {
      v10.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v5, a1, v10);
      v12 = v20;
      v20 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
  else
  {
    if (v8)
      v13 = 2;
    else
      v13 = 0;
    *(_WORD *)(v9 + 24) = *(_WORD *)(v9 + 24) & 0xFFFD | v13;
  }
  return 1;
}

unint64_t WebCore::jsXMLHttpRequest_upload(int a1, uint64_t a2)
{
  uint64_t v3;
  JSC::VM *v4;
  WebCore::JSDOMGlobalObject *v5;
  void *v6;
  WebCore::EventTarget *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(WebCore::JSDOMGlobalObject **)(v3 + 32);
  if (!v5)
  {
    v5 = (WebCore::JSDOMGlobalObject *)bmalloc::api::isoAllocate();
    *(_QWORD *)v5 = off_1E3483D28;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *((_QWORD *)v5 + 3) = v3 - 56;
    v7 = *(WebCore::EventTarget **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = v5;
    if (v7)
    {
      WebCore::EventTarget::~EventTarget(v7, v6);
      bmalloc::api::isoDeallocate(v8, v9);
      v5 = *(WebCore::JSDOMGlobalObject **)(v3 + 32);
    }
  }
  return WebCore::wrap<WebCore::XMLHttpRequestUpload>(a1, v4, v5);
}

uint64_t WebCore::jsXMLHttpRequest_responseURL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  __int128 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_QWORD *)(a2 + 24);
  WebCore::ResourceResponse::platformLazyInit(v3 + 200, 1);
  v4 = *(WTF::StringImpl **)(v3 + 200);
  if (v4)
    *(_DWORD *)v4 += 2;
  v16 = v4;
  v5 = *(_OWORD *)(v3 + 224);
  v17 = *(_OWORD *)(v3 + 208);
  v18 = v5;
  WTF::URL::removeFragmentIdentifier((WTF::URL *)&v16);
  v7 = v16;
  if (!v16)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v8 = *(_DWORD *)v16;
  *(_DWORD *)v16 += 2;
  v16 = 0;
  if (v8)
    *(_DWORD *)v7 = v8;
  else
    WTF::StringImpl::destroy(v7, v6);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *((_DWORD *)v7 + 1);
  if (v10)
  {
    if (v10 != 1)
    {
LABEL_8:
      v11 = *(_QWORD *)(v9 + 64760);
      if (!v11 || v7 != *(WTF::StringImpl **)(v11 + 8))
        v11 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_11;
    }
    v13 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
    if ((*((_BYTE *)v7 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_8;
      v14 = v15;
    }
    v11 = *(_QWORD *)(v9 + 8 * v14 + 42216);
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 41968);
  }
LABEL_11:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v6);
  else
    *(_DWORD *)v7 -= 2;
  return v11;
}

unint64_t WebCore::jsXMLHttpRequest_status(uint64_t a1, uint64_t a2)
{
  return (unsigned __int16)WebCore::XMLHttpRequest::status((WebCore::XMLHttpRequest *)(*(_QWORD *)(a2 + 24) - 56)) | 0xFFFE000000000000;
}

uint64_t WebCore::jsXMLHttpRequest_statusText(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = *(_QWORD *)(a2 + 24);
  if ((*(_WORD *)(v3 + 24) & 0x600) == 0 || (*(_WORD *)(v3 + 24) & 0x10) != 0)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  WebCore::ResourceResponse::platformLazyInit(v3 + 200, 2);
  v7 = *(_QWORD *)(v3 + 264);
  if (!v7)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v8 = *(_DWORD *)v7;
  v9 = *(_DWORD *)(v7 + 4);
  *(_DWORD *)v7 += 2;
  v10 = *(_QWORD *)(a1 + 56);
  if (v9)
  {
    if (v9 != 1)
    {
LABEL_9:
      v5 = *(_QWORD *)(v10 + 64760);
      if (!v5 || v7 != *(_QWORD *)(v5 + 8))
      {
        v5 = JSC::jsStringWithCacheSlowCase();
        v8 = *(_DWORD *)v7 - 2;
      }
      goto LABEL_12;
    }
    v12 = *(unsigned __int8 **)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      v13 = *v12;
    }
    else
    {
      v14 = *(unsigned __int16 *)v12;
      if (v14 > 0xFF)
        goto LABEL_9;
      v13 = v14;
    }
    v5 = *(_QWORD *)(v10 + 8 * v13 + 42216);
  }
  else
  {
    v5 = *(_QWORD *)(v10 + 41968);
  }
LABEL_12:
  if (v8)
    *(_DWORD *)v7 = v8;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v6);
  return v5;
}

uint64_t WebCore::jsXMLHttpRequest_responseType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = ((unint64_t)*(unsigned __int16 *)(*((_QWORD *)a2 + 3) + 24) >> 11) & 7;
  if ((_MergedGlobals_861[0] & 1) == 0)
  {
    v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v13 += 2;
    _MergedGlobals_30 += 2;
    dword_1ECE7A880 += 2;
    dword_1ECE7A8A0 += 2;
    qword_1EE3374A0 = (uint64_t)v13;
    unk_1EE3374A8 = &_MergedGlobals_30;
    qword_1EE3374B0 = (uint64_t)&dword_1ECE7A880;
    unk_1EE3374B8 = &dword_1ECE7A8A0;
    dword_1ECE7A8C0 += 2;
    dword_1ECE7A8E0 += 2;
    qword_1EE3374C0 = (uint64_t)&dword_1ECE7A8C0;
    unk_1EE3374C8 = &dword_1ECE7A8E0;
    _MergedGlobals_861[0] = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_861[8 * v4 + 216];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_5:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_8;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_5;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_8:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::IDLAttribute<WebCore::JSXMLHttpRequest>::set<&WebCore::setJSXMLHttpRequest_responseTypeSetter,(WebCore::CastedThisErrorBehavior)0>(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;

  v5 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(a2);
  if (v5)
    return WebCore::setJSXMLHttpRequest_responseTypeSetter(a1, *(_QWORD *)(v5 + 24), a3);
  else
    return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsXMLHttpRequest_response(JSC::JSGlobalObject *a1, WebCore::JSXMLHttpRequest *a2)
{
  return WebCore::JSXMLHttpRequest::response(a2, a1);
}

uint64_t WebCore::jsXMLHttpRequest_responseText(WebCore *a1, uint64_t a2, WebCore::JSXMLHttpRequest *a3)
{
  return WebCore::jsXMLHttpRequest_responseTextGetter(a1, *(JSC::JSGlobalObject **)(a2 + 24), a3);
}

uint64_t WebCore::jsXMLHttpRequest_responseXML(uint64_t a1, uint64_t a2)
{
  JSC::VM *v3;
  JSC::JSGlobalObject *v4;
  WebCore::Document *v5;
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  void *v11;
  WebCore::Node *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::JSDOMGlobalObject *v18;
  WTF::StringImpl *v19;
  int v20;
  WebCore::Node *v21;
  WTF::StringImpl *v22;

  v3 = *(JSC::VM **)(a1 + 56);
  v4 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::XMLHttpRequest::responseXML(*(_QWORD *)(a2 + 24) - 56, (uint64_t)&v18);
  if (!v20)
  {
    v6 = v18;
    if (!v18)
    {
      v9 = 0;
      v8 = 2;
      goto LABEL_6;
    }
    v7 = WebCore::cachedDocumentWrapper((WebCore::DOMWrapperWorld **)a1, v4, v18, v5);
    if (v7)
    {
      v8 = v7;
    }
    else
    {
      *((_DWORD *)v6 + 6) += 2;
      v21 = v6;
      v8 = WebCore::toJSNewlyCreated(a1, v4, &v21);
      v12 = v21;
      v21 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v11);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
    }
LABEL_5:
    v9 = v20;
    if (v20 == -1)
      return v8;
LABEL_6:
    ((void (*)(WebCore::Node **, WebCore::JSDOMGlobalObject **))off_1E3346AA8[v9])(&v21, &v18);
    return v8;
  }
  if (v20 == 1)
  {
    v13 = (WTF::StringImpl *)v18;
    LOBYTE(v21) = (_BYTE)v18;
    v14 = v19;
    v19 = 0;
    v22 = v14;
    if (!*((_QWORD *)v3 + 2))
    {
      v15.super.isa = (Class)WebCore::createDOMException((JSC *)a1, (JSC::JSGlobalObject *)v18, (JSC::JSGlobalObject *)&v22);
      JSC::VM::throwException(v3, (JSC::JSGlobalObject *)a1, v15);
      v14 = v22;
    }
    v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v8 = 0;
    goto LABEL_5;
  }
  v16 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSXMLHttpRequestEventTarget::analyzeHeap(v16, v17);
}

uint64_t WebCore::JSXMLHttpRequestEventTarget::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXMLHttpRequestOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 48);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 40)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 56) + 64))(v5 - 56), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

unint64_t WebCore::createWrapper<WebCore::XMLHttpRequest,WebCore::XMLHttpRequest>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSXMLHttpRequestEventTarget *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v17;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  WebCore::JSXMLHttpRequest *v21;
  _QWORD *v22;
  unint64_t SlowCase;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *Allocator;
  uint64_t v31;
  int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSXMLHttpRequest::s_info + ~((_QWORD)&WebCore::JSXMLHttpRequest::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLHttpRequest::s_info + ~((_QWORD)&WebCore::JSXMLHttpRequest::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSXMLHttpRequest::s_info)
    {
LABEL_3:
      v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      v33 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v33) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v33;
        if (v12 == &WebCore::JSXMLHttpRequest::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (WebCore::JSXMLHttpRequestEventTarget *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSXMLHttpRequestEventTarget::prototype(v14, a1, a3);
  Structure = WebCore::JSXMLHttpRequestPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSXMLHttpRequestPrototype::create(v14, Structure, v17, v18);
  v20 = WebCore::JSXMLHttpRequest::createStructure((uint64_t *)v14, (uint64_t)a1, v19);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSXMLHttpRequest::s_info);
LABEL_5:
  v21 = (WebCore::JSXMLHttpRequest *)*((_QWORD *)a1 + 7);
  v22 = (_QWORD *)WebCore::JSXMLHttpRequest::subspaceForImpl(v21, a2);
  SlowCase = v22[3];
  if (SlowCase < v22[4])
  {
LABEL_6:
    v22[3] = SlowCase + 48;
    goto LABEL_7;
  }
  SlowCase = v22[5];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v22[6];
    v22[4] = SlowCase + HIDWORD(v35);
    v22[5] = SlowCase + (int)v35;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  v24 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v25 = v24 + 56;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v25;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)v21 + 755))
  {
    __dmb(0xAu);
    v25 = *(_QWORD *)(SlowCase + 24);
  }
  if ((*(_WORD *)(v25 + 24) & 0x700) == 0x400)
  {
    v34 = *(_DWORD *)(v25 + 496);
    if ((v34 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195160C8CLL);
    }
    if (v34 >= 0x81)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  }
  v26 = *((_QWORD *)a1 + 415);
  if ((byte_1EE337438 & 1) == 0)
  {
    qword_1EE337430 = (uint64_t)&off_1E3343CD0;
    byte_1EE337438 = 1;
  }
  if (v5)
    v27 = (uint64_t *)(v5 + 64);
  else
    v27 = 0;
  if (*(_DWORD *)(v26 + 48))
  {
    v37 = v5;
    JSC::Weak<JSC::JSObject>::Weak(&v36, SlowCase, (uint64_t)&qword_1EE337430, v26);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), &v37, &v36);
    v31 = v36;
    if (!v36)
      return SlowCase;
LABEL_33:
    *(_QWORD *)(v31 + 8) = 3;
    return SlowCase;
  }
  if ((SlowCase & 8) != 0)
    v28 = (SlowCase - 112) | 1;
  else
    v28 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v28 & 1) != 0)
    v29 = v28 + 47;
  else
    v29 = *(_QWORD *)v28 + 32;
  Allocator = *(_QWORD **)(v29 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v29 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337430;
  Allocator[2] = v26;
  v31 = *v27;
  *v27 = (uint64_t)Allocator;
  if (v31)
    goto LABEL_33;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::XMLHttpRequest>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  WebCore::JSDOMGlobalObject *v6;
  unint64_t v7;
  _DWORD *v9;

  v5 = WebCore::getCachedWrapper<WebCore::XMLHttpRequest>(a2[415], a3);
  if (v5)
    return v5;
  ++*(_DWORD *)(a3 + 24);
  v9 = (_DWORD *)a3;
  v7 = WebCore::toJSNewlyCreated((JSC::VM *)a2, (JSC::VM *)&v9, v6);
  if (v9)
  {
    if (v9[6] == 1)
      (*(void (**)(void))(*(_QWORD *)v9 + 16))();
    else
      --v9[6];
  }
  return v7;
}

unint64_t WebCore::JSXMLHttpRequest::toWrapped(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(a2);
  if (result)
    return *(_QWORD *)(result + 24) - 56;
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSXMLHttpRequest::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSXMLHttpRequest::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestEventTarget>,(WebCore::DOMConstructorID)923>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  WebCore::JSDOMGlobalObject *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7384);
  if (v2)
    return v2;
  v6 = (uint64_t *)(a1 + 40136);
  v7 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v8 = v7;
  LODWORD(v22) = 67099;
  if ((v7 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v7);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_7;
  SlowCase = v6[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v6[3];
    v6[1] = SlowCase + HIDWORD(v20);
    v6[2] = SlowCase + (int)v20;
LABEL_7:
    *v6 = SlowCase + 128;
    goto LABEL_8;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v8, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestEventTarget>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v11 = (_QWORD *)v6[165];
  v2 = v11[2846];
  if (v2 >= v11[2847])
  {
    v2 = v11[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v11[2849];
    v11[2847] = v2 + HIDWORD(v21);
    v11[2848] = v2 + (int)v21;
  }
  v11[2846] = v2 + 48;
LABEL_12:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v6[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v12, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create(a1, &v22);
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v14;
  if (v14 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v16 = *(_QWORD *)(v6[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v14, 6, (uint64_t)&v22);
  v17 = *(_QWORD *)(v6[227] + 2160);
  v19 = WebCore::JSXMLHttpRequestEventTarget::prototype((WebCore::JSXMLHttpRequestEventTarget *)a1, (JSC::VM *)a2, v18);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v19, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7384) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsXMLHttpRequestEventTargetConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXMLHttpRequestEventTargetPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestEventTarget>,(WebCore::DOMConstructorID)923>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsXMLHttpRequestEventTarget_onloadstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
    *(_DWORD *)(v5 + 24) += 2;
  else
    a1 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 88))(*(_QWORD *)(a2 + 24));
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1160), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  }
  return v10;
}

BOOL WebCore::setJSXMLHttpRequestEventTarget_onloadstart(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSXMLHttpRequestEventTarget *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *((_QWORD *)v5 + 3);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
    *(_DWORD *)(v7 + 24) += 2;
  else
    v5 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 88))(*((_QWORD *)v5 + 3));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(v5);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v7, (WTF::StringImpl **)(v10 + 1160), a3, v6);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsXMLHttpRequestEventTarget_onprogress(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
    *(_DWORD *)(v5 + 24) += 2;
  else
    a1 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 88))(*(_QWORD *)(a2 + 24));
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1584), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  }
  return v10;
}

BOOL WebCore::setJSXMLHttpRequestEventTarget_onprogress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSXMLHttpRequestEventTarget *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *((_QWORD *)v5 + 3);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
    *(_DWORD *)(v7 + 24) += 2;
  else
    v5 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 88))(*((_QWORD *)v5 + 3));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(v5);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v7, (WTF::StringImpl **)(v10 + 1584), a3, v6);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsXMLHttpRequestEventTarget_onabort(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
    *(_DWORD *)(v5 + 24) += 2;
  else
    a1 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 88))(*(_QWORD *)(a2 + 24));
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 64), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  }
  return v10;
}

BOOL WebCore::setJSXMLHttpRequestEventTarget_onabort(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSXMLHttpRequestEventTarget *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *((_QWORD *)v5 + 3);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
    *(_DWORD *)(v7 + 24) += 2;
  else
    v5 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 88))(*((_QWORD *)v5 + 3));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(v5);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v7, (WTF::StringImpl **)(v10 + 64), a3, v6);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsXMLHttpRequestEventTarget_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
    *(_DWORD *)(v5 + 24) += 2;
  else
    a1 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 88))(*(_QWORD *)(a2 + 24));
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  }
  return v10;
}

BOOL WebCore::setJSXMLHttpRequestEventTarget_onerror(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSXMLHttpRequestEventTarget *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *((_QWORD *)v5 + 3);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
    *(_DWORD *)(v7 + 24) += 2;
  else
    v5 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 88))(*((_QWORD *)v5 + 3));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(v5);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v7, (WTF::StringImpl **)(v10 + 784), a3, v6);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsXMLHttpRequestEventTarget_onload(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
    *(_DWORD *)(v5 + 24) += 2;
  else
    a1 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 88))(*(_QWORD *)(a2 + 24));
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  }
  return v10;
}

BOOL WebCore::IDLAttribute<WebCore::JSXMLHttpRequestEventTarget>::set<&WebCore::setJSXMLHttpRequestEventTarget_onloadSetter,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WebCore *v4;
  unint64_t v5;

  v4 = *(WebCore **)(a1 + 56);
  v5 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequestEventTarget *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  WebCore::setJSXMLHttpRequestEventTarget_onloadSetter(v4, v5, a3);
  return 1;
}

uint64_t WebCore::jsXMLHttpRequestEventTarget_ontimeout(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
    *(_DWORD *)(v5 + 24) += 2;
  else
    a1 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 88))(*(_QWORD *)(a2 + 24));
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2040), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  }
  return v10;
}

BOOL WebCore::setJSXMLHttpRequestEventTarget_ontimeout(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSXMLHttpRequestEventTarget *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *((_QWORD *)v5 + 3);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
    *(_DWORD *)(v7 + 24) += 2;
  else
    v5 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 88))(*((_QWORD *)v5 + 3));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(v5);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v7, (WTF::StringImpl **)(v10 + 2040), a3, v6);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), (const JSCell *)v6);
  return 1;
}

uint64_t WebCore::jsXMLHttpRequestEventTarget_onloadend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
    *(_DWORD *)(v5 + 24) += 2;
  else
    a1 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 88))(*(_QWORD *)(a2 + 24));
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1128), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if ((*(_BYTE *)(v5 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  }
  return v10;
}

BOOL WebCore::setJSXMLHttpRequestEventTarget_onloadend(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = (WebCore *)JSC::jsDynamicCast<WebCore::JSXMLHttpRequestEventTarget *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = v5;
  v7 = *((_QWORD *)v5 + 3);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
    *(_DWORD *)(v7 + 24) += 2;
  else
    v5 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 88))(*((_QWORD *)v5 + 3));
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(v5);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v7, (WTF::StringImpl **)(v10 + 1128), a3, v6);
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), (const JSCell *)v6);
  return 1;
}

unint64_t JSC::jsDynamicCast<WebCore::JSXMLHttpRequestEventTarget *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSXMLHttpRequestEventTarget::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSXMLHttpRequestEventTarget::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

WTF::StringImpl *WebCore::JSXMLHttpRequestProgressEventPrototype::finishCreation(WebCore::JSXMLHttpRequestProgressEventPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(a2, (uint64_t)&WebCore::JSXMLHttpRequestProgressEvent::s_info, &WebCore::JSXMLHttpRequestProgressEventPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSXMLHttpRequestProgressEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSProgressEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSProgressEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSProgressEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXMLHttpRequestProgressEvent::JSXMLHttpRequestProgressEvent(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v8;

  v5 = *a4;
  *a4 = 0;
  v8 = (_DWORD *)v5;
  WebCore::JSBeforeUnloadEvent::JSBeforeUnloadEvent(a1, a2, a3, (uint64_t *)&v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return a1;
}

unint64_t WebCore::JSXMLHttpRequestProgressEvent::createPrototype(WebCore::JSXMLHttpRequestProgressEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSProgressEvent::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSXMLHttpRequestProgressEventPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSXMLHttpRequestProgressEventPrototype::create(WebCore::JSXMLHttpRequestProgressEventPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSXMLHttpRequestProgressEventPrototype::finishCreation((WebCore::JSXMLHttpRequestProgressEventPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestProgressEvent>,(WebCore::DOMConstructorID)924>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7392);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSProgressEvent>,(WebCore::DOMConstructorID)475>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestProgressEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSXMLHttpRequestProgressEvent>((WebCore::JSXMLHttpRequestProgressEvent *)a1, (JSC::VM *)a2)+ 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7392) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsXMLHttpRequestProgressEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXMLHttpRequestProgressEventPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestProgressEvent>,(WebCore::DOMConstructorID)924>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsXMLHttpRequestProgressEvent_position(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsXMLHttpRequestProgressEvent_totalSize(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

uint64_t WebCore::JSXMLHttpRequestProgressEvent::subspaceForImpl(WebCore::JSXMLHttpRequestProgressEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7464);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 7464))
  {
    v12 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v12, JSC::JSCell::numberOfLowerTierCells, &v13);
    v11 = *(_QWORD *)(v9 + 7464);
    *(_QWORD *)(v9 + 7464) = v13;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v13 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSXMLHttpRequestProgressEvent::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v13);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v13);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSXMLHttpRequestUpload::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSXMLHttpRequestEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSXMLHttpRequestEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSXMLHttpRequestEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXMLHttpRequestUploadPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSXMLHttpRequestUploadPrototype::create(WebCore::JSXMLHttpRequestUploadPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSXMLHttpRequestUpload::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSXMLHttpRequestUploadPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestUpload>,(WebCore::DOMConstructorID)925>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7400);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestEventTarget>,(WebCore::DOMConstructorID)923>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestUpload>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSXMLHttpRequestUpload::s_info
         + ~((_QWORD)&WebCore::JSXMLHttpRequestUpload::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLHttpRequestUpload::s_info
                                                                        + ~((_QWORD)&WebCore::JSXMLHttpRequestUpload::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSXMLHttpRequestUpload::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSXMLHttpRequestUpload::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSXMLHttpRequestEventTarget::prototype((WebCore::JSXMLHttpRequestEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSXMLHttpRequestUploadPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSXMLHttpRequestUploadPrototype::create((WebCore::JSXMLHttpRequestUploadPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSXMLHttpRequestUpload::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSXMLHttpRequestUpload::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7400) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsXMLHttpRequestUploadConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXMLHttpRequestUploadPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXMLHttpRequestUpload>,(WebCore::DOMConstructorID)925>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSXMLHttpRequestUploadOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from XMLHttpRequestUpload";
    a5[1] = 36;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x195163408);
      }
    }
  }
  return result;
}

_DWORD *WebCore::JSXMLHttpRequestUploadOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = *(_DWORD **)(v3 + 24);
  v5 = result[6];
  result[6] = v5 + 1;
  v6 = v3 + 8;
  if (!v3)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != v3)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == v3)
            goto LABEL_14;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_14:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
          }
        }
      }
    }
    result = *(_DWORD **)(v3 + 24);
    v5 = result[6] - 1;
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  if (!v5)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
  result[6] = v5;
  return result;
}

unint64_t WebCore::wrap<WebCore::XMLHttpRequestUpload>(int a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSXMLHttpRequestEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  WebCore::JSDOMGlobalObject *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(WebCore::JSDOMGlobalObject **)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(WebCore::JSDOMGlobalObject **)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)a3 + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(*((_QWORD *)a3 + 3) + 24);
  if (*(uint64_t (***)(WebCore::XMLHttpRequestUpload *__hidden))a3 != off_1E3483D28)
  {
    __break(0xC471u);
    JUMPOUT(0x195163AD0);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSXMLHttpRequestUpload::s_info
         + ~((_QWORD)&WebCore::JSXMLHttpRequestUpload::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLHttpRequestUpload::s_info
                                                                        + ~((_QWORD)&WebCore::JSXMLHttpRequestUpload::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSXMLHttpRequestUpload::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSXMLHttpRequestUpload::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSXMLHttpRequestEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSXMLHttpRequestEventTarget::prototype(v17, a2, a3);
  Structure = WebCore::JSXMLHttpRequestUploadPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSXMLHttpRequestUploadPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSXMLHttpRequestUpload::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSXMLHttpRequestUpload::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 7472);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 7472);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 7472);
    *(_QWORD *)(v30 + 7472) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 7472);
  *(_QWORD *)(v26 + 7472) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE337448 & 1) == 0)
  {
    qword_1EE337440 = (uint64_t)&off_1E3343D00;
    byte_1EE337448 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE337440;
    Allocator[2] = v42;
    v46 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE337440;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSXMLSerializer>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  JSC::JSCell *v43;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v45;
  JSC::JSGlobalObject *v46;
  JSC::VM *v47;
  JSC::Structure *v48;
  uint64_t FunctionRealm;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  int v57;
  JSC::JSObject *v58;
  unint64_t v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::JSCell *v62;
  uint64_t v63;
  unint64_t SubclassStructure;
  unint64_t v66;
  JSC::VM *v67;
  _QWORD *v69;
  WTF *v70;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = (WTF *)WTF::fastMalloc((WTF *)4);
  *(_DWORD *)v5 = 1;
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(v6 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSXMLSerializer::s_info + ~((_QWORD)&WebCore::JSXMLSerializer::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLSerializer::s_info + ~((_QWORD)&WebCore::JSXMLSerializer::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSXMLSerializer::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_8;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::JSXMLSerializer::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(uint64_t **)(v6 + 56);
  Structure = WebCore::JSXMLSerializerPrototype::createStructure(v16, v6, *(JSC::JSCell **)(v6 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSXMLSerializerPrototype::create((WebCore::JSXMLSerializerPrototype *)v16, Structure, v18, v19);
  v21 = WebCore::JSXMLSerializer::createStructure(v16, v6, v20);
  v15 = WebCore::cacheDOMStructure((JSCell *)v6, v21, (uint64_t)&WebCore::JSXMLSerializer::s_info);
LABEL_8:
  v22 = *(_QWORD *)(v6 + 56);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 7480);
  if (v25)
    goto LABEL_28;
  v26 = *(_QWORD *)(v23 + 22648);
  v27 = __ldaxr((unsigned __int8 *)v26);
  v67 = v3;
  if (v27)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  if (!*(_QWORD *)(v28 + 7480))
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v70, "IsoSpace T");
    v69 = 0;
    MEMORY[0x19AEA3204](v29, &v70, v22 + 192, v22 + 1872, 32, 8, &v69);
    v31 = (uint64_t)v69;
    v69 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v70;
    v70 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v33 = *(_QWORD *)(v28 + 7480);
    *(_QWORD *)(v28 + 7480) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v24 + 7480);
  *(_QWORD *)(v24 + 7480) = v25;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v26);
  v3 = v67;
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_28:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_29:
    v25[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v66 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v66);
    v25[5] = SlowCase + (int)v66;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = v5;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v39 = *(_QWORD *)(v6 + 3320);
  if ((byte_1EE337458 & 1) == 0)
  {
    qword_1EE337450 = (uint64_t)&off_1E3343D30;
    byte_1EE337458 = 1;
  }
  v70 = v5;
  if ((SlowCase & 8) != 0)
    v40 = (SlowCase - 112) | 1;
  else
    v40 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v40 & 1) != 0)
    v41 = v40 + 47;
  else
    v41 = *(_QWORD *)v40 + 32;
  Allocator = *(_QWORD **)(v41 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v41 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337450;
  Allocator[2] = v39;
  v69 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v70, (uint64_t *)&v69);
  if (v69)
    v69[1] = 3;
  v43 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v43 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v43);
    if (Object)
    {
      v46 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v47 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v45);
        if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
        {
          v50 = *(_QWORD *)(FunctionRealm + 3296);
          if (v50)
          {
            v51 = *(_DWORD *)(v50 - 8);
            v52 = ((unint64_t)&WebCore::JSXMLSerializer::s_info
                 + ~((_QWORD)&WebCore::JSXMLSerializer::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLSerializer::s_info
                                                                         + ~((_QWORD)&WebCore::JSXMLSerializer::s_info << 32)) >> 22);
            v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            v55 = v51 & ((v54 >> 31) ^ v54);
            v56 = *(char ***)(v50 + 16 * v55);
            if (v56 == &WebCore::JSXMLSerializer::s_info)
            {
LABEL_52:
              v58 = *(JSC::JSObject **)(v50 + 16 * v55 + 8);
              if (v58)
              {
LABEL_54:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v46, v58, v48);
                if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
                  JSC::JSObject::setStructure((JSCell *)SlowCase, v47, SubclassStructure);
                goto LABEL_56;
              }
            }
            else
            {
              v57 = 1;
              while (v56)
              {
                v55 = ((_DWORD)v55 + v57) & v51;
                v56 = *(char ***)(v50 + 16 * v55);
                ++v57;
                if (v56 == &WebCore::JSXMLSerializer::s_info)
                  goto LABEL_52;
              }
            }
          }
          v59 = WebCore::JSXMLSerializerPrototype::createStructure((uint64_t *)v47, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(v59 + 16) |= 0x80000u;
          v62 = (JSC::JSCell *)WebCore::JSXMLSerializerPrototype::create(v47, v59, v60, v61);
          v63 = WebCore::JSXMLSerializer::createStructure((uint64_t *)v47, FunctionRealm, v62);
          v58 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v63, (uint64_t)&WebCore::JSXMLSerializer::s_info);
          goto LABEL_54;
        }
      }
    }
  }
LABEL_56:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  return SlowCase;
}

WTF *WebCore::JSXMLSerializer::destroy(WebCore::JSXMLSerializer *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSXMLSerializer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXMLSerializerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSXMLSerializerPrototype::create(WebCore::JSXMLSerializerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSXMLSerializer::s_info, (uint64_t)&WebCore::JSXMLSerializerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXMLSerializer>,(WebCore::DOMConstructorID)926>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7408);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSXMLSerializer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSXMLSerializer::s_info + ~((_QWORD)&WebCore::JSXMLSerializer::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLSerializer::s_info + ~((_QWORD)&WebCore::JSXMLSerializer::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSXMLSerializer::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSXMLSerializer::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSXMLSerializerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSXMLSerializerPrototype::create((WebCore::JSXMLSerializerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSXMLSerializer::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSXMLSerializer::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7408) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsXMLSerializerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXMLSerializerPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXMLSerializer>,(WebCore::DOMConstructorID)926>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSXMLSerializerOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSXMLSerializerOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSXPathEvaluator>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  JSC::JSCell *v43;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v45;
  JSC::JSGlobalObject *v46;
  JSC::VM *v47;
  JSC::Structure *v48;
  uint64_t FunctionRealm;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  int v57;
  JSC::JSObject *v58;
  unint64_t v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::JSCell *v62;
  uint64_t v63;
  unint64_t SubclassStructure;
  unint64_t v66;
  JSC::VM *v67;
  _QWORD *v69;
  WTF *v70;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = (WTF *)WTF::fastMalloc((WTF *)4);
  *(_DWORD *)v5 = 1;
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(v6 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSXPathEvaluator::s_info + ~((_QWORD)&WebCore::JSXPathEvaluator::s_info << 32)) ^ (((unint64_t)&WebCore::JSXPathEvaluator::s_info + ~((_QWORD)&WebCore::JSXPathEvaluator::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSXPathEvaluator::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_8;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::JSXPathEvaluator::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(uint64_t **)(v6 + 56);
  Structure = WebCore::JSXPathEvaluatorPrototype::createStructure(v16, v6, *(JSC::JSCell **)(v6 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSXPathEvaluatorPrototype::create((WebCore::JSXPathEvaluatorPrototype *)v16, Structure, v18, v19);
  v21 = WebCore::JSXPathEvaluator::createStructure(v16, v6, v20);
  v15 = WebCore::cacheDOMStructure((JSCell *)v6, v21, (uint64_t)&WebCore::JSXPathEvaluator::s_info);
LABEL_8:
  v22 = *(_QWORD *)(v6 + 56);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 7488);
  if (v25)
    goto LABEL_28;
  v26 = *(_QWORD *)(v23 + 22648);
  v27 = __ldaxr((unsigned __int8 *)v26);
  v67 = v3;
  if (v27)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  if (!*(_QWORD *)(v28 + 7488))
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v70, "IsoSpace T");
    v69 = 0;
    MEMORY[0x19AEA3204](v29, &v70, v22 + 192, v22 + 1872, 32, 8, &v69);
    v31 = (uint64_t)v69;
    v69 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v70;
    v70 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v33 = *(_QWORD *)(v28 + 7488);
    *(_QWORD *)(v28 + 7488) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v24 + 7488);
  *(_QWORD *)(v24 + 7488) = v25;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v26);
  v3 = v67;
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_28:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_29:
    v25[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v66 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v66);
    v25[5] = SlowCase + (int)v66;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = v5;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v39 = *(_QWORD *)(v6 + 3320);
  if ((byte_1EE337468 & 1) == 0)
  {
    qword_1EE337460 = (uint64_t)&off_1E3343D60;
    byte_1EE337468 = 1;
  }
  v70 = v5;
  if ((SlowCase & 8) != 0)
    v40 = (SlowCase - 112) | 1;
  else
    v40 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v40 & 1) != 0)
    v41 = v40 + 47;
  else
    v41 = *(_QWORD *)v40 + 32;
  Allocator = *(_QWORD **)(v41 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v41 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337460;
  Allocator[2] = v39;
  v69 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v70, (uint64_t *)&v69);
  if (v69)
    v69[1] = 3;
  v43 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v43 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v43);
    if (Object)
    {
      v46 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v47 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v45);
        if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
        {
          v50 = *(_QWORD *)(FunctionRealm + 3296);
          if (v50)
          {
            v51 = *(_DWORD *)(v50 - 8);
            v52 = ((unint64_t)&WebCore::JSXPathEvaluator::s_info
                 + ~((_QWORD)&WebCore::JSXPathEvaluator::s_info << 32)) ^ (((unint64_t)&WebCore::JSXPathEvaluator::s_info
                                                                          + ~((_QWORD)&WebCore::JSXPathEvaluator::s_info << 32)) >> 22);
            v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            v55 = v51 & ((v54 >> 31) ^ v54);
            v56 = *(char ***)(v50 + 16 * v55);
            if (v56 == &WebCore::JSXPathEvaluator::s_info)
            {
LABEL_52:
              v58 = *(JSC::JSObject **)(v50 + 16 * v55 + 8);
              if (v58)
              {
LABEL_54:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v46, v58, v48);
                if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
                  JSC::JSObject::setStructure((JSCell *)SlowCase, v47, SubclassStructure);
                goto LABEL_56;
              }
            }
            else
            {
              v57 = 1;
              while (v56)
              {
                v55 = ((_DWORD)v55 + v57) & v51;
                v56 = *(char ***)(v50 + 16 * v55);
                ++v57;
                if (v56 == &WebCore::JSXPathEvaluator::s_info)
                  goto LABEL_52;
              }
            }
          }
          v59 = WebCore::JSXPathEvaluatorPrototype::createStructure((uint64_t *)v47, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(v59 + 16) |= 0x80000u;
          v62 = (JSC::JSCell *)WebCore::JSXPathEvaluatorPrototype::create(v47, v59, v60, v61);
          v63 = WebCore::JSXPathEvaluator::createStructure((uint64_t *)v47, FunctionRealm, v62);
          v58 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v63, (uint64_t)&WebCore::JSXPathEvaluator::s_info);
          goto LABEL_54;
        }
      }
    }
  }
LABEL_56:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  return SlowCase;
}

WTF *WebCore::JSXPathEvaluator::destroy(WebCore::JSXPathEvaluator *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSXPathEvaluator::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXPathEvaluatorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSXPathEvaluatorPrototype::create(WebCore::JSXPathEvaluatorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSXPathEvaluator::s_info, &WebCore::JSXPathEvaluatorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXPathEvaluator>,(WebCore::DOMConstructorID)927>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7416);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSXPathEvaluator>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSXPathEvaluator::s_info + ~((_QWORD)&WebCore::JSXPathEvaluator::s_info << 32)) ^ (((unint64_t)&WebCore::JSXPathEvaluator::s_info + ~((_QWORD)&WebCore::JSXPathEvaluator::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSXPathEvaluator::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSXPathEvaluator::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSXPathEvaluatorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSXPathEvaluatorPrototype::create((WebCore::JSXPathEvaluatorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSXPathEvaluator::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSXPathEvaluator::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7416) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsXPathEvaluatorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXPathEvaluatorPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXPathEvaluator>,(WebCore::DOMConstructorID)927>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSXPathEvaluatorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSXPathEvaluatorOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

uint64_t WebCore::JSXPathExpression::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
        (*(void (**)(uint64_t, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSXPathExpression::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXPathExpressionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSXPathExpressionPrototype::create(WebCore::JSXPathExpressionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSXPathExpression::s_info, (uint64_t)&WebCore::JSXPathExpressionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXPathExpression>,(WebCore::DOMConstructorID)928>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7424);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSXPathExpression>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSXPathExpression::s_info + ~((_QWORD)&WebCore::JSXPathExpression::s_info << 32)) ^ (((unint64_t)&WebCore::JSXPathExpression::s_info + ~((_QWORD)&WebCore::JSXPathExpression::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSXPathExpression::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSXPathExpression::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSXPathExpressionPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSXPathExpressionPrototype::create((WebCore::JSXPathExpressionPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSXPathExpression::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSXPathExpression::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7424) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsXPathExpressionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXPathExpressionPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXPathExpression>,(WebCore::DOMConstructorID)928>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSXPathExpressionOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSXPathExpressionOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::XPathExpression,WebCore::XPathExpression>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSXPathExpression::s_info + ~((_QWORD)&WebCore::JSXPathExpression::s_info << 32)) ^ (((unint64_t)&WebCore::JSXPathExpression::s_info + ~((_QWORD)&WebCore::JSXPathExpression::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSXPathExpression::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSXPathExpression::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSXPathExpressionPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSXPathExpressionPrototype::create((WebCore::JSXPathExpressionPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSXPathExpression::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSXPathExpression::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 7496);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 7496))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 7496);
    *(_QWORD *)(v26 + 7496) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 7496);
  *(_QWORD *)(v22 + 7496) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE337478 & 1) == 0)
  {
    qword_1EE337470 = (uint64_t)&off_1E3343D90;
    byte_1EE337478 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337470;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSXPathExpression::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSXPathExpression::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSXPathExpression::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

_DWORD *WebCore::JSXPathNSResolver::destroy(WebCore::JSXPathNSResolver *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSXPathNSResolver::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXPathResult::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSXPathResult::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

WebCore::XPathResult *WebCore::JSXPathResult::destroy(WebCore::JSXPathResult *this, JSC::JSCell *a2)
{
  WebCore::XPathResult *result;
  WTF *v4;
  void *v5;

  result = (WebCore::XPathResult *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::XPathResult::~XPathResult(result, a2);
      return (WebCore::XPathResult *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSXPathResult::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXPathResult::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSXPathResult::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSXPathResult::visitChildren(WebCore::JSXPathResult *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSXPathResult::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSXPathResultPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSXPathResultPrototype::create(WebCore::JSXPathResultPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<20u>(this, (uint64_t)&WebCore::JSXPathResult::s_info, (uint64_t)&WebCore::JSXPathResultPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXPathResult>,(WebCore::DOMConstructorID)930>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7440);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSXPathResult>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSXPathResult::s_info + ~((_QWORD)&WebCore::JSXPathResult::s_info << 32)) ^ (((unint64_t)&WebCore::JSXPathResult::s_info + ~((_QWORD)&WebCore::JSXPathResult::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSXPathResult::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSXPathResult::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSXPathResultPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSXPathResultPrototype::create((WebCore::JSXPathResultPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSXPathResult::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSXPathResult::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<10u>((JSC::VM *)a1, (uint64_t)&WebCore::JSXPathResult::s_info, (uint64_t)&WebCore::JSXPathResultConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7440) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsXPathResultConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXPathResultPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSXPathResult>,(WebCore::DOMConstructorID)930>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsXPathResult_resultType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 64) | 0xFFFE000000000000;
}

unint64_t WebCore::jsXPathResult_numberValue(JSC *this, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  JSC::VM *v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD v13[2];
  int v14;
  char v15[8];
  WTF::StringImpl *v16;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_WORD *)(v2 + 64) == 1)
  {
    v3 = WebCore::XPath::Value::toNumber((WebCore::XPath::Value *)(v2 + 8));
    *(double *)v13 = v3;
    v14 = 0;
    if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v4 = (int)v3, v3 == (double)(int)v4)
      && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
    {
      v5 = 0;
      v6 = v4 | 0xFFFE000000000000;
    }
    else
    {
      v5 = 0;
      v6 = *(_QWORD *)&v3 + 0x2000000000000;
    }
  }
  else
  {
    v8 = (JSC::VM *)*((_QWORD *)this + 7);
    LOBYTE(v13[0]) = 33;
    v14 = 1;
    v15[0] = 33;
    v13[1] = 0;
    v16 = 0;
    if (!*((_QWORD *)v8 + 2))
    {
      v9.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v16);
      JSC::VM::throwException(v8, this, v9);
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    v6 = 0;
    v5 = 1;
  }
  ((void (*)(char *, _QWORD *))off_1E3346AB8[v5])(v15, v13);
  return v6;
}

uint64_t WebCore::jsXPathResult_stringValue(JSC *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v7[2];
  int v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)(a2 + 24);
  v9 = *((_QWORD *)a1 + 7);
  if (*(_WORD *)(v3 + 64) == 2)
  {
    WebCore::XPath::Value::toString((WTF::StringImpl *)(v3 + 8), v7);
    v4 = 0;
  }
  else
  {
    LOBYTE(v7[0]) = 33;
    v7[1] = 0;
    v4 = 1;
  }
  v8 = v4;
  v5 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(a1, (WTF::StringImpl *)&v9, (unsigned __int8 *)v7);
  if (v8 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E33446B8[v8])(&v10, v7);
  return v5;
}

uint64_t WebCore::jsXPathResult_BOOLeanValue(JSC *this, uint64_t a2)
{
  uint64_t v2;
  int v3;
  JSC::VM *v5;
  JSValue v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13[8];
  uint64_t v14;
  int v15;
  char v16[8];
  WTF::StringImpl *v17;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_WORD *)(v2 + 64) == 3)
  {
    switch(*(_BYTE *)(v2 + 8))
    {
      case 0:
        v3 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 36);
        goto LABEL_15;
      case 1:
        v3 = *(unsigned __int8 *)(v2 + 9);
        goto LABEL_15;
      case 2:
        if (*(double *)(v2 + 16) == 0.0)
          goto LABEL_12;
        LODWORD(v11) = 1;
        break;
      case 3:
        v11 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
        if (!v11)
          break;
        v3 = *(_DWORD *)(v11 + 4);
LABEL_15:
        LODWORD(v11) = v3 != 0;
        break;
      default:
LABEL_12:
        LODWORD(v11) = 0;
        break;
    }
    v10 = 0;
    v13[0] = v11;
    v15 = 0;
    if ((_DWORD)v11)
      v9 = 7;
    else
      v9 = 6;
  }
  else
  {
    v5 = (JSC::VM *)*((_QWORD *)this + 7);
    v13[0] = 33;
    v15 = 1;
    v16[0] = 33;
    v14 = 0;
    v17 = 0;
    if (!*((_QWORD *)v5 + 2))
    {
      v6.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v17);
      JSC::VM::throwException(v5, this, v6);
      v8 = v17;
      v17 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    v9 = 0;
    v10 = 1;
  }
  off_1E3346AC8[v10](v16, v13);
  return v9;
}

unint64_t WebCore::jsXPathResult_singleNodeValue(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 *v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];
  unsigned int v15;
  JSC::VM *v16;
  char v17;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v16 = *(JSC::VM **)(a1 + 56);
  v5 = *(_QWORD *)(16 * (v3 & 0xFFFFFFFE) + 0x28);
  v6 = *(unsigned __int16 *)(v4 + 64);
  if ((v6 & 0xFFFE) != 8)
  {
    LOBYTE(v14[0]) = 33;
    v14[1] = 0;
    v9 = 1;
    goto LABEL_19;
  }
  if (*(_BYTE *)(v4 + 8))
  {
    {
      WebCore::XPath::Expression::evaluationContext(void)::context = 0u;
      *(_OWORD *)&qword_1EE2F9830 = 0u;
    }
    byte_1EE2F9838 = 1;
  }
  v7 = *(_QWORD *)(v4 + 24);
  if (v7)
  {
    v8 = (__int16 *)(v7 + 16);
  }
  else
  {
    v8 = &WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet;
    {
      WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet = 1;
      qword_1EE2F9850 = 0;
      unk_1EE2F9858 = 0;
    }
  }
  v10 = *((_DWORD *)v8 + 5);
  if (v6 == 9)
  {
    if (v10)
    {
      WebCore::XPath::NodeSet::sort((uint64_t)v8);
      if (!*((_DWORD *)v8 + 5))
      {
        __break(0xC471u);
        JUMPOUT(0x1951678DCLL);
      }
      goto LABEL_16;
    }
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  if (!v10)
    goto LABEL_17;
LABEL_16:
  v11 = **((_QWORD **)v8 + 1);
LABEL_18:
  v9 = 0;
  v14[0] = v11;
LABEL_19:
  v15 = v9;
  v12 = WebCore::toJS<WebCore::IDLInterface<WebCore::Node>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)a1, v5, &v16, (unsigned __int8 *)v14);
  if (v15 != -1)
    off_1E3346910[v15](&v17, v14);
  return v12;
}

uint64_t WebCore::jsXPathResult_invalidIteratorState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  if ((*(_WORD *)(v2 + 64) & 0xFFFE) != 4)
    return 6;
  if (*(_QWORD *)(*(_QWORD *)(v2 + 72) + 1288) == *(_QWORD *)(v2 + 80))
    return 6;
  return 7;
}

unint64_t WebCore::jsXPathResult_snapshotLength(JSC *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 *v4;
  JSC::VM *v6;
  JSValue v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  int v16;
  char v17[8];
  WTF::StringImpl *v18;

  v2 = *(_QWORD *)(a2 + 24);
  if ((*(_WORD *)(v2 + 64) & 0xFFFE) == 6)
  {
    if (*(_BYTE *)(v2 + 8))
    {
      {
        WebCore::XPath::Expression::evaluationContext(void)::context = 0u;
        *(_OWORD *)&qword_1EE2F9830 = 0u;
      }
      byte_1EE2F9838 = 1;
    }
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = (__int16 *)(v3 + 16);
    }
    else
    {
      v4 = &WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet;
      {
        WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet = 1;
        qword_1EE2F9850 = 0;
        unk_1EE2F9858 = 0;
      }
    }
    v12 = *((unsigned int *)v4 + 5);
    v14 = v12;
    v16 = 0;
    v11 = 0;
    if ((v12 & 0x80000000) != 0)
      v10 = COERCE__INT64((double)v12) + 0x2000000000000;
    else
      v10 = v12 | 0xFFFE000000000000;
  }
  else
  {
    v6 = (JSC::VM *)*((_QWORD *)this + 7);
    LOBYTE(v14) = 33;
    v16 = 1;
    v17[0] = 33;
    v15 = 0;
    v18 = 0;
    if (!*((_QWORD *)v6 + 2))
    {
      v7.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v18);
      JSC::VM::throwException(v6, this, v7);
      v9 = v18;
      v18 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    v10 = 0;
    v11 = 1;
  }
  ((void (*)(char *, int *))off_1E3346AD8[v11])(v17, &v14);
  return v10;
}

uint64_t WebCore::JSXPathResultOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSXPathResultOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::XPathResult *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::XPathResult *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::XPathResult **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::XPathResult **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::XPathResult **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::XPathResult::~XPathResult(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::XPathResult>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *Allocator;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSXPathResult::s_info + ~((_QWORD)&WebCore::JSXPathResult::s_info << 32)) ^ (((unint64_t)&WebCore::JSXPathResult::s_info + ~((_QWORD)&WebCore::JSXPathResult::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSXPathResult::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSXPathResult::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSXPathResultPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSXPathResultPrototype::create((WebCore::JSXPathResultPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSXPathResult::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSXPathResult::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 7512);
  if (v33)
    goto LABEL_39;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  v54 = *(_QWORD *)(v36 + 7512);
  if (!v54)
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v37, &v56, v30 + 192, v30 + 1872, 32, 8, &v55);
    v39 = (uint64_t)v55;
    v55 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v56;
    v56 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v54 = v37;
    v41 = *(_QWORD *)(v36 + 7512);
    *(_QWORD *)(v36 + 7512) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    v42 = *(unsigned int *)(v34 + 2844);
    if ((_DWORD)v42 == *(_DWORD *)(v34 + 2840))
    {
      v43 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 2832, v42 + 1, (unint64_t)&v54);
      v42 = *(unsigned int *)(v34 + 2844);
      *(_QWORD *)(*(_QWORD *)(v34 + 2832) + 8 * v42) = *v43;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v34 + 2832) + 8 * v42) = v37;
    }
    *(_DWORD *)(v34 + 2844) = v42 + 1;
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v44 = *(_QWORD *)(v32 + 7512);
  *(_QWORD *)(v32 + 7512) = v33;
  if (v44)
  {
    v45 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v45, v46);
  }
  v47 = __ldxr((unsigned __int8 *)v34);
  if (v47 != 1)
  {
    __clrex();
    goto LABEL_38;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_38:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_39:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_41;
    }
    v53 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v53);
    v33[5] = SlowCase + (int)v53;
  }
  v33[3] = SlowCase + 32;
LABEL_41:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v48 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337488 & 1) == 0)
  {
    qword_1EE337480 = (uint64_t)&off_1E3343DC0;
    byte_1EE337488 = 1;
  }
  v56 = a3;
  if ((SlowCase & 8) != 0)
    v49 = (SlowCase - 112) | 1;
  else
    v49 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v49 & 1) != 0)
    v50 = v49 + 47;
  else
    v50 = *(_QWORD *)v49 + 32;
  Allocator = *(_QWORD **)(v50 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v50 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337480;
  Allocator[2] = v48;
  v55 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v48 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  if (v55)
    v55[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSXPathResult::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSXPathResult::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSXPathResult::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSXSLTProcessor>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  JSC::JSCell *v43;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v45;
  JSC::JSGlobalObject *v46;
  JSC::VM *v47;
  JSC::Structure *v48;
  uint64_t FunctionRealm;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  int v57;
  JSC::JSObject *v58;
  unint64_t v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::JSCell *v62;
  uint64_t v63;
  unint64_t SubclassStructure;
  unint64_t v66;
  JSC::VM *v67;
  _QWORD *v69;
  WTF *v70;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v5 = 1;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(v6 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSXSLTProcessor::s_info + ~((_QWORD)&WebCore::JSXSLTProcessor::s_info << 32)) ^ (((unint64_t)&WebCore::JSXSLTProcessor::s_info + ~((_QWORD)&WebCore::JSXSLTProcessor::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSXSLTProcessor::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_8;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::JSXSLTProcessor::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(uint64_t **)(v6 + 56);
  Structure = WebCore::JSXSLTProcessorPrototype::createStructure(v16, v6, *(JSC::JSCell **)(v6 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSXSLTProcessorPrototype::create((WebCore::JSXSLTProcessorPrototype *)v16, Structure, v18, v19);
  v21 = WebCore::JSXSLTProcessor::createStructure(v16, v6, v20);
  v15 = WebCore::cacheDOMStructure((JSCell *)v6, v21, (uint64_t)&WebCore::JSXSLTProcessor::s_info);
LABEL_8:
  v22 = *(_QWORD *)(v6 + 56);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 7520);
  if (v25)
    goto LABEL_28;
  v26 = *(_QWORD *)(v23 + 22648);
  v27 = __ldaxr((unsigned __int8 *)v26);
  v67 = v3;
  if (v27)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  if (!*(_QWORD *)(v28 + 7520))
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v70, "IsoSpace T");
    v69 = 0;
    MEMORY[0x19AEA3204](v29, &v70, v22 + 192, v22 + 1872, 32, 8, &v69);
    v31 = (uint64_t)v69;
    v69 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v70;
    v70 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v33 = *(_QWORD *)(v28 + 7520);
    *(_QWORD *)(v28 + 7520) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v24 + 7520);
  *(_QWORD *)(v24 + 7520) = v25;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v26);
  v3 = v67;
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_28:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_29:
    v25[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v66 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v66);
    v25[5] = SlowCase + (int)v66;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = v5;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v39 = *(_QWORD *)(v6 + 3320);
  if ((byte_1EE337498 & 1) == 0)
  {
    qword_1EE337490 = (uint64_t)&off_1E3343DF0;
    byte_1EE337498 = 1;
  }
  v70 = v5;
  if ((SlowCase & 8) != 0)
    v40 = (SlowCase - 112) | 1;
  else
    v40 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v40 & 1) != 0)
    v41 = v40 + 47;
  else
    v41 = *(_QWORD *)v40 + 32;
  Allocator = *(_QWORD **)(v41 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v41 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337490;
  Allocator[2] = v39;
  v69 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v70, (uint64_t *)&v69);
  if (v69)
    v69[1] = 3;
  v43 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v43 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v43);
    if (Object)
    {
      v46 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v47 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v45);
        if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
        {
          v50 = *(_QWORD *)(FunctionRealm + 3296);
          if (v50)
          {
            v51 = *(_DWORD *)(v50 - 8);
            v52 = ((unint64_t)&WebCore::JSXSLTProcessor::s_info
                 + ~((_QWORD)&WebCore::JSXSLTProcessor::s_info << 32)) ^ (((unint64_t)&WebCore::JSXSLTProcessor::s_info
                                                                         + ~((_QWORD)&WebCore::JSXSLTProcessor::s_info << 32)) >> 22);
            v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            v55 = v51 & ((v54 >> 31) ^ v54);
            v56 = *(char ***)(v50 + 16 * v55);
            if (v56 == &WebCore::JSXSLTProcessor::s_info)
            {
LABEL_52:
              v58 = *(JSC::JSObject **)(v50 + 16 * v55 + 8);
              if (v58)
              {
LABEL_54:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v46, v58, v48);
                if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
                  JSC::JSObject::setStructure((JSCell *)SlowCase, v47, SubclassStructure);
                goto LABEL_56;
              }
            }
            else
            {
              v57 = 1;
              while (v56)
              {
                v55 = ((_DWORD)v55 + v57) & v51;
                v56 = *(char ***)(v50 + 16 * v55);
                ++v57;
                if (v56 == &WebCore::JSXSLTProcessor::s_info)
                  goto LABEL_52;
              }
            }
          }
          v59 = WebCore::JSXSLTProcessorPrototype::createStructure((uint64_t *)v47, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(v59 + 16) |= 0x80000u;
          v62 = (JSC::JSCell *)WebCore::JSXSLTProcessorPrototype::create(v47, v59, v60, v61);
          v63 = WebCore::JSXSLTProcessor::createStructure((uint64_t *)v47, FunctionRealm, v62);
          v58 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v63, (uint64_t)&WebCore::JSXSLTProcessor::s_info);
          goto LABEL_54;
        }
      }
    }
  }
LABEL_56:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  return SlowCase;
}

WebCore::XSLTProcessor *WebCore::JSXSLTProcessor::destroy(WebCore::JSXSLTProcessor *this, JSC::JSCell *a2)
{
  WebCore::XSLTProcessor *result;
  WTF *v4;
  void *v5;

  result = (WebCore::XSLTProcessor *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::XSLTProcessor::~XSLTProcessor(result, a2);
      return (WebCore::XSLTProcessor *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSXSLTProcessor::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSXSLTProcessorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSXSLTProcessorPrototype::create(WebCore::JSXSLTProcessorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSXSLTProcessor::s_info, (uint64_t)&WebCore::JSXSLTProcessorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXSLTProcessor>,(WebCore::DOMConstructorID)931>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7448);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSXSLTProcessor>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSXSLTProcessor::s_info + ~((_QWORD)&WebCore::JSXSLTProcessor::s_info << 32)) ^ (((unint64_t)&WebCore::JSXSLTProcessor::s_info + ~((_QWORD)&WebCore::JSXSLTProcessor::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSXSLTProcessor::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSXSLTProcessor::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSXSLTProcessorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSXSLTProcessorPrototype::create((WebCore::JSXSLTProcessorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSXSLTProcessor::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSXSLTProcessor::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7448) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsXSLTProcessorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSXSLTProcessorPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSXSLTProcessor>,(WebCore::DOMConstructorID)931>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSXSLTProcessorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSXSLTProcessorOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::XSLTProcessor *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::XSLTProcessor *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::XSLTProcessor **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::XSLTProcessor **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::XSLTProcessor **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::XSLTProcessor::~XSLTProcessor(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

void WebCore::JSWorkerOwner::~JSWorkerOwner(WebCore::JSWorkerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWorkerLocationOwner::~JSWorkerLocationOwner(WebCore::JSWorkerLocationOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWorkerNavigatorOwner::~JSWorkerNavigatorOwner(WebCore::JSWorkerNavigatorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWorkletOwner::~JSWorkletOwner(WebCore::JSWorkletOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWritableStreamOwner::~JSWritableStreamOwner(WebCore::JSWritableStreamOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWritableStreamSinkOwner::~JSWritableStreamSinkOwner(WebCore::JSWritableStreamSinkOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSXMLHttpRequestOwner::~JSXMLHttpRequestOwner(WebCore::JSXMLHttpRequestOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSXMLHttpRequestUploadOwner::~JSXMLHttpRequestUploadOwner(WebCore::JSXMLHttpRequestUploadOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSXMLSerializerOwner::~JSXMLSerializerOwner(WebCore::JSXMLSerializerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSXPathEvaluatorOwner::~JSXPathEvaluatorOwner(WebCore::JSXPathEvaluatorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSXPathExpressionOwner::~JSXPathExpressionOwner(WebCore::JSXPathExpressionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSXPathResultOwner::~JSXPathResultOwner(WebCore::JSXPathResultOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSXSLTProcessorOwner::~JSXSLTProcessorOwner(WebCore::JSXSLTProcessorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10WheelEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *result;
  WTF *v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  result = (unsigned int *)a2[9];
  a2[9] = 0;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    else
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
    }
  }
  v4 = (WTF *)a2[1];
  a2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v5 = (uint64_t *)*((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      if (v5)
      {
        if (*v5)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v5, (WTF::StringImpl *)a2);
        WTF::fastFree((WTF *)v5, a2);
      }
      v6 = (unsigned int *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
        }
      }
      return (unsigned int *)WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WorkerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WorkerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsWorkerPrototypeFunction_terminate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = (int)this;
  v7 = *((_QWORD *)this + 7);
  v4 = JSC::jsDynamicCast<WebCore::JSWorker *>(*((_QWORD *)a2 + 5));
  if (!v4)
    return (uint64_t)WebCore::throwThisTypeError(v3, (int)&v7, "Worker", "terminate");
  v5 = *(_QWORD *)(v4 + 24);
  (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 104) + 8))(*(_QWORD *)(v5 + 104));
  *(_BYTE *)(v5 + 192) = 1;
  return 10;
}

_BYTE *WebCore::jsWorkerPrototypeFunction_postMessage(WebCore *this, JSC::JSGlobalObject *a2, JSValue a3, WebCore::JSWorker *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v15;
  int hasIteratorMethod;
  JSValue v17;
  char hasExceptionsAfterHandlingTraps;
  int v19;
  _QWORD v20[2];

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v20[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v20, "Worker", "postMessage");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSWorker::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSWorker::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)v20, "Worker", "postMessage");
  v20[1] = v5;
  v12 = *((int *)a2 + 8) - 1;
  if (v12 >= 2)
    v12 = 2;
  if (v12 == 1)
    return (_BYTE *)WebCore::jsWorkerPrototypeFunction_postMessage2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  if (v12 != 2)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v17);
  }
  v15 = *((_QWORD *)a2 + 7);
  if (v15 == 10 || (v15 & 0xFFFFFFFFFFFFFFF7) == 2)
    return (_BYTE *)WebCore::jsWorkerPrototypeFunction_postMessage2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  hasIteratorMethod = JSC::hasIteratorMethod(this, *((JSC::JSGlobalObject **)a2 + 7), a3);
  if (*((_DWORD *)v5 + 20))
  {
    v19 = hasIteratorMethod;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((hasExceptionsAfterHandlingTraps & 1) == 0 && ((v19 ^ 1) & 1) == 0)
      return (_BYTE *)WebCore::jsWorkerPrototypeFunction_postMessage1Body(this, *((JSC::JSGlobalObject **)a2 + 6), *((_QWORD *)a2 + 7), *(WebCore::JSWorker **)(v6 + 24));
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
  }
  else if (hasIteratorMethod)
  {
    return (_BYTE *)WebCore::jsWorkerPrototypeFunction_postMessage1Body(this, *((JSC::JSGlobalObject **)a2 + 6), *((_QWORD *)a2 + 7), *(WebCore::JSWorker **)(v6 + 24));
  }
  if ((v15 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v15 + 5) >= 0x17u)
    return (_BYTE *)WebCore::jsWorkerPrototypeFunction_postMessage2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  return (_BYTE *)JSC::throwTypeError();
}

uint64_t WebCore::jsWorkerPrototypeFunction_postMessage2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWorker *a4)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  int v25;
  JSC::VM *v26;
  char v27[8];
  WTF::StringImpl *v28;
  char v29;
  WTF *v30;
  WTF::StringImpl *v31;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v6;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v7 = 10;
  else
    v7 = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::StructuredSerializeOptions>((JSC::JSCell *)v7, this, (uint64_t)&v23);
  v9 = v25;
  if (!v25)
  {
    v30 = v23;
    v10 = v24;
    v23 = 0;
    v24 = 0;
    v31 = v10;
    WebCore::Worker::postMessage(a3, this, v8, (uint64_t)&v30, (uint64_t)v27);
    v12 = v30;
    if (HIDWORD(v31))
    {
      v17 = 8 * HIDWORD(v31);
      do
      {
        v18 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          v19 = (uint64_t *)(v18 - 16);
          v20 = *(_QWORD *)(((v18 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v21 = *(uint64_t **)(v18 - 8);
          if (v21)
          {
            v22 = *v19;
            *v21 = *v19;
            *(_QWORD *)(v22 + 8) = v21;
            *v19 = 0;
            v19[1] = 0;
          }
          *v19 = *(_QWORD *)(v20 + 40);
          *(_QWORD *)(v20 + 40) = v19;
          *(_QWORD *)v12 = 0;
        }
        v12 = (WTF *)((char *)v12 + 8);
        v17 -= 8;
      }
      while (v17);
      v12 = v30;
    }
    if (v12)
    {
      v30 = 0;
      LODWORD(v31) = 0;
      WTF::fastFree(v12, v11);
    }
    if (!v29)
    {
      v13 = 10;
LABEL_9:
      v9 = v25;
      goto LABEL_10;
    }
    LOBYTE(v30) = v27[0];
    v15 = v28;
    v28 = 0;
    v31 = v15;
    if (!*((_QWORD *)v6 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v26, (unsigned __int8 *)&v30);
      v15 = v31;
    }
    v31 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v29)
    {
      v16 = v28;
      v28 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 != 2)
        {
          v13 = 0;
          *(_DWORD *)v16 -= 2;
          goto LABEL_9;
        }
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v11);
      }
    }
    v13 = 0;
    goto LABEL_9;
  }
  v13 = 0;
LABEL_10:
  if (v9 != -1)
    ((void (*)(char *, WTF **))off_1E33441E8[v9])(v27, &v23);
  return v13;
}

uint64_t WebCore::jsWorkerPrototypeFunction_postMessage1Body(WebCore *this, JSC::JSGlobalObject *a2, uint64_t a3, WebCore::JSWorker *a4)
{
  WTF *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  JSValue v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  char v33;
  WTF *v34;
  WTF::StringImpl *v35;

  v8 = (WTF *)*((_QWORD *)this + 7);
  v34 = v8;
  if ((a3 & 0xFFFE000000000002) != 0 || (v9 = *(unsigned __int8 *)(a3 + 5), v9 <= 0x16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v11 = v31;
    v31 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v30 = 1;
  }
  else if (v9 == 36 && (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)a3) & 1) != 0)
  {
    WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLObject>>::convertArray((JSC::VM **)this, a3, (uint64_t)&v28);
  }
  else
  {
    WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLObject>>::convert(this, a3, (uint64_t)&v28);
  }
  v12 = v30;
  if (!v30)
  {
    v34 = v28;
    v13 = v29;
    v28 = 0;
    v29 = 0;
    v35 = v13;
    WebCore::Worker::postMessage(a4, this, (uint64_t)a2, (uint64_t)&v34, (uint64_t)&v31);
    v15 = v34;
    if (HIDWORD(v35))
    {
      v22 = 8 * HIDWORD(v35);
      do
      {
        v23 = *(_QWORD *)v15;
        if (*(_QWORD *)v15)
        {
          v24 = (uint64_t *)(v23 - 16);
          v25 = *(_QWORD *)(((v23 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v26 = *(uint64_t **)(v23 - 8);
          if (v26)
          {
            v27 = *v24;
            *v26 = *v24;
            *(_QWORD *)(v27 + 8) = v26;
            *v24 = 0;
            v24[1] = 0;
          }
          *v24 = *(_QWORD *)(v25 + 40);
          *(_QWORD *)(v25 + 40) = v24;
          *(_QWORD *)v15 = 0;
        }
        v15 = (WTF *)((char *)v15 + 8);
        v22 -= 8;
      }
      while (v22);
      v15 = v34;
      if (!v34)
      {
LABEL_14:
        if (!v33)
        {
          v16 = 10;
LABEL_16:
          v12 = v30;
          goto LABEL_17;
        }
        v18 = (WTF::StringImpl *)v31;
        LOBYTE(v34) = (_BYTE)v31;
        v19 = v32;
        v32 = 0;
        v35 = v19;
        if (!*((_QWORD *)v8 + 2))
        {
          v20.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v31, (JSC::JSGlobalObject *)&v35);
          JSC::VM::throwException(v8, this, v20);
          v19 = v35;
        }
        v35 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
        if (v33)
        {
          v21 = v32;
          v32 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 != 2)
            {
              v16 = 0;
              *(_DWORD *)v21 -= 2;
              goto LABEL_16;
            }
            WTF::StringImpl::destroy(v21, v18);
          }
        }
        v16 = 0;
        goto LABEL_16;
      }
    }
    else if (!v34)
    {
      goto LABEL_14;
    }
    v34 = 0;
    LODWORD(v35) = 0;
    WTF::fastFree(v15, v14);
    goto LABEL_14;
  }
  v16 = 0;
LABEL_17:
  if (v12 != -1)
    ((void (*)(WTF::StringImpl **, WTF **))off_1E3344098[v12])(&v31, &v28);
  return v16;
}

_BYTE *WebCore::jsWorkerGlobalScopePrototypeFunction_importScripts(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v4;
  unint64_t v5;
  uint64_t Object;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSC::VM *v13;
  uint64_t v14;
  int v15;
  WTF *v16;
  WTF *v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  char **v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v43;
  JSValue v44;
  WTF::StringImpl *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  JSC::VM *v54;
  uint64_t v55;
  WTF *v56;
  int v57;
  unsigned __int8 v58;
  _BYTE v59[8];
  WTF::StringImpl *v60;
  char v61;
  _BYTE v62[8];
  int v63;
  char v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  char v67;
  unsigned int v68;
  uint64_t v69;

  v4 = (JSC::JSGlobalObject *)this;
  v69 = *MEMORY[0x1E0C80C00];
  v55 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)v4, (int)&v55, "WorkerGlobalScope", "importScripts");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return WebCore::throwThisTypeError((int)v4, (int)&v55, "WorkerGlobalScope", "importScripts");
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v28 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v29 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v30 = (char **)(16 * v28);
    if ((_DWORD)v28)
      v31 = v30 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v31 = 1;
    if (!v31)
    {
      do
      {
        v30 = (char **)v30[2];
        v29 = v30 != 0;
      }
      while (v30 != &WebCore::JSWorkerGlobalScope::s_info && v30 != 0);
    }
    if (v29)
      goto LABEL_19;
    return WebCore::throwThisTypeError((int)v4, (int)&v55, "WorkerGlobalScope", "importScripts");
  }
  Object = *(_QWORD *)(Object + 16);
  v7 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWorkerGlobalScope::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWorkerGlobalScope::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)v4, (int)&v55, "WorkerGlobalScope", "importScripts");
LABEL_19:
  v12 = *(_QWORD *)(Object + 3400);
  v13 = (JSC::VM *)*((_QWORD *)v4 + 7);
  v14 = *((int *)a2 + 8);
  v15 = v14 - 1;
  if (v14 == 1)
  {
    v56 = 0;
  }
  else
  {
    v16 = (WTF *)WTF::fastMalloc((WTF *)((16 * (v14 - 1)) | 8));
    v17 = v16;
    *(_DWORD *)v16 = v15;
    if (v15)
    {
      v52 = v15;
      v53 = v12;
      v18 = 0;
      v19 = (_DWORD *)((char *)v16 + 8);
      v54 = v13;
      v20 = 0x600000000;
      v21 = (_DWORD *)((char *)v16 + 8);
      while (1)
      {
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScriptURL>,WebCore::IDLUSVString>>::convert(v4, *(_QWORD *)((char *)a2 + (v20 >> 29)), (uint64_t)&v65);
        v23 = v68;
        if (v68)
        {
          v59[0] = 0;
          v61 = 0;
        }
        else
        {
          WebCore::ConversionResult<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedScriptURL>,WebCore::IDLUSVString>>::releaseReturnValue((uint64_t)v62, (uint64_t)&v65);
          v59[0] = 0;
          LODWORD(v60) = -1;
          v24 = v63;
          if (v63 == -1)
          {
            v61 = 1;
          }
          else
          {
            ((void (*)(char *, _BYTE *, _BYTE *))off_1E33440B8[v63])(&v64, v59, v62);
            LODWORD(v60) = v24;
            v61 = 1;
            if (v63 != -1)
              ((void (*)(char *, _BYTE *))off_1E33440A8[v63])(&v64, v62);
          }
          v23 = v68;
        }
        if (v23 != 0xFFFFFFFFLL)
          ((void (*)(_BYTE *, WTF::StringImpl **))off_1E33440E8[v23])(v62, &v66);
        if (*((_DWORD *)v54 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v54))
        {
          v26 = 0;
          LOBYTE(v56) = 0;
        }
        else
        {
          LOBYTE(v56) = 0;
          v58 = 0;
          if (!v61)
            break;
          v57 = -1;
          v25 = (int)v60;
          if ((_DWORD)v60 != -1)
          {
            ((void (*)(uint64_t *, WTF **, _BYTE *))off_1E33440B8[v60])(&v65, &v56, v59);
            v57 = v25;
          }
          v26 = 1;
        }
        v58 = v26;
        if (v61 && (_DWORD)v60 != -1)
        {
          ((void (*)(uint64_t *, _BYTE *))off_1E33440A8[v60])(&v65, v59);
          v26 = v58;
        }
        if (!v26)
          break;
        *(_BYTE *)v21 = 0;
        v21[2] = -1;
        v27 = v57;
        if (v57 != -1)
        {
          ((void (*)(uint64_t *, _DWORD *, WTF **))off_1E33440B8[v57])(&v65, v21, &v56);
          v21[2] = v27;
          if (v58)
          {
            if (v57 != -1)
              ((void (*)(uint64_t *, WTF **))off_1E33440A8[v57])(&v65, &v56);
          }
        }
        ++v18;
        v20 += 0x100000000;
        v21 += 4;
        if (v18 >= *(unsigned int *)v17)
        {
          LODWORD(v18) = *(_DWORD *)v17;
          goto LABEL_61;
        }
      }
      *(_DWORD *)v17 = v18;
LABEL_61:
      if ((_DWORD)v18 != v52)
      {
        if ((_DWORD)v18)
        {
          v34 = 16 * v18;
          do
          {
            v35 = v19[2];
            if ((_DWORD)v35 != -1)
              ((void (*)(uint64_t *, _DWORD *))off_1E33440A8[v35])(&v65, v19);
            v19[2] = -1;
            v19 += 4;
            v34 -= 16;
          }
          while (v34);
        }
        WTF::fastFree(v17, v22);
        v17 = 0;
      }
      v13 = v54;
      v12 = v53;
    }
    if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
    {
      v56 = 0;
      if (v17)
      {
        v47 = v12;
        v49 = (char *)v17 + 8;
        v48 = *(unsigned int *)v17;
        if ((_DWORD)v48)
        {
          v50 = 16 * v48;
          do
          {
            v51 = *((unsigned int *)v49 + 2);
            if ((_DWORD)v51 != -1)
              ((void (*)(uint64_t *, char *))off_1E33440A8[v51])(&v65, v49);
            *((_DWORD *)v49 + 2) = -1;
            v49 += 16;
            v50 -= 16;
          }
          while (v50);
        }
        WTF::fastFree(v17, v46);
        v12 = v47;
      }
    }
    else
    {
      v56 = v17;
    }
  }
  if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF **))(*(_QWORD *)v12 + 496))(&v65, v12, &v56);
    if (!v67)
    {
      v33 = 10;
      goto LABEL_74;
    }
    v36 = (WTF::StringImpl *)v65;
    v59[0] = v65;
    v43 = v66;
    v66 = 0;
    v60 = v43;
    if (!*((_QWORD *)v13 + 2))
    {
      v44.super.isa = (Class)WebCore::createDOMException(v4, (JSC::JSGlobalObject *)v65, (JSC::JSGlobalObject *)&v60);
      JSC::VM::throwException(v13, v4, v44);
      v43 = v60;
    }
    v60 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v36);
      else
        *(_DWORD *)v43 -= 2;
    }
    if (v67)
    {
      v45 = v66;
      v66 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 != 2)
        {
          v33 = 0;
          *(_DWORD *)v45 -= 2;
          goto LABEL_74;
        }
        WTF::StringImpl::destroy(v45, v36);
      }
    }
  }
  v33 = 0;
LABEL_74:
  v37 = v56;
  v56 = 0;
  if (v37)
  {
    v39 = (char *)v37 + 8;
    v38 = *(unsigned int *)v37;
    if ((_DWORD)v38)
    {
      v40 = 16 * v38;
      do
      {
        v41 = *((unsigned int *)v39 + 2);
        if ((_DWORD)v41 != -1)
          ((void (*)(uint64_t *, char *))off_1E33440A8[v41])(&v65, v39);
        *((_DWORD *)v39 + 2) = -1;
        v39 += 16;
        v40 -= 16;
      }
      while (v40);
    }
    WTF::fastFree(v37, v36);
  }
  return (_BYTE *)v33;
}

uint64_t WebCore::jsWorkerGlobalScopePrototypeFunction_reportError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC *v4;
  unint64_t v5;
  uint64_t Object;
  JSC::JSGlobalObject *v7;
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  JSC::VM *v25;
  JSValue v26;
  uint64_t v27;

  v4 = (JSC *)this;
  v27 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v27, "WorkerGlobalScope", "reportError");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v27, "WorkerGlobalScope", "reportError");
  v8 = (JSC::JSGlobalObject *)Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v20 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWorkerGlobalScope::s_info && v22 != 0);
    }
    if (v21)
      goto LABEL_19;
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v27, "WorkerGlobalScope", "reportError");
  }
  v8 = *(JSC::JSGlobalObject **)(Object + 16);
  v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSWorkerGlobalScope::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSWorkerGlobalScope::s_info && v11 != 0);
  }
  if (!v10)
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v27, "WorkerGlobalScope", "reportError");
LABEL_19:
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25 = (JSC::VM *)*((_QWORD *)v4 + 7);
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(v4, v7);
    return JSC::VM::throwException(v25, v4, v26);
  }
  else
  {
    v14 = *(_QWORD *)(*((_QWORD *)v8 + 7) + 112);
    if (!*(_BYTE *)(v14 + 6))
      goto LABEL_40;
    v15 = *((_QWORD *)a2 + 6);
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v17)
      v17 = WTF::Thread::initializeCurrentTLS(0);
    if (v16 == v17)
    {
      if ((v15 & 0xFFFE000000000002) != 0
        || (v18 = v15, MEMORY[0x1E0CBEE50] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)))
      {
        v18 = JSC::Exception::create();
      }
      WebCore::reportException(v8, v18, 0, 0, 0);
      return 10;
    }
    else
    {
LABEL_40:
      result = 43;
      __break(0xC471u);
    }
  }
  return result;
}

_BYTE *WebCore::jsWorkerGlobalScopePrototypeFunction_atob(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v4;
  unint64_t v5;
  uint64_t Object;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  char **v14;
  BOOL v15;
  JSC::VM *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  JSValue v27;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v29;
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  int v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;

  v4 = (JSC::JSGlobalObject *)this;
  v30 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)v4, (int)&v30, "WorkerGlobalScope", "atob");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return WebCore::throwThisTypeError((int)v4, (int)&v30, "WorkerGlobalScope", "atob");
  if (*(_BYTE *)(Object + 5) == 32)
  {
    v8 = *(unsigned int *)(16 * (**(_DWORD **)(Object + 16) & 0xFFFFFFFE) + 0x4C);
    v9 = *(_DWORD *)(16 * (**(_DWORD **)(Object + 16) & 0xFFFFFFFE) + 0x4C) != 0;
    v10 = (char **)(16 * v8);
    if ((_DWORD)v8)
      v11 = v10 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v11 = 1;
    if (!v11)
    {
      do
      {
        v10 = (char **)v10[2];
        v9 = v10 != 0;
      }
      while (v10 != &WebCore::JSWorkerGlobalScope::s_info && v10 != 0);
    }
  }
  else
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v9 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v15 = v14 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v9 = v14 != 0;
      }
      while (v14 != &WebCore::JSWorkerGlobalScope::s_info && v14 != 0);
    }
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)v4, (int)&v30, "WorkerGlobalScope", "atob");
  v17 = (JSC::VM *)*((_QWORD *)v4 + 7);
  v35 = v17;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v18 = *((_QWORD *)a2 + 6);
    v31[0] = v18;
    if ((v18 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v18 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v31, v4);
LABEL_35:
      if (*((_DWORD *)v17 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
        v20 = v36;
        if (hasExceptionsAfterHandlingTraps)
        {
          v34 = 1;
          v36 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v29);
            else
              *(_DWORD *)v20 -= 2;
          }
          v23 = 0;
          v25 = 1;
          goto LABEL_51;
        }
      }
      else
      {
        v20 = v36;
      }
      v34 = 0;
      v33 = 0;
      if (v20)
      {
        WTF::base64DecodeToString();
        if (v36)
        {
          v21 = 0;
          v31[0] = v36;
        }
        else
        {
          LOBYTE(v31[0]) = 3;
          v31[1] = 0;
          v21 = 1;
        }
        v32 = v21;
      }
      else
      {
        v31[0] = 0;
        v32 = 0;
      }
      v23 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(v4, (WTF::StringImpl *)&v35, (unsigned __int8 *)v31);
      if (v32 != -1)
        ((void (*)(WTF::StringImpl **, _QWORD *))off_1E33446B8[v32])(&v36, v31);
      v32 = -1;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v24);
        else
          *(_DWORD *)v20 -= 2;
      }
      v25 = 0;
LABEL_51:
      ((void (*)(_QWORD *, uint64_t *))off_1E3344088[v25])(v31, &v33);
      return (_BYTE *)v23;
    }
    v19 = *(WTF::StringImpl **)(v18 + 8);
    if ((v19 & 1) != 0)
    {
      v19 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v18, v4);
      if (!v19)
        goto LABEL_34;
    }
    else if (!v19)
    {
LABEL_34:
      v36 = v19;
      goto LABEL_35;
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_34;
  }
  v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(v4, v7);
  return (_BYTE *)JSC::VM::throwException(v17, v4, v27);
}

_BYTE *WebCore::jsWorkerGlobalScopePrototypeFunction_btoa(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v4;
  unint64_t v5;
  uint64_t Object;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  char **v14;
  BOOL v15;
  JSC::VM *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF *v22;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int v33;
  JSValue v34;
  WTF::StringImpl *v35;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v37;
  WTF::StringImpl *v38;
  _QWORD v39[2];
  int v40;
  uint64_t v41;
  int v42;
  JSC::VM *v43;
  WTF *v44;
  WTF::StringImpl *v45;

  v4 = (JSC::JSGlobalObject *)this;
  v37 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)v4, (int)&v37, "WorkerGlobalScope", "btoa");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return WebCore::throwThisTypeError((int)v4, (int)&v37, "WorkerGlobalScope", "btoa");
  if (*(_BYTE *)(Object + 5) == 32)
  {
    v8 = *(unsigned int *)(16 * (**(_DWORD **)(Object + 16) & 0xFFFFFFFE) + 0x4C);
    v9 = *(_DWORD *)(16 * (**(_DWORD **)(Object + 16) & 0xFFFFFFFE) + 0x4C) != 0;
    v10 = (char **)(16 * v8);
    if ((_DWORD)v8)
      v11 = v10 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v11 = 1;
    if (!v11)
    {
      do
      {
        v10 = (char **)v10[2];
        v9 = v10 != 0;
      }
      while (v10 != &WebCore::JSWorkerGlobalScope::s_info && v10 != 0);
    }
  }
  else
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v9 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v15 = v14 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v9 = v14 != 0;
      }
      while (v14 != &WebCore::JSWorkerGlobalScope::s_info && v14 != 0);
    }
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)v4, (int)&v37, "WorkerGlobalScope", "btoa");
  v17 = (JSC::VM *)*((_QWORD *)v4 + 7);
  v43 = v17;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v18 = *((_QWORD *)a2 + 6);
    v39[0] = v18;
    if ((v18 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v18 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v39, v4);
LABEL_35:
      if (*((_DWORD *)v17 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
        v20 = v45;
        if (hasExceptionsAfterHandlingTraps)
        {
          v42 = 1;
          v45 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v35);
            else
              *(_DWORD *)v20 -= 2;
          }
          v24 = 0;
          v27 = 1;
          goto LABEL_51;
        }
      }
      else
      {
        v20 = v45;
      }
      v42 = 0;
      v41 = 0;
      v38 = v20;
      if (v20)
      {
        if ((*((_BYTE *)v20 + 16) & 4) != 0)
          goto LABEL_39;
        v29 = *((unsigned int *)v20 + 1);
        if (!(_DWORD)v29)
          goto LABEL_39;
        v30 = 0;
        v31 = (unsigned __int16 *)*((_QWORD *)v20 + 1);
        v32 = 2 * v29;
        do
        {
          v33 = *v31++;
          v30 |= v33;
          v32 -= 2;
        }
        while (v32);
        if (v30 < 0x100)
        {
LABEL_39:
          WTF::String::latin1((WTF::String *)&v38);
          WTF::base64EncodeToString();
          v22 = v44;
          v39[0] = v45;
          v40 = 0;
          v44 = 0;
          v45 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
              WTF::fastFree(v22, v21);
            else
              --*(_DWORD *)v22;
          }
        }
        else
        {
          LOBYTE(v39[0]) = 3;
          v39[1] = 0;
          v40 = 1;
        }
      }
      else
      {
        v39[0] = 0;
        v40 = 0;
      }
      v24 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(v4, (WTF::StringImpl *)&v43, (unsigned __int8 *)v39);
      if (v40 != -1)
        ((void (*)(WTF::StringImpl **, _QWORD *))off_1E33446B8[v40])(&v45, v39);
      v40 = -1;
      v26 = v38;
      v38 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = 0;
LABEL_51:
      ((void (*)(_QWORD *, uint64_t *))off_1E3344088[v27])(v39, &v41);
      return (_BYTE *)v24;
    }
    v19 = *(WTF::StringImpl **)(v18 + 8);
    if ((v19 & 1) != 0)
    {
      v19 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v18, v4);
      if (!v19)
        goto LABEL_34;
    }
    else if (!v19)
    {
LABEL_34:
      v45 = v19;
      goto LABEL_35;
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_34;
  }
  v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(v4, v7);
  return (_BYTE *)JSC::VM::throwException(v17, v4, v34);
}

_BYTE *WebCore::jsWorkerGlobalScopePrototypeFunction_setTimeout(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v3;
  WebCore::ScheduledAction **v4;
  unint64_t v5;
  uint64_t Object;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  WebCore::ScheduledAction *v14;
  WebCore::SecurityContext *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  unint64_t v20;
  JSC::VM *v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  char **v25;
  BOOL v26;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  WebCore::ScheduledAction *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  JSValue v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  JSValue v54;
  int v55;
  void *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  JSC::VM *v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  WebCore::ScheduledAction *v77;
  int v78;
  int v79[2];
  WTF::StringImpl *v80;
  uint64_t *v81;
  WebCore::ScheduledAction **v82;
  WebCore::ScheduledAction *v83;
  uint64_t v84;
  WTF::StringImpl *v85;

  v3 = a2;
  v4 = (WebCore::ScheduledAction **)this;
  v75 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)v4, (int)&v75, "WorkerGlobalScope", "setTimeout");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return WebCore::throwThisTypeError((int)v4, (int)&v75, "WorkerGlobalScope", "setTimeout");
  v8 = Object;
  if (*(_BYTE *)(Object + 5) == 32)
  {
    v8 = *(_QWORD *)(Object + 16);
    v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
    v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
    v11 = (char **)(16 * v9);
    if ((_DWORD)v9)
      v12 = v11 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v12 = 1;
    if (!v12)
    {
      do
      {
        v11 = (char **)v11[2];
        v10 = v11 != 0;
      }
      while (v11 != &WebCore::JSWorkerGlobalScope::s_info && v11 != 0);
    }
    if (v10)
      goto LABEL_19;
    return WebCore::throwThisTypeError((int)v4, (int)&v75, "WorkerGlobalScope", "setTimeout");
  }
  v23 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v24 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v25 = (char **)(16 * v23);
  if ((_DWORD)v23)
    v26 = v25 == &WebCore::JSWorkerGlobalScope::s_info;
  else
    v26 = 1;
  if (!v26)
  {
    do
    {
      v25 = (char **)v25[2];
      v24 = v25 != 0;
    }
    while (v25 != &WebCore::JSWorkerGlobalScope::s_info && v25 != 0);
  }
  if (!v24)
    return WebCore::throwThisTypeError((int)v4, (int)&v75, "WorkerGlobalScope", "setTimeout");
LABEL_19:
  v14 = v4[7];
  if (*((_DWORD *)v3 + 8) == 1)
  {
    v51.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)v4, v7);
    return (_BYTE *)JSC::VM::throwException(v14, (JSC::JSGlobalObject *)v4, v51);
  }
  v15 = *(WebCore::SecurityContext **)(v8 + 3400);
  v16 = *((_QWORD *)v3 + 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v84 = *(_QWORD *)v79;
  WebCore::Converter<WebCore::IDLScheduledAction>::convert((uint64_t)v4, v16, v8, &v84, (uint64_t)&v77);
  v18 = (WTF::StringImpl *)v84;
  v84 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v78;
  if (!v78)
  {
    if ((unint64_t)(*((int *)v3 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      *(_QWORD *)v79 = 10;
      v21 = v4[7];
    }
    else
    {
      v20 = *((_QWORD *)v3 + 7);
      *(_QWORD *)v79 = v20;
      v21 = v4[7];
      if (v20 >= 0xFFFE000000000000)
      {
        v22 = v20;
LABEL_51:
        if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
        {
          v29 = 0;
        }
        else
        {
          v84 = 2;
          v83 = v4[7];
          v35 = *((int *)v3 + 8);
          if ((unint64_t)(v35 - 4) < 0xFFFFFFFFFFFFFFFDLL)
          {
            v55 = v35 - 3;
            *(_QWORD *)v79 = v4;
            v80 = v3;
            v81 = &v84;
            v82 = &v83;
            v3 = (JSC::JSGlobalObject *)WTF::fastMalloc((WTF *)(8 * (v35 - 3) + 8));
            v57 = *WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>,JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>::TrailingArray<WTF::FixedVector<WebCore::VariadicConverter<WebCore::IDLAny>::Item> WebCore::convertVariadicArguments<WebCore::IDLAny>(JSC::JSGlobalObject &,JSC::CallFrame &,unsigned long)::{lambda(unsigned long)#1}>(v3, v55, (uint64_t)v79);
            if ((_DWORD)v57 != v55)
            {
              if ((_DWORD)v57)
              {
                v58 = (uint64_t *)((char *)v3 + 8);
                v59 = 8 * v57;
                do
                {
                  v60 = *v58;
                  if (*v58)
                  {
                    v61 = (uint64_t *)(v60 - 16);
                    v62 = *(_QWORD *)(((v60 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v63 = *(uint64_t **)(v60 - 8);
                    if (v63)
                    {
                      v64 = *v61;
                      *v63 = *v61;
                      *(_QWORD *)(v64 + 8) = v63;
                      *v61 = 0;
                      v61[1] = 0;
                    }
                    *v61 = *(_QWORD *)(v62 + 40);
                    *(_QWORD *)(v62 + 40) = v61;
                    *v58 = 0;
                  }
                  ++v58;
                  v59 -= 8;
                }
                while (v59);
              }
              WTF::fastFree(v3, v56);
              v3 = 0;
            }
            v65 = v83;
            if (*((_DWORD *)v83 + 20))
              goto LABEL_100;
            goto LABEL_98;
          }
          v76 = 0;
          while (1)
          {
            if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
            {
              v29 = 0;
              goto LABEL_60;
            }
            if (!v78)
            {
              v36 = v77;
              v77 = 0;
              v83 = v36;
              WebCore::WorkerGlobalScope::setTimeout(v15, (uint64_t *)&v83, v22, (uint64_t *)&v76, v79);
              if (!(_DWORD)v81)
              {
                v37 = 0;
                v29 = v79[0] | 0xFFFE000000000000;
                goto LABEL_58;
              }
              if ((_DWORD)v81 == 1)
                break;
            }
            v65 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_100:
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) != 0)
            {
              v76 = 0;
              if (v3)
              {
                v67 = (uint64_t *)((char *)v3 + 8);
                v68 = *(unsigned int *)v3;
                if ((_DWORD)v68)
                {
                  v69 = 8 * v68;
                  do
                  {
                    v70 = *v67;
                    if (*v67)
                    {
                      v71 = (uint64_t *)(v70 - 16);
                      v72 = *(_QWORD *)(((v70 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                      v73 = *(uint64_t **)(v70 - 8);
                      if (v73)
                      {
                        v74 = *v71;
                        *v73 = *v71;
                        *(_QWORD *)(v74 + 8) = v73;
                        *v71 = 0;
                        v71[1] = 0;
                      }
                      *v71 = *(_QWORD *)(v72 + 40);
                      *(_QWORD *)(v72 + 40) = v71;
                      *v67 = 0;
                    }
                    ++v67;
                    v69 -= 8;
                  }
                  while (v69);
                }
                WTF::fastFree(v3, v66);
              }
            }
            else
            {
LABEL_98:
              v76 = v3;
            }
          }
          v52 = (WTF::StringImpl *)LOBYTE(v79[0]);
          LOBYTE(v84) = v79[0];
          v53 = v80;
          v80 = 0;
          v85 = v53;
          if (!*((_QWORD *)v14 + 2))
          {
            v54.super.isa = (Class)WebCore::createDOMException((JSC *)v4, (JSC::JSGlobalObject *)LOBYTE(v79[0]), (JSC::JSGlobalObject *)&v85);
            JSC::VM::throwException(v14, (JSC::JSGlobalObject *)v4, v54);
            v53 = v85;
          }
          v85 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v52);
            else
              *(_DWORD *)v53 -= 2;
          }
          v29 = 0;
          v37 = 1;
LABEL_58:
          ((void (*)(uint64_t *, int *))off_1E33446C8[v37])(&v84, v79);
          LODWORD(v81) = -1;
          if (v83)
          {
            WebCore::ScheduledAction::~ScheduledAction(v83, v38);
            WTF::fastFree(v39, v40);
          }
LABEL_60:
          v41 = v76;
          v76 = 0;
          if (v41)
          {
            v42 = (uint64_t *)((char *)v41 + 8);
            v43 = *(unsigned int *)v41;
            if ((_DWORD)v43)
            {
              v44 = 8 * v43;
              do
              {
                v45 = *v42;
                if (*v42)
                {
                  v46 = (uint64_t *)(v45 - 16);
                  v47 = *(_QWORD *)(((v45 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                  v48 = *(uint64_t **)(v45 - 8);
                  if (v48)
                  {
                    v49 = *v46;
                    *v48 = *v46;
                    *(_QWORD *)(v49 + 8) = v48;
                    *v46 = 0;
                    v46[1] = 0;
                  }
                  *v46 = *(_QWORD *)(v47 + 40);
                  *(_QWORD *)(v47 + 40) = v46;
                  *v42 = 0;
                }
                ++v42;
                v44 -= 8;
              }
              while (v44);
            }
            WTF::fastFree(v41, v38);
          }
        }
        v19 = v78;
        goto LABEL_70;
      }
      v31 = v20 - 0x2000000000000;
      if (v20 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_41:
        v32 = (v31 >> 52) & 0x7FF;
        if ((v32 - 1023) <= 0x53)
        {
          v33 = v31 >> (51 - (v31 >> 52));
          if (v32 > 0x433)
            LODWORD(v33) = v31 << ((v31 >> 52) - 51);
          if (v32 >= 0x41F)
            v34 = v33;
          else
            v34 = (((1 << ((v31 >> 52) + 1)) - 1) & v33) + (1 << ((v31 >> 52) + 1));
          if ((v31 & 0x8000000000000000) == 0)
            v22 = v34;
          else
            v22 = -v34;
        }
        else
        {
          v22 = 0;
        }
        goto LABEL_51;
      }
    }
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v79, (JSC::JSGlobalObject *)v4);
    v31 = v30;
    goto LABEL_41;
  }
  v29 = 0;
LABEL_70:
  if (v19 != -1)
    ((void (*)(int *, WebCore::ScheduledAction **))off_1E33446D8[v19])(v79, &v77);
  return (_BYTE *)v29;
}

uint64_t WebCore::jsWorkerGlobalScopePrototypeFunction_clearTimeout(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v4;
  unint64_t v5;
  uint64_t Object;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::DOMTimer *v12;
  unint64_t v13;
  JSC::VM *v14;
  WebCore::ScriptExecutionContext *v15;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (JSC::JSGlobalObject *)this;
  v29 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v29, "WorkerGlobalScope", "clearTimeout");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v29, "WorkerGlobalScope", "clearTimeout");
  if (*(_BYTE *)(Object + 5) == 32)
  {
    Object = *(_QWORD *)(Object + 16);
    v7 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v8 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v9 = (char **)(16 * v7);
    if ((_DWORD)v7)
      v10 = v9 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v10 = 1;
    if (!v10)
    {
      do
      {
        v9 = (char **)v9[2];
        v8 = v9 != 0;
      }
      while (v9 != &WebCore::JSWorkerGlobalScope::s_info && v9 != 0);
    }
    if (v8)
      goto LABEL_19;
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v29, "WorkerGlobalScope", "clearTimeout");
  }
  v16 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSWorkerGlobalScope::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSWorkerGlobalScope::s_info && v18 != 0);
  }
  if (!v17)
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v29, "WorkerGlobalScope", "clearTimeout");
LABEL_19:
  v12 = *(WebCore::DOMTimer **)(Object + 3400);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30 = 10;
    v14 = (JSC::VM *)*((_QWORD *)v4 + 7);
LABEL_34:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, v4);
    v23 = v22;
LABEL_35:
    v24 = (v23 >> 52) & 0x7FF;
    v25 = v24 - 1023;
    v26 = v23 >> (51 - (v23 >> 52));
    if (v24 > 0x433)
      LODWORD(v26) = v23 << ((v23 >> 52) - 51);
    if (v24 >= 0x41F)
      v27 = v26;
    else
      v27 = (((1 << ((v23 >> 52) + 1)) - 1) & v26) + (1 << ((v23 >> 52) + 1));
    if ((v23 & 0x8000000000000000) == 0)
      v28 = v27;
    else
      v28 = -v27;
    if (v25 <= 0x53)
      v15 = (WebCore::ScriptExecutionContext *)v28;
    else
      v15 = 0;
    goto LABEL_46;
  }
  v13 = *((_QWORD *)a2 + 6);
  v30 = v13;
  v14 = (JSC::VM *)*((_QWORD *)v4 + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v23 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_35;
    goto LABEL_34;
  }
  v15 = (WebCore::ScriptExecutionContext *)v13;
LABEL_46:
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::DOMTimer::removeById(v12, v15);
  return 10;
}

_BYTE *WebCore::jsWorkerGlobalScopePrototypeFunction_setInterval(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v3;
  WebCore::ScheduledAction **v4;
  unint64_t v5;
  uint64_t Object;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  WebCore::ScheduledAction *v14;
  WebCore::SecurityContext *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  unint64_t v20;
  JSC::VM *v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  char **v25;
  BOOL v26;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  WebCore::ScheduledAction *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  JSValue v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  JSValue v54;
  int v55;
  void *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  JSC::VM *v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  WebCore::ScheduledAction *v77;
  int v78;
  int v79[2];
  WTF::StringImpl *v80;
  uint64_t *v81;
  WebCore::ScheduledAction **v82;
  WebCore::ScheduledAction *v83;
  uint64_t v84;
  WTF::StringImpl *v85;

  v3 = a2;
  v4 = (WebCore::ScheduledAction **)this;
  v75 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)v4, (int)&v75, "WorkerGlobalScope", "setInterval");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return WebCore::throwThisTypeError((int)v4, (int)&v75, "WorkerGlobalScope", "setInterval");
  v8 = Object;
  if (*(_BYTE *)(Object + 5) == 32)
  {
    v8 = *(_QWORD *)(Object + 16);
    v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
    v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
    v11 = (char **)(16 * v9);
    if ((_DWORD)v9)
      v12 = v11 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v12 = 1;
    if (!v12)
    {
      do
      {
        v11 = (char **)v11[2];
        v10 = v11 != 0;
      }
      while (v11 != &WebCore::JSWorkerGlobalScope::s_info && v11 != 0);
    }
    if (v10)
      goto LABEL_19;
    return WebCore::throwThisTypeError((int)v4, (int)&v75, "WorkerGlobalScope", "setInterval");
  }
  v23 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v24 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v25 = (char **)(16 * v23);
  if ((_DWORD)v23)
    v26 = v25 == &WebCore::JSWorkerGlobalScope::s_info;
  else
    v26 = 1;
  if (!v26)
  {
    do
    {
      v25 = (char **)v25[2];
      v24 = v25 != 0;
    }
    while (v25 != &WebCore::JSWorkerGlobalScope::s_info && v25 != 0);
  }
  if (!v24)
    return WebCore::throwThisTypeError((int)v4, (int)&v75, "WorkerGlobalScope", "setInterval");
LABEL_19:
  v14 = v4[7];
  if (*((_DWORD *)v3 + 8) == 1)
  {
    v51.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)v4, v7);
    return (_BYTE *)JSC::VM::throwException(v14, (JSC::JSGlobalObject *)v4, v51);
  }
  v15 = *(WebCore::SecurityContext **)(v8 + 3400);
  v16 = *((_QWORD *)v3 + 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v84 = *(_QWORD *)v79;
  WebCore::Converter<WebCore::IDLScheduledAction>::convert((uint64_t)v4, v16, v8, &v84, (uint64_t)&v77);
  v18 = (WTF::StringImpl *)v84;
  v84 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v78;
  if (!v78)
  {
    if ((unint64_t)(*((int *)v3 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      *(_QWORD *)v79 = 10;
      v21 = v4[7];
    }
    else
    {
      v20 = *((_QWORD *)v3 + 7);
      *(_QWORD *)v79 = v20;
      v21 = v4[7];
      if (v20 >= 0xFFFE000000000000)
      {
        v22 = v20;
LABEL_51:
        if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
        {
          v29 = 0;
        }
        else
        {
          v84 = 2;
          v83 = v4[7];
          v35 = *((int *)v3 + 8);
          if ((unint64_t)(v35 - 4) < 0xFFFFFFFFFFFFFFFDLL)
          {
            v55 = v35 - 3;
            *(_QWORD *)v79 = v4;
            v80 = v3;
            v81 = &v84;
            v82 = &v83;
            v3 = (JSC::JSGlobalObject *)WTF::fastMalloc((WTF *)(8 * (v35 - 3) + 8));
            v57 = *WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>,JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>::TrailingArray<WTF::FixedVector<WebCore::VariadicConverter<WebCore::IDLAny>::Item> WebCore::convertVariadicArguments<WebCore::IDLAny>(JSC::JSGlobalObject &,JSC::CallFrame &,unsigned long)::{lambda(unsigned long)#1}>(v3, v55, (uint64_t)v79);
            if ((_DWORD)v57 != v55)
            {
              if ((_DWORD)v57)
              {
                v58 = (uint64_t *)((char *)v3 + 8);
                v59 = 8 * v57;
                do
                {
                  v60 = *v58;
                  if (*v58)
                  {
                    v61 = (uint64_t *)(v60 - 16);
                    v62 = *(_QWORD *)(((v60 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v63 = *(uint64_t **)(v60 - 8);
                    if (v63)
                    {
                      v64 = *v61;
                      *v63 = *v61;
                      *(_QWORD *)(v64 + 8) = v63;
                      *v61 = 0;
                      v61[1] = 0;
                    }
                    *v61 = *(_QWORD *)(v62 + 40);
                    *(_QWORD *)(v62 + 40) = v61;
                    *v58 = 0;
                  }
                  ++v58;
                  v59 -= 8;
                }
                while (v59);
              }
              WTF::fastFree(v3, v56);
              v3 = 0;
            }
            v65 = v83;
            if (*((_DWORD *)v83 + 20))
              goto LABEL_100;
            goto LABEL_98;
          }
          v76 = 0;
          while (1)
          {
            if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
            {
              v29 = 0;
              goto LABEL_60;
            }
            if (!v78)
            {
              v36 = v77;
              v77 = 0;
              v83 = v36;
              WebCore::WorkerGlobalScope::setInterval(v15, (uint64_t *)&v83, v22, (uint64_t *)&v76, v79);
              if (!(_DWORD)v81)
              {
                v37 = 0;
                v29 = v79[0] | 0xFFFE000000000000;
                goto LABEL_58;
              }
              if ((_DWORD)v81 == 1)
                break;
            }
            v65 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_100:
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) != 0)
            {
              v76 = 0;
              if (v3)
              {
                v67 = (uint64_t *)((char *)v3 + 8);
                v68 = *(unsigned int *)v3;
                if ((_DWORD)v68)
                {
                  v69 = 8 * v68;
                  do
                  {
                    v70 = *v67;
                    if (*v67)
                    {
                      v71 = (uint64_t *)(v70 - 16);
                      v72 = *(_QWORD *)(((v70 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                      v73 = *(uint64_t **)(v70 - 8);
                      if (v73)
                      {
                        v74 = *v71;
                        *v73 = *v71;
                        *(_QWORD *)(v74 + 8) = v73;
                        *v71 = 0;
                        v71[1] = 0;
                      }
                      *v71 = *(_QWORD *)(v72 + 40);
                      *(_QWORD *)(v72 + 40) = v71;
                      *v67 = 0;
                    }
                    ++v67;
                    v69 -= 8;
                  }
                  while (v69);
                }
                WTF::fastFree(v3, v66);
              }
            }
            else
            {
LABEL_98:
              v76 = v3;
            }
          }
          v52 = (WTF::StringImpl *)LOBYTE(v79[0]);
          LOBYTE(v84) = v79[0];
          v53 = v80;
          v80 = 0;
          v85 = v53;
          if (!*((_QWORD *)v14 + 2))
          {
            v54.super.isa = (Class)WebCore::createDOMException((JSC *)v4, (JSC::JSGlobalObject *)LOBYTE(v79[0]), (JSC::JSGlobalObject *)&v85);
            JSC::VM::throwException(v14, (JSC::JSGlobalObject *)v4, v54);
            v53 = v85;
          }
          v85 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v52);
            else
              *(_DWORD *)v53 -= 2;
          }
          v29 = 0;
          v37 = 1;
LABEL_58:
          ((void (*)(uint64_t *, int *))off_1E33446C8[v37])(&v84, v79);
          LODWORD(v81) = -1;
          if (v83)
          {
            WebCore::ScheduledAction::~ScheduledAction(v83, v38);
            WTF::fastFree(v39, v40);
          }
LABEL_60:
          v41 = v76;
          v76 = 0;
          if (v41)
          {
            v42 = (uint64_t *)((char *)v41 + 8);
            v43 = *(unsigned int *)v41;
            if ((_DWORD)v43)
            {
              v44 = 8 * v43;
              do
              {
                v45 = *v42;
                if (*v42)
                {
                  v46 = (uint64_t *)(v45 - 16);
                  v47 = *(_QWORD *)(((v45 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                  v48 = *(uint64_t **)(v45 - 8);
                  if (v48)
                  {
                    v49 = *v46;
                    *v48 = *v46;
                    *(_QWORD *)(v49 + 8) = v48;
                    *v46 = 0;
                    v46[1] = 0;
                  }
                  *v46 = *(_QWORD *)(v47 + 40);
                  *(_QWORD *)(v47 + 40) = v46;
                  *v42 = 0;
                }
                ++v42;
                v44 -= 8;
              }
              while (v44);
            }
            WTF::fastFree(v41, v38);
          }
        }
        v19 = v78;
        goto LABEL_70;
      }
      v31 = v20 - 0x2000000000000;
      if (v20 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_41:
        v32 = (v31 >> 52) & 0x7FF;
        if ((v32 - 1023) <= 0x53)
        {
          v33 = v31 >> (51 - (v31 >> 52));
          if (v32 > 0x433)
            LODWORD(v33) = v31 << ((v31 >> 52) - 51);
          if (v32 >= 0x41F)
            v34 = v33;
          else
            v34 = (((1 << ((v31 >> 52) + 1)) - 1) & v33) + (1 << ((v31 >> 52) + 1));
          if ((v31 & 0x8000000000000000) == 0)
            v22 = v34;
          else
            v22 = -v34;
        }
        else
        {
          v22 = 0;
        }
        goto LABEL_51;
      }
    }
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v79, (JSC::JSGlobalObject *)v4);
    v31 = v30;
    goto LABEL_41;
  }
  v29 = 0;
LABEL_70:
  if (v19 != -1)
    ((void (*)(int *, WebCore::ScheduledAction **))off_1E33446D8[v19])(v79, &v77);
  return (_BYTE *)v29;
}

uint64_t WebCore::jsWorkerGlobalScopePrototypeFunction_clearInterval(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v4;
  unint64_t v5;
  uint64_t Object;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::DOMTimer *v12;
  unint64_t v13;
  JSC::VM *v14;
  WebCore::ScriptExecutionContext *v15;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (JSC::JSGlobalObject *)this;
  v29 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v29, "WorkerGlobalScope", "clearInterval");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v29, "WorkerGlobalScope", "clearInterval");
  if (*(_BYTE *)(Object + 5) == 32)
  {
    Object = *(_QWORD *)(Object + 16);
    v7 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v8 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v9 = (char **)(16 * v7);
    if ((_DWORD)v7)
      v10 = v9 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v10 = 1;
    if (!v10)
    {
      do
      {
        v9 = (char **)v9[2];
        v8 = v9 != 0;
      }
      while (v9 != &WebCore::JSWorkerGlobalScope::s_info && v9 != 0);
    }
    if (v8)
      goto LABEL_19;
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v29, "WorkerGlobalScope", "clearInterval");
  }
  v16 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSWorkerGlobalScope::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSWorkerGlobalScope::s_info && v18 != 0);
  }
  if (!v17)
    return (uint64_t)WebCore::throwThisTypeError((int)v4, (int)&v29, "WorkerGlobalScope", "clearInterval");
LABEL_19:
  v12 = *(WebCore::DOMTimer **)(Object + 3400);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30 = 10;
    v14 = (JSC::VM *)*((_QWORD *)v4 + 7);
LABEL_34:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, v4);
    v23 = v22;
LABEL_35:
    v24 = (v23 >> 52) & 0x7FF;
    v25 = v24 - 1023;
    v26 = v23 >> (51 - (v23 >> 52));
    if (v24 > 0x433)
      LODWORD(v26) = v23 << ((v23 >> 52) - 51);
    if (v24 >= 0x41F)
      v27 = v26;
    else
      v27 = (((1 << ((v23 >> 52) + 1)) - 1) & v26) + (1 << ((v23 >> 52) + 1));
    if ((v23 & 0x8000000000000000) == 0)
      v28 = v27;
    else
      v28 = -v27;
    if (v25 <= 0x53)
      v15 = (WebCore::ScriptExecutionContext *)v28;
    else
      v15 = 0;
    goto LABEL_46;
  }
  v13 = *((_QWORD *)a2 + 6);
  v30 = v13;
  v14 = (JSC::VM *)*((_QWORD *)v4 + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v23 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_35;
    goto LABEL_34;
  }
  v15 = (WebCore::ScriptExecutionContext *)v13;
LABEL_46:
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::DOMTimer::removeById(v12, v15);
  return 10;
}

_BYTE *WebCore::jsWorkerGlobalScopePrototypeFunction_queueMicrotask(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v4;
  unint64_t v5;
  uint64_t Object;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;

  v4 = (JSC::JSGlobalObject *)this;
  v23 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject((JSC::JSCell *)this);
    if (Object)
    {
      if (*(_BYTE *)(Object + 5) == 32)
      {
        Object = *(_QWORD *)(Object + 16);
        v12 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v13 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v14 = (char **)(16 * v12);
        if ((_DWORD)v12)
          v15 = v14 == &WebCore::JSWorkerGlobalScope::s_info;
        else
          v15 = 1;
        if (!v15)
        {
          do
          {
            v14 = (char **)v14[2];
            v13 = v14 != 0;
          }
          while (v14 != &WebCore::JSWorkerGlobalScope::s_info && v14 != 0);
        }
        if (v13)
          return (_BYTE *)WebCore::JSWorkerGlobalScope::queueMicrotask((WebCore::JSWorkerGlobalScope *)Object, v4, a2, v7, v8, v9, v10, v11);
      }
      else
      {
        v18 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v19 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v20 = (char **)(16 * v18);
        if ((_DWORD)v18)
          v21 = v20 == &WebCore::JSWorkerGlobalScope::s_info;
        else
          v21 = 1;
        if (!v21)
        {
          do
          {
            v20 = (char **)v20[2];
            v19 = v20 != 0;
          }
          while (v20 != &WebCore::JSWorkerGlobalScope::s_info && v20 != 0);
        }
        if (v19)
          return (_BYTE *)WebCore::JSWorkerGlobalScope::queueMicrotask((WebCore::JSWorkerGlobalScope *)Object, v4, a2, v7, v8, v9, v10, v11);
      }
    }
  }
  return WebCore::throwThisTypeError((int)v4, (int)&v23, "WorkerGlobalScope", "queueMicrotask");
}

unint64_t WebCore::jsWorkerGlobalScopePrototypeFunction_createImageBitmap(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Object;
  JSC::JSGlobalObject *v20;
  uint64_t v21;
  BOOL v22;
  char **v23;
  BOOL v24;
  WebCore::DOMGuardedObject *v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  char **v30;
  BOOL v31;
  JSValue v33;
  uint64_t v34;
  objc_class *v36;
  WebCore::DOMGuardedObject *v37;
  WebCore::DOMGuardedObject *v38;
  WebCore::DOMGuardedObject *v39;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19516BD8CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v38 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v17 + 5) - 51 < 6)
    v17 = 10;
  if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    v18 = (uint64_t)this;
  else
    v18 = v17;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_47;
  Object = JSC::JSCell::getObject((JSC::JSCell *)v18);
  if (!Object)
    goto LABEL_47;
  if (*(_BYTE *)(Object + 5) == 32)
  {
    Object = *(_QWORD *)(Object + 16);
    v21 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v22 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v23 = (char **)(16 * v21);
    if ((_DWORD)v21)
      v24 = v23 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v24 = 1;
    if (!v24)
    {
      do
      {
        v23 = (char **)v23[2];
        v22 = v23 != 0;
      }
      while (v23 != &WebCore::JSWorkerGlobalScope::s_info && v23 != 0);
    }
    if (v22)
      goto LABEL_33;
LABEL_47:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"WorkerGlobalScope", "createImageBitmap", v16);
LABEL_48:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_54;
  }
  v28 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v29 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v30 = (char **)(16 * v28);
  if ((_DWORD)v28)
    v31 = v30 == &WebCore::JSWorkerGlobalScope::s_info;
  else
    v31 = 1;
  if (!v31)
  {
    do
    {
      v30 = (char **)v30[2];
      v29 = v30 != 0;
    }
    while (v30 != &WebCore::JSWorkerGlobalScope::s_info && v30 != 0);
  }
  if (!v29)
    goto LABEL_47;
LABEL_33:
  v26 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
  v39 = v26;
  v27 = *((int *)a2 + 8) - 1;
  if (v27 >= 6)
    v27 = 6;
  switch(v27)
  {
    case 0uLL:
      v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v20);
      JSC::VM::throwException(v26, this, v33);
      break;
    case 1uLL:
    case 2uLL:
      WebCore::jsWorkerGlobalScopePrototypeFunction_createImageBitmap1Body((unint64_t *)this, (uint64_t)a2, *(_QWORD *)(Object + 3400), &v38);
      break;
    case 5uLL:
    case 6uLL:
      WebCore::jsWorkerGlobalScopePrototypeFunction_createImageBitmap2Body((unint64_t *)this, (uint64_t)a2, *(WTF::StringImpl **)(Object + 3400), &v38);
      break;
    default:
      JSC::throwTypeError();
      break;
  }
  v14 = v38;
  if (v38)
    goto LABEL_48;
LABEL_54:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v36 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v39);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v39, v36, 0);
      v37 = v39;
      v39 = 0;
      if (v37)
      {
        if (*((_DWORD *)v37 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v37 + 16))(v37);
        else
          --*((_DWORD *)v37 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsWorkerGlobalScopePrototypeFunction_structuredClone(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC *v4;
  unint64_t v5;
  uint64_t Object;
  JSC::JSGlobalObject *v7;
  WebCore::JSDOMGlobalObject *v8;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  JSValue v31;
  WTF::StringImpl *v32;
  JSValue v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WebCore *v40;
  JSC::JSGlobalObject *v41;
  JSC::CallFrame *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  int v46[2];
  WTF::StringImpl *v47;
  int v48;
  WTF *v49;
  uint64_t v50;
  int v51;
  _BYTE v52[8];
  WTF::StringImpl *v53;

  v4 = (JSC *)this;
  v43 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)v4, (int)&v43, "WorkerGlobalScope", "structuredClone");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return WebCore::throwThisTypeError((int)v4, (int)&v43, "WorkerGlobalScope", "structuredClone");
  v8 = (WebCore::JSDOMGlobalObject *)Object;
  if (*(_BYTE *)(Object + 5) == 32)
  {
    v8 = *(WebCore::JSDOMGlobalObject **)(Object + 16);
    v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
    v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
    v11 = (char **)(16 * v9);
    if ((_DWORD)v9)
      v12 = v11 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v12 = 1;
    if (!v12)
    {
      do
      {
        v11 = (char **)v11[2];
        v10 = v11 != 0;
      }
      while (v11 != &WebCore::JSWorkerGlobalScope::s_info && v11 != 0);
    }
    if (v10)
      goto LABEL_19;
    return WebCore::throwThisTypeError((int)v4, (int)&v43, "WorkerGlobalScope", "structuredClone");
  }
  v16 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSWorkerGlobalScope::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSWorkerGlobalScope::s_info && v18 != 0);
  }
  if (!v17)
    return WebCore::throwThisTypeError((int)v4, (int)&v43, "WorkerGlobalScope", "structuredClone");
LABEL_19:
  v14 = (JSC::VM *)*((_QWORD *)v4 + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(v4, v7);
    return (_BYTE *)JSC::VM::throwException(v14, v4, v31);
  }
  if (*((_DWORD *)a2 + 8) == 2)
    v15 = 10;
  else
    v15 = *((_QWORD *)a2 + 7);
  v23 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::StructuredSerializeOptions>((JSC::JSCell *)v15, v4, (uint64_t)&v49);
  v24 = v51;
  if (v51)
  {
    v22 = 0;
LABEL_42:
    if (v24 != -1)
      ((void (*)(int *, WTF **))off_1E33441E8[v24])(v46, &v49);
    return (_BYTE *)v22;
  }
  v44 = v49;
  v25 = v50;
  v49 = 0;
  v50 = 0;
  v45 = v25;
  WebCore::WindowOrWorkerGlobalScope::structuredClone(v4, v8, v23, (uint64_t)&v44, (uint64_t)v46);
  v26 = v48;
  if (!v48)
  {
    v27 = *(_QWORD *)v46;
    goto LABEL_38;
  }
  if (v48 == 1)
  {
    v28 = (WTF::StringImpl *)LOBYTE(v46[0]);
    v52[0] = v46[0];
    v32 = v47;
    v47 = 0;
    v53 = v32;
    if (!*((_QWORD *)v14 + 2))
    {
      v33.super.isa = (Class)WebCore::createDOMException(v4, (JSC::JSGlobalObject *)LOBYTE(v46[0]), (JSC::JSGlobalObject *)&v53);
      JSC::VM::throwException(v14, v4, v33);
      v32 = v53;
    }
    v53 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v28);
      else
        *(_DWORD *)v32 -= 2;
    }
    v27 = 0;
    v22 = 0;
    v26 = v48;
    if (v48 == -1)
    {
LABEL_39:
      v48 = -1;
      v29 = v44;
      if (HIDWORD(v45))
      {
        v34 = 8 * HIDWORD(v45);
        do
        {
          v35 = *(_QWORD *)v29;
          if (*(_QWORD *)v29)
          {
            v36 = (uint64_t *)(v35 - 16);
            v37 = *(_QWORD *)(((v35 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v38 = *(uint64_t **)(v35 - 8);
            if (v38)
            {
              v39 = *v36;
              *v38 = *v36;
              *(_QWORD *)(v39 + 8) = v38;
              *v36 = 0;
              v36[1] = 0;
            }
            *v36 = *(_QWORD *)(v37 + 40);
            *(_QWORD *)(v37 + 40) = v36;
            *(_QWORD *)v29 = 0;
          }
          v29 = (WTF *)((char *)v29 + 8);
          v34 -= 8;
        }
        while (v34);
        v29 = v44;
        if (!v44)
          goto LABEL_41;
      }
      else if (!v44)
      {
LABEL_41:
        v24 = v51;
        goto LABEL_42;
      }
      v44 = 0;
      LODWORD(v45) = 0;
      WTF::fastFree(v29, v28);
      goto LABEL_41;
    }
LABEL_38:
    ((void (*)(_BYTE *, int *))off_1E3344798[v26])(v52, v46);
    v22 = v27;
    goto LABEL_39;
  }
  v40 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWorkerGlobalScopePrototypeFunction_fetch(v40, v41, v42);
}

void WebCore::jsWorkerGlobalScopePrototypeFunction_fetch(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Object;
  JSC::JSGlobalObject *v20;
  uint64_t v21;
  BOOL v22;
  char **v23;
  BOOL v24;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char **v31;
  BOOL v32;
  unsigned int v34;
  int v35;
  WebCore::DOMGuardedObject *v36;
  int v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WebCore::DOMGuardedObject *v41;
  uint64_t v42;
  objc_class *v43;
  WebCore::DOMGuardedObject *v44;
  JSC::VM *v45;
  JSValue v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  WebCore::DOMGuardedObject *v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  unsigned int v64;
  WebCore::DOMGuardedObject *v65;
  char v66[16];
  int v67;
  char v68;
  char v69[8];
  int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  char v78[8];
  int v79;
  WebCore::DOMGuardedObject *v80;
  char v81[8];
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19516C624);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v17 + 5) - 51 < 6)
    v17 = 10;
  if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    v18 = (uint64_t)this;
  else
    v18 = v17;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_47;
  Object = JSC::JSCell::getObject((JSC::JSCell *)v18);
  if (!Object)
    goto LABEL_47;
  if (*(_BYTE *)(Object + 5) == 32)
  {
    Object = *(_QWORD *)(Object + 16);
    v21 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v22 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v23 = (char **)(16 * v21);
    if ((_DWORD)v21)
      v24 = v23 == &WebCore::JSWorkerGlobalScope::s_info;
    else
      v24 = 1;
    if (!v24)
    {
      do
      {
        v23 = (char **)v23[2];
        v22 = v23 != 0;
      }
      while (v23 != &WebCore::JSWorkerGlobalScope::s_info && v23 != 0);
    }
    if (v22)
      goto LABEL_33;
LABEL_47:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"WorkerGlobalScope", "fetch", v16);
    goto LABEL_48;
  }
  v29 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v30 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v31 = (char **)(16 * v29);
  if ((_DWORD)v29)
    v32 = v31 == &WebCore::JSWorkerGlobalScope::s_info;
  else
    v32 = 1;
  if (!v32)
  {
    do
    {
      v31 = (char **)v31[2];
      v30 = v31 != 0;
    }
    while (v31 != &WebCore::JSWorkerGlobalScope::s_info && v31 != 0);
  }
  if (!v30)
    goto LABEL_47;
LABEL_33:
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v45 = (JSC::VM *)*((_QWORD *)this + 7);
    v46.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v20);
    JSC::VM::throwException(v45, this, v46);
LABEL_48:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_75;
  }
  v26 = *(char **)(Object + 3400);
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::FetchRequest>,WebCore::IDLUSVString>>::convert((uint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)v81);
  v27 = v84;
  if (!v84)
  {
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v28 = 10;
    else
      v28 = *((_QWORD *)a2 + 7);
    WebCore::convertDictionary<WebCore::FetchRequestInit>(this, (JSC::JSCell *)v28, (uint64_t)&v51);
    v34 = v64;
    if (!v64)
    {
      if (v84
        || (v78[0] = 0, v79 = -1, v35 = v83, v83 != -1)
        && (((void (*)(WebCore::DOMGuardedObject **, char *, uint64_t *))off_1E33447B8[v83])(&v65, v78, &v82),
            v79 = v35,
            v64))
      {
        v47 = (unint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::jsWorkerGlobalScopePrototypeFunction_createImageBitmap1Body(v47, v48, v49, v50);
        return;
      }
      v36 = v51;
      v51 = 0;
      v65 = v36;
      v66[0] = 0;
      v68 = 0;
      if (v54)
      {
        v67 = -1;
        v37 = v53;
        if (v53 != -1)
        {
          ((void (*)(WebCore::DOMGuardedObject **, char *, uint64_t *))off_1E33447C8[v53])(&v80, v66, &v52);
          v67 = v37;
        }
        v68 = 1;
      }
      v69[0] = 0;
      v71 = 0;
      if (v57)
      {
        v70 = -1;
        v38 = v56;
        if (v56 != -1)
        {
          ((void (*)(WebCore::DOMGuardedObject **, char *, uint64_t *))off_1E33447D8[v56])(&v80, v69, &v55);
          v70 = v38;
        }
        v71 = 1;
      }
      v72 = v58;
      v73 = v59;
      v74 = v60;
      v39 = v61;
      v58 = 0;
      v61 = 0;
      v75 = v39;
      v76 = v62;
      v77 = v63;
      v80 = v14;
      WebCore::doFetch(v26, (uint64_t)v78, (uint64_t)&v65, (uint64_t *)&v80);
      v41 = v80;
      v80 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v41 + 16))(v41);
        else
          --*((_DWORD *)v41 + 4);
      }
      WebCore::FetchRequestInit::~FetchRequestInit((WebCore::FetchRequestInit *)&v65, v40);
      if (v79 != -1)
        ((void (*)(WebCore::DOMGuardedObject **, char *))off_1E33447A8[v79])(&v65, v78);
      v14 = 0;
      v34 = v64;
    }
    if (v34 != -1)
      (*(&off_1E3344810 + v34))((int)&v65, (WebCore::FetchRequestInit *)&v51);
    v27 = v84;
  }
  if (v27 != -1)
    ((void (*)(WebCore::DOMGuardedObject **, uint64_t *))off_1E3344820[v27])(&v51, &v82);
  if (v14)
    goto LABEL_48;
LABEL_75:
  v42 = *(_QWORD *)(v10 + 16);
  if (v42)
  {
    if (*(_QWORD *)(v10 + 24) != v42)
    {
      v43 = *(objc_class **)(v42 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v51);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v51, v43, 0);
      v44 = v51;
      v51 = 0;
      if (v44)
      {
        if (*((_DWORD *)v44 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v44 + 16))(v44);
        else
          --*((_DWORD *)v44 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80))
    JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10);
}

void WebCore::jsWorkerGlobalScopePrototypeFunction_createImageBitmap1Body(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  _OWORD v12[2];
  int v13;
  _DWORD *v14;
  _OWORD v15[2];
  char v16[8];
  int v17;
  char v18[8];
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::SVGImageElement>,WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::CSSStyleImageValue>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLInterface<WebCore::ImageData>>>::convert(a1, *(_QWORD *)(a2 + 48), (uint64_t)v18);
  v8 = v21;
  if (!v21)
  {
    if ((unint64_t)(*(int *)(a2 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v9 = 10;
    else
      v9 = *(_QWORD *)(a2 + 56);
    WebCore::convertDictionary<WebCore::ImageBitmapOptions>((JSC::JSCell *)v9, (unint64_t)a1, (uint64_t)v12);
    if (!v13)
    {
      if (v21
        || (v16[0] = 0, v17 = -1, v10 = v20, v20 != -1)
        && (((void (*)(_OWORD *, char *, uint64_t *))off_1E3344738[v20])(v15, v16, &v19), v17 = v10, v13))
      {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      v15[0] = v12[0];
      v15[1] = v12[1];
      v11 = (_DWORD *)*a4;
      *a4 = 0;
      v14 = v11;
      WebCore::ImageBitmap::createPromise(a3, (uint64_t)v16, (uint64_t)v15, (uint64_t *)&v14);
      if (v14)
      {
        if (v14[4] == 1)
          (*(void (**)(void))(*(_QWORD *)v14 + 16))();
        else
          --v14[4];
      }
      if (v17 != -1)
        ((void (*)(_OWORD *, char *))off_1E33446E8[v17])(v15, v16);
    }
    v8 = v21;
  }
  if (v8 != -1)
    ((void (*)(_OWORD *, uint64_t *))off_1E3344788[v8])(v12, &v19);
}

void WebCore::jsWorkerGlobalScopePrototypeFunction_createImageBitmap2Body(unint64_t *a1, uint64_t a2, WTF::StringImpl *a3, _QWORD *a4)
{
  int v8;
  unint64_t v9;
  JSC::VM *v10;
  int v11;
  unint64_t v12;
  JSC::VM *v13;
  int v14;
  unint64_t v15;
  JSC::VM *v16;
  int v17;
  unint64_t v18;
  JSC::VM *v19;
  int v20;
  JSC::JSCell *v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  JSC::VM *v48;
  unint64_t v49;
  int v50;
  _QWORD *v51;
  _OWORD v52[2];
  int v53;
  _DWORD *v54;
  _OWORD v55[2];
  char v56[8];
  int v57;
  char v58[8];
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::SVGImageElement>,WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::CSSStyleImageValue>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLInterface<WebCore::ImageData>>>::convert(a1, *(_QWORD *)(a2 + 48), (uint64_t)v58);
  v8 = v61;
  if (!v61)
  {
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)&v52[0] = v9;
    v10 = (JSC::VM *)a1[7];
    if (v9 < 0xFFFE000000000000)
    {
      v25 = v9 - 0x2000000000000;
      if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v52, (JSC::JSGlobalObject *)a1);
        v25 = v45;
      }
      v26 = (v25 >> 52) & 0x7FF;
      v27 = v26 - 1023;
      v28 = v25 >> (51 - (v25 >> 52));
      if (v26 > 0x433)
        LODWORD(v28) = v25 << ((v25 >> 52) - 51);
      if (v26 >= 0x41F)
        v29 = v28;
      else
        v29 = (((1 << ((v25 >> 52) + 1)) - 1) & v28) + (1 << ((v25 >> 52) + 1));
      if ((v25 & 0x8000000000000000) == 0)
        v30 = v29;
      else
        v30 = -v29;
      if (v27 <= 0x53)
        v11 = v30;
      else
        v11 = 0;
    }
    else
    {
      v11 = v9;
    }
    if (!*((_DWORD *)v10 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    {
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)&v52[0] = v12;
      v13 = (JSC::VM *)a1[7];
      if (v12 < 0xFFFE000000000000)
      {
        v31 = v12 - 0x2000000000000;
        if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v52, (JSC::JSGlobalObject *)a1);
          v31 = v46;
        }
        v32 = (v31 >> 52) & 0x7FF;
        v33 = v32 - 1023;
        v34 = v31 >> (51 - (v31 >> 52));
        if (v32 > 0x433)
          LODWORD(v34) = v31 << ((v31 >> 52) - 51);
        if (v32 >= 0x41F)
          v35 = v34;
        else
          v35 = (((1 << ((v31 >> 52) + 1)) - 1) & v34) + (1 << ((v31 >> 52) + 1));
        if ((v31 & 0x8000000000000000) == 0)
          v36 = v35;
        else
          v36 = -v35;
        if (v33 <= 0x53)
          v14 = v36;
        else
          v14 = 0;
      }
      else
      {
        v14 = v12;
      }
      if (!*((_DWORD *)v13 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v13))
      {
        v50 = v11;
        v51 = a4;
        v15 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)&v52[0] = v15;
        v16 = (JSC::VM *)a1[7];
        if (v15 < 0xFFFE000000000000)
        {
          v37 = v15 - 0x2000000000000;
          if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v52, (JSC::JSGlobalObject *)a1);
            v37 = v47;
          }
          v38 = (v37 >> 52) & 0x7FF;
          if ((v38 - 1023) <= 0x53)
          {
            v41 = v37 >> (51 - (v37 >> 52));
            if (v38 > 0x433)
              LODWORD(v41) = v37 << ((v37 >> 52) - 51);
            if (v38 >= 0x41F)
              v42 = v41;
            else
              v42 = (((1 << ((v37 >> 52) + 1)) - 1) & v41) + (1 << ((v37 >> 52) + 1));
            if ((v37 & 0x8000000000000000) == 0)
              v17 = v42;
            else
              v17 = -v42;
          }
          else
          {
            v17 = 0;
          }
        }
        else
        {
          v17 = v15;
        }
        if (!*((_DWORD *)v16 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v16))
        {
          v18 = *(_QWORD *)(a2 + 80);
          *(_QWORD *)&v52[0] = v18;
          v19 = (JSC::VM *)a1[7];
          if (v18 < 0xFFFE000000000000)
          {
            v39 = v18 - 0x2000000000000;
            if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              v48 = (JSC::VM *)a1[7];
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v52, (JSC::JSGlobalObject *)a1);
              v19 = v48;
              v39 = v49;
            }
            v40 = (v39 >> 52) & 0x7FF;
            if ((v40 - 1023) <= 0x53)
            {
              v43 = v39 >> (51 - (v39 >> 52));
              if (v40 > 0x433)
                LODWORD(v43) = v39 << ((v39 >> 52) - 51);
              if (v40 >= 0x41F)
                v44 = v43;
              else
                v44 = (((1 << ((v39 >> 52) + 1)) - 1) & v43) + (1 << ((v39 >> 52) + 1));
              if ((v39 & 0x8000000000000000) == 0)
                v20 = v44;
              else
                v20 = -v44;
            }
            else
            {
              v20 = 0;
            }
          }
          else
          {
            v20 = v18;
          }
          if (!*((_DWORD *)v19 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v19))
          {
            v21 = (unint64_t)(*(int *)(a2 + 32) - 7) > 0xFFFFFFFFFFFFFFF9
                ? (JSC::JSCell *)10
                : *(JSC::JSCell **)(a2 + 88);
            WebCore::convertDictionary<WebCore::ImageBitmapOptions>(v21, (unint64_t)a1, (uint64_t)v52);
            if (!v53)
            {
              if (v61
                || (v56[0] = 0, v57 = -1, v22 = v60, v60 != -1)
                && (((void (*)(_OWORD *, char *, uint64_t *))off_1E3344738[v60])(v55, v56, &v59),
                    v57 = v22,
                    v53))
              {
                std::__throw_bad_variant_access[abi:sn180100]();
              }
              v55[0] = v52[0];
              v55[1] = v52[1];
              v23 = (_DWORD *)*v51;
              *v51 = 0;
              v54 = v23;
              WebCore::ImageBitmap::createPromise(a3, (uint64_t)v56, (WTF::StringImpl *)v55, v50, v14, v17, v20, (WTF::StringImpl *)&v54);
              v24 = v54;
              v54 = 0;
              if (v24)
              {
                if (v24[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
                else
                  --v24[4];
              }
              if (v57 != -1)
                ((void (*)(_OWORD *, char *))off_1E33446E8[v57])(v55, v56);
            }
          }
        }
      }
    }
    v8 = v61;
  }
  if (v8 != -1)
    ((void (*)(_OWORD *, uint64_t *))off_1E3344788[v8])(v52, &v59);
}

_BYTE *WebCore::jsWorkerLocationPrototypeFunction_toString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = (int)this;
  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError(v3, (int)&v19, "WorkerLocation", "toString");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWorkerLocation::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWorkerLocation::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError(v3, (int)&v19, "WorkerLocation", "toString");
  v11 = (uint64_t *)(v5 + 41968);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
  if (!v12)
    return (_BYTE *)*v11;
  v13 = *(_DWORD *)v12;
  v14 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)v12 += 2;
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_15:
      v15 = *(_QWORD *)(v5 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
      {
        v15 = JSC::jsStringWithCacheSlowCase();
        v13 = *(_DWORD *)v12 - 2;
      }
      goto LABEL_18;
    }
    v17 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v18 = *(unsigned __int16 *)v17;
      if (v18 > 0xFF)
        goto LABEL_15;
      v18 = v18;
    }
    v15 = *(_QWORD *)(v5 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v11;
  }
LABEL_18:
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, a2);
  return (_BYTE *)v15;
}

unint64_t WebCore::jsWorkerNavigatorPrototypeFunction_setAppBadge(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  unint64_t v24;
  WebCore::DOMGuardedObject *v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v29;
  WebCore::DOMGuardedObject *v30;
  WebCore::DOMGuardedObject *v31;
  WebCore::DOMGuardedObject *v32;
  int v33;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19516D0D4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v31 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSWorkerNavigator::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSWorkerNavigator::s_info && v20 != 0);
    }
    if (v19)
    {
      v23 = *(_QWORD *)(v17 + 24);
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v25 = 0;
        v26 = 0;
      }
      else
      {
        v24 = *((_QWORD *)a2 + 6);
        if (v24 == 10)
        {
          v25 = 0;
          v26 = 0;
        }
        else
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v24, (uint64_t)&v32);
          if (v33)
            goto LABEL_32;
          v25 = v32;
          v26 = 1;
        }
      }
      WebCore::WorkerNavigator::setAppBadge(v23, (uint64_t)v25, v26, (uint64_t *)&v31);
LABEL_32:
      v14 = v31;
      v31 = 0;
      if (!v14)
        goto LABEL_35;
      goto LABEL_33;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"WorkerNavigator", "setAppBadge", v16);
  v31 = 0;
LABEL_33:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_35:
  v27 = *(_QWORD *)(v10 + 16);
  if (v27)
  {
    if (*(_QWORD *)(v10 + 24) != v27)
    {
      v29 = *(objc_class **)(v27 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v32);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v32, v29, 0);
      v30 = v32;
      v32 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v30 + 16))(v30);
        else
          --*((_DWORD *)v30 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsWorkerNavigatorPrototypeFunction_clearAppBadge(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19516D324);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWorkerNavigator::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWorkerNavigator::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"WorkerNavigator", "clearAppBadge", v16);
    v27 = 0;
  }
  else
  {
    WebCore::WorkerNavigator::setAppBadge(*(_QWORD *)(v17 + 24), 0, 1, (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsWorkletPrototypeFunction_addModule(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  int v25;
  JSC::JSCell *v26;
  JSC::VM *v27;
  uint64_t Object;
  JSC::Structure *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  unsigned __int16 Options;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  JSC::VM *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  objc_class *v41;
  WebCore::DOMGuardedObject *v42;
  JSC::VM *v43;
  JSValue v44;
  WebCore *v45;
  JSC::JSGlobalObject *v46;
  JSC::CallFrame *v47;
  WebCore::DOMGuardedObject *v48;
  int v49;
  char v50;
  JSC::VM *v51;
  WTF::StringImpl *v52;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19516D734);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_62;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWorklet::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWorklet::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_62:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Worklet", "addModule", v17);
  }
  else
  {
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v24 = *(_QWORD *)(v18 + 24);
      WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v48);
      v25 = v49;
      if (v49)
        goto LABEL_49;
      if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
      {
        LOBYTE(Options) = 1;
        goto LABEL_40;
      }
      v26 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
      v27 = (JSC::VM *)*((_QWORD *)this + 7);
      v51 = v27;
      if (((unint64_t)v26 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
LABEL_36:
        LOBYTE(Options) = 1;
LABEL_40:
        if (v49)
        {
          v45 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::jsWritableStreamPrototypeFunction_abort(v45, v46, v47);
        }
        v35 = v48;
        v48 = 0;
        v51 = v14;
        v52 = v35;
        v50 = Options;
        (*(void (**)(uint64_t, WTF::StringImpl **, char *, JSC::VM **))(*(_QWORD *)v24 + 72))(v24, &v52, &v50, &v51);
        v37 = v51;
        v51 = 0;
        if (v37)
        {
          if (*((_DWORD *)v37 + 4) == 1)
            (*(void (**)(JSC::VM *))(*(_QWORD *)v37 + 16))(v37);
          else
            --*((_DWORD *)v37 + 4);
        }
        v38 = v52;
        v52 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v36);
          else
            *(_DWORD *)v38 -= 2;
        }
        v14 = 0;
        goto LABEL_48;
      }
      if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
      {
        Object = JSC::JSCell::getObject(v26);
        if (Object)
        {
          v29 = (JSC::Structure *)Object;
          WTF::AtomStringImpl::addLiteral();
          v30 = v52;
          v32 = JSC::JSObject::get(v29, this, (unint64_t)v52);
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v31);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
            goto LABEL_48;
          if (v32 == 10)
            goto LABEL_36;
          v52 = (WTF::StringImpl *)*((_QWORD *)this + 7);
          v34 = v52;
          Options = WebCore::parseEnumeration<WebCore::FetchOptionsCredentials>(this, v32);
          if (*((_DWORD *)v34 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v34) & 1) != 0)
          {
LABEL_48:
            v25 = v49;
LABEL_49:
            if (v25 != -1)
              ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E3344088[v25])(&v52, &v48);
            if (!v14)
              goto LABEL_54;
            goto LABEL_52;
          }
          if (Options > 0xFFu)
            goto LABEL_40;
        }
      }
      JSC::throwTypeError();
      goto LABEL_48;
    }
    v43 = (JSC::VM *)*((_QWORD *)this + 7);
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v43, this, v44);
  }
LABEL_52:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_54:
  v39 = *(_QWORD *)(v10 + 16);
  if (v39)
  {
    if (*(_QWORD *)(v10 + 24) != v39)
    {
      v41 = *(objc_class **)(v39 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v48);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v48, v41, 0);
      v42 = v48;
      v48 = 0;
      if (v42)
      {
        if (*((_DWORD *)v42 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v42 + 16))(v42);
        else
          --*((_DWORD *)v42 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      return 10;
  }
  return v13;
}

_BYTE *WebCore::jsWritableStreamPrototypeFunction_abort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;

  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithThisTypeError(this, (JSC::JSGlobalObject *)"WritableStream", "abort", a4);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSWritableStream::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSWritableStream::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::rejectPromiseWithThisTypeError(this, (JSC::JSGlobalObject *)"WritableStream", "abort", a4);
  if (*((_DWORD *)a2 + 8) == 1)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 6);
  return (_BYTE *)WebCore::InternalWritableStream::abortForBindings(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16), this, v10);
}

_BYTE *WebCore::jsWritableStreamPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;

  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithThisTypeError(this, (JSC::JSGlobalObject *)"WritableStream", "close", a4);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSWritableStream::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSWritableStream::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::rejectPromiseWithThisTypeError(this, (JSC::JSGlobalObject *)"WritableStream", "close", a4);
  else
    return (_BYTE *)WebCore::InternalWritableStream::closeForBindings(*(WebCore::InternalWritableStream **)(*(_QWORD *)(v4 + 24) + 16), this);
}

_BYTE *WebCore::jsWritableStreamPrototypeFunction_getWriter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v10 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "WritableStream", "getWriter");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWritableStream::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWritableStream::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "WritableStream", "getWriter");
  else
    return (_BYTE *)WebCore::InternalWritableStream::getWriter(*(WebCore::InternalWritableStream **)(*(_QWORD *)(v3 + 24) + 16), this);
}

unint64_t WebCore::jsWritableStreamSinkPrototypeFunction_write(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::DOMGuardedObject *v27;
  uint64_t v28;
  JSC::VM *v30;
  JSValue v31;
  objc_class *v32;
  WebCore::DOMGuardedObject *v33;
  WebCore::DOMGuardedObject *v34;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19516DBE0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_34;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWritableStreamSink::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWritableStreamSink::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_34:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"WritableStreamSink", "write", v17);
    goto LABEL_37;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30 = (JSC::VM *)*((_QWORD *)this + 7);
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v30, this, v31);
LABEL_37:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_30;
  }
  v24 = *(_QWORD *)(v18 + 24);
  v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v25)
    goto LABEL_37;
  v26 = *((_QWORD *)a2 + 6);
  v34 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WebCore::DOMGuardedObject **))(*(_QWORD *)v24 + 16))(v24, v25, v26, &v34);
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v27 + 16))(v27);
    else
      --*((_DWORD *)v27 + 4);
  }
LABEL_30:
  v28 = *(_QWORD *)(v10 + 16);
  if (v28)
  {
    if (*(_QWORD *)(v10 + 24) != v28)
    {
      v32 = *(objc_class **)(v28 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v34);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v34, v32, 0);
      v33 = v34;
      v34 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v33 + 16))(v33);
        else
          --*((_DWORD *)v33 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsWritableStreamSinkPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "WritableStreamSink", "close");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWritableStreamSink::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWritableStreamSink::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "WritableStreamSink", "close");
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 24))(*(_QWORD *)(v3 + 24));
  return 10;
}

_BYTE *WebCore::jsWritableStreamSinkPrototypeFunction_error(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "WritableStreamSink", "error");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWritableStreamSink::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWritableStreamSink::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "WritableStreamSink", "error");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v28 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v17 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  v28 = v14;
  (*(void (**)(uint64_t, WTF::StringImpl **, JSC::CallFrame *))(*(_QWORD *)v11 + 32))(v11, &v28, a3);
  v16 = v28;
  v28 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = 0;
  v18 = 10;
LABEL_25:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3344088[v17])(&v28, &v25);
  return (_BYTE *)v18;
}

uint64_t WebCore::CryptoAlgorithmX25519Params::parametersClass(WebCore::CryptoAlgorithmX25519Params *this)
{
  return 16;
}

uint64_t WebCore::jsXMLHttpRequestPrototypeFunction_abort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v8;

  v4 = *((_QWORD *)a2 + 5);
  v8 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(v4);
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v8, "XMLHttpRequest", "abort");
  WebCore::XMLHttpRequest::abort((WebCore::XMLHttpRequest *)(*(_QWORD *)(v5 + 24) - 56), v6);
  return 10;
}

_BYTE *WebCore::jsXMLHttpRequestPrototypeFunction_getResponseHeader(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  _BYTE *result;
  unsigned int v19;
  JSValue v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int v25;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v5;
  v6 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "XMLHttpRequest", "getResponseHeader");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v20);
  }
  v8 = *(_QWORD *)(v6 + 24);
  WebCore::valueToByteString(this, *((_QWORD *)a2 + 6), (uint64_t)&v24);
  v9 = v25;
  if (!v25)
  {
    v10 = v24;
    v24 = 0;
    v22 = v10;
    WebCore::XMLHttpRequest::getResponseHeader((_WORD *)(v8 - 56), (const WTF::String *)&v22, &v23);
    v11 = v23;
    if (!v23)
    {
      v23 = 0;
      v15 = 2;
      if (v10)
        goto LABEL_21;
      goto LABEL_23;
    }
    v12 = *((_QWORD *)this + 7);
    v13 = (uint64_t *)(v12 + 41968);
    v14 = *((_DWORD *)v23 + 1);
    if (v14)
    {
      if (v14 != 1)
      {
LABEL_7:
        v15 = *(_QWORD *)(v12 + 64760);
        if (!v15 || v23 != *(WTF::StringImpl **)(v15 + 8))
        {
          v15 = JSC::jsStringWithCacheSlowCase();
          v11 = v23;
          v23 = 0;
          if (!v11)
            goto LABEL_20;
          goto LABEL_18;
        }
LABEL_17:
        v23 = 0;
LABEL_18:
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v11);
          if (v10)
          {
LABEL_21:
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v11);
            else
              *(_DWORD *)v10 -= 2;
          }
LABEL_23:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3344088[v9])(&v23, &v24);
          return (_BYTE *)v15;
        }
        *(_DWORD *)v11 -= 2;
LABEL_20:
        if (v10)
          goto LABEL_21;
        goto LABEL_23;
      }
      v16 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
      if ((*((_BYTE *)v23 + 16) & 4) != 0)
      {
        v17 = *v16;
      }
      else
      {
        v19 = *(unsigned __int16 *)v16;
        if (v19 > 0xFF)
          goto LABEL_7;
        v17 = v19;
      }
      v13 = (uint64_t *)(v12 + 8 * v17 + 42216);
    }
    v15 = *v13;
    goto LABEL_17;
  }
  v15 = 0;
  result = 0;
  if (v25 != -1)
    goto LABEL_23;
  return result;
}

_BYTE *WebCore::jsXMLHttpRequestPrototypeFunction_getAllResponseHeaders(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;

  v4 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(v4);
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "XMLHttpRequest", "getAllResponseHeaders");
  WebCore::XMLHttpRequest::getAllResponseHeaders((WebCore::XMLHttpRequest *)(*(_QWORD *)(v5 + 24) - 56), &v15);
  v6 = *((_QWORD *)this + 7);
  v7 = v15;
  if (!v15 || (v8 = *((_DWORD *)v15 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_8:
    v15 = 0;
    if (!v7)
      return (_BYTE *)v9;
    goto LABEL_15;
  }
  if (v8 != 1)
    goto LABEL_5;
  v10 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
  if ((*((_BYTE *)v15 + 16) & 4) != 0)
  {
    v11 = *v10;
LABEL_13:
    v9 = *(_QWORD *)(v6 + 8 * v11 + 42216);
    goto LABEL_14;
  }
  v13 = *(unsigned __int16 *)v10;
  if (v13 <= 0xFF)
  {
    v11 = v13;
    goto LABEL_13;
  }
LABEL_5:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v15 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v15;
    goto LABEL_8;
  }
LABEL_14:
  v15 = 0;
LABEL_15:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return (_BYTE *)v9;
}

_BYTE *WebCore::jsXMLHttpRequestPrototypeFunction_overrideMimeType(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  JSValue v18;
  WTF::StringImpl *v19;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSValue v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29[2];
  WTF::StringImpl *v30;
  char v31;

  v5 = *((_QWORD *)this + 7);
  v24 = v5;
  v6 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "XMLHttpRequest", "overrideMimeType");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v5, this, v18);
  }
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v29 = v9;
  if ((v9 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v9 + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(v9 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, this);
      if (!v10)
        goto LABEL_8;
    }
    else if (!v10)
    {
LABEL_8:
      v27 = v10;
      goto LABEL_9;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v29, this);
LABEL_9:
  if (*(_DWORD *)(v5 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5);
    v11 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v19);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v15 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    v11 = v27;
  }
  v26 = 0;
  v25 = 0;
  v27 = v11;
  WebCore::XMLHttpRequest::overrideMimeType((WebCore::XMLHttpRequest *)(v8 - 56), &v27, v29);
  v13 = v27;
  v27 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v31)
  {
    v21 = (WTF::StringImpl *)LOBYTE(v29[0]);
    LOBYTE(v27) = v29[0];
    v22 = v30;
    v28 = v30;
    if (!*(_QWORD *)(v5 + 16))
    {
      v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v29[0]), (JSC::JSGlobalObject *)&v28);
      JSC::VM::throwException((JSC::VM *)v5, this, v23);
      v22 = v28;
    }
    v28 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    v14 = 0;
  }
  else
  {
    v14 = 10;
  }
  v15 = 0;
LABEL_17:
  ((void (*)(int *, uint64_t *))off_1E3344088[v15])(v29, &v25);
  return (_BYTE *)v14;
}

_BYTE *WebCore::IDLOperation<WebCore::JSXMLHttpRequest>::call<&WebCore::jsXMLHttpRequestPrototypeFunction_openOverloadDispatcher,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, unint64_t *a2)
{
  JSC::CallFrame **v4;
  WebCore::JSXMLHttpRequest *v5;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 56);
  v4 = (JSC::CallFrame **)JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(a2[5]);
  if (v4)
    return (_BYTE *)WebCore::jsXMLHttpRequestPrototypeFunction_openOverloadDispatcher((JSC::VM **)a1, (JSC::JSGlobalObject *)a2, v4, v5);
  else
    return WebCore::throwThisTypeError(a1, (int)&v7, "XMLHttpRequest", "open");
}

uint64_t WebCore::jsXMLHttpRequestPrototypeFunction_openOverloadDispatcher(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame **a3, WebCore::JSXMLHttpRequest *a4)
{
  unint64_t v5;
  uint64_t result;
  JSC::VM *v7;
  JSValue v8;

  v5 = *((int *)a2 + 8) - 1;
  if (v5 >= 5)
    v5 = 5;
  switch(v5)
  {
    case 2uLL:
      result = WebCore::jsXMLHttpRequestPrototypeFunction_open1Body((WebCore *)this, a2, a3[3], a4);
      break;
    case 3uLL:
    case 4uLL:
    case 5uLL:
      result = WebCore::jsXMLHttpRequestPrototypeFunction_open2Body((WebCore *)this, a2, a3[3], a4);
      break;
    default:
      v7 = this[7];
      v8.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
      result = JSC::VM::throwException(v7, (JSC::JSGlobalObject *)this, v8);
      break;
  }
  return result;
}

uint64_t WebCore::jsXMLHttpRequestPrototypeFunction_open1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSXMLHttpRequest *a4)
{
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  _BYTE v12[8];
  int v13;
  _BYTE v14[8];
  int v15;
  JSC::VM *v16;

  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  WebCore::valueToByteString(this, *((_QWORD *)a2 + 6), (uint64_t)v14);
  v7 = v15;
  if (v15)
  {
    v9 = 0;
  }
  else
  {
    WebCore::valueToUSVString(this, *((_QWORD *)a2 + 7), (uint64_t)v12);
    v8 = v13;
    if (v13)
    {
      v9 = 0;
    }
    else
    {
      v11[0] = (char *)a3 - 56;
      v11[1] = v14;
      v11[2] = v12;
      v9 = WebCore::toJS<WebCore::IDLUndefined,WebCore::jsXMLHttpRequestPrototypeFunction_open1Body(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}>(this, &v16, (uint64_t)v11);
      v8 = v13;
    }
    if (v8 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E3344088[v8])(v11, v12);
    v7 = v15;
  }
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E3344088[v7])(v11, v14);
  return v9;
}

uint64_t WebCore::toJS<WebCore::IDLUndefined,WebCore::jsXMLHttpRequestPrototypeFunction_open1Body(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}>(JSC *a1, JSC::VM **a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  unsigned __int8 v11[8];
  WTF::StringImpl *v12;
  char v13;

  WebCore::jsXMLHttpRequestPrototypeFunction_open1Body(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}::operator()((WebCore::XMLHttpRequest *)v11, a3);
  if (v13)
  {
    v9[0] = v11[0];
    v8 = v12;
    v12 = 0;
    v10 = v8;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a2, v9);
      v8 = v10;
    }
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v6 = 0;
  }
  else
  {
    v6 = 10;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v11, v5);
  return v6;
}

WTF::StringImpl *WebCore::jsXMLHttpRequestPrototypeFunction_open1Body(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}::operator()(WebCore::XMLHttpRequest *a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::XMLHttpRequest *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  JSC *v10;
  JSC::VM **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)(v2 + 8)
    || (v3 = *(WebCore::XMLHttpRequest **)a2,
        v4 = *(WTF::StringImpl **)v2,
        *(_QWORD *)v2 = 0,
        v14 = v4,
        v5 = *(_QWORD *)(a2 + 16),
        *(_DWORD *)(v5 + 8)))
  {
    v10 = (JSC *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::toJS<WebCore::IDLUndefined,WebCore::jsXMLHttpRequestPrototypeFunction_open2Body(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#3}>(v10, v11, v12);
  }
  else
  {
    v6 = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = 0;
    v13 = v6;
    WebCore::XMLHttpRequest::open(v3, (const WTF::String *)&v14, (const WTF::String *)&v13, a1);
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::toJS<WebCore::IDLUndefined,WebCore::jsXMLHttpRequestPrototypeFunction_open2Body(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#3}>(JSC *a1, JSC::VM **a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  unsigned __int8 v11[8];
  WTF::StringImpl *v12;
  char v13;

  WebCore::jsXMLHttpRequestPrototypeFunction_open2Body(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#3}::operator()((WebCore::XMLHttpRequest *)v11, a3);
  if (v13)
  {
    v9[0] = v11[0];
    v8 = v12;
    v12 = 0;
    v10 = v8;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a2, v9);
      v8 = v10;
    }
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v6 = 0;
  }
  else
  {
    v6 = 10;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v11, v5);
  return v6;
}

WTF::StringImpl *WebCore::jsXMLHttpRequestPrototypeFunction_open2Body(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#3}::operator()(WebCore::XMLHttpRequest *a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::XMLHttpRequest *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  BOOL v12;
  WTF::StringImpl *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)(v2 + 8))
    goto LABEL_26;
  v3 = *(WebCore::XMLHttpRequest **)a2;
  v4 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  v24 = v4;
  v5 = *(_QWORD *)(a2 + 16);
  if (*(_DWORD *)(v5 + 8))
    goto LABEL_26;
  v6 = *(WTF::StringImpl **)v5;
  *(_QWORD *)v5 = 0;
  v23 = v6;
  v7 = *(unsigned __int8 **)(a2 + 24);
  if (*((_DWORD *)v7 + 1)
    || (v8 = *(_QWORD *)(a2 + 32), *(_DWORD *)(v8 + 8))
    || (v9 = *v7,
        v10 = *(WTF::StringImpl **)v8,
        *(_QWORD *)v8 = 0,
        v22 = v10,
        v11 = *(_QWORD *)(a2 + 40),
        *(_DWORD *)(v11 + 8)))
  {
LABEL_26:
    v20 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::IDLOperation<WebCore::JSXMLHttpRequest>::call<&WebCore::jsXMLHttpRequestPrototypeFunction_setRequestHeaderBody,(WebCore::CastedThisErrorBehavior)0>(v20);
  }
  else
  {
    v12 = v9 == 0;
    v13 = *(WTF::StringImpl **)v11;
    v14 = !v12;
    *(_QWORD *)v11 = 0;
    v21 = v13;
    WebCore::XMLHttpRequest::open(v3, (const WTF::String *)&v24, (const WTF::String *)&v23, (const WTF::String *)&v22, (const WTF::String *)&v21, v14, a1);
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v23;
    v23 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_BYTE *WebCore::IDLOperation<WebCore::JSXMLHttpRequest>::call<&WebCore::jsXMLHttpRequestPrototypeFunction_setRequestHeaderBody,(WebCore::CastedThisErrorBehavior)0>(WebCore *a1, unint64_t *a2)
{
  unint64_t v4;
  WebCore::JSXMLHttpRequest *v5;
  uint64_t v7;

  v7 = *((_QWORD *)a1 + 7);
  v4 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(a2[5]);
  if (v4)
    return (_BYTE *)WebCore::jsXMLHttpRequestPrototypeFunction_setRequestHeaderBody(a1, (JSC::JSGlobalObject *)a2, *(JSC::CallFrame **)(v4 + 24), v5);
  else
    return WebCore::throwThisTypeError((int)a1, (int)&v7, "XMLHttpRequest", "setRequestHeader");
}

uint64_t WebCore::jsXMLHttpRequestPrototypeFunction_setRequestHeaderBody(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSXMLHttpRequest *a4)
{
  JSC::VM *v5;
  int v8;
  int v9;
  uint64_t v10;
  JSValue v12;
  _QWORD v13[3];
  _BYTE v14[8];
  int v15;
  _BYTE v16[8];
  int v17;
  JSC::VM *v18;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v12.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v5, this, v12);
  }
  else
  {
    WebCore::valueToByteString(this, *((_QWORD *)a2 + 6), (uint64_t)v16);
    v8 = v17;
    if (v17)
    {
      v10 = 0;
    }
    else
    {
      WebCore::valueToByteString(this, *((_QWORD *)a2 + 7), (uint64_t)v14);
      v9 = v15;
      if (v15)
      {
        v10 = 0;
      }
      else
      {
        v13[0] = (char *)a3 - 56;
        v13[1] = v16;
        v13[2] = v14;
        v10 = WebCore::toJS<WebCore::IDLUndefined,WebCore::jsXMLHttpRequestPrototypeFunction_setRequestHeaderBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}>(this, &v18, (uint64_t)v13);
        v9 = v15;
      }
      if (v9 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E3344088[v9])(v13, v14);
      v8 = v17;
    }
    if (v8 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E3344088[v8])(v13, v16);
  }
  return v10;
}

uint64_t WebCore::toJS<WebCore::IDLUndefined,WebCore::jsXMLHttpRequestPrototypeFunction_setRequestHeaderBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}>(JSC *a1, JSC::VM **a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  WebCore::jsXMLHttpRequestPrototypeFunction_setRequestHeaderBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}::operator()(&v11, a3);
  if (v13)
  {
    v9[0] = v11;
    v8 = v12;
    v12 = 0;
    v10 = v8;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a2, v9);
      v8 = v10;
    }
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v6 = 0;
  }
  else
  {
    v6 = 10;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v11, v5);
  return v6;
}

WTF::StringImpl *WebCore::jsXMLHttpRequestPrototypeFunction_setRequestHeaderBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)(v2 + 8)
    || (v3 = *(WTF::StringImpl **)a2,
        v4 = *(WTF::StringImpl **)v2,
        *(_QWORD *)v2 = 0,
        v11 = v4,
        v5 = *(_QWORD *)(a2 + 16),
        *(_DWORD *)(v5 + 8)))
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::IDLOperation<WebCore::JSXMLHttpRequest>::call<&WebCore::jsXMLHttpRequestPrototypeFunction_sendBody,(WebCore::CastedThisErrorBehavior)0>(v9);
  }
  else
  {
    v6 = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = 0;
    v10 = v6;
    WebCore::XMLHttpRequest::setRequestHeader(v3, &v11, a1);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_BYTE *WebCore::IDLOperation<WebCore::JSXMLHttpRequest>::call<&WebCore::jsXMLHttpRequestPrototypeFunction_sendBody,(WebCore::CastedThisErrorBehavior)0>(WebCore *a1, unint64_t *a2)
{
  unint64_t v4;
  WebCore::JSXMLHttpRequest *v5;
  uint64_t v7;

  v7 = *((_QWORD *)a1 + 7);
  v4 = JSC::jsDynamicCast<WebCore::JSXMLHttpRequest *>(a2[5]);
  if (v4)
    return (_BYTE *)WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(a1, (JSC::JSGlobalObject *)a2, *(JSC::CallFrame **)(v4 + 24), v5);
  else
    return WebCore::throwThisTypeError((int)a1, (int)&v7, "XMLHttpRequest", "send");
}

uint64_t WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSXMLHttpRequest *a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  JSC::VM *v10;
  char v11;
  _BYTE v12[8];
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v6 = 10;
  else
    v6 = *((_QWORD *)a2 + 6);
  WebCore::convertOptionalWithDefault<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>,WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}>((uint64_t)v12, this, (JSC::JSArrayBufferView *)v6);
  v7 = v14;
  if (v14)
  {
    v8 = 0;
  }
  else
  {
    v8 = WebCore::toJS<WebCore::IDLUndefined,WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#2}>(this, &v10, (uint64_t)a3 - 56, (uint64_t)v12);
    v7 = v14;
  }
  if (v7 != -1)
    ((void (*)(char *, uint64_t *))off_1E33460F0[v7])(&v11, &v13);
  return v8;
}

uint64_t WebCore::convertOptionalWithDefault<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>,WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSArrayBufferView *a3)
{
  if (a3 == (JSC::JSArrayBufferView *)10)
    return WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}::operator()(a1);
  else
    return WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>>::convert(a1, a2, a3);
}

uint64_t WebCore::toJS<WebCore::IDLUndefined,WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#2}>(JSC *a1, JSC::VM **a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  unsigned __int8 v10[8];
  WTF::StringImpl *v11;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;
  char v14;

  WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#2}::operator()(v12, a3, a4);
  if (v14)
  {
    v10[0] = v12[0];
    v9 = v13;
    v13 = 0;
    v11 = v9;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a2, v10);
      v9 = v11;
    }
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v7 = 0;
  }
  else
  {
    v7 = 10;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v12, v6);
  return v7;
}

uint64_t WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[8];
  int v3;
  char v4;
  char v5;

  v2[0] = 0;
  v4 = 0;
  result = WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>>::ConversionResult(a1, (uint64_t)v2);
  if (v4)
  {
    if (v3 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E3346038[v3])(&v5, v2);
  }
  return result;
}

uint64_t WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>>::ConversionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 16) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *))off_1E3346070[v3])(&v5);
      *(_DWORD *)(a1 + 16) = v3;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>::optional[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 8) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E3346070[v3])(&v5, a1, a2);
      *(_DWORD *)(a1 + 8) = v3;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSG_SK_SP_ST_SX_SY_S12_EEEEEEDcS16_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSG_SK_SP_ST_SX_SY_S12_EEEEEEDcS16_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSG_SK_SP_ST_SX_SY_S12_EEEEEEDcS16_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSG_SK_SP_ST_SX_SY_S12_EEEEEEDcS16_DpT0_(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      WTF::fastFree((WTF *)v2, v5);
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSG_SK_SP_ST_SX_SY_S12_EEEEEEDcS16_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSG_SK_SP_ST_SX_SY_S12_EEEEEEDcS16_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::URLSearchParams *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSG_SK_SP_ST_SX_SY_S12_EEEEEEDcS16_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::URLSearchParams *result;
  WTF *v3;
  void *v4;

  result = *(WebCore::URLSearchParams **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(result, a2);
      return (WebCore::URLSearchParams *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSArrayBufferView *a3)
{
  uint64_t result;
  char v5;
  _BYTE v6[8];
  int v7;
  char v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (((unint64_t)a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6[0] = 0;
    v8 = 0;
    result = WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>>::ConversionResult(a1, (uint64_t)v6);
    if (v8)
    {
      if (v7 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E3346038[v7])(&v5, v6);
    }
  }
  else
  {
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>::convert((uint64_t)v6, a2, a3);
    result = WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>(WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &&)::{lambda(void)#1}::operator()(a1, (uint64_t)v6);
    if (v9 != -1)
      return ((uint64_t (*)(char *, int *))off_1E33460E0[v9])(&v5, &v7);
  }
  return result;
}

void WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSArrayBufferView *a3)
{
  uint64_t v5;
  __n128 v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  __n128 v12;
  _BYTE v13[8];
  int v14;
  unsigned __int8 v15;
  JSC::JSArrayBufferView *v16;
  __n128 v17;
  JSC::JSArrayBufferView **v18;

  v5 = *((_QWORD *)a2 + 7);
  v13[0] = 0;
  v15 = 0;
  v16 = a3;
  v17.n128_u64[0] = (unint64_t)v13;
  v17.n128_u64[1] = (unint64_t)a2;
  v18 = &v16;
  v6 = _ZN7WebCore6Detail11forEachArgsIZNS_9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS4_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS4_INS_11DOMFormDataEEENS_12IDLUSVStringENS4_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSI_7JSValueEEUlTyvE_JS6_S8_SC_SF_EEET_SN_(&v12, &v17);
  if (v15)
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    v10 = v14;
    if (v14 != -1)
    {
      ((void (*)(__n128 *, __n128))off_1E3346070[v14])(&v17, v6);
      *(_DWORD *)(a1 + 16) = v10;
      v11 = v15;
      *(_DWORD *)(a1 + 24) = 0;
      if (v11)
      {
        if (v14 != -1)
          ((void (*)(__n128 *, _BYTE *))off_1E3346038[v14])(&v17, v13);
      }
      return;
    }
LABEL_14:
    *(_DWORD *)(a1 + 24) = 0;
    return;
  }
  v7 = (_DWORD *)JSC::JSArrayBuffer::toWrapped(v5, (uint64_t)v16);
  if (v7)
  {
    *v7 += 2;
    v17.n128_u32[2] = 3;
    v17.n128_u64[0] = 0;
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = 3;
    *(_DWORD *)(a1 + 24) = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSG_SK_SP_ST_SX_SY_S12_EEEEEEDcS16_DpT0_((uint64_t)v7, &v17);
    return;
  }
  JSC::JSArrayBufferView::toWrapped(v16, (JSC::ArrayBufferView **)&v17);
  if (v17.n128_u64[0])
  {
    *(_QWORD *)(a1 + 8) = v17.n128_u64[0];
    *(_DWORD *)(a1 + 16) = 2;
    goto LABEL_14;
  }
  WebCore::valueToUSVString(a2, (uint64_t)v16, (uint64_t)&v17);
  v8 = v17.n128_u32[2];
  if (v17.n128_u32[2])
  {
    *(_DWORD *)(a1 + 24) = 1;
    if ((_DWORD)v8 == -1)
      return;
  }
  else
  {
    v9 = v17.n128_u64[0];
    v17.n128_u64[0] = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = 5;
    *(_DWORD *)(a1 + 24) = 0;
  }
  ((void (*)(_BYTE *, __n128 *))off_1E3344088[v8])(v13, &v17);
}

__n128 _ZN7WebCore6Detail11forEachArgsIZNS_9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS4_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS4_INS_11DOMFormDataEEENS_12IDLUSVStringENS4_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSI_7JSValueEEUlTyvE_JS6_S8_SC_SF_EEET_SN_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS2_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS_12IDLUSVStringENS2_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clIS4_EEDav((uint64_t)a2);
  _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS2_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS_12IDLUSVStringENS2_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clIS6_EEDav((uint64_t)a2);
  _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS2_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS_12IDLUSVStringENS2_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clISA_EEDav((uint64_t)a2);
  _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS2_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS_12IDLUSVStringENS2_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clISD_EEDav((uint64_t)a2);
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS2_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS_12IDLUSVStringENS2_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clIS4_EEDav(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;

  result = *(_QWORD *)a1;
  if (!*(_BYTE *)(result + 16))
  {
    v3 = **(_QWORD **)(a1 + 16);
    if ((v3 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v3 + 5) == 249)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        *(_DWORD *)(v4 + 24) += 2;
        v5 = v4;
        v6 = 0;
        result = std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>,void>(result, (uint64_t)&v5);
        if (v6 != -1)
          return ((uint64_t (*)(char *, uint64_t *))off_1E3346038[v6])(&v7, &v5);
      }
    }
  }
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS2_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS_12IDLUSVStringENS2_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clIS6_EEDav(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;

  v1 = *(_QWORD *)result;
  if (!*(_BYTE *)(*(_QWORD *)result + 16))
  {
    result = WebCore::JSBlob::toWrapped(*(_QWORD *)(*(_QWORD *)(result + 8) + 56), **(_QWORD **)(result + 16));
    if (result)
    {
      ++*(_DWORD *)(result + 16);
      v2 = result;
      v3 = 1;
      result = std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>,void>(v1, (uint64_t)&v2);
      if (v3 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E3346038[v3])(&v4, &v2);
    }
  }
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS2_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS_12IDLUSVStringENS2_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clISA_EEDav(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  char v4;

  if (!*(_BYTE *)(*(_QWORD *)result + 16))
  {
    v1 = (uint64_t *)result;
    result = WebCore::JSDOMFormData::toWrapped(*(_QWORD *)(*(_QWORD *)(result + 8) + 56), **(_QWORD **)(result + 16));
    if (result)
    {
      ++*(_DWORD *)(result + 16);
      v2 = result;
      v3 = 4;
      result = std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>,void>(*v1, (uint64_t)&v2);
      if (v3 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E3346038[v3])(&v4, &v2);
    }
  }
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_8DocumentEEENS2_INS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS_12IDLUSVStringENS2_INS_15URLSearchParamsEEEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clISD_EEDav(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  char v4;

  if (!*(_BYTE *)(*(_QWORD *)result + 16))
  {
    v1 = (uint64_t *)result;
    result = WebCore::JSURLSearchParams::toWrapped(*(_QWORD *)(*(_QWORD *)(result + 8) + 56), **(_QWORD **)(result + 16));
    if (result)
    {
      ++*(_DWORD *)result;
      v2 = result;
      v3 = 6;
      result = std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>,void>(*v1, (uint64_t)&v2);
      if (v3 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E3346038[v3])(&v4, &v2);
    }
  }
  return result;
}

uint64_t std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E3346038[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 8) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33460A8[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3346070[v5])(&v9, a1, a2);
    *(_DWORD *)(a1 + 8) = v5;
  }
  *(_BYTE *)(a1 + 16) = 1;
  return a1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1H_EEEDcS19_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E3346038[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1H_EEEDcS19_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E3346038[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1H_EEEDcS19_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3346038[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1H_EEEDcS19_DpT0_(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  _QWORD *v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_17;
  if ((_DWORD)v5 != 3)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3346038[v5])(&v14, v4);
LABEL_17:
    v13 = (_QWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v13;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = (_QWORD *)*a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    v8 = *(_DWORD *)v7 == 2;
    *(_DWORD *)v7 -= 2;
    if (v8)
    {
      v9 = v7[10];
      if (v9)
      {
        *(_QWORD *)(v9 + 8) = 3;
        v7[10] = 0;
      }
      if ((v7[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v7 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v7 + 2));
      v11 = (WTF *)v7[1];
      if ((v11 & 1) == 0 && v11)
      {
        v12 = *(WTF **)v11;
        if (*(_QWORD *)v11)
        {
          *(_QWORD *)v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          WTF::fastFree(v12, v10);
        }
        WTF::fastFree(v11, v10);
      }
      return WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1H_EEEDcS19_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 4)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E3346038[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 4;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1H_EEEDcS19_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3346038[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 5;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::URLSearchParams *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_4BlobENSC_ISH_EENSE_ISH_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISM_EENSE_ISM_EEEENS9_INSL_11ArrayBufferENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_11DOMFormDataENSC_ISU_EENSE_ISU_EEEENS8_6StringENS9_INSA_15URLSearchParamsENSC_ISZ_EENSE_ISZ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SK_SP_ST_SX_SY_S12_EEEOS1H_EEEDcS19_DpT0_(WebCore::URLSearchParams *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 6)
  {
    result = (WebCore::URLSearchParams *)((uint64_t (*)(char *, uint64_t))off_1E3346038[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 6;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WebCore::URLSearchParams **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(result, a2);
      return (WebCore::URLSearchParams *)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>(WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>> &&)::{lambda(void)#1}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6[8];
  int v7;
  char v8;
  char v9;

  v2 = result;
  if (*(_DWORD *)(a2 + 24))
  {
    *(_DWORD *)(result + 32) = 1;
  }
  else
  {
    WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>::releaseReturnValue((uint64_t)&v4, a2);
    v6[0] = 0;
    v7 = -1;
    v3 = v5;
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t *))off_1E3346070[v5])(&v9, v6, &v4);
      v7 = v3;
    }
    v8 = 1;
    result = WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Document>,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::URLSearchParams>>>>::ConversionResult(v2, (uint64_t)v6);
    if (v8)
    {
      if (v7 != -1)
        result = ((uint64_t (*)(char *, char *))off_1E3346038[v7])(&v9, v6);
      v7 = -1;
    }
    if (v5 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E3346038[v5])(&v9, &v4);
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>::releaseReturnValue(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_DWORD *)(a2 + 24))
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore8DocumentENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_4BlobENSD_ISI_EENSF_ISI_EEEENSA_IN3JSC15ArrayBufferViewENSD_ISN_EENSF_ISN_EEEENSA_INSM_11ArrayBufferENSD_ISR_EENSF_ISR_EEEENSA_INSB_11DOMFormDataENSD_ISV_EENSF_ISV_EEEENS9_6StringENSA_INSB_15URLSearchParamsENSD_IS10_EENSF_IS10_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS17_1EJS14_S15_EEEEEEDcS19_DpT0_(v4, v5);
  }
  else
  {
    v2 = result;
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 8) = -1;
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3346070[v3])(&v6, result, a2 + 8);
      *(_DWORD *)(v2 + 8) = v3;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore8DocumentENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_4BlobENSD_ISI_EENSF_ISI_EEEENSA_IN3JSC15ArrayBufferViewENSD_ISN_EENSF_ISN_EEEENSA_INSM_11ArrayBufferENSD_ISR_EENSF_ISR_EEEENSA_INSB_11DOMFormDataENSD_ISV_EENSF_ISV_EEEENS9_6StringENSA_INSB_15URLSearchParamsENSD_IS10_EENSF_IS10_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS17_1EJS14_S15_EEEEEEDcS19_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3346038[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t WebCore::jsXMLHttpRequestPrototypeFunction_sendBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSXMLHttpRequest *)::{lambda(void)#2}::operator()(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  const WTF::String *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  char v10;

  WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>>::releaseReturnValue((uint64_t)&v7, a3);
  result = WebCore::XMLHttpRequest::send(a2, (uint64_t)&v7, v5, a1);
  if (v9)
  {
    if (v8 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E3346038[v8])(&v10, &v7);
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>>::releaseReturnValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_DWORD *)(a2 + 32))
    return std::optional<std::variant<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::String,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>>>::optional[abi:sn180100](a1, a2 + 8);
  v3 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore8DocumentENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_4BlobENSE_ISJ_EENSG_ISJ_EEEENSB_IN3JSC15ArrayBufferViewENSE_ISO_EENSG_ISO_EEEENSB_INSN_11ArrayBufferENSE_ISS_EENSG_ISS_EEEENSB_INSC_11DOMFormDataENSE_ISW_EENSG_ISW_EEEENSA_6StringENSB_INSC_15URLSearchParamsENSE_IS11_EENSG_IS11_EEEEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS19_1EJS16_S17_EEEEEEDcS1B_DpT0_(v3, v4);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore8DocumentENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_4BlobENSE_ISJ_EENSG_ISJ_EEEENSB_IN3JSC15ArrayBufferViewENSE_ISO_EENSG_ISO_EEEENSB_INSN_11ArrayBufferENSE_ISS_EENSG_ISS_EEEENSB_INSC_11DOMFormDataENSE_ISW_EENSG_ISW_EEEENSA_6StringENSB_INSC_15URLSearchParamsENSE_IS11_EENSG_IS11_EEEEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS19_1EJS16_S17_EEEEEEDcS1B_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E3346038[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

_BYTE *WebCore::jsXMLSerializerPrototypeFunction_serializeToString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  WebCore::XMLSerializer *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v26;
  JSValue v28;
  JSC::VM *v29;
  JSC::VM *v30;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "XMLSerializer", "serializeToString");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 76);
  v13 = *(_DWORD *)(v11 + 76) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSXMLSerializer::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSXMLSerializer::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "XMLSerializer", "serializeToString");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v28);
  }
  v17 = *((_QWORD *)a2 + 6);
  v30 = v9;
  if ((v17 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v17 + 5) < 0xF0u
    || (v18 = *(WebCore::XMLSerializer **)(v17 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v30, 0, "node", 5, "XMLSerializer", 14, a8, "serializeToString", 18, "Node", 5);
    return 0;
  }
  WebCore::XMLSerializer::serializeToString(v18, &v30);
  v19 = *((_QWORD *)this + 7);
  v20 = v30;
  if (!v30 || (v21 = *((_DWORD *)v30 + 1)) == 0)
  {
    v22 = *(_QWORD *)(v19 + 41968);
LABEL_22:
    v30 = 0;
    if (!v20)
      return (_BYTE *)v22;
    goto LABEL_29;
  }
  if (v21 != 1)
    goto LABEL_19;
  v23 = (unsigned __int8 *)*((_QWORD *)v30 + 1);
  if ((*((_BYTE *)v30 + 16) & 4) != 0)
  {
    v24 = *v23;
LABEL_27:
    v22 = *(_QWORD *)(v19 + 8 * v24 + 42216);
    goto LABEL_28;
  }
  v26 = *(unsigned __int16 *)v23;
  if (v26 <= 0xFF)
  {
    v24 = v26;
    goto LABEL_27;
  }
LABEL_19:
  v22 = *(_QWORD *)(v19 + 64760);
  if (!v22 || v30 != *(JSC::VM **)(v22 + 8))
  {
    v22 = JSC::jsStringWithCacheSlowCase();
    v20 = v30;
    goto LABEL_22;
  }
LABEL_28:
  v30 = 0;
LABEL_29:
  if (*(_DWORD *)v20 == 2)
    WTF::StringImpl::destroy(v20, v20);
  else
    *(_DWORD *)v20 -= 2;
  return (_BYTE *)v22;
}

_BYTE *WebCore::jsXPathEvaluatorPrototypeFunction_createExpression(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, BOOL *a4, double a5, double a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  WebCore::JSCustomXPathNSResolver *v12;
  JSC::VM *v13;
  unint64_t v14;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  char **v27;
  BOOL v28;
  int v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  WebCore::JSCustomXPathNSResolver *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  JSValue v41;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v43;
  JSC::VM *v44;
  WebCore::JSCustomXPathNSResolver *v45;
  uint64_t v46;
  int v47;
  int v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  int v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;
  char v55;

  v12 = (WebCore::JSCustomXPathNSResolver *)0xFFFE000000000002;
  v13 = (JSC::VM *)*((_QWORD *)this + 7);
  v44 = v13;
  v14 = *((_QWORD *)a2 + 5);
  if ((v14 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v44, "XPathEvaluator", "createExpression");
  v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSXPathEvaluator::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSXPathEvaluator::s_info && v18 != 0);
  }
  if (!v17)
    return WebCore::throwThisTypeError((int)this, (int)&v44, "XPathEvaluator", "createExpression");
  v53 = v13;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v13, this, v41);
  }
  v21 = *((_QWORD *)a2 + 6);
  v46 = v21;
  if ((v21 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v21 + 5) == 2)
  {
    v22 = *(WTF::StringImpl **)(v21 + 8);
    if ((v22 & 1) != 0)
    {
      v22 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v21, this);
      if (!v22)
        goto LABEL_18;
    }
    else if (!v22)
    {
LABEL_18:
      v49 = v22;
      goto LABEL_19;
    }
    *(_DWORD *)v22 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v46, this);
LABEL_19:
  if (*((_DWORD *)v13 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v13);
    v23 = v49;
    if (hasExceptionsAfterHandlingTraps)
    {
      v52 = 1;
      v49 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v43);
        else
          *(_DWORD *)v23 -= 2;
      }
      v34 = 0;
      v38 = 1;
      goto LABEL_53;
    }
  }
  else
  {
    v23 = v49;
  }
  v51 = v23;
  v52 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL
    || (v24 = *((_QWORD *)a2 + 7), (v24 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v12 = 0;
    v50 = 0;
LABEL_43:
    v32 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28);
    v51 = 0;
    v54 = v23;
    v49 = 0;
    v45 = v12;
    WebCore::XPathEvaluator::createExpression(&v54, (const WTF::StringImpl *)&v45, a4, (uint64_t)&v46, a5, a6, a7);
    v34 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::XPathExpression>,WebCore::ExceptionOr<WTF::Ref<WebCore::XPathExpression,WTF::RawPtrTraits<WebCore::XPathExpression>,WTF::DefaultRefDerefTraits<WebCore::XPathExpression>>>>(this, v32, &v53, (unsigned __int8 *)&v46);
    if (v48 != -1)
      ((void (*)(char *, uint64_t *))off_1E33463E0[v48])(&v55, &v46);
    v48 = -1;
    v35 = v45;
    v45 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 2) == 1)
        (*(void (**)(WebCore::JSCustomXPathNSResolver *))(*(_QWORD *)v35 + 8))(v35);
      else
        --*((_DWORD *)v35 + 2);
    }
    v36 = v54;
    v54 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v33);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = 0;
    goto LABEL_52;
  }
  v54 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if ((v24 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v24 + 5) < 0x17u)
  {
    v30 = 1;
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v54, 1, "resolver", 9, "XPathEvaluator", 15, a11, "createExpression", 17, "XPathNSResolver", 16);
    v31 = 0;
    v47 = 1;
  }
  else
  {
    v25 = *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C);
    v26 = *(_DWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C) != 0;
    v27 = (char **)(16 * v25);
    if ((_DWORD)v25)
      v28 = v27 == &WebCore::JSXPathNSResolver::s_info;
    else
      v28 = 1;
    if (!v28)
    {
      do
      {
        v27 = (char **)v27[2];
        v26 = v27 != 0;
      }
      while (v27 != &WebCore::JSXPathNSResolver::s_info && v27 != 0);
    }
    if (v26)
    {
      v12 = *(WebCore::JSCustomXPathNSResolver **)(v24 + 24);
      ++*((_DWORD *)v12 + 2);
    }
    else
    {
      v12 = (WebCore::JSCustomXPathNSResolver *)WTF::fastMalloc((WTF *)0x28);
      WebCore::JSCustomXPathNSResolver::JSCustomXPathNSResolver(v12, v24, this);
    }
    v30 = 0;
    v47 = 0;
    v46 = 0;
    v31 = 1;
    v49 = v12;
  }
  v50 = v30;
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E33463D0[v30])(&v54, &v46);
  if (v31)
    goto LABEL_43;
  v34 = 0;
  v37 = 1;
LABEL_52:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E33463F0[v37])(&v46, &v49);
  v38 = 0;
LABEL_53:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3344088[v38])(&v46, &v51);
  return v34;
}

_BYTE *WebCore::jsXPathEvaluatorPrototypeFunction_createNSResolver(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  JSValue v19;
  JSC::VM *v20;
  JSC::VM *v21;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "XPathEvaluator", "createNSResolver");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 76);
  v13 = *(_DWORD *)(v11 + 76) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSXPathEvaluator::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSXPathEvaluator::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "XPathEvaluator", "createNSResolver");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v19);
  }
  else
  {
    v17 = *((_QWORD *)a2 + 6);
    v21 = v9;
    if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0xF0u || !*(_QWORD *)(v17 + 24))
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v21, 0, "nodeResolver", 13, "XPathEvaluator", 15, a8, "createNSResolver", 17, "Node", 5);
      return 0;
    }
    else
    {
      return (_BYTE *)v17;
    }
  }
}

_BYTE *WebCore::jsXPathEvaluatorPrototypeFunction_evaluate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, double a4, double a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v15;
  BOOL v16;
  char **v17;
  BOOL v18;
  WebCore::JSCustomXPathNSResolver *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  int v33;
  int v34;
  unint64_t v35;
  JSC::VM *v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  void *v51;
  WTF::StringImpl *v52;
  WebCore::JSCustomXPathNSResolver *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v58;
  void *v59;
  JSValue v61;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  JSValue v66;
  WebCore *v67;
  JSC::JSGlobalObject *v68;
  JSC::CallFrame *v69;
  JSC::VM *v70;
  JSC::VM *v71;
  WebCore::JSCustomXPathNSResolver *v72;
  WTF::StringImpl *v73;
  int v74[2];
  WTF::StringImpl *v75;
  unsigned int v76;
  WebCore::JSCustomXPathNSResolver *v77;
  int v78;
  WTF::StringImpl *v79;
  int v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;

  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v71 = v12;
  v13 = *((_QWORD *)a2 + 5);
  if ((v13 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v71, "XPathEvaluator", "evaluate");
  v15 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
  v16 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
  v17 = (char **)(16 * v15);
  if ((_DWORD)v15)
    v18 = v17 == &WebCore::JSXPathEvaluator::s_info;
  else
    v18 = 1;
  if (!v18)
  {
    do
    {
      v17 = (char **)v17[2];
      v16 = v17 != 0;
    }
    while (v17 != &WebCore::JSXPathEvaluator::s_info && v17 != 0);
  }
  if (!v16)
    return WebCore::throwThisTypeError((int)this, (int)&v71, "XPathEvaluator", "evaluate");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v61.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v12, this, v61);
  }
  v20 = *(WebCore::JSCustomXPathNSResolver **)(v13 + 24);
  v21 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v74 = v21;
  if ((v21 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v21 + 5) == 2)
  {
    v22 = *(WTF::StringImpl **)(v21 + 8);
    if ((v22 & 1) != 0)
    {
      v22 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v21, this);
      if (!v22)
        goto LABEL_18;
    }
    else if (!v22)
    {
LABEL_18:
      v81 = v22;
      goto LABEL_19;
    }
    *(_DWORD *)v22 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v74, this);
LABEL_19:
  if (*((_DWORD *)v12 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
    v23 = v81;
    if (hasExceptionsAfterHandlingTraps)
    {
      v80 = 1;
      v81 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v63);
        else
          *(_DWORD *)v23 -= 2;
      }
      v47 = 0;
      v56 = 1;
      goto LABEL_89;
    }
  }
  else
  {
    v23 = v81;
  }
  v79 = v23;
  v80 = 0;
  v24 = *((_QWORD *)a2 + 7);
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *(_QWORD *)v74 = v25;
  if ((v24 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v24 + 5) < 0xF0u
    || (v26 = *(unsigned __int16 **)(v24 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v74, 1, "contextNode", 12, "XPathEvaluator", 15, a11, "evaluate", 9, "Node", 5);
    v47 = 0;
    goto LABEL_88;
  }
  v27 = *((int *)a2 + 8);
  v70 = v12;
  if ((unint64_t)(v27 - 4) >= 0xFFFFFFFFFFFFFFFDLL
    || (v28 = *((_QWORD *)a2 + 8), (v28 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v20 = 0;
    v77 = 0;
    v78 = 0;
  }
  else
  {
    v81 = v25;
    if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) < 0x17u)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v81, 2, "resolver", 9, "XPathEvaluator", 15, a11, "evaluate", 9, "XPathNSResolver", 16);
      v33 = 0;
      v34 = 1;
      LODWORD(v75) = 1;
    }
    else
    {
      v29 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
      v30 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v29)
      {
        v31 = 16 * v29;
        if ((char **)v31 != &WebCore::JSXPathNSResolver::s_info)
        {
          do
          {
            v31 = *(_QWORD *)(v31 + 16);
            v30 = v31 != 0;
          }
          while ((char **)v31 != &WebCore::JSXPathNSResolver::s_info && v31 != 0);
        }
      }
      if (v30)
      {
        v20 = *(WebCore::JSCustomXPathNSResolver **)(v28 + 24);
        ++*((_DWORD *)v20 + 2);
      }
      else
      {
        v20 = (WebCore::JSCustomXPathNSResolver *)WTF::fastMalloc((WTF *)0x28);
        WebCore::JSCustomXPathNSResolver::JSCustomXPathNSResolver(v20, v28, this);
      }
      v34 = 0;
      LODWORD(v75) = 0;
      *(_QWORD *)v74 = 0;
      v33 = 1;
      v77 = v20;
    }
    v78 = v34;
    ((void (*)(WTF::StringImpl **, int *))off_1E33463D0[v34])(&v81, v74);
    if (!v33)
    {
      v47 = 0;
      v55 = 1;
      goto LABEL_87;
    }
    v27 = *((int *)a2 + 8);
  }
  if ((unint64_t)(v27 - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    *(_QWORD *)v74 = 10;
    v36 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_50;
  }
  v35 = *((_QWORD *)a2 + 9);
  *(_QWORD *)v74 = v35;
  v36 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v35 >= 0xFFFE000000000000 && (v35 & 0x80000000) == 0)
  {
    LOWORD(v37) = v35;
    goto LABEL_62;
  }
  if (v35 < 0xFFFE000000000000)
  {
    if (v35 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v39 = v35 - 0x2000000000000;
      goto LABEL_54;
    }
LABEL_50:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v74, this);
    v39 = v38;
    goto LABEL_54;
  }
  v39 = (double)(int)v35;
LABEL_54:
  if (*((_DWORD *)v36 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v36) & 1) != 0)
  {
    v47 = 0;
    goto LABEL_86;
  }
  LOWORD(v37) = 0;
  a4 = fabs(v39);
  a5 = INFINITY;
  if (a4 != INFINITY && v39 != 0.0)
  {
    v40 = -floor(-v39);
    v41 = floor(v39);
    if (v39 >= 0.0)
      v40 = v41;
    a4 = fmod(v40, 65536.0);
    a5 = a4 + 65536.0;
    if (a4 < 0.0)
      a4 = a4 + 65536.0;
    v37 = (int)a4;
  }
LABEL_62:
  if ((unint64_t)(*((int *)a2 + 8) - 6) <= 0xFFFFFFFFFFFFFFFALL)
  {
    v42 = *((_QWORD *)a2 + 10);
    if ((v42 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      *(_QWORD *)v74 = *((_QWORD *)this + 7);
      if ((v42 & 0xFFFE000000000002) != 0)
        goto LABEL_75;
      v43 = *(unsigned int *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x4C);
      v44 = *(_DWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v43)
      {
        v45 = 16 * v43;
        if ((char **)v45 != &WebCore::JSXPathResult::s_info)
        {
          do
          {
            v45 = *(_QWORD *)(v45 + 16);
            v44 = v45 != 0;
          }
          while ((char **)v45 != &WebCore::JSXPathResult::s_info && v45 != 0);
        }
      }
      if (!v44 || !*(_QWORD *)(v42 + 24))
      {
LABEL_75:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v74, 4, "inResult", 9, "XPathEvaluator", 15, a11, "evaluate", 9, "XPathResult", 12);
        v47 = 0;
LABEL_86:
        v55 = 0;
LABEL_87:
        ((void (*)(int *, WebCore::JSCustomXPathNSResolver **))off_1E33463F0[v55])(v74, &v77);
LABEL_88:
        v56 = 0;
LABEL_89:
        ((void (*)(int *, WTF::StringImpl **))off_1E3344088[v56])(v74, &v79);
        return (_BYTE *)v47;
      }
    }
  }
  v48 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28);
  v79 = 0;
  v72 = v20;
  v73 = v23;
  v77 = 0;
  WebCore::XPathEvaluator::evaluate(&v73, v26, (BOOL *)&v72, (void *)(unsigned __int16)v37, (uint64_t)v74, a4, a5, a6);
  v49 = v76;
  if (!v76)
  {
    v50 = *(WTF **)v74;
    *(_QWORD *)v74 = 0;
    v47 = WebCore::wrap<WebCore::XPathResult>((uint64_t)this, v48, v50);
    if (*(_DWORD *)v50 == 1)
    {
      WebCore::XPathResult::~XPathResult(v50, v51);
      WTF::fastFree(v58, v59);
    }
    else
    {
      --*(_DWORD *)v50;
    }
LABEL_80:
    ((void (*)(WTF::StringImpl **, int *))off_1E3346400[v49])(&v81, v74);
    v76 = -1;
    v53 = v72;
    v72 = 0;
    if (v53)
    {
      if (*((_DWORD *)v53 + 2) == 1)
        (*(void (**)(WebCore::JSCustomXPathNSResolver *))(*(_QWORD *)v53 + 8))(v53);
      else
        --*((_DWORD *)v53 + 2);
    }
    v54 = v73;
    v73 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v52);
      else
        *(_DWORD *)v54 -= 2;
    }
    goto LABEL_86;
  }
  if (v76 == 1)
  {
    v64 = (WTF::StringImpl *)LOBYTE(v74[0]);
    LOBYTE(v81) = v74[0];
    v65 = v75;
    v75 = 0;
    v82 = v65;
    if (!*((_QWORD *)v70 + 2))
    {
      v66.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v74[0]), (JSC::JSGlobalObject *)&v82);
      JSC::VM::throwException(v70, this, v66);
      v65 = v82;
    }
    v82 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v64);
      else
        *(_DWORD *)v65 -= 2;
    }
    v47 = 0;
    goto LABEL_80;
  }
  v67 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsXPathExpressionPrototypeFunction_evaluate(v67, v68, v69);
}

_BYTE *WebCore::jsXPathExpressionPrototypeFunction_evaluate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *v20;
  unint64_t v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  WTF *v38;
  void *v39;
  JSValue v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  JSValue v44;
  WebCore *v45;
  JSC::JSGlobalObject *v46;
  JSC::CallFrame *v47;
  uint64_t v48;
  int v49[2];
  WTF::StringImpl *v50;
  int v51;
  _BYTE v52[8];
  WTF::StringImpl *v53;

  v9 = *((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "XPathExpression", "evaluate");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSXPathExpression::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSXPathExpression::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "XPathExpression", "evaluate");
  v17 = *((int *)a2 + 8);
  if ((_DWORD)v17 == 1)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v9, this, v41);
  }
  v18 = *(_QWORD *)(v10 + 24);
  v19 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v49 = v9;
  if ((v19 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v19 + 5) < 0xF0u
    || (v20 = *(WebCore::Node **)(v19 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v49, 0, "contextNode", 12, "XPathExpression", 16, a8, "evaluate", 9, "Node", 5);
    return 0;
  }
  if ((unint64_t)(v17 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    *(_QWORD *)v49 = 10;
    goto LABEL_21;
  }
  v21 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v49 = v21;
  if (v21 >= 0xFFFE000000000000 && (v21 & 0x80000000) == 0)
  {
    LOWORD(v22) = v21;
    goto LABEL_33;
  }
  if (v21 < 0xFFFE000000000000)
  {
    if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v24 = v21 - 0x2000000000000;
      goto LABEL_25;
    }
LABEL_21:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v49, this);
    v24 = v23;
    goto LABEL_25;
  }
  v24 = (double)(int)v21;
LABEL_25:
  if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    return 0;
  LOWORD(v22) = 0;
  if (fabs(v24) != INFINITY && v24 != 0.0)
  {
    v25 = -floor(-v24);
    v26 = floor(v24);
    if (v24 >= 0.0)
      v25 = v26;
    v27 = fmod(v25, 65536.0);
    if (v27 < 0.0)
      v27 = v27 + 65536.0;
    v22 = (int)v27;
  }
LABEL_33:
  if ((unint64_t)(*((int *)a2 + 8) - 4) <= 0xFFFFFFFFFFFFFFFCLL)
  {
    v28 = *((_QWORD *)a2 + 8);
    if ((v28 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      *(_QWORD *)v49 = *((_QWORD *)this + 7);
      if ((v28 & 0xFFFE000000000002) != 0)
        goto LABEL_44;
      v29 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
      v30 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v29)
      {
        v31 = 16 * v29;
        if ((char **)v31 != &WebCore::JSXPathResult::s_info)
        {
          do
          {
            v31 = *(_QWORD *)(v31 + 16);
            v30 = v31 != 0;
          }
          while ((char **)v31 != &WebCore::JSXPathResult::s_info && v31 != 0);
        }
      }
      if (!v30 || !*(_QWORD *)(v28 + 24))
      {
LABEL_44:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v49, 2, "inResult", 9, "XPathExpression", 16, a8, "evaluate", 9, "XPathResult", 12);
        return 0;
      }
    }
  }
  v34 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  WebCore::XPathExpression::evaluate(v18, v20, (void *)(unsigned __int16)v22, (uint64_t)v49);
  if (!v51)
  {
    v35 = *(WTF **)v49;
    *(_QWORD *)v49 = 0;
    v33 = WebCore::wrap<WebCore::XPathResult>((uint64_t)this, v34, v35);
    if (*(_DWORD *)v35 == 1)
    {
      WebCore::XPathResult::~XPathResult(v35, v36);
      WTF::fastFree(v38, v39);
    }
    else
    {
      --*(_DWORD *)v35;
    }
LABEL_48:
    if (v51 != -1)
      ((void (*)(_BYTE *, int *))off_1E3346400[v51])(v52, v49);
    return (_BYTE *)v33;
  }
  if (v51 == 1)
  {
    v42 = (WTF::StringImpl *)LOBYTE(v49[0]);
    v52[0] = v49[0];
    v43 = v50;
    v50 = 0;
    v53 = v43;
    if (!*(_QWORD *)(v9 + 16))
    {
      v44.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v49[0]), (JSC::JSGlobalObject *)&v53);
      JSC::VM::throwException((JSC::VM *)v9, this, v44);
      v43 = v53;
    }
    v53 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v42);
      else
        *(_DWORD *)v43 -= 2;
    }
    v33 = 0;
    goto LABEL_48;
  }
  v45 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsXPathResultPrototypeFunction_iterateNext(v45, v46, v47);
}

_BYTE *WebCore::jsXPathResultPrototypeFunction_iterateNext(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  unint64_t v16;
  JSC::VM *v18;
  _QWORD v19[2];
  int v20;
  JSC::VM *v21;
  char v22;

  v3 = *((_QWORD *)a2 + 5);
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "XPathResult", "iterateNext");
  v5 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSXPathResult::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSXPathResult::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "XPathResult", "iterateNext");
  v11 = *(_QWORD *)(v3 + 24);
  v21 = v4;
  v12 = *(_QWORD *)(v5 + 40);
  if ((*(_WORD *)(v11 + 64) & 0xFFFE) != 4)
  {
    v15 = 33;
LABEL_18:
    LOBYTE(v19[0]) = v15;
    v19[1] = 0;
    v14 = 1;
    goto LABEL_19;
  }
  if (*(_QWORD *)(*(_QWORD *)(v11 + 72) + 1288) != *(_QWORD *)(v11 + 80))
  {
    v15 = 8;
    goto LABEL_18;
  }
  v13 = *(unsigned int *)(v11 + 32);
  v14 = 0;
  if (*(_DWORD *)(v11 + 60) <= v13)
  {
    v19[0] = 0;
  }
  else
  {
    *(_DWORD *)(v11 + 32) = v13 + 1;
    v19[0] = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v13);
  }
LABEL_19:
  v20 = v14;
  v16 = WebCore::toJS<WebCore::IDLInterface<WebCore::Node>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)this, v12, &v21, (unsigned __int8 *)v19);
  if (v20 != -1)
    off_1E3346910[v20](&v22, v19);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsXPathResultPrototypeFunction_snapshotItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  int v15;
  unint64_t v16;
  JSValue v19;
  JSC::VM *v20;
  _QWORD v21[2];
  int v22;
  _DWORD v23[2];
  JSC::VM *v24;
  char v25;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "XPathResult", "snapshotItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSXPathResult::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSXPathResult::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "XPathResult", "snapshotItem");
  v24 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v23);
  if (v23[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  if ((*(_WORD *)(v11 + 64) & 0xFFFE) == 6)
  {
    if (*(_BYTE *)(v11 + 8))
    {
      {
        WebCore::XPath::Expression::evaluationContext(void)::context = 0u;
        *(_OWORD *)&qword_1EE2F9830 = 0u;
      }
      byte_1EE2F9838 = 1;
    }
    v13 = *(_QWORD *)(v11 + 24);
    if (v13)
    {
      v14 = (__int16 *)(v13 + 16);
    }
    else
    {
      v14 = &WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet;
      {
        WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet = 1;
        qword_1EE2F9850 = 0;
        unk_1EE2F9858 = 0;
      }
    }
    v15 = 0;
    if (*((_DWORD *)v14 + 5) <= v23[0])
      v21[0] = 0;
    else
      v21[0] = *(_QWORD *)(*((_QWORD *)v14 + 1) + 8 * v23[0]);
  }
  else
  {
    LOBYTE(v21[0]) = 33;
    v21[1] = 0;
    v15 = 1;
  }
  v22 = v15;
  v16 = WebCore::toJS<WebCore::IDLInterface<WebCore::Node>,WebCore::ExceptionOr<WebCore::Node*>>((WebCore::DOMWrapperWorld **)this, v12, &v24, (unsigned __int8 *)v21);
  if (v22 != -1)
    off_1E3346910[v22](&v25, v21);
  return (_BYTE *)v16;
}

unint64_t WebCore::toJS<WebCore::IDLInterface<WebCore::Node>,WebCore::ExceptionOr<WebCore::Node*>>(WebCore::DOMWrapperWorld **this, uint64_t a2, JSC::VM **a3, unsigned __int8 *a4)
{
  int v5;
  uint64_t v6;
  JSC::JSGlobalObject *v9;
  WTF::StringImpl *v10;
  JSValue v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  unint64_t Wrapper;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WTF::StringImpl *v26;

  v5 = *((_DWORD *)a4 + 4);
  if (!v5)
  {
    v6 = *(_QWORD *)a4;
    if (!*(_QWORD *)a4)
      return 2;
    if (*(_BYTE *)(a2 + 3328))
    {
      v12 = *(uint64_t **)(v6 + 8);
      if (v12)
      {
LABEL_15:
        if ((v12[1] & 3) == 0)
        {
          v13 = *v12;
          if (v13)
            return v13;
        }
        goto LABEL_25;
      }
      goto LABEL_25;
    }
LABEL_19:
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 - 8);
      v16 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = *(_QWORD *)(v14 + 16 * v19);
      if (v20 == v6)
      {
LABEL_24:
        v12 = *(uint64_t **)(v14 + 16 * v19 + 8);
        if (v12)
          goto LABEL_15;
      }
      else
      {
        v21 = 1;
        while (v20)
        {
          v19 = ((_DWORD)v19 + v21) & v15;
          v20 = *(_QWORD *)(v14 + 16 * v19);
          ++v21;
          if (v20 == v6)
            goto LABEL_24;
        }
      }
    }
LABEL_25:
    *(_DWORD *)(v6 + 24) += 2;
    v25 = (WebCore::Node *)v6;
    Wrapper = WebCore::createWrapper(this, (JSC::VM *)a2, (WebCore::JSDOMGlobalObject *)&v25, (WebCore::Document *)a4);
    v24 = v25;
    v25 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24, v22);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    return Wrapper;
  }
  if (v5 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_19;
  }
  v9 = (JSC::JSGlobalObject *)*a4;
  LOBYTE(v25) = *a4;
  v10 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
  *((_QWORD *)a4 + 1) = 0;
  v26 = v10;
  if (!*((_QWORD *)*a3 + 2))
  {
    v11.super.isa = (Class)WebCore::createDOMException((JSC *)this, v9, (JSC::JSGlobalObject *)&v26);
    JSC::VM::throwException(*a3, (JSC::JSGlobalObject *)this, v11);
    v10 = v26;
  }
  v26 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  return 0;
}

uint64_t WebCore::jsXSLTProcessorPrototypeFunction_importStylesheet(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  JSC::VM *v22;
  JSC::VM *v23;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v22, "XSLTProcessor", "importStylesheet");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSXSLTProcessor::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSXSLTProcessor::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v22, "XSLTProcessor", "importStylesheet");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v21);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v23 = v9;
    if ((v17 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v17 + 5) < 0xF0u
      || (v18 = *(_QWORD *)(v17 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v23, 0, "style", 6, "XSLTProcessor", 14, a8, "importStylesheet", 17, "Node", 5);
      return 0;
    }
    else
    {
      *(_DWORD *)(v18 + 24) += 2;
      v19 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(v16 + 16) = v18;
      if (v19)
      {
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
      }
      return 10;
    }
  }
}

_BYTE *WebCore::jsXSLTProcessorPrototypeFunction_transformToFragment(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  WebCore::XSLTProcessor *v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  WebCore::Document *v21;
  JSC::JSGlobalObject *v22;
  void *v23;
  WebCore::DocumentFragment *v24;
  uint64_t v25;
  WebCore::JSDOMGlobalObject *v26;
  WTF *v27;
  JSValue v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::VM *v34;
  WTF *v35;
  uint64_t v36;
  _BYTE v37[40];
  uint64_t v38;
  JSC::JSGlobalObject *v39;
  WebCore::JSDOMGlobalObject *v40;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "XSLTProcessor", "transformToFragment");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSXSLTProcessor::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSXSLTProcessor::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "XSLTProcessor", "transformToFragment");
  v35 = (WTF *)v37;
  v36 = 4;
  v37[32] = 0;
  v38 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v39 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v35;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v25 = JSC::VM::throwException(v9, this, v30);
  }
  else
  {
    v17 = *(WebCore::XSLTProcessor **)(v10 + 24);
    v18 = *((_QWORD *)a2 + 6);
    v40 = v9;
    if ((v18 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v18 + 5) < 0xF0u
      || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v40, 0, "source", 7, "XSLTProcessor", 14, a8, "transformToFragment", 20, "Node", 5);
      v25 = 0;
    }
    else
    {
      v20 = *((_QWORD *)a2 + 7);
      v40 = v9;
      if ((v20 & 0xFFFE000000000002) == 0
        && *(unsigned __int8 *)(v20 + 5) == 249
        && (v21 = *(WebCore::Document **)(v20 + 24)) != 0)
      {
        v22 = *(JSC::JSGlobalObject **)(v11 + 40);
        WebCore::XSLTProcessor::transformToFragment(v17, v19, v21, (uint64_t *)&v40);
        if (v40)
        {
          v25 = WebCore::toJS(this, v22, v40, v24);
          v26 = v40;
          v40 = 0;
          if (v26)
          {
            if (*((_DWORD *)v26 + 6) == 2)
            {
              if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v26, v23);
            }
            else
            {
              *((_DWORD *)v26 + 6) -= 2;
            }
          }
        }
        else
        {
          v25 = 2;
        }
      }
      else
      {
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v40, 1, "output", 7, "XSLTProcessor", 14, a8, "transformToFragment", 20, "Document", 9);
        v25 = 0;
      }
    }
  }
  if (HIDWORD(v36))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v35, v39);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v38;
    if (HIDWORD(v36))
    {
      v31 = v35;
      v32 = 8 * HIDWORD(v36);
      do
      {
        v33 = *(_QWORD *)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
        {
          if (*(_DWORD *)(v33 + 24) == 2)
          {
            if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v33, v23);
          }
          else
          {
            *(_DWORD *)(v33 + 24) -= 2;
          }
        }
        v31 = (WTF *)((char *)v31 + 8);
        v32 -= 8;
      }
      while (v32);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v38;
  }
  v27 = v35;
  if (v37 != (_BYTE *)v35 && v35 != 0)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree(v27, v23);
  }
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsXSLTProcessorPrototypeFunction_transformToDocument(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  WebCore::XSLTProcessor *v17;
  uint64_t v18;
  WebCore::Node *v19;
  JSC::JSGlobalObject *v20;
  void *v21;
  WebCore::Document *v22;
  WebCore::JSDOMGlobalObject *v23;
  uint64_t v24;
  unint64_t v25;
  WTF *v26;
  WebCore::Node *v29;
  JSValue v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::VM *v34;
  WebCore::JSDOMGlobalObject *v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[40];
  uint64_t v39;
  JSC::JSGlobalObject *v40;
  WebCore::Node *v41;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "XSLTProcessor", "transformToDocument");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSXSLTProcessor::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSXSLTProcessor::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "XSLTProcessor", "transformToDocument");
  v36 = (WTF *)v38;
  v37 = 4;
  v38[32] = 0;
  v39 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v40 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v36;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v25 = JSC::VM::throwException(v9, this, v30);
  }
  else
  {
    v17 = *(WebCore::XSLTProcessor **)(v10 + 24);
    v18 = *((_QWORD *)a2 + 6);
    v41 = v9;
    if ((v18 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v18 + 5) < 0xF0u
      || (v19 = *(WebCore::Node **)(v18 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v41, 0, "source", 7, "XSLTProcessor", 14, a8, "transformToDocument", 20, "Node", 5);
      v25 = 0;
    }
    else
    {
      v20 = *(JSC::JSGlobalObject **)(v11 + 40);
      WebCore::XSLTProcessor::transformToDocument(v17, v19, &v35);
      v23 = v35;
      if (v35)
      {
        v24 = WebCore::cachedDocumentWrapper((WebCore::DOMWrapperWorld **)this, v20, v35, v22);
        if (v24)
        {
          v25 = v24;
        }
        else
        {
          *((_DWORD *)v23 + 6) += 2;
          v41 = v23;
          v25 = WebCore::toJSNewlyCreated((uint64_t)this, v20, &v41);
          v29 = v41;
          v41 = 0;
          if (v29)
          {
            if (*((_DWORD *)v29 + 6) == 2)
            {
              if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v29, v21);
            }
            else
            {
              *((_DWORD *)v29 + 6) -= 2;
            }
          }
        }
        if (*((_DWORD *)v23 + 6) == 2)
        {
          if ((*((_WORD *)v23 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v23, v21);
        }
        else
        {
          *((_DWORD *)v23 + 6) -= 2;
        }
      }
      else
      {
        v25 = 2;
      }
    }
  }
  if (HIDWORD(v37))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v36, v40);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v39;
    if (HIDWORD(v37))
    {
      v31 = v36;
      v32 = 8 * HIDWORD(v37);
      do
      {
        v33 = *(_QWORD *)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
        {
          if (*(_DWORD *)(v33 + 24) == 2)
          {
            if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v33, v21);
          }
          else
          {
            *(_DWORD *)(v33 + 24) -= 2;
          }
        }
        v31 = (WTF *)((char *)v31 + 8);
        v32 -= 8;
      }
      while (v32);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v39;
  }
  v26 = v36;
  if (v38 != (_BYTE *)v36 && v36 != 0)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    WTF::fastFree(v26, v21);
  }
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsXSLTProcessorPrototypeFunction_setParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSValue v30;
  int hasExceptionsAfterHandlingTraps;
  int v32;
  WebCore *v33;
  JSC::JSGlobalObject *v34;
  JSC::CallFrame *v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  _QWORD v45[3];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "XSLTProcessor", "setParameter");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSXSLTProcessor::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSXSLTProcessor::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "XSLTProcessor", "setParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v30);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::Converter<WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>::convert(this, *((_QWORD *)a2 + 6), (uint64_t)&v41);
  v14 = v42;
  if (v42)
  {
    v26 = 0;
LABEL_46:
    if (v14 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3344088[v14])(v45, &v41);
    return (_BYTE *)v26;
  }
  v15 = *((_QWORD *)a2 + 7);
  v45[0] = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v17 = *(WTF::StringImpl **)(v15 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, this);
      if (!v17)
        goto LABEL_19;
    }
    else if (!v17)
    {
LABEL_19:
      v37 = v17;
      goto LABEL_20;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v45, this);
LABEL_20:
  if (*((_DWORD *)v16 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    v18 = v37;
    if (hasExceptionsAfterHandlingTraps)
    {
      v40 = 1;
      v37 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v13);
        else
          *(_DWORD *)v18 -= 2;
      }
      v26 = 0;
      v27 = 1;
      goto LABEL_45;
    }
  }
  else
  {
    v18 = v37;
  }
  v39 = v18;
  v40 = 0;
  v19 = *((_QWORD *)a2 + 8);
  v45[0] = v19;
  v20 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v19 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v19 + 5) == 2)
  {
    v21 = *(WTF::StringImpl **)(v19 + 8);
    if ((v21 & 1) != 0)
    {
      v21 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v19, this);
      if (!v21)
        goto LABEL_27;
    }
    else if (!v21)
    {
LABEL_27:
      v44 = v21;
      goto LABEL_28;
    }
    *(_DWORD *)v21 += 2;
    goto LABEL_27;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v45, this);
LABEL_28:
  if (*((_DWORD *)v20 + 20))
  {
    v32 = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
    v22 = v44;
    if (v32)
    {
      v38 = 1;
      v44 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v13);
        else
          *(_DWORD *)v22 -= 2;
      }
      v26 = 0;
      v25 = 1;
      goto LABEL_44;
    }
  }
  else
  {
    v22 = v44;
  }
  v38 = 0;
  if (!v42)
  {
    v23 = v41;
    v41 = 0;
    v39 = 0;
    v43 = v22;
    v44 = v18;
    v37 = 0;
    if (v18 && v22)
    {
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>((uint64_t *)(v12 + 24), &v44, (const WTF::StringImpl *)&v43, (uint64_t)v45);
      v22 = v43;
    }
    v43 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v13);
      else
        *(_DWORD *)v22 -= 2;
    }
    v24 = v44;
    v44 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v13);
        if (!v23)
          goto LABEL_57;
LABEL_41:
        if (*(_DWORD *)v23 != 2)
        {
          v25 = 0;
          *(_DWORD *)v23 -= 2;
LABEL_43:
          v26 = 10;
LABEL_44:
          ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3344088[v25])(v45, &v37);
          v27 = 0;
LABEL_45:
          ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3344088[v27])(v45, &v39);
          v14 = v42;
          goto LABEL_46;
        }
        WTF::StringImpl::destroy(v23, v13);
LABEL_57:
        v25 = 0;
        goto LABEL_43;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (!v23)
      goto LABEL_57;
    goto LABEL_41;
  }
  v33 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsXSLTProcessorPrototypeFunction_getParameter(v33, v34, v35);
}

_BYTE *WebCore::jsXSLTProcessorPrototypeFunction_getParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int8 *v32;
  unsigned int v33;
  JSValue v34;
  int hasExceptionsAfterHandlingTraps;
  unsigned int v36;
  WebCore *v37;
  JSC::JSGlobalObject *v38;
  JSC::CallFrame *v39;
  JSC::VM *v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "XSLTProcessor", "getParameter");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSXSLTProcessor::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSXSLTProcessor::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "XSLTProcessor", "getParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v34);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::Converter<WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>::convert(this, *((_QWORD *)a2 + 6), (uint64_t)&v43);
  v15 = v44;
  if (v44)
  {
    v22 = 0;
LABEL_35:
    if (v15 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3344088[v15])(&v41, &v43);
    return (_BYTE *)v22;
  }
  v16 = *((_QWORD *)a2 + 7);
  v46 = (WTF::StringImpl *)v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v16 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
      if (!v18)
        goto LABEL_19;
    }
    else if (!v18)
    {
LABEL_19:
      v45 = v18;
      goto LABEL_20;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v46, this);
LABEL_20:
  if (*((_DWORD *)v17 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v19 = v45;
    if (hasExceptionsAfterHandlingTraps)
    {
      v42 = 1;
      v45 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v13);
        else
          *(_DWORD *)v19 -= 2;
      }
      v22 = 0;
      v24 = 1;
      goto LABEL_34;
    }
  }
  else
  {
    v19 = v45;
  }
  v42 = 0;
  if (!v44)
  {
    v20 = v43;
    v43 = 0;
    v41 = 0;
    v46 = v19;
    if (!v19)
    {
      v22 = 2;
      goto LABEL_31;
    }
    v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>((uint64_t *)(v12 + 24), &v46, v14);
    if (!v21 || (v26 = *((_QWORD *)v21 + 1)) == 0)
    {
      v22 = 2;
      goto LABEL_26;
    }
    v27 = *(_DWORD *)v26;
    v28 = *(_DWORD *)(v26 + 4);
    *(_DWORD *)v26 += 2;
    v29 = *((_QWORD *)this + 7);
    v30 = (uint64_t *)(v29 + 41968);
    if (v28)
    {
      if (v28 != 1)
      {
LABEL_48:
        v22 = *(_QWORD *)(v29 + 64760);
        if (!v22 || v26 != *(_QWORD *)(v22 + 8))
        {
          v22 = JSC::jsStringWithCacheSlowCase();
          v27 = *(_DWORD *)v26 - 2;
        }
        if (v27)
          goto LABEL_52;
        goto LABEL_58;
      }
      v32 = *(unsigned __int8 **)(v26 + 8);
      if ((*(_BYTE *)(v26 + 16) & 4) != 0)
      {
        v33 = *v32;
      }
      else
      {
        v36 = *(unsigned __int16 *)v32;
        if (v36 > 0xFF)
          goto LABEL_48;
        v33 = v36;
      }
      v30 = (uint64_t *)(v29 + 8 * v33 + 42216);
    }
    v22 = *v30;
    if (v27)
    {
LABEL_52:
      *(_DWORD *)v26 = v27;
      goto LABEL_26;
    }
LABEL_58:
    WTF::StringImpl::destroy((WTF::StringImpl *)v26, v13);
LABEL_26:
    v23 = v46;
    v46 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v13);
        if (!v20)
          goto LABEL_41;
      }
      else
      {
        *(_DWORD *)v23 -= 2;
        if (!v20)
          goto LABEL_41;
      }
LABEL_32:
      if (*(_DWORD *)v20 != 2)
      {
        v24 = 0;
        *(_DWORD *)v20 -= 2;
LABEL_34:
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3344088[v24])(&v46, &v41);
        v15 = v44;
        goto LABEL_35;
      }
      WTF::StringImpl::destroy(v20, v13);
LABEL_41:
      v24 = 0;
      goto LABEL_34;
    }
LABEL_31:
    if (!v20)
      goto LABEL_41;
    goto LABEL_32;
  }
  v37 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsXSLTProcessorPrototypeFunction_removeParameter(v37, v38, v39);
}

_BYTE *WebCore::jsXSLTProcessorPrototypeFunction_removeParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  JSValue v29;
  int hasExceptionsAfterHandlingTraps;
  WebCore *v31;
  JSC::JSGlobalObject *v32;
  JSC::CallFrame *v33;
  JSC::VM *v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "XSLTProcessor", "removeParameter");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSXSLTProcessor::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSXSLTProcessor::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "XSLTProcessor", "removeParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v29);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::Converter<WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>::convert(this, *((_QWORD *)a2 + 6), (uint64_t)&v37);
  v15 = v38;
  if (v38)
  {
    v26 = 0;
LABEL_37:
    if (v15 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3344088[v15])(&v35, &v37);
    return (_BYTE *)v26;
  }
  v16 = *((_QWORD *)a2 + 7);
  v40 = (WTF::StringImpl *)v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v16 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
      if (!v18)
        goto LABEL_19;
    }
    else if (!v18)
    {
LABEL_19:
      v39 = v18;
      goto LABEL_20;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, this);
LABEL_20:
  if (*((_DWORD *)v17 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v19 = v39;
    if (hasExceptionsAfterHandlingTraps)
    {
      v36 = 1;
      v39 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v13);
        else
          *(_DWORD *)v19 -= 2;
      }
      v26 = 0;
      v25 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v19 = v39;
  }
  v36 = 0;
  if (!v38)
  {
    v20 = v37;
    v37 = 0;
    v35 = 0;
    v40 = v19;
    if (!v19)
      goto LABEL_32;
    v21 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v12 + 24), &v40, v14);
    v13 = (WTF::StringImpl *)v21;
    v22 = *(_QWORD *)(v12 + 24);
    if (v22)
    {
      v23 = (WTF::StringImpl **)(v22 + 16 * *(unsigned int *)(v22 - 4));
      if (v23 == v21)
        goto LABEL_29;
    }
    else
    {
      if (!v21)
        goto LABEL_29;
      v23 = 0;
    }
    if (v23 != v21)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(v12 + 24), v21);
LABEL_29:
    v24 = v40;
    v40 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v13);
        if (!v20)
          goto LABEL_43;
LABEL_33:
        if (*(_DWORD *)v20 != 2)
        {
          v25 = 0;
          *(_DWORD *)v20 -= 2;
LABEL_35:
          v26 = 10;
LABEL_36:
          ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3344088[v25])(&v40, &v35);
          v15 = v38;
          goto LABEL_37;
        }
        WTF::StringImpl::destroy(v20, v13);
LABEL_43:
        v25 = 0;
        goto LABEL_35;
      }
      *(_DWORD *)v24 -= 2;
    }
LABEL_32:
    if (!v20)
      goto LABEL_43;
    goto LABEL_33;
  }
  v31 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsXSLTProcessorPrototypeFunction_clearParameters(v31, v32, v33);
}

uint64_t WebCore::jsXSLTProcessorPrototypeFunction_clearParameters(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v16;

  v3 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "XSLTProcessor", "clearParameters");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSXSLTProcessor::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSXSLTProcessor::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "XSLTProcessor", "clearParameters");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(WTF::StringImpl ***)(v9 + 24);
  if (v10)
  {
    *(_QWORD *)(v9 + 24) = 0;
    v11 = *((unsigned int *)v10 - 1);
    if ((_DWORD)v11)
    {
      v12 = v10;
      do
      {
        v13 = *v12;
        if (*v12 != (WTF::StringImpl *)-1)
        {
          v14 = v12[1];
          v12[1] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::destroy(v14, a2);
              v13 = *v12;
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, a2);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 2), a2);
  }
  return 10;
}

uint64_t WebCore::jsXSLTProcessorPrototypeFunction_reset(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "XSLTProcessor", "reset");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSXSLTProcessor::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSXSLTProcessor::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "XSLTProcessor", "reset");
  WebCore::XSLTProcessor::reset(*(WebCore::XSLTProcessor **)(v3 + 24), a2);
  return 10;
}

uint64_t WebCore::convert<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::WindowProxy>>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v3 = result;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  else
  {
    if ((a3 & 0xFFFE000000000002) == 0
      && *(unsigned __int8 *)(a3 + 5) >= 0x17u
      && &WebCore::JSWindowProxy::s_info == (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C))
      && (v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 3408),
          (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6))
      && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6),
          (v4 = *(_QWORD *)(result + 112)) != 0))
    {
      v5 = 0;
    }
    else
    {
      result = JSC::throwTypeError();
      v4 = 0;
      v5 = 1;
    }
    *(_QWORD *)v3 = v4;
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

uint64_t WebCore::convert<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::EventTarget>>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char **v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  char **v12;

  v3 = result;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    return result;
  }
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_4;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
  v7 = (char **)(16 * v6);
  if ((char **)(16 * v6) == &WebCore::JSWindowProxy::s_info)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a3 + 16) + 3408);
  }
  else
  {
    if ((_DWORD)v6)
      v8 = v7 == &WebCore::JSDOMWindow::s_info;
    else
      v8 = 1;
    if (v8)
    {
      if (!(_DWORD)v6)
        goto LABEL_4;
    }
    else
    {
      v10 = 16 * v6;
      do
        v10 = *(_QWORD *)(v10 + 16);
      while ((char **)v10 != &WebCore::JSDOMWindow::s_info && v10 != 0);
      if (!v10)
      {
        if (v7 == &WebCore::JSWorkerGlobalScope::s_info)
          goto LABEL_32;
        v12 = v7;
        do
          v12 = (char **)v12[2];
        while (v12 != &WebCore::JSWorkerGlobalScope::s_info && v12 != 0);
        if (v12)
        {
LABEL_32:
          v5 = 0;
          v4 = *(_QWORD *)(a3 + 3400) + 320;
          goto LABEL_23;
        }
        if (v7 != &WebCore::JSEventTarget::s_info)
        {
          do
            v7 = (char **)v7[2];
          while (v7 != &WebCore::JSEventTarget::s_info && v7 != 0);
          if (!v7)
            goto LABEL_4;
        }
        v9 = (uint64_t *)(a3 + 24);
        goto LABEL_21;
      }
    }
    v9 = (uint64_t *)(a3 + 3408);
  }
LABEL_21:
  v4 = *v9;
  if (v4)
  {
    v5 = 0;
    goto LABEL_23;
  }
LABEL_4:
  result = JSC::throwTypeError();
  v4 = 0;
  v5 = 1;
LABEL_23:
  *(_QWORD *)v3 = v4;
  *(_DWORD *)(v3 + 8) = v5;
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSWheelEvent>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSWheelEvent>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSWheelEvent>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSWorkerGlobalScope::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWorkerLocation::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWorkerNavigator::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWorklet::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWorkletGlobalScope::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWritableStream::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWritableStreamDefaultController::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::WritableStreamDefaultControllerBuiltinsWrapper::writableStreamDefaultControllerInitializeWritableStreamDefaultControllerCodeExecutable((WebCore::WritableStreamDefaultControllerBuiltinsWrapper *)(*v5 + 7984));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000000, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSWritableStreamDefaultController::s_info
       + ~((_QWORD)&WebCore::JSWritableStreamDefaultController::s_info << 32)) ^ (((unint64_t)&WebCore::JSWritableStreamDefaultController::s_info
                                                                                 + ~((_QWORD)&WebCore::JSWritableStreamDefaultController::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSWritableStreamDefaultController::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSWritableStreamDefaultController::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSWritableStreamDefaultControllerPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSWritableStreamDefaultControllerPrototype::create((WebCore::JSWritableStreamDefaultControllerPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSWritableStreamDefaultController::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSWritableStreamDefaultController::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSWritableStreamDefaultController::s_info
           + ~((_QWORD)&WebCore::JSWritableStreamDefaultController::s_info << 32)) ^ (((unint64_t)&WebCore::JSWritableStreamDefaultController::s_info
                                                                                     + ~((_QWORD)&WebCore::JSWritableStreamDefaultController::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSWritableStreamDefaultController::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSWritableStreamDefaultController::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSWritableStreamDefaultControllerPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSWritableStreamDefaultControllerPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSWritableStreamDefaultController::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSWritableStreamDefaultController::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSWritableStreamDefaultController::s_info
         + ~((_QWORD)&WebCore::JSWritableStreamDefaultController::s_info << 32)) ^ (((unint64_t)&WebCore::JSWritableStreamDefaultController::s_info
                                                                                   + ~((_QWORD)&WebCore::JSWritableStreamDefaultController::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSWritableStreamDefaultController::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSWritableStreamDefaultController::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSWritableStreamDefaultControllerPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSWritableStreamDefaultControllerPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSWritableStreamDefaultController::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSWritableStreamDefaultController::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1832);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 1832))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 1832);
    *(_QWORD *)(v30 + 1832) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 1832);
  *(_QWORD *)(v26 + 1832) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::JSWritableStreamDefaultWriter::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  JSC::Heap *v7;
  unint64_t SlowCase;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  uint64_t v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v5 = (_QWORD *)(a1 + 41456);
  v6 = *(_QWORD **)(a1 + 41456);
  v7 = (JSC::Heap *)(a1 + 192);
  SlowCase = v6[2835];
  if (SlowCase >= v6[2836])
  {
    SlowCase = v6[2837];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ v6[2838];
    v6[2836] = SlowCase + HIDWORD(v31);
    v6[2837] = SlowCase + (int)v31;
  }
  v6[2835] = SlowCase + 64;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::InternalFunction::InternalFunction();
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::WritableStreamDefaultWriterBuiltinsWrapper::writableStreamDefaultWriterInitializeWritableStreamDefaultWriterCodeExecutable((WebCore::WritableStreamDefaultWriterBuiltinsWrapper *)(*v5 + 8144));
  JSC::UnlinkedFunctionExecutable::link();
  *(_QWORD *)(SlowCase + 48) = JSC::JSFunction::create();
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v9 = *(_QWORD *)(v5[62] + 1768);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v9, 0xFFFE000000000001, 6, (uint64_t)&v32);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create(a1, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)(SlowCase + 32) = v11;
  if (v11 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)SlowCase);
  v13 = *(_QWORD *)(v5[62] + 1968);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v13, v11, 6, (uint64_t)&v32);
  v14 = *(_QWORD *)(v5[62] + 2160);
  v15 = *(_QWORD *)(a3 + 3296);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = ((unint64_t)&WebCore::JSWritableStreamDefaultWriter::s_info
       + ~((_QWORD)&WebCore::JSWritableStreamDefaultWriter::s_info << 32)) ^ (((unint64_t)&WebCore::JSWritableStreamDefaultWriter::s_info
                                                                             + ~((_QWORD)&WebCore::JSWritableStreamDefaultWriter::s_info << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = *(char ***)(v15 + 16 * v20);
  if (v21 != &WebCore::JSWritableStreamDefaultWriter::s_info)
  {
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(char ***)(v15 + 16 * v20);
      ++v22;
      if (v21 == &WebCore::JSWritableStreamDefaultWriter::s_info)
        goto LABEL_14;
    }
    goto LABEL_15;
  }
LABEL_14:
  v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
  if (!v23)
  {
LABEL_15:
    Structure = WebCore::JSWritableStreamDefaultWriterPrototype::createStructure((uint64_t *)a1, a3, *(JSC::JSCell **)(a3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSWritableStreamDefaultWriterPrototype::create((WebCore::JSWritableStreamDefaultWriterPrototype *)a1, Structure, v25, v26);
    v28 = WebCore::JSWritableStreamDefaultWriter::createStructure((uint64_t *)a1, a3, v27);
    v23 = WebCore::cacheDOMStructure((JSCell *)a3, v28, (uint64_t)&WebCore::JSWritableStreamDefaultWriter::s_info);
  }
  v29 = *(_QWORD *)(v23 + 48);
  v32 = 0;
  v33 = SlowCase;
  v34 = -1;
  v35 = 0x1000000;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)a1, v14, v29, 14, (uint64_t)&v32);
  return SlowCase;
}

uint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

unint64_t WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::construct(JSC *this, uint64_t a2, JSC::JSObject *a3)
{
  uint64_t *v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t SubclassStructure;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  JSC::Structure *v42;
  uint64_t FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v5 = *(uint64_t **)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(a2 + 40);
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v6 != (JSC::JSGlobalObject *)v5)
  {
    FunctionRealm = JSC::getFunctionRealm(this, *(JSC::JSGlobalObject **)(a2 + 40), a3);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
      return 0;
    v44 = *(_QWORD *)(FunctionRealm + 3296);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSWritableStreamDefaultWriter::s_info
           + ~((_QWORD)&WebCore::JSWritableStreamDefaultWriter::s_info << 32)) ^ (((unint64_t)&WebCore::JSWritableStreamDefaultWriter::s_info
                                                                                 + ~((_QWORD)&WebCore::JSWritableStreamDefaultWriter::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSWritableStreamDefaultWriter::s_info)
      {
LABEL_44:
        v52 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v52)
        {
LABEL_46:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v6, v52, v42);
          goto LABEL_9;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSWritableStreamDefaultWriter::s_info)
            goto LABEL_44;
        }
      }
    }
    Structure = WebCore::JSWritableStreamDefaultWriterPrototype::createStructure((uint64_t *)v7, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSWritableStreamDefaultWriterPrototype::create(v7, Structure, v54, v55);
    v57 = WebCore::JSWritableStreamDefaultWriter::createStructure((uint64_t *)v7, FunctionRealm, v56);
    v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSWritableStreamDefaultWriter::s_info);
    goto LABEL_46;
  }
  v8 = v5[5];
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSWritableStreamDefaultWriter::s_info
         + ~((_QWORD)&WebCore::JSWritableStreamDefaultWriter::s_info << 32)) ^ (((unint64_t)&WebCore::JSWritableStreamDefaultWriter::s_info
                                                                               + ~((_QWORD)&WebCore::JSWritableStreamDefaultWriter::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSWritableStreamDefaultWriter::s_info)
    {
LABEL_7:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_11;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSWritableStreamDefaultWriter::s_info)
          goto LABEL_7;
      }
    }
  }
  v18 = WebCore::JSWritableStreamDefaultWriterPrototype::createStructure(*((uint64_t **)this + 7), v5[5], *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSWritableStreamDefaultWriterPrototype::create(v7, v18, v19, v20);
  v22 = WebCore::JSWritableStreamDefaultWriter::createStructure((uint64_t *)v7, v8, v21);
  SubclassStructure = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSWritableStreamDefaultWriter::s_info);
LABEL_9:
  v17 = SubclassStructure;
  if (!SubclassStructure)
    return 0;
  v8 = v5[5];
LABEL_11:
  v24 = *(_QWORD *)(v8 + 56);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1840);
  if (v27)
    goto LABEL_31;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_16:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 1840))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v59, v24 + 192, v24 + 1872, 24, 8, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v59;
    v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 1840);
    *(_QWORD *)(v30 + 1840) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v26 + 1840);
  *(_QWORD *)(v26 + 1840) = v27;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v28);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_31:
  SlowCase = v27[3];
  if (SlowCase >= v27[4])
  {
    SlowCase = v27[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_33;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
  }
  v27[3] = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v59 = (WTF *)(a2 + 48);
  v60 = *(_DWORD *)(a2 + 32) - 1;
  JSC::call();
  return SlowCase;
}

uint64_t WebCore::JSXMLDocument::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSXMLHttpRequest>(WebCore::JSXMLHttpRequestEventTarget *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *v6;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v8;
  JSC::Structure *v9;
  JSC::JSCell *v10;
  uint64_t v11;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSXMLHttpRequest::s_info);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::JSXMLHttpRequestEventTarget::prototype(a1, a2, v5);
    Structure = WebCore::JSXMLHttpRequestPrototype::createStructure((uint64_t *)a1, (uint64_t)a2, v6);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v10 = (JSC::JSCell *)WebCore::JSXMLHttpRequestPrototype::create(a1, Structure, v8, v9);
    v11 = WebCore::JSXMLHttpRequest::createStructure((uint64_t *)a1, (uint64_t)a2, v10);
    return WebCore::cacheDOMStructure((JSCell *)a2, v11, (uint64_t)&WebCore::JSXMLHttpRequest::s_info);
  }
  return result;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSXMLHttpRequest>::createStructure(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::setJSXMLHttpRequest_onreadystatechangeSetter(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  WebCore::EventTarget *v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(WebCore::EventTarget **)(a2 + 24);
  ++*((_DWORD *)v6 - 8);
  v7 = WebCore::eventNames((WebCore *)a1);
  result = WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v6, (WTF::StringImpl **)(v7 + 1632), a3, (_DWORD *)a2);
  if (*((_DWORD *)v6 - 8) == 1)
    result = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v6 - 7) + 16))((uint64_t)v6 - 56);
  else
    --*((_DWORD *)v6 - 8);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && a1[190] >= *(unsigned __int8 *)(a2 + 7))
    return JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 48), (const JSCell *)a2);
  return result;
}

uint64_t WebCore::setJSXMLHttpRequest_responseTypeSetter(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char hasExceptionsAfterHandlingTraps;
  __int16 v7;
  JSC::VM *v8;

  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v7 = WebCore::parseEnumeration<WebCore::XMLHttpRequest::ResponseType>(a1, a3);
  if (!*((_DWORD *)v8 + 20))
  {
    if (!HIBYTE(v7))
      return 0;
    goto LABEL_3;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v8);
  result = 0;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0 && HIBYTE(v7))
  {
LABEL_3:
    WebCore::invokeFunctorPropagatingExceptionIfNecessary<WebCore::setJSXMLHttpRequest_responseTypeSetter(JSC::JSGlobalObject &,WebCore::JSXMLHttpRequest &,JSC::JSValue)::{lambda(void)#1}>(a1, &v8, a2 - 56, (unsigned __int8 *)&v7);
    return 1;
  }
  return result;
}

uint64_t WebCore::invokeFunctorPropagatingExceptionIfNecessary<WebCore::setJSXMLHttpRequest_responseTypeSetter(JSC::JSGlobalObject &,WebCore::JSXMLHttpRequest &,JSC::JSValue)::{lambda(void)#1}>(JSC *a1, JSC::VM **a2, uint64_t a3, unsigned __int8 *a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  WebCore::setJSXMLHttpRequest_responseTypeSetter(JSC::JSGlobalObject &,WebCore::JSXMLHttpRequest &,JSC::JSValue)::{lambda(void)#1}::operator()(&v11, a3, a4);
  if (v13)
  {
    v9[0] = v11;
    v8 = v12;
    v12 = 0;
    v10 = v8;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a2, v9);
      v8 = v10;
    }
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v11, v6);
}

uint64_t WebCore::setJSXMLHttpRequest_responseTypeSetter(JSC::JSGlobalObject &,WebCore::JSXMLHttpRequest &,JSC::JSValue)::{lambda(void)#1}::operator()(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  WebCore *v4;
  JSC::JSGlobalObject *v5;
  WebCore::JSXMLHttpRequest *v6;

  if (a3[1])
    return WebCore::XMLHttpRequest::setResponseType(a2, *a3, a1);
  v4 = (WebCore *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::jsXMLHttpRequest_responseTextGetter(v4, v5, v6);
}

uint64_t WebCore::jsXMLHttpRequest_responseTextGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSXMLHttpRequest *a3)
{
  uint64_t v4;
  _BYTE v6[16];
  int v7;
  JSC::VM *v8;
  char v9;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  WebCore::XMLHttpRequest::responseText((uint64_t)a2 - 56, (uint64_t)v6);
  v4 = WebCore::toJS<WebCore::IDLUSVString,WebCore::ExceptionOr<WebCore::OwnedString>>((JSC **)this, &v8, (uint64_t)v6);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))off_1E3346A98[v7])(&v9, v6);
  return v4;
}

uint64_t WebCore::toJS<WebCore::IDLUSVString,WebCore::ExceptionOr<WebCore::OwnedString>>(JSC **a1, JSC::VM **a2, uint64_t a3)
{
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = *(_DWORD *)(a3 + 16);
  if (!v3)
  {
    v4 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    v11 = v4;
    v6 = JSC::jsOwnedString(a1[7], (JSC::VM *)&v11, (const WTF::String *)a3);
    v7 = v11;
    v11 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    return v6;
  }
  if (v3 == 1)
  {
    LOBYTE(v11) = *(_BYTE *)a3;
    v9 = *(WTF::StringImpl **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    v12 = v9;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath((JSC *)a1, a2, (unsigned __int8 *)&v11);
      v9 = v12;
    }
    v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    return 0;
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11OwnedStringENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(v10);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11OwnedStringENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11OwnedStringENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSXMLHttpRequest::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 7448);
  *(_QWORD *)(a1 + 7448) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::getCachedWrapper<WebCore::XMLHttpRequest>(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 48))
  {
    v4 = a2;
    return WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(a1 + 32), &v4);
  }
  else
  {
    v2 = *(_BYTE **)(a2 + 64);
    if (!v2 || (v2[8] & 3) != 0)
      return 0;
    else
      return *(_QWORD *)v2;
  }
}

uint64_t *WebCore::setJSXMLHttpRequestEventTarget_onloadSetter(WebCore *a1, uint64_t a2, uint64_t a3)
{
  WebCore *v5;
  WebCore::EventTarget *v6;
  uint64_t v7;
  void *v8;
  uint64_t *result;
  WebCore::EventTarget *v10;

  v5 = a1;
  v6 = *(WebCore::EventTarget **)(a2 + 24);
  if ((*((_BYTE *)v6 + 22) & 2) != 0)
    *((_DWORD *)v6 + 6) += 2;
  else
    a1 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 88))(*(_QWORD *)(a2 + 24));
  v10 = v6;
  v7 = WebCore::eventNames(a1);
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v6, (WTF::StringImpl **)(v7 + 1104), a3, (_DWORD *)a2);
  result = WTF::Ref<WebCore::XMLHttpRequestEventTarget,WTF::RawPtrTraits<WebCore::XMLHttpRequestEventTarget>,WTF::DefaultRefDerefTraits<WebCore::XMLHttpRequestEventTarget>>::~Ref((uint64_t *)&v10, v8);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *((_DWORD *)v5 + 190) >= *(unsigned __int8 *)(a2 + 7))
    return (uint64_t *)JSC::Heap::writeBarrierSlowPath((WebCore *)((char *)v5 + 192), (const JSCell *)a2);
  return result;
}

uint64_t WebCore::JSXMLHttpRequestProgressEvent::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 7464);
  *(_QWORD *)(a1 + 7464) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSXMLHttpRequestUpload::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSXMLSerializer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSXPathEvaluator::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSXPathExpression::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSXPathResult::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSXSLTProcessor::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::RemoteCommandListenerCocoa::updateSupportedCommands(WebCore::RemoteCommandListenerCocoa *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *i;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  WebCore *v18;
  WebCore *Mutable;
  const __CFAllocator *v20;
  __CFArray *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  void *v29;
  WebCore *v30;
  unsigned int v31;
  unsigned __int8 v32;
  WebCore *v33;
  void *v34;
  const __CFDictionary *v35;
  _BYTE *v36;
  uint64_t LocalOrigin;
  void *v38;
  uint64_t v39;
  unsigned __int8 **v40;
  uint64_t v42[3];
  uint64_t MediaRemote_kMRMediaRemoteOptionSkipInterval;
  void *v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!WebCore::MediaRemoteLibrary((WebCore *)1))
    return;
  v2 = (uint64_t *)((char *)this + 16);
  v1 = *((_QWORD *)this + 2);
  if (!v1 || !*(_DWORD *)(v1 - 12))
  {
    if ((_MergedGlobals_46 & 1) == 0)
    {
      v45 = 0x906050807040201;
      v46 = 2826;
      qword_1ECE81788 = 0;
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, &v45, (uint64_t)v42);
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, (_BYTE *)&v45 + 1, (uint64_t)v42);
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, (_BYTE *)&v45 + 2, (uint64_t)v42);
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, (_BYTE *)&v45 + 3, (uint64_t)v42);
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, (_BYTE *)&v45 + 4, (uint64_t)v42);
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, (_BYTE *)&v45 + 5, (uint64_t)v42);
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, (_BYTE *)&v45 + 6, (uint64_t)v42);
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, (_BYTE *)&v45 + 7, (uint64_t)v42);
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, &v46, (uint64_t)v42);
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(&qword_1ECE81788, (_BYTE *)&v46 + 1, (uint64_t)v42);
      _MergedGlobals_46 = 1;
    }
    v2 = &qword_1ECE81788;
  }
  v3 = *((_QWORD *)this + 9);
  if (!v3)
  {
    if (!*v2)
      return;
    v6 = *(_DWORD *)(*v2 - 12);
    if (!v6)
      return;
LABEL_35:
    v18 = (WebCore *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, MEMORY[0x1E0C9B378]);
    v21 = Mutable;
    v22 = *v2;
    if (*v2)
    {
      v23 = *(unsigned int *)(v22 - 4);
      v24 = (_BYTE *)(v22 + v23);
      if (*(_DWORD *)(v22 - 12))
      {
        v25 = (_BYTE *)*v2;
        if ((_DWORD)v23)
        {
          v25 = (_BYTE *)*v2;
          while (*v25 >= 0xFEu)
          {
            ++v25;
            if (!--v23)
            {
              v25 = v24;
              goto LABEL_45;
            }
          }
        }
        goto LABEL_45;
      }
      v25 = (_BYTE *)(v22 + v23);
    }
    else
    {
      v25 = 0;
      v23 = 0;
    }
    v24 = (_BYTE *)(v22 + v23);
LABEL_45:
    v40 = (unsigned __int8 **)v2;
    if (v22)
      v26 = (_BYTE *)(v22 + *(unsigned int *)(v22 - 4));
    else
      v26 = 0;
    while (v25 != v26)
    {
      v27 = *v25;
      v28 = 0;
      switch(*v25)
      {
        case 1:
          goto LABEL_60;
        case 2:
          v28 = 1;
          goto LABEL_60;
        case 3:
          v28 = 2;
          goto LABEL_60;
        case 4:
          v28 = 3;
          goto LABEL_60;
        case 5:
        case 7:
        case 9:
        case 0xA:
        case 0xB:
          if (!*((_BYTE *)this + 40) || (v27 - 5) >= 7)
            goto LABEL_64;
          v28 = (v27 - 5) + 4;
LABEL_60:
          v29 = (void *)WebCore::mediaRemoteCommandForPlatformCommand(WebCore::PlatformMediaSessionRemoteControlCommandType)::mappings[2 * v28 + 1];
          v30 = (WebCore *)WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoCreate(v18, v20);
          WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetCommand(v30, v29, v31);
          v33 = (WebCore *)WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetEnabled(v30, (void *)1, v32);
          if ((v27 & 0xFE) == 0xA)
          {
            MediaRemote_kMRMediaRemoteOptionSkipInterval = WebCore::get_MediaRemote_kMRMediaRemoteOptionSkipInterval(v33);
            v44 = &unk_1E349D5E8;
            v34 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v44, &MediaRemote_kMRMediaRemoteOptionSkipInterval, 1, v40);
            WebCore::softLinkMediaRemoteMRMediaRemoteCommandInfoSetOptions(v30, v34, v35);
          }
          CFArrayAppendValue(v21, v30);
          if (v30)
            CFRelease(v30);
LABEL_64:
          v36 = v25 + 1;
          v25 = v24;
          if (v36 == v24)
            continue;
          v25 = v36;
          break;
        case 6:
          v28 = 5;
          goto LABEL_60;
        case 8:
          v28 = 7;
          goto LABEL_60;
        case 0xC:
          v28 = 11;
          goto LABEL_60;
        case 0xD:
          v28 = 12;
          goto LABEL_60;
        default:
          goto LABEL_64;
      }
      while (*v25 >= 0xFEu)
      {
        if (++v25 == v24)
        {
          v25 = v24;
          break;
        }
      }
    }
    LocalOrigin = WebCore::softLinkMediaRemoteMRMediaRemoteGetLocalOrigin(Mutable);
    WebCore::softLinkMediaRemoteMRMediaRemoteSetSupportedCommands(v21, LocalOrigin, 0, 0);
    WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::HashTable(v42, v40);
    v39 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v42[0];
    v42[0] = v39;
    if (v39)
      WTF::fastFree((WTF *)(v39 - 16), v38);
    if (v21)
      CFRelease(v21);
    return;
  }
  v4 = *(_DWORD *)(v3 - 12);
  v5 = *v2;
  if (!*v2)
  {
    if (!v4)
      return;
    v6 = 0;
    goto LABEL_35;
  }
  v6 = *(_DWORD *)(v5 - 12);
  if (v4 != v6)
    goto LABEL_35;
  if (v4)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int *)(v5 - 4);
      for (i = (unsigned __int8 *)*v2; *i >= 0xFEu; ++i)
      {
        if (!--v8)
          return;
      }
    }
    else
    {
      i = (unsigned __int8 *)*v2;
    }
    v10 = (unsigned __int8 *)(v5 + v7);
    if (i != v10)
    {
      v11 = *(_DWORD *)(v3 - 8);
      while (1)
      {
        v12 = *i;
        v13 = 9 * ((~(v12 << 15) + v12) ^ ((~(v12 << 15) + v12) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = (v14 ^ HIWORD(v14)) & v11;
        v16 = *(unsigned __int8 *)(v3 + v15);
        if (v16 != v12)
          break;
LABEL_28:
        if (++i != v10)
        {
          while (*i >= 0xFEu)
          {
            if (++i == v10)
            {
              i = v10;
              break;
            }
          }
          if (i != v10)
            continue;
        }
        return;
      }
      v17 = 1;
      while (v16 != 255)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(unsigned __int8 *)(v3 + v15);
        ++v17;
        if (v16 == v12)
          goto LABEL_28;
      }
      v6 = *(_DWORD *)(v3 - 12);
      goto LABEL_35;
    }
  }
}

void sub_195175D28(_Unwind_Exception *exception_object, void *a2)
{
  if (qword_1ECE81788)
    WTF::fastFree((WTF *)(qword_1ECE81788 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::RemoteCommandListenerCocoa::RemoteCommandListenerCocoa(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD v20[5];
  WTF *v21;
  _QWORD *v22;

  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = off_1E3347100;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 64) = 0;
  v3 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  if (WebCore::MediaRemoteLibrary((WebCore *)1))
  {
    if (!*(_BYTE *)(a1 + 32))
    {
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v4 = off_1E3405DC0;
      v4[1] = a1;
      v22 = v4;
      WebCore::MainThreadDeferrableTask::scheduleTask(a1 + 24, (uint64_t *)&v22);
      v5 = (uint64_t)v22;
      v22 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      goto LABEL_26;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = a1;
    v8 = *(unsigned int **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    if (!v8)
      goto LABEL_26;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
    {
LABEL_26:
      do
        v11 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v11 + 1, (unsigned int *)v6));
    }
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3321888768;
    v20[2] = ___ZN7WebCore26RemoteCommandListenerCocoaC2ERNS_27RemoteCommandListenerClientE_block_invoke;
    v20[3] = &__block_descriptor_48_e8_40c105_ZTSN3WTF7WeakPtrIN7WebCore26RemoteCommandListenerCocoaENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE_e50_v28__0I8____CFDictionary__12___v______CFArray___20l;
    v20[4] = a1;
    if (v6)
    {
      do
        v12 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v12 + 1, (unsigned int *)v6));
    }
    v21 = (WTF *)v6;
    *v3 = WebCore::softLinkMediaRemoteMRMediaRemoteAddAsyncCommandHandlerBlock(v20);
    v14 = (unsigned int *)v21;
    v21 = 0;
    if (!v14)
      goto LABEL_17;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
      if (!v6)
        return a1;
    }
    else
    {
LABEL_17:
      if (!v6)
        return a1;
    }
    do
    {
      v17 = __ldaxr((unsigned int *)v6);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v6));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v6);
      WTF::fastFree((WTF *)v6, v13);
    }
  }
  return a1;
}

void sub_195175F54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v18 = v15[9];
  if (v18)
    WTF::fastFree((WTF *)(v18 - 16), a2);
  v19 = v15[6];
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (unsigned int *)v15[6];
    v15[6] = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, a2);
      }
    }
  }
  else
  {
    v15[6] = 0;
  }
  *v15 = off_1E3405D38;
  v23 = v15[3];
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 0;
    v24 = (unsigned int *)v15[3];
    v15[3] = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, a2);
      }
    }
  }
  else
  {
    v15[3] = 0;
  }
  if (*v16)
    WTF::fastFree((WTF *)(*v16 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore26RemoteCommandListenerCocoaC2ERNS_27RemoteCommandListenerClientE_block_invoke(WebCore *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  const void *MediaRemote_kMRMediaRemoteOptionSkipInterval;
  const __CFNumber *Value;
  const void *MediaRemote_kMRMediaRemoteOptionPlaybackPosition;
  const __CFNumber *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 4);
  LOBYTE(v20) = 0;
  v21 = 0;
  v22 = 0;
  v8 = a2;
  v9 = 1;
  v10 = 1;
  switch((int)a2)
  {
    case 0:
      break;
    case 1:
      v8 = 0;
      v9 = 2;
      break;
    case 2:
      v8 = 0;
      v9 = 4;
      break;
    case 3:
      v8 = 0;
      v9 = 3;
      break;
    case 4:
      v8 = 0;
      v9 = 12;
      break;
    case 5:
      v8 = 0;
      v9 = 13;
      break;
    case 8:
      v8 = 0;
      v9 = 7;
      break;
    case 9:
      v8 = 0;
      v9 = 8;
      break;
    case 10:
      v8 = 0;
      v9 = 5;
      break;
    case 11:
      v8 = 0;
      v9 = 6;
      break;
    case 17:
    case 18:
      v10 = *(_BYTE *)(v6 + 40);
      if (!v10)
        goto LABEL_22;
      MediaRemote_kMRMediaRemoteOptionSkipInterval = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteOptionSkipInterval(a1);
      Value = (const __CFNumber *)CFDictionaryGetValue(a3, MediaRemote_kMRMediaRemoteOptionSkipInterval);
      if (Value)
      {
        v19 = 0;
        CFNumberGetValue(Value, kCFNumberDoubleType, &v19);
        v20 = v19;
        v21 = 1;
      }
      if ((_DWORD)v8 == 17)
        v9 = 10;
      else
        v9 = 11;
      v10 = 1;
      v8 = 0;
      break;
    case 24:
      v10 = *(_BYTE *)(v6 + 40);
      if (!v10)
      {
LABEL_22:
        v9 = 0;
        goto LABEL_23;
      }
      MediaRemote_kMRMediaRemoteOptionPlaybackPosition = (const void *)WebCore::get_MediaRemote_kMRMediaRemoteOptionPlaybackPosition(a1);
      v14 = (const __CFNumber *)CFDictionaryGetValue(a3, MediaRemote_kMRMediaRemoteOptionPlaybackPosition);
      if (!v14)
        goto LABEL_21;
      v19 = 0;
      CFNumberGetValue(v14, kCFNumberDoubleType, &v19);
      v8 = 0;
      v20 = v19;
      v10 = 1;
      v21 = 1;
      v9 = 9;
      break;
    default:
LABEL_21:
      v9 = 0;
      v10 = 0;
LABEL_23:
      v8 = 2;
      break;
  }
  v15 = *((_QWORD *)a1 + 5);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    v17 = v10 ^ 1;
    if (!v16)
      v17 = 1;
    if ((v17 & 1) == 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t *))(**(_QWORD **)(v16 + 8) + 16))(*(_QWORD *)(v16 + 8), v9, &v20);
  }
  v23[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 1));
}

uint64_t __copy_helper_block_e8_40c105_ZTSN3WTF7WeakPtrIN7WebCore26RemoteCommandListenerCocoaENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_40c105_ZTSN3WTF7WeakPtrIN7WebCore26RemoteCommandListenerCocoaENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::RemoteCommandListenerCocoa::~RemoteCommandListenerCocoa(WebCore::RemoteCommandListenerCocoa *this, void *a2)
{
  WebCore *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  *(_QWORD *)this = off_1E3347100;
  v3 = (WebCore *)*((_QWORD *)this + 8);
  if (v3)
    WebCore::softLinkMediaRemoteMRMediaRemoteRemoveCommandHandlerBlock(v3, a2);
  v4 = *((_QWORD *)this + 9);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  *(_QWORD *)this = off_1E3405D38;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v13 = *((_QWORD *)this + 2);
  if (v13)
    WTF::fastFree((WTF *)(v13 - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::RemoteCommandListenerCocoa::~RemoteCommandListenerCocoa(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_1951763EC(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = v2[9];
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = v2[6];
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)v2[6];
    v2[6] = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    v2[6] = 0;
  }
  *v2 = off_1E3405D38;
  v9 = v2[3];
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)v2[3];
    v2[3] = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    v2[3] = 0;
  }
  v13 = v2[2];
  if (v13)
    WTF::fastFree((WTF *)(v13 - 16), a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::setApplicationBundleIdentifierOverride(WebCore *this, const WTF::String *a2)
{
  _DWORD *v2;
  WTF::StringImpl *result;

  if ((byte_1ECE81781 & 1) == 0)
  {
    qword_1ECE81790 = 0;
    byte_1ECE81781 = 1;
  }
  v2 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v2 += 2;
  result = (WTF::StringImpl *)qword_1ECE81790;
  qword_1ECE81790 = (uint64_t)v2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::clearApplicationBundleIdentifierTestingOverride(WebCore *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if ((byte_1ECE81781 & 1) != 0)
  {
    v2 = (WTF::StringImpl *)qword_1ECE81790;
    qword_1ECE81790 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, a2);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
  else
  {
    byte_1ECE81781 = 1;
    qword_1ECE81790 = 0;
  }
}

uint64_t *WebCore::presentingApplicationBundleIdentifier(WebCore *this)
{
  {
    WebCore::presentingApplicationBundleIdentifierStorage(void)::identifier = 0;
  }
  return &WebCore::presentingApplicationBundleIdentifierStorage(void)::identifier;
}

uint64_t WebCore::CocoaApplication::isWebkitTestRunner(WebCore::CocoaApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81742 == 1)
    return byte_1ECE81741 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81741 = IsEqualTo;
  byte_1ECE81742 = 1;
  return result;
}

void sub_195176644(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isMobileMail(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

    return WebCore::IOSApplication::isMobileMail(void)::isMobileMail != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::IOSApplication::isMobileMail(void)::isMobileMail = IsEqualTo;
  return result;
}

void sub_195176710(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isMailCompositionService(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

    return WebCore::IOSApplication::isMailCompositionService(void)::isMailCompositionService != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::IOSApplication::isMailCompositionService(void)::isMailCompositionService = IsEqualTo;
  return result;
}

void sub_1951767DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isDumpRenderTree(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

    return WebCore::IOSApplication::isDumpRenderTree(void)::isDumpRenderTree != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::IOSApplication::isDumpRenderTree(void)::isDumpRenderTree = IsEqualTo;
  return result;
}

void sub_1951768A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isMobileStore(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

    return WebCore::IOSApplication::isMobileStore(void)::isMobileStore != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::IOSApplication::isMobileStore(void)::isMobileStore = IsEqualTo;
  return result;
}

void sub_195176974(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::IOSApplication::isWebProcess(WebCore::IOSApplication *this)
{
  return !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu;
}

uint64_t WebCore::IOSApplication::isBackboneApp(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

    return WebCore::IOSApplication::isBackboneApp(void)::isBackboneApp != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::IOSApplication::isBackboneApp(void)::isBackboneApp = IsEqualTo;
  return result;
}

void sub_195176A5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isTheSecretSocietyHiddenMystery(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8174C == 1)
    return byte_1ECE8174B != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8174B = IsEqualTo;
  byte_1ECE8174C = 1;
  return result;
}

void sub_195176B2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isAppleApplication(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  _BYTE v9[12];

  if (byte_1ECE81756 == 1)
    return byte_1ECE81755 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = *(_QWORD *)&v9[4];
  if ((byte_1ECE81781 & 1) != 0)
  {
    v4 = (WTF::StringImpl *)qword_1ECE81790;
    if (qword_1ECE81790)
      goto LABEL_6;
  }
  else
  {
    qword_1ECE81790 = 0;
    byte_1ECE81781 = 1;
  }
  if ((byte_1ECE81782 & 1) == 0)
  {
    qword_1ECE81798 = 0;
    byte_1ECE81782 = 1;
    goto LABEL_26;
  }
  v4 = (WTF::StringImpl *)qword_1ECE81798;
  if (!qword_1ECE81798)
  {
LABEL_26:
    MEMORY[0x19AEA5508](&v9[4], objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"));
    goto LABEL_8;
  }
LABEL_6:
  v5 = *(_DWORD *)v4 + 2;
  *(_DWORD *)v4 = v5;
  *(_DWORD *)v4 = v5 + 2;
  *(_QWORD *)&v9[4] = v4;
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy(v4, v2);
LABEL_8:
  if (v3)
  {
    v6 = *(WTF::StringImpl **)(v3 + 8);
    v7 = *(_DWORD *)(v3 + 4);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (*(_QWORD *)&v9[4])
  {
    *(_DWORD *)v9 = WTF::StringImpl::startsWith();
    v8 = *(WTF::StringImpl **)&v9[4];
    *(_QWORD *)&v9[4] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    *(_QWORD *)v9 = v7 == 0;
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v3, v6);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(unsigned int *)v9;
  byte_1ECE81755 = v9[0];
  byte_1ECE81756 = 1;
  return result;
}

void sub_195176CF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF::StringImpl *v10;

  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isDataActivation(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8175C == 1)
    return byte_1ECE8175B != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8175B = IsEqualTo;
  byte_1ECE8175C = 1;
  return result;
}

void sub_195176DFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isFeedly(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81764 == 1)
    return byte_1ECE81763 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81763 = IsEqualTo;
  byte_1ECE81764 = 1;
  return result;
}

void sub_195176ECC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isPocketCity(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81766 == 1)
    return byte_1ECE81765 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81765 = IsEqualTo;
  byte_1ECE81766 = 1;
  return result;
}

void sub_195176F9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isEssentialSkeleton(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81768 == 1)
    return byte_1ECE81767 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81767 = IsEqualTo;
  byte_1ECE81768 = 1;
  return result;
}

void sub_19517706C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isLaBanquePostale(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8176A == 1)
    return byte_1ECE81769 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81769 = IsEqualTo;
  byte_1ECE8176A = 1;
  return result;
}

void sub_19517713C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isESPNFantasySports(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8176C == 1)
    return byte_1ECE8176B != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8176B = IsEqualTo;
  byte_1ECE8176C = 1;
  return result;
}

void sub_19517720C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isDoubleDown(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8176E == 1)
    return byte_1ECE8176D != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8176D = IsEqualTo;
  byte_1ECE8176E = 1;
  return result;
}

void sub_1951772DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isFIFACompanion(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81770 == 1)
    return byte_1ECE8176F != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8176F = IsEqualTo;
  byte_1ECE81770 = 1;
  return result;
}

void sub_1951773AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isNoggin(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81772 == 1)
    return byte_1ECE81771 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81771 = IsEqualTo;
  byte_1ECE81772 = 1;
  return result;
}

void sub_19517747C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isOKCupid(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81774 == 1)
    return byte_1ECE81773 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81773 = IsEqualTo;
  byte_1ECE81774 = 1;
  return result;
}

void sub_19517754C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isJWLibrary(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81776 == 1)
    return byte_1ECE81775 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81775 = IsEqualTo;
  byte_1ECE81776 = 1;
  return result;
}

void sub_19517761C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isPaperIO(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81778 == 1)
    return byte_1ECE81777 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81777 = IsEqualTo;
  byte_1ECE81778 = 1;
  return result;
}

void sub_1951776EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isCrunchyroll(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8177A == 1)
    return byte_1ECE81779 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81779 = IsEqualTo;
  byte_1ECE8177A = 1;
  return result;
}

void sub_1951777BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isDOFUSTouch(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

    return WebCore::IOSApplication::isDOFUSTouch(void)::isDOFUSTouch != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::IOSApplication::isDOFUSTouch(void)::isDOFUSTouch = IsEqualTo;
  return result;
}

void sub_195177888(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::saveRecentSearchesToFile(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const __CFString *v16;
  const void *v17;
  const void *v18;
  const __CFString *v19;
  const __CFString *v20;
  __CFString *v21;

  if (*(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 + 4) && *(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithContentsOfFile:", objc_msgSend((id)WTF::StringImpl::operator NSString *(), "stringByAppendingPathComponent:", CFSTR("RecentSearches.plist")));
    v7 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("items"));
    v8 = v7;
    if (v7)
      CFRetain(v7);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      if (v8)
        CFRelease(v8);
      v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", v9, CFSTR("items"), 0);
      if (v6)
        CFRelease(v6);
      v8 = v9;
      v6 = (void *)v10;
    }
    if (*((_DWORD *)a2 + 3))
    {
      v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a2 + 3));
      v12 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v12)
      {
        v13 = *a2;
        v14 = *a2 + 16 * v12;
        do
        {
          v15 = objc_alloc(MEMORY[0x1E0C99D80]);
          if (*(_QWORD *)v13)
            v16 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v16 = &stru_1E3487BC0;
          v17 = (const void *)objc_msgSend(v15, "initWithObjectsAndKeys:", v16, CFSTR("searchString"), objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", *(double *)(v13 + 8)), CFSTR("date"), 0);
          if (v17)
          {
            objc_msgSend(v11, "addObject:", v17);
            CFRelease(v17);
          }
          v13 += 16;
        }
        while (v13 != v14);
      }
      v18 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", v11, CFSTR("searches"), 0);
      if (*(_QWORD *)a1)
        v19 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v19 = &stru_1E3487BC0;
      objc_msgSend(v8, "setObject:forKey:", v18, v19);
      if (v18)
        CFRelease(v18);
      if (v11)
        CFRelease(v11);
    }
    else
    {
      if (*(_QWORD *)a1)
        v20 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v20 = &stru_1E3487BC0;
      objc_msgSend(v8, "removeObjectForKey:", v20);
    }
    if (*(_QWORD *)a3)
      v21 = (__CFString *)WTF::StringImpl::operator NSString *();
    else
      v21 = &stru_1E3487BC0;
    objc_msgSend(v6, "writeToFile:atomically:", -[__CFString stringByAppendingPathComponent:](v21, "stringByAppendingPathComponent:", CFSTR("RecentSearches.plist")), 1);
    if (v8)
      CFRelease(v8);
    if (v6)
      CFRelease(v6);
  }
}

void sub_195177B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;
  const void *v15;

  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

void WebCore::loadRecentSearchesFromFile(WebCore *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  CFTypeRef cf;
  WTF::StringImpl *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (*(_QWORD *)this)
  {
    if (*(_DWORD *)(*(_QWORD *)this + 4))
    {
      if (*(_QWORD *)a2)
      {
        if (*(_DWORD *)(*(_QWORD *)a2 + 4))
        {
          v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithContentsOfFile:", objc_msgSend((id)WTF::StringImpl::operator NSString *(), "stringByAppendingPathComponent:", CFSTR("RecentSearches.plist")));
          if (v6)
          {
            cf = v6;
            v7 = (void *)objc_msgSend(v6, "objectForKey:", CFSTR("items"));
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v8 = *(_QWORD *)this ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
              v9 = (void *)objc_msgSend(v7, "objectForKey:", v8);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v10 = (void *)objc_msgSend(v9, "objectForKey:", CFSTR("searches"));
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & (v10 != 0)) != 0)
                {
                  v31 = 0u;
                  v32 = 0u;
                  v29 = 0u;
                  v30 = 0u;
                  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
                  if (v11)
                  {
                    v12 = *(_QWORD *)v30;
                    do
                    {
                      v13 = 0;
                      do
                      {
                        if (*(_QWORD *)v30 != v12)
                          objc_enumerationMutation(v10);
                        v14 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v13);
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) != 0)
                        {
                          v15 = (void *)objc_msgSend(v14, "objectForKey:", CFSTR("date"));
                          objc_opt_class();
                          if ((objc_opt_isKindOfClass() & (v15 != 0)) != 0)
                          {
                            v16 = objc_msgSend(v14, "objectForKey:", CFSTR("searchString"));
                            objc_opt_class();
                            if ((objc_opt_isKindOfClass() & 1) != 0)
                            {
                              MEMORY[0x19AEA5508](&v27, v16);
                              objc_msgSend(v15, "timeIntervalSince1970");
                              v28 = v18;
                              v19 = *(unsigned int *)(a3 + 12);
                              if ((_DWORD)v19 == *(_DWORD *)(a3 + 8))
                              {
                                v20 = (WTF::StringImpl **)WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v19 + 1, (unint64_t)&v27);
                                v21 = (WTF::StringImpl **)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12));
                                v22 = *v20;
                                *v20 = 0;
                                v23 = v20 + 1;
                              }
                              else
                              {
                                v21 = (WTF::StringImpl **)(*(_QWORD *)a3 + 16 * v19);
                                v23 = (WTF::StringImpl **)&v28;
                                v22 = v27;
                                v27 = 0;
                              }
                              *v21 = v22;
                              v21[1] = *v23;
                              ++*(_DWORD *)(a3 + 12);
                              v24 = v27;
                              v27 = 0;
                              if (v24)
                              {
                                if (*(_DWORD *)v24 == 2)
                                  WTF::StringImpl::destroy(v24, v17);
                                else
                                  *(_DWORD *)v24 -= 2;
                              }
                            }
                          }
                        }
                        ++v13;
                      }
                      while (v11 != v13);
                      v25 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
                      v11 = v25;
                    }
                    while (v25);
                  }
                }
              }
            }
            CFRelease(cf);
          }
        }
      }
    }
  }
}

void sub_195177F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, WTF::StringImpl *a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  CFRelease(cf);
  v14 = *(unsigned int *)(v11 + 12);
  if ((_DWORD)v14)
  {
    v16 = *(WTF::StringImpl ***)v11;
    v17 = 16 * v14;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v13);
        else
          *(_DWORD *)v18 -= 2;
      }
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
  }
  v15 = *(WTF **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 0;
    WTF::fastFree(v15, v13);
  }
  _Unwind_Resume(a1);
}

void WebCore::removeRecentlyModifiedRecentSearchesFromFile(uint64_t *a1, double a2)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  __CFString *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (v3 && *(_DWORD *)(v3 + 4))
  {
    v5 = objc_msgSend((id)WTF::StringImpl::operator NSString *(), "stringByAppendingPathComponent:", CFSTR("RecentSearches.plist"));
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", a2);
    v7 = 0x1E0C99000uLL;
    if (!objc_msgSend(v6, "isEqualToDate:", objc_msgSend(MEMORY[0x1E0C99D68], "distantPast")))
    {
      v28 = v5;
      v8 = *a1 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithContentsOfFile:", -[__CFString stringByAppendingPathComponent:](v8, "stringByAppendingPathComponent:", CFSTR("RecentSearches.plist")));
      v34 = v9;
      v10 = (void *)objc_msgSend(v9, "objectForKey:", CFSTR("items"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v33 = v11;
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
        if (v12)
        {
          v32 = *(_QWORD *)v40;
          v29 = v10;
          while (2)
          {
            v13 = 0;
            v30 = v12;
            do
            {
              if (*(_QWORD *)v40 != v32)
                objc_enumerationMutation(v10);
              v14 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * v13);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0
                || (v15 = (void *)objc_msgSend(v10, "objectForKey:", v14),
                    objc_opt_class(),
                    (objc_opt_isKindOfClass() & 1) == 0)
                || (v16 = (void *)objc_msgSend(v15, "objectForKey:", CFSTR("searches")),
                    objc_opt_class(),
                    (objc_opt_isKindOfClass() & (v16 != 0)) == 0))
              {
                v26 = 0;
                goto LABEL_45;
              }
              v31 = v14;
              v17 = v7;
              v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              v37 = 0u;
              v38 = 0u;
              v35 = 0u;
              v36 = 0u;
              v19 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
              if (v19)
              {
                v20 = *(_QWORD *)v36;
                while (2)
                {
                  v21 = 0;
                  do
                  {
                    if (*(_QWORD *)v36 != v20)
                      objc_enumerationMutation(v16);
                    v22 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v21);
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) == 0
                      || (v23 = (void *)objc_msgSend(v22, "objectForKey:", CFSTR("date")),
                          objc_opt_class(),
                          (objc_opt_isKindOfClass() & (v23 != 0)) == 0))
                    {
                      v24 = 0;
                      goto LABEL_31;
                    }
                    if (objc_msgSend(v23, "compare:", v6) == 1)
                      objc_msgSend(v18, "addObject:", v22);
                    ++v21;
                  }
                  while (v19 != v21);
                  v19 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
                  if (v19)
                    continue;
                  break;
                }
              }
              objc_msgSend(v16, "removeObjectsInArray:", v18);
              if (!objc_msgSend(v16, "count"))
                objc_msgSend(v33, "addObject:", v31);
              v24 = 1;
LABEL_31:
              if (v18)
                CFRelease(v18);
              if (!v24)
              {
                v26 = 0;
                v11 = v33;
                v9 = v34;
                v7 = v17;
                goto LABEL_45;
              }
              ++v13;
              v10 = v29;
              v11 = v33;
              v9 = v34;
              v7 = v17;
            }
            while (v13 != v30);
            v12 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
            if (v12)
              continue;
            break;
          }
        }
        objc_msgSend(v10, "removeObjectsForKeys:", v11);
        v25 = objc_msgSend(v10, "count");
        if (v25)
          v26 = v9;
        else
          v26 = 0;
        if (v25)
          v9 = 0;
LABEL_45:
        if (v11)
          CFRelease(v11);
      }
      else
      {
        v26 = 0;
      }
      if (v9)
        CFRelease(v9);
      v5 = v28;
      if (v26)
      {
        objc_msgSend(v26, "writeToFile:atomically:", v28, 1);
LABEL_54:
        CFRelease(v26);
        return;
      }
    }
    v26 = objc_alloc_init(*(Class *)(v7 + 3456));
    v27 = (void *)objc_msgSend(objc_alloc(*(Class *)(v7 + 3456)), "initWithObjectsAndKeys:", v26, CFSTR("items"), 0);
    objc_msgSend(v27, "writeToFile:atomically:", v5, 1);
    if (v27)
      CFRelease(v27);
    if (v26)
      goto LABEL_54;
  }
}

void sub_1951784A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, CFTypeRef a18)
{
  if (cf)
    CFRelease(cf);
  if (a18)
    CFRelease(a18);
  _Unwind_Resume(exception_object);
}

void WebCore::FragmentedSharedBuffer::createCMBlockBuffer(WebCore::FragmentedSharedBuffer *this@<X0>, OpaqueCMBlockBuffer **a2@<X4>, _QWORD *a3@<X8>)
{
  OpaqueCMBlockBuffer **v3;
  OpaqueCMBlockBuffer *v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  int v17;
  OpaqueCMBlockBuffer *v18;
  const __CFAllocator *v19;
  int Empty;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  _Unwind_Exception *v39;
  OpaqueCMBlockBuffer **v40;
  OpaqueCMBlockBuffer *v41;
  _BYTE v42[12];
  unsigned int *(*v43)(unsigned int *, void *, void *);
  unsigned int *v44;
  char v45;
  OpaqueCMBlockBuffer ***v46;

  v4 = this;
  v6 = *((_DWORD *)this + 5);
  v7 = *((_QWORD *)this + 6);
  if (v6 == 1)
  {
    if (v7)
    {
      v8 = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
      memset(v42, 0, sizeof(v42));
      v43 = WebCore::FreeDataSegment;
      v44 = v8;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v41 = 0;
      v10 = v8[6];
      if ((_DWORD)v10 == -1)
        goto LABEL_43;
      v4 = (OpaqueCMBlockBuffer *)(v8 + 2);
      v46 = &v40;
      v11 = ((uint64_t (*)(OpaqueCMBlockBuffer ****, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v46, v8 + 2);
      v12 = v8[6];
      if ((_DWORD)v12 == -1
        || (v3 = (OpaqueCMBlockBuffer **)v11,
            v46 = &v40,
            v13 = ((uint64_t (*)(OpaqueCMBlockBuffer ****, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v46, v8 + 2), v14 = v8[6], (_DWORD)v14 == -1))
      {
LABEL_43:
        v39 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
        CFRelease(v4);
        CFRelease(v3);
        _Unwind_Resume(v39);
      }
      v15 = (void *)v13;
      v46 = &v40;
      v16 = ((uint64_t (*)(OpaqueCMBlockBuffer ****, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v46, v8 + 2);
      v17 = PAL::softLinkCoreMediaCMBlockBufferCreateWithMemoryBlock(0, (const __CFAllocator *)v3, v15, 0, (const __CFAllocator *)v42, 0, v16, 0, &v41, v40);
      v18 = v41;
      if (v17)
        v18 = 0;
      *a3 = v18;
      return;
    }
    v19 = 0;
    v40 = 0;
  }
  else
  {
    v40 = 0;
    if (v7)
      v19 = (const __CFAllocator *)v6;
    else
      v19 = 0;
  }
  Empty = PAL::softLinkCoreMediaCMBlockBufferCreateEmpty((PAL *)*MEMORY[0x1E0C9AE00], v19, 0, &v40, a2);
  v3 = v40;
  if (Empty)
    v21 = 1;
  else
    v21 = v40 == 0;
  if (v21)
  {
    *a3 = 0;
    return;
  }
  if (!*((_QWORD *)v4 + 6) || (v22 = *((unsigned int *)v4 + 5), !(_DWORD)v22))
  {
LABEL_38:
    *a3 = v3;
    return;
  }
  v23 = *((_QWORD *)v4 + 1);
  v24 = v23 + 16 * v22;
  while (1)
  {
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(unsigned int *)(v25 + 24);
    if ((_DWORD)v26 == -1)
      goto LABEL_43;
    *(_QWORD *)v42 = &v46;
    if (((uint64_t (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v26])(v42, v25 + 8))
    {
      break;
    }
LABEL_37:
    v23 += 16;
    if (v23 == v24)
      goto LABEL_38;
  }
  v27 = *(unsigned int **)(v23 + 8);
  memset(v42, 0, sizeof(v42));
  v43 = WebCore::FreeDataSegment;
  v44 = v27;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v41 = 0;
  v29 = v27[6];
  if ((_DWORD)v29 == -1)
    goto LABEL_43;
  v46 = (OpaqueCMBlockBuffer ***)&v45;
  v30 = ((uint64_t (*)(OpaqueCMBlockBuffer ****, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v29])(&v46, v27 + 2);
  v31 = v27[6];
  if ((_DWORD)v31 == -1)
    goto LABEL_43;
  v4 = (OpaqueCMBlockBuffer *)v30;
  v46 = (OpaqueCMBlockBuffer ***)&v45;
  v32 = ((uint64_t (*)(OpaqueCMBlockBuffer ****, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v31])(&v46, v27 + 2);
  v33 = v27[6];
  if ((_DWORD)v33 == -1)
    goto LABEL_43;
  v34 = (void *)v32;
  v46 = (OpaqueCMBlockBuffer ***)&v45;
  v35 = ((uint64_t (*)(OpaqueCMBlockBuffer ****, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v33])(&v46, v27 + 2);
  v36 = PAL::softLinkCoreMediaCMBlockBufferCreateWithMemoryBlock(0, v4, v34, 0, (const __CFAllocator *)v42, 0, v35, 0, &v41, v40);
  v4 = v41;
  if (v36)
    v38 = 1;
  else
    v38 = v41 == 0;
  if (v38)
  {
    *a3 = 0;
    goto LABEL_41;
  }
  if (!PAL::softLinkCoreMediaCMBlockBufferAppendBufferReference((PAL *)v40, v41, 0, 0, 0, v37))
  {
    CFRelease(v4);
    goto LABEL_37;
  }
  *a3 = 0;
  CFRelease(v4);
LABEL_41:
  CFRelease(v3);
}

WebCoreSharedBufferData *WebCore::SharedBuffer::createNSData@<X0>(WebCore::SharedBuffer *this@<X0>, WebCoreSharedBufferData **a2@<X8>)
{
  WebCoreSharedBufferData *result;

  if (*((_DWORD *)this + 5))
    result = -[WebCoreSharedBufferData initWithDataSegment:position:size:]([WebCoreSharedBufferData alloc], "initWithDataSegment:position:size:", *(_QWORD *)(*((_QWORD *)this + 1) + 8), 0, WebCore::DataSegment::size(*(WebCore::DataSegment **)(*((_QWORD *)this + 1) + 8)));
  else
    result = (WebCoreSharedBufferData *)CFDataCreate(0, 0, 0);
  *a2 = result;
  return result;
}

WebCoreSharedBufferData *WebCore::DataSegment::createNSData@<X0>(WebCore::DataSegment *this@<X0>, WebCoreSharedBufferData **a2@<X8>)
{
  WebCoreSharedBufferData *result;

  result = -[WebCoreSharedBufferData initWithDataSegment:position:size:]([WebCoreSharedBufferData alloc], "initWithDataSegment:position:size:", this, 0, WebCore::DataSegment::size(this));
  *a2 = result;
  return result;
}

void WebCore::FragmentedSharedBuffer::createNSDataArray(WebCore::FragmentedSharedBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::DataSegment **v7;
  WebCoreSharedBufferData *v8;
  WebCoreSharedBufferData *v9;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 5));
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (WebCore::DataSegment **)(*((_QWORD *)this + 1) + 8);
    do
    {
      WebCore::DataSegment::createNSData(*v7, &v9);
      v8 = v9;
      if (v9)
      {
        objc_msgSend(v4, "addObject:", v9);
        CFRelease(v8);
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  *a2 = v4;
}

void sub_195178A28(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK7WebCore11DataSegment7iterateEPK8__CFDataRKN3WTF8FunctionIFvNSt3__14spanIKhLm18446744073709551615EEEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32), a2, a4);
}

WebCoreSharedBufferData *WebCore::SharedBufferDataView::createNSData@<X0>(WebCore::SharedBufferDataView *this@<X0>, WebCoreSharedBufferData **a2@<X8>)
{
  WebCoreSharedBufferData *result;

  result = -[WebCoreSharedBufferData initWithDataSegment:position:size:]([WebCoreSharedBufferData alloc], "initWithDataSegment:position:size:", *(_QWORD *)this, *((_QWORD *)this + 1), *((_QWORD *)this + 2));
  *a2 = result;
  return result;
}

void WebCore::SharedMemoryHandle::takeOwnershipOfMemory(mem_entry_name_port_t *a1, int a2)
{
  mem_entry_name_port_t v2;
  int v3;
  kern_return_t v4;
  mach_error_t v5;
  NSObject *v6;
  int v7;
  char *v8;
  __int16 v9;
  mach_error_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (v2)
  {
    if ((a2 - 1) >= 5)
      v3 = 0;
    else
      v3 = a2;
    v4 = mach_memory_entry_ownership(v2, *MEMORY[0x1E0C83DA0], v3, 0);
    if (v4)
    {
      v5 = v4;
      v6 = qword_1ECE7CCE8;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CCE8, OS_LOG_TYPE_ERROR))
      {
        v7 = 136446466;
        v8 = mach_error_string(v5);
        v9 = 1024;
        v10 = v5;
        _os_log_error_impl(&dword_1940B8000, v6, OS_LOG_TYPE_ERROR, "SharedMemoryHandle::takeOwnershipOfMemory: Failed ownership of shared memory. Error: %{public}s (%x)", (uint8_t *)&v7, 0x12u);
      }
    }
  }
}

void WebCore::SharedMemoryHandle::setOwnershipOfMemory(mem_entry_name_port_t *a1, task_t *a2, int a3)
{
  mem_entry_name_port_t v3;
  task_t v4;
  kern_return_t v5;
  mach_error_t v6;
  NSObject *v7;
  int v8;
  char *v9;
  __int16 v10;
  mach_error_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (v3)
  {
    v4 = *a2;
    if ((a3 - 1) >= 5)
      a3 = 0;
    v5 = mach_memory_entry_ownership(v3, v4, a3, 0);
    if (v5)
    {
      v6 = v5;
      v7 = qword_1ECE7CCE8;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CCE8, OS_LOG_TYPE_ERROR))
      {
        v8 = 136446466;
        v9 = mach_error_string(v6);
        v10 = 1024;
        v11 = v6;
        _os_log_error_impl(&dword_1940B8000, v7, OS_LOG_TYPE_ERROR, "SharedMemoryHandle::setOwnershipOfMemory: Failed ownership of shared memory. Error: %{public}s (%x)", (uint8_t *)&v8, 0x12u);
      }
    }
  }
}

uint64_t WebCore::SharedMemory::allocate@<X0>(mach_vm_size_t size@<X0>, _QWORD *a2@<X8>)
{
  mach_error_t v4;
  uint64_t result;
  mach_vm_address_t v6;
  NSObject *v7;
  char *v8;
  mach_vm_address_t address;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  mach_vm_size_t v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  mach_error_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  address = 0;
  v4 = mach_vm_allocate(*MEMORY[0x1E0C83DA0], &address, size, 3);
  if (v4)
  {
    v7 = qword_1ECE7CCE8;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CCE8, OS_LOG_TYPE_ERROR))
    {
      v8 = mach_error_string(v4);
      *(_DWORD *)buf = 134218754;
      v11 = 0;
      v12 = 2048;
      v13 = size;
      v14 = 2082;
      v15 = v8;
      v16 = 1024;
      v17 = v4;
      _os_log_error_impl(&dword_1940B8000, v7, OS_LOG_TYPE_ERROR, "%p - SharedMemory::allocate: Failed to allocate mach_vm_allocate shared memory (%zu bytes). %{public}s (%x)", buf, 0x26u);
    }
    result = 0;
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)result = 1;
    *(_DWORD *)(result + 28) = 0;
    v6 = address;
    *(_QWORD *)(result + 8) = size;
    *(_QWORD *)(result + 16) = v6;
    *(_BYTE *)(result + 24) = 1;
  }
  *a2 = result;
  return result;
}

void WebCore::SharedMemory::wrapMap(memory_object_offset_t a1@<X0>, memory_object_size_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  char v4;
  uint64_t v7;
  int v8;

  v4 = a3;
  WebCore::makeMemoryEntry(&v8, a2, a1, a3);
  if (v8)
  {
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v7 = 1;
    *(_DWORD *)(v7 + 28) = 0;
    *(_QWORD *)(v7 + 8) = a2;
    *(_QWORD *)(v7 + 16) = 0;
    WTF::MachSendRight::operator=();
    *(_BYTE *)(v7 + 24) = v4;
    *a4 = v7;
  }
  else
  {
    *a4 = 0;
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v8);
}

void sub_195178E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, int a10, char a11)
{
  WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>::~Ref(&a9);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a11);
  _Unwind_Resume(a1);
}

void WebCore::makeMemoryEntry(_DWORD *a1, memory_object_size_t a2, memory_object_offset_t a3, int a4)
{
  vm_prot_t v6;
  kern_return_t memory_entry_64;
  mach_error_t v8;
  NSObject *v9;
  char *v10;
  mach_port_t object_handle;
  memory_object_size_t size;
  uint8_t buf[4];
  char *v14;
  __int16 v15;
  mach_error_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  size = a2;
  object_handle = 0;
  if (a4)
    v6 = 5242947;
  else
    v6 = 5242945;
  memory_entry_64 = mach_make_memory_entry_64(*MEMORY[0x1E0C83DA0], &size, a3, v6, &object_handle, 0);
  if (memory_entry_64)
  {
    v8 = memory_entry_64;
    v9 = qword_1ECE7CCE8;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CCE8, OS_LOG_TYPE_ERROR))
    {
      v10 = mach_error_string(v8);
      *(_DWORD *)buf = 136446466;
      v14 = v10;
      v15 = 1024;
      v16 = v8;
      _os_log_error_impl(&dword_1940B8000, v9, OS_LOG_TYPE_ERROR, "SharedMemory::makeMemoryEntry: Failed to create a mach port for shared memory. Error: %{public}s (%x)", buf, 0x12u);
    }
    *a1 = 0;
  }
  else
  {
    if (size < a2)
    {
      __break(0xC471u);
      JUMPOUT(0x195178F14);
    }
    WTF::MachSendRight::adopt((WTF::MachSendRight *)object_handle);
  }
}

uint64_t WebCore::SharedMemory::map@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  char v3;
  vm_prot_t cur_protection;
  mach_error_t v7;
  uint64_t result;
  mach_vm_address_t v9;
  NSObject *v10;
  char *v11;
  mach_vm_address_t address;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  mach_error_t v18;
  uint64_t v19;

  v3 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  if (a2)
    cur_protection = 3;
  else
    cur_protection = 1;
  address = 0;
  v7 = mach_vm_map(*MEMORY[0x1E0C83DA0], &address, *(_QWORD *)(a1 + 8), 0, 1048577, *(_DWORD *)a1, 0, 0, cur_protection, cur_protection, 2u);
  if (v7)
  {
    v10 = qword_1ECE7CCE8;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CCE8, OS_LOG_TYPE_ERROR))
    {
      v11 = mach_error_string(v7);
      *(_DWORD *)buf = 134218498;
      v14 = 0;
      v15 = 2082;
      v16 = v11;
      v17 = 1024;
      v18 = v7;
      _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, "%p - SharedMemory::map: Failed to map shared memory. %{public}s (%x)", buf, 0x1Cu);
    }
    result = 0;
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)result = 1;
    *(_DWORD *)(result + 28) = 0;
    v9 = address;
    *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(result + 16) = v9;
    *(_BYTE *)(result + 24) = v3;
  }
  *a3 = result;
  return result;
}

void WebCore::SharedMemory::~SharedMemory(WebCore::SharedMemory *this)
{
  mach_vm_address_t v2;
  mach_error_t v3;
  NSObject *v4;
  int v5;
  WebCore::SharedMemory *v6;
  __int16 v7;
  char *v8;
  __int16 v9;
  mach_error_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = mach_vm_deallocate(*MEMORY[0x1E0C83DA0], v2, *((_QWORD *)this + 1));
    if (v3)
    {
      v4 = qword_1ECE7CCE8;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CCE8, OS_LOG_TYPE_ERROR))
      {
        v5 = 134218498;
        v6 = this;
        v7 = 2082;
        v8 = mach_error_string(v3);
        v9 = 1024;
        v10 = v3;
        _os_log_error_impl(&dword_1940B8000, v4, OS_LOG_TYPE_ERROR, "%p - SharedMemory::~SharedMemory: Failed to deallocate shared memory. %{public}s (%x)", (uint8_t *)&v5, 0x1Cu);
      }
    }
  }
  WTF::MachSendRight::~MachSendRight((WebCore::SharedMemory *)((char *)this + 28));
}

void sub_1951791E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v1 + 28));
  _Unwind_Resume(a1);
}

void WebCore::SharedMemory::createHandle(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  if (!*(_DWORD *)(a1 + 28) || (*(_BYTE *)(a1 + 24) == 0) == a2)
    WebCore::makeMemoryEntry(&v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
  else
    WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v8, (const WTF::MachSendRight *)(a1 + 28));
  if (v8)
  {
    v5 = *(_QWORD *)(a1 + 8);
    WTF::MachSendRight::MachSendRight();
    v7 = v5;
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1951792D4);
    }
    WTF::MachSendRight::MachSendRight();
    *(_QWORD *)(a3 + 8) = v7;
    *(_BYTE *)(a3 + 16) = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v6);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v8);
}

void sub_1951792E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)va);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v2 - 20));
  _Unwind_Resume(a1);
}

uint64_t WebCore::SharedMemory::toNSData@<X0>(WebCore::SharedMemory *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", *((_QWORD *)this + 2), *((_QWORD *)this + 1));
  *a2 = result;
  return result;
}

uint64_t WebCore::systemMarketingVersion(WebCore *this)
{
  uint64_t result;
  uint64_t v2;

    return WebCore::systemMarketingVersion(void)::version;
  WebCore::createSystemMarketingVersion((WebCore *)&v2);
  result = v2;
  WebCore::systemMarketingVersion(void)::version = v2;
  return result;
}

CFTypeRef WebCore::TextRecognitionResult::encodeVKCImageAnalysis@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", *a1, 1, 0);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::TextRecognitionResult::decodeVKCImageAnalysis@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = PAL::VisionKitCoreLibrary((PAL *)1);
  if (result)
  {
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0)
    {
      result = objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", PAL::getVKCImageAnalysisClass[0]((PAL *)result), *a1, 0);
      *a2 = result;
      if (result)
        return (uint64_t)CFRetain((CFTypeRef)result);
    }
    else
    {
      result = 55;
      __break(0xC471u);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void WebCore::stringForRange(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v5;
  PAL *v6;
  void *v8;
  void *v9;
  char v10;
  const void *v11;

  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRetain(*(CFTypeRef *)(a1 + 48));
  v6 = (PAL *)PAL::VisionKitCoreLibrary((PAL *)1);
  if (v6)
  {
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
      || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType != 0)
    {
      __break(0xC471u);
      return;
    }
    v8 = (void *)objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", PAL::getVKCImageAnalysisClass[0](v6), v5, 0);
    v9 = v8;
    if (v8)
      CFRetain(v8);
  }
  else
  {
    v9 = 0;
  }
  if (v5)
    CFRelease(v5);
  v10 = objc_opt_respondsToSelector();
  if ((v10 & 1) != 0)
  {
    v11 = (const void *)objc_msgSend(v9, "_attributedStringForRange:", *a2, a2[1]);
    *a3 = v11;
    if (v11)
      CFRetain(v11);
  }
  if (v9)
    CFRelease(v9);
  if ((v10 & 1) == 0)
    *a3 = 0;
}

void sub_1951795B4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ThemeCocoa::drawNamedImage(WebCore::ThemeCocoa *this, const WTF::String *a2, WebCore::GraphicsContext *a3, float32x2_t *a4)
{
  void *v8;
  __n128 v9;
  __n128 v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float32x2_t v15;
  uint64_t result;
  float32x2_t v17;
  float v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _BYTE v29[32];
  __int128 v30;
  int v31;
  int v32;
  int v33;
  _BYTE v34[32];
  __int128 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "wireless-playback", 17))
  {
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
    v28 = 0x11040000000000FFLL;
    WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)&v28);
    if ((v28 & 0x8000000000000) != 0)
    {
      v25 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, v8);
      }
    }
    v12 = a4->f32[0];
    v11 = a4->f32[1];
    if ((float)(a4->f32[0] / v11) >= 1.3324)
    {
      v18 = (float)-(float)(v12 - (float)(v11 * 1.3324)) * 0.5;
      v10.n128_u32[0] = 0;
      v9.n128_f32[0] = 0.0 - v18;
      v12 = v18 + (float)(v12 + v18);
    }
    else
    {
      v13 = (float)((float)(v12 / 1.3324) - v11) * -0.5;
      v9.n128_u32[0] = 0;
      v10.n128_f32[0] = v13 + 0.0;
    }
    (*(void (**)(WebCore::GraphicsContext *, __n128, __n128))(*(_QWORD *)a3 + 648))(a3, v9, v10);
    *(float *)&v28 = v12 * 0.03125;
    *((float *)&v28 + 1) = v12 * 0.03125;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t *))(*(_QWORD *)a3 + 632))(a3, &v28);
    v33 = 0;
    *(_QWORD *)v34 = 0x4190000041C0872BLL;
    WebCore::Path::moveTo((WebCore::Path *)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x4180000041B0E354;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x4180000041F00000;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x4000000041F00000;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x4000000040000000;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x4180000040000000;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x41800000411E872BLL;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x4190000040FE7EFALL;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x4190000000000000;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 1107296256;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x4190000042000000;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    *(_QWORD *)v34 = 0x4190000041C0872BLL;
    WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
    v19 = v33;
    if (v33 == 2)
    {
      if (!*(_QWORD *)v29)
        goto LABEL_30;
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v29 + 200))(*(_QWORD *)v29) & 1) != 0)
        goto LABEL_31;
      v19 = v33;
    }
    else if (!v33)
    {
      goto LABEL_31;
    }
    if (v19 == 2)
    {
      if (*(_QWORD *)v29)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v29 + 208))(*(_QWORD *)v29) & 1) != 0)
          goto LABEL_31;
        if (v33 == 1)
        {
          v20 = v32;
LABEL_28:
          if (v20 == 5)
          {
            *(_OWORD *)v34 = *(_OWORD *)v29;
            *(_QWORD *)&v34[13] = *(_QWORD *)&v29[13];
            *(_OWORD *)&v29[16] = *(_OWORD *)&v34[16];
            v30 = v35;
            *(_OWORD *)v29 = *(_OWORD *)v34;
            v31 = v36;
            v32 = 6;
            goto LABEL_31;
          }
        }
      }
    }
    else if (v19 == 1)
    {
      v20 = v32;
      if (v32 == 6 || v32 == 15)
      {
LABEL_31:
        *(_QWORD *)v34 = 0x41C020C541D75604;
        WebCore::Path::moveTo((WebCore::Path *)&v28, (const WebCore::FloatPoint *)v34);
        *(_QWORD *)v34 = 0x41C020C540A147AELL;
        WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
        *(_QWORD *)v34 = 0x414D3F7D417FA5E3;
        WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
        *(_QWORD *)v34 = 0x41C020C541D75604;
        WebCore::Path::addLineTo((uint64_t)&v28, (const WebCore::FloatPoint *)v34);
        v22 = v33;
        if (v33 == 2)
        {
          if (!*(_QWORD *)v29)
            goto LABEL_48;
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v29 + 200))(*(_QWORD *)v29) & 1) != 0)
            goto LABEL_49;
          v22 = v33;
        }
        else if (!v33)
        {
          goto LABEL_49;
        }
        if (v22 == 2)
        {
          if (!*(_QWORD *)v29)
            goto LABEL_48;
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v29 + 208))(*(_QWORD *)v29) & 1) == 0)
          {
            if (v33 != 1)
              goto LABEL_48;
            v23 = v32;
LABEL_46:
            if (v23 == 5)
            {
              *(_OWORD *)v34 = *(_OWORD *)v29;
              *(_QWORD *)&v34[13] = *(_QWORD *)&v29[13];
              *(_OWORD *)&v29[16] = *(_OWORD *)&v34[16];
              v30 = v35;
              *(_OWORD *)v29 = *(_OWORD *)v34;
              v31 = v36;
              v32 = 6;
              goto LABEL_49;
            }
LABEL_48:
            v24 = WebCore::Path::ensureImpl((WebCore::Path *)&v28);
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 120))(v24);
          }
        }
        else
        {
          if (v22 != 1)
            goto LABEL_48;
          v23 = v32;
          if (v32 != 6 && v32 != 15)
            goto LABEL_46;
        }
LABEL_49:
        (*(void (**)(WebCore::GraphicsContext *, uint64_t *))(*(_QWORD *)a3 + 176))(a3, &v28);
        if (v33 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E3347208[v33])(v34, v29);
        return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
      }
      goto LABEL_28;
    }
LABEL_30:
    v21 = WebCore::Path::ensureImpl((WebCore::Path *)&v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 120))(v21);
    goto LABEL_31;
  }
  if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "apple-pay-logo-black", 20))
  {
    v14 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v14 + 8) = 1;
    *(_WORD *)(v14 + 12) = 256;
    *(_QWORD *)v14 = &unk_1E320FB50;
    v15 = *a4;
    v28 = 0;
    *(float32x2_t *)v29 = v15;
    result = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, uint64_t *))(*(_QWORD *)a3 + 352))(a3, v14, &v28);
  }
  else
  {
    if (!MEMORY[0x19AEA53F4](*(_QWORD *)a2, "apple-pay-logo-white", 20))
      return WebCore::Theme::drawNamedImage(this, a2, a3, a4);
    v14 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v14 + 8) = 1;
    *(_WORD *)(v14 + 12) = 0;
    *(_QWORD *)v14 = &unk_1E320FB50;
    v17 = *a4;
    v28 = 0;
    *(float32x2_t *)v29 = v17;
    result = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, uint64_t *))(*(_QWORD *)a3 + 352))(a3, v14, &v28);
  }
  if (*(_DWORD *)(v14 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  --*(_DWORD *)(v14 + 8);
  return result;
}

void sub_195179BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20)
{
  _DWORD *v20;

  if (v20[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  else
    --v20[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::RemoteCommandListenerCocoa::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 56);
  return this;
}

_DWORD *WebCore::RemoteCommandListenerCocoa::deref(_DWORD *this)
{
  if (this[14] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
  --this[14];
  return this;
}

uint64_t WebCore::Theme::controlRequiresPreWhiteSpace()
{
  return 0;
}

uint64_t *WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v24;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(v11 + 16));
  memset((void *)(v12 + 16), 255, v11);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v13 = *a2;
  if (*a2)
  {
    v14 = *((unsigned int *)v13 - 1);
    v15 = &v13[v14];
    if (*((_DWORD *)v13 - 3))
    {
      v16 = *a2;
      if ((_DWORD)v14)
      {
        v16 = *a2;
        while (*v16 >= 0xFEu)
        {
          ++v16;
          if (!--v14)
          {
            v16 = v15;
            goto LABEL_24;
          }
        }
      }
      goto LABEL_24;
    }
    v16 = &v13[v14];
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v15 = &v13[v14];
LABEL_24:
  if (v13)
    v13 += *((unsigned int *)v13 - 1);
  while (v16 != v13)
  {
    v17 = *a1;
    if (*a1)
      v18 = *(_DWORD *)(v17 - 8);
    else
      v18 = 0;
    v19 = 0;
    v20 = *v16;
    v21 = 9 * ((~(v20 << 15) + v20) ^ ((~(v20 << 15) + v20) >> 10));
    v22 = ((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) ^ (((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) >> 16);
    do
    {
      v23 = v22 & v18;
      v22 = ++v19 + v23;
    }
    while (*(unsigned __int8 *)(v17 + v23) != 255);
    *(_BYTE *)(v17 + v23) = v20;
    v24 = v16 + 1;
    v16 = v15;
    if (v24 != v15)
    {
      v16 = v24;
      while (*v16 >= 0xFEu)
      {
        if (++v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  return a1;
}

unsigned int *WebCore::FreeDataSegment(unsigned int *this, void *a2, void *a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;

  v3 = this;
  do
  {
    v4 = __ldaxr(this);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, this));
  if (!v5)
  {
    atomic_store(1u, this);
    v6 = this[6];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *, void *))off_1E3347178[v6])(&v7, this + 2, a3);
    v3[6] = -1;
    return (unsigned int *)WTF::fastFree((WTF *)v3, a2);
  }
  return this;
}

void WebCore::SourceBrush::~SourceBrush(WebCore::SourceBrush *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char v7;

  v3 = *((unsigned int *)this + 20);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E33471A8[v3])(&v7, (char *)this + 16);
  *((_DWORD *)this + 20) = -1;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

BOOL WebCore::operator==<float,4ul>(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t **a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = **a1;
  return v2 && !*(_DWORD *)(v2 + 8) && *a2 == *(_QWORD *)v2;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  return v2 && *(_DWORD *)(v2 + 8) == 1 && *(_QWORD *)v2 == *a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS8_SA_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33471C0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS8_SA_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  char v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      if (*(_BYTE *)(v2 + 40))
      {
        v3 = *(unsigned int *)(v2 + 32);
        if ((_DWORD)v3 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v3])(&v6, v2 + 24);
        *(_DWORD *)(v2 + 32) = -1;
      }
      v4 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v4])(&v7, v2 + 8);
      *(_DWORD *)(v2 + 16) = -1;
      return WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSG_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v7)
    return result;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    return WTF::fastFree((WTF *)v3, a2);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33471A8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::SourceBrushLogicalGradient,WebCore::SourceBrushLogicalGradient>(*a1, a2, a3).n128_u64[0];
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33471A8[v5])(&v11, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 64) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      if (*(_BYTE *)(v7 + 40))
      {
        v9 = *(unsigned int *)(v7 + 32);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v9])(&v12, v7 + 24);
        *(_DWORD *)(v7 + 32) = -1;
      }
      v10 = *(unsigned int *)(v7 + 16);
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v10])(&v13, v7 + 8);
      *(_DWORD *)(v7 + 16) = -1;
      return WTF::fastFree((WTF *)v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::SourceBrushLogicalGradient,WebCore::SourceBrushLogicalGradient>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  _BYTE v16[2];

  v5 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *(unsigned int *)(a2 + 8);
      v8 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v7 == -1)
      {
        if ((_DWORD)v8 == -1)
          goto LABEL_12;
      }
      else if ((_DWORD)v8 == -1)
      {
        ((void (*)(char *, uint64_t))off_1E33471C0[v7])(&v14, a2);
        *(_DWORD *)(a2 + 8) = -1;
LABEL_12:
        result = *(__n128 *)(a3 + 16);
        v12 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 48) = v12;
        *(__n128 *)(a2 + 16) = result;
        return result;
      }
      v13 = a2;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33471E8[v8])(&v13, a2, a3);
      goto LABEL_12;
    }
    ((void (*)(char *, uint64_t))off_1E33471A8[v5])(&v15, a1);
  }
  *(_DWORD *)(a1 + 64) = -1;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E33471F8[v9])(v16, a1, a3);
    *(_DWORD *)(a1 + 8) = v9;
  }
  result = *(__n128 *)(a3 + 16);
  v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(__n128 *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 64) = 1;
  return result;
}

void sub_19517A5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E33471C0[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<0ul,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E33471C0[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 8) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<0ul,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  char v17;

  v4 = result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33471C0[v5])(&v17, result);
LABEL_7:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (!v7)
    return result;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_10;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_10:
  v11 = *(_QWORD *)(v8 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v8 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v8 + 16);
    v13 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v8);
  if (v15 != 1)
  {
    __clrex();
LABEL_17:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v12)
      return result;
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_17;
  if (v12)
    return result;
LABEL_18:
  if (v13)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    return WTF::fastFree((WTF *)v8, a2);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t *WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::AccessibilityRole,WebCore::AccessibilityRole,WTF::IdentityExtractor,WTF::IntHash<WebCore::AccessibilityRole>,WTF::StrongEnumHashTraits<WebCore::AccessibilityRole>,WTF::StrongEnumHashTraits<WebCore::AccessibilityRole>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = v11 ^ HIWORD(v11);
  v13 = v8;
  v14 = v12 & v8;
  v15 = (uint64_t *)(v6 + v14);
  v16 = *(unsigned __int8 *)(v6 + v14);
  if (v16 != 255)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v27 = 0;
        v28 = v6 + v26;
        goto LABEL_33;
      }
      if (v16 == 254)
        v17 = v15;
      v14 = ((_DWORD)v14 + v18) & v13;
      v15 = (uint64_t *)(v6 + v14);
      v16 = *(unsigned __int8 *)(v6 + v14);
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      *(_BYTE *)v17 = -1;
      --*(_DWORD *)(*v4 - 16);
      LOBYTE(v9) = *a2;
      v15 = v17;
    }
  }
  *(_BYTE *)v15 = v9;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_21;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_26:
      result = (uint64_t *)WTF::HashTable<WebCore::AccessibilityRole,WebCore::AccessibilityRole,WTF::IdentityExtractor,WTF::IntHash<WebCore::AccessibilityRole>,WTF::StrongEnumHashTraits<WebCore::AccessibilityRole>,WTF::StrongEnumHashTraits<WebCore::AccessibilityRole>>::rehash(v4, v25, (uint64_t)v15);
      v15 = result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_32;
    }
LABEL_21:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_26;
  }
LABEL_32:
  v28 = v21 + v24;
  v27 = 1;
LABEL_33:
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v28;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

unint64_t WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = (_QWORD *)v9;
      v12 = (WTF::StringImpl **)((char *)v7 + 16 * v8);
      v13 = (WTF::StringImpl **)v7;
      do
      {
        v14 = *v13;
        *v13 = 0;
        *v11 = v14;
        v11[1] = v13[1];
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v10);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 += 2;
        v11 += 2;
      }
      while (v13 != v12);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MathMLElementFactory::createKnownElement@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t *v6;
  _DWORD *v7;
  uint64_t (**v8)(WebCore::Node *__hidden);
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;

  switch(a1)
  {
    case 134:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v6 = &WebCore::MathMLNames::annotationTag;
      goto LABEL_5;
    case 135:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v9 = &WebCore::MathMLNames::mactionTag;
      goto LABEL_82;
    case 136:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::maligngroupTag;
      goto LABEL_77;
    case 137:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::malignmarkTag;
      goto LABEL_77;
    case 138:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x144C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v11 = WebCore::MathMLNames::mathTag;
      if (WebCore::MathMLNames::mathTag)
        ++*(_DWORD *)WebCore::MathMLNames::mathTag;
      *(_QWORD *)(result + 96) = v11;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      v8 = off_1E33FA440;
      goto LABEL_71;
    case 139:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v12 = WebCore::MathMLNames::mencloseTag;
      if (WebCore::MathMLNames::mencloseTag)
        ++*(_DWORD *)WebCore::MathMLNames::mencloseTag;
      *(_QWORD *)(result + 96) = v12;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33F9600;
      *(_BYTE *)(result + 122) = 1;
      *(_WORD *)(result + 120) = 2;
      break;
    case 140:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v13 = &WebCore::MathMLNames::merrorTag;
      goto LABEL_58;
    case 141:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v13 = &WebCore::MathMLNames::mfencedTag;
      goto LABEL_58;
    case 142:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v14 = WebCore::MathMLNames::mfracTag;
      if (WebCore::MathMLNames::mfracTag)
        ++*(_DWORD *)WebCore::MathMLNames::mfracTag;
      *(_QWORD *)(result + 96) = v14;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33F9F80;
      *(_BYTE *)(result + 120) = 0;
      *(_BYTE *)(result + 128) = 0;
      *(_BYTE *)(result + 132) = 0;
      *(_BYTE *)(result + 136) = 0;
      *(_BYTE *)(result + 140) = 0;
      *(_BYTE *)(result + 144) = 0;
      break;
    case 143:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mglyphTag;
      goto LABEL_77;
    case 144:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x144C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v15 = &WebCore::MathMLNames::miTag;
      goto LABEL_68;
    case 145:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mlabeledtrTag;
      goto LABEL_77;
    case 146:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mlongdivTag;
      goto LABEL_77;
    case 147:
      v16 = bmalloc::api::isoAllocate();
      v17 = &WebCore::MathMLNames::mmultiscriptsTag;
      goto LABEL_64;
    case 148:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x144C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v15 = &WebCore::MathMLNames::mnTag;
      goto LABEL_68;
    case 149:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x144C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v18 = WebCore::MathMLNames::moTag;
      if (WebCore::MathMLNames::moTag)
        ++*(_DWORD *)WebCore::MathMLNames::moTag;
      *(_QWORD *)(result + 96) = v18;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33F9AC0;
      *(_BYTE *)(result + 120) = 0;
      *(_BYTE *)(result + 128) = 0;
      *(_BYTE *)(result + 132) = 0;
      *(_BYTE *)(result + 144) = 0;
      *(_WORD *)(result + 150) = 127;
      *(_BYTE *)(result + 152) = 0;
      *(_BYTE *)(result + 160) = 0;
      *(_BYTE *)(result + 164) = 0;
      *(_BYTE *)(result + 172) = 0;
      *(_BYTE *)(result + 176) = 0;
      *(_BYTE *)(result + 184) = 0;
      *(_BYTE *)(result + 188) = 0;
      *(_BYTE *)(result + 196) = 0;
      break;
    case 150:
      v19 = bmalloc::api::isoAllocate();
      v20 = &WebCore::MathMLNames::moverTag;
      goto LABEL_75;
    case 151:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v21 = WebCore::MathMLNames::mpaddedTag;
      if (WebCore::MathMLNames::mpaddedTag)
        ++*(_DWORD *)WebCore::MathMLNames::mpaddedTag;
      *(_QWORD *)(result + 96) = v21;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33FA900;
      *(_BYTE *)(result + 120) = 0;
      *(_BYTE *)(result + 128) = 0;
      *(_BYTE *)(result + 132) = 0;
      *(_BYTE *)(result + 140) = 0;
      *(_BYTE *)(result + 144) = 0;
      *(_BYTE *)(result + 152) = 0;
      *(_BYTE *)(result + 156) = 0;
      *(_BYTE *)(result + 164) = 0;
      *(_BYTE *)(result + 168) = 0;
      *(_BYTE *)(result + 176) = 0;
      break;
    case 152:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v13 = &WebCore::MathMLNames::mphantomTag;
      goto LABEL_58;
    case 153:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mprescriptsTag;
      goto LABEL_77;
    case 154:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v22 = WebCore::MathMLNames::mrootTag;
      if (WebCore::MathMLNames::mrootTag)
        ++*(_DWORD *)WebCore::MathMLNames::mrootTag;
      *(_QWORD *)(result + 96) = v22;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33FCC50;
      v23 = WebCore::MathMLNames::msqrtTag != v22
         && (*(_QWORD *)(v22 + 24) != *(_QWORD *)(WebCore::MathMLNames::msqrtTag + 24)
          || *(_QWORD *)(v22 + 32) != *(_QWORD *)(WebCore::MathMLNames::msqrtTag + 32));
      *(_DWORD *)(result + 120) = v23;
      break;
    case 155:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v13 = &WebCore::MathMLNames::mrowTag;
      goto LABEL_58;
    case 156:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x144C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v15 = &WebCore::MathMLNames::msTag;
      goto LABEL_68;
    case 157:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mscarriesTag;
      goto LABEL_77;
    case 158:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mscarryTag;
      goto LABEL_77;
    case 159:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::msgroupTag;
      goto LABEL_77;
    case 160:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mslineTag;
      goto LABEL_77;
    case 161:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v24 = WebCore::MathMLNames::mspaceTag;
      if (WebCore::MathMLNames::mspaceTag)
        ++*(_DWORD *)WebCore::MathMLNames::mspaceTag;
      *(_QWORD *)(result + 96) = v24;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33FC2D0;
      *(_BYTE *)(result + 120) = 0;
      *(_BYTE *)(result + 128) = 0;
      *(_BYTE *)(result + 132) = 0;
      *(_BYTE *)(result + 140) = 0;
      *(_BYTE *)(result + 144) = 0;
      *(_BYTE *)(result + 152) = 0;
      break;
    case 162:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v25 = WebCore::MathMLNames::msqrtTag;
      if (WebCore::MathMLNames::msqrtTag)
        ++*(_DWORD *)WebCore::MathMLNames::msqrtTag;
      *(_QWORD *)(result + 96) = v25;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33FCC50;
      *(_DWORD *)(result + 120) = 0;
      break;
    case 163:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::msrowTag;
      goto LABEL_77;
    case 164:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mstackTag;
      goto LABEL_77;
    case 165:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v13 = &WebCore::MathMLNames::mstyleTag;
LABEL_58:
      v26 = (_DWORD *)*v13;
      if (v26)
        ++*v26;
      *(_QWORD *)(result + 96) = v26;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      v8 = off_1E33FB490;
      goto LABEL_71;
    case 166:
      v16 = bmalloc::api::isoAllocate();
      v17 = &WebCore::MathMLNames::msubTag;
      goto LABEL_64;
    case 167:
      v16 = bmalloc::api::isoAllocate();
      v17 = &WebCore::MathMLNames::msubsupTag;
      goto LABEL_64;
    case 168:
      v16 = bmalloc::api::isoAllocate();
      v17 = &WebCore::MathMLNames::msupTag;
LABEL_64:
      result = WebCore::MathMLScriptsElement::MathMLScriptsElement(v16, (_DWORD **)v17, a2);
      break;
    case 169:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mtableTag;
      goto LABEL_77;
    case 170:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mtdTag;
      goto LABEL_77;
    case 171:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x144C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v15 = &WebCore::MathMLNames::mtextTag;
LABEL_68:
      v27 = (_DWORD *)*v15;
      if (v27)
        ++*v27;
      *(_QWORD *)(result + 96) = v27;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      v8 = off_1E33FC790;
      goto LABEL_71;
    case 172:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::mtrTag;
      goto LABEL_77;
    case 173:
      v19 = bmalloc::api::isoAllocate();
      v20 = &WebCore::MathMLNames::munderTag;
      goto LABEL_75;
    case 174:
      v19 = bmalloc::api::isoAllocate();
      v20 = &WebCore::MathMLNames::munderoverTag;
LABEL_75:
      result = WebCore::MathMLScriptsElement::MathMLScriptsElement(v19, (_DWORD **)v20, a2);
      *(_QWORD *)result = off_1E33FD110;
      *(_BYTE *)(result + 148) = 0;
      *(_BYTE *)(result + 152) = 0;
      *(_BYTE *)(result + 156) = 0;
      *(_BYTE *)(result + 160) = 0;
      break;
    case 175:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v10 = &WebCore::MathMLNames::noneTag;
LABEL_77:
      v28 = (_DWORD *)*v10;
      if (v28)
        ++*v28;
      *(_QWORD *)(result + 96) = v28;
      *(_QWORD *)(result + 104) = 0;
      *(_QWORD *)result = off_1E33FAE20;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      break;
    case 176:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v9 = &WebCore::MathMLNames::semanticsTag;
LABEL_82:
      v29 = (_DWORD *)*v9;
      if (v29)
        ++*v29;
      *(_QWORD *)(result + 96) = v29;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33FBE10;
      *(_QWORD *)(result + 120) = 0;
      break;
    default:
      if (a1 == 246)
      {
        result = bmalloc::api::isoAllocate();
        *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(result + 24) = 0x104C00000002;
        *(_QWORD *)(result + 32) = 0;
        *(_QWORD *)(result + 40) = a2 + 96;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        ++*(_DWORD *)(a2 + 3324);
        *(_QWORD *)(result + 80) = 0;
        *(_QWORD *)(result + 88) = 0;
        v6 = &WebCore::MathMLNames::annotation_xmlTag;
LABEL_5:
        v7 = (_DWORD *)*v6;
        if (v7)
          ++*v7;
        *(_QWORD *)(result + 96) = v7;
        *(_QWORD *)(result + 104) = 0;
        *(_BYTE *)(result + 112) = 0;
        *(_BYTE *)(result + 116) = 0;
        v8 = off_1E33F9140;
LABEL_71:
        *(_QWORD *)result = v8;
      }
      else
      {
        result = 0;
      }
      break;
  }
  *a3 = result;
  return result;
}

uint64_t WebCore::MathMLElementFactory::createElement@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v6;
  uint64_t result;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t (**v10)(WebCore::Node *__hidden);
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _BOOL4 v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;

  v6 = *((unsigned __int16 *)*a1 + 5);
  if (!*((_WORD *)*a1 + 5))
    goto LABEL_14;
  if (v6 >= 0xF5)
  {
    if (v6 == 258 || v6 == 246)
    {
LABEL_49:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v25 = *a1;
      if (*a1)
        ++*v25;
      *(_QWORD *)(result + 96) = v25;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      v10 = off_1E33F9140;
LABEL_17:
      *(_QWORD *)result = v10;
      goto LABEL_18;
    }
LABEL_14:
    result = bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x114C00000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = a2 + 96;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*(_DWORD *)(a2 + 3324);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    v13 = *a1;
    if (*a1)
      ++*v13;
    *(_QWORD *)(result + 96) = v13;
    *(_QWORD *)(result + 104) = 0;
    v10 = off_1E3347230;
    goto LABEL_17;
  }
  switch(*((_WORD *)*a1 + 5))
  {
    case 0x86:
      goto LABEL_49;
    case 0x87:
    case 0xB0:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v15 = *a1;
      if (*a1)
        ++*v15;
      *(_QWORD *)(result + 96) = v15;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33FBE10;
      *(_QWORD *)(result + 120) = 0;
      break;
    case 0x88:
    case 0x89:
    case 0x8F:
    case 0x91:
    case 0x92:
    case 0x99:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA3:
    case 0xA4:
    case 0xA9:
    case 0xAA:
    case 0xAC:
    case 0xAF:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v8 = *a1;
      if (*a1)
        ++*v8;
      *(_QWORD *)(result + 96) = v8;
      *(_QWORD *)(result + 104) = 0;
      *(_QWORD *)result = off_1E33FAE20;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      break;
    case 0x8A:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x144C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v19 = *a1;
      if (*a1)
        ++*v19;
      *(_QWORD *)(result + 96) = v19;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      v10 = off_1E33FA440;
      goto LABEL_17;
    case 0x8B:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v20 = *a1;
      if (*a1)
        ++*v20;
      *(_QWORD *)(result + 96) = v20;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33F9600;
      *(_BYTE *)(result + 122) = 1;
      *(_WORD *)(result + 120) = 2;
      break;
    case 0x8C:
    case 0x8D:
    case 0x98:
    case 0x9B:
    case 0xA5:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v9 = *a1;
      if (*a1)
        ++*v9;
      *(_QWORD *)(result + 96) = v9;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      v10 = off_1E33FB490;
      goto LABEL_17;
    case 0x8E:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v21 = *a1;
      if (*a1)
        ++*v21;
      *(_QWORD *)(result + 96) = v21;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33F9F80;
      *(_BYTE *)(result + 120) = 0;
      *(_BYTE *)(result + 128) = 0;
      *(_BYTE *)(result + 132) = 0;
      *(_BYTE *)(result + 136) = 0;
      *(_BYTE *)(result + 140) = 0;
      *(_BYTE *)(result + 144) = 0;
      break;
    case 0x90:
    case 0x94:
    case 0x9C:
    case 0xAB:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x144C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v11 = *a1;
      if (*a1)
        ++*v11;
      *(_QWORD *)(result + 96) = v11;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      v10 = off_1E33FC790;
      goto LABEL_17;
    case 0x93:
    case 0xA6:
    case 0xA7:
    case 0xA8:
      v12 = bmalloc::api::isoAllocate();
      result = WebCore::MathMLScriptsElement::MathMLScriptsElement(v12, a1, a2);
      if (!result)
        goto LABEL_14;
      break;
    case 0x95:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x144C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v22 = *a1;
      if (*a1)
        ++*v22;
      *(_QWORD *)(result + 96) = v22;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33F9AC0;
      *(_BYTE *)(result + 120) = 0;
      *(_BYTE *)(result + 128) = 0;
      *(_BYTE *)(result + 132) = 0;
      *(_BYTE *)(result + 144) = 0;
      *(_WORD *)(result + 150) = 127;
      *(_BYTE *)(result + 152) = 0;
      *(_BYTE *)(result + 160) = 0;
      *(_BYTE *)(result + 164) = 0;
      *(_BYTE *)(result + 172) = 0;
      *(_BYTE *)(result + 176) = 0;
      *(_BYTE *)(result + 184) = 0;
      *(_BYTE *)(result + 188) = 0;
      *(_BYTE *)(result + 196) = 0;
      break;
    case 0x96:
    case 0xAD:
    case 0xAE:
      v14 = bmalloc::api::isoAllocate();
      result = WebCore::MathMLScriptsElement::MathMLScriptsElement(v14, a1, a2);
      *(_QWORD *)result = off_1E33FD110;
      *(_BYTE *)(result + 148) = 0;
      *(_BYTE *)(result + 152) = 0;
      *(_BYTE *)(result + 156) = 0;
      *(_BYTE *)(result + 160) = 0;
      break;
    case 0x97:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v23 = *a1;
      if (*a1)
        ++*v23;
      *(_QWORD *)(result + 96) = v23;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33FA900;
      *(_BYTE *)(result + 120) = 0;
      *(_BYTE *)(result + 128) = 0;
      *(_BYTE *)(result + 132) = 0;
      *(_BYTE *)(result + 140) = 0;
      *(_BYTE *)(result + 144) = 0;
      *(_BYTE *)(result + 152) = 0;
      *(_BYTE *)(result + 156) = 0;
      *(_BYTE *)(result + 164) = 0;
      *(_BYTE *)(result + 168) = 0;
      *(_BYTE *)(result + 176) = 0;
      break;
    case 0x9A:
    case 0xA2:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v16 = *a1;
      if (*a1)
        ++*v16;
      *(_QWORD *)(result + 96) = v16;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33FCC50;
      v17 = *a1;
      v18 = (_DWORD *)WebCore::MathMLNames::msqrtTag != *a1
         && (*((_QWORD *)v17 + 3) != *(_QWORD *)(WebCore::MathMLNames::msqrtTag + 24)
          || *((_QWORD *)v17 + 4) != *(_QWORD *)(WebCore::MathMLNames::msqrtTag + 32));
      *(_DWORD *)(result + 120) = v18;
      break;
    case 0xA1:
      result = bmalloc::api::isoAllocate();
      *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(result + 24) = 0x104C00000002;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = a2 + 96;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = 0;
      v24 = *a1;
      if (*a1)
        ++*v24;
      *(_QWORD *)(result + 96) = v24;
      *(_QWORD *)(result + 104) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 116) = 0;
      *(_QWORD *)result = off_1E33FC2D0;
      *(_BYTE *)(result + 120) = 0;
      *(_BYTE *)(result + 128) = 0;
      *(_BYTE *)(result + 132) = 0;
      *(_BYTE *)(result + 140) = 0;
      *(_BYTE *)(result + 144) = 0;
      *(_BYTE *)(result + 152) = 0;
      break;
    default:
      goto LABEL_14;
  }
LABEL_18:
  *a3 = result;
  return result;
}

uint64_t WebCore::SVGElementFactory::createKnownElement@<X0>(uint64_t result@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::Document *a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t (**v11)(WebCore::Node *__hidden);
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  switch((int)result)
  {
    case 177:
      WebCore::SVGAltGlyphElement::create((_DWORD **)&WebCore::SVGNames::altGlyphTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 178:
      WebCore::SVGAltGlyphDefElement::create(&WebCore::SVGNames::altGlyphDefTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 179:
      WebCore::SVGAltGlyphItemElement::create(&WebCore::SVGNames::altGlyphItemTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 180:
      WebCore::SVGAnimateElement::create((WebCore::SVGAnimateElement *)&WebCore::SVGNames::animateTag, a2, (WebCore::SVGAnimationElement **)a4);
      goto LABEL_22;
    case 182:
      WebCore::SVGAnimateMotionElement::create((WebCore::SVGAnimateMotionElement *)&WebCore::SVGNames::animateMotionTag, a2, a3, a4);
      goto LABEL_22;
    case 183:
      WebCore::SVGAnimateTransformElement::create((WebCore::SVGAnimateTransformElement *)&WebCore::SVGNames::animateTransformTag, a2, (WebCore::SVGAnimationElement **)a4);
      goto LABEL_22;
    case 184:
      v10 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (uint64_t)WebCore::SVGCircleElement::SVGCircleElement(v10, (_DWORD **)&WebCore::SVGNames::circleTag, (uint64_t)a2);
      goto LABEL_7;
    case 185:
      v20 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (uint64_t)WebCore::SVGClipPathElement::SVGClipPathElement(v20, (_DWORD **)&WebCore::SVGNames::clipPathTag, (uint64_t)a2);
      goto LABEL_7;
    case 186:
      WebCore::SVGCursorElement::create((_DWORD **)&WebCore::SVGNames::cursorTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 187:
      WebCore::SVGDefsElement::create((_DWORD **)&WebCore::SVGNames::defsTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 188:
      WebCore::SVGDescElement::create((_DWORD **)&WebCore::SVGNames::descTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 189:
      WebCore::ellipseConstructor((WebCore *)&v26, (const WebCore::QualifiedName *)&WebCore::SVGNames::ellipseTag, a2);
      goto LABEL_77;
    case 190:
      WebCore::SVGFEBlendElement::create(&WebCore::SVGNames::feBlendTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 191:
      WebCore::fecolormatrixConstructor((WebCore *)&v26, (const WebCore::QualifiedName *)&WebCore::SVGNames::feColorMatrixTag, a2);
      goto LABEL_77;
    case 192:
      WebCore::SVGFEComponentTransferElement::create((_DWORD **)&WebCore::SVGNames::feComponentTransferTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 193:
      WebCore::SVGFECompositeElement::create(&WebCore::SVGNames::feCompositeTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 194:
      WebCore::SVGFEConvolveMatrixElement::create(&WebCore::SVGNames::feConvolveMatrixTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 195:
      WebCore::SVGFEDiffuseLightingElement::create((_DWORD **)&WebCore::SVGNames::feDiffuseLightingTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 196:
      WebCore::SVGFEDisplacementMapElement::create(&WebCore::SVGNames::feDisplacementMapTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 197:
      WebCore::SVGFEDistantLightElement::create((_DWORD **)&WebCore::SVGNames::feDistantLightTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 198:
      WebCore::SVGFEDropShadowElement::create((_DWORD **)&WebCore::SVGNames::feDropShadowTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 199:
      WebCore::SVGFEFloodElement::create((_DWORD **)&WebCore::SVGNames::feFloodTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 200:
      WebCore::SVGFEFuncAElement::create((_DWORD **)&WebCore::SVGNames::feFuncATag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 201:
      WebCore::SVGFEFuncBElement::create((_DWORD **)&WebCore::SVGNames::feFuncBTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 202:
      WebCore::SVGFEFuncGElement::create((_DWORD **)&WebCore::SVGNames::feFuncGTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 203:
      WebCore::SVGFEFuncRElement::create((_DWORD **)&WebCore::SVGNames::feFuncRTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 204:
      WebCore::fegaussianblurConstructor((WebCore *)&v26, (const WebCore::QualifiedName *)&WebCore::SVGNames::feGaussianBlurTag, a2);
      goto LABEL_77;
    case 205:
      WebCore::SVGFEImageElement::create((_DWORD **)&WebCore::SVGNames::feImageTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 206:
      WebCore::SVGFEMergeElement::create(&WebCore::SVGNames::feMergeTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 207:
      WebCore::SVGFEMergeNodeElement::create((_DWORD **)&WebCore::SVGNames::feMergeNodeTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 208:
      WebCore::SVGFEMorphologyElement::create(&WebCore::SVGNames::feMorphologyTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 209:
      WebCore::feoffsetConstructor((WebCore *)&v26, (const WebCore::QualifiedName *)&WebCore::SVGNames::feOffsetTag, a2);
      goto LABEL_77;
    case 210:
      WebCore::SVGFEPointLightElement::create((_DWORD **)&WebCore::SVGNames::fePointLightTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 211:
      WebCore::SVGFESpecularLightingElement::create((_DWORD **)&WebCore::SVGNames::feSpecularLightingTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 212:
      WebCore::SVGFESpotLightElement::create((_DWORD **)&WebCore::SVGNames::feSpotLightTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 213:
      WebCore::SVGFETileElement::create(&WebCore::SVGNames::feTileTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 214:
      WebCore::SVGFETurbulenceElement::create(&WebCore::SVGNames::feTurbulenceTag, (uint64_t)a2, (uint64_t **)a4);
      goto LABEL_22;
    case 215:
      WebCore::filterConstructor((WebCore *)&v26, (const WebCore::QualifiedName *)&WebCore::SVGNames::filterTag, a2);
      goto LABEL_77;
    case 216:
      WebCore::SVGForeignObjectElement::create((_DWORD **)&WebCore::SVGNames::foreignObjectTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 217:
      v18 = bmalloc::api::isoAllocate();
      result = WebCore::SVGGElement::SVGGElement(v18, (_DWORD **)&WebCore::SVGNames::gTag, (uint64_t)a2);
      goto LABEL_7;
    case 218:
      WebCore::SVGGlyphElement::create((_DWORD **)&WebCore::SVGNames::glyphTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 219:
      WebCore::SVGGlyphRefElement::create(&WebCore::SVGNames::glyphRefTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 220:
      WebCore::SVGHKernElement::create((_DWORD **)&WebCore::SVGNames::hkernTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 221:
      v16 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (uint64_t)WebCore::SVGLineElement::SVGLineElement(v16, (_DWORD **)&WebCore::SVGNames::lineTag, (uint64_t)a2);
      goto LABEL_7;
    case 222:
      v21 = (_QWORD *)bmalloc::api::isoAllocate();
      v22 = (uint64_t)WebCore::SVGLinearGradientElement::SVGLinearGradientElement(v21, (_DWORD **)&WebCore::SVGNames::linearGradientTag, (uint64_t)a2);
      goto LABEL_81;
    case 223:
      WebCore::SVGMarkerElement::create((_DWORD **)&WebCore::SVGNames::markerTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 224:
      WebCore::maskConstructor((WebCore *)&v26, (const WebCore::QualifiedName *)&WebCore::SVGNames::maskTag, a2);
      goto LABEL_77;
    case 225:
      WebCore::SVGMetadataElement::create(&WebCore::SVGNames::metadataTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 226:
      WebCore::SVGMPathElement::create((_DWORD **)&WebCore::SVGNames::mpathTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 227:
      v9 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (uint64_t)WebCore::SVGPathElement::SVGPathElement(v9, (_DWORD **)&WebCore::SVGNames::pathTag, (uint64_t)a2);
      goto LABEL_7;
    case 228:
      WebCore::SVGPatternElement::create((_DWORD **)&WebCore::SVGNames::patternTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 229:
      WebCore::SVGPolygonElement::create((_DWORD **)&WebCore::SVGNames::polygonTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 230:
      WebCore::SVGPolylineElement::create((_DWORD **)&WebCore::SVGNames::polylineTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 231:
      WebCore::radialgradientConstructor((WebCore *)&v26, (const WebCore::QualifiedName *)&WebCore::SVGNames::radialGradientTag, a2);
      goto LABEL_77;
    case 232:
      v8 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (uint64_t)WebCore::SVGRectElement::SVGRectElement(v8, (_DWORD **)&WebCore::SVGNames::rectTag, (uint64_t)a2);
      goto LABEL_7;
    case 233:
      WebCore::SVGSetElement::create((WebCore::SVGSetElement *)&WebCore::SVGNames::setTag, a2, (WebCore::SVGAnimationElement **)a4);
      goto LABEL_22;
    case 234:
      v23 = (_QWORD *)bmalloc::api::isoAllocate();
      v22 = (uint64_t)WebCore::SVGStopElement::SVGStopElement(v23, (_DWORD **)&WebCore::SVGNames::stopTag, (uint64_t)a2);
      goto LABEL_81;
    case 235:
      v17 = bmalloc::api::isoAllocate();
      result = WebCore::SVGSVGElement::SVGSVGElement(v17, (_DWORD **)&WebCore::SVGNames::svgTag, (uint64_t)a2);
LABEL_7:
      *a4 = result;
      return result;
    case 236:
      WebCore::SVGSwitchElement::create((_DWORD **)&WebCore::SVGNames::switchTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 237:
      WebCore::symbolConstructor((WebCore *)&v26, (const WebCore::QualifiedName *)&WebCore::SVGNames::symbolTag, a2);
LABEL_77:
      v24 = (uint64_t)v26;
      v26 = 0;
      *a4 = v24;
      goto LABEL_23;
    case 238:
      v6 = (_QWORD *)bmalloc::api::isoAllocate();
      v11 = off_1E3476D30;
      *v6 = off_1E3476D30;
      v12 = &unk_1E34772A0;
      v6[14] = &unk_1E34772A0;
      v13 = &unk_1E34772D8;
      v6[22] = &unk_1E34772D8;
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E3476CC0;
      v14[1] = v6;
      v26 = v14;
      v15 = &WebCore::SVGNames::textTag;
      goto LABEL_12;
    case 239:
      WebCore::SVGTextPathElement::create((_DWORD **)&WebCore::SVGNames::textPathTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 240:
      WebCore::SVGTRefElement::create((WebCore::SVGTRefElement *)&WebCore::SVGNames::trefTag, a2, (WebCore::Element **)a4);
      goto LABEL_22;
    case 241:
      v6 = (_QWORD *)bmalloc::api::isoAllocate();
      v11 = off_1E3476050;
      *v6 = off_1E3476050;
      v12 = &unk_1E34765C0;
      v6[14] = &unk_1E34765C0;
      v13 = &unk_1E34765F8;
      v6[22] = &unk_1E34765F8;
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v19 = off_1E3476CC0;
      v19[1] = v6;
      v26 = v19;
      v15 = &WebCore::SVGNames::tspanTag;
LABEL_12:
      WebCore::SVGTextPositioningElement::SVGTextPositioningElement(v6, (_DWORD **)v15, (uint64_t)a2, (uint64_t *)&v26);
      result = (uint64_t)v26;
      v26 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      *v6 = v11;
      v6[14] = v12;
      v6[22] = v13;
      goto LABEL_5;
    case 242:
      v25 = bmalloc::api::isoAllocate();
      v22 = WebCore::SVGUseElement::SVGUseElement(v25, (_DWORD **)&WebCore::SVGNames::useTag, (uint64_t)a2);
LABEL_81:
      v26 = 0;
      *a4 = v22;
      goto LABEL_23;
    case 243:
      WebCore::SVGViewElement::create((_DWORD **)&WebCore::SVGNames::viewTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 244:
      WebCore::SVGVKernElement::create((_DWORD **)&WebCore::SVGNames::vkernTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 245:
      WebCore::SVGAElement::create((_DWORD **)&WebCore::SVGNames::aTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 247:
      WebCore::SVGFontElement::create((_DWORD **)&WebCore::SVGNames::fontTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 248:
      WebCore::SVGFontFaceElement::create((_DWORD **)&WebCore::SVGNames::font_faceTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 249:
      WebCore::SVGFontFaceFormatElement::create((_DWORD **)&WebCore::SVGNames::font_face_formatTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 250:
      WebCore::SVGFontFaceNameElement::create((_DWORD **)&WebCore::SVGNames::font_face_nameTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 251:
      WebCore::SVGFontFaceSrcElement::create((_DWORD **)&WebCore::SVGNames::font_face_srcTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 252:
      WebCore::SVGFontFaceUriElement::create((_DWORD **)&WebCore::SVGNames::font_face_uriTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 253:
      WebCore::SVGImageElement::create((_DWORD **)&WebCore::SVGNames::imageTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 254:
      WebCore::SVGMissingGlyphElement::create((_DWORD **)&WebCore::SVGNames::missing_glyphTag, (uint64_t)a2, a4);
      goto LABEL_22;
    case 255:
      WebCore::SVGScriptElement::create((WebCore::SVGScriptElement *)&WebCore::SVGNames::scriptTag, a2, a3, (WebCore::SVGScriptElement **)a4);
LABEL_22:
      v26 = 0;
LABEL_23:
      result = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v26);
      break;
    case 256:
      result = (uint64_t)WebCore::SVGStyleElement::create((_DWORD **)&WebCore::SVGNames::styleTag, (uint64_t)a2, (int)a3, a4);
      break;
    case 257:
      v6 = (_QWORD *)bmalloc::api::isoAllocate();
      *v6 = off_1E3477970;
      v6[14] = &unk_1E3477EA0;
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3347E50;
      v7[1] = v6;
      v26 = v7;
      WebCore::SVGElement::SVGElement((uint64_t)v6, (_DWORD **)&WebCore::SVGNames::titleTag, (uint64_t)a2, (uint64_t *)&v26, 0);
      result = (uint64_t)v26;
      if (v26)
        result = (*(uint64_t (**)(_QWORD *))(*v26 + 8))(v26);
      *v6 = off_1E3477970;
      v6[14] = &unk_1E3477EA0;
LABEL_5:
      *a4 = (uint64_t)v6;
      break;
    default:
      *a4 = 0;
      break;
  }
  return result;
}

uint64_t *WebCore::ellipseConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  WebCore::SVGEllipseElement::create((_DWORD **)a2, (uint64_t)a3, &v6);
  v4 = v6;
  v6 = 0;
  *(_QWORD *)this = v4;
  return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v6);
}

uint64_t *WebCore::fecolormatrixConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  WebCore::SVGFEColorMatrixElement::create(a2, a3, &v6);
  v4 = v6;
  v6 = 0;
  *(_QWORD *)this = v4;
  return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v6);
}

uint64_t *WebCore::fegaussianblurConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  WebCore::SVGFEGaussianBlurElement::create(a2, a3, &v6);
  v4 = v6;
  v6 = 0;
  *(_QWORD *)this = v4;
  return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v6);
}

uint64_t *WebCore::feoffsetConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  WebCore::SVGFEOffsetElement::create(a2, a3, &v6);
  v4 = v6;
  v6 = 0;
  *(_QWORD *)this = v4;
  return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v6);
}

uint64_t *WebCore::filterConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  WebCore::SVGFilterElement::create(a2, a3, &v6);
  v4 = v6;
  v6 = 0;
  *(_QWORD *)this = v4;
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v6);
}

uint64_t *WebCore::maskConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  WebCore::SVGMaskElement::create((_DWORD **)a2, (uint64_t)a3, &v6);
  v4 = v6;
  v6 = 0;
  *(_QWORD *)this = v4;
  return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v6);
}

uint64_t *WebCore::radialgradientConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  uint64_t v4;
  uint64_t v6;

  WebCore::SVGRadialGradientElement::create((_DWORD **)a2, (uint64_t)a3, &v6);
  v4 = v6;
  v6 = 0;
  *(_QWORD *)this = v4;
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v6);
}

uint64_t *WebCore::symbolConstructor(WebCore *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  uint64_t v4;
  uint64_t v6;

  WebCore::SVGSymbolElement::create((_DWORD **)a2, (uint64_t)a3, &v6);
  v4 = v6;
  v6 = 0;
  *(_QWORD *)this = v4;
  return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v6);
}

WebCore::SVGAnimationElement *WebCore::SVGElementFactory::createKnownElementWithName@<X0>(WebCore::QualifiedName *a1@<X1>, WebCore::Document *a2@<X2>, WebCore::SVGAnimationElement *result@<X0>, WebCore::Document *a4@<X3>, WebCore::SVGAnimationElement **a5@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  WebCore::SVGAnimationElement *v11;
  uint64_t (**v12)(WebCore::Node *__hidden);
  void *v13;
  void *v14;
  WebCore::SVGAnimationElement *v15;
  _QWORD *v16;
  uint64_t v17;
  WebCore::SVGAnimationElement *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  WebCore::SVGAnimationElement *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  WebCore::SVGAnimationElement *v27;

  switch((int)result)
  {
    case 177:
      WebCore::SVGAltGlyphElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 178:
      WebCore::SVGAltGlyphDefElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 179:
      WebCore::SVGAltGlyphItemElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 180:
      WebCore::SVGAnimateElement::create(a1, a2, a5);
      goto LABEL_91;
    case 182:
      WebCore::SVGAnimateMotionElement::create(a1, a2, a2, (uint64_t *)a5);
      goto LABEL_91;
    case 183:
      WebCore::SVGAnimateTransformElement::create(a1, a2, a5);
      goto LABEL_91;
    case 184:
      v19 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGCircleElement::SVGCircleElement(v19, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_3;
    case 185:
      v25 = (_QWORD *)bmalloc::api::isoAllocate();
      v27 = 0;
      *a5 = (WebCore::SVGAnimationElement *)WebCore::SVGClipPathElement::SVGClipPathElement(v25, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_92;
    case 186:
      WebCore::SVGCursorElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 187:
      v11 = (WebCore::SVGAnimationElement *)bmalloc::api::isoAllocate();
      v12 = off_1E3455200;
      *(_QWORD *)v11 = off_1E3455200;
      v13 = &unk_1E3455770;
      *((_QWORD *)v11 + 14) = &unk_1E3455770;
      v14 = &unk_1E34557A8;
      *((_QWORD *)v11 + 22) = &unk_1E34557A8;
      v15 = (WebCore::SVGAnimationElement *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = off_1E3455AD0;
      *((_QWORD *)v15 + 1) = v11;
      v27 = v15;
      WebCore::SVGGraphicsElement::SVGGraphicsElement((uint64_t)v11, (_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v27, 0);
      goto LABEL_8;
    case 188:
      WebCore::SVGDescElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)a5);
      goto LABEL_91;
    case 189:
      WebCore::ellipseConstructor((WebCore *)&v27, a1, a2);
      goto LABEL_26;
    case 190:
      WebCore::SVGFEBlendElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 191:
      WebCore::fecolormatrixConstructor((WebCore *)&v27, a1, a2);
      goto LABEL_26;
    case 192:
      WebCore::SVGFEComponentTransferElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 193:
      WebCore::SVGFECompositeElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 194:
      WebCore::SVGFEConvolveMatrixElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 195:
      WebCore::SVGFEDiffuseLightingElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 196:
      WebCore::SVGFEDisplacementMapElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 197:
      WebCore::SVGFEDistantLightElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 198:
      WebCore::SVGFEDropShadowElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 199:
      WebCore::SVGFEFloodElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 200:
      WebCore::SVGFEFuncAElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 201:
      WebCore::SVGFEFuncBElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 202:
      WebCore::SVGFEFuncGElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 203:
      WebCore::SVGFEFuncRElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 204:
      WebCore::fegaussianblurConstructor((WebCore *)&v27, a1, a2);
      goto LABEL_26;
    case 205:
      WebCore::SVGFEImageElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 206:
      WebCore::SVGFEMergeElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 207:
      WebCore::SVGFEMergeNodeElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 208:
      WebCore::SVGFEMorphologyElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 209:
      WebCore::feoffsetConstructor((WebCore *)&v27, a1, a2);
      goto LABEL_26;
    case 210:
      WebCore::SVGFEPointLightElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 211:
      WebCore::SVGFESpecularLightingElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 212:
      WebCore::SVGFESpotLightElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 213:
      WebCore::SVGFETileElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 214:
      WebCore::SVGFETurbulenceElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t **)a5);
      goto LABEL_91;
    case 215:
      WebCore::filterConstructor((WebCore *)&v27, a1, a2);
      goto LABEL_26;
    case 216:
      WebCore::SVGForeignObjectElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)a5);
      goto LABEL_91;
    case 217:
      v17 = bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGGElement::SVGGElement(v17, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_3;
    case 218:
      WebCore::SVGGlyphElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 219:
      WebCore::SVGGlyphRefElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 220:
      WebCore::SVGHKernElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 221:
      v22 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGLineElement::SVGLineElement(v22, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_3;
    case 222:
      v21 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGLinearGradientElement::SVGLinearGradientElement(v21, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_3;
    case 223:
      WebCore::SVGMarkerElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 224:
      WebCore::maskConstructor((WebCore *)&v27, a1, a2);
      goto LABEL_26;
    case 225:
      WebCore::SVGMetadataElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 226:
      WebCore::SVGMPathElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 227:
      v8 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGPathElement::SVGPathElement(v8, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_3;
    case 228:
      WebCore::SVGPatternElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 229:
      v24 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGPolyElement::SVGPolyElement(v24, (_DWORD **)a1, (uint64_t)a2);
      *(_QWORD *)result = off_1E34732C8;
      *((_QWORD *)result + 14) = &unk_1E3473848;
      *((_QWORD *)result + 22) = &unk_1E3473880;
      goto LABEL_3;
    case 230:
      WebCore::SVGPolylineElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 231:
      WebCore::radialgradientConstructor((WebCore *)&v27, a1, a2);
      goto LABEL_26;
    case 232:
      v9 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGRectElement::SVGRectElement(v9, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_3;
    case 233:
      WebCore::SVGSetElement::create(a1, a2, a5);
      goto LABEL_91;
    case 234:
      v16 = (_QWORD *)bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGStopElement::SVGStopElement(v16, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_3;
    case 235:
      v10 = bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGSVGElement::SVGSVGElement(v10, (_DWORD **)a1, (uint64_t)a2);
      goto LABEL_3;
    case 236:
      WebCore::SVGSwitchElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 237:
      WebCore::symbolConstructor((WebCore *)&v27, a1, a2);
LABEL_26:
      v26 = (uint64_t)v27;
      v27 = 0;
      *a5 = (WebCore::SVGAnimationElement *)v26;
      goto LABEL_92;
    case 238:
      v11 = (WebCore::SVGAnimationElement *)bmalloc::api::isoAllocate();
      v12 = off_1E3476D30;
      *(_QWORD *)v11 = off_1E3476D30;
      v13 = &unk_1E34772A0;
      *((_QWORD *)v11 + 14) = &unk_1E34772A0;
      v14 = &unk_1E34772D8;
      *((_QWORD *)v11 + 22) = &unk_1E34772D8;
      v23 = (WebCore::SVGAnimationElement *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v23 = off_1E3476CC0;
      *((_QWORD *)v23 + 1) = v11;
      v27 = v23;
      WebCore::SVGTextPositioningElement::SVGTextPositioningElement(v11, (_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v27);
LABEL_8:
      result = v27;
      v27 = 0;
      if (result)
        result = (WebCore::SVGAnimationElement *)(*(uint64_t (**)(WebCore::SVGAnimationElement *))(*(_QWORD *)result + 8))(result);
      *(_QWORD *)v11 = v12;
      *((_QWORD *)v11 + 14) = v13;
      *((_QWORD *)v11 + 22) = v14;
      goto LABEL_11;
    case 239:
      WebCore::SVGTextPathElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 240:
      WebCore::SVGTRefElement::create(a1, a2, a5);
      goto LABEL_91;
    case 241:
      WebCore::SVGTSpanElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 242:
      v20 = bmalloc::api::isoAllocate();
      result = (WebCore::SVGAnimationElement *)WebCore::SVGUseElement::SVGUseElement(v20, (_DWORD **)a1, (uint64_t)a2);
LABEL_3:
      *a5 = result;
      return result;
    case 243:
      WebCore::SVGViewElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)a5);
      goto LABEL_91;
    case 244:
      WebCore::SVGVKernElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 245:
      WebCore::SVGAElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)a5);
      goto LABEL_91;
    case 247:
      WebCore::SVGFontElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 248:
      WebCore::SVGFontFaceElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 249:
      WebCore::SVGFontFaceFormatElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 250:
      WebCore::SVGFontFaceNameElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 251:
      WebCore::SVGFontFaceSrcElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 252:
      WebCore::SVGFontFaceUriElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 253:
      WebCore::SVGImageElement::create((_DWORD **)a1, (uint64_t)a2, (uint64_t *)a5);
      goto LABEL_91;
    case 254:
      WebCore::SVGMissingGlyphElement::create((_DWORD **)a1, (uint64_t)a2, a5);
      goto LABEL_91;
    case 255:
      WebCore::SVGScriptElement::create(a1, a2, a4, a5);
LABEL_91:
      v27 = 0;
LABEL_92:
      result = (WebCore::SVGAnimationElement *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v27);
      break;
    case 256:
      result = (WebCore::SVGAnimationElement *)WebCore::SVGStyleElement::create((_DWORD **)a1, (uint64_t)a2, (int)a4, (uint64_t *)a5);
      break;
    case 257:
      v11 = (WebCore::SVGAnimationElement *)bmalloc::api::isoAllocate();
      *(_QWORD *)v11 = off_1E3477970;
      *((_QWORD *)v11 + 14) = &unk_1E3477EA0;
      v18 = (WebCore::SVGAnimationElement *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v18 = off_1E3347E50;
      *((_QWORD *)v18 + 1) = v11;
      v27 = v18;
      WebCore::SVGElement::SVGElement((uint64_t)v11, (_DWORD **)a1, (uint64_t)a2, (uint64_t *)&v27, 0);
      result = v27;
      if (v27)
        result = (WebCore::SVGAnimationElement *)(*(uint64_t (**)(WebCore::SVGAnimationElement *))(*(_QWORD *)v27 + 8))(v27);
      *(_QWORD *)v11 = off_1E3477970;
      *((_QWORD *)v11 + 14) = &unk_1E3477EA0;
LABEL_11:
      *a5 = v11;
      break;
    default:
      *a5 = 0;
      break;
  }
  return result;
}

uint64_t WebCore::SVGElementFactory::createKnownElement@<X0>(WebCore::SVGElementFactory *this@<X0>, const WTF::AtomString *a2@<X1>, WebCore::Document *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t SVGNode;
  unsigned int v11;

  v7 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_3;
  }
  v8 = *(unsigned __int8 **)(v7 + 8);
  v9 = *(unsigned int *)(v7 + 4);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
LABEL_3:
    SVGNode = WebCore::findSVGNodeName<unsigned char>(v8, v9);
    goto LABEL_4;
  }
  SVGNode = WebCore::findSVGNodeName<char16_t>((unsigned __int16 *)v8, v9);
LABEL_4:
  v11 = SVGNode - 245;
  if (SVGNode >= 0xF5)
  {
    if (v11 > 0x19)
      SVGNode = 0;
    else
      SVGNode = word_1968DBE44[(__int16)v11];
  }
  return WebCore::SVGElementFactory::createKnownElement(SVGNode, a2, a3, a4);
}

uint64_t WebCore::SVGUnknownElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E33476E8;
  v6[14] = &unk_1E3347C18;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3347E50;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v9, 256);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *v6 = off_1E33476E8;
  v6[14] = &unk_1E3347C18;
  *a3 = v6;
  return result;
}

uint64_t WebCore::Style::BuilderCustom::getPageSizeFromName(WebCore::Style::BuilderCustom *this, const WebCore::CSSPrimitiveValue *a2, const WebCore::CSSPrimitiveValue *a3, WebCore::Length *a4, WebCore::Length *a5)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  char v55;
  int v56;
  char v57;
  unsigned int v58;
  int v59;
  int v61;
  uint64_t v62;
  char v63;
  WTF::StringImpl *v64;
  WebCore::Node *v65;
  uint64_t v66;
  char v67;
  WTF::StringImpl *v68;
  WebCore::Node *v69;
  uint64_t v70;
  char v71;
  WTF::StringImpl *v72;
  WebCore::Node *v73;
  uint64_t v74;
  char v75;
  WTF::StringImpl *v76;
  WebCore::Node *v77;
  uint64_t v78;
  char v79;
  WTF::StringImpl *v80;
  WebCore::Node *v81;
  uint64_t v82;
  char v83;
  WTF::StringImpl *v84;
  WebCore::Node *v85;
  uint64_t v86;
  char v87;
  WTF::StringImpl *v88;
  WebCore::Node *v89;
  uint64_t v90;
  char v91;
  WTF::StringImpl *v92;
  WebCore::Node *v93;
  uint64_t v94;
  char v95;
  WTF::StringImpl *v96;
  WebCore::Node *v97;
  uint64_t v98;
  char v99;
  WTF::StringImpl *v100;
  WebCore::Node *v101;
  uint64_t v102;
  char v103;
  WTF::StringImpl *v104;
  WebCore::Node *v105;
  uint64_t v106;
  char v107;
  WTF::StringImpl *v108;
  WebCore::Node *v109;
  uint64_t v110;
  char v111;
  WTF::StringImpl *v112;
  WebCore::Node *v113;
  uint64_t v114;
  char v115;
  WTF::StringImpl *v116;
  WebCore::Node *v117;
  uint64_t v118;
  char v119;
  WTF::StringImpl *v120;
  WebCore::Node *v121;
  uint64_t v122;
  char v123;
  WTF::StringImpl *v124;
  WebCore::Node *v125;
  WebCore::Style::BuilderCustom *v126;
  WebCore::Style::BuilderCustom *v127;
  WebCore::Style::BuilderCustom *v128;
  WebCore::Style::BuilderCustom *v129;
  WebCore::Style::BuilderCustom *v130;
  WebCore::Style::BuilderCustom *v131;
  WebCore::Style::BuilderCustom *v132;
  WebCore::Style::BuilderCustom *v133;
  WebCore::Style::BuilderCustom *v134;
  WebCore::Style::BuilderCustom *v135;
  WebCore::Style::BuilderCustom *v136;
  WebCore::Style::BuilderCustom *v137;
  WebCore::Style::BuilderCustom *v138;
  WebCore::Style::BuilderCustom *v139;
  WebCore::Style::BuilderCustom *v140;
  WebCore::Style::BuilderCustom *v141;
  int v142;
  unsigned __int8 v143;
  char v144;
  char v145;
  __int128 v146;
  __int128 v147;
  WebCore::Node *v148[2];
  __int128 v149;
  uint64_t v150;

  if ((_MergedGlobals_120 & 1) == 0)
  {
    v126 = this;
    v62 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v62 = 2;
    v63 = *(_BYTE *)(v62 + 6);
    *(_WORD *)(v62 + 4) = 8;
    *(_BYTE *)(v62 + 6) = v63 & 0xFC;
    *(_QWORD *)(v62 + 8) = 0x4062800000000000;
    v150 = 0;
    *(_OWORD *)v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v62, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
    v65 = v148[0];
    v148[0] = 0;
    if (v65)
    {
      if (*((_DWORD *)v65 + 6) == 2)
      {
        if ((*((_WORD *)v65 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v65);
      }
      else
      {
        *((_DWORD *)v65 + 6) -= 2;
      }
    }
    if (*(_DWORD *)v62 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v62, v64);
    else
      *(_DWORD *)v62 -= 2;
    dword_1ECE817B0 = 0;
    byte_1ECE817B6 = 0;
    byte_1ECE817B4 = v143;
    byte_1ECE817B5 = v144;
    if (v143 - 2 >= 9)
    {
      if (v143 != 11)
        goto LABEL_281;
    }
    else
    {
      byte_1ECE817B6 = v145;
      if (v145)
      {
        dword_1ECE817B0 = v142;
LABEL_281:
        _MergedGlobals_120 = 1;
        this = v126;
        goto LABEL_2;
      }
    }
    dword_1ECE817B0 = v142;
    goto LABEL_281;
  }
LABEL_2:
  if ((byte_1ECE817A1 & 1) != 0)
    goto LABEL_3;
  v127 = this;
  v66 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v66 = 2;
  v67 = *(_BYTE *)(v66 + 6);
  *(_WORD *)(v66 + 4) = 8;
  *(_BYTE *)(v66 + 6) = v67 & 0xFC;
  *(_QWORD *)(v66 + 8) = 0x406A400000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v66, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v69 = v148[0];
  v148[0] = 0;
  if (v69)
  {
    if (*((_DWORD *)v69 + 6) == 2)
    {
      if ((*((_WORD *)v69 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v69);
    }
    else
    {
      *((_DWORD *)v69 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v66 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v66, v68);
  else
    *(_DWORD *)v66 -= 2;
  dword_1ECE817B8 = 0;
  byte_1ECE817BE = 0;
  byte_1ECE817BC = v143;
  byte_1ECE817BD = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_286;
LABEL_392:
    dword_1ECE817B8 = v142;
    goto LABEL_286;
  }
  byte_1ECE817BE = v145;
  if (!v145)
    goto LABEL_392;
  dword_1ECE817B8 = v142;
LABEL_286:
  byte_1ECE817A1 = 1;
  this = v127;
LABEL_3:
  if ((byte_1ECE817A2 & 1) != 0)
    goto LABEL_4;
  v128 = this;
  v70 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v70 = 2;
  v71 = *(_BYTE *)(v70 + 6);
  *(_WORD *)(v70 + 4) = 8;
  *(_BYTE *)(v70 + 6) = v71 & 0xFC;
  *(_QWORD *)(v70 + 8) = 0x406A400000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v70, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v73 = v148[0];
  v148[0] = 0;
  if (v73)
  {
    if (*((_DWORD *)v73 + 6) == 2)
    {
      if ((*((_WORD *)v73 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v73);
    }
    else
    {
      *((_DWORD *)v73 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v70 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v70, v72);
  else
    *(_DWORD *)v70 -= 2;
  dword_1ECE817C0 = 0;
  byte_1ECE817C6 = 0;
  byte_1ECE817C4 = v143;
  byte_1ECE817C5 = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_291;
LABEL_394:
    dword_1ECE817C0 = v142;
    goto LABEL_291;
  }
  byte_1ECE817C6 = v145;
  if (!v145)
    goto LABEL_394;
  dword_1ECE817C0 = v142;
LABEL_291:
  byte_1ECE817A2 = 1;
  this = v128;
LABEL_4:
  if ((byte_1ECE817A3 & 1) != 0)
    goto LABEL_5;
  v129 = this;
  v74 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v74 = 2;
  v75 = *(_BYTE *)(v74 + 6);
  *(_WORD *)(v74 + 4) = 8;
  *(_BYTE *)(v74 + 6) = v75 & 0xFC;
  *(_QWORD *)(v74 + 8) = 0x4072900000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v74, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v77 = v148[0];
  v148[0] = 0;
  if (v77)
  {
    if (*((_DWORD *)v77 + 6) == 2)
    {
      if ((*((_WORD *)v77 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v77);
    }
    else
    {
      *((_DWORD *)v77 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v74 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v74, v76);
  else
    *(_DWORD *)v74 -= 2;
  dword_1ECE817C8 = 0;
  byte_1ECE817CE = 0;
  byte_1ECE817CC = v143;
  byte_1ECE817CD = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_296;
LABEL_396:
    dword_1ECE817C8 = v142;
    goto LABEL_296;
  }
  byte_1ECE817CE = v145;
  if (!v145)
    goto LABEL_396;
  dword_1ECE817C8 = v142;
LABEL_296:
  byte_1ECE817A3 = 1;
  this = v129;
LABEL_5:
  if ((byte_1ECE817A4 & 1) != 0)
    goto LABEL_6;
  v130 = this;
  v78 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v78 = 2;
  v79 = *(_BYTE *)(v78 + 6);
  *(_WORD *)(v78 + 4) = 8;
  *(_BYTE *)(v78 + 6) = v79 & 0xFC;
  *(_QWORD *)(v78 + 8) = 0x4072900000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v78, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v81 = v148[0];
  v148[0] = 0;
  if (v81)
  {
    if (*((_DWORD *)v81 + 6) == 2)
    {
      if ((*((_WORD *)v81 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v81);
    }
    else
    {
      *((_DWORD *)v81 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v78 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v78, v80);
  else
    *(_DWORD *)v78 -= 2;
  dword_1ECE817D0 = 0;
  byte_1ECE817D6 = 0;
  byte_1ECE817D4 = v143;
  byte_1ECE817D5 = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_301;
LABEL_398:
    dword_1ECE817D0 = v142;
    goto LABEL_301;
  }
  byte_1ECE817D6 = v145;
  if (!v145)
    goto LABEL_398;
  dword_1ECE817D0 = v142;
LABEL_301:
  byte_1ECE817A4 = 1;
  this = v130;
LABEL_6:
  if ((byte_1ECE817A5 & 1) != 0)
    goto LABEL_7;
  v131 = this;
  v82 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v82 = 2;
  v83 = *(_BYTE *)(v82 + 6);
  *(_WORD *)(v82 + 4) = 8;
  *(_BYTE *)(v82 + 6) = v83 & 0xFC;
  *(_QWORD *)(v82 + 8) = 0x407A400000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v82, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v85 = v148[0];
  v148[0] = 0;
  if (v85)
  {
    if (*((_DWORD *)v85 + 6) == 2)
    {
      if ((*((_WORD *)v85 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v85);
    }
    else
    {
      *((_DWORD *)v85 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v82 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v82, v84);
  else
    *(_DWORD *)v82 -= 2;
  dword_1ECE817D8 = 0;
  byte_1ECE817DE = 0;
  byte_1ECE817DC = v143;
  byte_1ECE817DD = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_306;
LABEL_400:
    dword_1ECE817D8 = v142;
    goto LABEL_306;
  }
  byte_1ECE817DE = v145;
  if (!v145)
    goto LABEL_400;
  dword_1ECE817D8 = v142;
LABEL_306:
  byte_1ECE817A5 = 1;
  this = v131;
LABEL_7:
  if ((byte_1ECE817A6 & 1) != 0)
    goto LABEL_8;
  v132 = this;
  v86 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v86 = 2;
  v87 = *(_BYTE *)(v86 + 6);
  *(_WORD *)(v86 + 4) = 8;
  *(_BYTE *)(v86 + 6) = v87 & 0xFC;
  *(_QWORD *)(v86 + 8) = 0x4066000000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v86, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v89 = v148[0];
  v148[0] = 0;
  if (v89)
  {
    if (*((_DWORD *)v89 + 6) == 2)
    {
      if ((*((_WORD *)v89 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v89);
    }
    else
    {
      *((_DWORD *)v89 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v86 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v86, v88);
  else
    *(_DWORD *)v86 -= 2;
  dword_1ECE817E0 = 0;
  byte_1ECE817E6 = 0;
  byte_1ECE817E4 = v143;
  byte_1ECE817E5 = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_311;
LABEL_402:
    dword_1ECE817E0 = v142;
    goto LABEL_311;
  }
  byte_1ECE817E6 = v145;
  if (!v145)
    goto LABEL_402;
  dword_1ECE817E0 = v142;
LABEL_311:
  byte_1ECE817A6 = 1;
  this = v132;
LABEL_8:
  if ((byte_1ECE817A7 & 1) != 0)
    goto LABEL_9;
  v133 = this;
  v90 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v90 = 2;
  v91 = *(_BYTE *)(v90 + 6);
  *(_WORD *)(v90 + 4) = 8;
  *(_BYTE *)(v90 + 6) = v91 & 0xFC;
  *(_QWORD *)(v90 + 8) = 0x406F400000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v90, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v93 = v148[0];
  v148[0] = 0;
  if (v93)
  {
    if (*((_DWORD *)v93 + 6) == 2)
    {
      if ((*((_WORD *)v93 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v93);
    }
    else
    {
      *((_DWORD *)v93 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v90 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v90, v92);
  else
    *(_DWORD *)v90 -= 2;
  dword_1ECE817E8 = 0;
  byte_1ECE817EE = 0;
  byte_1ECE817EC = v143;
  byte_1ECE817ED = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_316;
LABEL_404:
    dword_1ECE817E8 = v142;
    goto LABEL_316;
  }
  byte_1ECE817EE = v145;
  if (!v145)
    goto LABEL_404;
  dword_1ECE817E8 = v142;
LABEL_316:
  byte_1ECE817A7 = 1;
  this = v133;
LABEL_9:
  if ((byte_1ECE817A8 & 1) != 0)
    goto LABEL_10;
  v134 = this;
  v94 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v94 = 2;
  v95 = *(_BYTE *)(v94 + 6);
  *(_WORD *)(v94 + 4) = 8;
  *(_BYTE *)(v94 + 6) = v95 & 0xFC;
  *(_QWORD *)(v94 + 8) = 0x406F400000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v94, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v97 = v148[0];
  v148[0] = 0;
  if (v97)
  {
    if (*((_DWORD *)v97 + 6) == 2)
    {
      if ((*((_WORD *)v97 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v97);
    }
    else
    {
      *((_DWORD *)v97 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v94 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v94, v96);
  else
    *(_DWORD *)v94 -= 2;
  dword_1ECE817F0 = 0;
  byte_1ECE817F6 = 0;
  byte_1ECE817F4 = v143;
  byte_1ECE817F5 = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_321;
LABEL_406:
    dword_1ECE817F0 = v142;
    goto LABEL_321;
  }
  byte_1ECE817F6 = v145;
  if (!v145)
    goto LABEL_406;
  dword_1ECE817F0 = v142;
LABEL_321:
  byte_1ECE817A8 = 1;
  this = v134;
LABEL_10:
  if ((byte_1ECE817A9 & 1) != 0)
    goto LABEL_11;
  v135 = this;
  v98 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v98 = 2;
  v99 = *(_BYTE *)(v98 + 6);
  *(_WORD *)(v98 + 4) = 8;
  *(_BYTE *)(v98 + 6) = v99 & 0xFC;
  *(_QWORD *)(v98 + 8) = 0x4076100000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v98, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v101 = v148[0];
  v148[0] = 0;
  if (v101)
  {
    if (*((_DWORD *)v101 + 6) == 2)
    {
      if ((*((_WORD *)v101 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v101);
    }
    else
    {
      *((_DWORD *)v101 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v98 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v98, v100);
  else
    *(_DWORD *)v98 -= 2;
  dword_1ECE817F8 = 0;
  byte_1ECE817FE = 0;
  byte_1ECE817FC = v143;
  byte_1ECE817FD = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_326;
LABEL_408:
    dword_1ECE817F8 = v142;
    goto LABEL_326;
  }
  byte_1ECE817FE = v145;
  if (!v145)
    goto LABEL_408;
  dword_1ECE817F8 = v142;
LABEL_326:
  byte_1ECE817A9 = 1;
  this = v135;
LABEL_11:
  if ((byte_1ECE817AA & 1) != 0)
    goto LABEL_12;
  v136 = this;
  v102 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v102 = 2;
  v103 = *(_BYTE *)(v102 + 6);
  *(_WORD *)(v102 + 4) = 9;
  *(_BYTE *)(v102 + 6) = v103 & 0xFC;
  *(_QWORD *)(v102 + 8) = 0x4021000000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v102, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v105 = v148[0];
  v148[0] = 0;
  if (v105)
  {
    if (*((_DWORD *)v105 + 6) == 2)
    {
      if ((*((_WORD *)v105 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v105);
    }
    else
    {
      *((_DWORD *)v105 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v102 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v102, v104);
  else
    *(_DWORD *)v102 -= 2;
  dword_1ECE81800 = 0;
  byte_1ECE81806 = 0;
  byte_1ECE81804 = v143;
  byte_1ECE81805 = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_331;
LABEL_410:
    dword_1ECE81800 = v142;
    goto LABEL_331;
  }
  byte_1ECE81806 = v145;
  if (!v145)
    goto LABEL_410;
  dword_1ECE81800 = v142;
LABEL_331:
  byte_1ECE817AA = 1;
  this = v136;
LABEL_12:
  if ((byte_1ECE817AB & 1) != 0)
    goto LABEL_13;
  v137 = this;
  v106 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v106 = 2;
  v107 = *(_BYTE *)(v106 + 6);
  *(_WORD *)(v106 + 4) = 9;
  *(_BYTE *)(v106 + 6) = v107 & 0xFC;
  *(_QWORD *)(v106 + 8) = 0x4026000000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v106, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v109 = v148[0];
  v148[0] = 0;
  if (v109)
  {
    if (*((_DWORD *)v109 + 6) == 2)
    {
      if ((*((_WORD *)v109 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v109);
    }
    else
    {
      *((_DWORD *)v109 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v106 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v106, v108);
  else
    *(_DWORD *)v106 -= 2;
  dword_1ECE81808 = 0;
  byte_1ECE8180E = 0;
  byte_1ECE8180C = v143;
  byte_1ECE8180D = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_336;
LABEL_412:
    dword_1ECE81808 = v142;
    goto LABEL_336;
  }
  byte_1ECE8180E = v145;
  if (!v145)
    goto LABEL_412;
  dword_1ECE81808 = v142;
LABEL_336:
  byte_1ECE817AB = 1;
  this = v137;
LABEL_13:
  if ((byte_1ECE817AC & 1) != 0)
    goto LABEL_14;
  v138 = this;
  v110 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v110 = 2;
  v111 = *(_BYTE *)(v110 + 6);
  *(_WORD *)(v110 + 4) = 9;
  *(_BYTE *)(v110 + 6) = v111 & 0xFC;
  *(_QWORD *)(v110 + 8) = 0x4021000000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v110, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v113 = v148[0];
  v148[0] = 0;
  if (v113)
  {
    if (*((_DWORD *)v113 + 6) == 2)
    {
      if ((*((_WORD *)v113 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v113);
    }
    else
    {
      *((_DWORD *)v113 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v110 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v110, v112);
  else
    *(_DWORD *)v110 -= 2;
  dword_1ECE81810 = 0;
  byte_1ECE81816 = 0;
  byte_1ECE81814 = v143;
  byte_1ECE81815 = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_341;
LABEL_414:
    dword_1ECE81810 = v142;
    goto LABEL_341;
  }
  byte_1ECE81816 = v145;
  if (!v145)
    goto LABEL_414;
  dword_1ECE81810 = v142;
LABEL_341:
  byte_1ECE817AC = 1;
  this = v138;
LABEL_14:
  if ((byte_1ECE817AD & 1) != 0)
    goto LABEL_15;
  v139 = this;
  v114 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v114 = 2;
  v115 = *(_BYTE *)(v114 + 6);
  *(_WORD *)(v114 + 4) = 9;
  *(_BYTE *)(v114 + 6) = v115 & 0xFC;
  *(_QWORD *)(v114 + 8) = 0x402C000000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v114, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v117 = v148[0];
  v148[0] = 0;
  if (v117)
  {
    if (*((_DWORD *)v117 + 6) == 2)
    {
      if ((*((_WORD *)v117 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v117);
    }
    else
    {
      *((_DWORD *)v117 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v114 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v114, v116);
  else
    *(_DWORD *)v114 -= 2;
  dword_1ECE81818 = 0;
  byte_1ECE8181E = 0;
  byte_1ECE8181C = v143;
  byte_1ECE8181D = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_346;
LABEL_416:
    dword_1ECE81818 = v142;
    goto LABEL_346;
  }
  byte_1ECE8181E = v145;
  if (!v145)
    goto LABEL_416;
  dword_1ECE81818 = v142;
LABEL_346:
  byte_1ECE817AD = 1;
  this = v139;
LABEL_15:
  if ((byte_1ECE817AE & 1) != 0)
    goto LABEL_16;
  v140 = this;
  v118 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v118 = 2;
  v119 = *(_BYTE *)(v118 + 6);
  *(_WORD *)(v118 + 4) = 9;
  *(_BYTE *)(v118 + 6) = v119 & 0xFC;
  *(_QWORD *)(v118 + 8) = 0x4026000000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v118, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v121 = v148[0];
  v148[0] = 0;
  if (v121)
  {
    if (*((_DWORD *)v121 + 6) == 2)
    {
      if ((*((_WORD *)v121 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v121);
    }
    else
    {
      *((_DWORD *)v121 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v118 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v118, v120);
  else
    *(_DWORD *)v118 -= 2;
  dword_1ECE81820 = 0;
  byte_1ECE81826 = 0;
  byte_1ECE81824 = v143;
  byte_1ECE81825 = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_351;
LABEL_418:
    dword_1ECE81820 = v142;
    goto LABEL_351;
  }
  byte_1ECE81826 = v145;
  if (!v145)
    goto LABEL_418;
  dword_1ECE81820 = v142;
LABEL_351:
  byte_1ECE817AE = 1;
  this = v140;
LABEL_16:
  if ((byte_1ECE817AF & 1) != 0)
    goto LABEL_17;
  v141 = this;
  v122 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v122 = 2;
  v123 = *(_BYTE *)(v122 + 6);
  *(_WORD *)(v122 + 4) = 9;
  *(_BYTE *)(v122 + 6) = v123 & 0xFC;
  *(_QWORD *)(v122 + 8) = 0x4031000000000000;
  v150 = 0;
  *(_OWORD *)v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(v122, (uint64_t)&v146, (uint64_t)&v142, (__n128)0);
  v125 = v148[0];
  v148[0] = 0;
  if (v125)
  {
    if (*((_DWORD *)v125 + 6) == 2)
    {
      if ((*((_WORD *)v125 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v125);
    }
    else
    {
      *((_DWORD *)v125 + 6) -= 2;
    }
  }
  if (*(_DWORD *)v122 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v122, v124);
  else
    *(_DWORD *)v122 -= 2;
  dword_1ECE81828 = 0;
  byte_1ECE8182E = 0;
  byte_1ECE8182C = v143;
  byte_1ECE8182D = v144;
  if (v143 - 2 >= 9)
  {
    if (v143 != 11)
      goto LABEL_356;
LABEL_420:
    dword_1ECE81828 = v142;
    goto LABEL_356;
  }
  byte_1ECE8182E = v145;
  if (!v145)
    goto LABEL_420;
  dword_1ECE81828 = v142;
LABEL_356:
  byte_1ECE817AF = 1;
  this = v141;
LABEL_17:
  if ((*((_WORD *)this + 2) & 0x7F) == 0x50)
  {
    v8 = 0;
    v9 = *((unsigned __int16 *)this + 4);
    if (v9 <= 0x1D5)
    {
      switch(*((_WORD *)this + 4))
      {
        case 0x1B9:
          if (a3 != (const WebCore::CSSPrimitiveValue *)&dword_1ECE817D0)
          {
            if (*((_BYTE *)a3 + 4) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
            }
            v10 = byte_1ECE817D4;
            *((_BYTE *)a3 + 4) = byte_1ECE817D4;
            *((_BYTE *)a3 + 5) = byte_1ECE817D5;
            if (v10 <= 0xD)
            {
              v11 = 1 << v10;
              if ((v11 & 0x7FC) != 0)
              {
                *((_BYTE *)a3 + 6) = byte_1ECE817D6;
                *(_DWORD *)a3 = dword_1ECE817D0;
              }
              else if ((v11 & 0x3003) != 0)
              {
                *(_DWORD *)a3 = 0;
              }
              else
              {
                *(_DWORD *)a3 = dword_1ECE817D0;
                WebCore::Length::ref((int *)a3);
              }
            }
          }
          if (a4 == (WebCore::Length *)&dword_1ECE817D8)
            goto LABEL_156;
          if (*((_BYTE *)a4 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a4);
          }
          v32 = byte_1ECE817DC;
          *((_BYTE *)a4 + 4) = byte_1ECE817DC;
          *((_BYTE *)a4 + 5) = byte_1ECE817DD;
          if (v32 > 0xD)
            goto LABEL_156;
          v33 = 1 << v32;
          if ((v33 & 0x7FC) != 0)
          {
            v34 = byte_1ECE817DE;
            *((_BYTE *)a4 + 6) = byte_1ECE817DE;
            if (!v34)
            {
              v29 = dword_1ECE817D8;
              goto LABEL_149;
            }
            v31 = dword_1ECE817D8;
            goto LABEL_155;
          }
          if ((v33 & 0x3003) != 0)
            goto LABEL_152;
          v30 = dword_1ECE817D8;
          break;
        case 0x1BA:
          if (a3 != (const WebCore::CSSPrimitiveValue *)&dword_1ECE817C0)
          {
            if (*((_BYTE *)a3 + 4) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
            }
            v18 = byte_1ECE817C4;
            *((_BYTE *)a3 + 4) = byte_1ECE817C4;
            *((_BYTE *)a3 + 5) = byte_1ECE817C5;
            if (v18 <= 0xD)
            {
              v19 = 1 << v18;
              if ((v19 & 0x7FC) != 0)
              {
                *((_BYTE *)a3 + 6) = byte_1ECE817C6;
                *(_DWORD *)a3 = dword_1ECE817C0;
              }
              else if ((v19 & 0x3003) != 0)
              {
                *(_DWORD *)a3 = 0;
              }
              else
              {
                *(_DWORD *)a3 = dword_1ECE817C0;
                WebCore::Length::ref((int *)a3);
              }
            }
          }
          if (a4 == (WebCore::Length *)&dword_1ECE817C8)
            goto LABEL_156;
          if (*((_BYTE *)a4 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a4);
          }
          v38 = byte_1ECE817CC;
          *((_BYTE *)a4 + 4) = byte_1ECE817CC;
          *((_BYTE *)a4 + 5) = byte_1ECE817CD;
          if (v38 > 0xD)
            goto LABEL_156;
          v39 = 1 << v38;
          if ((v39 & 0x7FC) != 0)
          {
            v40 = byte_1ECE817CE;
            *((_BYTE *)a4 + 6) = byte_1ECE817CE;
            if (!v40)
            {
              v29 = dword_1ECE817C8;
              goto LABEL_149;
            }
            v31 = dword_1ECE817C8;
            goto LABEL_155;
          }
          if ((v39 & 0x3003) != 0)
            goto LABEL_152;
          v30 = dword_1ECE817C8;
          break;
        case 0x1BB:
          if (a3 != (const WebCore::CSSPrimitiveValue *)&dword_1ECE817B0)
          {
            if (*((_BYTE *)a3 + 4) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
            }
            v16 = byte_1ECE817B4;
            *((_BYTE *)a3 + 4) = byte_1ECE817B4;
            *((_BYTE *)a3 + 5) = byte_1ECE817B5;
            if (v16 <= 0xD)
            {
              v17 = 1 << v16;
              if ((v17 & 0x7FC) != 0)
              {
                *((_BYTE *)a3 + 6) = byte_1ECE817B6;
                *(_DWORD *)a3 = dword_1ECE817B0;
              }
              else if ((v17 & 0x3003) != 0)
              {
                *(_DWORD *)a3 = 0;
              }
              else
              {
                *(_DWORD *)a3 = dword_1ECE817B0;
                WebCore::Length::ref((int *)a3);
              }
            }
          }
          if (a4 == (WebCore::Length *)&dword_1ECE817B8)
            goto LABEL_156;
          if (*((_BYTE *)a4 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a4);
          }
          v35 = byte_1ECE817BC;
          *((_BYTE *)a4 + 4) = byte_1ECE817BC;
          *((_BYTE *)a4 + 5) = byte_1ECE817BD;
          if (v35 > 0xD)
            goto LABEL_156;
          v36 = 1 << v35;
          if ((v36 & 0x7FC) != 0)
          {
            v37 = byte_1ECE817BE;
            *((_BYTE *)a4 + 6) = byte_1ECE817BE;
            if (!v37)
            {
              v29 = dword_1ECE817B8;
              goto LABEL_149;
            }
            v31 = dword_1ECE817B8;
            goto LABEL_155;
          }
          if ((v36 & 0x3003) != 0)
            goto LABEL_152;
          v30 = dword_1ECE817B8;
          break;
        case 0x1C0:
          if (a3 != (const WebCore::CSSPrimitiveValue *)&dword_1ECE817F0)
          {
            if (*((_BYTE *)a3 + 4) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
            }
            v14 = byte_1ECE817F4;
            *((_BYTE *)a3 + 4) = byte_1ECE817F4;
            *((_BYTE *)a3 + 5) = byte_1ECE817F5;
            if (v14 <= 0xD)
            {
              v15 = 1 << v14;
              if ((v15 & 0x7FC) != 0)
              {
                *((_BYTE *)a3 + 6) = byte_1ECE817F6;
                *(_DWORD *)a3 = dword_1ECE817F0;
              }
              else if ((v15 & 0x3003) != 0)
              {
                *(_DWORD *)a3 = 0;
              }
              else
              {
                *(_DWORD *)a3 = dword_1ECE817F0;
                WebCore::Length::ref((int *)a3);
              }
            }
          }
          if (a4 == (WebCore::Length *)&dword_1ECE817F8)
            goto LABEL_156;
          if (*((_BYTE *)a4 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a4);
          }
          v26 = byte_1ECE817FC;
          *((_BYTE *)a4 + 4) = byte_1ECE817FC;
          *((_BYTE *)a4 + 5) = byte_1ECE817FD;
          if (v26 > 0xD)
            goto LABEL_156;
          v27 = 1 << v26;
          if ((v27 & 0x7FC) != 0)
          {
            v28 = byte_1ECE817FE;
            *((_BYTE *)a4 + 6) = byte_1ECE817FE;
            if (!v28)
            {
              v29 = dword_1ECE817F8;
              goto LABEL_149;
            }
            v31 = dword_1ECE817F8;
            goto LABEL_155;
          }
          if ((v27 & 0x3003) != 0)
            goto LABEL_152;
          v30 = dword_1ECE817F8;
          break;
        case 0x1C1:
          if (a3 != (const WebCore::CSSPrimitiveValue *)&dword_1ECE817E0)
          {
            if (*((_BYTE *)a3 + 4) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
            }
            v20 = byte_1ECE817E4;
            *((_BYTE *)a3 + 4) = byte_1ECE817E4;
            *((_BYTE *)a3 + 5) = byte_1ECE817E5;
            if (v20 <= 0xD)
            {
              v21 = 1 << v20;
              if ((v21 & 0x7FC) != 0)
              {
                *((_BYTE *)a3 + 6) = byte_1ECE817E6;
                *(_DWORD *)a3 = dword_1ECE817E0;
              }
              else if ((v21 & 0x3003) != 0)
              {
                *(_DWORD *)a3 = 0;
              }
              else
              {
                *(_DWORD *)a3 = dword_1ECE817E0;
                WebCore::Length::ref((int *)a3);
              }
            }
          }
          if (a4 == (WebCore::Length *)&dword_1ECE817E8)
            goto LABEL_156;
          if (*((_BYTE *)a4 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a4);
          }
          v41 = byte_1ECE817EC;
          *((_BYTE *)a4 + 4) = byte_1ECE817EC;
          *((_BYTE *)a4 + 5) = byte_1ECE817ED;
          if (v41 > 0xD)
            goto LABEL_156;
          v42 = 1 << v41;
          if ((v42 & 0x7FC) != 0)
          {
            v43 = byte_1ECE817EE;
            *((_BYTE *)a4 + 6) = byte_1ECE817EE;
            if (!v43)
            {
              v29 = dword_1ECE817E8;
              goto LABEL_149;
            }
            v31 = dword_1ECE817E8;
            goto LABEL_155;
          }
          if ((v42 & 0x3003) != 0)
            goto LABEL_152;
          v30 = dword_1ECE817E8;
          break;
        default:
          return v8;
      }
LABEL_190:
      *(_DWORD *)a4 = v30;
      WebCore::Length::ref((int *)a4);
      if (!a2)
        return 1;
      goto LABEL_157;
    }
    switch(v9)
    {
      case 0x1D6u:
        if (a3 != (const WebCore::CSSPrimitiveValue *)&dword_1ECE81820)
        {
          if (*((_BYTE *)a3 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
          }
          v22 = byte_1ECE81824;
          *((_BYTE *)a3 + 4) = byte_1ECE81824;
          *((_BYTE *)a3 + 5) = byte_1ECE81825;
          if (v22 <= 0xD)
          {
            v23 = 1 << v22;
            if ((v23 & 0x7FC) != 0)
            {
              *((_BYTE *)a3 + 6) = byte_1ECE81826;
              *(_DWORD *)a3 = dword_1ECE81820;
            }
            else if ((v23 & 0x3003) != 0)
            {
              *(_DWORD *)a3 = 0;
            }
            else
            {
              *(_DWORD *)a3 = dword_1ECE81820;
              WebCore::Length::ref((int *)a3);
            }
          }
        }
        if (a4 != (WebCore::Length *)&dword_1ECE81828)
        {
          if (*((_BYTE *)a4 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a4);
          }
          v44 = byte_1ECE8182C;
          *((_BYTE *)a4 + 4) = byte_1ECE8182C;
          *((_BYTE *)a4 + 5) = byte_1ECE8182D;
          if (v44 <= 0xD)
          {
            v45 = 1 << v44;
            if ((v45 & 0x7FC) != 0)
            {
              v46 = byte_1ECE8182E;
              *((_BYTE *)a4 + 6) = byte_1ECE8182E;
              if (!v46)
              {
                v29 = dword_1ECE81828;
                goto LABEL_149;
              }
              v31 = dword_1ECE81828;
LABEL_155:
              *(_DWORD *)a4 = v31;
              break;
            }
            if ((v45 & 0x3003) == 0)
            {
              v30 = dword_1ECE81828;
              goto LABEL_190;
            }
LABEL_152:
            *(_DWORD *)a4 = 0;
            if (!a2)
              return 1;
            goto LABEL_157;
          }
        }
        break;
      case 0x1D7u:
        if (a3 != (const WebCore::CSSPrimitiveValue *)&dword_1ECE81810)
        {
          if (*((_BYTE *)a3 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
          }
          v24 = byte_1ECE81814;
          *((_BYTE *)a3 + 4) = byte_1ECE81814;
          *((_BYTE *)a3 + 5) = byte_1ECE81815;
          if (v24 <= 0xD)
          {
            v25 = 1 << v24;
            if ((v25 & 0x7FC) != 0)
            {
              *((_BYTE *)a3 + 6) = byte_1ECE81816;
              *(_DWORD *)a3 = dword_1ECE81810;
            }
            else if ((v25 & 0x3003) != 0)
            {
              *(_DWORD *)a3 = 0;
            }
            else
            {
              *(_DWORD *)a3 = dword_1ECE81810;
              WebCore::Length::ref((int *)a3);
            }
          }
        }
        if (a4 != (WebCore::Length *)&dword_1ECE81818)
        {
          if (*((_BYTE *)a4 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a4);
          }
          v50 = byte_1ECE8181C;
          *((_BYTE *)a4 + 4) = byte_1ECE8181C;
          *((_BYTE *)a4 + 5) = byte_1ECE8181D;
          if (v50 <= 0xD)
          {
            v51 = 1 << v50;
            if ((v51 & 0x7FC) != 0)
            {
              v52 = byte_1ECE8181E;
              *((_BYTE *)a4 + 6) = byte_1ECE8181E;
              if (!v52)
              {
                v29 = dword_1ECE81818;
LABEL_149:
                *(_DWORD *)a4 = v29;
                if (!a2)
                  return 1;
                goto LABEL_157;
              }
              v31 = dword_1ECE81818;
              goto LABEL_155;
            }
            if ((v51 & 0x3003) == 0)
            {
              v30 = dword_1ECE81818;
              goto LABEL_190;
            }
            goto LABEL_152;
          }
        }
        break;
      case 0x1D8u:
        if (a3 != (const WebCore::CSSPrimitiveValue *)&dword_1ECE81800)
        {
          if (*((_BYTE *)a3 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
          }
          v12 = byte_1ECE81804;
          *((_BYTE *)a3 + 4) = byte_1ECE81804;
          *((_BYTE *)a3 + 5) = byte_1ECE81805;
          if (v12 <= 0xD)
          {
            v13 = 1 << v12;
            if ((v13 & 0x7FC) != 0)
            {
              *((_BYTE *)a3 + 6) = byte_1ECE81806;
              *(_DWORD *)a3 = dword_1ECE81800;
            }
            else if ((v13 & 0x3003) != 0)
            {
              *(_DWORD *)a3 = 0;
            }
            else
            {
              *(_DWORD *)a3 = dword_1ECE81800;
              WebCore::Length::ref((int *)a3);
            }
          }
        }
        if (a4 != (WebCore::Length *)&dword_1ECE81808)
        {
          if (*((_BYTE *)a4 + 4) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a4);
          }
          v47 = byte_1ECE8180C;
          *((_BYTE *)a4 + 4) = byte_1ECE8180C;
          *((_BYTE *)a4 + 5) = byte_1ECE8180D;
          if (v47 <= 0xD)
          {
            v48 = 1 << v47;
            if ((v48 & 0x7FC) != 0)
            {
              v49 = byte_1ECE8180E;
              *((_BYTE *)a4 + 6) = byte_1ECE8180E;
              if (!v49)
              {
                v29 = dword_1ECE81808;
                goto LABEL_149;
              }
              v31 = dword_1ECE81808;
              goto LABEL_155;
            }
            if ((v48 & 0x3003) == 0)
            {
              v30 = dword_1ECE81808;
              goto LABEL_190;
            }
            goto LABEL_152;
          }
        }
        break;
      default:
        return v8;
    }
LABEL_156:
    if (!a2)
      return 1;
LABEL_157:
    if ((*((_WORD *)a2 + 2) & 0x7F) != 0x50)
      return 0;
    v53 = *((unsigned __int16 *)a2 + 4);
    if (v53 == 484)
      return 1;
    if (v53 != 469)
      return 0;
    v54 = *((unsigned __int8 *)a3 + 4);
    if (v54 - 2 >= 9)
    {
      v55 = 0;
      if (v54 == 11)
      {
        v56 = *(_DWORD *)a3;
        *(_DWORD *)a3 = 0;
      }
      else
      {
        v56 = 0;
      }
    }
    else
    {
      v55 = *((_BYTE *)a3 + 6);
      v56 = *(_DWORD *)a3;
    }
    v57 = *((_BYTE *)a3 + 5);
    *((_BYTE *)a3 + 4) = 0;
    if (a3 != a4)
    {
      v58 = *((unsigned __int8 *)a4 + 4);
      *((_BYTE *)a3 + 4) = v58;
      *((_BYTE *)a3 + 5) = *((_BYTE *)a4 + 5);
      if (v58 - 2 >= 9)
      {
        if (v58 > 0xD)
          goto LABEL_166;
        if (((1 << v58) & 0x3003) != 0)
        {
          *(_DWORD *)a3 = 0;
          goto LABEL_166;
        }
        if (v58 != 11)
          goto LABEL_166;
        v61 = *(_DWORD *)a4;
        *(_DWORD *)a4 = 0;
      }
      else
      {
        v59 = *((unsigned __int8 *)a4 + 6);
        *((_BYTE *)a3 + 6) = v59;
        if (v59)
        {
          *(_DWORD *)a3 = *(_DWORD *)a4;
          goto LABEL_166;
        }
        v61 = *(_DWORD *)a4;
      }
      *(_DWORD *)a3 = v61;
    }
LABEL_166:
    *((_BYTE *)a4 + 4) = v54;
    *((_BYTE *)a4 + 5) = v57;
    if (v54 - 2 >= 9)
    {
      if (v54 > 0xD)
        return 1;
      if (((1 << v54) & 0x3003) != 0)
      {
        v56 = 0;
      }
      else if (v54 != 11)
      {
        return 1;
      }
    }
    else
    {
      *((_BYTE *)a4 + 6) = v55;
    }
    *(_DWORD *)a4 = v56;
    return 1;
  }
  return 0;
}

WebCore::Length *WebCore::Length::operator=(WebCore::Length *this, unsigned __int8 *a2)
{
  unsigned int v3;
  int v4;
  unsigned __int8 *v6;

  if (this != (WebCore::Length *)a2)
  {
    if (*((_BYTE *)this + 4) == 11)
    {
      v6 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)this);
      a2 = v6;
    }
    v3 = a2[4];
    *((_BYTE *)this + 4) = v3;
    *((_BYTE *)this + 5) = a2[5];
    if (v3 <= 0xD)
    {
      v4 = 1 << v3;
      if ((v4 & 0x7FC) != 0)
      {
        *((_BYTE *)this + 6) = a2[6];
        *(_DWORD *)this = *(_DWORD *)a2;
      }
      else if ((v4 & 0x3003) != 0)
      {
        *(_DWORD *)this = 0;
      }
      else
      {
        *(_DWORD *)this = *(_DWORD *)a2;
        WebCore::Length::ref((int *)this);
      }
    }
  }
  return this;
}

#error "19517F950: too big function (funcsize=0)"

void WebCore::Style::BuilderFunctions::applyValueAnimationDelay(WTF **this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Animation *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  WebCore::Animation *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebCore::Animation *v18;

  v4 = WebCore::RenderStyle::ensureAnimations(this);
  v5 = v4;
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v9 = *((_DWORD *)a2 + 2);
    if (v9)
    {
      v10 = 0;
      v8 = 0;
      v11 = 0;
      while (1)
      {
        if (v10 > 3)
        {
          if (*((_DWORD *)a2 + 2) <= v10)
            goto LABEL_23;
          v12 = (uint64_t *)(*((_QWORD *)a2 + 6) + 8 * (v11 - 4));
        }
        else
        {
          v12 = (uint64_t *)((char *)a2 + 8 * v11 + 16);
        }
        v13 = *v12;
        v14 = *(unsigned int *)(v5 + 20);
        if (v8 >= v14)
        {
          v15 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
          v18 = WebCore::Animation::Animation(v15);
          WebCore::AnimationList::append(v5, (unint64_t)&v18);
          WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v18, v16);
          v14 = *(unsigned int *)(v5 + 20);
        }
        if (v8 >= v14)
        {
LABEL_23:
          __break(0xC471u);
          JUMPOUT(0x1951CA044);
        }
        WebCore::CSSToStyleMap::mapAnimationDelay(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v8++), v13);
        v10 = v11 + 1;
        v11 = (v11 + 1);
        if (v9 == v10)
          goto LABEL_5;
      }
    }
    v8 = 0;
  }
  else
  {
    if (!*(_DWORD *)(v4 + 20))
    {
      v6 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
      v18 = WebCore::Animation::Animation(v6);
      WebCore::AnimationList::append(v5, (unint64_t)&v18);
      WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v18, v7);
      if (!*(_DWORD *)(v5 + 20))
      {
        __break(0xC471u);
        JUMPOUT(0x1951CA04CLL);
      }
    }
    WebCore::CSSToStyleMap::mapAnimationDelay(**(_QWORD **)(v5 + 8), (uint64_t)a2);
    v8 = 1;
  }
LABEL_5:
  while (v8 < *(unsigned int *)(v5 + 20))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v8);
    *(_DWORD *)(v17 + 112) &= 0xFFBFFDFF;
    ++v8;
  }
}

uint64_t WebCore::Style::BuilderFunctions::applyValueAnimationDirection(WTF **this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  WebCore::Animation *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::Animation *v16;
  WTF::StringImpl *v17;
  WebCore::Animation *v18;

  result = WebCore::RenderStyle::ensureAnimations(this);
  v5 = result;
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v6 = *((_DWORD *)a2 + 2);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        if (v7 > 3)
        {
          if (*((_DWORD *)a2 + 2) <= v7)
            goto LABEL_22;
          v10 = (uint64_t *)(*((_QWORD *)a2 + 6) + 8 * (v9 - 4));
        }
        else
        {
          v10 = (uint64_t *)((char *)a2 + 8 * v9 + 16);
        }
        v11 = *v10;
        v12 = *(unsigned int *)(v5 + 20);
        if (v8 >= v12)
        {
          v16 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
          v18 = WebCore::Animation::Animation(v16);
          WebCore::AnimationList::append(v5, (unint64_t)&v18);
          WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v18, v17);
          v12 = *(unsigned int *)(v5 + 20);
        }
        if (v8 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1951CA214);
        }
        result = WebCore::CSSToStyleMap::mapAnimationDirection(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v8++), v11);
        v7 = v9 + 1;
        v9 = (v9 + 1);
      }
      while (v6 != v7);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    if (!*(_DWORD *)(result + 20))
    {
      v13 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
      v18 = WebCore::Animation::Animation(v13);
      WebCore::AnimationList::append(v5, (unint64_t)&v18);
      WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v18, v14);
      if (!*(_DWORD *)(v5 + 20))
      {
LABEL_22:
        __break(0xC471u);
        JUMPOUT(0x1951CA20CLL);
      }
    }
    result = WebCore::CSSToStyleMap::mapAnimationDirection(**(_QWORD **)(v5 + 8), (uint64_t)a2);
    v8 = 1;
  }
  for (; v8 < *(unsigned int *)(v5 + 20); ++v8)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v8);
    *(_DWORD *)(v15 + 112) &= 0xFF7FFBFF;
  }
  return result;
}

uint64_t WebCore::Style::BuilderFunctions::applyValueAnimationFillMode(WTF **this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  WebCore::Animation *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::Animation *v16;
  WTF::StringImpl *v17;
  WebCore::Animation *v18;

  result = WebCore::RenderStyle::ensureAnimations(this);
  v5 = result;
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v6 = *((_DWORD *)a2 + 2);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        if (v7 > 3)
        {
          if (*((_DWORD *)a2 + 2) <= v7)
            goto LABEL_22;
          v10 = (uint64_t *)(*((_QWORD *)a2 + 6) + 8 * (v9 - 4));
        }
        else
        {
          v10 = (uint64_t *)((char *)a2 + 8 * v9 + 16);
        }
        v11 = *v10;
        v12 = *(unsigned int *)(v5 + 20);
        if (v8 >= v12)
        {
          v16 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
          v18 = WebCore::Animation::Animation(v16);
          WebCore::AnimationList::append(v5, (unint64_t)&v18);
          WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v18, v17);
          v12 = *(unsigned int *)(v5 + 20);
        }
        if (v8 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1951CA3DCLL);
        }
        result = WebCore::CSSToStyleMap::mapAnimationFillMode(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v8++), v11);
        v7 = v9 + 1;
        v9 = (v9 + 1);
      }
      while (v6 != v7);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    if (!*(_DWORD *)(result + 20))
    {
      v13 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
      v18 = WebCore::Animation::Animation(v13);
      WebCore::AnimationList::append(v5, (unint64_t)&v18);
      WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v18, v14);
      if (!*(_DWORD *)(v5 + 20))
      {
LABEL_22:
        __break(0xC471u);
        JUMPOUT(0x1951CA3D4);
      }
    }
    result = WebCore::CSSToStyleMap::mapAnimationFillMode(**(_QWORD **)(v5 + 8), (uint64_t)a2);
    v8 = 1;
  }
  for (; v8 < *(unsigned int *)(v5 + 20); ++v8)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v8);
    *(_DWORD *)(v15 + 112) &= 0xFDFFEFFF;
  }
  return result;
}

void WebCore::Style::BuilderFunctions::applyValueAnimationIterationCount(WTF **this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  uint64_t v4;
  const WebCore::CSSValue *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::Animation **v11;
  WebCore::Animation *v12;
  unint64_t v13;
  WebCore::Animation *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::Animation *v17;
  WTF::StringImpl *v18;
  WebCore::Animation *v19;

  v4 = WebCore::RenderStyle::ensureAnimations(this);
  v6 = v4;
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v7 = *((_DWORD *)a2 + 2);
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      do
      {
        if (v8 > 3)
        {
          if (*((_DWORD *)a2 + 2) <= v8)
            goto LABEL_22;
          v11 = (WebCore::Animation **)(*((_QWORD *)a2 + 6) + 8 * (v10 - 4));
        }
        else
        {
          v11 = (WebCore::Animation **)((char *)a2 + 8 * v10 + 16);
        }
        v12 = *v11;
        v13 = *(unsigned int *)(v6 + 20);
        if (v9 >= v13)
        {
          v17 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
          v19 = WebCore::Animation::Animation(v17);
          WebCore::AnimationList::append(v6, (unint64_t)&v19);
          WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v19, v18);
          v13 = *(unsigned int *)(v6 + 20);
        }
        if (v9 >= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1951CA5A4);
        }
        WebCore::CSSToStyleMap::mapAnimationIterationCount(*(WebCore::CSSToStyleMap **)(*(_QWORD *)(v6 + 8) + 8 * v9++), v12, v5);
        v8 = v10 + 1;
        v10 = (v10 + 1);
      }
      while (v7 != v8);
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    if (!*(_DWORD *)(v4 + 20))
    {
      v14 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
      v19 = WebCore::Animation::Animation(v14);
      WebCore::AnimationList::append(v6, (unint64_t)&v19);
      WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v19, v15);
      if (!*(_DWORD *)(v6 + 20))
      {
LABEL_22:
        __break(0xC471u);
        JUMPOUT(0x1951CA59CLL);
      }
    }
    WebCore::CSSToStyleMap::mapAnimationIterationCount(**(WebCore::CSSToStyleMap ***)(v6 + 8), a2, v5);
    v9 = 1;
  }
  for (; v9 < *(unsigned int *)(v6 + 20); ++v9)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v9);
    *(_DWORD *)(v16 + 112) &= 0xFBFFDFFF;
  }
}

uint64_t WebCore::Style::BuilderFunctions::applyValueAnimationName(WTF ***this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::Animation *v11;
  const WebCore::CSSValue **v12;
  const WebCore::CSSValue *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  WebCore::Animation *v18;
  WTF::StringImpl *v19;
  WebCore::Animation *v20;
  WTF::StringImpl *v21;
  WebCore::Animation *v22;

  result = WebCore::RenderStyle::ensureAnimations(this[2]);
  v6 = result;
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v7 = *((_DWORD *)a2 + 2);
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = (WebCore::Animation *)(this + 1);
      do
      {
        if (v8 > 3)
        {
          if (*((_DWORD *)a2 + 2) <= v8)
            goto LABEL_21;
          v12 = (const WebCore::CSSValue **)(*((_QWORD *)a2 + 6) + 8 * (v10 - 4));
        }
        else
        {
          v12 = (const WebCore::CSSValue **)((char *)a2 + 8 * v10 + 16);
        }
        v13 = *v12;
        v14 = *(unsigned int *)(v6 + 20);
        if (v9 >= v14)
        {
          v20 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
          v22 = WebCore::Animation::Animation(v20);
          WebCore::AnimationList::append(v6, (unint64_t)&v22);
          WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v22, v21);
          v14 = *(unsigned int *)(v6 + 20);
        }
        if (v9 >= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1951CA77CLL);
        }
        result = (uint64_t)WebCore::CSSToStyleMap::mapAnimationName(v11, *(WebCore::Animation **)(*(_QWORD *)(v6 + 8) + 8 * v9++), v13);
        v8 = v10 + 1;
        v10 = (v10 + 1);
      }
      while (v7 != v8);
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    if (!*(_DWORD *)(result + 20))
    {
      v18 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
      v22 = WebCore::Animation::Animation(v18);
      WebCore::AnimationList::append(v6, (unint64_t)&v22);
      WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v22, v19);
      if (!*(_DWORD *)(v6 + 20))
      {
LABEL_21:
        __break(0xC471u);
        JUMPOUT(0x1951CA774);
      }
    }
    result = (uint64_t)WebCore::CSSToStyleMap::mapAnimationName((WebCore::Animation *)(this + 1), **(WebCore::Animation ***)(v6 + 8), a2);
    v9 = 1;
  }
  while (v9 < *(unsigned int *)(v6 + 20))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v9);
    v16 = *(_DWORD *)(v15 + 112);
    v15 += 112;
    v17 = *(_BYTE *)(v15 + 4);
    *(_DWORD *)v15 = v16 & 0xFFFFBFFF;
    *(_BYTE *)(v15 + 4) = v17;
    ++v9;
  }
  return result;
}

uint64_t WebCore::Style::BuilderFunctions::applyValueAnimationPlayState(WTF **this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  WebCore::Animation *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::Animation *v16;
  WTF::StringImpl *v17;
  WebCore::Animation *v18;

  result = WebCore::RenderStyle::ensureAnimations(this);
  v5 = result;
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v6 = *((_DWORD *)a2 + 2);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        if (v7 > 3)
        {
          if (*((_DWORD *)a2 + 2) <= v7)
            goto LABEL_23;
          v10 = (uint64_t *)(*((_QWORD *)a2 + 6) + 8 * (v9 - 4));
        }
        else
        {
          v10 = (uint64_t *)((char *)a2 + 8 * v9 + 16);
        }
        v11 = *v10;
        v12 = *(unsigned int *)(v5 + 20);
        if (v8 >= v12)
        {
          v16 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
          v18 = WebCore::Animation::Animation(v16);
          WebCore::AnimationList::append(v5, (unint64_t)&v18);
          WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v18, v17);
          v12 = *(unsigned int *)(v5 + 20);
        }
        if (v8 >= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1951CA944);
        }
        result = (uint64_t)WebCore::CSSToStyleMap::mapAnimationPlayState(*(unsigned int **)(*(_QWORD *)(v5 + 8) + 8 * v8++), v11);
        v7 = v9 + 1;
        v9 = (v9 + 1);
      }
      while (v6 != v7);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    if (!*(_DWORD *)(result + 20))
    {
      v13 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
      v18 = WebCore::Animation::Animation(v13);
      WebCore::AnimationList::append(v5, (unint64_t)&v18);
      WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v18, v14);
      if (!*(_DWORD *)(v5 + 20))
      {
LABEL_23:
        __break(0xC471u);
        JUMPOUT(0x1951CA93CLL);
      }
    }
    result = (uint64_t)WebCore::CSSToStyleMap::mapAnimationPlayState(**(unsigned int ***)(v5 + 8), (uint64_t)a2);
    v8 = 1;
  }
  for (; v8 < *(unsigned int *)(v5 + 20); ++v8)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v8);
    *(_DWORD *)(v15 + 112) &= 0xF7FF7FFF;
  }
  return result;
}

uint64_t WebCore::Style::BuilderFunctions::applyValueAnimationTimingFunction(WTF **this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  uint64_t result;
  const WebCore::CSSValue *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::Animation **v11;
  WebCore::Animation *v12;
  unint64_t v13;
  WebCore::Animation *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::Animation *v17;
  WTF::StringImpl *v18;
  WebCore::Animation *v19;

  result = WebCore::RenderStyle::ensureAnimations(this);
  v6 = result;
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v7 = *((_DWORD *)a2 + 2);
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      do
      {
        if (v8 > 3)
        {
          if (*((_DWORD *)a2 + 2) <= v8)
            goto LABEL_22;
          v11 = (WebCore::Animation **)(*((_QWORD *)a2 + 6) + 8 * (v10 - 4));
        }
        else
        {
          v11 = (WebCore::Animation **)((char *)a2 + 8 * v10 + 16);
        }
        v12 = *v11;
        v13 = *(unsigned int *)(v6 + 20);
        if (v9 >= v13)
        {
          v17 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
          v19 = WebCore::Animation::Animation(v17);
          WebCore::AnimationList::append(v6, (unint64_t)&v19);
          WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v19, v18);
          v13 = *(unsigned int *)(v6 + 20);
        }
        if (v9 >= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1951CAB08);
        }
        result = (uint64_t)WebCore::CSSToStyleMap::mapAnimationTimingFunction(*(WebCore::CSSToStyleMap **)(*(_QWORD *)(v6 + 8) + 8 * v9++), v12, v5);
        v8 = v10 + 1;
        v10 = (v10 + 1);
      }
      while (v7 != v8);
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    if (!*(_DWORD *)(result + 20))
    {
      v14 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
      v19 = WebCore::Animation::Animation(v14);
      WebCore::AnimationList::append(v6, (unint64_t)&v19);
      WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v19, v15);
      if (!*(_DWORD *)(v6 + 20))
      {
LABEL_22:
        __break(0xC471u);
        JUMPOUT(0x1951CAB00);
      }
    }
    result = (uint64_t)WebCore::CSSToStyleMap::mapAnimationTimingFunction(**(WebCore::CSSToStyleMap ***)(v6 + 8), a2, v5);
    v9 = 1;
  }
  for (; v9 < *(unsigned int *)(v6 + 20); ++v9)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v9);
    *(_DWORD *)(v16 + 112) &= 0xBFFBFFFF;
  }
  return result;
}

uint64_t WebCore::Style::BuilderCustom::applyInitialClip(WebCore::Style::BuilderCustom *this, WebCore::Style::BuilderState *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  WTF *v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebCore::StyleRareNonInheritedData *v12;
  unint64_t v13;
  WTF *v14;
  void *v15;
  _DWORD v16[2];
  _DWORD v17[2];
  _DWORD v18[2];
  _DWORD v19[2];

  v3 = *((_QWORD *)this + 2);
  *(_DWORD *)((char *)v19 + 3) = 0;
  v19[0] = 0;
  *(_DWORD *)((char *)v18 + 3) = 0;
  v18[0] = 0;
  *(_DWORD *)((char *)v17 + 3) = 0;
  v17[0] = 0;
  memset(v16, 0, 7);
  WebCore::RenderStyle::setClip(v3, v19, v18, v17, v16);
  if (LOBYTE(v16[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16[0]);
  }
  if (LOBYTE(v17[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v17[0]);
  }
  if (LOBYTE(v18[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18[0]);
  }
  if (LOBYTE(v19[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19[0]);
  }
  v4 = *((_QWORD *)this + 2);
  v6 = *(_QWORD *)(v4 + 8);
  result = v4 + 8;
  if (((*(unsigned int *)(*(_QWORD *)(v6 + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(v6 + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(v6 + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0)
  {
    v7 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v8 = (_DWORD *)*((_QWORD *)v7 + 5);
    if (*v8 == 1)
    {
      result = *((_QWORD *)v7 + 5);
    }
    else
    {
      v9 = v7;
      v10 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v10, (uint64_t)v8);
      v12 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v9 + 5);
      *((_QWORD *)v9 + 5) = result;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v12, v11);
          WTF::fastFree(v14, v15);
          result = *((_QWORD *)v9 + 5);
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
    }
    v13 = (*(unsigned int *)(result + 636) | ((unint64_t)(*(unsigned __int16 *)(result + 640) | (*(unsigned __int8 *)(result + 642) << 16)) << 32)) & 0xFFDFFFFFFFFFFFFFLL;
    *(_WORD *)(result + 640) = *(_WORD *)(result + 640);
    *(_DWORD *)(result + 636) = v13;
    *(_BYTE *)(result + 642) = BYTE6(v13);
  }
  return result;
}

WebCore::StyleGridData *WebCore::Style::BuilderCustom::applyInitialGridTemplateAreas(WebCore::Style::BuilderCustom *this, WebCore::Style::BuilderState *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  WTF **v5;
  uint64_t v6;
  void *v7;
  const WTF::StringImpl *v8;
  WTF *v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::StyleRareNonInheritedData *v14;
  const WebCore::StyleGridData *v15;
  WebCore::StyleGridData *v16;
  WebCore::StyleGridData *v17;
  void *v18;
  WebCore::StyleGridData *v19;
  uint64_t v20;
  uint64_t v21;
  WTF **v22;
  uint64_t v23;
  void *v24;
  const WTF::StringImpl *v25;
  WTF *v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WebCore::StyleRareNonInheritedData *v31;
  const WebCore::StyleGridData *v32;
  WebCore::StyleGridData *v33;
  WebCore::StyleGridData *v34;
  void *v35;
  WebCore::StyleGridData *v36;
  uint64_t v37;
  WebCore::RenderStyle *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::StyleGridData *result;
  uint64_t v43;
  WTF *v44;
  _DWORD *v45;
  WTF *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WebCore::StyleRareNonInheritedData *v49;
  const WebCore::StyleGridData *v50;
  WebCore::StyleGridData *v51;
  void *v52;
  WebCore::StyleGridData *v53;
  WTF *v54;
  _DWORD *v55;
  WTF *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WebCore::StyleRareNonInheritedData *v59;
  const WebCore::StyleGridData *v60;
  WebCore::StyleGridData *v61;
  void *v62;
  WebCore::StyleGridData *v63;
  WTF *v64;
  void *v65;
  WTF *v66;
  void *v67;
  WTF *v68;
  void *v69;
  WTF *v70;
  void *v71;
  WTF *v72;
  void *v73;
  WTF *v74;
  void *v75;
  WTF *v76;
  void *v77;
  WTF *v78;
  void *v79;
  uint64_t v80;
  WTF::StringImpl **v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF *v90;
  WTF::StringImpl **v91;

  v4 = *((_QWORD *)this + 2);
  v91 = 0;
  v6 = *(_QWORD *)(v4 + 8);
  v5 = (WTF **)(v4 + 8);
  if (!WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 80) + 8), (uint64_t *)&v91, a3))
  {
    v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v5);
    v10 = (_DWORD *)*((_QWORD *)v9 + 5);
    if (*v10 == 1)
    {
      v12 = *((_QWORD *)v9 + 5);
    }
    else
    {
      v11 = v9;
      v12 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v12, (uint64_t)v10);
      v14 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v11 + 5);
      *((_QWORD *)v11 + 5) = v12;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v14, v13);
          WTF::fastFree(v68, v69);
          v12 = *((_QWORD *)v11 + 5);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
    }
    v15 = *(const WebCore::StyleGridData **)(v12 + 80);
    if (*(_DWORD *)v15 == 1)
    {
      v17 = *(WebCore::StyleGridData **)(v12 + 80);
    }
    else
    {
      v16 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      v17 = WebCore::StyleGridData::StyleGridData(v16, v15);
      v19 = *(WebCore::StyleGridData **)(v12 + 80);
      *(_QWORD *)(v12 + 80) = v17;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v19, v18);
          WTF::fastFree(v76, v77);
          v17 = *(WebCore::StyleGridData **)(v12 + 80);
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
    }
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((uint64_t *)v17 + 1, (uint64_t *)&v91);
  }
  v20 = (uint64_t)v91;
  if (v91)
  {
    v83 = *((unsigned int *)v91 - 1);
    if ((_DWORD)v83)
    {
      v84 = (uint64_t)v91;
      do
      {
        v85 = *(WTF::StringImpl **)v84;
        if (*(_QWORD *)v84 != -1)
        {
          v86 = *(WTF **)(v84 + 8);
          if (v86)
          {
            *(_QWORD *)(v84 + 8) = 0;
            *(_DWORD *)(v84 + 16) = 0;
            WTF::fastFree(v86, v7);
            v85 = *(WTF::StringImpl **)v84;
          }
          *(_QWORD *)v84 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v85 -= 2;
          }
        }
        v84 += 24;
        --v83;
      }
      while (v83);
    }
    WTF::fastFree((WTF *)(v20 - 16), v7);
  }
  v21 = *((_QWORD *)this + 2);
  v91 = 0;
  v23 = *(_QWORD *)(v21 + 8);
  v22 = (WTF **)(v21 + 8);
  if (!WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 80) + 16), (uint64_t *)&v91, v8))
  {
    v26 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v22);
    v27 = (_DWORD *)*((_QWORD *)v26 + 5);
    if (*v27 == 1)
    {
      v29 = *((_QWORD *)v26 + 5);
    }
    else
    {
      v28 = v26;
      v29 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v29, (uint64_t)v27);
      v31 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v28 + 5);
      *((_QWORD *)v28 + 5) = v29;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v31, v30);
          WTF::fastFree(v70, v71);
          v29 = *((_QWORD *)v28 + 5);
        }
        else
        {
          --*(_DWORD *)v31;
        }
      }
    }
    v32 = *(const WebCore::StyleGridData **)(v29 + 80);
    if (*(_DWORD *)v32 == 1)
    {
      v34 = *(WebCore::StyleGridData **)(v29 + 80);
    }
    else
    {
      v33 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      v34 = WebCore::StyleGridData::StyleGridData(v33, v32);
      v36 = *(WebCore::StyleGridData **)(v29 + 80);
      *(_QWORD *)(v29 + 80) = v34;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v36, v35);
          WTF::fastFree(v78, v79);
          v34 = *(WebCore::StyleGridData **)(v29 + 80);
        }
        else
        {
          --*(_DWORD *)v36;
        }
      }
    }
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((uint64_t *)v34 + 2, (uint64_t *)&v91);
  }
  v37 = (uint64_t)v91;
  if (v91)
  {
    v87 = *((unsigned int *)v91 - 1);
    if ((_DWORD)v87)
    {
      v88 = (uint64_t)v91;
      do
      {
        v89 = *(WTF::StringImpl **)v88;
        if (*(_QWORD *)v88 != -1)
        {
          v90 = *(WTF **)(v88 + 8);
          if (v90)
          {
            *(_QWORD *)(v88 + 8) = 0;
            *(_DWORD *)(v88 + 16) = 0;
            WTF::fastFree(v90, v24);
            v89 = *(WTF::StringImpl **)v88;
          }
          *(_QWORD *)v88 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
              WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v89 -= 2;
          }
        }
        v88 += 24;
        --v87;
      }
      while (v87);
    }
    WTF::fastFree((WTF *)(v37 - 16), v24);
  }
  v38 = (WebCore::RenderStyle *)*((_QWORD *)this + 2);
  v91 = 0;
  WebCore::RenderStyle::setNamedGridArea(v38, (const WebCore::NamedGridAreaMap *)&v91, v25);
  v40 = (uint64_t)v91;
  if (v91)
  {
    v80 = *((unsigned int *)v91 - 1);
    if ((_DWORD)v80)
    {
      v81 = v91;
      do
      {
        v82 = *v81;
        if (*v81 != (WTF::StringImpl *)-1)
        {
          *v81 = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 == 2)
              WTF::StringImpl::destroy(v82, v39);
            else
              *(_DWORD *)v82 -= 2;
          }
        }
        v81 += 4;
        --v80;
      }
      while (v80);
    }
    WTF::fastFree((WTF *)(v40 - 16), v39);
  }
  v41 = *((_QWORD *)this + 2);
  result = (WebCore::StyleGridData *)(v41 + 8);
  v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 40) + 80);
  if (*(_DWORD *)(v43 + 80))
  {
    v44 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v45 = (_DWORD *)*((_QWORD *)v44 + 5);
    if (*v45 == 1)
    {
      v47 = *((_QWORD *)v44 + 5);
    }
    else
    {
      v46 = v44;
      v47 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v47, (uint64_t)v45);
      v49 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v46 + 5);
      *((_QWORD *)v46 + 5) = v47;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v49, v48);
          WTF::fastFree(v64, v65);
          v47 = *((_QWORD *)v46 + 5);
        }
        else
        {
          --*(_DWORD *)v49;
        }
      }
    }
    v50 = *(const WebCore::StyleGridData **)(v47 + 80);
    if (*(_DWORD *)v50 == 1)
    {
      result = *(WebCore::StyleGridData **)(v47 + 80);
    }
    else
    {
      v51 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      result = WebCore::StyleGridData::StyleGridData(v51, v50);
      v53 = *(WebCore::StyleGridData **)(v47 + 80);
      *(_QWORD *)(v47 + 80) = result;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v53, v52);
          WTF::fastFree(v72, v73);
          result = *(WebCore::StyleGridData **)(v47 + 80);
        }
        else
        {
          --*(_DWORD *)v53;
        }
      }
    }
    *((_DWORD *)result + 20) = 0;
    v41 = *((_QWORD *)this + 2);
    v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 40) + 80);
  }
  if (*(_DWORD *)(v43 + 84))
  {
    v54 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(v41 + 8));
    v55 = (_DWORD *)*((_QWORD *)v54 + 5);
    if (*v55 == 1)
    {
      v57 = *((_QWORD *)v54 + 5);
    }
    else
    {
      v56 = v54;
      v57 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v57, (uint64_t)v55);
      v59 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v56 + 5);
      *((_QWORD *)v56 + 5) = v57;
      if (v59)
      {
        if (*(_DWORD *)v59 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v59, v58);
          WTF::fastFree(v66, v67);
          v57 = *((_QWORD *)v56 + 5);
        }
        else
        {
          --*(_DWORD *)v59;
        }
      }
    }
    v60 = *(const WebCore::StyleGridData **)(v57 + 80);
    if (*(_DWORD *)v60 == 1)
    {
      result = *(WebCore::StyleGridData **)(v57 + 80);
    }
    else
    {
      v61 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      result = WebCore::StyleGridData::StyleGridData(v61, v60);
      v63 = *(WebCore::StyleGridData **)(v57 + 80);
      *(_QWORD *)(v57 + 80) = result;
      if (v63)
      {
        if (*(_DWORD *)v63 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v63, v62);
          WTF::fastFree(v74, v75);
          result = *(WebCore::StyleGridData **)(v57 + 80);
        }
        else
        {
          --*(_DWORD *)v63;
        }
      }
    }
    *((_DWORD *)result + 21) = 0;
  }
  return result;
}

void WebCore::Style::BuilderFunctions::applyValueMixBlendMode(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  int v4;
  int v5;

  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F87F) == 0x50)
    v4 = *((unsigned __int16 *)a2 + 4);
  else
    v4 = 0;
  v5 = WebCore::fromCSSValueID<WebCore::BlendMode>(v4);
  WebCore::RenderStyle::setBlendMode((uint64_t)this, v5);
}

int *WebCore::Style::BuilderFunctions::applyValueRy(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  WebCore::RenderStyle *v3;
  WebCore::SVGRenderStyle *v4;
  int *result;
  unsigned int v6;
  char v7;

  v3 = (WebCore::RenderStyle *)*((_QWORD *)this + 2);
  WebCore::Style::BuilderConverter::convertLengthOrAuto((WebCore::Node *)&v6, this, a2);
  v4 = WebCore::RenderStyle::accessSVGStyle(v3);
  result = (int *)WebCore::SVGRenderStyle::setRy(v4, (const WebCore::Length *)&v6);
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  return result;
}

void WebCore::Style::BuilderFunctions::applyValueStopOpacity(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  WebCore::SVGRenderStyle *v4;
  WebCore::Style::BuilderState *v5;
  const WebCore::CSSValue *v6;
  float v7;
  float v8;
  float v9;
  unsigned int **v10;
  uint64_t v11;

  v4 = WebCore::RenderStyle::accessSVGStyle(this);
  v7 = WebCore::Style::BuilderConverter::convertOpacity(a2, v5, v6);
  v8 = 0.0;
  if (v7 > 0.0)
    v8 = v7;
  if (v7 >= 1.0)
    v9 = 1.0;
  else
    v9 = v8;
  v11 = *((_QWORD *)v4 + 6);
  v10 = (unsigned int **)((char *)v4 + 48);
  if (*(float *)(v11 + 4) != v9)
    *((float *)WTF::DataRef<WebCore::StyleStopData>::access(v10) + 1) = v9;
}

int *WebCore::Style::BuilderFunctions::applyValueStrokeDashoffset(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  uint64_t v3;
  int *result;
  unsigned int v5;
  char v6;

  v3 = *((_QWORD *)this + 2);
  WebCore::Style::BuilderConverter::convertLengthAllowingNumber((WebCore::Style::BuilderConverter *)&v5, this, a2);
  result = (int *)WebCore::RenderStyle::setStrokeDashOffset(v3, (WebCore::Length *)&v5);
  if (v6 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5);
  }
  return result;
}

WTF *WebCore::Style::BuilderFunctions::applyValueWillChange(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  uint64_t v3;
  void *v4;
  WTF *result;
  WTF *v6;

  v3 = *((_QWORD *)this + 2);
  WebCore::Style::BuilderConverter::convertWillChange((uint64_t)&v6, this, a2);
  WebCore::RenderStyle::setWillChange(v3, (uint64_t *)&v6);
  result = v6;
  if (v6)
    return (WTF *)WTF::RefCounted<WebCore::WillChangeData>::deref((uint64_t)v6, v4);
  return result;
}

WebCore::StyleMiscNonInheritedData *WebCore::Style::BuilderFunctions::applyValueWebkitUserDrag(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2, WebCore::CSSValue *a3)
{
  int v3;
  int v4;

  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F87F) == 0x50)
  {
    v4 = *((unsigned __int16 *)a2 + 4);
    if (v4 == 545)
      v3 = 2;
    else
      v3 = v4 == 6;
  }
  else
  {
    v3 = 0;
  }
  return WebCore::RenderStyle::setUserDrag((uint64_t)this, v3);
}

uint64_t WebCore::Style::BuilderFunctions::applyValueWebkitBackgroundClip(WTF **a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::FillLayer *v12;
  WebCore::FillLayer *v13;
  WebCore::FillLayer *v14;

  result = (uint64_t)WebCore::RenderStyle::ensureBackgroundLayers(a1);
  v4 = result;
  if (((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        if (v6 > 3)
        {
          if (*(_DWORD *)(a2 + 8) <= v6)
          {
            result = 148;
            __break(0xC471u);
            return result;
          }
          v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 8 * (v8 - 4));
        }
        else
        {
          v9 = (uint64_t *)(a2 + 16 + 8 * v8);
        }
        v10 = *v9;
        if (!v4)
        {
          v11 = WTF::fastMalloc((WTF *)0x40);
          v12 = (WebCore::FillLayer *)WebCore::FillLayer::FillLayer(v11, 0);
          v13 = 0;
          v14 = v12;
          WTF::RefPtr<WebCore::FillLayer,WTF::RawPtrTraits<WebCore::FillLayer>,WTF::DefaultRefDerefTraits<WebCore::FillLayer>>::operator=((WebCore::FillLayer **)(v7 + 8), &v14);
          if (v14)
            WTF::RefCounted<WebCore::FillLayer>::deref(v14);
          WTF::Ref<WebCore::FillLayer,WTF::RawPtrTraits<WebCore::FillLayer>,WTF::DefaultRefDerefTraits<WebCore::FillLayer>>::~Ref(&v13);
          v4 = *(_QWORD *)(v7 + 8);
        }
        v7 = v4;
        result = WebCore::CSSToStyleMap::mapFillClip(452, v4, v10);
        v4 = *(_QWORD *)(v4 + 8);
        v6 = v8 + 1;
        v8 = (v8 + 1);
        if (v5 == v6)
          goto LABEL_3;
      }
    }
    goto LABEL_15;
  }
  result = WebCore::CSSToStyleMap::mapFillClip(452, result, a2);
  v4 = *(_QWORD *)(v4 + 8);
LABEL_3:
  while (v4)
  {
LABEL_15:
    *(_DWORD *)(v4 + 60) &= ~0x200u;
    v4 = *(_QWORD *)(v4 + 8);
  }
  return result;
}

void *WebCore::borderBlockColorShorthand(WebCore *this)
{
  return &WebCore::borderBlockColorShorthand(void)::borderBlockColorProperties;
}

void *WebCore::borderBlockEndShorthand(WebCore *this)
{
  return &WebCore::borderBlockEndShorthand(void)::borderBlockEndProperties;
}

void *WebCore::borderBlockStartShorthand(WebCore *this)
{
  return &WebCore::borderBlockStartShorthand(void)::borderBlockStartProperties;
}

void *WebCore::borderBlockStyleShorthand(WebCore *this)
{
  return &WebCore::borderBlockStyleShorthand(void)::borderBlockStyleProperties;
}

void *WebCore::borderBlockWidthShorthand(WebCore *this)
{
  return &WebCore::borderBlockWidthShorthand(void)::borderBlockWidthProperties;
}

void *WebCore::borderInlineColorShorthand(WebCore *this)
{
  return &WebCore::borderInlineColorShorthand(void)::borderInlineColorProperties;
}

void *WebCore::borderInlineEndShorthand(WebCore *this)
{
  return &WebCore::borderInlineEndShorthand(void)::borderInlineEndProperties;
}

void *WebCore::borderInlineStartShorthand(WebCore *this)
{
  return &WebCore::borderInlineStartShorthand(void)::borderInlineStartProperties;
}

void *WebCore::borderInlineStyleShorthand(WebCore *this)
{
  return &WebCore::borderInlineStyleShorthand(void)::borderInlineStyleProperties;
}

void *WebCore::borderInlineWidthShorthand(WebCore *this)
{
  return &WebCore::borderInlineWidthShorthand(void)::borderInlineWidthProperties;
}

void *WebCore::columnRuleShorthand(WebCore *this)
{
  return &WebCore::columnRuleShorthand(void)::columnRuleProperties;
}

void *WebCore::flexFlowShorthand(WebCore *this)
{
  return &WebCore::flexFlowShorthand(void)::flexFlowProperties;
}

void *WebCore::fontShorthand(WebCore *this)
{
  return &WebCore::fontShorthand(void)::fontProperties;
}

void *WebCore::insetBlockShorthand(WebCore *this)
{
  return &WebCore::insetBlockShorthand(void)::insetBlockProperties;
}

void *WebCore::insetInlineShorthand(WebCore *this)
{
  return &WebCore::insetInlineShorthand(void)::insetInlineProperties;
}

void *WebCore::maskBorderShorthand(WebCore *this)
{
  return &WebCore::maskBorderShorthand(void)::maskBorderProperties;
}

void *WebCore::scrollMarginShorthand(WebCore *this)
{
  return &WebCore::scrollMarginShorthand(void)::scrollMarginProperties;
}

void *WebCore::scrollMarginBlockShorthand(WebCore *this)
{
  return &WebCore::scrollMarginBlockShorthand(void)::scrollMarginBlockProperties;
}

void *WebCore::scrollMarginInlineShorthand(WebCore *this)
{
  return &WebCore::scrollMarginInlineShorthand(void)::scrollMarginInlineProperties;
}

void *WebCore::scrollPaddingShorthand(WebCore *this)
{
  return &WebCore::scrollPaddingShorthand(void)::scrollPaddingProperties;
}

void *WebCore::scrollPaddingBlockShorthand(WebCore *this)
{
  return &WebCore::scrollPaddingBlockShorthand(void)::scrollPaddingBlockProperties;
}

void *WebCore::scrollPaddingInlineShorthand(WebCore *this)
{
  return &WebCore::scrollPaddingInlineShorthand(void)::scrollPaddingInlineProperties;
}

void *WebCore::webkitTextDecorationShorthand(WebCore *this)
{
  return &WebCore::webkitTextDecorationShorthand(void)::webkitTextDecorationProperties;
}

void *WebCore::webkitTextStrokeShorthand(WebCore *this)
{
  return &WebCore::webkitTextStrokeShorthand(void)::webkitTextStrokeProperties;
}

uint64_t WebCore::byteLengthQueuingStrategyHighWaterMarkCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 440);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 440);
    v5 = *(WTF::StringImpl **)(v2 + 368);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 352;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::byteLengthQueuingStrategySizeCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 472);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 472);
    v5 = *(WTF::StringImpl **)(v2 + 400);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 352;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::ByteLengthQueuingStrategyBuiltinsWrapper::byteLengthQueuingStrategyInitializeByteLengthQueuingStrategyCodeExecutable(WebCore::ByteLengthQueuingStrategyBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 152);
  v2 = (_QWORD *)*((_QWORD *)this + 19);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::CompressionStreamBuiltinsWrapper::compressionStreamInitializeCompressionStreamCodeExecutable(WebCore::CompressionStreamBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 88);
  v2 = (_QWORD *)*((_QWORD *)this + 11);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::compressionStreamReadableCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v4 = (uint64_t *)(v2 + 152);
  v3 = *(_QWORD **)(v2 + 152);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v5 = *(WTF::StringImpl **)(v2 + 64);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 32;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::compressionStreamWritableCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v4 = (uint64_t *)(v2 + 184);
  v3 = *(_QWORD **)(v2 + 184);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v5 = *(WTF::StringImpl **)(v2 + 80);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 32;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::countQueuingStrategyHighWaterMarkCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 600);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 600);
    v5 = *(WTF::StringImpl **)(v2 + 528);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 512;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::countQueuingStrategySizeCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 632);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 632);
    v5 = *(WTF::StringImpl **)(v2 + 560);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 512;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::decompressionStreamReadableCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 312);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 312);
    v5 = *(WTF::StringImpl **)(v2 + 224);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 192;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::decompressionStreamWritableCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 344);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 344);
    v5 = *(WTF::StringImpl **)(v2 + 240);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 192;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::ReadableByteStreamControllerBuiltinsWrapper::readableByteStreamControllerInitializeReadableByteStreamControllerCodeExecutable(WebCore::ReadableByteStreamControllerBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 136);
  v2 = (_QWORD *)*((_QWORD *)this + 17);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 12);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::readableByteStreamControllerEnqueueCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 840);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 840);
    v5 = *(WTF::StringImpl **)(v2 + 736);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 672;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableByteStreamControllerErrorCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 872);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 872);
    v5 = *(WTF::StringImpl **)(v2 + 752);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 672;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableByteStreamControllerCloseCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 904);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 904);
    v5 = *(WTF::StringImpl **)(v2 + 704);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 672;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableByteStreamControllerByobRequestCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 936);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 936);
    v5 = *(WTF::StringImpl **)(v2 + 688);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 672;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableByteStreamControllerDesiredSizeCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 968);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 968);
    v5 = *(WTF::StringImpl **)(v2 + 720);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 672;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::ReadableStreamBYOBReaderBuiltinsWrapper::readableStreamBYOBReaderInitializeReadableStreamBYOBReaderCodeExecutable(WebCore::ReadableStreamBYOBReaderBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 120);
  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::readableStreamBYOBReaderCancelCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 2776);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 2776);
    v5 = *(WTF::StringImpl **)(v2 + 2640);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 2624;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamBYOBReaderReadCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 2808);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 2808);
    v5 = *(WTF::StringImpl **)(v2 + 2688);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 2624;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamBYOBReaderReleaseLockCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 2840);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 2840);
    v5 = *(WTF::StringImpl **)(v2 + 2704);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 2624;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamBYOBReaderClosedCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 2872);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 2872);
    v5 = *(WTF::StringImpl **)(v2 + 2656);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 2624;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::ReadableStreamBYOBRequestBuiltinsWrapper::readableStreamBYOBRequestInitializeReadableStreamBYOBRequestCodeExecutable(WebCore::ReadableStreamBYOBRequestBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 104);
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::readableStreamBYOBRequestRespondCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3016);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3016);
    v5 = *(WTF::StringImpl **)(v2 + 2912);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 2880;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamBYOBRequestRespondWithNewViewCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3048);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3048);
    v5 = *(WTF::StringImpl **)(v2 + 2928);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 2880;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamBYOBRequestViewCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3080);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3080);
    v5 = *(WTF::StringImpl **)(v2 + 2944);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 2880;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::ReadableStreamDefaultControllerBuiltinsWrapper::readableStreamDefaultControllerInitializeReadableStreamDefaultControllerCodeExecutable(WebCore::ReadableStreamDefaultControllerBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 120);
  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::readableStreamDefaultControllerEnqueueCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3240);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3240);
    v5 = *(WTF::StringImpl **)(v2 + 3136);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 3088;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamDefaultControllerErrorCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3272);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3272);
    v5 = *(WTF::StringImpl **)(v2 + 3152);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 3088;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamDefaultControllerCloseCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3304);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3304);
    v5 = *(WTF::StringImpl **)(v2 + 3104);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 3088;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamDefaultControllerDesiredSizeCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3336);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3336);
    v5 = *(WTF::StringImpl **)(v2 + 3120);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 3088;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamDefaultReaderCancelCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3496);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3496);
    v5 = *(WTF::StringImpl **)(v2 + 3360);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 3344;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamDefaultReaderReadCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3528);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3528);
    v5 = *(WTF::StringImpl **)(v2 + 3408);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 3344;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamDefaultReaderReleaseLockCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3560);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3560);
    v5 = *(WTF::StringImpl **)(v2 + 3424);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v10 = v2 + 3344;
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v12 = v7 + 47;
      else
        v12 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v10;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::readableStreamDefaultReaderClosedCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 3592);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 3592);
    v5 = *(WTF::StringImpl **)(v2 + 3376);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v12 = v8 + 47;
      else
        v12 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v12 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v12 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 3344;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::TextDecoderStreamBuiltinsWrapper::textDecoderStreamInitializeTextDecoderStreamCodeExecutable(WebCore::TextDecoderStreamBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 136);
  v2 = (_QWORD *)*((_QWORD *)this + 17);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::textDecoderStreamEncodingCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 11192);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 11192);
    v5 = *(WTF::StringImpl **)(v2 + 11040);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 11024;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::textDecoderStreamFatalCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 11224);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 11224);
    v5 = *(WTF::StringImpl **)(v2 + 11056);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 11024;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::textDecoderStreamIgnoreBOMCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 11256);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 11256);
    v5 = *(WTF::StringImpl **)(v2 + 11072);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 11024;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::textDecoderStreamReadableCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 11288);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 11288);
    v5 = *(WTF::StringImpl **)(v2 + 11104);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 11024;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::textDecoderStreamWritableCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 11320);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 11320);
    v5 = *(WTF::StringImpl **)(v2 + 11120);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 11024;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::TextEncoderStreamBuiltinsWrapper::textEncoderStreamInitializeTextEncoderStreamCodeExecutable(WebCore::TextEncoderStreamBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 104);
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::textEncoderStreamEncodingCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 11464);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 11464);
    v5 = *(WTF::StringImpl **)(v2 + 11344);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 11328;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::textEncoderStreamReadableCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 11496);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 11496);
    v5 = *(WTF::StringImpl **)(v2 + 11376);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 11328;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::textEncoderStreamWritableCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 11528);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 11528);
    v5 = *(WTF::StringImpl **)(v2 + 11392);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 11328;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::TransformStreamDefaultControllerBuiltinsWrapper::transformStreamDefaultControllerInitializeTransformStreamDefaultControllerCodeExecutable(WebCore::TransformStreamDefaultControllerBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 120);
  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::transformStreamDefaultControllerDesiredSizeCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 6952);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 6952);
    v5 = *(WTF::StringImpl **)(v2 + 6816);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 6800;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::transformStreamDefaultControllerEnqueueCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 6984);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 6984);
    v5 = *(WTF::StringImpl **)(v2 + 6832);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v2;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v12 + 6800;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::transformStreamDefaultControllerErrorCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 7016);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 7016);
    v5 = *(WTF::StringImpl **)(v2 + 6848);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v2;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v12 + 6800;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::transformStreamDefaultControllerTerminateCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 7048);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 7048);
    v5 = *(WTF::StringImpl **)(v2 + 6880);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v2;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v12 + 6800;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::WritableStreamDefaultControllerBuiltinsWrapper::writableStreamDefaultControllerInitializeWritableStreamDefaultControllerCodeExecutable(WebCore::WritableStreamDefaultControllerBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 88);
  v2 = (_QWORD *)*((_QWORD *)this + 11);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::writableStreamDefaultControllerSignalCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 8104);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 8104);
    v5 = *(WTF::StringImpl **)(v2 + 8032);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 7984;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::writableStreamDefaultControllerErrorCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 8136);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 8136);
    v5 = *(WTF::StringImpl **)(v2 + 8000);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v2;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v12 + 7984;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::WritableStreamDefaultWriterBuiltinsWrapper::writableStreamDefaultWriterInitializeWritableStreamDefaultWriterCodeExecutable(WebCore::WritableStreamDefaultWriterBuiltinsWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v3 = (uint64_t *)((char *)this + 168);
  v2 = (_QWORD *)*((_QWORD *)this + 21);
  if (!v2 || !*v2 || (v4 = v2[1], (v4 & 3) != 0))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v3;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      v3 = v12;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = this;
      *(_QWORD *)(BuiltinExecutable + 16) = v12;
    }
    v8 = (_QWORD *)*v3;
    *v3 = BuiltinExecutable;
    if (v8)
      v8[1] = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v2 = (_QWORD *)*v3;
    if (!*v3)
      return 0;
    v4 = v2[1];
  }
  if ((v4 & 3) == 0)
    return *v2;
  return 0;
}

uint64_t WebCore::writableStreamDefaultWriterClosedCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 8344);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 8344);
    v5 = *(WTF::StringImpl **)(v2 + 0x2000);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 8144;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::writableStreamDefaultWriterDesiredSizeCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 8376);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 8376);
    v5 = *(WTF::StringImpl **)(v2 + 8208);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 8144;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::writableStreamDefaultWriterReadyCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t BuiltinExecutable;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 8408);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 8408);
    v5 = *(WTF::StringImpl **)(v2 + 8240);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      WTF::AtomStringImpl::addLiteral();
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
    }
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v12 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v8 = (BuiltinExecutable - 112) | 1;
      else
        v8 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v11 = v8 + 47;
      else
        v11 = *(_QWORD *)v8 + 32;
      BuiltinExecutable = *(_QWORD *)(v11 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v12;
      *(_QWORD *)(BuiltinExecutable + 8) = v2 + 8144;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v9 = *v4;
    *v4 = BuiltinExecutable;
    if (v9)
      *(_QWORD *)(v9 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::writableStreamDefaultWriterAbortCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 8440);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 8440);
    v5 = *(WTF::StringImpl **)(v2 + 8160);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v2;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v12 + 8144;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::writableStreamDefaultWriterCloseCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 8472);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 8472);
    v5 = *(WTF::StringImpl **)(v2 + 8176);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v2;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v12 + 8144;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::writableStreamDefaultWriterReleaseLockCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 8504);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 8504);
    v5 = *(WTF::StringImpl **)(v2 + 8256);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v2;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v12 + 8144;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

uint64_t WebCore::writableStreamDefaultWriterWriteCodeGenerator(WebCore *this, JSC::VM *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t BuiltinExecutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD **)(v2 + 8536);
  if (!v3 || !*v3 || (v3[1] & 3) != 0)
  {
    v4 = (uint64_t *)(v2 + 8536);
    v5 = *(WTF::StringImpl **)(v2 + 8272);
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v11 = BuiltinExecutable;
      v12 = v2;
      if ((BuiltinExecutable & 8) != 0)
        v7 = (BuiltinExecutable - 112) | 1;
      else
        v7 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v10 = v7 + 47;
      else
        v10 = *(_QWORD *)v7 + 32;
      BuiltinExecutable = *(_QWORD *)(v10 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v11;
      *(_QWORD *)(BuiltinExecutable + 8) = v12 + 8144;
      *(_QWORD *)(BuiltinExecutable + 16) = v4;
    }
    v8 = *v4;
    *v4 = BuiltinExecutable;
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return JSC::UnlinkedFunctionExecutable::link();
}

void WebCore::MathMLUnknownElement::~MathMLUnknownElement(WebCore::MathMLUnknownElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::MathMLUnknownElement::rendererIsNeeded(WebCore::MathMLUnknownElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::Element::accessKeyAction(WebCore::Element *this)
{
  return 0;
}

BOOL WebCore::Element::isValidInvokeAction(uint64_t a1, int a2)
{
  return a2 == 1;
}

uint64_t WebCore::Element::handleInvokeInternal()
{
  return 0;
}

uint64_t WebCore::MathMLElement::isMathMLToken(WebCore::MathMLElement *this)
{
  return 0;
}

uint64_t WebCore::MathMLElement::isSemanticAnnotation(WebCore::MathMLElement *this)
{
  return 0;
}

uint64_t WebCore::MathMLElement::isPresentationMathML(WebCore::MathMLElement *this)
{
  return 0;
}

uint64_t WebCore::MathMLElement::specifiedMathVariant(WebCore::MathMLElement *this)
{
  return 0;
}

void WebCore::SVGUnknownElement::~SVGUnknownElement(WebCore::SVGUnknownElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGUnknownElement::rendererIsNeeded(WebCore::SVGUnknownElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::SVGElement::supportsMarkers(WebCore::SVGElement *this)
{
  return 0;
}

uint64_t WebCore::SVGElement::needsPendingResourceHandling(WebCore::SVGElement *this)
{
  return 1;
}

uint64_t WebCore::SVGElement::isSVGGraphicsElement(WebCore::SVGElement *this)
{
  return 0;
}

uint64_t WebCore::SVGElement::isSVGGeometryElement(WebCore::SVGElement *this)
{
  return 0;
}

uint64_t WebCore::SVGElement::isFilterEffect(WebCore::SVGElement *this)
{
  return 0;
}

uint64_t WebCore::SVGElement::isGradientStop(WebCore::SVGElement *this)
{
  return 0;
}

uint64_t WebCore::SVGElement::isTextContent(WebCore::SVGElement *this)
{
  return 0;
}

uint64_t WebCore::SVGElement::isSMILElement(WebCore::SVGElement *this)
{
  return 0;
}

uint64_t WebCore::SVGElement::isValid(WebCore::SVGElement *this)
{
  return 1;
}

uint64_t WebCore::SVGElement::ensureSupplementalTransform(WebCore::SVGElement *this)
{
  return 0;
}

uint64_t WebCore::SVGElement::supplementalTransform(WebCore::SVGElement *this)
{
  return 0;
}

uint64_t WebCore::SVGElement::selfHasRelativeLengths(WebCore::SVGElement *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGUnknownElement::~SVGUnknownElement(WebCore::SVGUnknownElement *this, void *a2)
{
  WebCore::SVGElement::~SVGElement((WebCore::SVGUnknownElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGElement::~SVGElement((WebCore::SVGUnknownElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGPropertyOwner::owner(WebCore::SVGPropertyOwner *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::SVGElement::attributeContextElement(WebCore::SVGElement *this)
{
  return (uint64_t)this - 112;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::detachAllProperties(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE20enumerateRecursivelyIZNKS2_19detachAllPropertiesEvEUlRKT_E_EEbS6_((uint64_t)&v2);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::propertyAttributeName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];

  v3 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v3;
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  return _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE20enumerateRecursivelyIZNKS2_21propertyAttributeNameERKNS_11SVGPropertyEEUlRKT_E_EEbS9_(v5);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::animatedPropertyAttributeName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];

  v3 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v3;
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  return _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE20enumerateRecursivelyIZNKS2_29animatedPropertyAttributeNameERKNS_19SVGAnimatedPropertyEEUlRKT_E_EEbS9_(v5);
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  WTF::StringImpl ***v5;
  WTF::StringImpl ***result;

  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_13;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_6;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_13:
      result = 0;
  }
  else
  {
    v5 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_6:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[7])(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl ***v3;
  WTF::StringImpl ***result;
  uint64_t v5;
  _QWORD v6[2];

  *a3 = 0;
  a3[8] = 0;
  v6[0] = a1;
  v6[1] = a3;
  {
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_13;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_6;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_13:
      result = 0;
  }
  else
  {
    v3 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_6:
  {
    if (v3)
      v3 += 2 * *((unsigned int *)v3 - 1);
  }
  else
  {
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v3 != result)
  {
    v5 = (uint64_t)result[1];
    if (v5)
      return (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGElement> const>(v6, v5);
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronizeAllAttributes@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3[2];

  *a2 = 0;
  v3[0] = a1;
  v3[1] = a2;
  return _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE20enumerateRecursivelyIZNKS2_24synchronizeAllAttributesEvEUlRKT_E_EEbS6_(v3);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  WTF::StringImpl ***v2;
  WTF::StringImpl ***v3;
  WTF::StringImpl **v5;

  {
    v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_13;
    v3 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v3)
      goto LABEL_6;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v3 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_13:
      v3 = 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_6:
  {
    if (v2)
      v2 += 2 * *((unsigned int *)v2 - 1);
  }
  else
  {
    v2 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v2 == v3)
    return 0;
  v5 = v3[1];
  if (!v5)
    return 0;
  else
    return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  WTF::StringImpl ***v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes, v22, (uint64_t)v13);
  }
  {
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_23;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v4)
      goto LABEL_8;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_23:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_8:
  {
    if (v3)
      v3 += 2 * *((unsigned int *)v3 - 1);
  }
  else
  {
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes)
        return 0;
      v6 = *(_DWORD *)(WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes
                     - 8);
      v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
      v8 = 9
         * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes
                                                          + 8 * v10);
      if (v11 == *a2)
      {
        return 1;
      }
      else
      {
        v12 = 1;
        do
        {
          result = v11 != 0;
          if (!v11)
            break;
          v10 = (v10 + v12) & v6;
          v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::isAnimatedStylePropertyAttribute(WebCore::QualifiedName const&)const::animatedStyleAttributes
                                                              + 8 * v10);
          ++v12;
        }
        while (v11 != *a2);
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  _QWORD v8[7];
  char v9;
  char v10;
  char v11;
  char v12;

  v12 = a3;
  v11 = a4;
  v10 = a5;
  v9 = a6;
  *a7 = 0;
  v8[0] = a1;
  v8[1] = a7;
  v8[2] = a2;
  v8[3] = &v12;
  v8[4] = &v11;
  v8[5] = &v10;
  v8[6] = &v9;
  return _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE25lookupRecursivelyAndApplyIZNKS2_14createAnimatorERKNS_13QualifiedNameENS_13AnimationModeENS_8CalcModeEbbEUlRT_E_EEbS6_RKS9_(a2, (uint64_t)v8);
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  WTF::StringImpl ***v5;
  WTF::StringImpl ***result;

  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_13;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_6;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_13:
      result = 0;
  }
  else
  {
    v5 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_6:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[10])(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

uint64_t _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE20enumerateRecursivelyIZNKS2_19detachAllPropertiesEvEUlRKT_E_EEbS6_(uint64_t a1)
{
  WTF::StringImpl ***v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl **v17;
  int v18;
  WTF::StringImpl **v19;
  WTF *v21;
  void *v22;

  {
    v2 = 0;
    v15 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_50;
  }
  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v15 = 0;
    v3 = 0;
LABEL_50:
    v4 = &v2[2 * v3];
    goto LABEL_23;
  }
  v3 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v3);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v3);
    goto LABEL_50;
  }
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v6 = 16 * v3;
      while (1)
      {
        if (v5)
        {
          v7 = (*(_DWORD *)v5)++;
          v8 = *v2;
          if (v7)
          {
            *(_DWORD *)v5 = v7;
            v9 = (uint64_t)v5;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
            WTF::fastFree(v11, v12);
            v9 = WebCore::nullName;
          }
        }
        else
        {
          v9 = 0;
          v8 = *v2;
        }
        if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
          break;
        v2 += 2;
        v5 = (WTF::StringImpl **)v9;
        v6 -= 16;
        if (!v6)
        {
          v2 = v4;
          break;
        }
      }
      v15 = v2;
      v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v13 = 0;
      v14 = 16 * v3;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v13)
                               + 1) <= 1)
      {
        v13 += 16;
        if (v14 == v13)
        {
          v15 = v4;
          goto LABEL_23;
        }
      }
      v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v13);
    }
  }
  else
  {
    v15 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_23:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while (v15 != v2)
  {
    (*((void (**)(WTF::StringImpl **, _QWORD))*v15[1] + 2))(v15[1], *(_QWORD *)(*(_QWORD *)a1 + 8));
    v16 = v15 + 2;
    v15 = v4;
    if (v16 != v4)
    {
      v17 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v17)
          {
            v18 = (*(_DWORD *)v17)++;
            v19 = *v16;
            if (v18)
            {
              *(_DWORD *)v17 = v18;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v17);
              WTF::fastFree(v21, v22);
            }
          }
          else
          {
            v19 = *v16;
          }
          if (v19 != v17 && (WTF::StringImpl **)((char *)*v16 + 1) != 0)
            break;
          v16 += 2;
          if (v16 == v4)
            goto LABEL_41;
          v17 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v16 + 1 <= 1)
        {
          v16 += 2;
          if (v16 == v4)
          {
LABEL_41:
            v15 = v4;
            goto LABEL_43;
          }
        }
      }
      v15 = v16;
    }
LABEL_43:
    ;
  }
  return 1;
}

uint64_t _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE20enumerateRecursivelyIZNKS2_21propertyAttributeNameERKNS_11SVGPropertyEEUlRKT_E_EEbS9_(_QWORD *a1)
{
  WTF::StringImpl ***v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  uint64_t result;
  WTF::StringImpl ***v23;
  WTF::StringImpl **v24;
  WTF::StringImpl **v25;
  WTF *v26;
  void *v27;

  {
    v2 = 0;
    v14 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_56;
  }
  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v14 = 0;
    v3 = 0;
LABEL_56:
    v4 = &v2[2 * v3];
    goto LABEL_23;
  }
  v3 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v3);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v3);
    goto LABEL_56;
  }
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)WebCore::nullName;
    v6 = 16 * v3;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v5)
        {
          v7 = (*(_DWORD *)v5)++;
          v8 = *v2;
          if (v7)
          {
            *(_DWORD *)v5 = v7;
            v9 = (uint64_t)v5;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
            WTF::fastFree(v11, v12);
            v9 = WebCore::nullName;
          }
        }
        else
        {
          v9 = 0;
          v8 = *v2;
        }
        if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
          break;
        v2 += 2;
        v5 = (WTF::StringImpl **)v9;
        v6 -= 16;
        if (!v6)
        {
          v2 = v4;
          break;
        }
      }
      v14 = v2;
      v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v13 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v13)
                               + 1) <= 1)
      {
        v13 += 16;
        if (v6 == v13)
        {
          v14 = v4;
          goto LABEL_23;
        }
      }
      v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v13);
    }
  }
  else
  {
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_23:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  if (v2 == v14)
    return 1;
  while (!(*((unsigned int (**)(WTF::StringImpl **, _QWORD, _QWORD))*v14[1] + 5))(v14[1], *(_QWORD *)(*a1 + 8), a1[1]))
  {
    v15 = v14 + 2;
    v14 = v4;
    if (v15 != v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_29:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == v4)
            goto LABEL_42;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_29;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == v4)
          {
LABEL_42:
            v14 = v4;
            goto LABEL_44;
          }
        }
      }
      v14 = v15;
    }
LABEL_44:
    if (v14 == v2)
      return 1;
  }
  v23 = (WTF::StringImpl ***)a1[2];
  v24 = *v14;
  if (*v14)
    ++*(_DWORD *)v24;
  v25 = *v23;
  *v23 = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 != 1)
    {
      result = 0;
      --*(_DWORD *)v25;
      return result;
    }
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
    WTF::fastFree(v26, v27);
  }
  return 0;
}

uint64_t _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE20enumerateRecursivelyIZNKS2_29animatedPropertyAttributeNameERKNS_19SVGAnimatedPropertyEEUlRKT_E_EEbS9_(_QWORD *a1)
{
  WTF::StringImpl ***v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  uint64_t result;
  WTF::StringImpl ***v23;
  WTF::StringImpl **v24;
  WTF::StringImpl **v25;
  WTF *v26;
  void *v27;

  {
    v2 = 0;
    v14 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_56;
  }
  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v14 = 0;
    v3 = 0;
LABEL_56:
    v4 = &v2[2 * v3];
    goto LABEL_23;
  }
  v3 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v3);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v3);
    goto LABEL_56;
  }
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)WebCore::nullName;
    v6 = 16 * v3;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v5)
        {
          v7 = (*(_DWORD *)v5)++;
          v8 = *v2;
          if (v7)
          {
            *(_DWORD *)v5 = v7;
            v9 = (uint64_t)v5;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
            WTF::fastFree(v11, v12);
            v9 = WebCore::nullName;
          }
        }
        else
        {
          v9 = 0;
          v8 = *v2;
        }
        if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
          break;
        v2 += 2;
        v5 = (WTF::StringImpl **)v9;
        v6 -= 16;
        if (!v6)
        {
          v2 = v4;
          break;
        }
      }
      v14 = v2;
      v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v13 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v13)
                               + 1) <= 1)
      {
        v13 += 16;
        if (v6 == v13)
        {
          v14 = v4;
          goto LABEL_23;
        }
      }
      v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v13);
    }
  }
  else
  {
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_23:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  if (v2 == v14)
    return 1;
  while (!(*((unsigned int (**)(WTF::StringImpl **, _QWORD, _QWORD))*v14[1] + 6))(v14[1], *(_QWORD *)(*a1 + 8), a1[1]))
  {
    v15 = v14 + 2;
    v14 = v4;
    if (v15 != v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_29:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == v4)
            goto LABEL_42;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_29;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == v4)
          {
LABEL_42:
            v14 = v4;
            goto LABEL_44;
          }
        }
      }
      v14 = v15;
    }
LABEL_44:
    if (v14 == v2)
      return 1;
  }
  v23 = (WTF::StringImpl ***)a1[2];
  v24 = *v14;
  if (*v14)
    ++*(_DWORD *)v24;
  v25 = *v23;
  *v23 = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 != 1)
    {
      result = 0;
      --*(_DWORD *)v25;
      return result;
    }
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
    WTF::fastFree(v26, v27);
  }
  return 0;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v2;
  unsigned int v4;
  WebCore::QualifiedName::QualifiedNameImpl *v5;
  int v6;
  WTF::StringImpl **v7;
  int v8;
  int v9;
  WTF::StringImpl ***v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WebCore::QualifiedName::QualifiedNameImpl *v15;
  unsigned int v16;
  WTF::StringImpl ***v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WebCore::QualifiedName::QualifiedNameImpl *v22;
  int i;
  uint64_t v24;
  __int128 v25;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = *a2;
    if (*((_QWORD *)*a2 + 2))
    {
      v24 = *MEMORY[0x1E0CBF2F8];
      v25 = *(_OWORD *)((char *)v5 + 24);
      v6 = WTF::computeHash<WebCore::QualifiedNameComponents>(&v24);
    }
    else
    {
      v6 = *((_DWORD *)v5 + 1);
      if (!v6)
      {
        v6 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
        *((_DWORD *)v5 + 1) = v6;
      }
    }
    v7 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v8 = 0;
      while (1)
      {
        v9 = v6 & v4;
        v10 = (WTF::StringImpl ***)(v2 + 16 * (v6 & v4));
        if (v7)
        {
          v11 = (*(_DWORD *)v7)++;
          v12 = *v10;
          if (v11)
          {
            *(_DWORD *)v7 = v11;
            v13 = (uint64_t)v7;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
            WTF::fastFree(v20, v21);
            v13 = WebCore::nullName;
          }
        }
        else
        {
          v13 = 0;
          v12 = *v10;
        }
        if (v12 == v7)
          break;
        v14 = *v10;
        if (*v10 != (WTF::StringImpl **)-1)
        {
          v15 = *a2;
          if (v14 == (WTF::StringImpl **)*a2
            || v14[3] == *((WTF::StringImpl **)v15 + 3) && v14[4] == *((WTF::StringImpl **)v15 + 4))
          {
            return v10;
          }
        }
        v6 = ++v8 + v9;
        v7 = (WTF::StringImpl **)v13;
      }
    }
    else
    {
      v16 = v6 & v4;
      v17 = (WTF::StringImpl ***)(v2 + 16 * (v6 & v4));
      v18 = *v17;
      if (*v17)
      {
        v22 = *a2;
        for (i = 1; ; ++i)
        {
          if (v18 != (WTF::StringImpl **)-1)
          {
            if (v18 == (WTF::StringImpl **)v22)
              return v17;
            if (v18[3] == *((WTF::StringImpl **)v22 + 3))
            {
              v10 = v17;
              if (v18[4] == *((WTF::StringImpl **)v22 + 4))
                return v10;
            }
          }
          v10 = 0;
          v16 = (v16 + i) & v4;
          v17 = (WTF::StringImpl ***)(v2 + 16 * v16);
          v18 = *v17;
          if (!*v17)
            return v10;
        }
      }
    }
  }
  return 0;
}

uint64_t WTF::computeHash<WebCore::QualifiedNameComponents>(_QWORD *a1)
{
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v1 = a1[1];
  v2 = (*a1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a1 - 1640531527) << 16) ^ ((unsigned __int16)*a1
                                                                                            - 1640531527);
  v3 = v2 + (unsigned __int16)WORD2(*a1);
  v4 = (*a1 >> 37) & 0x7FFF800 ^ ((v3 + (v2 >> 11)) << 16) ^ (v3 + (v2 >> 11));
  v5 = (v1 >> 5) & 0x7FFF800 ^ ((v4 + (unsigned __int16)v1 + (v4 >> 11)) << 16) ^ (v4
                                                                                               + (unsigned __int16)v1
                                                                                               + (v4 >> 11));
  v6 = (v1 >> 37) & 0x7FFF800 ^ ((v5 + WORD2(v1) + (v5 >> 11)) << 16) ^ (v5 + WORD2(v1) + (v5 >> 11));
  v7 = a1[2];
  v8 = (v7 >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)v7 + (v6 >> 11)) << 16) ^ (v6
                                                                                               + (unsigned __int16)v7
                                                                                               + (v6 >> 11));
  v9 = (v7 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v7) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v7) + (v8 >> 11));
  v10 = (v9 + (v9 >> 11)) ^ (8 * (v9 + (v9 >> 11)));
  v11 = (v10 + (v10 >> 5)) ^ (4 * (v10 + (v10 >> 5)));
  v12 = (v11 + (v11 >> 15)) ^ ((v11 + (v11 >> 15)) << 10);
  if (v12)
    return v12;
  else
    return 0x800000;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGElement> const>(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned __int8 v9;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(&v8, a2, *(_QWORD *)(*a1 + 8));
  v5 = a1[1];
  if (*(unsigned __int8 *)(v5 + 8) == v9)
  {
    if (!*(_BYTE *)(v5 + 8))
      return result;
    v6 = v8;
    v8 = 0;
    result = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = v6;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else if (*(_BYTE *)(v5 + 8))
  {
    result = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v5 + 8) = 0;
  }
  else
  {
    v7 = v8;
    v8 = 0;
    *(_QWORD *)v5 = v7;
    *(_BYTE *)(v5 + 8) = 1;
  }
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE20enumerateRecursivelyIZNKS2_24synchronizeAllAttributesEvEUlRKT_E_EEbS6_(uint64_t **a1)
{
  WTF::StringImpl ***v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl ***v17;
  WTF::StringImpl **v18;
  int v19;
  WTF::StringImpl **v20;
  WTF *v22;
  void *v23;
  char v25[24];
  WTF::StringImpl *v26;
  char v27;

  {
    v2 = 0;
    v14 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_55;
  }
  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v14 = 0;
    v3 = 0;
LABEL_55:
    v4 = &v2[2 * v3];
    goto LABEL_23;
  }
  v3 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v3);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v3);
    goto LABEL_55;
  }
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)WebCore::nullName;
    v6 = 16 * v3;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v5)
        {
          v7 = (*(_DWORD *)v5)++;
          v8 = *v2;
          if (v7)
          {
            *(_DWORD *)v5 = v7;
            v9 = (uint64_t)v5;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
            WTF::fastFree(v11, v12);
            v9 = WebCore::nullName;
          }
        }
        else
        {
          v9 = 0;
          v8 = *v2;
        }
        if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
          break;
        v2 += 2;
        v5 = (WTF::StringImpl **)v9;
        v6 -= 16;
        if (!v6)
        {
          v2 = v4;
          break;
        }
      }
      v14 = v2;
      v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v13 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v13)
                               + 1) <= 1)
      {
        v13 += 16;
        if (v6 == v13)
        {
          v14 = v4;
          goto LABEL_23;
        }
      }
      v14 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v13);
    }
  }
  else
  {
    v14 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_23:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while (v14 != v2)
  {
    (*((void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v14[1] + 8))(&v26, v14[1], (*a1)[1]);
    if (v27)
    {
      WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a1[1], (WebCore::QualifiedName::QualifiedNameImpl **)v14, (WTF::StringImpl ***)&v26, (uint64_t)v25);
      if (v27)
      {
        v16 = v26;
        v26 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
    }
    v17 = v14 + 2;
    v14 = v4;
    if (v17 != v4)
    {
      v18 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_33:
        v19 = (*(_DWORD *)v18)++;
        v20 = *v17;
        if (v19)
        {
          *(_DWORD *)v18 = v19;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
          WTF::fastFree(v22, v23);
        }
        while (v20 == v18 || (WTF::StringImpl **)((char *)*v17 + 1) == 0)
        {
          v17 += 2;
          if (v17 == v4)
            goto LABEL_46;
          v18 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_33;
          v20 = *v17;
        }
      }
      else
      {
        while ((unint64_t)*v17 + 1 <= 1)
        {
          v17 += 2;
          if (v17 == v4)
          {
LABEL_46:
            v14 = v4;
            goto LABEL_48;
          }
        }
      }
      v14 = v17;
    }
LABEL_48:
    ;
  }
  return 1;
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>@<X0>(uint64_t *a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, WTF::StringImpl ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  uint64_t result;
  WTF::StringImpl **v12;
  uint64_t *v13;
  int i;
  unsigned int v15;
  WTF::StringImpl ***v16;
  int v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WebCore::QualifiedName::QualifiedNameImpl *v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  WTF::StringImpl **v32;
  int v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a2;
  result = *((unsigned int *)*a2 + 1);
  if (!(_DWORD)result)
  {
    result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
    *((_DWORD *)v10 + 1) = result;
  }
  v12 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v13 = 0;
    for (i = 1; ; ++i)
    {
      v15 = result & v9;
      v16 = (WTF::StringImpl ***)(v8 + 16 * (result & v9));
      if (v12)
      {
        v17 = (*(_DWORD *)v12)++;
        v18 = *v16;
        if (v17)
        {
          *(_DWORD *)v12 = v17;
          v19 = (uint64_t)v12;
        }
        else
        {
          v42 = v13;
          v41 = i;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
          result = WTF::fastFree(v36, v37);
          i = v41;
          v13 = v42;
          v19 = WebCore::nullName;
        }
      }
      else
      {
        v19 = 0;
        v18 = *v16;
      }
      if (v18 == v12)
        break;
      if (*v16 == (WTF::StringImpl **)-1)
      {
        v13 = (uint64_t *)(v8 + 16 * v15);
      }
      else if (*v16 == (WTF::StringImpl **)*a2)
      {
        goto LABEL_55;
      }
      result = i + v15;
      v12 = (WTF::StringImpl **)v19;
    }
LABEL_12:
    if (v13)
    {
      v38 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v13 = v38;
      v13[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = (WTF::StringImpl ***)v13;
    }
LABEL_13:
    v20 = *a2;
    if (*a2)
      ++*(_DWORD *)v20;
    v21 = *v16;
    *v16 = (WTF::StringImpl **)v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
        WTF::fastFree(v34, v35);
      }
      else
      {
        --*(_DWORD *)v21;
      }
    }
    v22 = *a3;
    if (*a3)
      *(_DWORD *)v22 += 2;
    result = (uint64_t)v16[1];
    v16[1] = v22;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_29;
    }
    else if (3 * v28 > 4 * v27)
    {
LABEL_29:
      v29 = v25 + 16 * v28;
      v30 = 1;
      goto LABEL_30;
    }
    result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(a1, (WTF::StringImpl *)v16);
    v16 = (WTF::StringImpl ***)result;
    v25 = *a1;
    if (*a1)
      v28 = *(unsigned int *)(v25 - 4);
    else
      v28 = 0;
    goto LABEL_29;
  }
  v31 = result & v9;
  v16 = (WTF::StringImpl ***)(v8 + 16 * (result & v9));
  v32 = *v16;
  if (!*v16)
    goto LABEL_13;
  v13 = 0;
  v33 = 1;
  while (1)
  {
    if (v32 == (WTF::StringImpl **)-1)
    {
      v13 = (uint64_t *)v16;
      goto LABEL_35;
    }
    if (v32 == (WTF::StringImpl **)*a2)
      break;
LABEL_35:
    v31 = (v31 + v33) & v9;
    v16 = (WTF::StringImpl ***)(v8 + 16 * v31);
    v32 = *v16;
    ++v33;
    if (!*v16)
      goto LABEL_12;
  }
LABEL_55:
  v39 = *a1;
  if (*a1)
    v40 = *(unsigned int *)(v39 - 4);
  else
    v40 = 0;
  v30 = 0;
  v29 = v39 + 16 * v40;
LABEL_30:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v30;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(a1, v4, a2);
}

BOOL WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(WTF::StringImpl ***a1)
{
  WTF::StringImpl **v1;
  int v2;
  WTF::StringImpl **v3;
  WTF *v5;
  void *v6;

  v1 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v2 = (*(_DWORD *)WebCore::nullName)++;
    v3 = *a1;
    if (v2)
    {
      *(_DWORD *)v1 = v2;
    }
    else
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v1);
      WTF::fastFree(v5, v6);
    }
  }
  else
  {
    v3 = *a1;
  }
  return v3 == v1;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl ***result;
  unsigned int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl *v21;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      v13 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v12 - 1) = v13;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v16 = v7;
    v14 = 0;
    v17 = v16;
    v18 = (WTF::StringImpl *)v6;
    do
    {
      if (*(_QWORD *)v18 != -1)
      {
        if (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket((WTF::StringImpl ***)v18))
        {
          WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>::~KeyValuePair((uint64_t)v18, v19);
        }
        else
        {
          v20 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(a1, v18);
          WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>::~KeyValuePair((uint64_t)v18, v21);
          if (v18 == a3)
            v14 = v20;
        }
      }
      v18 = (WTF::StringImpl *)((char *)v18 + 16);
      --v17;
    }
    while (v17);
    goto LABEL_19;
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl **v7;
  int v8;
  int v9;
  WTF::StringImpl ***v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  BOOL v14;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  WebCore::QualifiedName::QualifiedNameImpl *v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  if (!v6)
  {
    v6 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*(WebCore::QualifiedName::QualifiedNameImpl **)a2);
    *(_DWORD *)(v5 + 4) = v6;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v8 = 0;
    do
    {
      v9 = v6 & v4;
      v10 = (WTF::StringImpl ***)(v3 + 16 * (v6 & v4));
      if (v7)
      {
        v11 = (*(_DWORD *)v7)++;
        v12 = *v10;
        if (v11)
        {
          *(_DWORD *)v7 = v11;
          v13 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v10;
      }
      v6 = ++v8 + v9;
      v14 = v12 == v7;
      v7 = (WTF::StringImpl **)v13;
    }
    while (!v14);
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = v6 & v4;
      v6 = ++v17 + v18;
    }
    while (*(_QWORD *)(v3 + 16 * v18));
    v10 = (WTF::StringImpl ***)(v3 + 16 * v18);
  }
  v19 = (WTF::StringImpl *)v10[1];
  v10[1] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *v10;
  *v10 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
      WTF::fastFree(v24, v25);
    }
    else
    {
      --*(_DWORD *)v20;
    }
  }
  v21 = *(WebCore::QualifiedName::QualifiedNameImpl **)a2;
  *(_QWORD *)a2 = 0;
  *v10 = (WTF::StringImpl **)v21;
  v22 = (WTF::StringImpl **)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v10[1] = v22;
  return v10;
}

uint64_t WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
  v9 = result & v7;
  v10 = (uint64_t *)(v6 + 8 * (result & v7));
  v11 = *v10;
  v12 = *a2;
  if (*v10)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v11 == v12)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(unsigned int *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 8 * v24;
        goto LABEL_11;
      }
      if (v11 == -1)
        v21 = v10;
      v9 = (v9 + v22) & v7;
      v10 = (uint64_t *)(v6 + 8 * v9);
      v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = *a2;
      v10 = v21;
    }
  }
  *v10 = v12;
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_10;
LABEL_22:
    result = (uint64_t)WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::expand(a1, v10);
    v10 = (uint64_t *)result;
    v15 = *a1;
    if (*a1)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_10;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_22;
LABEL_10:
  v19 = v15 + 8 * v18;
  v20 = 1;
LABEL_11:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v20;
  return result;
}

_QWORD *WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (uint64_t *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v13 = (_QWORD *)WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>>,WebCore::QualifiedName::QualifiedNameImpl *>(a1, v12);
        *v13 = *v12;
        if (v12 == a3)
          v11 = v13;
      }
      ++v12;
      --v7;
    }
    while (v7);
    goto LABEL_9;
  }
  result = 0;
  if (v6)
  {
LABEL_9:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>>,WebCore::QualifiedName::QualifiedNameImpl *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + v6;
  }
  while (*(_QWORD *)(v2 + 8 * v6));
  return v2 + 8 * v6;
}

uint64_t _ZN7WebCore24SVGPropertyOwnerRegistryINS_10SVGElementEJEE25lookupRecursivelyAndApplyIZNKS2_14createAnimatorERKNS_13QualifiedNameENS_13AnimationModeENS_8CalcModeEbbEUlRT_E_EEbS6_RKS9_(WebCore::QualifiedName::QualifiedNameImpl **a1, uint64_t a2)
{
  WTF::StringImpl ***v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  _DWORD **v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  {
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_22;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v3 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v4)
      goto LABEL_6;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_22:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_6:
  {
    if (v3)
      v3 += 2 * *((unsigned int *)v3 - 1);
  }
  else
  {
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (result)
  {
    (*(void (**)(_DWORD **__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 72))(&v10, result, *(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(a2 + 16), **(unsigned __int8 **)(a2 + 24), **(unsigned __int8 **)(a2 + 32), **(unsigned __int8 **)(a2 + 40), **(unsigned __int8 **)(a2 + 48));
    v6 = *(_DWORD ***)(a2 + 8);
    v7 = v10;
    v10 = 0;
    v8 = *v6;
    *v6 = v7;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
    v9 = v10;
    v10 = 0;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    return 1;
  }
  return result;
}

void WebCore::CSSToLengthConversionData::~CSSToLengthConversionData(WebCore::CSSToLengthConversionData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
}

void WebCore::RenderStyle::setColorScheme(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::StyleRareInheritedData *v8;
  WTF *v9;
  void *v10;

  v4 = *(_QWORD *)(a1 + 24);
  if (__PAIR64__(*(unsigned __int8 *)(v4 + 303), *(unsigned __int8 *)(v4 + 302)) != __PAIR64__(HIBYTE(a2), a2))
  {
    if (*(_DWORD *)v4 == 1)
    {
      v5 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, v4);
      v8 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v8, v7);
          WTF::fastFree(v9, v10);
          v5 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    *(_WORD *)(v5 + 302) = a2;
  }
}

void WTF::DataRef<WebCore::StyleRareInheritedData>::access(WebCore::StyleRareInheritedData **a1)
{
  WebCore::StyleRareInheritedData *v1;
  uint64_t v3;
  WTF::StringImpl *v4;
  WebCore::StyleRareInheritedData *v5;
  WebCore::StyleRareInheritedData *v6;
  WTF *v7;
  void *v8;

  v1 = *a1;
  if (*(_DWORD *)*a1 != 1)
  {
    v3 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v3, (uint64_t)v1);
    v5 = *a1;
    *a1 = v6;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v5, v4);
        WTF::fastFree(v7, v8);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
  }
}

WebCore::StyleMiscNonInheritedData *WTF::DataRef<WebCore::StyleMiscNonInheritedData>::access(WebCore::StyleMiscNonInheritedData **a1)
{
  WebCore::StyleMiscNonInheritedData *result;
  WTF::StringImpl *v3;
  WebCore::StyleMiscNonInheritedData *v4;
  WTF *v5;
  void *v6;
  WebCore::StyleMiscNonInheritedData *v7;

  result = *a1;
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy(result, (uint64_t *)&v7);
    result = v7;
    v4 = *a1;
    *a1 = v7;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v4, v3);
        WTF::fastFree(v5, v6);
        return *a1;
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

WebCore::FillLayer **WTF::Ref<WebCore::FillLayer,WTF::RawPtrTraits<WebCore::FillLayer>,WTF::DefaultRefDerefTraits<WebCore::FillLayer>>::~Ref(WebCore::FillLayer **a1)
{
  WebCore::FillLayer *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::FillLayer::~FillLayer(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

WebCore::FillLayer *WTF::RefCounted<WebCore::FillLayer>::deref(WebCore::FillLayer *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::FillLayer::~FillLayer(result);
    return (WebCore::FillLayer *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::RenderStyle::setRubyPosition(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[59];
  if (((v3 >> 3) & 3) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[59];
      v2 = v7;
    }
    v2[59] = v3 & 0xFFFFFFE7 | (8 * (v4 & 3));
  }
}

unsigned int *WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (WTF::StringImpl *)a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

void *WebCore::FontTaggedSettings<int>::insert(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v4)
  {
    v4 = 0;
    return WTF::Vector<WebCore::FontTaggedSetting<int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::FontTaggedSetting<int>>(a1, v4, (unint64_t)a2);
  }
  v6 = 0;
  v7 = *(unsigned int **)a1;
  v8 = *a2;
  v9 = *a2 >> 8;
  v10 = *a2;
  v11 = 8 * v4 - 8;
  v12 = HIWORD(*a2);
  while (1)
  {
    v13 = *v7;
    v14 = *v7;
    LOBYTE(v15) = *a2;
    if (v14 != v10)
      goto LABEL_10;
    LOBYTE(v14) = BYTE1(*v7);
    if (BYTE1(v13) != v9)
    {
      LOBYTE(v15) = BYTE1(v8);
      goto LABEL_10;
    }
    LOBYTE(v14) = BYTE2(*v7);
    if (BYTE2(v13) != v12)
    {
      LOBYTE(v15) = BYTE2(v8);
      goto LABEL_10;
    }
    v14 = HIBYTE(v13);
    if (HIBYTE(v13) == HIBYTE(v8))
      break;
    v15 = HIBYTE(v8);
LABEL_10:
    if ((char)v14 >= (char)v15)
      break;
    --v6;
    v7 += 2;
    v11 -= 8;
    if (v11 == -8)
      return WTF::Vector<WebCore::FontTaggedSetting<int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::FontTaggedSetting<int>>(a1, v4, (unint64_t)a2);
  }
  v4 = -v6;
  if (v13 == v8)
  {
    memmove(v7, v7 + 2, v11);
    --*(_DWORD *)(a1 + 12);
  }
  return WTF::Vector<WebCore::FontTaggedSetting<int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::FontTaggedSetting<int>>(a1, v4, (unint64_t)a2);
}

void *WTF::Vector<WebCore::FontTaggedSetting<int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::FontTaggedSetting<int>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;
  void *result;

  v3 = (_QWORD *)a3;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
  {
    v3 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, a3);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * a2);
  result = memmove(v7 + 1, v7, *(_QWORD *)a1 + 8 * v6 - (_QWORD)v7);
  *v7 = *v3;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WTF **WTF::Ref<WebCore::CalculationValue,WTF::RawPtrTraits<WebCore::CalculationValue>,WTF::DefaultRefDerefTraits<WebCore::CalculationValue>>::~Ref(WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::Style::BuilderConverter::convertFontStretchFromValue(WebCore::Style::BuilderConverter *this, const WebCore::CSSValue *a2)
{
  int v2;
  int v4;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  double v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  int v16;

  v2 = *((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16);
  if ((v2 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1951D398CLL);
  }
  v4 = *((_WORD *)this + 2) & 0x7F;
  if ((v2 & 0x7Fu) - 63 <= 0x11 && ((1 << ((v2 & 0x7F) - 63)) & 0x34001) != 0)
    goto LABEL_10;
  if (v4 == 73)
  {
    v7 = *(unsigned __int8 **)(*((_QWORD *)this + 1) + 8);
    v8 = v7[12];
    if (v8 != 1)
    {
      if (v8 == 2)
        goto LABEL_21;
      if ((v8 - 5) > 3)
      {
LABEL_10:
        if ((v2 & 0x7F) != 0x50)
          return 400;
        v9 = 0;
        v10 = 200;
        switch(*((_WORD *)this + 4))
        {
          case 'l':
            return v9 | v10;
          case 'm':
            v9 = 0;
            v10 = 250;
            break;
          case 'n':
            v9 = 256;
            v10 = 44;
            break;
          case 'o':
            v9 = 256;
            v10 = 94;
            break;
          case 'p':
            v9 = 256;
            v10 = 194;
            break;
          case 'q':
            v9 = 256;
            v10 = 244;
            break;
          case 'r':
            v9 = 512;
            v10 = 88;
            break;
          case 's':
            v9 = 768;
            v10 = 32;
            break;
          default:
            return 400;
        }
        return v9 | v10;
      }
    }
    v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v7 + 72))(v7);
  }
  if (v4 != 3)
  {
    LOWORD(v2) = *((_WORD *)this + 2);
    goto LABEL_10;
  }
LABEL_21:
  v11 = WebCore::CSSPrimitiveValue::doubleValue(this);
  if (v11 >= 3.40282347e38)
  {
    v16 = 2139095039;
LABEL_38:
    v12 = *(float *)&v16;
    goto LABEL_24;
  }
  if (v11 <= -3.40282347e38)
  {
    v16 = -8388609;
    goto LABEL_38;
  }
  v12 = v11;
LABEL_24:
  if (v12 > 8191.8)
    v12 = 8191.8;
  v13 = v12 * 4.0;
  v14 = v12 <= -8192.0;
  v15 = -32768.0;
  if (!v14)
    v15 = v13;
  return (int)v15;
}

uint64_t WebCore::FontVariantAlternatesValues::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
  {
    v19 = *(WTF::StringImpl ***)(a1 + 8);
    v20 = 8 * v6;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  v7 = *(WTF **)(a1 + 8);
  if (v7)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v8;
  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9)
  {
    v22 = *(WTF::StringImpl ***)(a1 + 24);
    v23 = 8 * v9;
    do
    {
      v24 = *v22;
      *v22 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  v10 = *(WTF **)(a1 + 24);
  if (v10)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(a1 + 24) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 36) = v11;
  v12 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  v13 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v15 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  v17 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  *(_WORD *)(a1 + 64) = *((_WORD *)a2 + 32);
  return a1;
}

void WebCore::Style::BuilderCustom::applyValueFontVariantAlternates(WebCore::Style::BuilderState &,WebCore::CSSValue &)::{lambda(WebCore::FontVariantAlternates const&)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _BYTE v13[32];
  uint64_t v14;
  WTF *v15;
  int v16;
  __int16 v17;

  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v13, (const WebCore::FontDescription *)(v4 + 48));
  v5 = *(WTF **)(v4 + 216);
  ++*(_DWORD *)v5;
  v15 = v5;
  v16 = *(_DWORD *)(v4 + 224);
  v17 = *(_WORD *)(v4 + 228);
  WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v14, a2);
  v6 = *a1;
  *(_BYTE *)(v6 + 316) |= WebCore::RenderStyle::setFontDescription(*(_QWORD *)(*a1 + 16), (uint64_t)v13);
  v8 = (unsigned int *)v15;
  v15 = 0;
  if (v8)
  {
    if (*v8 == 1)
    {
      v9 = v8[1];
      if ((_DWORD)v9)
      {
        v10 = (WTF::StringImpl **)(v8 + 2);
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v7);
            else
              *(_DWORD *)v12 -= 2;
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      WTF::fastFree((WTF *)v8, v7);
    }
    else
    {
      --*v8;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v13, v7);
}

BOOL WebCore::RenderStyle::setTextOrientation(uint64_t a1, int a2)
{
  WebCore::StyleRareInheritedData **v3;
  uint64_t v4;
  int v5;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 24);
  v3 = (WebCore::StyleRareInheritedData **)(a1 + 24);
  v5 = (*(_DWORD *)(v4 + 232) >> 4) & 3;
  if (v5 != a2)
  {
    WTF::DataRef<WebCore::StyleRareInheritedData>::access(v3);
    *(_DWORD *)(v7 + 232) = *(_DWORD *)(v7 + 232) & 0xFFFFFFCF | (16 * (a2 & 3));
  }
  return v5 != a2;
}

uint64_t WebCore::Style::BuilderState::setZoom(WebCore::Style::BuilderState *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t result;
  uint64_t v9;
  float v10;
  WTF *v11;
  _DWORD *v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareNonInheritedData *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WebCore::StyleRareInheritedData *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;

  v4 = *((_QWORD *)this + 2);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(float *)(v5 + 184);
  v7 = v6 * a2;
  if (v6 != (float)(v6 * a2))
  {
    if (*(_DWORD *)v5 != 1)
    {
      v17 = v4;
      v18 = *(_QWORD *)(v4 + 24);
      v5 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v5, v18);
      v20 = *(WebCore::StyleRareInheritedData **)(v17 + 24);
      *(_QWORD *)(v17 + 24) = v5;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v20, v19);
          WTF::fastFree(v23, v24);
          v4 = v17;
          v5 = *(_QWORD *)(v17 + 24);
          goto LABEL_5;
        }
        --*(_DWORD *)v20;
      }
      v4 = v17;
    }
LABEL_5:
    *(float *)(v5 + 184) = v7;
  }
  v9 = *(_QWORD *)(v4 + 8);
  result = v4 + 8;
  v10 = *(float *)(*(_QWORD *)(v9 + 40) + 588);
  if (v10 != a2)
  {
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v12 = (_DWORD *)*((_QWORD *)v11 + 5);
    if (*v12 == 1)
    {
      result = *((_QWORD *)v11 + 5);
    }
    else
    {
      v13 = v11;
      v14 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v14, (uint64_t)v12);
      v16 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v13 + 5);
      *((_QWORD *)v13 + 5) = result;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v16, v15);
          WTF::fastFree(v21, v22);
          result = *((_QWORD *)v13 + 5);
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
    }
    *(float *)(result + 588) = a2;
  }
  *((_BYTE *)this + 316) |= v10 != a2;
  return result;
}

_DWORD *WTF::DataRef<WebCore::StyleRareNonInheritedData>::access(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  _DWORD *result;
  WTF::StringImpl *v5;
  WebCore::StyleRareNonInheritedData *v6;
  WTF *v7;
  void *v8;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return (_DWORD *)*a1;
  v3 = WTF::fastMalloc((WTF *)0x288);
  result = (_DWORD *)WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v3, v1);
  v6 = (WebCore::StyleRareNonInheritedData *)*a1;
  *a1 = (uint64_t)result;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v6, v5);
      WTF::fastFree(v7, v8);
      return (_DWORD *)*a1;
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setHasAutoAccentColor(WebCore::RenderStyle *this)
{
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::StyleRareInheritedData *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;

  v2 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v2 + 238) & 0x80) != 0)
  {
    v12 = 1;
    if (*(_DWORD *)(v2 + 152) == 1)
    {
      v14 = &v13;
      v3 = std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>();
      result = ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v14, &v11);
      if ((v3 & 1) != 0)
        return result;
    }
    else
    {
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v14, &v11);
    }
    v2 = *((_QWORD *)this + 3);
  }
  if (*(_DWORD *)v2 == 1)
  {
    v5 = v2;
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, v2);
    v8 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v5;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v8, v7);
        WTF::fastFree(v9, v10);
        v5 = *((_QWORD *)this + 3);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  *(_DWORD *)(v5 + 236) |= 0x800000u;
  v12 = 1;
  v14 = (char *)(v5 + 144);
  result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_((uint64_t)&v14);
  if (v12 != -1)
    return ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v14, &v11);
  return result;
}

uint64_t WebCore::RenderStyle::setAccentColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::StyleRareInheritedData *v17;
  WTF *v18;
  void *v19;
  WebCore::RenderStyle *v20;
  const WebCore::StyleContentAlignmentData *v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  _QWORD v25[4];
  _QWORD *v26;

  v3 = this;
  v4 = *(_QWORD *)(this + 24);
  v5 = *(unsigned int *)(v4 + 152);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      goto LABEL_19;
  }
  else
  {
    v25[0] = &v22;
    this = ((uint64_t (*)(_QWORD *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v25, v4 + 144, a2);
    if ((this & 1) == 0)
      goto LABEL_19;
  }
  if ((*(_BYTE *)(v4 + 238) & 0x80) == 0)
    return this;
LABEL_19:
  v12 = *(_DWORD **)(v3 + 24);
  if (*v12 == 1)
  {
    v13 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v13, (uint64_t)v12);
    v17 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v13;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v17, v16);
        WTF::fastFree(v18, v19);
        v13 = *(_QWORD *)(v3 + 24);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
  }
  v25[0] = &v24;
  v25[1] = &v24;
  v25[2] = &v24;
  v25[3] = &v24;
  v14 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v14 == -1)
  {
    v20 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderStyle::setAlignContent(v20, v21);
  }
  v26 = v25;
  this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v14])(&v22, &v26, a2);
  v15 = *(unsigned int *)(v13 + 152);
  if ((_DWORD)v15 != -1)
  {
    if (v23 == -1)
    {
      this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v15])(v25, v13 + 144);
      *(_DWORD *)(v13 + 152) = -1;
      goto LABEL_27;
    }
LABEL_26:
    v25[0] = v13 + 144;
    this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                  + v23))(v25, v13 + 144, &v22);
LABEL_27:
    if (v23 != -1)
      this = ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(v25, &v22);
    goto LABEL_29;
  }
  if (v23 != -1)
    goto LABEL_26;
LABEL_29:
  *(_DWORD *)(v13 + 236) &= ~0x800000u;
  return this;
}

uint64_t WebCore::RenderStyle::setAlignContent(WebCore::RenderStyle *this, const WebCore::StyleContentAlignmentData *a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (((*(_WORD *)a2 ^ *(_WORD *)(*(_QWORD *)(v3 + 32) + 120)) & 0x1FF) != 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_WORD *)(result + 120) = *(_WORD *)a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setAlignItems(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*a2 ^ *(_BYTE *)(*(_QWORD *)(v3 + 32) + 124)) & 0x7F) != 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_BYTE *)(result + 124) = *a2;
  }
  return result;
}

uint64_t WebCore::Style::BuilderConverter::convertSelfOrDefaultAlignmentData(uint64_t a1)
{
  int v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  v1 = *(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16);
  if ((v1 & 0x3F800) == 0x1B800)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16)) & 0x3F87F;
    if (v4 && v5 == 80)
    {
      LODWORD(v4) = *(unsigned __int16 *)(v4 + 8);
      switch((_DWORD)v4)
      {
        case 0x3A5:
          return 5;
        case 0x3A3:
          return 4;
        case 0x20A:
          return WebCore::fromCSSValue<WebCore::ItemPosition>(*(_QWORD *)(a1 + 16)) | 0x10;
      }
    }
    else
    {
      if (v5 != 80)
      {
        v6 = 0;
        return WebCore::fromCSSValue<WebCore::ItemPosition>(*(_QWORD *)(a1 + 16)) | v6;
      }
      LOWORD(v4) = *(_WORD *)(v4 + 8);
    }
    if ((unsigned __int16)v4 == 521)
      v6 = 64;
    else
      v6 = 32 * ((unsigned __int16)v4 == 520);
    return WebCore::fromCSSValue<WebCore::ItemPosition>(*(_QWORD *)(a1 + 16)) | v6;
  }
  if ((v1 & 0x3F87F) != 0x50)
    return 0;
  v3 = *(unsigned __int16 *)(a1 + 8);
  if (v3 == 260)
    return 6;
  result = 0;
  if (v3 > 500)
  {
    switch(v3)
    {
      case 511:
        result = 11;
        break;
      case 512:
        result = 12;
        break;
      case 513:
      case 514:
      case 515:
      case 516:
        return result;
      case 517:
        return 5;
      case 518:
        result = 9;
        break;
      case 519:
        result = 10;
        break;
      default:
        if (v3 == 501)
          result = 8;
        else
          result = 0;
        break;
    }
    return result;
  }
  if (v3 > 499)
    return 7;
  if (v3 > 258)
  {
    if (v3 == 499)
      return 3;
    if (v3 == 259)
      return 14;
    return v3 == 394;
  }
  switch(v3)
  {
    case 248:
      return 4;
    case 90:
      return 2;
    case 258:
      return 13;
  }
  return result;
}

uint64_t WebCore::fromCSSValue<WebCore::ItemPosition>(uint64_t a1)
{
  uint64_t result;
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (((*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) & 0x3F87F) != 0x50)
    return 0;
  v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 == 260)
    return 6;
  if (*(unsigned __int16 *)(a1 + 8) <= 0x1F4u)
  {
    if (*(unsigned __int16 *)(a1 + 8) <= 0x1F3u)
    {
      if (*(unsigned __int16 *)(a1 + 8) <= 0x102u)
      {
        v3 = 4;
        if (v2 == 258)
          v6 = 13;
        else
          v6 = 0;
        if (v2 == 90)
          v4 = 2;
        else
          v4 = v6;
        v5 = v2 == 248;
      }
      else
      {
        v3 = 3;
        if (v2 == 259)
          v4 = 14;
        else
          v4 = v2 == 394;
        v5 = v2 == 499;
      }
      if (v5)
        return v3;
      else
        return v4;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    result = 0;
    switch(v2)
    {
      case 511:
        result = 11;
        break;
      case 512:
        result = 12;
        break;
      case 513:
      case 514:
      case 515:
      case 516:
        return result;
      case 517:
        result = 5;
        break;
      case 518:
        result = 9;
        break;
      case 519:
        result = 10;
        break;
      default:
        if (v2 == 501)
          result = 8;
        else
          result = 0;
        break;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setAlignSelf(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*a2 ^ *(_BYTE *)(*(_QWORD *)(v3 + 32) + 125)) & 0x7F) != 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_BYTE *)(result + 125) = *a2;
  }
  return result;
}

WebCore::SVGRenderStyle *WebCore::RenderStyle::accessSVGStyle(WebCore::RenderStyle *this)
{
  WebCore::SVGRenderStyle *result;
  void *v3;
  WebCore::SVGRenderStyle *v4;
  WTF *v5;
  void *v6;
  WebCore::SVGRenderStyle *v7;

  result = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
  if (*(_DWORD *)result != 1)
  {
    WebCore::SVGRenderStyle::copy(result, &v7);
    result = v7;
    v4 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v7;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v4, v3);
        WTF::fastFree(v5, v6);
        return (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  void *v22;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = result[3];
  v5 = (WTF::StringImpl *)a2[3];
  if (v4 > v5)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, v5);
LABEL_4:
    v7 = *(WTF::StringImpl ***)a2;
    v8 = v2[3];
    v9 = *(WTF::StringImpl ***)v2;
    if ((_DWORD)v8)
    {
      v10 = 8 * v8;
      do
      {
        v11 = *v7;
        if (*v7)
          *(_DWORD *)v11 += 2;
        v12 = *v9;
        *v9 = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v5);
          else
            *(_DWORD *)v12 -= 2;
        }
        ++v7;
        ++v9;
        v10 -= 8;
      }
      while (v10);
      v7 = *(WTF::StringImpl ***)a2;
      v13 = v2[3];
      v9 = *(WTF::StringImpl ***)v2;
    }
    else
    {
      v13 = 0;
    }
    v14 = a2[3];
    if (v13 != (_DWORD)v14)
    {
      v15 = &v9[v13];
      v16 = &v7[v13];
      v17 = 8 * v14 - 8 * v13;
      do
      {
        v18 = *v16;
        if (*v16)
          *(_DWORD *)v18 += 2;
        *v15++ = v18;
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    v2[3] = v14;
    return v2;
  }
  v6 = result[2];
  if (v5 <= v6)
    goto LABEL_4;
  if (v6)
  {
    if (v4)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, 0);
    result = *(unsigned int **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  v19 = a2[3];
  if (v2[2] >= v19)
    goto LABEL_4;
  if (!(v19 >> 29))
  {
    v20 = *(WTF::StringImpl ***)v2;
    v21 = v2[3];
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    v2[2] = v19;
    *(_QWORD *)v2 = v22;
    memcpy(v22, v20, 8 * v21);
    if (v20)
    {
      if (*(WTF::StringImpl ***)v2 == v20)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
      }
      WTF::fastFree((WTF *)v20, v5);
    }
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::AnimationList::append(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (uint64_t *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 16))
  {
    result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = result;
    v5 = *(unsigned int *)(a1 + 20);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 20) = v5 + 1;
  return result;
}

WebCore::Animation **WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(WebCore::Animation **a1, WTF::StringImpl *a2)
{
  WebCore::Animation *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Animation::~Animation(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 + 1 > a2)
    v8 = v7 + 1;
  else
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (!(v8 >> 29))
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v4 + 8) = v8;
    *(_QWORD *)v4 = v10;
    memcpy(v10, v5, 8 * v9);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v11);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 + 1 > a2)
    v4 = v3 + 1;
  else
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *result;
      v7 = *((unsigned int *)result + 3);
      v8 = (void *)WTF::fastMalloc((WTF *)(8 * v4));
      *((_DWORD *)v5 + 2) = v4;
      *v5 = v8;
      result = (void **)memcpy(v8, v6, 8 * v7);
      if (v6)
      {
        if (*v5 == v6)
        {
          *v5 = 0;
          *((_DWORD *)v5 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v6, v9);
      }
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9Animation15TimelineKeywordEN3WTF10AtomStringENSB_3RefINS8_14ScrollTimelineENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SC_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9Animation15TimelineKeywordEN3WTF10AtomStringENSB_3RefINS8_14ScrollTimelineENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SC_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore9Animation15TimelineKeywordEN3WTF10AtomStringENSB_3RefINS8_14ScrollTimelineENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSA_SC_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3347C40[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore9Animation15TimelineKeywordEN3WTF10AtomStringENSB_3RefINS8_14ScrollTimelineENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSA_SC_SJ_EEERKS10_EEEDcSS_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      if (*a3)
        *v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3347C40[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore9Animation15TimelineKeywordEN3WTF10AtomStringENSB_3RefINS8_14ScrollTimelineENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSA_SC_SJ_EEERKS10_EEEDcSS_DpT0_(_DWORD *result, _DWORD **a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E3347C40[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(*a3 + 8) + 1;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = (_DWORD *)*a3;
  v6[2] = *(_DWORD *)(*a3 + 8) + 1;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore9Animation15TimelineKeywordEN3WTF10AtomStringENSB_3RefINS8_14ScrollTimelineENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSA_SC_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore9Animation15TimelineKeywordEN3WTF10AtomStringENSB_3RefINS8_14ScrollTimelineENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSA_SC_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore9Animation15TimelineKeywordEN3WTF10AtomStringENSB_3RefINS8_14ScrollTimelineENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSA_SC_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(*a3 + 8) + 1;
  *a2 = v3;
}

uint64_t WebCore::RenderStyle::setAspectRatioType(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(_DWORD *)(*(_QWORD *)(v3 + 32) + 148) >> 5) & 3) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_DWORD *)(result + 148) = *(_DWORD *)(result + 148) & 0xFFFFFF9F | (32 * (v4 & 3));
  }
  return result;
}

uint64_t WebCore::RenderStyle::setAspectRatio(WebCore::RenderStyle *this, double a2, double a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WebCore::StyleMiscNonInheritedData *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v6 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  v7 = *(_QWORD *)(v6 + 32);
  if (*(double *)(v7 + 104) != a2 || *(double *)(v7 + 112) != a3)
  {
    v8 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v8 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v13);
      result = v13;
      v10 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v8 + 4);
      *((_QWORD *)v8 + 4) = v13;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          result = *((_QWORD *)v8 + 4);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    *(double *)(result + 104) = a2;
    *(double *)(result + 112) = a3;
  }
  return result;
}

WebCore::FillLayer *WTF::DataRef<WebCore::FillLayer>::access(const WebCore::FillLayer **a1)
{
  const WebCore::FillLayer *v1;
  WebCore::FillLayer *result;
  WebCore::FillLayer *v4;
  WebCore::FillLayer *v5;
  WTF *v6;
  void *v7;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return *a1;
  v4 = (WebCore::FillLayer *)WTF::fastMalloc((WTF *)0x40);
  result = WebCore::FillLayer::FillLayer(v4, v1);
  v5 = *a1;
  *a1 = result;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::FillLayer::~FillLayer(v5);
      WTF::fastFree(v6, v7);
      return *a1;
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return result;
}

WebCore::FillLayer **WTF::RefPtr<WebCore::FillLayer,WTF::RawPtrTraits<WebCore::FillLayer>,WTF::DefaultRefDerefTraits<WebCore::FillLayer>>::operator=(WebCore::FillLayer **a1, WebCore::FillLayer **a2)
{
  WebCore::FillLayer *v3;
  WebCore::FillLayer *v4;
  WTF *v6;
  void *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::FillLayer::~FillLayer(v4);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

WebCore::StyleVisitedLinkColorData *WTF::DataRef<WebCore::StyleVisitedLinkColorData>::access(WebCore::StyleVisitedLinkColorData **a1)
{
  WebCore::StyleVisitedLinkColorData *result;
  WebCore::StyleVisitedLinkColorData *v3;
  WTF *v4;
  void *v5;
  WebCore::StyleVisitedLinkColorData *v6;

  result = *a1;
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleVisitedLinkColorData::copy(result, &v6);
    result = v6;
    v3 = *a1;
    *a1 = v6;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v3);
        WTF::fastFree(v4, v5);
        return *a1;
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
  }
  return result;
}

uint64_t WebCore::FillLayer::setXPosition(uint64_t result, int *a2)
{
  int *v2;
  unsigned int v3;
  int v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;

  v2 = (int *)(result + 24);
  if ((int *)(result + 24) != a2)
  {
    if (*(_BYTE *)(result + 28) == 11)
    {
      v7 = result;
      v8 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = (int *)(result + 24);
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v6;
      result = v7;
      a2 = v8;
    }
    v3 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(result + 28) = v3;
    *(_BYTE *)(result + 29) = *((_BYTE *)a2 + 5);
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        goto LABEL_6;
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
        goto LABEL_6;
      }
      if (v3 != 11)
        goto LABEL_6;
      v5 = *a2;
      *a2 = 0;
    }
    else
    {
      v4 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(result + 30) = v4;
      if (v4)
      {
        *v2 = *a2;
LABEL_6:
        *((_BYTE *)a2 + 4) = 0;
        goto LABEL_7;
      }
      v5 = *a2;
    }
    *v2 = v5;
    goto LABEL_6;
  }
LABEL_7:
  *(_DWORD *)(result + 60) |= 0x1000u;
  return result;
}

uint64_t WebCore::FillLayer::setYPosition(uint64_t result, int *a2)
{
  int *v2;
  unsigned int v3;
  int v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;

  v2 = (int *)(result + 32);
  if ((int *)(result + 32) != a2)
  {
    if (*(_BYTE *)(result + 36) == 11)
    {
      v7 = result;
      v8 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = (int *)(result + 32);
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v6;
      result = v7;
      a2 = v8;
    }
    v3 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(result + 36) = v3;
    *(_BYTE *)(result + 37) = *((_BYTE *)a2 + 5);
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        goto LABEL_6;
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
        goto LABEL_6;
      }
      if (v3 != 11)
        goto LABEL_6;
      v5 = *a2;
      *a2 = 0;
    }
    else
    {
      v4 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(result + 38) = v4;
      if (v4)
      {
        *v2 = *a2;
LABEL_6:
        *((_BYTE *)a2 + 4) = 0;
        goto LABEL_7;
      }
      v5 = *a2;
    }
    *v2 = v5;
    goto LABEL_6;
  }
LABEL_7:
  *(_DWORD *)(result + 60) |= 0x2000u;
  return result;
}

int *WebCore::FillLayer::size@<X0>(WebCore::FillLayer *this@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  int v5;
  int *result;
  int v7;

  *(_BYTE *)a2 = (*((unsigned __int16 *)this + 29) >> 11) & 3;
  *(_DWORD *)(a2 + 4) = 0;
  v4 = (int *)(a2 + 4);
  *(_BYTE *)(a2 + 10) = 0;
  v5 = *((unsigned __int8 *)this + 44);
  *(_BYTE *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 9) = *((_BYTE *)this + 45);
  if ((v5 - 2) >= 9)
  {
    if (v5 == 11)
    {
      *v4 = *((_DWORD *)this + 10);
      WebCore::Length::ref(v4);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 10) = *((_BYTE *)this + 46);
    *v4 = *((_DWORD *)this + 10);
  }
  *(_DWORD *)(a2 + 12) = 0;
  result = (int *)(a2 + 12);
  *(_BYTE *)(a2 + 18) = 0;
  v7 = *((unsigned __int8 *)this + 52);
  *(_BYTE *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 17) = *((_BYTE *)this + 53);
  if ((v7 - 2) >= 9)
  {
    if (v7 == 11)
    {
      *result = *((_DWORD *)this + 12);
      return WebCore::Length::ref(result);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 18) = *((_BYTE *)this + 54);
    *result = *((_DWORD *)this + 12);
  }
  return result;
}

int *WebCore::FillLayer::setSize(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *result;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int *v10;
  int *v11;

  v3 = (int *)(a2 + 4);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a1 + 58) & 0xE7FF | ((*(_BYTE *)a2 & 3) << 11);
  result = (int *)(a1 + 40);
  if (result != (int *)(a2 + 4))
  {
    if (*(_BYTE *)(a1 + 44) == 11)
    {
      v11 = (int *)(a2 + 4);
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v10 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = v10;
      v3 = v11;
    }
    v6 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(a1 + 44) = v6;
    *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 9);
    if (v6 <= 0xD)
    {
      v7 = 1 << v6;
      if ((v7 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 10);
        *result = *v3;
      }
      else if ((v7 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *v3;
        WebCore::Length::ref(result);
      }
    }
    result = (int *)(a1 + 48);
    if (*(_BYTE *)(a1 + 52) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = (int *)(a1 + 48);
    }
    v8 = *(unsigned __int8 *)(a2 + 16);
    *(_BYTE *)(a1 + 52) = v8;
    *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 17);
    if (v8 <= 0xD)
    {
      v9 = 1 << v8;
      if ((v9 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 18);
        *result = *(_DWORD *)(a2 + 12);
      }
      else if ((v9 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *(_DWORD *)(a2 + 12);
        return WebCore::Length::ref(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::Style::ApplyPropertyBorderImageModifier<(WebCore::Style::BorderImageType)0,(WebCore::Style::BorderImageModifierType)0>::setValue(uint64_t a1, WebCore::NinePieceImage::Data **a2)
{
  WTF **v3;
  uint64_t result;
  WebCore::NinePieceImage::Data *v5;
  WTF *v6;
  WebCore::NinePieceImage::Data **v7;

  v3 = (WTF **)(a1 + 8);
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 200);
  v5 = *a2;
  if ((WebCore::NinePieceImage::Data *)result != v5)
  {
    result = WebCore::NinePieceImage::Data::operator==(result, (uint64_t)v5);
    if ((result & 1) == 0)
    {
      v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
      v7 = (WebCore::NinePieceImage::Data **)WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v6 + 3);
      return (uint64_t)WebCore::NinePieceImage::operator=(v7 + 25, *a2);
    }
  }
  return result;
}

WebCore::NinePieceImage::Data **WTF::Ref<WebCore::NinePieceImage::Data,WTF::RawPtrTraits<WebCore::NinePieceImage::Data>,WTF::DefaultRefDerefTraits<WebCore::NinePieceImage::Data>>::operator=(WebCore::NinePieceImage::Data **a1, WebCore::NinePieceImage::Data **a2)
{
  WebCore::NinePieceImage::Data *v3;
  WebCore::NinePieceImage::Data *v4;
  WTF *v6;
  void *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::NinePieceImage::Data::~Data(v4);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

_DWORD *WTF::DataRef<WebCore::StyleSurroundData>::access(uint64_t *a1)
{
  uint64_t v1;
  _DWORD *result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WebCore::NinePieceImage::Data *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return (_DWORD *)*a1;
  v4 = WTF::fastMalloc((WTF *)0x110);
  result = (_DWORD *)WebCore::StyleSurroundData::StyleSurroundData(v4, v1);
  v6 = *a1;
  *a1 = (uint64_t)result;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      if (*(_BYTE *)(v6 + 268) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 264));
      }
      if (*(_BYTE *)(v6 + 260) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 256));
      }
      if (*(_BYTE *)(v6 + 252) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 248));
      }
      if (*(_BYTE *)(v6 + 244) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 240));
      }
      if (*(_BYTE *)(v6 + 236) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 232));
      }
      if (*(_BYTE *)(v6 + 228) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 224));
      }
      if (*(_BYTE *)(v6 + 220) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 216));
      }
      if (*(_BYTE *)(v6 + 212) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 208));
      }
      v7 = *(WebCore::NinePieceImage::Data **)(v6 + 200);
      *(_QWORD *)(v6 + 200) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v7);
          WTF::fastFree(v12, v13);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      v8 = *(unsigned int *)(v6 + 184);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v14, v6 + 176);
      *(_DWORD *)(v6 + 184) = -1;
      v9 = *(unsigned int *)(v6 + 160);
      if ((_DWORD)v9 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v9])(&v15, v6 + 152);
      *(_DWORD *)(v6 + 160) = -1;
      v10 = *(unsigned int *)(v6 + 136);
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v16, v6 + 128);
      *(_DWORD *)(v6 + 136) = -1;
      v11 = *(unsigned int *)(v6 + 112);
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v11])(&v17, v6 + 104);
      *(_DWORD *)(v6 + 112) = -1;
      if (*(_BYTE *)(v6 + 100) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 96));
      }
      if (*(_BYTE *)(v6 + 92) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 88));
      }
      if (*(_BYTE *)(v6 + 84) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 80));
      }
      if (*(_BYTE *)(v6 + 76) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 72));
      }
      if (*(_BYTE *)(v6 + 68) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 64));
      }
      if (*(_BYTE *)(v6 + 60) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 56));
      }
      if (*(_BYTE *)(v6 + 52) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 48));
      }
      if (*(_BYTE *)(v6 + 44) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 40));
      }
      if (*(_BYTE *)(v6 + 36) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 32));
      }
      if (*(_BYTE *)(v6 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 24));
      }
      if (*(_BYTE *)(v6 + 20) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 16));
      }
      if (*(_BYTE *)(v6 + 12) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 8));
      }
      WTF::fastFree((WTF *)v6, v5);
      return (_DWORD *)*a1;
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return result;
}

WebCore::NinePieceImage::Data **WebCore::NinePieceImage::operator=(WebCore::NinePieceImage::Data **a1, WebCore::NinePieceImage::Data *a2)
{
  WTF *v4;
  void *v5;
  WebCore::NinePieceImage::Data *v6;

  ++*(_DWORD *)a2;
  v6 = a2;
  WTF::Ref<WebCore::NinePieceImage::Data,WTF::RawPtrTraits<WebCore::NinePieceImage::Data>,WTF::DefaultRefDerefTraits<WebCore::NinePieceImage::Data>>::operator=(a1, &v6);
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::NinePieceImage::Data::~Data(v6);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return a1;
}

WTF **WebCore::RenderStyle::setBoxSizing(uint64_t a1, int a2)
{
  WTF **result;
  uint64_t v3;
  WTF *v5;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if (((((*(_BYTE *)(*(_QWORD *)(v3 + 8) + 68) & 4) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v5 + 1);
    if (a2)
      v6 = 4;
    else
      v6 = 0;
    *((_BYTE *)result + 68) = *((_BYTE *)result + 68) & 0xFB | v6;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setHasAutoCaretColor(WebCore::RenderStyle *this)
{
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::StyleRareInheritedData *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;

  v2 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v2 + 238) & 0x20) != 0)
  {
    v12 = 1;
    if (*(_DWORD *)(v2 + 120) == 1)
    {
      v14 = &v13;
      v3 = std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>();
      result = ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v14, &v11);
      if ((v3 & 1) != 0)
        return result;
    }
    else
    {
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v14, &v11);
    }
    v2 = *((_QWORD *)this + 3);
  }
  if (*(_DWORD *)v2 == 1)
  {
    v5 = v2;
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, v2);
    v8 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v5;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v8, v7);
        WTF::fastFree(v9, v10);
        v5 = *((_QWORD *)this + 3);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  *(_DWORD *)(v5 + 236) |= 0x200000u;
  v12 = 1;
  v14 = (char *)(v5 + 112);
  result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_((uint64_t)&v14);
  if (v12 != -1)
    return ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v14, &v11);
  return result;
}

uint64_t WebCore::RenderStyle::setHasVisitedLinkAutoCaretColor(WebCore::RenderStyle *this)
{
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::StyleRareInheritedData *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;

  v2 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v2 + 238) & 0x40) != 0)
  {
    v12 = 1;
    if (*(_DWORD *)(v2 + 136) == 1)
    {
      v14 = &v13;
      v3 = std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>();
      result = ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v14, &v11);
      if ((v3 & 1) != 0)
        return result;
    }
    else
    {
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v14, &v11);
    }
    v2 = *((_QWORD *)this + 3);
  }
  if (*(_DWORD *)v2 == 1)
  {
    v5 = v2;
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, v2);
    v8 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v5;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v8, v7);
        WTF::fastFree(v9, v10);
        v5 = *((_QWORD *)this + 3);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  *(_DWORD *)(v5 + 236) |= 0x400000u;
  v12 = 1;
  v14 = (char *)(v5 + 128);
  result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_((uint64_t)&v14);
  if (v12 != -1)
    return ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v14, &v11);
  return result;
}

uint64_t WebCore::RenderStyle::setCaretColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::StyleRareInheritedData *v17;
  WTF *v18;
  void *v19;
  WebCore::RenderStyle *v20;
  const WebCore::StyleColor *v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  _QWORD v25[4];
  _QWORD *v26;

  v3 = this;
  v4 = *(_QWORD *)(this + 24);
  v5 = *(unsigned int *)(v4 + 120);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v25[0] = &v22;
    this = ((uint64_t (*)(_QWORD *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v25, v4 + 112, a2);
    if ((this & 1) == 0)
      goto LABEL_18;
LABEL_33:
    if ((*(_BYTE *)(v4 + 238) & 0x20) == 0)
      return this;
    goto LABEL_18;
  }
  v10 = v6 == -1;
  if ((_DWORD)v5 == -1)
    v11 = v10;
  else
    v11 = v8;
  if (v11)
    goto LABEL_33;
LABEL_18:
  v12 = *(_DWORD **)(v3 + 24);
  if (*v12 == 1)
  {
    v13 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v13, (uint64_t)v12);
    v17 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v13;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v17, v16);
        WTF::fastFree(v18, v19);
        v13 = *(_QWORD *)(v3 + 24);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
  }
  v25[0] = &v24;
  v25[1] = &v24;
  v25[2] = &v24;
  v25[3] = &v24;
  v14 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v14 != -1)
  {
    v26 = v25;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v14])(&v22, &v26, a2);
    v15 = *(unsigned int *)(v13 + 120);
    if ((_DWORD)v15 == -1)
    {
      if (v23 == -1)
      {
LABEL_26:
        *(_DWORD *)(v13 + 236) &= ~0x200000u;
        return this;
      }
    }
    else if (v23 == -1)
    {
      this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v15])(v25, v13 + 112);
      *(_DWORD *)(v13 + 120) = -1;
LABEL_24:
      if (v23 != -1)
        this = ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(v25, &v22);
      goto LABEL_26;
    }
    v25[0] = v13 + 112;
    this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                  + v23))(v25, v13 + 112, &v22);
    goto LABEL_24;
  }
  v20 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderStyle::setVisitedLinkCaretColor(v20, v21);
}

uint64_t WebCore::RenderStyle::setVisitedLinkCaretColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::StyleRareInheritedData *v17;
  WTF *v18;
  void *v19;
  int v20;
  WebCore::CSSValue *v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  _QWORD v25[4];
  _QWORD *v26;

  v3 = this;
  v4 = *(_QWORD *)(this + 24);
  v5 = *(unsigned int *)(v4 + 136);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v25[0] = &v22;
    this = ((uint64_t (*)(_QWORD *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v25, v4 + 128, a2);
    if ((this & 1) == 0)
      goto LABEL_18;
LABEL_33:
    if ((*(_BYTE *)(v4 + 238) & 0x40) == 0)
      return this;
    goto LABEL_18;
  }
  v10 = v6 == -1;
  if ((_DWORD)v5 == -1)
    v11 = v10;
  else
    v11 = v8;
  if (v11)
    goto LABEL_33;
LABEL_18:
  v12 = *(_DWORD **)(v3 + 24);
  if (*v12 == 1)
  {
    v13 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v13, (uint64_t)v12);
    v17 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v13;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v17, v16);
        WTF::fastFree(v18, v19);
        v13 = *(_QWORD *)(v3 + 24);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
  }
  v25[0] = &v24;
  v25[1] = &v24;
  v25[2] = &v24;
  v25[3] = &v24;
  v14 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v14 != -1)
  {
    v26 = v25;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v14])(&v22, &v26, a2);
    v15 = *(unsigned int *)(v13 + 136);
    if ((_DWORD)v15 == -1)
    {
      if (v23 == -1)
      {
LABEL_26:
        *(_DWORD *)(v13 + 236) &= ~0x400000u;
        return this;
      }
    }
    else if (v23 == -1)
    {
      this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v15])(v25, v13 + 128);
      *(_DWORD *)(v13 + 136) = -1;
LABEL_24:
      if (v23 != -1)
        this = ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(v25, &v22);
      goto LABEL_26;
    }
    v25[0] = v13 + 128;
    this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                  + v23))(v25, v13 + 128, &v22);
    goto LABEL_24;
  }
  v20 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::CSSPrimitiveValue::convertToLength<13>(v20, v21);
}

void WebCore::CSSPrimitiveValue::convertToLength<13>(uint64_t a1, WebCore::CSSValue *this, _QWORD *a3)
{
  void *v6;
  BOOL v7;
  WTF *v8;
  WTF *v9;
  __n128 v10;
  float v11;
  WTF *v12[2];
  WTF *v13[2];
  __int16 v14;

  v14 = 0;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)v13 = 0u;
  WebCore::CSSValue::collectComputedStyleDependencies((uint64_t)this, (WebCore::ComputedStyleDependencies *)v12);
  v7 = (!HIDWORD(v13[1]) || a3[1]) && (!HIDWORD(v12[1]) || *a3) && (!(_BYTE)v14 || a3[4]) && (!HIBYTE(v14) || a3[3]);
  v8 = v13[0];
  if (v13[0])
  {
    v13[0] = 0;
    LODWORD(v13[1]) = 0;
    WTF::fastFree(v8, v6);
  }
  v9 = v12[0];
  if (v12[0])
  {
    v12[0] = 0;
    LODWORD(v12[1]) = 0;
    WTF::fastFree(v9, v6);
  }
  if (!v7)
    goto LABEL_18;
  if (WebCore::CSSPrimitiveValue::isLength(this))
  {
    WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>((uint64_t)this, (uint64_t)a3, a1, v10);
    return;
  }
  if (WebCore::CSSPrimitiveValue::primitiveType(this) == 3)
  {
    v11 = WebCore::CSSPrimitiveValue::doubleValue(this);
    *(float *)a1 = v11;
    *(_WORD *)(a1 + 4) = 3;
    *(_BYTE *)(a1 + 6) = 1;
    return;
  }
  if ((*((_WORD *)this + 2) & 0x7F) == 0x50 && *((_WORD *)this + 4) == 394)
  {
    *(_DWORD *)(a1 + 3) = 0;
    *(_DWORD *)a1 = 0;
  }
  else
  {
LABEL_18:
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 13;
    *(_BYTE *)(a1 + 6) = 0;
  }
}

uint64_t WebCore::Style::BuilderConverter::convertPathOperation(uint64_t this, const WTF::String **a2, WTF::StringImpl **a3, double a4, double a5, float a6)
{
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  double v11;
  double v12;
  float v13;
  const WTF::String *v14;
  const WebCore::TreeScope *v15;
  uint64_t v16;
  BOOL v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::Node *v22;
  WTF::StringImpl *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  WebCore::CSSValue **v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::Node *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl **v34;
  WebCore::Node *v35;
  uint64_t v36;
  WebCore::Node *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;

  v8 = this;
  v9 = (*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800;
  if (v9)
  {
    if (v9 == 98304)
      return WebCore::Style::BuilderConverter::convertRayPathOperation(this, (WebCore::Style::BuilderState *)a2, (const WebCore::CSSValue *)a3);
    *(_QWORD *)this = 0;
    LOBYTE(v39) = 0;
    v32 = (WebCore::Node *)this;
    v33 = (WTF::StringImpl *)a2;
    v34 = &v39;
    if (v9 == 120832)
    {
      v24 = *((_DWORD *)a3 + 2);
      if (v24)
      {
        v25 = 0;
        v26 = 0;
        do
        {
          if (v25 > 3)
          {
            if (*((_DWORD *)a3 + 2) <= v25)
            {
              this = 148;
              __break(0xC471u);
              return this;
            }
            v27 = (WebCore::CSSValue **)((char *)a3[6] + 8 * (v26 - 4));
          }
          else
          {
            v27 = &a3[v26 + 2];
          }
          this = (uint64_t)WebCore::Style::BuilderConverter::convertPathOperation(WebCore::Style::BuilderState &,WebCore::CSSValue const&)::{lambda(WebCore::CSSValue const&)#1}::operator()((uint64_t **)&v32, *v27);
          v25 = v26 + 1;
          v26 = (v26 + 1);
        }
        while (v24 != v25);
      }
    }
    else
    {
      this = (uint64_t)WebCore::Style::BuilderConverter::convertPathOperation(WebCore::Style::BuilderState &,WebCore::CSSValue const&)::{lambda(WebCore::CSSValue const&)#1}::operator()((uint64_t **)&v32, (WebCore::CSSValue *)a3);
    }
    v28 = (char)v39;
    if (*(_QWORD *)v8)
    {
      *(_BYTE *)(*(_QWORD *)v8 + 16) = (_BYTE)v39;
    }
    else
    {
      v31 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)(v31 + 8) = 0x200000001;
      *(_BYTE *)(v31 + 16) = v28;
      *(_QWORD *)v31 = off_1E3347CE0;
      this = *(_QWORD *)v8;
      *(_QWORD *)v8 = v31;
      if (this)
      {
        if (*(_DWORD *)(this + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 8);
      }
    }
  }
  else if ((*((_WORD *)a3 + 2) & 0x7F) == 0x15)
  {
    v10 = a3[1];
    if (v10)
      *(_DWORD *)v10 += 2;
    v39 = v10;
    WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)&v39, a2[3], &v38, a4, a5, a6);
    v14 = a2[6];
    if (v14)
    {
      v15 = (const WebCore::TreeScope *)*((_QWORD *)v14 + 5);
      v16 = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
        v17 = (*(_WORD *)(*(_QWORD *)v15 + 28) & 0x80) == 0;
      else
        v17 = 1;
      if (!v17 && !*(_BYTE *)(v16 + 193))
      {
        v29 = *(_QWORD *)(v16 + 200);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 8);
          if (v30)
          {
            if (*(_WORD *)(*(_QWORD *)(v30 + 96) + 10) == 242)
              v15 = (const WebCore::TreeScope *)*((_QWORD *)v15 + 2);
          }
        }
      }
    }
    else
    {
      v15 = (const WTF::String *)((char *)a2[3] + 96);
    }
    v37 = 0;
    WebCore::SVGURIReference::targetElementFromIRIString((WTF::StringImpl *)&v39, v15, &v37, (uint64_t *)&v32, v11, v12, v13);
    v18 = v37;
    v37 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    v19 = v32;
    if (v32)
    {
      if ((*((_WORD *)v32 + 14) & 0x20) != 0)
        *((_DWORD *)v32 + 6) += 2;
      else
        v19 = 0;
    }
    v35 = v19;
    WebCore::ReferencePathOperation::create((_DWORD **)&v39, (_DWORD **)&v38, (uint64_t *)&v35, &v36);
    *(_QWORD *)v8 = v36;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v21 = v33;
    v33 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v32;
    v32 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    v23 = v38;
    v38 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v20);
      else
        *(_DWORD *)v23 -= 2;
    }
    this = (uint64_t)v39;
    v39 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

uint64_t WebCore::Style::BuilderConverter::convertRayPathOperation(uint64_t this, WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  _QWORD *v5;
  char v6;
  const WebCore::CSSValue *v7;
  WebCore::CSSPrimitiveValue *v8;
  float v9;
  char v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float v18;
  char v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned __int8 v22;
  char v23;
  unsigned __int8 v24;
  int v25;
  unsigned __int8 v26;
  char v27;
  unsigned __int8 v28;

  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0x18000)
  {
    __break(0xC471u);
    JUMPOUT(0x1951D6D00);
  }
  v5 = (_QWORD *)this;
  v6 = 1;
  switch(*((_WORD *)a3 + 8))
  {
    case 0x2BA:
      v6 = 0;
      goto LABEL_8;
    case 0x2BB:
      goto LABEL_8;
    case 0x2BC:
      v6 = 2;
      goto LABEL_8;
    case 0x2BD:
      v6 = 3;
      goto LABEL_8;
    default:
      if (*((_WORD *)a3 + 8) != 1005)
      {
        *(_QWORD *)this = 0;
        return this;
      }
      v6 = 4;
LABEL_8:
      v7 = (const WebCore::CSSValue *)*((_QWORD *)a3 + 3);
      if (v7)
      {
        *(_DWORD *)v7 += 2;
        v8 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)a3 + 1);
        *(_DWORD *)v8 += 2;
        v9 = WebCore::CSSPrimitiveValue::computeDegrees(v8);
        v10 = *((_BYTE *)a3 + 18);
        WebCore::Style::BuilderConverter::convertPosition((WebCore::Style::BuilderConverter *)&v21, a2, v7);
        this = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)(this + 8) = 0x300000001;
        *(_BYTE *)(this + 16) = 0;
        *(_QWORD *)this = off_1E341EAC8;
        *(float *)(this + 20) = v9;
        *(_BYTE *)(this + 24) = v6;
        *(_BYTE *)(this + 25) = v10;
        *(_DWORD *)(this + 28) = 0;
        *(_BYTE *)(this + 34) = 0;
        v12 = v22;
        *(_BYTE *)(this + 32) = v22;
        *(_BYTE *)(this + 33) = v23;
        if ((v12 - 2) >= 9)
        {
          if (v12 != 11)
          {
LABEL_12:
            v22 = 0;
            *(_DWORD *)(this + 36) = 0;
            *(_BYTE *)(this + 42) = 0;
            v14 = v26;
            *(_BYTE *)(this + 40) = v26;
            *(_BYTE *)(this + 41) = v27;
            if ((v14 - 2) >= 9)
            {
              if (v14 != 11)
                goto LABEL_15;
            }
            else
            {
              v15 = v28;
              *(_BYTE *)(this + 42) = v28;
              if (v15)
              {
                *(_DWORD *)(this + 36) = v25;
LABEL_15:
                *v5 = this;
                if (*(_DWORD *)v8 == 2)
                  this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v11);
                else
                  *(_DWORD *)v8 -= 2;
                v16 = *(_DWORD *)v7 - 2;
                if (*(_DWORD *)v7 != 2)
                  goto LABEL_19;
                return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v11);
              }
            }
            *(_DWORD *)(this + 36) = v25;
            goto LABEL_15;
          }
          v17 = v21;
          v21 = 0;
        }
        else
        {
          v13 = v24;
          *(_BYTE *)(this + 34) = v24;
          if (v13)
          {
            *(_DWORD *)(this + 28) = v21;
            goto LABEL_12;
          }
          v17 = v21;
        }
        *(_DWORD *)(this + 28) = v17;
        goto LABEL_12;
      }
      v7 = (const WebCore::CSSValue *)*((_QWORD *)a3 + 1);
      *(_DWORD *)v7 += 2;
      v18 = WebCore::CSSPrimitiveValue::computeDegrees(v7);
      v19 = *((_BYTE *)a3 + 18);
      this = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)(this + 8) = 0x300000001;
      *(_BYTE *)(this + 16) = 0;
      *(_QWORD *)this = off_1E341EAC8;
      *(float *)(this + 20) = v18;
      *(_BYTE *)(this + 24) = v6;
      *(_BYTE *)(this + 25) = v19;
      *(_DWORD *)(this + 28) = 0;
      *(_DWORD *)(this + 31) = 0;
      *(_DWORD *)(this + 36) = 0;
      *(_DWORD *)(this + 39) = 0;
      *v5 = this;
      v16 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 != 2)
      {
LABEL_19:
        *(_DWORD *)v7 = v16;
        return this;
      }
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v20);
  }
}

_DWORD *WebCore::Style::BuilderConverter::convertPathOperation(WebCore::Style::BuilderState &,WebCore::CSSValue const&)::{lambda(WebCore::CSSValue const&)#1}::operator()(uint64_t **a1, WebCore::CSSValue *a2)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *result;
  _DWORD *v8;

  v3 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
  if ((v3 & 0x3F800) != 0)
  {
    if ((v3 & 0x3F800) == 0x18000)
    {
      WebCore::Style::BuilderConverter::convertRayPathOperation((uint64_t)&v8, (WebCore::Style::BuilderState *)a1[1], a2);
      result = (_DWORD *)**a1;
      **a1 = (uint64_t)v8;
      if (!result)
        return result;
      goto LABEL_11;
    }
  }
  else if ((*((_WORD *)a2 + 2) & 0x7F) == 0x50)
  {
    result = (_DWORD *)WebCore::fromCSSValue<WebCore::CSSBoxType>((uint64_t)a2);
    *(_BYTE *)a1[2] = (_BYTE)result;
    return result;
  }
  WebCore::basicShapeForValue((WebCore *)(a1[1] + 8), a2, *(float *)(*(_QWORD *)(a1[1][2] + 24) + 184), (uint64_t *)&v8);
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = 0x100000001;
  *(_BYTE *)(v4 + 16) = 0;
  *(_QWORD *)v4 = off_1E3347C98;
  v5 = v8;
  v8 = 0;
  *(_QWORD *)(v4 + 24) = v5;
  v6 = (_DWORD *)**a1;
  **a1 = v4;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  result = v8;
  v8 = 0;
  if (result)
  {
LABEL_11:
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

int *WebCore::Style::BuilderConverter::convertPosition(WebCore::Style::BuilderConverter *this, WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  int *result;
  int v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  char v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  unsigned int v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  unsigned int v25;
  unsigned __int8 v26;
  char v27;
  char v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  char v32;

  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0x1B800)
    return WebCore::RenderStyle::initialObjectPosition((uint64_t)this);
  WebCore::Style::BuilderConverter::convertPositionComponent<(WebCore::CSSValueID)258,(WebCore::CSSValueID)259>(a2, *((_QWORD *)a3 + 1), (uint64_t)&v29);
  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0x1B800)
  {
    __break(0xC471u);
    JUMPOUT(0x1951D7164);
  }
  result = (int *)WebCore::Style::BuilderConverter::convertPositionComponent<(WebCore::CSSValueID)254,(WebCore::CSSValueID)255>(a2, *((_QWORD *)a3 + 2), (uint64_t)&v25);
  v24 = 0;
  v7 = v30;
  v22 = v30;
  v8 = v31;
  v23 = v31;
  v9 = v30 - 2;
  if (v9 >= 9)
  {
    if (v30 == 11)
    {
      v21 = v29;
      v11 = v29;
      result = WebCore::Length::ref((int *)&v21);
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
  }
  else
  {
    v10 = v32 != 0;
    v11 = v29;
  }
  v20 = 0;
  v12 = v26;
  v18 = v26;
  v13 = v27;
  v19 = v27;
  v14 = v26 - 2;
  if (v14 >= 9)
  {
    if (v26 == 11)
    {
      v17 = v25;
      v16 = v25;
      result = WebCore::Length::ref((int *)&v17);
      v15 = 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
  else
  {
    v15 = v28;
    if (v28)
      v15 = 1;
    v16 = v25;
  }
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 6) = 0;
  *((_BYTE *)this + 4) = v7;
  *((_BYTE *)this + 5) = v8;
  if (v9 < 9)
  {
    *((_BYTE *)this + 6) = v10;
LABEL_17:
    *(_DWORD *)this = v11;
    goto LABEL_18;
  }
  if (v7 == 11)
    goto LABEL_17;
LABEL_18:
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 14) = 0;
  *((_BYTE *)this + 12) = v12;
  *((_BYTE *)this + 13) = v13;
  if (v14 >= 9)
  {
    if (v12 != 11)
      goto LABEL_21;
  }
  else
  {
    *((_BYTE *)this + 14) = v15;
  }
  *((_DWORD *)this + 2) = v16;
LABEL_21:
  if (v26 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v25);
  }
  if (v30 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v29);
  }
  return result;
}

WebCore::Style::BuilderConverter *WebCore::Style::BuilderConverter::convertPositionComponent<(WebCore::CSSValueID)258,(WebCore::CSSValueID)259>@<X0>(WebCore::Style::BuilderConverter *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  char v14;
  unsigned int v15[2];

  memset(v15, 0, 7);
  v4 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v4 & 0x3F800) == 0)
  {
    if ((v4 & 0x3F87F) != 0x50)
    {
LABEL_3:
      v5 = 0;
      goto LABEL_9;
    }
    v10 = *(unsigned __int16 *)(a2 + 8);
    switch(v10)
    {
      case 260:
        v11 = 50;
        break;
      case 259:
        v11 = 100;
        break;
      case 258:
        *(_DWORD *)a3 = 0;
LABEL_33:
        *(_WORD *)(a3 + 4) = 3;
        *(_BYTE *)(a3 + 6) = 0;
        return result;
      default:
        goto LABEL_3;
    }
    *(_DWORD *)a3 = v11;
    goto LABEL_33;
  }
  if ((v4 & 0x3F800) != 0x1B800)
    goto LABEL_3;
  v5 = 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 && ((*(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16)) & 0x3F87F) == 0x50)
    v5 = ((*(unsigned __int16 *)(v6 + 8) - 255) & 0xFFFB) == 0;
  a2 = *(_QWORD *)(a2 + 16);
LABEL_9:
  result = WebCore::Style::BuilderConverter::convertLength(result, (const WebCore::Style::BuilderState *)a2, (uint64_t)&v12);
  v7 = v13;
  v8 = HIBYTE(v13);
  LOWORD(v15[1]) = v13;
  if (v13 - 2 < 9)
  {
    BYTE2(v15[1]) = v14;
    if (v14)
    {
      v15[0] = v12;
      goto LABEL_12;
    }
LABEL_38:
    v15[0] = v12;
    goto LABEL_12;
  }
  if (v13 > 0xDu)
    goto LABEL_12;
  if (((1 << v13) & 0x3003) != 0)
  {
    v15[0] = 0;
    goto LABEL_12;
  }
  if (v13 == 11)
    goto LABEL_38;
LABEL_12:
  if (!v5)
    goto LABEL_17;
  result = (WebCore::Style::BuilderConverter *)WebCore::Style::BuilderConverter::convertTo100PercentMinusLength(v15, (uint64_t)&v12);
  if (LOBYTE(v15[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (WebCore::Style::BuilderConverter *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15[0]);
  }
  v7 = v13;
  v8 = HIBYTE(v13);
  if (v13 - 2 < 9)
  {
    BYTE2(v15[1]) = v14;
    if (v14)
    {
      v15[0] = v12;
      goto LABEL_17;
    }
LABEL_40:
    v15[0] = v12;
    goto LABEL_17;
  }
  if (v13 > 0xDu)
    goto LABEL_17;
  if (((1 << v13) & 0x3003) != 0)
  {
    v15[0] = 0;
    goto LABEL_17;
  }
  if (v13 == 11)
    goto LABEL_40;
LABEL_17:
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_BYTE *)(a3 + 4) = v7;
  *(_BYTE *)(a3 + 5) = v8;
  if ((v7 - 2) < 9)
  {
    v9 = BYTE2(v15[1]);
    *(_BYTE *)(a3 + 6) = BYTE2(v15[1]);
    if (v9)
    {
      *(_DWORD *)a3 = v15[0];
      return result;
    }
LABEL_29:
    *(_DWORD *)a3 = v15[0];
    return result;
  }
  if (v7 == 11)
    goto LABEL_29;
  return result;
}

WebCore::Style::BuilderConverter *WebCore::Style::BuilderConverter::convertPositionComponent<(WebCore::CSSValueID)254,(WebCore::CSSValueID)255>@<X0>(WebCore::Style::BuilderConverter *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  char v14;
  unsigned int v15[2];

  memset(v15, 0, 7);
  v4 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v4 & 0x3F800) == 0)
  {
    if ((v4 & 0x3F87F) != 0x50)
    {
LABEL_3:
      v5 = 0;
      goto LABEL_9;
    }
    v10 = *(unsigned __int16 *)(a2 + 8);
    switch(v10)
    {
      case 260:
        v11 = 50;
        break;
      case 255:
        v11 = 100;
        break;
      case 254:
        *(_DWORD *)a3 = 0;
LABEL_33:
        *(_WORD *)(a3 + 4) = 3;
        *(_BYTE *)(a3 + 6) = 0;
        return result;
      default:
        goto LABEL_3;
    }
    *(_DWORD *)a3 = v11;
    goto LABEL_33;
  }
  if ((v4 & 0x3F800) != 0x1B800)
    goto LABEL_3;
  v5 = 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 && ((*(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16)) & 0x3F87F) == 0x50)
    v5 = ((*(unsigned __int16 *)(v6 + 8) - 255) & 0xFFFB) == 0;
  a2 = *(_QWORD *)(a2 + 16);
LABEL_9:
  result = WebCore::Style::BuilderConverter::convertLength(result, (const WebCore::Style::BuilderState *)a2, (uint64_t)&v12);
  v7 = v13;
  v8 = HIBYTE(v13);
  LOWORD(v15[1]) = v13;
  if (v13 - 2 < 9)
  {
    BYTE2(v15[1]) = v14;
    if (v14)
    {
      v15[0] = v12;
      goto LABEL_12;
    }
LABEL_38:
    v15[0] = v12;
    goto LABEL_12;
  }
  if (v13 > 0xDu)
    goto LABEL_12;
  if (((1 << v13) & 0x3003) != 0)
  {
    v15[0] = 0;
    goto LABEL_12;
  }
  if (v13 == 11)
    goto LABEL_38;
LABEL_12:
  if (!v5)
    goto LABEL_17;
  result = (WebCore::Style::BuilderConverter *)WebCore::Style::BuilderConverter::convertTo100PercentMinusLength(v15, (uint64_t)&v12);
  if (LOBYTE(v15[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (WebCore::Style::BuilderConverter *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15[0]);
  }
  v7 = v13;
  v8 = HIBYTE(v13);
  if (v13 - 2 < 9)
  {
    BYTE2(v15[1]) = v14;
    if (v14)
    {
      v15[0] = v12;
      goto LABEL_17;
    }
LABEL_40:
    v15[0] = v12;
    goto LABEL_17;
  }
  if (v13 > 0xDu)
    goto LABEL_17;
  if (((1 << v13) & 0x3003) != 0)
  {
    v15[0] = 0;
    goto LABEL_17;
  }
  if (v13 == 11)
    goto LABEL_40;
LABEL_17:
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_BYTE *)(a3 + 4) = v7;
  *(_BYTE *)(a3 + 5) = v8;
  if ((v7 - 2) < 9)
  {
    v9 = BYTE2(v15[1]);
    *(_BYTE *)(a3 + 6) = BYTE2(v15[1]);
    if (v9)
    {
      *(_DWORD *)a3 = v15[0];
      return result;
    }
LABEL_29:
    *(_DWORD *)a3 = v15[0];
    return result;
  }
  if (v7 == 11)
    goto LABEL_29;
  return result;
}

_BYTE *WebCore::Style::BuilderConverter::convertTo100PercentMinusLength@<X0>(_BYTE *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  unsigned int v11;
  char v12;
  void *v13;
  int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;

  v3 = this;
  if (this[4] == 3)
  {
    v5 = *(float *)this;
    if (!this[6])
      v5 = (float)*(int *)this;
    *(float *)a2 = 100.0 - v5;
    *(_WORD *)(a2 + 4) = 3;
    *(_BYTE *)(a2 + 6) = 1;
    return this;
  }
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_BYTE *)(v6 + 8) = 2;
  *(_QWORD *)v6 = off_1E34088B0;
  *(_WORD *)(v6 + 16) = 3;
  *(_BYTE *)(v6 + 18) = 0;
  *(_DWORD *)(v6 + 12) = 100;
  v7 = WTF::fastMalloc((WTF *)0x18);
  v8 = v7;
  BYTE4(v21) = v3[4];
  v9 = BYTE4(v21);
  v10 = v3[5];
  *(_WORD *)((char *)&v21 + 5) = v10;
  v11 = BYTE4(v21) - 2;
  if (v11 >= 9)
  {
    if (BYTE4(v21) == 11)
    {
      v13 = (void *)*(unsigned int *)v3;
      LODWORD(v21) = (_DWORD)v13;
      WebCore::Length::ref((int *)&v21);
      *(_BYTE *)(v8 + 8) = 2;
      *(_QWORD *)v8 = off_1E34088B0;
      v14 = (int *)(v8 + 12);
      *(_BYTE *)(v8 + 18) = 0;
      *(_BYTE *)(v8 + 16) = 11;
      *(_BYTE *)(v8 + 17) = v10;
      goto LABEL_23;
    }
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v12 = v3[6];
    v13 = (void *)*(unsigned int *)v3;
    if (v12)
      v12 = 1;
  }
  *(_BYTE *)(v7 + 8) = 2;
  *(_QWORD *)v7 = off_1E34088B0;
  *(_DWORD *)(v7 + 12) = 0;
  v14 = (int *)(v7 + 12);
  *(_BYTE *)(v8 + 18) = 0;
  *(_BYTE *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 17) = v10;
  if (v11 < 9)
  {
    *(_BYTE *)(v8 + 18) = v12;
    *(_DWORD *)(v8 + 12) = (_DWORD)v13;
    goto LABEL_13;
  }
  if (v9 == 11)
  {
LABEL_23:
    *v14 = (int)v13;
    WebCore::Length::ref(v14);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v13);
  }
LABEL_13:
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = v6;
  v15[1] = v8;
  v16 = WTF::fastMalloc((WTF *)0x28);
  *(_BYTE *)(v16 + 8) = 3;
  *(_QWORD *)v16 = off_1E34088E8;
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = 0x200000002;
  *(_WORD *)(v16 + 32) = 2349;
  v17 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v16;
  *(_BYTE *)(v17 + 16) = 0;
  v21 = (WTF *)v17;
  this = (_BYTE *)WebCore::Length::Length(a2, &v21);
  v19 = v21;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      v20 = *((_QWORD *)v21 + 1);
      *((_QWORD *)v21 + 1) = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      return (_BYTE *)WTF::fastFree(v19, v18);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  return this;
}

uint64_t WebCore::PathOperation::canBlend()
{
  return 0;
}

void WebCore::PathOperation::blend(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::fromCSSValue<WebCore::CSSBoxType>(uint64_t a1)
{
  unsigned int v2;

  if (((*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) & 0x3F87F) != 0x50)
    return 0;
  v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 <= 0x269)
  {
    switch(v2)
    {
      case 0x256u:
        return 2;
      case 0x258u:
        return 4;
      case 0x25Au:
        return 3;
      default:
        return 0;
    }
  }
  else if (*(unsigned __int16 *)(a1 + 8) > 0x26Bu)
  {
    if (v2 == 620)
    {
      return 7;
    }
    else
    {
      if (v2 != 861)
        return 0;
      return 5;
    }
  }
  else
  {
    if (v2 != 618)
    {
      if (v2 == 619)
        return 6;
      return 0;
    }
    return 1;
  }
}

void WebCore::ShapePathOperation::~ShapePathOperation(WebCore::ShapePathOperation *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

void WebCore::ShapePathOperation::~ShapePathOperation(WebCore::ShapePathOperation *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

double WebCore::ShapePathOperation::clone@<D0>(WebCore::ShapePathOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  double result;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x20);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 16))(&v7);
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v4 + 8) = 0x100000001;
  *(_BYTE *)(v4 + 16) = v5;
  *(_QWORD *)v4 = off_1E3347C98;
  *(_QWORD *)(v4 + 24) = v7;
  *a2 = v4;
  return result;
}

uint64_t WebCore::ShapePathOperation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_DWORD *)(a2 + 12) != *(_DWORD *)(a1 + 12) || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == *(_QWORD *)(a2 + 24))
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
}

uint64_t WebCore::ShapePathOperation::canBlend(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 12) == 1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  else
    return 0;
}

uint64_t WebCore::ShapePathOperation::blend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (*(_DWORD *)(a2 + 12) == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a2 + 24) + 56))(&v5, *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)(result + 8) = 0x100000001;
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = off_1E3347C98;
    *(_QWORD *)(result + 24) = v5;
    *a3 = result;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

double WebCore::BoxPathOperation::clone@<D0>(WebCore::BoxPathOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)(v4 + 8) = 0x200000001;
  *(_BYTE *)(v4 + 16) = v5;
  *(_QWORD *)v4 = off_1E3347CE0;
  *a2 = v4;
  return result;
}

BOOL WebCore::BoxPathOperation::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 12) == *(_DWORD *)(a1 + 12) && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

void WebCore::BoxPathOperation::getPath(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  double v4;
  unsigned int v5;
  uint64_t v6;
  _OWORD v7[3];
  _BYTE v8[8];
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 80))
  {
    v10 = 0;
    v3 = *(_OWORD *)(a1 + 32);
    v7[0] = *(_OWORD *)(a1 + 16);
    v7[1] = v3;
    v7[2] = *(_OWORD *)(a1 + 48);
    *(float32x2_t *)&v7[0] = vneg_f32(*(float32x2_t *)(a1 + 64));
    v4 = WebCore::Path::addRoundedRect((WebCore::Path *)v8, (WebCore::FloatRect *)v7, 1);
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 64) = -1;
    v5 = v10;
    if (v10 == -1)
    {
      *(_BYTE *)(a2 + 72) = 1;
    }
    else
    {
      ((void (*)(_OWORD *, double))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal_0[v10])(v7, v4);
      *(_DWORD *)(a2 + 64) = v5;
      v6 = v10;
      *(_BYTE *)(a2 + 72) = 1;
      if ((_DWORD)v6 != -1)
        ((void (*)(_OWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v6])(v7, &v9);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
  }
}

uint64_t WebCore::RenderStyle::setHasAutoColumnCount(WebCore::RenderStyle *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  char v16;

  v2 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24);
  if ((*(_BYTE *)(v3 + 56) & 2) == 0 || *(_WORD *)(v3 + 8) != 1)
  {
    v4 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v5 = *((_QWORD *)v4 + 4);
    if (*(_DWORD *)v5 != 1)
    {
      v6 = v4;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v4 + 4), &v15);
      v5 = v15;
      v8 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v6 + 4);
      *((_QWORD *)v6 + 4) = v15;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v7);
          WTF::fastFree(v13, v14);
          v5 = *((_QWORD *)v6 + 4);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    result = *(_QWORD *)(v5 + 24);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)result, &v15);
      result = v15;
      v10 = *(unsigned int **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = v15;
      if (v10)
      {
        if (*v10 == 1)
        {
          v11 = v10[12];
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v11])(&v16, v10 + 10);
          v10[12] = -1;
          v12 = v10[6];
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v16, v10 + 4);
          v10[6] = -1;
          WTF::fastFree((WTF *)v10, v9);
          result = *(_QWORD *)(v5 + 24);
        }
        else
        {
          --*v10;
        }
      }
    }
    *(_BYTE *)(result + 56) |= 2u;
    *(_WORD *)(result + 8) = 1;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setColumnCount(uint64_t this, unsigned int a2)
{
  int v2;
  WTF **v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  void *v10;
  unsigned int *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WebCore::StyleMiscNonInheritedData *v16;
  void *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  char v28;

  if (a2 <= 1)
    v2 = 1;
  else
    v2 = a2;
  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 24);
  if (*(unsigned __int16 *)(v4 + 8) != v2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v27);
      v6 = v27;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v27;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v23, v24);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    this = *(_QWORD *)(v6 + 24);
    if (*(_DWORD *)this != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)this, &v27);
      this = v27;
      v11 = *(unsigned int **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v27;
      if (v11)
      {
        if (*v11 == 1)
        {
          v19 = v11[12];
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(&v28, v11 + 10);
          v11[12] = -1;
          v20 = v11[6];
          if ((_DWORD)v20 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(&v28, v11 + 4);
          v11[6] = -1;
          WTF::fastFree((WTF *)v11, v10);
          this = *(_QWORD *)(v6 + 24);
        }
        else
        {
          --*v11;
        }
      }
    }
    *(_WORD *)(this + 8) = v2;
    v4 = *(_QWORD *)(*((_QWORD *)*v3 + 4) + 24);
  }
  if ((*(_BYTE *)(v4 + 56) & 2) != 0)
  {
    v12 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v13 = *((_QWORD *)v12 + 4);
    if (*(_DWORD *)v13 != 1)
    {
      v14 = v12;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v12 + 4), &v27);
      v13 = v27;
      v16 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v14 + 4);
      *((_QWORD *)v14 + 4) = v27;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v16, v15);
          WTF::fastFree(v25, v26);
          v13 = *((_QWORD *)v14 + 4);
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
    }
    this = *(_QWORD *)(v13 + 24);
    if (*(_DWORD *)this != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)this, &v27);
      this = v27;
      v18 = *(unsigned int **)(v13 + 24);
      *(_QWORD *)(v13 + 24) = v27;
      if (v18)
      {
        if (*v18 == 1)
        {
          v21 = v18[12];
          if ((_DWORD)v21 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v28, v18 + 10);
          v18[12] = -1;
          v22 = v18[6];
          if ((_DWORD)v22 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v28, v18 + 4);
          v18[6] = -1;
          WTF::fastFree((WTF *)v18, v17);
          this = *(_QWORD *)(v13 + 24);
        }
        else
        {
          --*v18;
        }
      }
    }
    *(_BYTE *)(this + 56) &= ~2u;
  }
  return this;
}

uint64_t WebCore::RenderStyle::setColumnFill(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  void *v10;
  unsigned int *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 24) + 56) & 4) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v17);
      v6 = v17;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v17;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v15, v16);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    result = *(_QWORD *)(v6 + 24);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)result, &v17);
      result = v17;
      v11 = *(unsigned int **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v17;
      if (v11)
      {
        if (*v11 == 1)
        {
          v13 = v11[12];
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v18, v11 + 10);
          v11[12] = -1;
          v14 = v11[6];
          if ((_DWORD)v14 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v18, v11 + 4);
          v11[6] = -1;
          WTF::fastFree((WTF *)v11, v10);
          result = *(_QWORD *)(v6 + 24);
        }
        else
        {
          --*v11;
        }
      }
    }
    if (a2)
      v12 = 4;
    else
      v12 = 0;
    *(_BYTE *)(result + 56) = *(_BYTE *)(result + 56) & 0xFB | v12;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setColumnGap(uint64_t result, float *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  int v13;
  WTF *v14;
  void *v15;
  int v16;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  if (v4[376] == *(unsigned __int8 *)a2)
  {
    v5 = v4[384];
    if (v5 == *((unsigned __int8 *)a2 + 8) && (v4[385] != 0) == (*((_BYTE *)a2 + 9) != 0))
    {
      if (v5 == 13)
        return result;
      if (v5 == 11)
      {
        result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 380), (const WebCore::Length *)(a2 + 1));
        if ((result & 1) != 0)
          return result;
      }
      else
      {
        v6 = *((float *)v4 + 95);
        if (!v4[386])
          v6 = (float)SLODWORD(v6);
        v7 = a2[1];
        if (!*((_BYTE *)a2 + 10))
          v7 = (float)SLODWORD(v7);
        if (v6 == v7)
          return result;
      }
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_QWORD *)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v14, v15);
        v10 = *(_QWORD *)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  *(_BYTE *)(v10 + 376) = *(_BYTE *)a2;
  if ((float *)(v10 + 376) != a2)
  {
    if (*(_BYTE *)(v10 + 384) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v10 + 380));
    }
    v12 = *((unsigned __int8 *)a2 + 8);
    *(_BYTE *)(v10 + 384) = v12;
    *(_BYTE *)(v10 + 385) = *((_BYTE *)a2 + 9);
    if (v12 - 2 >= 9)
    {
      if (v12 > 0xD)
        goto LABEL_20;
      if (((1 << v12) & 0x3003) != 0)
      {
        *(_DWORD *)(v10 + 380) = 0;
        goto LABEL_20;
      }
      if (v12 != 11)
        goto LABEL_20;
      v16 = *((_DWORD *)a2 + 1);
      a2[1] = 0.0;
    }
    else
    {
      v13 = *((unsigned __int8 *)a2 + 10);
      *(_BYTE *)(v10 + 386) = v13;
      if (v13)
      {
        *(float *)(v10 + 380) = a2[1];
LABEL_20:
        *((_BYTE *)a2 + 8) = 0;
        return result;
      }
      v16 = *((_DWORD *)a2 + 1);
    }
    *(_DWORD *)(v10 + 380) = v16;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setColumnRuleColor(WTF **this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  WTF *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v12;
  BOOL v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WebCore::StyleMiscNonInheritedData *v19;
  _DWORD *v20;
  void *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  WebCore::RenderStyle *v31;
  const WebCore::StyleColor *v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  uint64_t v36[4];
  uint64_t *v37;

  v3 = this + 1;
  v4 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  result = *((_QWORD *)v4 + 4);
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, v36);
    result = v36[0];
    v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v4 + 4);
    *((_QWORD *)v4 + 4) = v36[0];
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
        WTF::fastFree(v25, v26);
        result = *((_QWORD *)v4 + 4);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  v8 = *(_QWORD *)(result + 24);
  v9 = *(unsigned int *)(v8 + 24);
  v10 = *((_DWORD *)a2 + 2);
  v12 = v10 == (_DWORD)v9 && v10 != -1;
  if ((_DWORD)v9 == -1 || !v12)
  {
    if ((_DWORD)v9 == -1)
      v14 = v10 == -1;
    else
      v14 = v12;
    if (!v14)
    {
LABEL_22:
      v15 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
      v16 = *((_QWORD *)v15 + 4);
      if (*(_DWORD *)v16 != 1)
      {
        v17 = v15;
        WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v15 + 4), v36);
        v16 = v36[0];
        v19 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v17 + 4);
        *((_QWORD *)v17 + 4) = v36[0];
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
          {
            WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v19, v18);
            WTF::fastFree(v29, v30);
            v16 = *((_QWORD *)v17 + 4);
          }
          else
          {
            --*(_DWORD *)v19;
          }
        }
      }
      v20 = *(_DWORD **)(v16 + 24);
      if (*v20 != 1)
      {
        WebCore::StyleMultiColData::copy(*(WebCore::StyleMultiColData **)(v16 + 24), v36);
        v20 = (_DWORD *)v36[0];
        v22 = *(unsigned int **)(v16 + 24);
        *(_QWORD *)(v16 + 24) = v36[0];
        if (v22)
        {
          if (*v22 == 1)
          {
            v27 = v22[12];
            if ((_DWORD)v27 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(&v33, v22 + 10);
            v22[12] = -1;
            v28 = v22[6];
            if ((_DWORD)v28 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v28])(&v33, v22 + 4);
            v22[6] = -1;
            WTF::fastFree((WTF *)v22, v21);
            v20 = *(_DWORD **)(v16 + 24);
          }
          else
          {
            --*v22;
          }
        }
      }
      v36[0] = (uint64_t)&v35;
      v36[1] = (uint64_t)&v35;
      v36[2] = (uint64_t)&v35;
      v36[3] = (uint64_t)&v35;
      v23 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v23 == -1)
      {
        v31 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setVisitedLinkColumnRuleColor(v31, v32);
      }
      v37 = v36;
      result = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v23])(&v33, &v37, a2);
      v24 = v20[6];
      if ((_DWORD)v24 == -1)
      {
        if (v34 == -1)
          return result;
      }
      else if (v34 == -1)
      {
        result = ((uint64_t (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(v36, v20 + 4);
        v20[6] = -1;
        goto LABEL_36;
      }
      v36[0] = (uint64_t)(v20 + 4);
      result = ((uint64_t (*)(uint64_t *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                        + v34))(v36, v20 + 4, &v33);
LABEL_36:
      if (v34 != -1)
        return ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v34])(v36, &v33);
    }
  }
  else
  {
    v36[0] = (uint64_t)&v33;
    result = ((uint64_t (*)(uint64_t *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v9])(v36, v8 + 16, a2);
    if ((result & 1) == 0)
      goto LABEL_22;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setVisitedLinkColumnRuleColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WebCore::StyleMiscNonInheritedData *v15;
  _DWORD *v16;
  void *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29[4];
  uint64_t *v30;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 24);
  v5 = *(unsigned int *)(v4 + 48);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    if ((_DWORD)v5 == -1)
      v10 = v6 == -1;
    else
      v10 = v8;
    if (!v10)
    {
LABEL_18:
      v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
      v12 = *((_QWORD *)v11 + 4);
      if (*(_DWORD *)v12 != 1)
      {
        v13 = v11;
        WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v11 + 4), v29);
        v12 = v29[0];
        v15 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v13 + 4);
        *((_QWORD *)v13 + 4) = v29[0];
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
          {
            WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v15, v14);
            WTF::fastFree(v23, v24);
            v12 = *((_QWORD *)v13 + 4);
          }
          else
          {
            --*(_DWORD *)v15;
          }
        }
      }
      v16 = *(_DWORD **)(v12 + 24);
      if (*v16 != 1)
      {
        WebCore::StyleMultiColData::copy(*(WebCore::StyleMultiColData **)(v12 + 24), v29);
        v16 = (_DWORD *)v29[0];
        v18 = *(unsigned int **)(v12 + 24);
        *(_QWORD *)(v12 + 24) = v29[0];
        if (v18)
        {
          if (*v18 == 1)
          {
            v21 = v18[12];
            if ((_DWORD)v21 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v26, v18 + 10);
            v18[12] = -1;
            v22 = v18[6];
            if ((_DWORD)v22 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v26, v18 + 4);
            v18[6] = -1;
            WTF::fastFree((WTF *)v18, v17);
            v16 = *(_DWORD **)(v12 + 24);
          }
          else
          {
            --*v18;
          }
        }
      }
      v29[0] = (uint64_t)&v28;
      v29[1] = (uint64_t)&v28;
      v29[2] = (uint64_t)&v28;
      v29[3] = (uint64_t)&v28;
      v19 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v19 == -1)
      {
        v25 = std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setColumnRuleStyle(v25);
      }
      v30 = v29;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v19])(&v26, &v30, a2);
      v20 = v16[12];
      if ((_DWORD)v20 == -1)
      {
        if (v27 == -1)
          return this;
      }
      else if (v27 == -1)
      {
        this = ((uint64_t (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(v29, v16 + 10);
        v16[12] = -1;
        goto LABEL_32;
      }
      v29[0] = (uint64_t)(v16 + 10);
      this = ((uint64_t (*)(uint64_t *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                      + v27))(v29, v16 + 10, &v26);
LABEL_32:
      if (v27 != -1)
        return ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(v29, &v26);
    }
  }
  else
  {
    v29[0] = (uint64_t)&v26;
    this = ((uint64_t (*)(uint64_t *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v29, v4 + 40, a2);
    if ((this & 1) == 0)
      goto LABEL_18;
  }
  return this;
}

uint64_t WebCore::RenderStyle::setColumnRuleStyle(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  char v17;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 24) + 36) & 0xF) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v16);
      v6 = v16;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v16;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v14, v15);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    result = *(_QWORD *)(v6 + 24);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)result, &v16);
      result = v16;
      v11 = *(unsigned int **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v16;
      if (v11)
      {
        if (*v11 == 1)
        {
          v12 = v11[12];
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v17, v11 + 10);
          v11[12] = -1;
          v13 = v11[6];
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v17, v11 + 4);
          v11[6] = -1;
          WTF::fastFree((WTF *)v11, v10);
          result = *(_QWORD *)(v6 + 24);
        }
        else
        {
          --*v11;
        }
      }
    }
    *(_BYTE *)(result + 36) = *(_BYTE *)(result + 36) & 0xF0 | v4 & 0xF;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setColumnRuleWidth(WebCore::RenderStyle *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v3;
  float v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  char v17;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  v4 = (float)a2;
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 24) + 32) != (float)a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v16);
      v6 = v16;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v16;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v14, v15);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    result = *(_QWORD *)(v6 + 24);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)result, &v16);
      result = v16;
      v11 = *(unsigned int **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v16;
      if (v11)
      {
        if (*v11 == 1)
        {
          v12 = v11[12];
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v17, v11 + 10);
          v11[12] = -1;
          v13 = v11[6];
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v17, v11 + 4);
          v11[6] = -1;
          WTF::fastFree((WTF *)v11, v10);
          result = *(_QWORD *)(v6 + 24);
        }
        else
        {
          --*v11;
        }
      }
    }
    *(float *)(result + 32) = v4;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setColumnSpan(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  void *v10;
  unsigned int *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 24) + 56) & 8) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v17);
      v6 = v17;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v17;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v15, v16);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    result = *(_QWORD *)(v6 + 24);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)result, &v17);
      result = v17;
      v11 = *(unsigned int **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v17;
      if (v11)
      {
        if (*v11 == 1)
        {
          v13 = v11[12];
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v18, v11 + 10);
          v11[12] = -1;
          v14 = v11[6];
          if ((_DWORD)v14 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v18, v11 + 4);
          v11[6] = -1;
          WTF::fastFree((WTF *)v11, v10);
          result = *(_QWORD *)(v6 + 24);
        }
        else
        {
          --*v11;
        }
      }
    }
    if (a2)
      v12 = 8;
    else
      v12 = 0;
    *(_BYTE *)(result + 56) = *(_BYTE *)(result + 56) & 0xF7 | v12;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setHasAutoColumnWidth(WebCore::RenderStyle *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  char v16;

  v2 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24);
  if ((*(_BYTE *)(v3 + 56) & 1) == 0 || *(float *)(v3 + 4) != 0.0)
  {
    v4 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v5 = *((_QWORD *)v4 + 4);
    if (*(_DWORD *)v5 != 1)
    {
      v6 = v4;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v4 + 4), &v15);
      v5 = v15;
      v8 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v6 + 4);
      *((_QWORD *)v6 + 4) = v15;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v7);
          WTF::fastFree(v13, v14);
          v5 = *((_QWORD *)v6 + 4);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    result = *(_QWORD *)(v5 + 24);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)result, &v15);
      result = v15;
      v10 = *(unsigned int **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = v15;
      if (v10)
      {
        if (*v10 == 1)
        {
          v11 = v10[12];
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v11])(&v16, v10 + 10);
          v10[12] = -1;
          v12 = v10[6];
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v16, v10 + 4);
          v10[6] = -1;
          WTF::fastFree((WTF *)v10, v9);
          result = *(_QWORD *)(v5 + 24);
        }
        else
        {
          --*v10;
        }
      }
    }
    *(_BYTE *)(result + 56) |= 1u;
    *(_DWORD *)(result + 4) = 0;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setColumnWidth(WebCore::RenderStyle *this, float a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WebCore::StyleMiscNonInheritedData *v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  char v18;

  v4 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 24);
  if (*(float *)(v5 + 4) != a2 || (*(_BYTE *)(v5 + 56) & 1) != 0)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v7 = *((_QWORD *)v6 + 4);
    if (*(_DWORD *)v7 != 1)
    {
      v8 = v6;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v6 + 4), &v17);
      v7 = v17;
      v10 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v8 + 4);
      *((_QWORD *)v8 + 4) = v17;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v10, v9);
          WTF::fastFree(v15, v16);
          v7 = *((_QWORD *)v8 + 4);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    result = *(_QWORD *)(v7 + 24);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)result, &v17);
      result = v17;
      v12 = *(unsigned int **)(v7 + 24);
      *(_QWORD *)(v7 + 24) = v17;
      if (v12)
      {
        if (*v12 == 1)
        {
          v13 = v12[12];
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v18, v12 + 10);
          v12[12] = -1;
          v14 = v12[6];
          if ((_DWORD)v14 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v18, v12 + 4);
          v12[6] = -1;
          WTF::fastFree((WTF *)v12, v11);
          result = *(_QWORD *)(v7 + 24);
        }
        else
        {
          --*v12;
        }
      }
    }
    *(float *)(result + 4) = a2;
    *(_BYTE *)(result + 56) &= ~1u;
  }
  return result;
}

void WebCore::Style::BuilderConverter::convertComputedLength<float>(uint64_t a1, uint64_t a2, __n128 a3)
{
  if (((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F800) != 0)
    __break(0xC471u);
  else
    WebCore::CSSPrimitiveValue::computeLength<float>(a2, a1 + 64, a3);
}

WTF **WebCore::RenderStyle::setContain(uint64_t a1, unsigned __int8 a2)
{
  WTF **result;
  uint64_t v4;
  WTF *v5;

  v4 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(v4 + 40) + 462) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleRareNonInheritedData>::access((uint64_t *)v5 + 5);
    *((_BYTE *)result + 462) = a2;
  }
  return result;
}

uint64_t WebCore::Style::BuilderConverter::convertContain(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v10;
  int v11;

  v1 = *(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16);
  if ((v1 & 0x3F800) == 0x1D800)
  {
    v2 = *(_DWORD *)(a1 + 8);
    if (v2)
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
      do
      {
        if (v3 > 3)
        {
          if (v2 <= v3)
          {
LABEL_35:
            __break(0xC471u);
            JUMPOUT(0x1951D9150);
          }
          v6 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * (v5 - 4));
        }
        else
        {
          v6 = (uint64_t *)(a1 + 16 + 8 * v5);
        }
        v7 = *v6;
        if (((*(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16)) & 0x3F800) != 0)
          goto LABEL_35;
        if ((*(_WORD *)(v7 + 4) & 0x7F) == 0x50)
        {
          v8 = *(unsigned __int16 *)(v7 + 8);
          if (v8 <= 1000)
          {
            if (v8 == 923)
            {
              v4 = v4 | 0x10;
            }
            else if (v8 == 777)
            {
              v4 = v4 | 2;
            }
          }
          else
          {
            switch(v8)
            {
              case 1001:
                v4 = v4 | 4;
                break;
              case 1002:
                v4 = v4 | 1;
                break;
              case 1003:
                v4 = v4 | 8;
                break;
            }
          }
        }
        v3 = v5 + 1;
        v5 = (v5 + 1);
      }
      while (v2 != v3);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if ((v1 & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1951D9170);
    }
    v10 = v1 & 0x3F87F;
    v4 = 19;
    if (v10 == 80)
    {
      v11 = *(unsigned __int16 *)(a1 + 8);
      if (v11 == 574)
        LODWORD(v4) = 23;
      else
        LODWORD(v4) = 19;
      if (v11 == 6)
        return 0;
      else
        return v4;
    }
  }
  return v4;
}

WTF *WTF::Vector<WebCore::Style::ScopedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, unsigned int *a2)
{
  WTF *v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _DWORD *v32;

  v2 = result;
  if (a2 == (unsigned int *)result)
    return v2;
  v4 = *((unsigned int *)result + 3);
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = (WTF::StringImpl **)(*(_QWORD *)result + 16 * v5);
    v7 = 16 * v4 - 16 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    *((_DWORD *)v2 + 3) = v5;
    goto LABEL_34;
  }
  v9 = *((_DWORD *)result + 2);
  if (v5 <= v9)
    goto LABEL_33;
  if (v9)
  {
    if ((_DWORD)v4)
    {
      v10 = *(WTF::StringImpl ***)result;
      v11 = 16 * v4;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v10 += 2;
        v11 -= 16;
      }
      while (v11);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  v13 = a2[3];
  if (*((_DWORD *)v2 + 2) >= v13)
  {
LABEL_33:
    v5 = *((unsigned int *)v2 + 3);
LABEL_34:
    v22 = *(_QWORD *)a2;
    v23 = *(WTF **)v2;
    if ((_DWORD)v5)
    {
      v24 = v22 + 16 * v5;
      do
      {
        v25 = *(_DWORD **)v22;
        if (*(_QWORD *)v22)
          *v25 += 2;
        v26 = *(WTF::StringImpl **)v23;
        *(_QWORD *)v23 = v25;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v26 -= 2;
        }
        *((_WORD *)v23 + 4) = *(_WORD *)(v22 + 8);
        v22 += 16;
        v23 = (WTF *)((char *)v23 + 16);
      }
      while (v22 != v24);
      v22 = *(_QWORD *)a2;
      v27 = *((_DWORD *)v2 + 3);
      v23 = *(WTF **)v2;
    }
    else
    {
      v27 = 0;
    }
    v28 = a2[3];
    if (v27 != (_DWORD)v28)
    {
      v29 = v22 + 16 * v28;
      v30 = (char *)v23 + 16 * v27;
      v31 = v22 + 16 * v27;
      do
      {
        v32 = *(_DWORD **)v31;
        if (*(_QWORD *)v31)
          *v32 += 2;
        *(_QWORD *)v30 = v32;
        *((_WORD *)v30 + 4) = *(_WORD *)(v31 + 8);
        v31 += 16;
        v30 += 16;
      }
      while (v31 != v29);
      v27 = a2[3];
    }
    *((_DWORD *)v2 + 3) = v27;
    return v2;
  }
  if (!(v13 >> 28))
  {
    v14 = *(WTF **)v2;
    v15 = *((unsigned int *)v2 + 3);
    v16 = WTF::fastMalloc((WTF *)(16 * v13));
    *((_DWORD *)v2 + 2) = v13;
    *(_QWORD *)v2 = v16;
    if ((_DWORD)v15)
    {
      v17 = v16;
      v18 = (WTF *)((char *)v14 + 16 * v15);
      v19 = v14;
      do
      {
        v20 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        *(_QWORD *)v17 = v20;
        *(_WORD *)(v17 + 8) = *((_WORD *)v19 + 4);
        v21 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v21 -= 2;
        }
        v19 = (WTF *)((char *)v19 + 16);
        v17 += 16;
      }
      while (v19 != v18);
    }
    if (v14)
    {
      if (*(WTF **)v2 == v14)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v14, a2);
    }
    goto LABEL_33;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl **WebCore::Style::BuilderCustom::applyValueContent(WebCore::Style::BuilderState &,WebCore::CSSValue &)::{lambda(WebCore::CSSPrimitiveValue const&)#1}::operator()(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  WebCore::RenderStyle *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::Element *v15;
  _DWORD **Attribute;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  WTF::StringImpl **result;
  _DWORD **v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebCore::QualifiedName::QualifiedNameImpl *v32;

  v6 = *(WebCore::RenderStyle **)(*a2 + 16);
  if ((*((_BYTE *)v6 + 21) & 0xF8) != 0)
    v6 = *(WebCore::RenderStyle **)(*a2 + 32);
  WebCore::RenderStyle::setHasAttrContent(v6);
  v8 = 0;
  v9 = 1;
  v10 = (*(_WORD *)(a3 + 4) & 0x7Fu) - 20;
  if (v10 > 0x3C)
  {
    v12 = 0;
    goto LABEL_9;
  }
  if (((1 << ((*(_WORD *)(a3 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) == 0)
  {
    if (v10 == 60)
    {
      v29 = WebCore::nameString(*(unsigned __int16 *)(a3 + 8));
    }
    else
    {
      v30 = a3;
      v12 = 0;
      if (v10 != 59)
        goto LABEL_9;
      v29 = WebCore::nameString(*(unsigned __int16 *)(v30 + 8));
    }
    v8 = (WTF::StringImpl *)*v29;
    if (*v29)
      goto LABEL_6;
LABEL_39:
    v12 = 0;
    goto LABEL_9;
  }
  v8 = *(WTF::StringImpl **)(a3 + 8);
  if (!v8)
    goto LABEL_39;
LABEL_6:
  v11 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  if ((*((_BYTE *)v8 + 16) & 0x10) != 0)
  {
    *(_DWORD *)v8 = v11 + 4;
    v12 = v8;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(v8, v7);
    v12 = v32;
  }
  v9 = 0;
LABEL_9:
  v31 = v12;
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v32, MEMORY[0x1E0CBF2F8], &v31, MEMORY[0x1E0CBF2F8]);
  v31 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  if ((v9 & 1) == 0)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v13);
    else
      *(_DWORD *)v8 -= 2;
  }
  v14 = *a2;
  v15 = *(WebCore::Element **)(*a2 + 48);
  if (v15)
  {
    Attribute = (_DWORD **)WebCore::Element::getAttribute(v15, (const WebCore::QualifiedName *)&v32);
    v14 = *a2;
  }
  else
  {
    Attribute = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  if ((*(_QWORD *)(*(_QWORD *)(v14 + 16) + 16) & 0xF00000000000) == 0x300000000000)
  {
    v17 = (_QWORD *)((char *)v32 + 24);
    v18 = (uint64_t *)(v14 + 320);
    v19 = *(unsigned int *)(v14 + 332);
    if ((_DWORD)v19 == *(_DWORD *)(v14 + 328))
    {
      v24 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)v17);
      v19 = *(unsigned int *)(v14 + 332);
      v25 = *(_QWORD *)(v14 + 320);
      v26 = *v24;
      if (*v24)
        *v26 += 2;
      *(_QWORD *)(v25 + 8 * v19) = v26;
    }
    else
    {
      v20 = *v18;
      v21 = (_DWORD *)*v17;
      if (*v17)
        *v21 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(v14 + 332) = v19 + 1;
  }
  v22 = *Attribute;
  if (*Attribute || (v22 = (_DWORD *)*MEMORY[0x1E0CBF3B8]) != 0)
    *v22 += 2;
  *a1 = v22;
  result = (WTF::StringImpl **)v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v27, v28);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::Style::BuilderConverter::convertListStyleType(WebCore::Style::BuilderConverter *this, const WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  int v3;
  uint64_t result;
  WTF::AtomString *v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[10];

  v14[9] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
  if ((v3 & 0x3F800) != 0)
    goto LABEL_33;
  if ((*((_WORD *)a2 + 2) & 0x7F) == 0x50)
  {
    result = *((unsigned __int16 *)a2 + 4);
    v6 = (WebCore::Style::BuilderConverter *)((char *)this + 8);
    if ((_DWORD)result == 6)
    {
      *(_BYTE *)this = 2;
      v7 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *v7 += 2;
      *(_QWORD *)v6 = v7;
      return result;
    }
    *(_BYTE *)this = 0;
    v8 = (v3 & 0x7Fu) - 20;
    if (v8 > 0x3C)
      goto LABEL_32;
    if (((1 << v8) & 0x20008000000000BLL) != 0)
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      if (v9)
        goto LABEL_11;
    }
    else
    {
      if (v8 == 60)
      {
        v12 = WebCore::nameString(result);
      }
      else
      {
        if (v8 != 59)
          goto LABEL_32;
        v12 = WebCore::nameString(result);
      }
      v9 = (WTF::StringImpl *)*v12;
      if (*v12)
      {
LABEL_11:
        *(_DWORD *)v9 += 4;
        result = (uint64_t)WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>>(v9, v6);
        if (*(_DWORD *)v9 == 2)
          result = WTF::StringImpl::destroy(v9, v10);
        else
          *(_DWORD *)v9 -= 2;
        if (*(_QWORD *)v6)
        {
          if (*(_DWORD *)v9 == 2)
            return WTF::StringImpl::destroy(v9, v10);
          *(_DWORD *)v9 -= 2;
          return result;
        }
LABEL_33:
        __break(0xC471u);
        JUMPOUT(0x1951D9804);
      }
    }
LABEL_32:
    result = WTF::AtomStringImpl::add();
    if (*(_QWORD *)v6)
      return result;
    goto LABEL_33;
  }
  if ((*((_WORD *)a2 + 2) & 0x7F) == 0x3F)
  {
    *(_BYTE *)this = 0;
    WebCore::CSSPrimitiveValue::stringValue((uint64_t *)a2, v14);
    WTF::makeAtomString<WTF::String>(v14, (WebCore::Style::BuilderConverter *)((char *)this + 8));
    result = (uint64_t)v14[0];
    v14[0] = 0;
    if (!result)
      return result;
  }
  else
  {
    *(_BYTE *)this = 1;
    WebCore::CSSPrimitiveValue::stringValue((uint64_t *)a2, &v13);
    WTF::makeAtomString<WTF::String>(&v13, (WebCore::Style::BuilderConverter *)((char *)this + 8));
    result = (uint64_t)v13;
    v13 = 0;
    if (!result)
      return result;
  }
  if (*(_DWORD *)result == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
  *(_DWORD *)result -= 2;
  return result;
}

WTF::AtomString *WTF::AtomString::AtomString(WTF::AtomString *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;

  if (a2)
  {
    if ((*((_BYTE *)a2 + 16) & 0x10) != 0)
    {
      *(_DWORD *)a2 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(a2, a2);
      a2 = v4;
    }
  }
  *(_QWORD *)this = a2;
  return this;
}

WTF::StringImpl *WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>>@<X0>(WTF::StringImpl *result@<X0>, WTF::AtomString *a2@<X8>)
{
  size_t v3;
  unsigned int v4;
  _BYTE *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *__dst[17];

  __dst[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (!result)
    return (WTF::StringImpl *)WTF::AtomStringImpl::add();
  v3 = *((unsigned int *)result + 1);
  if ((v3 & 0x80000000) != 0)
  {
    *(_QWORD *)a2 = 0;
    return result;
  }
  v4 = *((_DWORD *)result + 4);
  if (v3 <= 0x3F)
  {
    if ((v4 & 4) == 0)
    {
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>((char *)__dst, (uint64_t)result);
      return (WTF::StringImpl *)WTF::AtomStringImpl::add();
    }
    if ((_DWORD)v3)
    {
      v5 = (_BYTE *)*((_QWORD *)result + 1);
      if ((_DWORD)v3 == 1)
        LOBYTE(__dst[0]) = *v5;
      else
        memcpy(__dst, v5, v3);
    }
    return (WTF::StringImpl *)WTF::AtomStringImpl::add();
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>>(*((unsigned int *)result + 1), (v4 >> 2) & 1, (uint64_t)result, __dst);
  WTF::AtomString::AtomString(a2, __dst[0]);
  result = __dst[0];
  __dst[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **std::unique_ptr<WebCore::CounterContent>::reset[abi:sn180100](WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = (WTF::StringImpl **)*result;
  *result = a2;
  if (v2)
  {
    v3 = v2[3];
    v2[3] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = v2[2];
    v2[2] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *v2;
    *v2 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (WTF::StringImpl **)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>::add<WebCore::CounterDirectives>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  int i;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *((_DWORD *)*a2 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl *)(v8 + 32 * v15);
    result = *(WTF::StringImpl **)v16;
    if (*(_QWORD *)v16 != -1)
      break;
    v11 = (WTF::StringImpl *)(v8 + 32 * v15);
LABEL_10:
    v13 = i + v15;
  }
  if (!result)
  {
    if (v11)
    {
      result = 0;
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v12 = *a2;
      v16 = v11;
    }
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)v16 = v12;
    v18 = *a3;
    *((_QWORD *)v16 + 3) = *((_QWORD *)a3 + 2);
    *(_OWORD *)((char *)v16 + 8) = v18;
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *a1;
    if (*a1)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
        goto LABEL_22;
    }
    else if (3 * v24 <= 4 * v23)
    {
      if (!(_DWORD)v24)
      {
        v25 = 8;
LABEL_28:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v25, (WTF::StringImpl **)v16);
        v16 = result;
        v21 = *a1;
        if (*a1)
          v24 = *(unsigned int *)(v21 - 4);
        else
          v24 = 0;
        goto LABEL_30;
      }
LABEL_22:
      v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
      goto LABEL_28;
    }
LABEL_30:
    v28 = v21 + 32 * v24;
    v27 = 1;
    goto LABEL_31;
  }
  if (result != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v26 = 0;
  else
    v26 = *(unsigned int *)(v8 - 4);
  v27 = 0;
  v28 = v8 + 32 * v26;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  __int128 v26;
  WTF::StringImpl *v27;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 32 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (WTF::StringImpl **)(v6 + 32 * v13);
      v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = 0;
          v21 = *((_DWORD *)v17 + 4) >> 8;
          do
          {
            v22 = v21 & v19;
            v21 = ++v20 + v22;
          }
          while (*(_QWORD *)(v18 + 32 * v22));
          v23 = v18 + 32 * v22;
          *(_QWORD *)v23 = 0;
          v24 = *v16;
          *v16 = 0;
          *(_QWORD *)v23 = v24;
          v25 = v6 + 32 * v13;
          v26 = *(_OWORD *)(v25 + 8);
          *(_QWORD *)(v23 + 24) = *(_QWORD *)(v25 + 24);
          *(_OWORD *)(v23 + 8) = v26;
          v27 = *v16;
          *v16 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v10);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (v16 == a3)
            v14 = v23;
        }
        else
        {
          *v16 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WebCore::fromCSSValue<WebCore::CursorType>(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;

  if (((*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) & 0x3F87F) == 0x50)
  {
    v1 = *(unsigned __int16 *)(a1 + 8);
    switch(*(_WORD *)(a1 + 8))
    {
      case 0x1AC:
        v2 = 15;
        break;
      case 0x1AD:
        v2 = 16;
        break;
      case 0x1AE:
        v2 = 32;
        break;
      case 0x1AF:
        v2 = 33;
        break;
      default:
        if (v1 == 6)
        {
          v2 = 35;
        }
        else
        {
          if (v1 != 236)
            return (v1 + 118);
          v2 = 34;
        }
        break;
    }
  }
  else
  {
    LOBYTE(v1) = 0;
    return (v1 + 118);
  }
  return v2;
}

uint64_t WebCore::SVGRenderStyle::setCx(uint64_t this, const WebCore::Length *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  WTF *v12;
  void *v13;

  v3 = this;
  v4 = *(unsigned __int8 **)(this + 64);
  v5 = v4[8];
  if (v5 != *((unsigned __int8 *)a2 + 4) || (v4[9] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v5 == 13)
    return this;
  this = (uint64_t)(v4 + 4);
  if (v5 == 11)
  {
    this = WebCore::Length::isCalculatedEqual((WebCore::Length *)this, a2);
    if ((this & 1) != 0)
      return this;
    v4 = *(unsigned __int8 **)(v3 + 64);
    goto LABEL_10;
  }
  if (v4[10])
    v6 = *(float *)this;
  else
    v6 = (float)*(int *)this;
  v7 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v7 = (float)*(int *)a2;
  if (v6 != v7)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (uint64_t)v4;
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x48);
      WebCore::StyleLayoutData::StyleLayoutData((WebCore::StyleLayoutData *)v8, (const WebCore::StyleLayoutData *)v4);
      this = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v8;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::StyleLayoutData::~StyleLayoutData((WebCore::StyleLayoutData *)this);
          this = WTF::fastFree(v12, v13);
          v8 = *(_QWORD *)(v3 + 64);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
    }
    v9 = (_DWORD *)(v8 + 4);
    if ((const WebCore::Length *)(v8 + 4) != a2)
    {
      if (*(_BYTE *)(v8 + 8) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      }
      v10 = *((unsigned __int8 *)a2 + 4);
      *(_BYTE *)(v8 + 8) = v10;
      *(_BYTE *)(v8 + 9) = *((_BYTE *)a2 + 5);
      if (v10 <= 0xD)
      {
        v11 = 1 << v10;
        if ((v11 & 0x7FC) != 0)
        {
          *(_BYTE *)(v8 + 10) = *((_BYTE *)a2 + 6);
          *v9 = *(_DWORD *)a2;
        }
        else if ((v11 & 0x3003) != 0)
        {
          *v9 = 0;
        }
        else
        {
          *v9 = *(_DWORD *)a2;
          return (uint64_t)WebCore::Length::ref((int *)(v8 + 4));
        }
      }
    }
  }
  return this;
}

WebCore::StyleLayoutData *WTF::DataRef<WebCore::StyleLayoutData>::access(const WebCore::StyleLayoutData **a1)
{
  const WebCore::StyleLayoutData *v1;
  WebCore::StyleLayoutData *v3;
  WebCore::StyleLayoutData *result;
  WebCore::StyleLayoutData *v5;
  WTF *v6;
  void *v7;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return *a1;
  v3 = (WebCore::StyleLayoutData *)WTF::fastMalloc((WTF *)0x48);
  result = WebCore::StyleLayoutData::StyleLayoutData(v3, v1);
  v5 = *a1;
  *a1 = result;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::StyleLayoutData::~StyleLayoutData(v5);
      WTF::fastFree(v6, v7);
      return *a1;
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return result;
}

void WebCore::StyleLayoutData::~StyleLayoutData(WebCore::StyleLayoutData *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  if (*((_BYTE *)this + 56) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 13));
  }
  if (*((_BYTE *)this + 48) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 11));
  }
  if (*((_BYTE *)this + 40) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 9));
  }
  if (*((_BYTE *)this + 32) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 7));
  }
  if (*((_BYTE *)this + 24) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 5));
  }
  if (*((_BYTE *)this + 16) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 3));
  }
  if (*((_BYTE *)this + 8) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 1));
  }
}

int *WebCore::Style::forwardInheritedValue(int *this, const WebCore::Length *a2)
{
  int v2;

  *this = 0;
  *((_BYTE *)this + 6) = 0;
  v2 = *((unsigned __int8 *)a2 + 4);
  *((_BYTE *)this + 4) = v2;
  *((_BYTE *)this + 5) = *((_BYTE *)a2 + 5);
  if ((v2 - 2) >= 9)
  {
    if (v2 == 11)
    {
      *this = *(_DWORD *)a2;
      return WebCore::Length::ref(this);
    }
  }
  else
  {
    *((_BYTE *)this + 6) = *((_BYTE *)a2 + 6);
    *this = *(_DWORD *)a2;
  }
  return this;
}

uint64_t WebCore::SVGRenderStyle::setCy(uint64_t this, const WebCore::Length *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  WTF *v12;
  void *v13;

  v3 = this;
  v4 = *(unsigned __int8 **)(this + 64);
  v5 = v4[16];
  if (v5 != *((unsigned __int8 *)a2 + 4) || (v4[17] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v5 == 13)
    return this;
  this = (uint64_t)(v4 + 12);
  if (v5 == 11)
  {
    this = WebCore::Length::isCalculatedEqual((WebCore::Length *)this, a2);
    if ((this & 1) != 0)
      return this;
    v4 = *(unsigned __int8 **)(v3 + 64);
    goto LABEL_10;
  }
  if (v4[18])
    v6 = *(float *)this;
  else
    v6 = (float)*(int *)this;
  v7 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v7 = (float)*(int *)a2;
  if (v6 != v7)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (uint64_t)v4;
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x48);
      WebCore::StyleLayoutData::StyleLayoutData((WebCore::StyleLayoutData *)v8, (const WebCore::StyleLayoutData *)v4);
      this = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v8;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::StyleLayoutData::~StyleLayoutData((WebCore::StyleLayoutData *)this);
          this = WTF::fastFree(v12, v13);
          v8 = *(_QWORD *)(v3 + 64);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
    }
    v9 = (_DWORD *)(v8 + 12);
    if ((const WebCore::Length *)(v8 + 12) != a2)
    {
      if (*(_BYTE *)(v8 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      }
      v10 = *((unsigned __int8 *)a2 + 4);
      *(_BYTE *)(v8 + 16) = v10;
      *(_BYTE *)(v8 + 17) = *((_BYTE *)a2 + 5);
      if (v10 <= 0xD)
      {
        v11 = 1 << v10;
        if ((v11 & 0x7FC) != 0)
        {
          *(_BYTE *)(v8 + 18) = *((_BYTE *)a2 + 6);
          *v9 = *(_DWORD *)a2;
        }
        else if ((v11 & 0x3003) != 0)
        {
          *v9 = 0;
        }
        else
        {
          *v9 = *(_DWORD *)a2;
          return (uint64_t)WebCore::Length::ref((int *)(v8 + 12));
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setD(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  WebCore::StyleLayoutData *v4;
  uint64_t v5;
  WebCore::StyleLayoutData *v6;
  WebCore::StyleLayoutData *v7;
  WebCore::StyleLayoutData *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  v3 = *(_QWORD *)(result + 56);
  if (*(_DWORD *)v3 != 1)
  {
    v9 = result;
    WebCore::SVGRenderStyle::copy(*(WebCore::SVGRenderStyle **)(result + 56), &v15);
    v3 = v15;
    result = *(_QWORD *)(v9 + 56);
    *(_QWORD *)(v9 + 56) = v15;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)result, v10);
        result = WTF::fastFree(v13, v14);
        v3 = *(_QWORD *)(v9 + 56);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v4 = *(WebCore::StyleLayoutData **)(v3 + 64);
  v5 = *a2;
  if (*((_QWORD *)v4 + 8) != *a2)
  {
    if (*(_DWORD *)v4 != 1)
    {
      v6 = (WebCore::StyleLayoutData *)WTF::fastMalloc((WTF *)0x48);
      v7 = WebCore::StyleLayoutData::StyleLayoutData(v6, v4);
      v8 = *(WebCore::StyleLayoutData **)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleLayoutData::~StyleLayoutData(v8);
          WTF::fastFree(v11, v12);
          v7 = *(WebCore::StyleLayoutData **)(v3 + 64);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      v5 = *a2;
      v4 = v7;
    }
    if (v5)
      ++*(_DWORD *)(v5 + 8);
    result = *((_QWORD *)v4 + 8);
    *((_QWORD *)v4 + 8) = v5;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  return result;
}

WebCore::StyleFillData **WebCore::SVGRenderStyle::setFillPaint(WebCore::StyleFillData **result, int a2, const WTF::StringImpl *a3, const WTF::StringImpl **a4, int a5, int a6)
{
  WebCore::StyleFillData **v10;
  WebCore::StyleFillData *v11;
  WebCore::StyleFillData **v12;
  uint64_t v13;
  int v14;
  _BOOL4 v16;
  BOOL v18;
  char v19;
  WebCore::StyleFillData *v20;
  uint64_t v21;
  WebCore::StyleFillData *v22;
  uint64_t *v23;
  uint64_t v24;
  WebCore::StyleFillData *v25;
  WebCore::StyleFillData **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  _BOOL4 v31;
  BOOL v33;
  char v34;
  WebCore::StyleFillData *v35;
  uint64_t v36;
  WebCore::StyleFillData *v37;
  uint64_t *v38;
  uint64_t v39;
  WebCore::StyleFillData *v40;
  WTF::StringImpl *v41;
  WebCore::StyleFillData *v42;
  const WTF::StringImpl *v43;
  WebCore::StyleFillData *v44;
  WTF::StringImpl *v45;
  WebCore::StyleFillData *v46;
  const WTF::StringImpl *v47;
  WebCore::StyleFillData **v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t **v56;

  v10 = result;
  if (!a5)
    goto LABEL_27;
  v12 = result + 2;
  v11 = result[2];
  if (*((unsigned __int8 *)v11 + 56) != a2)
  {
    *((_BYTE *)WTF::DataRef<WebCore::StyleFillData>::access(result + 2) + 56) = a2;
    v11 = *v12;
  }
  v13 = *((unsigned int *)v11 + 4);
  v14 = *((_DWORD *)a3 + 2);
  v16 = v14 == (_DWORD)v13 && v14 != -1;
  if ((_DWORD)v13 == -1 || !v16)
  {
    v18 = v14 == -1;
    if ((_DWORD)v13 != -1)
      v18 = v16;
    if (v18)
      goto LABEL_26;
  }
  else
  {
    v52 = &v49;
    v19 = ((uint64_t (*)(uint64_t **, char *, const WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v13])(&v52, (char *)v11 + 8, a3);
    if ((v19 & 1) != 0)
      goto LABEL_26;
  }
  v20 = WTF::DataRef<WebCore::StyleFillData>::access(v10 + 2);
  v52 = (uint64_t *)&v51;
  v53 = &v51;
  v54 = &v51;
  v55 = &v51;
  v21 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v21 == -1)
    goto LABEL_72;
  v22 = v20;
  v23 = (uint64_t *)((char *)v20 + 8);
  v56 = &v52;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, const WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v21])(&v49, &v56, a3);
  v24 = *((unsigned int *)v22 + 4);
  if ((_DWORD)v24 != -1)
  {
    if (v50 == -1)
    {
      ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(&v52, v23);
      *((_DWORD *)v22 + 4) = -1;
LABEL_24:
      if (v50 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v50])(&v52, &v49);
      goto LABEL_26;
    }
LABEL_23:
    v52 = v23;
    ((void (*)(uint64_t **, uint64_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                            + v50))(&v52, v23, &v49);
    goto LABEL_24;
  }
  if (v50 != -1)
    goto LABEL_23;
LABEL_26:
  result = (WebCore::StyleFillData **)WTF::equal(*((WTF **)*v12 + 5), *a4, a3);
  if ((result & 1) == 0)
  {
    v40 = WTF::DataRef<WebCore::StyleFillData>::access(v10 + 2);
    v42 = v40;
    v43 = *a4;
    if (*a4)
      *(_DWORD *)v43 += 2;
    result = (WebCore::StyleFillData **)*((_QWORD *)v40 + 5);
    *((_QWORD *)v42 + 5) = v43;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WebCore::StyleFillData **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v41);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_27:
  if (!a6)
    return result;
  v27 = (unsigned __int8 *)v10[2];
  v26 = v10 + 2;
  v25 = (WebCore::StyleFillData *)v27;
  if (v27[57] != a2)
  {
    *((_BYTE *)WTF::DataRef<WebCore::StyleFillData>::access(v26) + 57) = a2;
    v25 = *v26;
  }
  v28 = *((unsigned int *)v25 + 8);
  v29 = *((_DWORD *)a3 + 2);
  v31 = v29 == (_DWORD)v28 && v29 != -1;
  if ((_DWORD)v28 == -1 || !v31)
  {
    v33 = v29 == -1;
    if ((_DWORD)v28 != -1)
      v33 = v31;
    if (v33)
      goto LABEL_52;
  }
  else
  {
    v52 = &v49;
    v34 = ((uint64_t (*)(uint64_t **, char *, const WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v28])(&v52, (char *)v25 + 24, a3);
    if ((v34 & 1) != 0)
      goto LABEL_52;
  }
  v35 = WTF::DataRef<WebCore::StyleFillData>::access(v26);
  v52 = (uint64_t *)&v51;
  v53 = &v51;
  v54 = &v51;
  v55 = &v51;
  v36 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v36 == -1)
  {
LABEL_72:
    v48 = (WebCore::StyleFillData **)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::StyleFillData **)WTF::DataRef<WebCore::StyleFillData>::access(v48);
  }
  v37 = v35;
  v38 = (uint64_t *)((char *)v35 + 24);
  v56 = &v52;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, const WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v36])(&v49, &v56, a3);
  v39 = *((unsigned int *)v37 + 8);
  if ((_DWORD)v39 != -1)
  {
    if (v50 == -1)
    {
      ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v39])(&v52, v38);
      *((_DWORD *)v37 + 8) = -1;
LABEL_50:
      if (v50 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v50])(&v52, &v49);
      goto LABEL_52;
    }
LABEL_49:
    v52 = v38;
    ((void (*)(uint64_t **, uint64_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                            + v50))(&v52, v38, &v49);
    goto LABEL_50;
  }
  if (v50 != -1)
    goto LABEL_49;
LABEL_52:
  result = (WebCore::StyleFillData **)WTF::equal(*((WTF **)*v26 + 6), *a4, a3);
  if ((result & 1) == 0)
  {
    v44 = WTF::DataRef<WebCore::StyleFillData>::access(v26);
    v46 = v44;
    v47 = *a4;
    if (*a4)
      *(_DWORD *)v47 += 2;
    result = (WebCore::StyleFillData **)*((_QWORD *)v44 + 6);
    *((_QWORD *)v46 + 6) = v47;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WebCore::StyleFillData **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v45);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebCore::StyleFillData *WTF::DataRef<WebCore::StyleFillData>::access(WebCore::StyleFillData **a1)
{
  WebCore::StyleFillData *result;
  WTF::StringImpl *v3;
  __n128 v4;
  uint64_t v5;
  WebCore::StyleFillData *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  result = *a1;
  if (*(_DWORD *)result != 1)
  {
    v4.n128_f32[0] = WebCore::StyleFillData::copy(result, &v11);
    v5 = v11;
    v11 = 0;
    v6 = *a1;
    *a1 = (WebCore::StyleFillData *)v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        v7 = (WTF::StringImpl *)*((_QWORD *)v6 + 6);
        *((_QWORD *)v6 + 6) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v3);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = (WTF::StringImpl *)*((_QWORD *)v6 + 5);
        *((_QWORD *)v6 + 5) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v3);
          else
            *(_DWORD *)v8 -= 2;
        }
        v9 = *((unsigned int *)v6 + 8);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, char *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v9])(&v12, (char *)v6 + 24, v4);
        *((_DWORD *)v6 + 8) = -1;
        v10 = *((unsigned int *)v6 + 4);
        if ((_DWORD)v10 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v13, (char *)v6 + 8);
        *((_DWORD *)v6 + 4) = -1;
        WTF::fastFree(v6, v3);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
    WTF::Ref<WebCore::StyleFillData,WTF::RawPtrTraits<WebCore::StyleFillData>,WTF::DefaultRefDerefTraits<WebCore::StyleFillData>>::~Ref(&v11, v3);
    return *a1;
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::StyleFillData,WTF::RawPtrTraits<WebCore::StyleFillData>,WTF::DefaultRefDerefTraits<WebCore::StyleFillData>>::~Ref(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(WTF::StringImpl **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *(WTF::StringImpl **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(unsigned int *)(v3 + 32);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v9, v3 + 24);
      *(_DWORD *)(v3 + 32) = -1;
      v8 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v10, v3 + 8);
      *(_DWORD *)(v3 + 16) = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::Style::colorAndSVGPaintType(WebCore::Style *this, WebCore::Style::BuilderState *a2, const WebCore::CSSPrimitiveValue *a3, WTF::String *a4)
{
  uint64_t v4;
  __int16 v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t result;
  int v12;
  WebCore::Document *v13;
  const WebCore::RenderStyle *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  char v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;

  v4 = (uint64_t)a4;
  v23 = 1;
  v7 = *((_WORD *)a3 + 2);
  v8 = v7 & 0x7F;
  if (v8 != 80)
  {
    if (v8 == 21)
    {
      v16 = 0;
      v17 = (v7 & 0x7Fu) - 20;
      if (v17 > 0x3C)
        goto LABEL_32;
      if (((1 << v17) & 0x20008000000000BLL) == 0)
      {
        if (v17 != 60)
          goto LABEL_53;
        v21 = WebCore::nameString(*((unsigned __int16 *)a3 + 4));
        goto LABEL_50;
      }
      v16 = (_DWORD *)*((_QWORD *)a3 + 1);
      if (!v16)
        goto LABEL_32;
      goto LABEL_31;
    }
    v9 = v7 & 0x7F;
    if (v9 == 24)
    {
      v10 = *((_QWORD *)a3 + 1);
      if ((v10 & 0x8000000000000) != 0)
      {
        v19 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
      }
      v25 = (char *)v10;
      LODWORD(v26) = 0;
      goto LABEL_6;
    }
    v14 = (const WebCore::RenderStyle *)*((_QWORD *)a2 + 2);
    v13 = (WebCore::Document *)*((_QWORD *)a2 + 3);
    if (v9 == 78)
    {
      WebCore::CSSUnresolvedColor::createStyleColor(*((_QWORD *)a3 + 1), (uint64_t)v13, *((_QWORD *)a2 + 2), 0);
      goto LABEL_6;
    }
    v15 = 0;
LABEL_27:
    WebCore::Style::colorFromValueID(v13, v14, v15, 0, (uint64_t)&v25);
LABEL_6:
    if ((_DWORD)v26 == -1)
    {
      ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(&v29, &v22);
      v23 = -1;
    }
    else
    {
      v29 = &v22;
      ((void (*)(uint64_t **, uint64_t *, char **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                            + v26))(&v29, &v22, &v25);
    }
    if ((_DWORD)v26 != -1)
      ((void (*)(uint64_t **, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v26])(&v29, &v25);
    if (*(_QWORD *)v4 && *(_DWORD *)(*(_QWORD *)v4 + 4))
      v4 = 5;
    else
      v4 = 0;
    goto LABEL_12;
  }
  v12 = *((unsigned __int16 *)a3 + 4);
  if (v12 != 124)
  {
    if (v12 == 6)
    {
      if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
        v4 = 3;
      else
        v4 = 1;
      goto LABEL_12;
    }
    v14 = (const WebCore::RenderStyle *)*((_QWORD *)a2 + 2);
    v13 = (WebCore::Document *)*((_QWORD *)a2 + 3);
    v15 = *((unsigned __int16 *)a3 + 4);
    goto LABEL_27;
  }
  LODWORD(v26) = 1;
  v29 = &v22;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_((uint64_t)&v29);
  if ((_DWORD)v26 != -1)
    ((void (*)(uint64_t **, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v26])(&v29, &v25);
  if (*(_QWORD *)v4 && *(_DWORD *)(*(_QWORD *)v4 + 4))
    v4 = 4;
  else
    v4 = 2;
  *(_QWORD *)(*((_QWORD *)a2 + 2) + 16) |= 0x2000000000uLL;
LABEL_12:
  while (1)
  {
    v25 = &v24;
    v26 = &v24;
    v27 = &v24;
    v28 = &v24;
    if (v23 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_53:
    if (v17 == 59)
    {
      v21 = WebCore::nameString(*((unsigned __int16 *)a3 + 4));
LABEL_50:
      v16 = (_DWORD *)*v21;
      if (*v21)
LABEL_31:
        *v16 += 2;
    }
LABEL_32:
    v18 = *(WTF::StringImpl **)v4;
    *(_QWORD *)v4 = v16;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    v4 = 6;
  }
  v29 = (uint64_t *)&v25;
  result = ((uint64_t (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v23])(&v29, &v22);
  *((_BYTE *)this + 16) = v4;
  if (v23 != -1)
    return ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(&v25, &v22);
  return result;
}

float WebCore::Style::BuilderConverter::convertOpacity(WebCore::Style::BuilderConverter *this, WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  double v4;
  float v5;
  int v7;

  if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1951DB0A0);
  }
  v4 = WebCore::CSSPrimitiveValue::doubleValue(this);
  if (v4 >= 3.40282347e38)
  {
    v7 = 2139095039;
  }
  else
  {
    if (v4 > -3.40282347e38)
    {
      v5 = v4;
      goto LABEL_5;
    }
    v7 = -8388609;
  }
  v5 = *(float *)&v7;
LABEL_5:
  if (WebCore::CSSPrimitiveValue::primitiveType(this) == 3)
    v5 = v5 / 100.0;
  return fmaxf(fminf(v5, 1.0), 0.0);
}

WTF **WebCore::RenderStyle::setFilter(WTF **result, uint64_t a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  WTF *v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  WebCore::StyleMiscNonInheritedData *v16;
  _DWORD *v17;
  void *v18;
  _DWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  WTF *v22;
  void *v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;

  v3 = result + 1;
  v4 = *(_QWORD *)(*((_QWORD *)result[1] + 4) + 32);
  v5 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
  {
LABEL_12:
    v13 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v14 = (uint64_t *)*((_QWORD *)v13 + 4);
    if (*(_DWORD *)v14 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v14, (uint64_t *)&v30);
      v14 = v30;
      v16 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v13 + 4);
      *((_QWORD *)v13 + 4) = v30;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v16, v15);
          WTF::fastFree(v22, v23);
          v14 = (uint64_t *)*((_QWORD *)v13 + 4);
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
    }
    v17 = WTF::DataRef<WebCore::StyleFilterData>::access(v14 + 4);
    v19 = v17;
    v20 = v17[5];
    if ((_DWORD)v20)
    {
      v24 = (unsigned int **)*((_QWORD *)v17 + 1);
      v25 = &v24[v20];
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
        {
          v27 = v26 + 2;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v26 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
          }
        }
        ++v24;
      }
      while (v24 != v25);
    }
    result = (WTF **)*((_QWORD *)v19 + 1);
    if (result)
    {
      *((_QWORD *)v19 + 1) = 0;
      v19[4] = 0;
      result = (WTF **)WTF::fastFree((WTF *)result, v18);
    }
    v21 = *(_QWORD **)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)v19 + 1) = v21;
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    v19[4] = (_DWORD)v21;
    LODWORD(v21) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v19[5] = (_DWORD)v21;
    return result;
  }
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD **)(v4 + 8);
  if ((_DWORD)v5)
  {
    v8 = 8 * v5 - 8;
    v9 = v7;
    v10 = *(_QWORD **)a2;
    while (1)
    {
      v11 = v8;
      result = (WTF **)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v9 + 24))(*v9, *v10);
      if (!(_DWORD)result)
        goto LABEL_12;
      ++v9;
      ++v10;
      v8 = v11 - 8;
      if (!v11)
        goto LABEL_8;
    }
  }
  v10 = *(_QWORD **)a2;
  v9 = *(_QWORD **)(v4 + 8);
LABEL_8:
  if (v9 != &v7[v5] || v10 != &v6[v5])
    goto LABEL_12;
  return result;
}

_DWORD *WTF::DataRef<WebCore::StyleFilterData>::access(uint64_t *a1)
{
  uint64_t v1;
  _DWORD *result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int **v23;
  _DWORD *v24;
  unsigned int **v25;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return (_DWORD *)*a1;
  result = (_DWORD *)WTF::fastMalloc((WTF *)0x18);
  *result = 1;
  v5 = *(unsigned int *)(v1 + 20);
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  result[5] = v5;
  if ((_DWORD)v5)
  {
    v24 = result;
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v15 = v5;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    result = v24;
    v24[4] = v15;
    *((_QWORD *)v24 + 1) = v16;
    v17 = *(unsigned int *)(v1 + 20);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD **)(v1 + 8);
      v19 = &v18[v17];
      do
      {
        v20 = *v18;
        v21 = (unsigned int *)(*v18 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + 1, v21));
        *v16++ = v20;
        ++v18;
      }
      while (v18 != v19);
    }
  }
  v6 = *a1;
  *a1 = (uint64_t)result;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v7 = *(unsigned int *)(v6 + 20);
      if ((_DWORD)v7)
      {
        v9 = *(unsigned int ***)(v6 + 8);
        v10 = &v9[v7];
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            v12 = v11 + 2;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              atomic_store(1u, v11 + 2);
              v23 = v10;
              v25 = v9;
              (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
              v10 = v23;
              v9 = v25;
            }
          }
          ++v9;
        }
        while (v9 != v10);
      }
      v8 = *(WTF **)(v6 + 8);
      if (v8)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        WTF::fastFree(v8, v4);
      }
      WTF::fastFree((WTF *)v6, v4);
      return (_DWORD *)*a1;
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setFlexBasis(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  WebCore::StyleMiscNonInheritedData *v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  WTF *v17;
  void *v18;
  _DWORD *v19;
  char isCalculatedEqual;
  _DWORD *v21;
  uint64_t *v22;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 32) + 16);
  v6 = v5[16];
  if (v6 == *((unsigned __int8 *)a2 + 4) && (v5[17] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v6 == 13)
      return result;
    if (v6 == 11)
    {
      v19 = result;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 12), a2);
      result = v19;
      if ((isCalculatedEqual & 1) != 0)
        return result;
    }
    else
    {
      v7 = *((float *)v5 + 3);
      if (!v5[18])
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v8 = (float)*(int *)a2;
      if (v7 == v8)
        return result;
    }
  }
  v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
  v10 = (uint64_t *)*((_QWORD *)v9 + 4);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v10, (uint64_t *)&v22);
    v10 = v22;
    v12 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v9 + 4);
    *((_QWORD *)v9 + 4) = v22;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v12, v11);
        WTF::fastFree(v17, v18);
        v10 = (uint64_t *)*((_QWORD *)v9 + 4);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  result = WTF::DataRef<WebCore::StyleFlexibleBoxData>::access(v10 + 2);
  v13 = result + 3;
  if (result + 3 != (_DWORD *)a2)
  {
    if (*((_BYTE *)result + 16) == 11)
    {
      v21 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v13);
      result = v21;
    }
    v14 = *((unsigned __int8 *)a2 + 4);
    *((_BYTE *)result + 16) = v14;
    *((_BYTE *)result + 17) = *((_BYTE *)a2 + 5);
    if (v14 - 2 >= 9)
    {
      if (v14 > 0xD)
        goto LABEL_19;
      if (((1 << v14) & 0x3003) != 0)
      {
        *v13 = 0;
        goto LABEL_19;
      }
      if (v14 != 11)
        goto LABEL_19;
      v16 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v15 = *((unsigned __int8 *)a2 + 6);
      *((_BYTE *)result + 18) = v15;
      if (v15)
      {
        *v13 = *(_DWORD *)a2;
LABEL_19:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v16 = *(_DWORD *)a2;
    }
    *v13 = v16;
    goto LABEL_19;
  }
  return result;
}

_DWORD *WTF::DataRef<WebCore::StyleFlexibleBoxData>::access(uint64_t *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  int *v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return (_DWORD *)*a1;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 4) = *(_QWORD *)(v1 + 4);
  *(_DWORD *)(v4 + 12) = 0;
  v5 = (int *)(v4 + 12);
  *(_WORD *)(v4 + 17) = 0;
  v6 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 17) = *(_BYTE *)(v1 + 17);
  if (v6 <= 0xD)
  {
    if (((1 << v6) & 0x7FC) != 0)
    {
      *(_BYTE *)(v4 + 18) = *(_BYTE *)(v1 + 18);
      *v5 = *(_DWORD *)(v1 + 12);
    }
    else if (((1 << v6) & 0x3003) != 0)
    {
      *v5 = 0;
    }
    else
    {
      *v5 = *(_DWORD *)(v1 + 12);
      WebCore::Length::ref(v5);
    }
  }
  v7 = *(_BYTE *)(v4 + 20) & 0xFC | *(_BYTE *)(v1 + 20) & 3;
  *(_BYTE *)(v4 + 20) = v7;
  *(_BYTE *)(v4 + 20) = v7 & 0xF3 | *(_BYTE *)(v1 + 20) & 0xC;
  v8 = *a1;
  *a1 = v4;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      if (*(_BYTE *)(v8 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v10 = v8;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 12));
        v8 = v10;
      }
      WTF::fastFree((WTF *)v8, v3);
      return (_DWORD *)*a1;
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  return (_DWORD *)v4;
}

WTF **WebCore::RenderStyle::setFlexDirection(uint64_t a1, int a2)
{
  WTF **result;
  uint64_t v3;
  char v4;
  WTF *v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 16) + 20) & 3) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    v6 = (uint64_t *)*((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v6, (uint64_t *)&v11);
      v6 = v11;
      v8 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v11;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v7);
          WTF::fastFree(v9, v10);
          v6 = (uint64_t *)*((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    result = (WTF **)WTF::DataRef<WebCore::StyleFlexibleBoxData>::access(v6 + 2);
    *((_BYTE *)result + 20) = *((_BYTE *)result + 20) & 0xFC | v4 & 3;
  }
  return result;
}

WTF **WebCore::RenderStyle::setFlexGrow(WebCore::RenderStyle *this, float a2)
{
  float v2;
  WTF **result;
  uint64_t v4;
  WTF *v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;

  if (a2 >= 0.0)
    v2 = a2;
  else
    v2 = 0.0;
  v4 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 16) + 4) != v2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    v6 = (uint64_t *)*((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v6, (uint64_t *)&v11);
      v6 = v11;
      v8 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v11;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v7);
          WTF::fastFree(v9, v10);
          v6 = (uint64_t *)*((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    result = (WTF **)WTF::DataRef<WebCore::StyleFlexibleBoxData>::access(v6 + 2);
    *((float *)result + 1) = v2;
  }
  return result;
}

float WebCore::TypeDeducingCSSValueMapper::operator float(uint64_t a1)
{
  double v1;

  if (((*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1951DB990);
  }
  v1 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)a1);
  if (v1 >= 3.40282347e38)
    return 3.4028e38;
  if (v1 <= -3.40282347e38)
    return -3.4028e38;
  return v1;
}

WTF **WebCore::RenderStyle::setFlexShrink(WebCore::RenderStyle *this, float a2)
{
  float v2;
  WTF **result;
  uint64_t v4;
  WTF *v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;

  if (a2 >= 0.0)
    v2 = a2;
  else
    v2 = 0.0;
  v4 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 16) + 8) != v2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    v6 = (uint64_t *)*((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v6, (uint64_t *)&v11);
      v6 = v11;
      v8 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v11;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v7);
          WTF::fastFree(v9, v10);
          v6 = (uint64_t *)*((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    result = (WTF **)WTF::DataRef<WebCore::StyleFlexibleBoxData>::access(v6 + 2);
    *((float *)result + 2) = v2;
  }
  return result;
}

WTF **WebCore::RenderStyle::setFlexWrap(uint64_t a1, int a2)
{
  WTF **result;
  uint64_t v3;
  char v4;
  WTF *v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 16) + 20) >> 2) & 3) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    v6 = (uint64_t *)*((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v6, (uint64_t *)&v11);
      v6 = v11;
      v8 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v11;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v7);
          WTF::fastFree(v9, v10);
          v6 = (uint64_t *)*((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    result = (WTF **)WTF::DataRef<WebCore::StyleFlexibleBoxData>::access(v6 + 2);
    *((_BYTE *)result + 20) = *((_BYTE *)result + 20) & 0xF3 | (4 * (v4 & 3));
  }
  return result;
}

uint64_t WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = result;
  if (a2 == (_DWORD *)result)
    return v2;
  v4 = *(_DWORD *)(result + 12);
  v5 = a2[3];
  if (v4 > v5)
  {
    WTF::VectorTypeOperations<WebCore::GridTrackSize>::destruct((int *)(*(_QWORD *)result + 88 * v5), (int *)(*(_QWORD *)result + 88 * v4));
    *(_DWORD *)(v2 + 12) = v5;
LABEL_14:
    v13 = *(_QWORD *)a2;
    v14 = *(_QWORD *)v2;
    if (v5)
    {
      v15 = 88 * v5;
      do
      {
        WebCore::GridTrackSize::operator=(v14, v13);
        v13 += 88;
        v14 += 88;
        v15 -= 88;
      }
      while (v15);
      v13 = *(_QWORD *)a2;
      v16 = *(_DWORD *)(v2 + 12);
      v14 = *(_QWORD *)v2;
    }
    else
    {
      v16 = 0;
    }
    v17 = a2[3];
    if (v16 != v17)
    {
      v18 = v14 + 88 * v16;
      v19 = v13 + 88 * v16;
      v20 = 88 * v17 - 88 * v16;
      do
      {
        v18 = WebCore::GridTrackSize::GridTrackSize(v18, v19) + 88;
        v19 += 88;
        v20 -= 88;
      }
      while (v20);
      v16 = a2[3];
    }
    *(_DWORD *)(v2 + 12) = v16;
    return v2;
  }
  v6 = *(_DWORD *)(result + 8);
  if (v5 <= v6)
    goto LABEL_13;
  if (v6)
  {
    if (v4)
    {
      WTF::VectorTypeOperations<WebCore::GridTrackSize>::destruct(*(int **)result, (int *)(*(_QWORD *)result + 88 * v4));
      *(_DWORD *)(v2 + 12) = 0;
    }
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v7 = a2[3];
  if (*(_DWORD *)(v2 + 8) >= v7)
  {
LABEL_13:
    v5 = *(_DWORD *)(v2 + 12);
    goto LABEL_14;
  }
  if (v7 < 0x2E8BA2F)
  {
    v8 = *(WTF **)v2;
    v9 = *(_DWORD *)(v2 + 12);
    v10 = 88 * v7;
    v11 = WTF::fastMalloc((WTF *)(88 * v7));
    *(_DWORD *)(v2 + 8) = (v10 & 0xFFFFFFF8) / 0x58;
    *(_QWORD *)v2 = v11;
    if (v9)
    {
      v21 = 88 * v9;
      v22 = (uint64_t)v8;
      do
      {
        v23 = v11;
        WebCore::GridTrackSize::GridTrackSize(v11, v22);
        if (*(_BYTE *)(v22 + 60) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v22 + 56));
        }
        if (*(_BYTE *)(v22 + 36) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v22 + 32));
        }
        if (*(_BYTE *)(v22 + 12) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v22 + 8));
        }
        v11 = v23 + 88;
        v22 += 88;
        v21 -= 88;
      }
      while (v21);
    }
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v8, v12);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

BOOL WebCore::GridTrackSize::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;
  float v4;
  int v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  char isCalculatedEqual;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 12);
  if (v2 != *(unsigned __int8 *)(a2 + 12) || (*(_BYTE *)(a1 + 13) != 0) != (*(_BYTE *)(a2 + 13) != 0))
    return 0;
  if (v2 != 13)
  {
    if (v2 == 11)
    {
      v15 = a2;
      v18 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 8), (const WebCore::Length *)(a2 + 8));
      a2 = v15;
      a1 = v18;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      v3 = *(float *)(a1 + 8);
      if (!*(_BYTE *)(a1 + 14))
        v3 = (float)SLODWORD(v3);
      v4 = *(float *)(a2 + 8);
      if (!*(_BYTE *)(a2 + 14))
        v4 = (float)SLODWORD(v4);
      if (v3 != v4)
        return 0;
    }
  }
  if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
    return 0;
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
    return 0;
  v5 = *(unsigned __int8 *)(a1 + 36);
  if (v5 != *(unsigned __int8 *)(a2 + 36) || (*(_BYTE *)(a1 + 37) != 0) != (*(_BYTE *)(a2 + 37) != 0))
    return 0;
  if (v5 != 13)
  {
    if (v5 == 11)
    {
      v16 = a2;
      v19 = a1;
      v13 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 32), (const WebCore::Length *)(a2 + 32));
      a2 = v16;
      a1 = v19;
      if ((v13 & 1) == 0)
        return 0;
    }
    else
    {
      v6 = *(float *)(a1 + 32);
      if (!*(_BYTE *)(a1 + 38))
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)(a2 + 32);
      if (!*(_BYTE *)(a2 + 38))
        v7 = (float)SLODWORD(v7);
      if (v6 != v7)
        return 0;
    }
  }
  if (*(double *)(a1 + 40) != *(double *)(a2 + 40))
    return 0;
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
    return 0;
  v8 = *(unsigned __int8 *)(a1 + 60);
  if (v8 != *(unsigned __int8 *)(a2 + 60) || (*(_BYTE *)(a1 + 61) != 0) != (*(_BYTE *)(a2 + 61) != 0))
    return 0;
  if (v8 != 13)
  {
    if (v8 == 11)
    {
      v17 = a2;
      v20 = a1;
      v14 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 56), (const WebCore::Length *)(a2 + 56));
      a2 = v17;
      a1 = v20;
      if ((v14 & 1) == 0)
        return 0;
    }
    else
    {
      v9 = *(float *)(a1 + 56);
      if (!*(_BYTE *)(a1 + 62))
        v9 = (float)SLODWORD(v9);
      v10 = *(float *)(a2 + 56);
      if (!*(_BYTE *)(a2 + 62))
        v10 = (float)SLODWORD(v10);
      if (v9 != v10)
        return 0;
    }
  }
  if (*(double *)(a1 + 64) != *(double *)(a2 + 64))
    return 0;
  return *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72);
}

void WebCore::StyleGridData::~StyleGridData(WebCore::StyleGridData *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *v10;
  WTF::StringImpl *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  WTF *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  char v73;
  char v74;

  v3 = *((_DWORD *)this + 61);
  v4 = (WTF *)*((_QWORD *)this + 29);
  if (v3)
  {
    v5 = 88 * v3;
    v6 = (unsigned int *)((char *)v4 + 32);
    do
    {
      if (*((_BYTE *)v6 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6[6]);
      }
      if (*((_BYTE *)v6 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v6);
      }
      if (*((_BYTE *)v6 - 20) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v6 - 6));
      }
      v6 += 22;
      v5 -= 88;
    }
    while (v5);
    v4 = (WTF *)*((_QWORD *)this + 29);
  }
  if (v4)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v4, a2);
  }
  v7 = *((_DWORD *)this + 57);
  v8 = (WTF *)*((_QWORD *)this + 27);
  if (v7)
  {
    v9 = 88 * v7;
    v10 = (unsigned int *)((char *)v8 + 32);
    do
    {
      if (*((_BYTE *)v10 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10[6]);
      }
      if (*((_BYTE *)v10 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
      }
      if (*((_BYTE *)v10 - 20) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v10 - 6));
      }
      v10 += 22;
      v9 -= 88;
    }
    while (v9);
    v8 = (WTF *)*((_QWORD *)this + 27);
  }
  if (v8)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::~HashTable((uint64_t *)this + 26, (WTF::StringImpl *)a2);
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::~HashTable((uint64_t *)this + 25, v11);
  v13 = *((_QWORD *)this + 24);
  if (v13)
  {
    v49 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v49)
    {
      v50 = *((_QWORD *)this + 24);
      do
      {
        v51 = *(WTF::StringImpl **)v50;
        if (*(_QWORD *)v50 != -1)
        {
          v52 = *(WTF **)(v50 + 8);
          if (v52)
          {
            *(_QWORD *)(v50 + 8) = 0;
            *(_DWORD *)(v50 + 16) = 0;
            WTF::fastFree(v52, v12);
            v51 = *(WTF::StringImpl **)v50;
          }
          *(_QWORD *)v50 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v12);
            else
              *(_DWORD *)v51 -= 2;
          }
        }
        v50 += 24;
        --v49;
      }
      while (v49);
    }
    WTF::fastFree((WTF *)(v13 - 16), v12);
  }
  v14 = *((_QWORD *)this + 23);
  if (v14)
  {
    v53 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v53)
    {
      v54 = *((_QWORD *)this + 23);
      do
      {
        v55 = *(WTF::StringImpl **)v54;
        if (*(_QWORD *)v54 != -1)
        {
          v56 = *(WTF **)(v54 + 8);
          if (v56)
          {
            *(_QWORD *)(v54 + 8) = 0;
            *(_DWORD *)(v54 + 16) = 0;
            WTF::fastFree(v56, v12);
            v55 = *(WTF::StringImpl **)v54;
          }
          *(_QWORD *)v54 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v12);
            else
              *(_DWORD *)v55 -= 2;
          }
        }
        v54 += 24;
        --v53;
      }
      while (v53);
    }
    WTF::fastFree((WTF *)(v14 - 16), v12);
  }
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::~HashTable((uint64_t *)this + 22, (WTF::StringImpl *)v12);
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::~HashTable((uint64_t *)this + 21, v15);
  v17 = *((_QWORD *)this + 20);
  if (v17)
  {
    v57 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v57)
    {
      v58 = *((_QWORD *)this + 20);
      do
      {
        v59 = *(WTF::StringImpl **)v58;
        if (*(_QWORD *)v58 != -1)
        {
          v60 = *(WTF **)(v58 + 8);
          if (v60)
          {
            *(_QWORD *)(v58 + 8) = 0;
            *(_DWORD *)(v58 + 16) = 0;
            WTF::fastFree(v60, v16);
            v59 = *(WTF::StringImpl **)v58;
          }
          *(_QWORD *)v58 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v59 -= 2;
          }
        }
        v58 += 24;
        --v57;
      }
      while (v57);
    }
    WTF::fastFree((WTF *)(v17 - 16), v16);
  }
  v18 = *((_QWORD *)this + 19);
  if (v18)
  {
    v61 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v61)
    {
      v62 = *((_QWORD *)this + 19);
      do
      {
        v63 = *(WTF::StringImpl **)v62;
        if (*(_QWORD *)v62 != -1)
        {
          v64 = *(WTF **)(v62 + 8);
          if (v64)
          {
            *(_QWORD *)(v62 + 8) = 0;
            *(_DWORD *)(v62 + 16) = 0;
            WTF::fastFree(v64, v16);
            v63 = *(WTF::StringImpl **)v62;
          }
          *(_QWORD *)v62 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v63 -= 2;
          }
        }
        v62 += 24;
        --v61;
      }
      while (v61);
    }
    WTF::fastFree((WTF *)(v18 - 16), v16);
  }
  v19 = *((_DWORD *)this + 37);
  v20 = (WTF *)*((_QWORD *)this + 17);
  if (v19)
  {
    v21 = 88 * v19;
    v22 = (unsigned int *)((char *)v20 + 32);
    do
    {
      if (*((_BYTE *)v22 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22[6]);
      }
      if (*((_BYTE *)v22 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v22);
      }
      if (*((_BYTE *)v22 - 20) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v22 - 6));
      }
      v22 += 22;
      v21 -= 88;
    }
    while (v21);
    v20 = (WTF *)*((_QWORD *)this + 17);
  }
  if (v20)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v20, v16);
  }
  v23 = *((_DWORD *)this + 33);
  v24 = (WTF *)*((_QWORD *)this + 15);
  if (v23)
  {
    v25 = 88 * v23;
    v26 = (unsigned int *)((char *)v24 + 32);
    do
    {
      if (*((_BYTE *)v26 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26[6]);
      }
      if (*((_BYTE *)v26 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v26);
      }
      if (*((_BYTE *)v26 - 20) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v26 - 6));
      }
      v26 += 22;
      v25 -= 88;
    }
    while (v25);
    v24 = (WTF *)*((_QWORD *)this + 15);
  }
  if (v24)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v24, v16);
  }
  v27 = *((unsigned int *)this + 29);
  v28 = (unsigned int *)*((_QWORD *)this + 13);
  if ((_DWORD)v27)
  {
    v29 = 96 * v27;
    do
    {
      v30 = v28[22];
      if ((_DWORD)v30 != -1)
        ((void (*)(char *, unsigned int *))off_1E3347D18[v30])(&v73, v28);
      v28[22] = -1;
      v28 += 24;
      v29 -= 96;
    }
    while (v29);
    v28 = (unsigned int *)*((_QWORD *)this + 13);
  }
  if (v28)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((WTF *)v28, v16);
  }
  v31 = *((unsigned int *)this + 25);
  v32 = (unsigned int *)*((_QWORD *)this + 11);
  if ((_DWORD)v31)
  {
    v33 = 96 * v31;
    do
    {
      v34 = v32[22];
      if ((_DWORD)v34 != -1)
        ((void (*)(char *, unsigned int *))off_1E3347D18[v34])(&v74, v32);
      v32[22] = -1;
      v32 += 24;
      v33 -= 96;
    }
    while (v33);
    v32 = (unsigned int *)*((_QWORD *)this + 11);
  }
  if (v32)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree((WTF *)v32, v16);
  }
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v46 = *(unsigned int *)(v35 - 4);
    if ((_DWORD)v46)
    {
      v47 = (WTF::StringImpl **)*((_QWORD *)this + 9);
      do
      {
        v48 = *v47;
        if (*v47 != (WTF::StringImpl *)-1)
        {
          *v47 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v48 -= 2;
          }
        }
        v47 += 4;
        --v46;
      }
      while (v46);
    }
    WTF::fastFree((WTF *)(v35 - 16), v16);
  }
  v36 = *((_DWORD *)this + 17);
  v37 = (WTF *)*((_QWORD *)this + 7);
  if (v36)
  {
    v38 = 88 * v36;
    v39 = (unsigned int *)((char *)v37 + 32);
    do
    {
      if (*((_BYTE *)v39 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v39[6]);
      }
      if (*((_BYTE *)v39 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v39);
      }
      if (*((_BYTE *)v39 - 20) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v39 - 6));
      }
      v39 += 22;
      v38 -= 88;
    }
    while (v38);
    v37 = (WTF *)*((_QWORD *)this + 7);
  }
  if (v37)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v37, v16);
  }
  v40 = *((_DWORD *)this + 13);
  v41 = (WTF *)*((_QWORD *)this + 5);
  if (v40)
  {
    v42 = 88 * v40;
    v43 = (unsigned int *)((char *)v41 + 32);
    do
    {
      if (*((_BYTE *)v43 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v43[6]);
      }
      if (*((_BYTE *)v43 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v43);
      }
      if (*((_BYTE *)v43 - 20) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v43 - 6));
      }
      v43 += 22;
      v42 -= 88;
    }
    while (v42);
    v41 = (WTF *)*((_QWORD *)this + 5);
  }
  if (v41)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v41, v16);
  }
  v44 = *((_QWORD *)this + 2);
  if (v44)
  {
    v65 = *(unsigned int *)(v44 - 4);
    if ((_DWORD)v65)
    {
      v66 = *((_QWORD *)this + 2);
      do
      {
        v67 = *(WTF::StringImpl **)v66;
        if (*(_QWORD *)v66 != -1)
        {
          v68 = *(WTF **)(v66 + 8);
          if (v68)
          {
            *(_QWORD *)(v66 + 8) = 0;
            *(_DWORD *)(v66 + 16) = 0;
            WTF::fastFree(v68, v16);
            v67 = *(WTF::StringImpl **)v66;
          }
          *(_QWORD *)v66 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v67 -= 2;
          }
        }
        v66 += 24;
        --v65;
      }
      while (v65);
    }
    WTF::fastFree((WTF *)(v44 - 16), v16);
  }
  v45 = *((_QWORD *)this + 1);
  if (v45)
  {
    v69 = *(unsigned int *)(v45 - 4);
    if ((_DWORD)v69)
    {
      v70 = *((_QWORD *)this + 1);
      do
      {
        v71 = *(WTF::StringImpl **)v70;
        if (*(_QWORD *)v70 != -1)
        {
          v72 = *(WTF **)(v70 + 8);
          if (v72)
          {
            *(_QWORD *)(v70 + 8) = 0;
            *(_DWORD *)(v70 + 16) = 0;
            WTF::fastFree(v72, v16);
            v71 = *(WTF::StringImpl **)v70;
          }
          *(_QWORD *)v70 = 0;
          if (v71)
          {
            if (*(_DWORD *)v71 == 2)
              WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v71 -= 2;
          }
        }
        v70 += 24;
        --v69;
      }
      while (v69);
    }
    WTF::fastFree((WTF *)(v45 - 16), v16);
  }
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::~HashTable(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  WTF::StringImpl ***v8;
  uint64_t v9;
  WTF *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_DWORD *)(v3 + 24 * i) != -2)
        {
          v7 = v3 + 24 * i;
          v8 = (WTF::StringImpl ***)(v7 + 8);
          v9 = *(unsigned int *)(v7 + 20);
          if ((_DWORD)v9)
          {
            v11 = *v8;
            v12 = 8 * v9;
            do
            {
              v13 = *v11;
              *v11 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                  WTF::StringImpl::destroy(v13, a2);
                else
                  *(_DWORD *)v13 -= 2;
              }
              ++v11;
              v12 -= 8;
            }
            while (v12);
          }
          v10 = (WTF *)*v8;
          if (*v8)
          {
            *v8 = 0;
            *(_DWORD *)(v3 + 24 * i + 16) = 0;
            WTF::fastFree(v10, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  int *result;

  if (*(_BYTE *)(a2 + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 56));
  }
  if (*(_BYTE *)(a2 + 36) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 32));
  }
  if (*(_BYTE *)(a2 + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 8));
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *(unsigned int *)(a2 + 20);
  v4 = *(unsigned int **)(a2 + 8);
  if ((_DWORD)v3)
  {
    v5 = 96 * v3;
    do
    {
      v6 = v4[22];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3347D48[v6])(&v8, v4);
      v4[22] = -1;
      v4 += 24;
      v5 -= 96;
    }
    while (v5);
    v4 = *(unsigned int **)(a2 + 8);
  }
  if (v4)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return WTF::fastFree((WTF *)v4, (void *)a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *(unsigned int *)(a2 + 20);
  v4 = *(unsigned int **)(a2 + 8);
  if ((_DWORD)v3)
  {
    v5 = 96 * v3;
    do
    {
      v6 = v4[22];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E3347D48[v6])(&v8, v4);
      v4[22] = -1;
      v4 += 24;
      v5 -= 96;
    }
    while (v5);
    v4 = *(unsigned int **)(a2 + 8);
  }
  if (v4)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return WTF::fastFree((WTF *)v4, (void *)a2);
  }
  return result;
}

void WebCore::GridTrackEntryRepeat::~GridTrackEntryRepeat(WebCore::GridTrackEntryRepeat *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *((unsigned int *)this + 5);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  if ((_DWORD)v3)
  {
    v5 = 96 * v3;
    do
    {
      v6 = v4[22];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))off_1E3347D48[v6])(&v7, v4);
      v4[22] = -1;
      v4 += 24;
      v5 -= 96;
    }
    while (v5);
    v4 = (unsigned int *)*((_QWORD *)this + 1);
  }
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  int *result;

  if (*(_BYTE *)(a2 + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 56));
  }
  if (*(_BYTE *)(a2 + 36) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 32));
  }
  if (*(_BYTE *)(a2 + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 8));
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

int *WTF::VectorTypeOperations<WebCore::GridTrackSize>::destruct(int *result, int *a2)
{
  int *v3;

  if (result != a2)
  {
    v3 = result;
    do
    {
      if (*((_BYTE *)v3 + 60) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v3[14]);
      }
      if (*((_BYTE *)v3 + 36) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v3[8]);
      }
      if (*((_BYTE *)v3 + 12) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v3[2]);
      }
      v3 += 22;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WebCore::GridTrackSize::GridTrackSize(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  *(_DWORD *)result = *(_DWORD *)a2;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 13) = 0;
  v2 = *(unsigned __int8 *)(a2 + 12);
  *(_BYTE *)(result + 12) = v2;
  *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
  if (v2 - 2 < 9)
  {
    v3 = *(unsigned __int8 *)(a2 + 14);
    *(_BYTE *)(result + 14) = v3;
    if (v3)
    {
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      goto LABEL_4;
    }
    v11 = *(_DWORD *)(a2 + 8);
    goto LABEL_12;
  }
  if (v2 <= 0xD)
  {
    if (((1 << v2) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 8) = 0;
    }
    else if (v2 == 11)
    {
      v11 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = 0;
LABEL_12:
      *(_DWORD *)(result + 8) = v11;
    }
  }
LABEL_4:
  *(_BYTE *)(a2 + 12) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 32) = 0;
  *(_WORD *)(result + 37) = 0;
  v5 = *(unsigned __int8 *)(a2 + 36);
  *(_BYTE *)(result + 36) = v5;
  *(_BYTE *)(result + 37) = *(_BYTE *)(a2 + 37);
  if (v5 - 2 < 9)
  {
    v6 = *(unsigned __int8 *)(a2 + 38);
    *(_BYTE *)(result + 38) = v6;
    if (v6)
    {
      *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
      goto LABEL_7;
    }
    v12 = *(_DWORD *)(a2 + 32);
    goto LABEL_14;
  }
  if (v5 <= 0xD)
  {
    if (((1 << v5) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 32) = 0;
    }
    else if (v5 == 11)
    {
      v12 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = 0;
LABEL_14:
      *(_DWORD *)(result + 32) = v12;
    }
  }
LABEL_7:
  *(_BYTE *)(a2 + 36) = 0;
  v7 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = v7;
  *(_DWORD *)(result + 56) = 0;
  *(_WORD *)(result + 61) = 0;
  v8 = *(unsigned __int8 *)(a2 + 60);
  *(_BYTE *)(result + 60) = v8;
  *(_BYTE *)(result + 61) = *(_BYTE *)(a2 + 61);
  if (v8 - 2 >= 9)
  {
    if (v8 > 0xD)
      goto LABEL_10;
    if (((1 << v8) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 56) = 0;
      goto LABEL_10;
    }
    if (v8 != 11)
      goto LABEL_10;
    v13 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    goto LABEL_16;
  }
  v9 = *(unsigned __int8 *)(a2 + 62);
  *(_BYTE *)(result + 62) = v9;
  if (!v9)
  {
    v13 = *(_DWORD *)(a2 + 56);
LABEL_16:
    *(_DWORD *)(result + 56) = v13;
    goto LABEL_10;
  }
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
LABEL_10:
  *(_BYTE *)(a2 + 60) = 0;
  v10 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(result + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = v10;
  *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
  return result;
}

uint64_t WebCore::GridTrackSize::operator=(uint64_t a1, uint64_t a2)
{
  int *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int *v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (int *)(a1 + 8);
  if (a1 != a2)
  {
    if (*(_BYTE *)(a1 + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v17 = v4;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v4);
      v4 = v17;
    }
    v5 = *(unsigned __int8 *)(a2 + 12);
    *(_BYTE *)(a1 + 12) = v5;
    *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
    if (v5 <= 0xD)
    {
      v6 = 1 << v5;
      if ((v6 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
        *v4 = *(_DWORD *)(a2 + 8);
      }
      else if ((v6 & 0x3003) != 0)
      {
        *v4 = 0;
      }
      else
      {
        *v4 = *(_DWORD *)(a2 + 8);
        WebCore::Length::ref(v4);
      }
    }
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    v8 = (int *)(a1 + 32);
    if (*(_BYTE *)(a1 + 36) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v8);
      v8 = (int *)(a1 + 32);
    }
    v9 = *(unsigned __int8 *)(a2 + 36);
    *(_BYTE *)(a1 + 36) = v9;
    *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
    if (v9 <= 0xD)
    {
      v10 = 1 << v9;
      if ((v10 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
        *v8 = *(_DWORD *)(a2 + 32);
      }
      else if ((v10 & 0x3003) != 0)
      {
        *v8 = 0;
      }
      else
      {
        *v8 = *(_DWORD *)(a2 + 32);
        WebCore::Length::ref(v8);
      }
    }
    v11 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v11;
    v12 = (int *)(a1 + 56);
    if (*(_BYTE *)(a1 + 60) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
      v12 = (int *)(a1 + 56);
    }
    v13 = *(unsigned __int8 *)(a2 + 60);
    *(_BYTE *)(a1 + 60) = v13;
    *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
    if (v13 <= 0xD)
    {
      v14 = 1 << v13;
      if ((v14 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
        *v12 = *(_DWORD *)(a2 + 56);
      }
      else if ((v14 & 0x3003) != 0)
      {
        *v12 = 0;
      }
      else
      {
        *v12 = *(_DWORD *)(a2 + 56);
        WebCore::Length::ref(v12);
      }
    }
  }
  v15 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v15;
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  return a1;
}

WebCore::GridLength *WebCore::GridLength::GridLength(WebCore::GridLength *this, const WebCore::GridLength *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)this = 0;
  *(_WORD *)((char *)this + 5) = 0;
  v4 = *((unsigned __int8 *)a2 + 4);
  *((_BYTE *)this + 4) = v4;
  *((_BYTE *)this + 5) = *((_BYTE *)a2 + 5);
  if (v4 <= 0xD)
  {
    v5 = 1 << v4;
    if ((v5 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 6) = *((_BYTE *)a2 + 6);
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else if ((v5 & 0x3003) != 0)
    {
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = *(_DWORD *)a2;
      WebCore::Length::ref((int *)this);
    }
  }
  v6 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v6;
  return this;
}

int *WebCore::Style::BuilderConverter::convertGridTrackSizeList(int *this, WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  int *v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const WebCore::CSSValue **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned __int8 v39;
  char v40;
  unsigned __int8 v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned __int8 v45;
  char v46;
  unsigned __int8 v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned __int8 v51;
  char v52;
  unsigned __int8 v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  uint64_t v57;

  v5 = this;
  v57 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16);
  if ((v6 & 0x3F800) != 0x1D800)
  {
    if ((v6 & 0x3F800) == 0 && (*((_WORD *)a3 + 2) & 0x7F) == 0x50)
      return WebCore::RenderStyle::initialGridAutoColumns((uint64_t *)this);
    WebCore::Style::BuilderConverter::createGridTrackSize((WebCore::Style::BuilderConverter *)&v37, a3, a2);
    this = (int *)WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v5, (uint64_t)&v37, 1uLL);
    if (v51 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v50);
    }
    if (v45 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44);
    }
    if (v39 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v38);
    }
    return this;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v7 = *((_DWORD *)a3 + 2);
  if (v7)
  {
    if (v7 >= 0x2E8BA2F)
    {
      __break(0xC471u);
LABEL_72:
      JUMPOUT(0x1951DDAA8);
    }
    v8 = 88 * v7;
    this = (int *)WTF::fastMalloc((WTF *)(88 * v7));
    v5[2] = (v8 & 0xFFFFFFF8) / 0x58;
    *(_QWORD *)v5 = this;
    v9 = *((_DWORD *)a3 + 2);
    if (v9)
    {
      v10 = 0;
      v11 = 0;
      while (1)
      {
        if (v10 > 3)
        {
          if (*((_DWORD *)a3 + 2) <= v10)
          {
            __break(0xC471u);
            goto LABEL_72;
          }
          v12 = (const WebCore::CSSValue **)(*((_QWORD *)a3 + 6) + 8 * (v11 - 4));
        }
        else
        {
          v12 = (const WebCore::CSSValue **)((char *)a3 + 8 * v11 + 16);
        }
        this = WebCore::Style::BuilderConverter::createGridTrackSize((WebCore::Style::BuilderConverter *)&v37, *v12, a2);
        v13 = v5[3];
        v14 = *(_QWORD *)v5;
        v15 = *(_QWORD *)v5 + 88 * v13;
        *(_DWORD *)v15 = v37;
        *(_DWORD *)(v15 + 8) = 0;
        v16 = (unsigned int *)(v15 + 8);
        *(_WORD *)(v15 + 13) = 0;
        v17 = v39;
        *(_BYTE *)(v15 + 12) = v39;
        *(_BYTE *)(v15 + 13) = v40;
        if (v17 - 2 < 9)
          break;
        if (v17 <= 0xD)
        {
          if (((1 << v17) & 0x3003) != 0)
          {
            *v16 = 0;
          }
          else if (v17 == 11)
          {
            v34 = v38;
            v38 = 0;
LABEL_30:
            *v16 = v34;
          }
        }
LABEL_18:
        v39 = 0;
        v20 = v14 + 88 * v13;
        v21 = v42;
        v22 = v43;
        *(_DWORD *)(v20 + 32) = 0;
        v23 = v20 + 32;
        *(_DWORD *)(v23 - 8) = v22;
        *(_QWORD *)(v23 - 16) = v21;
        *(_WORD *)(v23 + 5) = 0;
        v24 = v45;
        *(_BYTE *)(v23 + 4) = v45;
        *(_BYTE *)(v23 + 5) = v46;
        if (v24 - 2 < 9)
        {
          v25 = v47;
          *(_BYTE *)(v23 + 6) = v47;
          if (v25)
          {
            *(_DWORD *)v23 = v44;
            goto LABEL_21;
          }
          v35 = v44;
          goto LABEL_32;
        }
        if (v24 <= 0xD)
        {
          if (((1 << v24) & 0x3003) != 0)
          {
            *(_DWORD *)v23 = 0;
          }
          else if (v24 == 11)
          {
            v35 = v44;
            v44 = 0;
LABEL_32:
            *(_DWORD *)v23 = v35;
          }
        }
LABEL_21:
        v45 = 0;
        v26 = v14 + 88 * v13;
        v27 = v48;
        v28 = v49;
        *(_DWORD *)(v26 + 56) = 0;
        v29 = v26 + 56;
        *(_DWORD *)(v29 - 8) = v28;
        *(_QWORD *)(v29 - 16) = v27;
        *(_WORD *)(v29 + 5) = 0;
        v30 = v51;
        *(_BYTE *)(v29 + 4) = v51;
        *(_BYTE *)(v29 + 5) = v52;
        if (v30 - 2 >= 9)
        {
          if (v30 > 0xD)
            goto LABEL_24;
          if (((1 << v30) & 0x3003) != 0)
          {
            *(_DWORD *)v29 = 0;
            goto LABEL_24;
          }
          if (v30 != 11)
            goto LABEL_24;
          v36 = v50;
          v50 = 0;
          goto LABEL_34;
        }
        v31 = v53;
        *(_BYTE *)(v29 + 6) = v53;
        if (!v31)
        {
          v36 = v50;
LABEL_34:
          *(_DWORD *)v29 = v36;
          goto LABEL_24;
        }
        *(_DWORD *)v29 = v50;
LABEL_24:
        v51 = 0;
        v32 = v14 + 88 * v13;
        v33 = v54;
        *(_DWORD *)(v32 + 72) = v55;
        *(_QWORD *)(v32 + 64) = v33;
        *(_WORD *)(v32 + 80) = v56;
        ++v5[3];
        if (v51 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v50);
        }
        if (v45 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44);
        }
        if (v39 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v38);
        }
        v10 = v11 + 1;
        v11 = (v11 + 1);
        if (v9 == v10)
          return this;
      }
      v18 = (unsigned __int8 *)(v15 + 14);
      v19 = v41;
      *v18 = v41;
      if (v19)
      {
        *v16 = v38;
        goto LABEL_18;
      }
      v34 = v38;
      goto LABEL_30;
    }
  }
  return this;
}

int *WebCore::Style::BuilderConverter::createGridTrackSize(WebCore::Style::BuilderConverter *this, const WebCore::CSSValue *a2, WebCore::Style::BuilderState *a3)
{
  int v6;
  WebCore::Style::BuilderConverter *v7;
  int v8;
  int *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  unsigned int v16[2];
  uint64_t v17;
  int v18;

  v6 = (*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800;
  if (!v6)
  {
    WebCore::Style::BuilderConverter::createGridTrackBreadth((WebCore::Style::BuilderConverter *)v16, a2, a3);
LABEL_3:
    v7 = this;
    v8 = 0;
LABEL_4:
    result = (int *)WebCore::GridTrackSize::GridTrackSize((uint64_t)v7, (uint64_t)v16, v8);
    goto LABEL_5;
  }
  if (v6 != 122880)
  {
    memset(v16, 0, 7);
    v17 = 0;
    v18 = 1;
    goto LABEL_3;
  }
  v10 = *((_DWORD *)a2 + 2);
  if (v10 != 2)
  {
    if (v10 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1951DDCA8);
    }
    v13 = *((_QWORD *)a2 + 2);
    if (((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1951DDD08);
    }
    WebCore::Style::BuilderConverter::createGridTrackBreadth((WebCore::Style::BuilderConverter *)v16, (const WebCore::CSSPrimitiveValue *)v13, a3);
    v7 = this;
    v8 = 2;
    goto LABEL_4;
  }
  v11 = *((_QWORD *)a2 + 2);
  if (((*(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1951DDCC8);
  }
  WebCore::Style::BuilderConverter::createGridTrackBreadth((WebCore::Style::BuilderConverter *)v16, (const WebCore::CSSPrimitiveValue *)v11, a3);
  v12 = *((_QWORD *)a2 + 3);
  if (((*(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1951DDCE8);
  }
  WebCore::Style::BuilderConverter::createGridTrackBreadth((WebCore::Style::BuilderConverter *)&v14, (const WebCore::CSSPrimitiveValue *)v12, a3);
  result = (int *)WebCore::GridTrackSize::GridTrackSize(this, (const WebCore::GridLength *)v16, (const WebCore::GridLength *)&v14);
  if (v15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14);
  }
LABEL_5:
  if (LOBYTE(v16[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16[0]);
  }
  return result;
}

void WebCore::Style::BuilderConverter::createGridTrackBreadth(WebCore::Style::BuilderConverter *this, const WebCore::CSSPrimitiveValue *a2, WebCore::Style::BuilderState *a3)
{
  int v6;
  _QWORD *v8;
  void *v9;
  _BOOL4 v10;
  WTF *v11;
  WTF *v12;
  __n128 v13;
  __int16 v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  void *v23;
  WTF *v24;
  void *v25;
  void *v26;
  int v27;
  __int16 v28;
  double v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  int v36;
  double v37;
  float v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  double v43;
  double v44;
  _DWORD v45[2];
  WTF *v46[2];
  WTF *v47[2];
  __int16 v48;
  uint64_t v49;
  WTF *v50;

  v6 = *((_WORD *)a2 + 2) & 0x7F;
  if (v6 != 80)
    goto LABEL_2;
  v27 = *((unsigned __int16 *)a2 + 4);
  if ((v27 - 549) <= 1)
  {
    LODWORD(v46[0]) = 0;
    v28 = 7;
  }
  else
  {
    if ((v27 - 551) > 1)
    {
LABEL_2:
      if ((v6 - 63) > 0x11 || ((1 << (v6 - 63)) & 0x34001) == 0)
      {
        if (v6 == 73)
        {
          v33 = *(unsigned __int8 **)(*((_QWORD *)a2 + 1) + 8);
          v34 = v33[12];
          if (v34 != 1 && (v34 - 5) > 3)
            goto LABEL_9;
          v6 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v33 + 72))(v33);
        }
        if (v6 == 59)
        {
          if ((*((_WORD *)a2 + 2) & 0x7F) == 0x49)
          {
            v39 = *((_QWORD *)a2 + 1);
            v46[0] = 0;
            v43 = WebCore::CSSCalcValue::doubleValue(v39, (uint64_t)v46);
            if (v46[0])
              WTF::fastFree((WTF *)((char *)v46[0] - 16), v40);
            v29 = v43;
          }
          else
          {
            v29 = *((double *)a2 + 1);
          }
          *(_DWORD *)((char *)this + 3) = 0;
          *(_DWORD *)this = 0;
          *((double *)this + 1) = v29;
          *((_DWORD *)this + 4) = 1;
          return;
        }
      }
LABEL_9:
      v8 = (_QWORD *)((char *)a3 + 64);
      v48 = 0;
      *(_OWORD *)v46 = 0u;
      *(_OWORD *)v47 = 0u;
      WebCore::CSSValue::collectComputedStyleDependencies((uint64_t)a2, (WebCore::ComputedStyleDependencies *)v46);
      v10 = (!HIDWORD(v47[1]) || *((_QWORD *)a3 + 9))
         && (!HIDWORD(v46[1]) || *v8)
         && (!(_BYTE)v48 || *((_QWORD *)a3 + 12))
         && (!HIBYTE(v48) || *((_QWORD *)a3 + 11));
      v11 = v47[0];
      if (v47[0])
      {
        v47[0] = 0;
        LODWORD(v47[1]) = 0;
        WTF::fastFree(v11, v9);
      }
      v12 = v46[0];
      if (v46[0])
      {
        v46[0] = 0;
        LODWORD(v46[1]) = 0;
        WTF::fastFree(v12, v9);
      }
      if (!v10)
        goto LABEL_55;
      if (WebCore::CSSPrimitiveValue::isLength(a2))
      {
        WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>((uint64_t)a2, (uint64_t)v8, (uint64_t)v45, v13);
        v30 = LOBYTE(v45[1]);
        if (LOBYTE(v45[1]) == 13)
          goto LABEL_55;
        *((_BYTE *)this + 6) = 0;
        v31 = (char *)this + 6;
        *(_DWORD *)this = 0;
        *((_BYTE *)this + 4) = v30;
        *((_BYTE *)this + 5) = BYTE1(v45[1]);
        if ((v30 - 2) >= 9)
        {
          if (v30 == 11)
          {
LABEL_37:
            v25 = (void *)v45[0];
            *(_DWORD *)this = v45[0];
            WebCore::Length::ref((int *)this);
            *((_QWORD *)this + 1) = 0;
            *((_DWORD *)this + 4) = 0;
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            v26 = v25;
LABEL_40:
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v26);
            return;
          }
          goto LABEL_49;
        }
LABEL_81:
        *v31 = BYTE2(v45[1]);
        *(_DWORD *)this = v45[0];
        goto LABEL_49;
      }
      v14 = *((_WORD *)a2 + 2);
      v15 = v14 & 0x7F;
      if ((v15 - 63) > 0x11 || ((1 << (v15 - 63)) & 0x34001) == 0)
      {
        if (v15 != 73)
          goto LABEL_23;
        v35 = *(unsigned __int8 **)(*((_QWORD *)a2 + 1) + 8);
        v36 = v35[12];
        if (v36 == 1)
          goto LABEL_67;
        if (v36 == 2)
        {
LABEL_78:
          if ((v14 & 0x7F) == 0x49)
          {
            v41 = *((_QWORD *)a2 + 1);
            v46[0] = 0;
            v44 = WebCore::CSSCalcValue::doubleValue(v41, (uint64_t)v46);
            if (v46[0])
              WTF::fastFree((WTF *)((char *)v46[0] - 16), v42);
            v37 = v44;
          }
          else
          {
            v37 = *((double *)a2 + 1);
          }
          v38 = v37;
          *(float *)v45 = v38;
          *(_WORD *)((char *)&v45[1] + 1) = 256;
          v31 = (char *)this + 6;
          *((_WORD *)this + 2) = 3;
          goto LABEL_81;
        }
        if ((v36 - 5) <= 3)
        {
LABEL_67:
          v15 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v35 + 72))(v35);
          v14 = *((_WORD *)a2 + 2);
LABEL_23:
          if (v15 != 3)
            goto LABEL_24;
          goto LABEL_78;
        }
      }
LABEL_24:
      v16 = v14 & 0x7F;
      if (v16 != 80)
      {
        if (v16 == 73)
        {
          v17 = *((_QWORD *)a2 + 1);
          v18 = *(_DWORD **)(v17 + 8);
          ++v18[2];
          (*(void (**)(WTF **__return_ptr, _DWORD *, _QWORD *))(*(_QWORD *)v18 + 32))(v46, v18, v8);
          v19 = *(_BYTE *)(v17 + 16);
          v20 = WTF::fastMalloc((WTF *)0x18);
          v21 = v46[0];
          *(_DWORD *)v20 = 1;
          *(_QWORD *)(v20 + 8) = v21;
          *(_BYTE *)(v20 + 16) = v19;
          v46[0] = 0;
          if (v18[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          else
            --v18[2];
          v45[0] = 0;
          BYTE1(v45[1]) = 0;
          {
            v22 = WebCore::calculationValues(void)::map;
          }
          else
          {
            v22 = 1;
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v49 = 0;
          v50 = (WTF *)v20;
          while (1)
          {
            if ((v22 - 1) <= 0xFFFFFFFD)
            {
              WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::add<WebCore::CalculationValueMap::Entry&>(&qword_1ECE90C98, &WebCore::calculationValues(void)::map, &v49, (uint64_t)v46);
              v22 = WebCore::calculationValues(void)::map;
              if (LOBYTE(v47[0]))
                break;
            }
            WebCore::calculationValues(void)::map = ++v22;
          }
          ++WebCore::calculationValues(void)::map;
          v24 = v50;
          v50 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              v32 = *((_QWORD *)v24 + 1);
              *((_QWORD *)v24 + 1) = 0;
              if (v32)
                (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
              WTF::fastFree(v24, v23);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
          v45[0] = v22;
          *((_BYTE *)this + 6) = 0;
          *((_BYTE *)this + 4) = 11;
          *((_BYTE *)this + 5) = BYTE1(v45[1]);
          goto LABEL_37;
        }
        goto LABEL_55;
      }
      if (*((_WORD *)a2 + 4) == 394)
      {
        memset(v45, 0, 7);
        *(_DWORD *)this = 0;
        *((_BYTE *)this + 6) = 0;
        *((_BYTE *)this + 4) = 0;
        *((_BYTE *)this + 5) = BYTE1(v45[1]);
LABEL_49:
        *((_QWORD *)this + 1) = 0;
        *((_DWORD *)this + 4) = 0;
        return;
      }
LABEL_55:
      LODWORD(v46[0]) = 0;
      WORD2(v46[0]) = 4;
      BYTE6(v46[0]) = 1;
      goto LABEL_56;
    }
    LODWORD(v46[0]) = 0;
    v28 = 8;
  }
  WORD2(v46[0]) = v28;
  BYTE6(v46[0]) = 0;
LABEL_56:
  WebCore::GridLength::GridLength(this, (const WebCore::Length *)v46);
  if (BYTE4(v46[0]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v26 = (void *)LODWORD(v46[0]);
    goto LABEL_40;
  }
}

WebCore::GridTrackSize *WebCore::GridTrackSize::GridTrackSize(WebCore::GridTrackSize *this, const WebCore::GridLength *a2, const WebCore::GridLength *a3)
{
  int *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  int v18;
  BOOL v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;

  *(_DWORD *)this = 1;
  *((_DWORD *)this + 2) = 0;
  v6 = (int *)((char *)this + 8);
  *(_WORD *)((char *)this + 13) = 0;
  v7 = *((unsigned __int8 *)a2 + 4);
  *((_BYTE *)this + 12) = v7;
  *((_BYTE *)this + 13) = *((_BYTE *)a2 + 5);
  if (v7 <= 0xD)
  {
    if (((1 << v7) & 0x7FC) != 0)
    {
      *((_BYTE *)this + 14) = *((_BYTE *)a2 + 6);
      *v6 = *(_DWORD *)a2;
    }
    else if (((1 << v7) & 0x3003) != 0)
    {
      *v6 = 0;
    }
    else
    {
      *v6 = *(_DWORD *)a2;
      WebCore::Length::ref(v6);
    }
  }
  v8 = *((_QWORD *)a2 + 1);
  v9 = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 8) = 0;
  v10 = (int *)((char *)this + 32);
  *((_DWORD *)this + 6) = v9;
  *((_QWORD *)this + 2) = v8;
  *(_WORD *)((char *)this + 37) = 0;
  v11 = *((unsigned __int8 *)a3 + 4);
  *((_BYTE *)this + 36) = v11;
  *((_BYTE *)this + 37) = *((_BYTE *)a3 + 5);
  if (v11 <= 0xD)
  {
    v12 = 1 << v11;
    if ((v12 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 38) = *((_BYTE *)a3 + 6);
      *v10 = *(_DWORD *)a3;
    }
    else if ((v12 & 0x3003) != 0)
    {
      *v10 = 0;
    }
    else
    {
      *v10 = *(_DWORD *)a3;
      WebCore::Length::ref(v10);
    }
  }
  v13 = *((_QWORD *)a3 + 1);
  *((_DWORD *)this + 12) = *((_DWORD *)a3 + 4);
  *((_QWORD *)this + 5) = v13;
  *((_WORD *)this + 30) = 4;
  *((_BYTE *)this + 62) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  if (*((_DWORD *)this + 6))
  {
    v16 = 0;
    v15 = *((_WORD *)this + 40) & 0xFFF6;
  }
  else
  {
    v14 = *((unsigned __int8 *)this + 12);
    v15 = *((_WORD *)this + 40) & 0xFFF6 | (v14 == 0) | (8 * (v14 == 7));
    v16 = 4 * (v14 == 8);
  }
  v17 = v16 | v15 & 0xFFFB;
  if (*((_DWORD *)this + 12))
  {
    v21 = 0;
    v20 = v17 & 0xFFCD;
  }
  else
  {
    v18 = *((unsigned __int8 *)this + 36);
    v19 = (v18 & 0xFFFFFFF7) == 3 || v18 == 4;
    v20 = v17 & 0xFFCD | (16 * (v18 == 8)) | (32 * (v18 == 7)) | (2 * (*((_BYTE *)this + 36) == 0));
    if (v19)
      v21 = 256;
    else
      v21 = 0;
  }
  if ((v20 & 0xD) != 0)
    v22 = 64;
  else
    v22 = (*(_DWORD *)this == 2) << 6;
  if ((v20 & 0x32) != 0)
    v23 = 128;
  else
    v23 = (*(_DWORD *)this == 2) << 7;
  *((_WORD *)this + 40) = v20 & 0xFE3F | v21 | v22 | v23;
  return this;
}

uint64_t WebCore::RenderStyle::setGridItemColumnEnd(WebCore::RenderStyle *this, const WebCore::GridPosition *a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  uint64_t v5;
  uint64_t result;
  WTF *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v11;
  WebCore::StyleRareNonInheritedData *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  WTF::StringImpl **v20;
  WTF *v21;
  void *v22;

  v4 = (WTF **)((char *)this + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 88);
  if (__PAIR64__(*(_DWORD *)(v5 + 28), *(unsigned __int8 *)(v5 + 24)) != __PAIR64__(*((_DWORD *)a2 + 1), *(unsigned __int8 *)a2)|| (result = WTF::equal(*(WTF **)(v5 + 32), *((const WTF::StringImpl **)a2 + 1), a3), (result & 1) == 0))
  {
    v7 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v4);
    v9 = (_DWORD *)*((_QWORD *)v7 + 5);
    if (*v9 == 1)
    {
      v11 = *((_QWORD *)v7 + 5);
    }
    else
    {
      v10 = v7;
      v11 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v11, (uint64_t)v9);
      v12 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v10 + 5);
      *((_QWORD *)v10 + 5) = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v12, v8);
          WTF::fastFree(v21, v22);
          v11 = *((_QWORD *)v10 + 5);
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
    }
    v13 = *(_QWORD *)(v11 + 88);
    if (*(_DWORD *)v13 == 1)
    {
      result = *(_QWORD *)(v11 + 88);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = *(_QWORD *)(v13 + 8);
      v16 = *(_DWORD **)(v13 + 16);
      if (v16)
        *v16 += 2;
      *(_QWORD *)(result + 16) = v16;
      *(_QWORD *)(result + 24) = *(_QWORD *)(v13 + 24);
      v17 = *(_DWORD **)(v13 + 32);
      if (v17)
        *v17 += 2;
      *(_QWORD *)(result + 32) = v17;
      *(_QWORD *)(result + 40) = *(_QWORD *)(v13 + 40);
      v18 = *(_DWORD **)(v13 + 48);
      if (v18)
        *v18 += 2;
      *(_QWORD *)(result + 48) = v18;
      *(_QWORD *)(result + 56) = *(_QWORD *)(v13 + 56);
      v19 = *(_DWORD **)(v13 + 64);
      if (v19)
        *v19 += 2;
      *(_QWORD *)(result + 64) = v19;
      v20 = *(WTF::StringImpl ***)(v11 + 88);
      *(_QWORD *)(v11 + 88) = result;
      if (v20)
      {
        WTF::RefCounted<WebCore::StyleGridItemData>::deref(v20, v8);
        result = *(_QWORD *)(v11 + 88);
      }
    }
    *(_QWORD *)(result + 24) = *(_QWORD *)a2;
    v14 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v14)
      *v14 += 2;
    v15 = *(WTF::StringImpl **)(result + 32);
    *(_QWORD *)(result + 32) = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        return WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WTF::RefCounted<WebCore::StyleGridItemData>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[8];
    *((_QWORD *)v2 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 6);
    *((_QWORD *)v2 + 6) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

_DWORD *WebCore::Style::BuilderConverter::createGridPosition(_DWORD *this, const WebCore::CSSValue *a2, WebCore::GridPosition *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  double v12;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  _DWORD *v22;
  uint64_t v23;

  v4 = (uint64_t)this;
  v5 = *((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16);
  if ((v5 & 0x3F800) == 0x1D800)
  {
    v6 = *((_QWORD *)this + 2);
    v7 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
    if ((v7 & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1951DEA94);
    }
    if ((*(_WORD *)(v6 + 4) & 0x7F) == 0x50 && *(_WORD *)(v6 + 8) == 894)
    {
      if (this[2] == 1)
      {
        v14 = 0;
        v13 = 0;
        v23 = 0;
        goto LABEL_60;
      }
      v6 = *((_QWORD *)this + 3);
      v7 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
      if ((v7 & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1951DEB64);
      }
      v9 = 2;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = v7 & 0x7F;
    if ((v10 - 63) <= 0x11 && ((1 << ((v7 & 0x7F) - 63)) & 0x34001) != 0)
      goto LABEL_55;
    if (v10 == 73)
    {
      v17 = *(unsigned __int8 **)(*(_QWORD *)(v6 + 8) + 8);
      v18 = v17[12];
      if (v18 != 1 && (v18 - 5) > 3)
        goto LABEL_55;
      v10 = (*(uint64_t (**)(unsigned __int8 *, const WebCore::CSSValue *, WebCore::GridPosition *))(*(_QWORD *)v17 + 72))(v17, a2, a3);
    }
    if (v10 == 2)
    {
      if ((*(_WORD *)(v6 + 4) & 0x7F) == 0x49)
      {
        v20 = *(_QWORD *)(v6 + 8);
        v23 = 0;
        v21 = WebCore::CSSCalcValue::doubleValue(v20, (uint64_t)&v23);
        if (v23)
          WTF::fastFree((WTF *)(v23 - 16), a2);
        v12 = v21;
      }
      else
      {
        v12 = *(double *)(v6 + 8);
      }
      if (v12 >= 2147483650.0)
      {
        v13 = 0x7FFFFFFF;
      }
      else if (v12 > -2147483650.0)
      {
        v13 = (int)v12;
      }
      else
      {
        v13 = 0x80000000;
      }
      if (v9 == *(_DWORD *)(v4 + 8))
      {
        v14 = 0;
        v23 = 0;
        if ((v8 & 1) == 0)
          goto LABEL_20;
        goto LABEL_60;
      }
      v6 = *(_QWORD *)(v4 + 16 + 8 * v9);
      if (((*(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1951DEB44);
      }
LABEL_56:
      v23 = 0;
      if ((*(_WORD *)(v6 + 4) & 0x7F) == 0x3F)
      {
        WebCore::CSSPrimitiveValue::stringValue((uint64_t *)v6, &v22);
        v14 = v22;
        v23 = (uint64_t)v22;
        if ((v8 & 1) != 0)
          goto LABEL_60;
LABEL_20:
        *(_BYTE *)a2 = 1;
        if (byte_1EE2F9580)
          v15 = WebCore::GridPosition::gMaxPositionForTesting;
        else
          v15 = 1000000;
        if (v13 <= -v15)
          v16 = -v15;
        else
          v16 = v13;
        if (v15 > v13)
          v15 = v16;
        *((_DWORD *)a2 + 1) = v15;
        if (v14)
          *v14 += 2;
        this = (_DWORD *)*((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v14;
        if (this)
        {
          if (*this == 2)
            this = (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          else
            *this -= 2;
        }
        goto LABEL_33;
      }
      v14 = 0;
      if (!v8)
        goto LABEL_20;
LABEL_60:
      if (v13 <= 1)
        v19 = 1;
      else
        v19 = v13;
      this = (_DWORD *)WebCore::GridPosition::setSpanPosition((uint64_t)a2, (WTF::StringImpl *)v19, (const WTF::String *)&v23);
LABEL_33:
      v23 = 0;
      if (!v14)
        return this;
      if (*v14 != 2)
      {
        *v14 -= 2;
        return this;
      }
      this = v14;
      return (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    }
LABEL_55:
    v13 = 0;
    goto LABEL_56;
  }
  if ((v5 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1951DEA74);
  }
  if ((this[1] & 0x7F) == 0x3F)
  {
    WebCore::CSSPrimitiveValue::stringValue((uint64_t *)this, &v23);
    WebCore::GridPosition::setNamedGridArea((uint64_t)a2, (const WTF::String *)&v23);
    this = (_DWORD *)v23;
    v23 = 0;
    if (this)
    {
      if (*this != 2)
      {
        *this -= 2;
        return this;
      }
      return (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setGridItemColumnStart(WebCore::RenderStyle *this, const WebCore::GridPosition *a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  uint64_t v5;
  uint64_t result;
  WTF *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v11;
  WebCore::StyleRareNonInheritedData *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  WTF::StringImpl **v20;
  WTF *v21;
  void *v22;

  v4 = (WTF **)((char *)this + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 88);
  if (__PAIR64__(*(_DWORD *)(v5 + 12), *(unsigned __int8 *)(v5 + 8)) != __PAIR64__(*((_DWORD *)a2 + 1), *(unsigned __int8 *)a2)|| (result = WTF::equal(*(WTF **)(v5 + 16), *((const WTF::StringImpl **)a2 + 1), a3), (result & 1) == 0))
  {
    v7 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v4);
    v9 = (_DWORD *)*((_QWORD *)v7 + 5);
    if (*v9 == 1)
    {
      v11 = *((_QWORD *)v7 + 5);
    }
    else
    {
      v10 = v7;
      v11 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v11, (uint64_t)v9);
      v12 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v10 + 5);
      *((_QWORD *)v10 + 5) = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v12, v8);
          WTF::fastFree(v21, v22);
          v11 = *((_QWORD *)v10 + 5);
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
    }
    v13 = *(_QWORD *)(v11 + 88);
    if (*(_DWORD *)v13 == 1)
    {
      result = *(_QWORD *)(v11 + 88);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = *(_QWORD *)(v13 + 8);
      v16 = *(_DWORD **)(v13 + 16);
      if (v16)
        *v16 += 2;
      *(_QWORD *)(result + 16) = v16;
      *(_QWORD *)(result + 24) = *(_QWORD *)(v13 + 24);
      v17 = *(_DWORD **)(v13 + 32);
      if (v17)
        *v17 += 2;
      *(_QWORD *)(result + 32) = v17;
      *(_QWORD *)(result + 40) = *(_QWORD *)(v13 + 40);
      v18 = *(_DWORD **)(v13 + 48);
      if (v18)
        *v18 += 2;
      *(_QWORD *)(result + 48) = v18;
      *(_QWORD *)(result + 56) = *(_QWORD *)(v13 + 56);
      v19 = *(_DWORD **)(v13 + 64);
      if (v19)
        *v19 += 2;
      *(_QWORD *)(result + 64) = v19;
      v20 = *(WTF::StringImpl ***)(v11 + 88);
      *(_QWORD *)(v11 + 88) = result;
      if (v20)
      {
        WTF::RefCounted<WebCore::StyleGridItemData>::deref(v20, v8);
        result = *(_QWORD *)(v11 + 88);
      }
    }
    *(_QWORD *)(result + 8) = *(_QWORD *)a2;
    v14 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v14)
      *v14 += 2;
    v15 = *(WTF::StringImpl **)(result + 16);
    *(_QWORD *)(result + 16) = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        return WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setGridItemRowEnd(WebCore::RenderStyle *this, const WebCore::GridPosition *a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  uint64_t v5;
  uint64_t result;
  WTF *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v11;
  WebCore::StyleRareNonInheritedData *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  WTF::StringImpl **v20;
  WTF *v21;
  void *v22;

  v4 = (WTF **)((char *)this + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 88);
  if (__PAIR64__(*(_DWORD *)(v5 + 60), *(unsigned __int8 *)(v5 + 56)) != __PAIR64__(*((_DWORD *)a2 + 1), *(unsigned __int8 *)a2)|| (result = WTF::equal(*(WTF **)(v5 + 64), *((const WTF::StringImpl **)a2 + 1), a3), (result & 1) == 0))
  {
    v7 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v4);
    v9 = (_DWORD *)*((_QWORD *)v7 + 5);
    if (*v9 == 1)
    {
      v11 = *((_QWORD *)v7 + 5);
    }
    else
    {
      v10 = v7;
      v11 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v11, (uint64_t)v9);
      v12 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v10 + 5);
      *((_QWORD *)v10 + 5) = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v12, v8);
          WTF::fastFree(v21, v22);
          v11 = *((_QWORD *)v10 + 5);
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
    }
    v13 = *(_QWORD *)(v11 + 88);
    if (*(_DWORD *)v13 == 1)
    {
      result = *(_QWORD *)(v11 + 88);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = *(_QWORD *)(v13 + 8);
      v16 = *(_DWORD **)(v13 + 16);
      if (v16)
        *v16 += 2;
      *(_QWORD *)(result + 16) = v16;
      *(_QWORD *)(result + 24) = *(_QWORD *)(v13 + 24);
      v17 = *(_DWORD **)(v13 + 32);
      if (v17)
        *v17 += 2;
      *(_QWORD *)(result + 32) = v17;
      *(_QWORD *)(result + 40) = *(_QWORD *)(v13 + 40);
      v18 = *(_DWORD **)(v13 + 48);
      if (v18)
        *v18 += 2;
      *(_QWORD *)(result + 48) = v18;
      *(_QWORD *)(result + 56) = *(_QWORD *)(v13 + 56);
      v19 = *(_DWORD **)(v13 + 64);
      if (v19)
        *v19 += 2;
      *(_QWORD *)(result + 64) = v19;
      v20 = *(WTF::StringImpl ***)(v11 + 88);
      *(_QWORD *)(v11 + 88) = result;
      if (v20)
      {
        WTF::RefCounted<WebCore::StyleGridItemData>::deref(v20, v8);
        result = *(_QWORD *)(v11 + 88);
      }
    }
    *(_QWORD *)(result + 56) = *(_QWORD *)a2;
    v14 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v14)
      *v14 += 2;
    v15 = *(WTF::StringImpl **)(result + 64);
    *(_QWORD *)(result + 64) = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        return WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setGridItemRowStart(WebCore::RenderStyle *this, const WebCore::GridPosition *a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  uint64_t v5;
  uint64_t result;
  WTF *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v11;
  WebCore::StyleRareNonInheritedData *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  WTF::StringImpl **v20;
  WTF *v21;
  void *v22;

  v4 = (WTF **)((char *)this + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 88);
  if (__PAIR64__(*(_DWORD *)(v5 + 44), *(unsigned __int8 *)(v5 + 40)) != __PAIR64__(*((_DWORD *)a2 + 1), *(unsigned __int8 *)a2)|| (result = WTF::equal(*(WTF **)(v5 + 48), *((const WTF::StringImpl **)a2 + 1), a3), (result & 1) == 0))
  {
    v7 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v4);
    v9 = (_DWORD *)*((_QWORD *)v7 + 5);
    if (*v9 == 1)
    {
      v11 = *((_QWORD *)v7 + 5);
    }
    else
    {
      v10 = v7;
      v11 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v11, (uint64_t)v9);
      v12 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v10 + 5);
      *((_QWORD *)v10 + 5) = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v12, v8);
          WTF::fastFree(v21, v22);
          v11 = *((_QWORD *)v10 + 5);
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
    }
    v13 = *(_QWORD *)(v11 + 88);
    if (*(_DWORD *)v13 == 1)
    {
      result = *(_QWORD *)(v11 + 88);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = *(_QWORD *)(v13 + 8);
      v16 = *(_DWORD **)(v13 + 16);
      if (v16)
        *v16 += 2;
      *(_QWORD *)(result + 16) = v16;
      *(_QWORD *)(result + 24) = *(_QWORD *)(v13 + 24);
      v17 = *(_DWORD **)(v13 + 32);
      if (v17)
        *v17 += 2;
      *(_QWORD *)(result + 32) = v17;
      *(_QWORD *)(result + 40) = *(_QWORD *)(v13 + 40);
      v18 = *(_DWORD **)(v13 + 48);
      if (v18)
        *v18 += 2;
      *(_QWORD *)(result + 48) = v18;
      *(_QWORD *)(result + 56) = *(_QWORD *)(v13 + 56);
      v19 = *(_DWORD **)(v13 + 64);
      if (v19)
        *v19 += 2;
      *(_QWORD *)(result + 64) = v19;
      v20 = *(WTF::StringImpl ***)(v11 + 88);
      *(_QWORD *)(v11 + 88) = result;
      if (v20)
      {
        WTF::RefCounted<WebCore::StyleGridItemData>::deref(v20, v8);
        result = *(_QWORD *)(v11 + 88);
      }
    }
    *(_QWORD *)(result + 40) = *(_QWORD *)a2;
    v14 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v14)
      *v14 += 2;
    v15 = *(WTF::StringImpl **)(result + 48);
    *(_QWORD *)(result + 48) = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        return WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setNamedGridArea(WebCore::RenderStyle *this, const WebCore::NamedGridAreaMap *a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  uint64_t result;
  WTF *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::StyleRareNonInheritedData *v11;
  const WebCore::StyleGridData *v12;
  WebCore::StyleGridData *v13;
  void *v14;
  WebCore::StyleGridData *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  v4 = (WTF **)((char *)this + 8);
  result = WTF::operator==<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 80) + 72), (uint64_t *)a2, a3);
  if ((result & 1) == 0)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 5);
    if (*v7 == 1)
    {
      v9 = *((_QWORD *)v6 + 5);
    }
    else
    {
      v8 = v6;
      v9 = WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v9, (uint64_t)v7);
      v11 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = v9;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v11, v10);
          WTF::fastFree(v18, v19);
          v9 = *((_QWORD *)v8 + 5);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
    }
    v12 = *(const WebCore::StyleGridData **)(v9 + 80);
    if (*(_DWORD *)v12 == 1)
    {
      v13 = *(WebCore::StyleGridData **)(v9 + 80);
    }
    else
    {
      v13 = (WebCore::StyleGridData *)WTF::fastMalloc((WTF *)0x108);
      WebCore::StyleGridData::StyleGridData(v13, v12);
      v15 = *(WebCore::StyleGridData **)(v9 + 80);
      *(_QWORD *)(v9 + 80) = v13;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::StyleGridData::~StyleGridData(v15, v14);
          WTF::fastFree(v20, v21);
          v13 = *(WebCore::StyleGridData **)(v9 + 80);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v25, (_QWORD **)a2);
    v17 = *((_QWORD *)v13 + 9);
    *((_QWORD *)v13 + 9) = v25;
    v25 = v17;
    if (v17)
    {
      v22 = *(unsigned int *)(v17 - 4);
      if ((_DWORD)v22)
      {
        v23 = (WTF::StringImpl **)v17;
        do
        {
          v24 = *v23;
          if (*v23 != (WTF::StringImpl *)-1)
          {
            *v23 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v16);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          v23 += 4;
          --v22;
        }
        while (v22);
      }
      return WTF::fastFree((WTF *)(v17 - 16), v16);
    }
  }
  return result;
}

BOOL WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>(WTF::StringImpl ***a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v4;
  int v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  _BOOL8 result;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;

  v4 = *a1;
  if (*a1)
    v5 = *((_DWORD *)v4 - 3);
  else
    v5 = 0;
  v6 = *a2;
  if (*a2)
    v7 = *(_DWORD *)(v6 - 12);
  else
    v7 = 0;
  if (v5 != v7)
    return 0;
  if (v4)
    v8 = &v4[3 * *((unsigned int *)v4 - 1)];
  else
    v8 = 0;
  if (v6)
    v9 = v6 + 24 * *(unsigned int *)(v6 - 4);
  else
    v9 = 0;
  if (!v4)
  {
    v10 = 0;
    LODWORD(v11) = 0;
LABEL_12:
    v12 = &v4[3 * v11];
    v4 = v10;
    goto LABEL_13;
  }
  v11 = *((unsigned int *)v4 - 1);
  v12 = &v4[3 * v11];
  if (!*((_DWORD *)v4 - 3))
  {
    v10 = &v4[3 * v11];
    goto LABEL_12;
  }
  if ((_DWORD)v11)
  {
    v16 = 24 * v11;
    while ((unint64_t)*v4 + 1 <= 1)
    {
      v4 += 3;
      v16 -= 24;
      if (!v16)
      {
        v4 = v12;
        break;
      }
    }
  }
LABEL_13:
  if (v8 != v4)
  {
    while (1)
    {
      v14 = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(a2, v4, a3);
      if (v9 == v14)
        return 0;
      result = WTF::operator==<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)(v4 + 1), v14 + 8);
      if (result)
      {
        v15 = v4 + 3;
        v4 = v12;
        if (v15 != v12)
        {
          v4 = v15;
          while ((unint64_t)*v4 + 1 <= 1)
          {
            v4 += 3;
            if (v4 == v12)
            {
              v4 = v12;
              break;
            }
          }
        }
        result = 1;
        if (v4 != v8)
          continue;
      }
      return result;
    }
  }
  return 1;
}

uint64_t WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  WTF **v9;
  int i;
  int v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v11)
  {
    v11 = v8 & v6;
    v9 = (WTF **)(v3 + 24 * (v8 & v6));
    v12 = *v9;
    if (*v9 == (WTF *)-1)
      goto LABEL_10;
    if (!v12)
      break;
    if ((WTF::equal(v12, *a2, a3) & 1) != 0)
      return (uint64_t)v9;
LABEL_10:
    ++i;
  }
  if (*a1)
    return *a1 + 24 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

BOOL WTF::operator==<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 12);
  return (_DWORD)v2 == *(_DWORD *)(a2 + 12) && memcmp(*(const void **)a1, *(const void **)a2, 4 * v2) == 0;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[3 * v3];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v3];
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v5 -= 24;
      if (!v5)
        return v4;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(uint64_t *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v11, a2);
  v4 = *a1;
  *a1 = v11;
  v11 = v4;
  if (v4)
  {
    v10 = v4;
    v6 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v6)
    {
      v7 = v4;
      do
      {
        v8 = *(WTF::StringImpl **)v7;
        if (*(_QWORD *)v7 != -1)
        {
          v9 = *(WTF **)(v7 + 8);
          if (v9)
          {
            *(_QWORD *)(v7 + 8) = 0;
            *(_DWORD *)(v7 + 16) = 0;
            WTF::fastFree(v9, v3);
            v8 = *(WTF::StringImpl **)v7;
          }
          *(_QWORD *)v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v3);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 24;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v10 - 16), v3);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  int v5;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  uint64_t *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;

  *a1 = 0;
  v3 = (_QWORD *)*a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v8 = WTF::fastZeroedMalloc((WTF *)(24 * v7 + 16));
      *a1 = v8 + 16;
      *(_DWORD *)(v8 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2);
      v10 = v9;
      v11 = a2;
      v13 = v12;
      v14 = *v11;
      v15 = v14 ? v14 + 24 * *(unsigned int *)(v14 - 4) : 0;
      if ((WTF::StringImpl **)v15 != v9)
      {
        do
        {
          v16 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, v10);
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v16, (WTF::StringImpl *)v10, v10);
          while (1)
          {
            v10 += 3;
            if (v10 == v13)
              break;
            if ((unint64_t)*v10 + 1 > 1)
              goto LABEL_12;
          }
          v10 = v13;
LABEL_12:
          ;
        }
        while (v10 != (WTF::StringImpl **)v15);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)*a2 + 4);
  if (v4 < 0x100)
    v5 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v5 = v4 >> 8;
  v6 = 0;
  do
  {
    v7 = v5 & v3;
    v5 = ++v6 + (v5 & v3);
  }
  while (*(_QWORD *)(v2 + 24 * v7));
  return v2 + 24 * v7;
}

WTF *WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v5 = *a3;
  if (*a3)
    *(_DWORD *)v5 += 2;
  v6 = *a1;
  *a1 = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 1), (WTF *)(a3 + 1));
}

WTF *WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_13:
    v12 = *(char **)v2;
    if (v5)
    {
      memmove(v12, *(const void **)a2, 4 * v5);
      v13 = *((unsigned int *)v2 + 3);
      v12 = *(char **)v2;
    }
    else
    {
      v13 = 0;
    }
    memcpy(&v12[4 * v13], (const void *)(*(_QWORD *)a2 + 4 * v13), *(_QWORD *)a2 + 4 * *((unsigned int *)a2 + 3) - (*(_QWORD *)a2 + 4 * v13));
    *((_DWORD *)v2 + 3) = *((_DWORD *)a2 + 3);
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_12;
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v7 = *((unsigned int *)a2 + 3);
  if (v6 >= v7)
  {
LABEL_12:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_13;
  }
  if (!(v7 >> 30))
  {
    v8 = *(char **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = (void *)WTF::fastMalloc((WTF *)(4 * v7));
    *((_DWORD *)v2 + 2) = v7;
    *(_QWORD *)v2 = v10;
    memcpy(v10, v8, 4 * v9);
    if (v8)
    {
      if (*(char **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree((WTF *)v8, v11);
    }
    goto LABEL_12;
  }
  __break(0xC471u);
  return result;
}

BOOL WTF::operator==<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>(uint64_t *a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12);
  else
    v5 = 0;
  v6 = *a2;
  if (*a2)
    v7 = *(_DWORD *)(v6 - 12);
  else
    v7 = 0;
  if (v5 != v7)
    return 0;
  if (v4)
    v8 = v4 + 32 * *(unsigned int *)(v4 - 4);
  else
    v8 = 0;
  if (v6)
    v9 = v6 + 32 * *(unsigned int *)(v6 - 4);
  else
    v9 = 0;
  if (!v4)
  {
    v10 = 0;
    v11 = 0;
LABEL_12:
    v12 = v4 + 32 * v11;
    v4 = v10;
    goto LABEL_13;
  }
  v11 = *(unsigned int *)(v4 - 4);
  v12 = v4 + 32 * v11;
  if (!*(_DWORD *)(v4 - 12))
  {
    v10 = v4 + 32 * v11;
    goto LABEL_12;
  }
  if ((_DWORD)v11)
  {
    v14 = 32 * v11;
    while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
    {
      v4 += 32;
      v14 -= 32;
      if (!v14)
      {
        v4 = v12;
        break;
      }
    }
  }
LABEL_13:
  if (v8 != v4)
  {
    while (1)
    {
      v15 = WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::find(a2, (WTF::StringImpl **)v4, a3);
      if (v9 == v15)
        return 0;
      result = WebCore::GridArea::operator==((_DWORD *)(v4 + 8), (_DWORD *)(v15 + 8));
      if (result)
      {
        v16 = v4 + 32;
        v4 = v12;
        if (v16 != v12)
        {
          v4 = v16;
          while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
          {
            v4 += 32;
            if (v4 == v12)
            {
              v4 = v12;
              break;
            }
          }
        }
        result = 1;
        if (v4 != v8)
          continue;
      }
      return result;
    }
  }
  return 1;
}

_QWORD *WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[4 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[4 * v2];
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 4;
      v4 -= 32;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::find(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v11)
  {
    v11 = v8 & v6;
    v12 = *(WTF **)(v3 + 32 * v11);
    if (v12 == (WTF *)-1)
      goto LABEL_10;
    if (!v12)
      break;
    if ((WTF::equal(v12, *a2, a3) & 1) != 0)
      return v3 + 32 * v11;
LABEL_10:
    ++i;
  }
  if (*a1)
    return *a1 + 32 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

BOOL WebCore::GridArea::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[4 * v3];
  if (!*((_DWORD *)result - 3))
    return &result[4 * v3];
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 4;
      v5 -= 32;
      if (!v5)
        return v4;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v5;
  unsigned int v7;
  uint64_t Table;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      Table = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(v7);
      *a1 = Table;
      *(_DWORD *)(Table - 4) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
      v10 = v9;
      v12 = v11;
      v13 = *a2 ? (uint64_t)&(*a2)[4 * *((unsigned int *)*a2 - 1)] : 0;
      if ((WTF::StringImpl **)v13 != v9)
      {
        do
        {
          v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, v10);
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea> const&>(v14, (WTF::StringImpl *)v10, (uint64_t)v10);
          while (1)
          {
            v10 += 4;
            if (v10 == v12)
              break;
            if ((unint64_t)*v10 + 1 > 1)
              goto LABEL_12;
          }
          v10 = v12;
LABEL_12:
          ;
        }
        while (v10 != (WTF::StringImpl **)v13);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1;
  v3 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  v4 = v3 + 16;
  if (a1)
  {
    v5 = v3 + 24;
    do
    {
      *(_QWORD *)(v5 - 8) = 0;
      WTF::GenericHashTraits<WebCore::GridArea>::constructEmptyValue<WTF::HashTraits<WebCore::GridArea>>(v5);
      v5 += 32;
      --v2;
    }
    while (v2);
  }
  return v4;
}

uint64_t WTF::GenericHashTraits<WebCore::GridArea>::constructEmptyValue<WTF::HashTraits<WebCore::GridArea>>(uint64_t result)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v1 = 1000000;
  if (v1 >= 1)
    v2 = 1;
  else
    v2 = v1;
  if (-v1 > v2 - 1)
    v3 = -v1;
  else
    v3 = (v2 - 1);
  LODWORD(v4) = 1 - v1;
  if ((int)v4 <= v2)
    v4 = v2;
  else
    v4 = v4;
  v5 = v3 | (v4 << 32);
  *(_QWORD *)result = v5;
  *(_DWORD *)(result + 8) = 2;
  *(_QWORD *)(result + 12) = v5;
  *(_DWORD *)(result + 20) = 2;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)*a2 + 4);
  if (v4 < 0x100)
    v5 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v5 = v4 >> 8;
  v6 = 0;
  do
  {
    v7 = v5 & v3;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(v2 + 32 * v7));
  return v2 + 32 * v7;
}

__n128 WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea> const&>(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  _DWORD *v5;
  WTF::StringImpl *v6;
  __n128 result;

  v5 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v5 += 2;
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = *(__n128 *)(a3 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 24);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t WebCore::Style::BuilderConverter::createImplicitNamedGridLinesFromGridArea(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  _QWORD v36[3];

  result = (uint64_t)WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::begin(a1);
  v7 = (uint64_t *)result;
  v9 = v8;
  if (a1)
    v10 = &a1[4 * *((unsigned int *)a1 - 1)];
  else
    v10 = 0;
  if (v10 != (uint64_t *)result)
  {
    while (1)
    {
      v11 = v7 + 1;
      v12 = 8;
      if (a3 == 1)
      {
        v12 = 20;
        v11 = (uint64_t *)((char *)v7 + 20);
      }
      v13 = *(_DWORD *)((char *)v7 + v12);
      v14 = *((_DWORD *)v11 + 1);
      v15 = *v7;
      if (!*v7)
        break;
      v16 = *(_DWORD *)(v15 + 4);
      *(_DWORD *)v15 += 2;
      if (v16 < 0 || (v17 = (v16 + 6), __OFADD__(v16, 6)))
      {
        v35 = 0;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
        goto LABEL_10;
      v18 = 0;
LABEL_11:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v17, v18, v15, (int8x16_t *)"-start", 6u, &v35);
      if (!v35)
        goto LABEL_62;
      v33 = 0;
      v34 = 0;
      WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v36, a2, &v35, (uint64_t *)&v33);
      v20 = v36[0];
      if (v33)
        WTF::fastFree(v33, v19);
      v21 = v35;
      v35 = 0;
      if (!v21)
        goto LABEL_17;
      if (*(_DWORD *)v21 != 2)
      {
        *(_DWORD *)v21 -= 2;
LABEL_17:
        if (v15)
          goto LABEL_18;
        goto LABEL_20;
      }
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v19);
      if (v15)
      {
LABEL_18:
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v15, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v15 -= 2;
      }
LABEL_20:
      v22 = (_QWORD *)(v20 + 8);
      LODWORD(v36[0]) = v13;
      v23 = *(unsigned int *)(v20 + 20);
      if ((_DWORD)v23 == *(_DWORD *)(v20 + 16))
        *(_DWORD *)(*(_QWORD *)(v20 + 8) + 4 * *(unsigned int *)(v20 + 20)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)v36);
      else
        *(_DWORD *)(*v22 + 4 * v23) = v13;
      ++*(_DWORD *)(v20 + 20);
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v24 = *v7;
      if (!*v7)
      {
        v26 = 4;
LABEL_27:
        v27 = 1;
        goto LABEL_28;
      }
      v25 = *(_DWORD *)(v24 + 4);
      *(_DWORD *)v24 += 2;
      if (v25 < 0 || (v26 = (v25 + 4), __OFADD__(v25, 4)))
      {
        v35 = 0;
LABEL_62:
        __break(0xC471u);
        JUMPOUT(0x1951E0240);
      }
      if ((*(_BYTE *)(v24 + 16) & 4) != 0)
        goto LABEL_27;
      v27 = 0;
LABEL_28:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v26, v27, v24, (int8x16_t *)"-end", 4u, &v35);
      if (!v35)
        goto LABEL_62;
      v33 = 0;
      v34 = 0;
      WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v36, a2, &v35, (uint64_t *)&v33);
      v29 = v36[0];
      if (v33)
        WTF::fastFree(v33, v28);
      v30 = v35;
      v35 = 0;
      if (!v30)
        goto LABEL_34;
      if (*(_DWORD *)v30 != 2)
      {
        *(_DWORD *)v30 -= 2;
LABEL_34:
        if (v24)
          goto LABEL_35;
        goto LABEL_37;
      }
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v28);
      if (v24)
      {
LABEL_35:
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v24, (WTF::StringImpl *)v28);
        else
          *(_DWORD *)v24 -= 2;
      }
LABEL_37:
      v31 = (_QWORD *)(v29 + 8);
      LODWORD(v36[0]) = v14;
      v32 = *(unsigned int *)(v29 + 20);
      if ((_DWORD)v32 == *(_DWORD *)(v29 + 16))
        *(_DWORD *)(*(_QWORD *)(v29 + 8) + 4 * *(unsigned int *)(v29 + 20)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v32 + 1, (unint64_t)v36);
      else
        *(_DWORD *)(*v31 + 4 * v32) = v14;
      ++*(_DWORD *)(v29 + 20);
      result = std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      while (1)
      {
        v7 += 4;
        if (v7 == v9)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_45;
      }
      v7 = v9;
LABEL_45:
      if (v7 == v10)
        return result;
    }
    v17 = 6;
LABEL_10:
    v18 = 1;
    goto LABEL_11;
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  int i;
  unsigned int v13;
  WTF *v14;
  WTF *v15;
  WTF *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  uint64_t v31;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF *)(v7 + 24 * (v10 & v8));
    v15 = *(WTF **)v14;
    if (*(_QWORD *)v14 != -1)
      break;
    v11 = (WTF *)(v7 + 24 * v13);
LABEL_13:
    v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = v11;
    }
    v17 = *a3;
    *a3 = 0;
    v18 = *(WTF::StringImpl **)v14;
    *(_QWORD *)v14 = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = (WTF *)*((_QWORD *)v14 + 1);
    if (result)
    {
      *((_QWORD *)v14 + 1) = 0;
      *((_DWORD *)v14 + 4) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    v19 = *a4;
    *a4 = 0;
    *((_QWORD *)v14 + 1) = v19;
    LODWORD(v19) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *((_DWORD *)v14 + 4) = v19;
    LODWORD(v19) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *((_DWORD *)v14 + 5) = v19;
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    v22 = a1;
    *(_DWORD *)(v20 - 12) = v21;
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
        goto LABEL_28;
    }
    else if (3 * v26 <= 4 * v25)
    {
      if (!(_DWORD)v26)
      {
        v27 = 8;
LABEL_34:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v27, (WTF::StringImpl **)v14);
        v14 = result;
        v23 = *a2;
        if (*a2)
          LODWORD(v26) = *(_DWORD *)(v23 - 4);
        else
          LODWORD(v26) = 0;
        goto LABEL_36;
      }
LABEL_28:
      v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
      goto LABEL_34;
    }
LABEL_36:
    v31 = v23 + 24 * v26;
    v30 = 1;
    goto LABEL_37;
  }
  result = (WTF *)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 4);
  else
    v29 = 0;
  v22 = a1;
  v30 = 0;
  v31 = v28 + 24 * v29;
LABEL_37:
  *(_QWORD *)v22 = v14;
  *(_QWORD *)(v22 + 8) = v31;
  *(_BYTE *)(v22 + 16) = v30;
  return result;
}

{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  int i;
  unsigned int v13;
  WTF *v14;
  WTF *v15;
  WTF *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF *)(v7 + 24 * (v10 & v8));
    v15 = *(WTF **)v14;
    if (*(_QWORD *)v14 != -1)
      break;
    v11 = (WTF *)(v7 + 24 * v13);
LABEL_13:
    v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = v11;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *(_QWORD *)v14 = v17;
    result = (WTF *)*((_QWORD *)v14 + 1);
    if (result)
    {
      *((_QWORD *)v14 + 1) = 0;
      *((_DWORD *)v14 + 4) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    v18 = *a4;
    *a4 = 0;
    *((_QWORD *)v14 + 1) = v18;
    LODWORD(v18) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *((_DWORD *)v14 + 4) = v18;
    LODWORD(v18) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *((_DWORD *)v14 + 5) = v18;
    v19 = *a2;
    if (*a2)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    v21 = a1;
    *(_DWORD *)(v19 - 12) = v20;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_27;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_33:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v26, (WTF::StringImpl **)v14);
        v14 = result;
        v22 = *a2;
        if (*a2)
          LODWORD(v25) = *(_DWORD *)(v22 - 4);
        else
          LODWORD(v25) = 0;
        goto LABEL_35;
      }
LABEL_27:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_33;
    }
LABEL_35:
    v30 = v22 + 24 * v25;
    v29 = 1;
    goto LABEL_36;
  }
  result = (WTF *)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 4);
  else
    v28 = 0;
  v21 = a1;
  v29 = 0;
  v30 = v27 + 24 * v28;
LABEL_36:
  *(_QWORD *)v21 = v14;
  *(_QWORD *)(v21 + 8) = v30;
  *(_BYTE *)(v21 + 16) = v29;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF *v26;
  _QWORD *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  WTF::StringImpl *v38;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)v13 + 4);
          if (v20 < 0x100)
            v21 = WTF::StringImpl::hashSlowCase(v13);
          else
            v21 = v20 >> 8;
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v24 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          v25 = v18 + 24 * v23;
          v28 = *(WTF **)(v25 + 8);
          v27 = (_QWORD *)(v25 + 8);
          v26 = v28;
          if (v28)
          {
            *v27 = 0;
            *(_DWORD *)(v18 + 24 * v23 + 16) = 0;
            WTF::fastFree(v26, v8);
            v29 = *v24;
            *v24 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
          else
          {
            *v24 = 0;
          }
          v30 = *v12;
          *v12 = 0;
          *v24 = v30;
          v31 = v4 + 24 * v9;
          *v27 = 0;
          v27[1] = 0;
          v33 = *(_QWORD *)(v31 + 8);
          v32 = v31 + 8;
          *(_QWORD *)v32 = 0;
          *v27 = v33;
          v34 = *(_DWORD *)(v32 + 8);
          *(_DWORD *)(v32 + 8) = 0;
          v35 = v18 + 24 * v23;
          *(_DWORD *)(v35 + 16) = v34;
          v36 = *(_DWORD *)(v32 + 12);
          *(_DWORD *)(v32 + 12) = 0;
          *(_DWORD *)(v35 + 20) = v36;
          v37 = *(WTF **)v32;
          if (*(_QWORD *)v32)
          {
            *(_QWORD *)v32 = 0;
            *(_DWORD *)(v32 + 8) = 0;
            WTF::fastFree(v37, v8);
          }
          v38 = *v12;
          *v12 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (v12 == a3)
            v10 = v18 + 24 * v23;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v17 = *(WTF **)(v14 + 8);
          v16 = (_QWORD *)(v14 + 8);
          v15 = v17;
          if (v17)
          {
            *v16 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v15, v8);
            v13 = *v12;
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::GridTrackSize::operator==(a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t result;
  WTF **v5;
  const WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a3 + 12))
    return 0;
  if (!(_DWORD)v3)
    return 1;
  v5 = *(WTF ***)a2;
  v6 = *(const WTF::StringImpl ***)a3;
  result = WTF::equal(**(WTF ***)a2, **(const WTF::StringImpl ***)a3, (const WTF::StringImpl *)a3);
  if ((_DWORD)result)
  {
    v8 = 1;
    do
    {
      v9 = v8;
      if (v3 == v8)
        break;
      v11 = v8;
      v10 = WTF::equal(v5[v8], v6[v8], v7);
      v9 = v11;
      v8 = v11 + 1;
    }
    while ((v10 & 1) != 0);
    return v9 >= v3;
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  _BOOL4 v11;
  _BOOL4 v13;
  _BOOL4 v14;
  char v16;
  char *v17;

  if (*(_DWORD *)a2 == *(_DWORD *)a3 && (v3 = *(unsigned int *)(a2 + 20), (_DWORD)v3 == *(_DWORD *)(a3 + 20)))
  {
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = *(_QWORD *)(a2 + 8);
      for (i = *(_QWORD *)(a3 + 8); ; i += 96)
      {
        v8 = *(unsigned int *)(v6 + 88);
        v9 = *(_DWORD *)(i + 88);
        v11 = v9 == (_DWORD)v8 && v9 != -1;
        if ((_DWORD)v8 == -1 || !v11)
        {
          v13 = v9 == -1;
          if ((_DWORD)v8 == -1)
            v14 = v13;
          else
            v14 = v11;
          if (!v14)
            return v4;
        }
        else
        {
          v17 = &v16;
          if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3347D88[v8])(&v17, v6, i) & 1) == 0)
            return v4;
        }
        v4 = ++v5 >= v3;
        v6 += 96;
        if (v3 == v5)
          return v4;
      }
    }
    return 1;
  }
  else
  {
    return 0;
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  _BOOL4 v11;
  _BOOL4 v13;
  _BOOL4 v14;
  char v16;
  char *v17;

  if (*a2 == *a3 && (v3 = *((unsigned int *)a2 + 5), (_DWORD)v3 == *((_DWORD *)a3 + 5)))
  {
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = *((_QWORD *)a2 + 1);
      for (i = *((_QWORD *)a3 + 1); ; i += 96)
      {
        v8 = *(unsigned int *)(v6 + 88);
        v9 = *(_DWORD *)(i + 88);
        v11 = v9 == (_DWORD)v8 && v9 != -1;
        if ((_DWORD)v8 == -1 || !v11)
        {
          v13 = v9 == -1;
          if ((_DWORD)v8 == -1)
            v14 = v13;
          else
            v14 = v11;
          if (!v14)
            return v4;
        }
        else
        {
          v17 = &v16;
          if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3347D88[v8])(&v17, v6, i) & 1) == 0)
            return v4;
        }
        v4 = ++v5 >= v3;
        v6 += 96;
        if (v3 == v5)
          return v4;
      }
    }
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>,std::__variant_detail::_Trait::GridTrackEntryRepeat,std::__variant_detail::_Trait::GridTrackEntryAutoRepeat,std::__variant_detail::_Trait::GridTrackEntrySubgrid,std::__variant_detail::_Trait::GridTrackEntryMasonry> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::GridTrackSize::operator==(a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WebCore::GridTrackSize::String,0ul,WebCore::GridTrackSize::CrashOnOverflow,16ul,WebCore::GridTrackSize::FastMalloc>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t result;
  WTF **v5;
  const WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a3 + 12))
    return 0;
  if (!(_DWORD)v3)
    return 1;
  v5 = *(WTF ***)a2;
  v6 = *(const WTF::StringImpl ***)a3;
  result = WTF::equal(**(WTF ***)a2, **(const WTF::StringImpl ***)a3, (const WTF::StringImpl *)a3);
  if ((_DWORD)result)
  {
    v8 = 1;
    do
    {
      v9 = v8;
      if (v3 == v8)
        break;
      v11 = v8;
      v10 = WTF::equal(v5[v8], v6[v8], v7);
      v9 = v11;
      v8 = v11 + 1;
    }
    while ((v10 & 1) != 0);
    return v9 >= v3;
  }
  return result;
}

uint64_t WebCore::Style::BuilderConverter::createGridTrackList(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  WebCore::CSSValue **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24[4];
  _QWORD v25[2];
  uint64_t *v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v28 = 0;
  v6 = *(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16);
  v7 = v6 & 0x3F800;
  if ((v6 & 0x3F800) == 0x20800)
  {
    v27 = a1;
    WTF::RefPtr<WebCore::CSSValueContainingVector const,WTF::RawPtrTraits<WebCore::CSSValueContainingVector const>,WTF::DefaultRefDerefTraits<WebCore::CSSValueContainingVector const>>::operator=(&v28, (WTF::StringImpl *)a1);
    v21 = *((_DWORD *)a2 + 3);
    if (v21 == *((_DWORD *)a2 + 2))
    {
      WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackEntrySubgrid>((uint64_t)a2);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a2 + 96 * v21 + 88) = 4;
      *((_DWORD *)a2 + 3) = v21 + 1;
    }
    v8 = v28;
  }
  else
  {
    v27 = 0;
    if (v7 == 120832)
    {
      *(_DWORD *)a1 += 2;
      v28 = (WTF::StringImpl *)a1;
      v8 = (WTF::StringImpl *)a1;
    }
    else
    {
      if (v7)
        return 0;
      if ((v6 & 0x7F) == 0x50)
      {
        v22 = *(unsigned __int16 *)(a1 + 8);
        if (v22 == 6)
          return 1;
        if (v22 == 897)
        {
          v23 = *((_DWORD *)a2 + 3);
          if (v23 == *((_DWORD *)a2 + 2))
          {
            WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackEntryMasonry>((uint64_t)a2);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a2 + 96 * v23 + 88) = 5;
            *((_DWORD *)a2 + 3) = v23 + 1;
          }
          return 1;
        }
      }
      v8 = 0;
    }
  }
  v25[1] = a3;
  v26 = &v27;
  v24[3] = a3;
  v25[0] = &v26;
  v24[0] = (uint64_t)a2;
  v24[1] = (uint64_t)&v26;
  v24[2] = (uint64_t)v25;
  if (v8)
  {
    v9 = *((_DWORD *)v8 + 2);
    if (v9)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        if (v10 > 3)
        {
          if (*((_DWORD *)v8 + 2) <= v10)
          {
            result = 148;
            __break(0xC471u);
            return result;
          }
          v12 = (WebCore::CSSValue **)(*((_QWORD *)v8 + 6) + 8 * (v11 - 4));
        }
        else
        {
          v12 = (WebCore::CSSValue **)((char *)v8 + 8 * v11 + 16);
        }
        WebCore::Style::BuilderConverter::createGridTrackList(WebCore::CSSValue const&,WebCore::GridTrackList &,WebCore::Style::BuilderState &)::{lambda(WebCore::CSSValue const&)#1}::operator()(v24, *v12);
        v10 = v11 + 1;
        v11 = (v11 + 1);
      }
      while (v9 != v10);
    }
  }
  else
  {
    WebCore::Style::BuilderConverter::createGridTrackList(WebCore::CSSValue const&,WebCore::GridTrackList &,WebCore::Style::BuilderState &)::{lambda(WebCore::CSSValue const&)#1}::operator()(v24, (WebCore::CSSValue *)a1);
  }
  v13 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v13)
  {
    if (!*v26)
    {
      v14 = *(_QWORD *)a2;
      if (*(_DWORD *)(*(_QWORD *)a2 + 96 * v13 - 8) != 1)
      {
        if ((_DWORD)v13 == *((_DWORD *)a2 + 2))
        {
          v18 = v13 + (v13 >> 2);
          if (v18 >= 0x10)
            v19 = v18 + 1;
          else
            v19 = 16;
          if (v19 <= v13 + 1)
            v20 = v13 + 1;
          else
            v20 = v19;
          WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a2, v20);
          LODWORD(v13) = *((_DWORD *)a2 + 3);
          v14 = *(_QWORD *)a2;
        }
        v15 = v14 + 96 * v13;
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 88) = 1;
        ++*((_DWORD *)a2 + 3);
      }
    }
  }
  v16 = v28;
  v28 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  return 1;
}

void WebCore::Style::BuilderConverter::createGridTrackList(WebCore::CSSValue const&,WebCore::GridTrackList &,WebCore::Style::BuilderState &)::{lambda(WebCore::CSSValue const&)#1}::operator()(uint64_t *a1, WebCore::CSSValue *a2)
{
  int v4;
  int v5;
  _DWORD *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52[2];
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned __int8 v56;
  char v57;
  unsigned __int8 v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned __int8 v62;
  char v63;
  unsigned __int8 v64;
  uint64_t v65;
  int v66;
  __int16 v67;

  v4 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
  if ((v4 & 0x3F800) != 0x14000)
  {
    v5 = v4 & 0x3FFFF;
    if (**(_QWORD **)a1[1])
      goto LABEL_8;
    v6 = (_DWORD *)*a1;
    v7 = *(_DWORD *)(*a1 + 12);
    if (v7)
    {
      v8 = *(unsigned int *)(*a1 + 12);
      if (*(_DWORD *)(*(_QWORD *)v6 + 96 * v7 - 8) == 1)
        goto LABEL_8;
    }
    else
    {
      v8 = 0;
    }
    if (v7 == v6[2])
    {
      v23 = v8 + (v8 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v8 + 1)
        v25 = v8 + 1;
      else
        v25 = v24;
      WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(*a1, v25);
      v9 = *(_QWORD *)v6 + 96 * v6[3];
    }
    else
    {
      v9 = *(_QWORD *)v6 + 96 * v8;
    }
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 88) = 1;
    ++v6[3];
    v5 = (*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3FFFF;
LABEL_8:
    v10 = v5 & 0x3F800;
    if (v10 == 124928)
    {
      *(_QWORD *)v52 = 0;
      v53 = 0;
      if (WebCore::CSSGridAutoRepeatValue::autoRepeatID(a2) == 965)
        v41 = 1;
      else
        v41 = 2;
      LOBYTE(v51) = v41;
      WebCore::Style::BuilderConverter::createGridTrackList(WebCore::CSSValue const&,WebCore::GridTrackList &,WebCore::Style::BuilderState &)::{lambda(WebCore::CSSValue const&,WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}::operator()(a1[2], (uint64_t)a2, (uint64_t)v52);
      v43 = *a1;
      v44 = *(_DWORD *)(*a1 + 12);
      if (v44 == *(_DWORD *)(*a1 + 8))
      {
        WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackEntryAutoRepeat>(v43, (uint64_t)&v51);
      }
      else
      {
        v47 = *(_QWORD *)v43 + 96 * v44;
        *(_BYTE *)v47 = v51;
        *(_QWORD *)(v47 + 8) = 0;
        *(_QWORD *)(v47 + 16) = 0;
        v48 = *(_QWORD *)v52;
        *(_QWORD *)v52 = 0;
        *(_QWORD *)(v47 + 8) = v48;
        LODWORD(v48) = v53;
        LODWORD(v53) = 0;
        *(_DWORD *)(v47 + 16) = v48;
        LODWORD(v48) = HIDWORD(v53);
        HIDWORD(v53) = 0;
        *(_DWORD *)(v47 + 20) = v48;
        *(_DWORD *)(v47 + 88) = 3;
        ++*(_DWORD *)(v43 + 12);
      }
    }
    else
    {
      if (v10 != 126976)
      {
        v11 = *a1;
        WebCore::Style::BuilderConverter::createGridTrackSize((WebCore::Style::BuilderConverter *)&v51, a2, (WebCore::Style::BuilderState *)a1[3]);
        v12 = *(_DWORD *)(v11 + 12);
        if (v12 == *(_DWORD *)(v11 + 8))
        {
          WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackSize>(v11, (uint64_t)&v51);
          goto LABEL_21;
        }
        v13 = *(_QWORD *)v11 + 96 * v12;
        *(_DWORD *)v13 = v51;
        *(_DWORD *)(v13 + 8) = 0;
        *(_WORD *)(v13 + 13) = 0;
        v14 = LOBYTE(v52[1]);
        *(_WORD *)(v13 + 12) = v52[1];
        if (v14 - 2 < 9)
        {
          v15 = BYTE2(v52[1]);
          *(_BYTE *)(v13 + 14) = BYTE2(v52[1]);
          if (v15)
          {
            *(_DWORD *)(v13 + 8) = v52[0];
            goto LABEL_14;
          }
          v26 = v52[0];
          goto LABEL_34;
        }
        if (v14 <= 0xD)
        {
          if (((1 << v14) & 0x3003) != 0)
          {
            *(_DWORD *)(v13 + 8) = 0;
          }
          else if (v14 == 11)
          {
            v26 = v52[0];
            v52[0] = 0;
LABEL_34:
            *(_DWORD *)(v13 + 8) = v26;
          }
        }
LABEL_14:
        LOBYTE(v52[1]) = 0;
        v16 = v53;
        *(_DWORD *)(v13 + 24) = v54;
        *(_QWORD *)(v13 + 16) = v16;
        *(_DWORD *)(v13 + 32) = 0;
        *(_WORD *)(v13 + 37) = 0;
        v17 = v56;
        *(_BYTE *)(v13 + 36) = v56;
        *(_BYTE *)(v13 + 37) = v57;
        if (v17 - 2 < 9)
        {
          v18 = v58;
          *(_BYTE *)(v13 + 38) = v58;
          if (v18)
          {
            *(_DWORD *)(v13 + 32) = v55;
            goto LABEL_17;
          }
          v27 = v55;
          goto LABEL_36;
        }
        if (v17 <= 0xD)
        {
          if (((1 << v17) & 0x3003) != 0)
          {
            *(_DWORD *)(v13 + 32) = 0;
          }
          else if (v17 == 11)
          {
            v27 = v55;
            v55 = 0;
LABEL_36:
            *(_DWORD *)(v13 + 32) = v27;
          }
        }
LABEL_17:
        v56 = 0;
        v19 = v59;
        *(_DWORD *)(v13 + 48) = v60;
        *(_QWORD *)(v13 + 40) = v19;
        *(_DWORD *)(v13 + 56) = 0;
        *(_WORD *)(v13 + 61) = 0;
        v20 = v62;
        *(_BYTE *)(v13 + 60) = v62;
        *(_BYTE *)(v13 + 61) = v63;
        if (v20 - 2 >= 9)
        {
          if (v20 > 0xD)
            goto LABEL_20;
          if (((1 << v20) & 0x3003) != 0)
          {
            *(_DWORD *)(v13 + 56) = 0;
            goto LABEL_20;
          }
          if (v20 != 11)
            goto LABEL_20;
          v28 = v61;
          v61 = 0;
        }
        else
        {
          v21 = v64;
          *(_BYTE *)(v13 + 62) = v64;
          if (v21)
          {
            *(_DWORD *)(v13 + 56) = v61;
LABEL_20:
            v62 = 0;
            v22 = v65;
            *(_DWORD *)(v13 + 72) = v66;
            *(_QWORD *)(v13 + 64) = v22;
            *(_WORD *)(v13 + 80) = v67;
            *(_DWORD *)(v13 + 88) = 0;
            ++*(_DWORD *)(v11 + 12);
LABEL_21:
            if (v62 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v61);
            }
            if (v56 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v55);
            }
            if (LOBYTE(v52[1]) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v52[0]);
            }
            return;
          }
          v28 = v61;
        }
        *(_DWORD *)(v13 + 56) = v28;
        goto LABEL_20;
      }
      *(_QWORD *)v52 = 0;
      v53 = 0;
      LODWORD(v51) = *((_QWORD *)a2 + 7);
      WebCore::Style::BuilderConverter::createGridTrackList(WebCore::CSSValue const&,WebCore::GridTrackList &,WebCore::Style::BuilderState &)::{lambda(WebCore::CSSValue const&,WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}::operator()(a1[2], (uint64_t)a2, (uint64_t)v52);
      v45 = *a1;
      v46 = *(_DWORD *)(*a1 + 12);
      if (v46 == *(_DWORD *)(*a1 + 8))
      {
        WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackEntryRepeat>(v45, (uint64_t)&v51);
      }
      else
      {
        v49 = *(_QWORD *)v45 + 96 * v46;
        *(_DWORD *)v49 = v51;
        *(_QWORD *)(v49 + 8) = 0;
        *(_QWORD *)(v49 + 16) = 0;
        v50 = *(_QWORD *)v52;
        *(_QWORD *)v52 = 0;
        *(_QWORD *)(v49 + 8) = v50;
        LODWORD(v50) = v53;
        LODWORD(v53) = 0;
        *(_DWORD *)(v49 + 16) = v50;
        LODWORD(v50) = HIDWORD(v53);
        HIDWORD(v53) = 0;
        *(_DWORD *)(v49 + 20) = v50;
        *(_DWORD *)(v49 + 88) = 2;
        ++*(_DWORD *)(v45 + 12);
      }
    }
    WebCore::GridTrackEntryRepeat::~GridTrackEntryRepeat((WebCore::GridTrackEntryRepeat *)&v51, v42);
    return;
  }
  v51 = 0;
  *(_QWORD *)v52 = 0;
  v29 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v29)
  {
    v32 = *v29;
    v31 = v29 + 2;
    v30 = v32;
    if (v32)
    {
      v33 = 8 * v30;
      do
      {
        v34 = v52[1];
        if (v52[1] == v52[0])
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v51, (unint64_t)v31);
        }
        else
        {
          v35 = v51;
          v36 = (_DWORD *)*v31;
          if (*v31)
            *v36 += 2;
          *(_QWORD *)(v35 + 8 * v34) = v36;
          v52[1] = v34 + 1;
        }
        ++v31;
        v33 -= 8;
      }
      while (v33);
    }
  }
  v37 = *a1;
  v38 = *(_DWORD *)(*a1 + 12);
  if (v38 == *(_DWORD *)(*a1 + 8))
  {
    WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v37, &v51);
  }
  else
  {
    v39 = *(_QWORD *)v37 + 96 * v38;
    *(_QWORD *)v39 = 0;
    *(_QWORD *)(v39 + 8) = 0;
    v40 = v51;
    v51 = 0;
    *(_QWORD *)v39 = v40;
    LODWORD(v40) = v52[0];
    v52[0] = 0;
    *(_DWORD *)(v39 + 8) = v40;
    LODWORD(v40) = v52[1];
    v52[1] = 0;
    *(_DWORD *)(v39 + 12) = v40;
    *(_DWORD *)(v39 + 88) = 1;
    ++*(_DWORD *)(v37 + 12);
  }
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, a2);
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackEntryMasonry>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  unsigned int v7;

  v2 = *(unsigned int *)(a1 + 12);
  v3 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= v2 + 1)
    v5 = v2 + 1;
  else
    v5 = v4;
  result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v5);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)a1 + 96 * v7 + 88) = 5;
  *(_DWORD *)(a1 + 12) = v7 + 1;
  return result;
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  WTF *v11;
  uint64_t v12;
  uint64_t (**v13)();
  int v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  char v18;
  char v19;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x2AAAAAB)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(unsigned int *)(result + 12);
    v5 = 96 * a2;
    v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)v2 = v6;
    if ((_DWORD)v4)
    {
      v8 = v6;
      v9 = 96 * v4;
      v10 = off_1E3347D98;
      v11 = v3;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 88) = -1;
        v12 = *((unsigned int *)v11 + 22);
        if ((_DWORD)v12 != -1)
        {
          v16 = (unsigned int *)v11;
          v17 = v8;
          v13 = v10;
          v14 = *((_DWORD *)v11 + 22);
          ((void (*)(char *, uint64_t, WTF *))v10[v12])(&v18, v8, v11);
          v10 = v13;
          v11 = (WTF *)v16;
          v8 = v17;
          *(_DWORD *)(v17 + 88) = v14;
          v15 = v16[22];
          if ((_DWORD)v15 != -1)
          {
            ((void (*)(char *, unsigned int *))off_1E3347D18[v15])(&v19, v16);
            v10 = v13;
            v11 = (WTF *)v16;
            v8 = v17;
          }
        }
        *((_DWORD *)v11 + 22) = -1;
        v8 += 96;
        v11 = (WTF *)((char *)v11 + 96);
        v9 -= 96;
      }
      while (v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::GridTrackSize::GridTrackSize(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a2 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a2 + 20) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a2 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a2 + 20) = v3;
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackEntrySubgrid>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  unsigned int v7;

  v2 = *(unsigned int *)(a1 + 12);
  v3 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= v2 + 1)
    v5 = v2 + 1;
  else
    v5 = v4;
  result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v5);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)a1 + 96 * v7 + 88) = 4;
  *(_DWORD *)(a1 + 12) = v7 + 1;
  return result;
}

uint64_t WebCore::Style::BuilderConverter::createGridTrackList(WebCore::CSSValue const&,WebCore::GridTrackList &,WebCore::Style::BuilderState &)::{lambda(WebCore::CSSValue const&,WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}::operator()(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const WebCore::CSSValue *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned __int8 v57;
  char v58;
  unsigned __int8 v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned __int8 v63;
  char v64;
  unsigned __int8 v65;
  uint64_t v66;
  int v67;
  int v68;
  unsigned __int8 v69;
  char v70;
  unsigned __int8 v71;
  uint64_t v72;
  int v73;
  __int16 v74;

  if (((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F800u) <= 0x1D000)
  {
    __break(0xC471u);
    goto LABEL_108;
  }
  v4 = result;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v54 = a2 + 16;
    do
    {
      if (v6 > 3)
      {
        if (*(_DWORD *)(a2 + 8) <= v6)
        {
          __break(0xC471u);
          JUMPOUT(0x1951E1B9CLL);
        }
        v8 = *(_QWORD *)(a2 + 48) + 8 * (v7 - 4);
      }
      else
      {
        v8 = v54 + 8 * v7;
      }
      v9 = *(const WebCore::CSSValue **)v8;
      if (((*(unsigned __int16 *)(*(_QWORD *)v8 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v8 + 6) << 16)) & 0x3F800) != 0x14000)
      {
        if (***(_QWORD ***)v4)
          goto LABEL_22;
        v10 = *(_DWORD *)(a3 + 12);
        if (v10)
        {
          v11 = *(unsigned int *)(a3 + 12);
          if (*(_DWORD *)(*(_QWORD *)a3 + 96 * v10 - 8) == 1)
            goto LABEL_22;
        }
        else
        {
          v11 = 0;
        }
        if (v10 == *(_DWORD *)(a3 + 8))
        {
          v12 = v11 + (v11 >> 2);
          if (v12 >= 0x10)
            v13 = v12 + 1;
          else
            v13 = 16;
          if (v13 <= v11 + 1)
            v14 = v11 + 1;
          else
            v14 = v13;
          WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v14);
          v15 = *(_QWORD *)a3 + 96 * *(unsigned int *)(a3 + 12);
        }
        else
        {
          v15 = *(_QWORD *)a3 + 96 * v11;
        }
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 88) = 1;
        ++*(_DWORD *)(a3 + 12);
LABEL_22:
        result = (uint64_t)WebCore::Style::BuilderConverter::createGridTrackSize((WebCore::Style::BuilderConverter *)&v55, v9, *(WebCore::Style::BuilderState **)(v4 + 8));
        v16 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v16 == *(_DWORD *)(a3 + 8))
        {
          v17 = v16 + (v16 >> 2);
          if (v17 >= 0x10)
            v18 = v17 + 1;
          else
            v18 = 16;
          if (v18 <= v16 + 1)
            v19 = v16 + 1;
          else
            v19 = v18;
          result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v19);
          LODWORD(v16) = *(_DWORD *)(a3 + 12);
        }
        v20 = *(_QWORD *)a3 + 96 * v16;
        *(_DWORD *)v20 = v55;
        *(_DWORD *)(v20 + 8) = 0;
        *(_WORD *)(v20 + 13) = 0;
        v21 = v57;
        *(_BYTE *)(v20 + 12) = v57;
        *(_BYTE *)(v20 + 13) = v58;
        if (v21 - 2 >= 9)
        {
          if (v21 <= 0xD)
          {
            if (((1 << v21) & 0x3003) != 0)
            {
              *(_DWORD *)(v20 + 8) = 0;
            }
            else if (v21 == 11)
            {
              v30 = v56;
              v56 = 0;
              goto LABEL_44;
            }
          }
        }
        else
        {
          v22 = v59;
          *(_BYTE *)(v20 + 14) = v59;
          if (v22)
          {
            *(_DWORD *)(v20 + 8) = v56;
            goto LABEL_33;
          }
          v30 = v56;
LABEL_44:
          *(_DWORD *)(v20 + 8) = v30;
        }
LABEL_33:
        v57 = 0;
        v23 = v60;
        *(_DWORD *)(v20 + 24) = v61;
        *(_QWORD *)(v20 + 16) = v23;
        *(_DWORD *)(v20 + 32) = 0;
        *(_WORD *)(v20 + 37) = 0;
        v24 = v63;
        *(_BYTE *)(v20 + 36) = v63;
        *(_BYTE *)(v20 + 37) = v64;
        if (v24 - 2 >= 9)
        {
          if (v24 <= 0xD)
          {
            if (((1 << v24) & 0x3003) != 0)
            {
              *(_DWORD *)(v20 + 32) = 0;
            }
            else if (v24 == 11)
            {
              v31 = v62;
              v62 = 0;
              goto LABEL_46;
            }
          }
        }
        else
        {
          v25 = v65;
          *(_BYTE *)(v20 + 38) = v65;
          if (v25)
          {
            *(_DWORD *)(v20 + 32) = v62;
            goto LABEL_36;
          }
          v31 = v62;
LABEL_46:
          *(_DWORD *)(v20 + 32) = v31;
        }
LABEL_36:
        v63 = 0;
        v26 = v66;
        *(_DWORD *)(v20 + 48) = v67;
        *(_QWORD *)(v20 + 40) = v26;
        *(_DWORD *)(v20 + 56) = 0;
        *(_WORD *)(v20 + 61) = 0;
        v27 = v69;
        *(_BYTE *)(v20 + 60) = v69;
        *(_BYTE *)(v20 + 61) = v70;
        if (v27 - 2 >= 9)
        {
          if (v27 > 0xD)
            goto LABEL_39;
          if (((1 << v27) & 0x3003) != 0)
          {
            *(_DWORD *)(v20 + 56) = 0;
            goto LABEL_39;
          }
          if (v27 != 11)
            goto LABEL_39;
          v32 = v68;
          v68 = 0;
        }
        else
        {
          v28 = v71;
          *(_BYTE *)(v20 + 62) = v71;
          if (v28)
          {
            *(_DWORD *)(v20 + 56) = v68;
LABEL_39:
            v69 = 0;
            v29 = v73;
            *(_QWORD *)(v20 + 64) = v72;
            *(_DWORD *)(v20 + 72) = v29;
            *(_WORD *)(v20 + 80) = v74;
            *(_DWORD *)(v20 + 88) = 0;
            ++*(_DWORD *)(a3 + 12);
            if (v63 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v62);
            }
            if (v57 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v56);
            }
            goto LABEL_41;
          }
          v32 = v68;
        }
        *(_DWORD *)(v20 + 56) = v32;
        goto LABEL_39;
      }
      v33 = (unsigned int *)*((_QWORD *)v9 + 1);
      if (v33)
      {
        v36 = *v33;
        v35 = v33 + 2;
        v34 = v36;
        if (v36)
        {
          v52 = v34;
          if (v34 >> 29)
          {
            __break(0xC471u);
LABEL_108:
            JUMPOUT(0x1951E1B7CLL);
          }
          v42 = 8 * v34;
          result = WTF::fastMalloc((WTF *)(8 * v34));
          v43 = 0;
          do
          {
            v44 = *(_DWORD **)&v35[v43 / 4];
            if (v44)
              *v44 += 2;
            *(_QWORD *)(result + v43) = v44;
            v43 += 8;
          }
          while (v42 != v43);
          LODWORD(v33) = v52;
          goto LABEL_76;
        }
        LODWORD(v33) = 0;
      }
      result = 0;
LABEL_76:
      v37 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v37 == *(_DWORD *)(a3 + 8))
      {
        v38 = v37 + (v37 >> 2);
        if (v38 >= 0x10)
          v39 = v38 + 1;
        else
          v39 = 16;
        if (v39 <= v37 + 1)
          v40 = v37 + 1;
        else
          v40 = v39;
        v51 = result;
        result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v40);
        LODWORD(v37) = *(_DWORD *)(a3 + 12);
        v41 = *(_QWORD *)a3 + 96 * v37;
        *(_QWORD *)v41 = v51;
      }
      else
      {
        v41 = *(_QWORD *)a3 + 96 * v37;
        *(_QWORD *)v41 = result;
      }
      *(_DWORD *)(v41 + 8) = (_DWORD)v33;
      *(_DWORD *)(v41 + 12) = (_DWORD)v33;
      *(_DWORD *)(v41 + 88) = 1;
      *(_DWORD *)(a3 + 12) = v37 + 1;
LABEL_41:
      v6 = v7 + 1;
      v7 = (v7 + 1);
    }
    while (v5 != v6);
  }
  v45 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v45)
  {
    if (!***(_QWORD ***)v4)
    {
      v46 = *(_QWORD *)a3;
      if (*(_DWORD *)(*(_QWORD *)a3 + 96 * v45 - 8) != 1)
      {
        if ((_DWORD)v45 == *(_DWORD *)(a3 + 8))
        {
          v47 = v45 + (v45 >> 2);
          if (v47 >= 0x10)
            v48 = v47 + 1;
          else
            v48 = 16;
          if (v48 <= v45 + 1)
            v49 = v45 + 1;
          else
            v49 = v48;
          result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v49);
          LODWORD(v45) = *(_DWORD *)(a3 + 12);
          v46 = *(_QWORD *)a3;
        }
        v50 = v46 + 96 * v45;
        *(_QWORD *)v50 = 0;
        *(_QWORD *)(v50 + 8) = 0;
        *(_DWORD *)(v50 + 88) = 1;
        ++*(_DWORD *)(a3 + 12);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(uint64_t a1, unint64_t a2)
{
  _DWORD **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v9 = *(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(v9 + 8) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(v9 + 12) = v10;
  *(_DWORD *)(v9 + 88) = 1;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x2AAAAAB)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(unsigned int *)(result + 12);
    v5 = 96 * a2;
    v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)v2 = v6;
    if ((_DWORD)v4)
    {
      v8 = v6;
      v9 = 96 * v4;
      v10 = v3;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 88) = -1;
        v11 = *((unsigned int *)v10 + 22);
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(char *, uint64_t, WTF *))off_1E3347DC8[v11])(&v13, v8, v10);
          *(_DWORD *)(v8 + 88) = v11;
          v12 = *((unsigned int *)v10 + 22);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, WTF *))off_1E3347D48[v12])(&v14, v10);
        }
        *((_DWORD *)v10 + 22) = -1;
        v8 += 96;
        v10 = (WTF *)((char *)v10 + 96);
        v9 -= 96;
      }
      while (v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::GridTrackSize::GridTrackSize(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackEntryAutoRepeat>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v9 = *(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 12);
  *(_BYTE *)v9 = *(_BYTE *)a2;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v9 + 8) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(v9 + 16) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(v9 + 20) = v10;
  *(_DWORD *)(v9 + 88) = 3;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackEntryRepeat>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v9 = *(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)v9 = *(_DWORD *)a2;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v9 + 8) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(v9 + 16) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(v9 + 20) = v10;
  *(_DWORD *)(v9 + 88) = 2;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrackSize>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  result = WebCore::GridTrackSize::GridTrackSize(*(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 12), a2);
  *(_DWORD *)(result + 88) = 0;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WTF::StringImpl *WebCore::Style::BuilderConverter::convertStringOrAutoAtom(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v2;
  int v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = result;
  v3 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v3 & 0x3F87F) == 0x50 && *(_WORD *)(a2 + 8) == 394)
  {
    v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_11;
LABEL_9:
    *(_DWORD *)v4 += 2;
    if ((*((_BYTE *)v4 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      result = v4;
      v4 = v7;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_11;
  }
  if ((v3 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1951E20D0);
  }
  v4 = 0;
  v5 = (*(unsigned __int16 *)(a2 + 4) & 0x7Fu) - 20;
  if (v5 <= 0x3C)
  {
    if (((1 << ((*(_WORD *)(a2 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
    {
      v4 = *(WTF::StringImpl **)(a2 + 8);
      if (!v4)
        goto LABEL_11;
    }
    else
    {
      if (v5 == 60)
      {
        result = (WTF::StringImpl *)WebCore::nameString(*(unsigned __int16 *)(a2 + 8));
      }
      else
      {
        if (v5 != 59)
          goto LABEL_11;
        result = (WTF::StringImpl *)WebCore::nameString(*(unsigned __int16 *)(a2 + 8));
      }
      v4 = *(WTF::StringImpl **)result;
      if (!*(_QWORD *)result)
        goto LABEL_11;
    }
    goto LABEL_9;
  }
LABEL_11:
  *(_QWORD *)v2 = v4;
  return result;
}

void WebCore::RenderStyle::setHyphens(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[57];
  if (((v3 >> 22) & 3) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[57];
      v2 = v7;
    }
    v2[57] = v3 & 0xFF3FFFFF | ((v4 & 3) << 22);
  }
}

void WebCore::RenderStyle::setImageOrientation(uint64_t a1, char a2)
{
  _DWORD *v2;
  unsigned int v3;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[58];
  if (((v3 >> 15) & 1) != a2)
  {
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[58];
      v2 = v7;
    }
    v2[58] = v3 & 0xFFFF7FFF | ((a2 & 1) << 15);
  }
}

uint64_t WebCore::RenderStyle::setJustifyContent(WebCore::RenderStyle *this, const WebCore::StyleContentAlignmentData *a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (((*(_WORD *)a2 ^ *(_WORD *)(*(_QWORD *)(v3 + 32) + 122)) & 0x1FF) != 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_WORD *)(result + 122) = *(_WORD *)a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setJustifyItems(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*a2 ^ *(_BYTE *)(*(_QWORD *)(v3 + 32) + 126)) & 0x7F) != 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_BYTE *)(result + 126) = *a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setJustifySelf(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*a2 ^ *(_BYTE *)(*(_QWORD *)(v3 + 32) + 127)) & 0x7F) != 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_BYTE *)(result + 127) = *a2;
  }
  return result;
}

uint64_t WebCore::Style::BuilderConverter::convertSVGLengthValue(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F800) == 0)
    return WebCore::SVGLengthValue::fromCSSPrimitiveValue((WebCore::CSSPrimitiveValue *)a2, a1 + 64, a3);
  result = 96;
  __break(0xC471u);
  return result;
}

void WebCore::RenderStyle::setLineBreak(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[57];
  if (((v3 >> 12) & 7) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[57];
      v2 = v7;
    }
    v2[57] = v3 & 0xFFFF8FFF | ((v4 & 7) << 12);
  }
}

WTF::StringImpl *WebCore::RenderStyle::setListStyleType(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::StyleRareInheritedData *v10;
  WTF *v11;
  void *v12;

  v2 = *((_QWORD *)result + 3);
  v3 = *(unsigned __int8 *)a2;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (*(unsigned __int8 *)(v2 + 368) != v3 || *(_QWORD *)(v2 + 376) != (_QWORD)v4)
  {
    if (*(_DWORD *)v2 != 1)
    {
      v7 = result;
      v8 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v8, v2);
      v10 = (WebCore::StyleRareInheritedData *)*((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v10, a2);
          WTF::fastFree(v11, v12);
          v9 = *((_QWORD *)v7 + 3);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      LOBYTE(v3) = *(_BYTE *)a2;
      v4 = (_DWORD *)*((_QWORD *)a2 + 1);
      v2 = v9;
    }
    *(_BYTE *)(v2 + 368) = v3;
    if (v4)
      *v4 += 2;
    result = *(WTF::StringImpl **)(v2 + 376);
    *(_QWORD *)(v2 + 376) = v4;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WTF::DataRef<WebCore::StyleInheritedResourceData>::access(WTF **a1)
{
  WTF *v1;
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;

  v1 = *a1;
  if (*(_DWORD *)*a1 != 1)
  {
    v3 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v3 = 1;
    v5 = (_DWORD *)*((_QWORD *)v1 + 1);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(v3 + 8) = v5;
    v6 = (_DWORD *)*((_QWORD *)v1 + 2);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(v3 + 16) = v6;
    v7 = (_DWORD *)*((_QWORD *)v1 + 3);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(v3 + 24) = v7;
    v13 = 0;
    v8 = *a1;
    *a1 = (WTF *)v3;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        v10 = (WTF::StringImpl *)*((_QWORD *)v8 + 3);
        *((_QWORD *)v8 + 3) = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v4);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = (WTF::StringImpl *)*((_QWORD *)v8 + 2);
        *((_QWORD *)v8 + 2) = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v4);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v4);
          else
            *(_DWORD *)v12 -= 2;
        }
        WTF::fastFree(v8, v4);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    WTF::Ref<WebCore::StyleInheritedResourceData,WTF::RawPtrTraits<WebCore::StyleInheritedResourceData>,WTF::DefaultRefDerefTraits<WebCore::StyleInheritedResourceData>>::~Ref(&v13, v4);
    return *a1;
  }
  return v1;
}

WTF **WTF::Ref<WebCore::StyleInheritedResourceData,WTF::RawPtrTraits<WebCore::StyleInheritedResourceData>,WTF::DefaultRefDerefTraits<WebCore::StyleInheritedResourceData>>::~Ref(WTF **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::Style::ApplyPropertyBorderImageModifier<(WebCore::Style::BorderImageType)1,(WebCore::Style::BorderImageModifierType)0>::setValue(uint64_t result, WebCore::NinePieceImage::Data **a2)
{
  WTF **v2;
  uint64_t v3;
  WebCore::NinePieceImage::Data *v4;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::StyleRareNonInheritedData *v14;
  WebCore::NinePieceImage::Data *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  BOOL v20;
  WebCore::NinePieceImage::Data *v21;

  v2 = (WTF **)(result + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 40) + 216);
  v4 = *a2;
  if ((WebCore::NinePieceImage::Data *)v3 != *a2)
  {
    if ((v6 = *(_QWORD *)(v3 + 8), v7 = *((_QWORD *)v4 + 1), v6 != v7)
      && (v6 ? (v20 = v7 == 0) : (v20 = 1), v20 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
      || !WebCore::operator==((unsigned __int8 *)(v3 + 16), (unsigned __int8 *)v4 + 16)
      || *(unsigned __int8 *)(v3 + 4) != *((unsigned __int8 *)v4 + 4)
      || !WebCore::operator==((unsigned __int8 *)(v3 + 48), (unsigned __int8 *)v4 + 48)
      || *(unsigned __int8 *)(v3 + 5) != *((unsigned __int8 *)v4 + 5)
      || (result = WebCore::operator==((unsigned __int8 *)(v3 + 80), (unsigned __int8 *)v4 + 80), !(_DWORD)result)
      || *(unsigned __int8 *)(v3 + 6) != *((unsigned __int8 *)v4 + 6)
      || *(unsigned __int8 *)(v3 + 7) != *((unsigned __int8 *)v4 + 7))
    {
      v8 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v2);
      v9 = (_DWORD *)*((_QWORD *)v8 + 5);
      if (*v9 == 1)
      {
        v12 = *((_QWORD *)v8 + 5);
      }
      else
      {
        v10 = v8;
        v11 = WTF::fastMalloc((WTF *)0x288);
        v12 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v11, (uint64_t)v9);
        v14 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v10 + 5);
        *((_QWORD *)v10 + 5) = v12;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
          {
            WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v14, v13);
            WTF::fastFree(v18, v19);
            v12 = *((_QWORD *)v10 + 5);
          }
          else
          {
            --*(_DWORD *)v14;
          }
        }
      }
      v15 = *a2;
      *(_DWORD *)v15 = *(_DWORD *)*a2 + 1;
      v21 = v15;
      WTF::Ref<WebCore::NinePieceImage::Data,WTF::RawPtrTraits<WebCore::NinePieceImage::Data>,WTF::DefaultRefDerefTraits<WebCore::NinePieceImage::Data>>::operator=((WebCore::NinePieceImage::Data **)(v12 + 216), &v21);
      result = (uint64_t)v21;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v21);
          return WTF::fastFree(v16, v17);
        }
        else
        {
          --*(_DWORD *)v21;
        }
      }
    }
  }
  return result;
}

WebCore::FillLayer *WebCore::RenderStyle::ensureMaskLayers(WTF **this)
{
  WTF *v1;
  const WebCore::FillLayer **v2;
  WTF::StringImpl *v3;
  WebCore::StyleMiscNonInheritedData *v4;
  WTF *v6;
  void *v7;
  const WebCore::FillLayer **v8;

  v1 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  v2 = (const WebCore::FillLayer **)*((_QWORD *)v1 + 4);
  if (*(_DWORD *)v2 != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v2, (uint64_t *)&v8);
    v2 = v8;
    v4 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = v8;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v4, v3);
        WTF::fastFree(v6, v7);
        v2 = (const WebCore::FillLayer **)*((_QWORD *)v1 + 4);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return WTF::DataRef<WebCore::FillLayer>::access(v2 + 6);
}

void WebCore::RenderStyle::setBlendMode(uint64_t a1, int a2)
{
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  __int16 v8;
  unsigned int v9;
  WebCore::StyleRareInheritedData **v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = (WTF **)(a1 + 8);
  if (((*(_DWORD *)(*(_QWORD *)(v5 + 40) + 636) >> 20) & 0x1F) != a2)
  {
    v6 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v4);
    v7 = WTF::DataRef<WebCore::StyleRareNonInheritedData>::access((uint64_t *)v6 + 5);
    v8 = *((_WORD *)v7 + 320);
    v9 = v7[159] & 0xFE0FFFFF;
    *((_BYTE *)v7 + 642) = *((_BYTE *)v7 + 642);
    *((_WORD *)v7 + 320) = v8;
    v7[159] = v9 | ((a2 & 0x1F) << 20);
  }
  v11 = *(_QWORD *)(a1 + 24);
  v10 = (WebCore::StyleRareInheritedData **)(a1 + 24);
  if ((a2 != 1) == ((*(_BYTE *)(v11 + 239) & 2) == 0))
  {
    WTF::DataRef<WebCore::StyleRareInheritedData>::access(v10);
    *(_DWORD *)(v12 + 236) = *(_DWORD *)(v12 + 236) & 0xFDFFFFFF | ((a2 != 1) << 25);
  }
}

uint64_t WebCore::fromCSSValueID<WebCore::BlendMode>(int a1)
{
  uint64_t result;

  if (a1 <= 739)
  {
    switch(a1)
    {
      case 90:
        return 1;
      case 246:
        return 17;
      case 247:
        return 18;
      default:
        return 0;
    }
  }
  else
  {
    switch(a1)
    {
      case 740:
        result = 2;
        break;
      case 741:
        result = 3;
        break;
      case 742:
        result = 6;
        break;
      case 743:
        result = 4;
        break;
      case 744:
        result = 5;
        break;
      case 745:
        result = 7;
        break;
      case 746:
        result = 8;
        break;
      case 747:
        result = 9;
        break;
      case 748:
        result = 10;
        break;
      case 749:
        result = 11;
        break;
      case 750:
        result = 12;
        break;
      case 751:
        result = 13;
        break;
      case 752:
        result = 14;
        break;
      case 753:
        result = 15;
        break;
      case 754:
        result = 16;
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setObjectFit(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 32) + 151) & 7) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_DWORD *)(result + 148) = *(_DWORD *)(result + 148) & 0xF8FFFFFF | ((v4 & 7) << 24);
  }
  return result;
}

uint64_t WebCore::RenderStyle::setObjectPosition(uint64_t a1, WebCore::Length *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WebCore::StyleMiscNonInheritedData *v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  char isCalculatedEqual;
  WebCore::Length *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  v5 = *(unsigned __int8 **)(v4 + 32);
  v6 = v5[132];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[133] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_19;
  if (v6 != 13)
  {
    if (v6 == 11)
    {
      v24 = result;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 128), a2);
      result = v24;
      if ((isCalculatedEqual & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      v7 = *((float *)v5 + 32);
      if (!v5[134])
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v8 = (float)*(int *)a2;
      if (v7 != v8)
        goto LABEL_19;
    }
  }
  v9 = v5[140];
  if (v9 == *((unsigned __int8 *)a2 + 12) && (v5[141] != 0) == (*((_BYTE *)a2 + 13) != 0))
  {
    if (v9 == 13)
      return result;
    if (v9 == 11)
    {
      v26 = (WebCore::Length *)(v5 + 136);
      v27 = result;
      v28 = WebCore::Length::isCalculatedEqual(v26, (WebCore::Length *)((char *)a2 + 8));
      result = v27;
      if ((v28 & 1) != 0)
        return result;
    }
    else
    {
      v10 = *((float *)v5 + 34);
      if (!v5[142])
        v10 = (float)SLODWORD(v10);
      v11 = *((float *)a2 + 2);
      if (!*((_BYTE *)a2 + 14))
        v11 = (float)SLODWORD(v11);
      if (v10 == v11)
        return result;
    }
  }
LABEL_19:
  v12 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
  result = *((_QWORD *)v12 + 4);
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v31);
    result = v31;
    v14 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v12 + 4);
    *((_QWORD *)v12 + 4) = v31;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v14, v13);
        WTF::fastFree(v22, v23);
        result = *((_QWORD *)v12 + 4);
      }
      else
      {
        --*(_DWORD *)v14;
      }
    }
  }
  v15 = (_DWORD *)(result + 128);
  if ((WebCore::Length *)(result + 128) != a2)
  {
    if (*(_BYTE *)(result + 132) == 11)
    {
      v29 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v15);
      result = v29;
    }
    v16 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(result + 132) = v16;
    *(_BYTE *)(result + 133) = *((_BYTE *)a2 + 5);
    if (v16 - 2 < 9)
    {
      v17 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(result + 134) = v17;
      if (v17)
      {
        *v15 = *(_DWORD *)a2;
        goto LABEL_28;
      }
      v20 = *(_DWORD *)a2;
      goto LABEL_35;
    }
    if (v16 <= 0xD)
    {
      if (((1 << v16) & 0x3003) != 0)
      {
        *v15 = 0;
      }
      else if (v16 == 11)
      {
        v20 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
LABEL_35:
        *v15 = v20;
      }
    }
LABEL_28:
    *((_BYTE *)a2 + 4) = 0;
    if (*(_BYTE *)(result + 140) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v30 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 136));
      result = v30;
    }
    v18 = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 140) = v18;
    *(_BYTE *)(result + 141) = *((_BYTE *)a2 + 13);
    if (v18 - 2 >= 9)
    {
      if (v18 > 0xD)
        goto LABEL_32;
      if (((1 << v18) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 136) = 0;
        goto LABEL_32;
      }
      if (v18 != 11)
        goto LABEL_32;
      v21 = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
    }
    else
    {
      v19 = *((unsigned __int8 *)a2 + 14);
      *(_BYTE *)(result + 142) = v19;
      if (v19)
      {
        *(_DWORD *)(result + 136) = *((_DWORD *)a2 + 2);
LABEL_32:
        *((_BYTE *)a2 + 12) = 0;
        return result;
      }
      v21 = *((_DWORD *)a2 + 2);
    }
    *(_DWORD *)(result + 136) = v21;
    goto LABEL_32;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setOffsetAnchor(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  WTF *v20;
  void *v21;
  int v22;
  int v23;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[428];
  if (v5 != *((unsigned __int8 *)a2 + 4) || (v4[429] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_19;
  if (v5 != 13)
  {
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 424), a2);
      if ((result & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      v6 = *((float *)v4 + 106);
      if (!v4[430])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 != v7)
        goto LABEL_19;
    }
  }
  v8 = v4[436];
  if (v8 == *((unsigned __int8 *)a2 + 12) && (v4[437] != 0) == (*((_BYTE *)a2 + 13) != 0))
  {
    if (v8 == 13)
      return result;
    if (v8 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 432), (WebCore::Length *)((char *)a2 + 8));
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v9 = *((float *)v4 + 108);
      if (!v4[438])
        v9 = (float)SLODWORD(v9);
      v10 = *((float *)a2 + 2);
      if (!*((_BYTE *)a2 + 14))
        v10 = (float)SLODWORD(v10);
      if (v9 == v10)
        return result;
    }
  }
LABEL_19:
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v11 = *(_DWORD **)(result + 40);
  if (*v11 == 1)
  {
    v13 = *(_QWORD *)(result + 40);
  }
  else
  {
    v12 = result;
    v13 = WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v13, (uint64_t)v11);
    result = *(_QWORD *)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v13;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v14);
        result = WTF::fastFree(v20, v21);
        v13 = *(_QWORD *)(v12 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v15 = (_DWORD *)(v13 + 424);
  if ((WebCore::Length *)(v13 + 424) != a2)
  {
    if (*(_BYTE *)(v13 + 428) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v15);
    }
    v16 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(v13 + 428) = v16;
    *(_BYTE *)(v13 + 429) = *((_BYTE *)a2 + 5);
    if (v16 - 2 < 9)
    {
      v17 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(v13 + 430) = v17;
      if (v17)
      {
        *v15 = *(_DWORD *)a2;
        goto LABEL_29;
      }
      v22 = *(_DWORD *)a2;
      goto LABEL_37;
    }
    if (v16 <= 0xD)
    {
      if (((1 << v16) & 0x3003) != 0)
      {
        *v15 = 0;
      }
      else if (v16 == 11)
      {
        v22 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
LABEL_37:
        *v15 = v22;
      }
    }
LABEL_29:
    *((_BYTE *)a2 + 4) = 0;
    if (*(_BYTE *)(v13 + 436) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 432));
    }
    v18 = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(v13 + 436) = v18;
    *(_BYTE *)(v13 + 437) = *((_BYTE *)a2 + 13);
    if (v18 - 2 >= 9)
    {
      if (v18 > 0xD)
        goto LABEL_33;
      if (((1 << v18) & 0x3003) != 0)
      {
        *(_DWORD *)(v13 + 432) = 0;
        goto LABEL_33;
      }
      if (v18 != 11)
        goto LABEL_33;
      v23 = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
    }
    else
    {
      v19 = *((unsigned __int8 *)a2 + 14);
      *(_BYTE *)(v13 + 438) = v19;
      if (v19)
      {
        *(_DWORD *)(v13 + 432) = *((_DWORD *)a2 + 2);
LABEL_33:
        *((_BYTE *)a2 + 12) = 0;
        return result;
      }
      v23 = *((_DWORD *)a2 + 2);
    }
    *(_DWORD *)(v13 + 432) = v23;
    goto LABEL_33;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setOffsetDistance(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[404];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[405] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 400), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 100);
      if (!v4[406])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 400;
  if (v10 + 400 != (_BYTE *)a2)
  {
    if (v10[404] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[404] = v13;
    v10[405] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[406] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setOffsetPosition(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  WTF *v20;
  void *v21;
  int v22;
  int v23;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[412];
  if (v5 != *((unsigned __int8 *)a2 + 4) || (v4[413] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_19;
  if (v5 != 13)
  {
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 408), a2);
      if ((result & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      v6 = *((float *)v4 + 102);
      if (!v4[414])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 != v7)
        goto LABEL_19;
    }
  }
  v8 = v4[420];
  if (v8 == *((unsigned __int8 *)a2 + 12) && (v4[421] != 0) == (*((_BYTE *)a2 + 13) != 0))
  {
    if (v8 == 13)
      return result;
    if (v8 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 416), (WebCore::Length *)((char *)a2 + 8));
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v9 = *((float *)v4 + 104);
      if (!v4[422])
        v9 = (float)SLODWORD(v9);
      v10 = *((float *)a2 + 2);
      if (!*((_BYTE *)a2 + 14))
        v10 = (float)SLODWORD(v10);
      if (v9 == v10)
        return result;
    }
  }
LABEL_19:
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v11 = *(_DWORD **)(result + 40);
  if (*v11 == 1)
  {
    v13 = *(_QWORD *)(result + 40);
  }
  else
  {
    v12 = result;
    v13 = WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v13, (uint64_t)v11);
    result = *(_QWORD *)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v13;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v14);
        result = WTF::fastFree(v20, v21);
        v13 = *(_QWORD *)(v12 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v15 = (_DWORD *)(v13 + 408);
  if ((WebCore::Length *)(v13 + 408) != a2)
  {
    if (*(_BYTE *)(v13 + 412) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v15);
    }
    v16 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(v13 + 412) = v16;
    *(_BYTE *)(v13 + 413) = *((_BYTE *)a2 + 5);
    if (v16 - 2 < 9)
    {
      v17 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(v13 + 414) = v17;
      if (v17)
      {
        *v15 = *(_DWORD *)a2;
        goto LABEL_29;
      }
      v22 = *(_DWORD *)a2;
      goto LABEL_37;
    }
    if (v16 <= 0xD)
    {
      if (((1 << v16) & 0x3003) != 0)
      {
        *v15 = 0;
      }
      else if (v16 == 11)
      {
        v22 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
LABEL_37:
        *v15 = v22;
      }
    }
LABEL_29:
    *((_BYTE *)a2 + 4) = 0;
    if (*(_BYTE *)(v13 + 420) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 416));
    }
    v18 = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(v13 + 420) = v18;
    *(_BYTE *)(v13 + 421) = *((_BYTE *)a2 + 13);
    if (v18 - 2 >= 9)
    {
      if (v18 > 0xD)
        goto LABEL_33;
      if (((1 << v18) & 0x3003) != 0)
      {
        *(_DWORD *)(v13 + 416) = 0;
        goto LABEL_33;
      }
      if (v18 != 11)
        goto LABEL_33;
      v23 = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
    }
    else
    {
      v19 = *((unsigned __int8 *)a2 + 14);
      *(_BYTE *)(v13 + 422) = v19;
      if (v19)
      {
        *(_DWORD *)(v13 + 416) = *((_DWORD *)a2 + 2);
LABEL_33:
        *((_BYTE *)a2 + 12) = 0;
        return result;
      }
      v23 = *((_DWORD *)a2 + 2);
    }
    *(_DWORD *)(v13 + 416) = v23;
    goto LABEL_33;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setOrder(WebCore::RenderStyle *this, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (*(_DWORD *)(*(_QWORD *)(v3 + 32) + 144) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_DWORD *)(result + 144) = a2;
  }
  return result;
}

void WebCore::RenderStyle::setOrphans(WebCore::RenderStyle *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::StyleRareInheritedData *v8;
  WTF *v9;
  void *v10;

  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = *((_QWORD *)this + 3);
  if (*(unsigned __int16 *)(v4 + 226) != v3 || (*(_BYTE *)(v4 + 228) & 2) != 0)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v5 = *((_QWORD *)this + 3);
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, v4);
      v8 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v5;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v8, v7);
          WTF::fastFree(v9, v10);
          v5 = *((_QWORD *)this + 3);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    *(_WORD *)(v5 + 226) = v3;
    *(_DWORD *)(v5 + 228) &= ~2u;
  }
}

void WebCore::RenderStyle::setOverflowWrap(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[57];
  if (((v3 >> 9) & 3) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[57];
      v2 = v7;
    }
    v2[57] = v3 & 0xFFFFF9FF | ((v4 & 3) << 9);
  }
}

void WebCore::RenderStyle::setPaintOrder(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[59];
  if (((v3 >> 11) & 7) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[59];
      v2 = v7;
    }
    v2[59] = v3 & 0xFFFFC7FF | ((v4 & 7) << 11);
  }
}

uint64_t WebCore::RenderStyle::setPerspectiveOriginX(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[32];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[33] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 28), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 7);
      if (!v4[34])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 28;
  if (v10 + 28 != (_BYTE *)a2)
  {
    if (v10[32] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[32] = v13;
    v10[33] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[34] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setPerspectiveOriginY(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[40];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[41] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 36), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 9);
      if (!v4[42])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 36;
  if (v10 + 36 != (_BYTE *)a2)
  {
    if (v10[40] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[40] = v13;
    v10[41] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[42] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::SVGRenderStyle::setR(uint64_t this, const WebCore::Length *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  WTF *v12;
  void *v13;

  v3 = this;
  v4 = *(unsigned __int8 **)(this + 64);
  v5 = v4[24];
  if (v5 != *((unsigned __int8 *)a2 + 4) || (v4[25] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_14;
  if (v5 == 13)
    return this;
  this = (uint64_t)(v4 + 20);
  if (v5 == 11)
  {
    this = WebCore::Length::isCalculatedEqual((WebCore::Length *)this, a2);
    if ((this & 1) != 0)
      return this;
    v4 = *(unsigned __int8 **)(v3 + 64);
    goto LABEL_14;
  }
  if (v4[26])
    v6 = *(float *)this;
  else
    v6 = (float)*(int *)this;
  v7 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v7 = (float)*(int *)a2;
  if (v6 != v7)
  {
LABEL_14:
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (uint64_t)v4;
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x48);
      WebCore::StyleLayoutData::StyleLayoutData((WebCore::StyleLayoutData *)v8, (const WebCore::StyleLayoutData *)v4);
      this = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v8;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::StyleLayoutData::~StyleLayoutData((WebCore::StyleLayoutData *)this);
          this = WTF::fastFree(v12, v13);
          v8 = *(_QWORD *)(v3 + 64);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
    }
    v9 = (_DWORD *)(v8 + 20);
    if ((const WebCore::Length *)(v8 + 20) != a2)
    {
      if (*(_BYTE *)(v8 + 24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      }
      v10 = *((unsigned __int8 *)a2 + 4);
      *(_BYTE *)(v8 + 24) = v10;
      *(_BYTE *)(v8 + 25) = *((_BYTE *)a2 + 5);
      if (v10 <= 0xD)
      {
        v11 = 1 << v10;
        if ((v11 & 0x7FC) != 0)
        {
          *(_BYTE *)(v8 + 26) = *((_BYTE *)a2 + 6);
          *v9 = *(_DWORD *)a2;
        }
        else if ((v11 & 0x3003) != 0)
        {
          *v9 = 0;
        }
        else
        {
          *v9 = *(_DWORD *)a2;
          return (uint64_t)WebCore::Length::ref((int *)(v8 + 20));
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setResize(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(_DWORD *)(*(_QWORD *)(v3 + 32) + 148) >> 27) & 7) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v10);
      result = v10;
      v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v5 + 4);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_DWORD *)(result + 148) = *(_DWORD *)(result + 148) & 0xC7FFFFFF | ((v4 & 7) << 27);
  }
  return result;
}

uint64_t WebCore::RenderStyle::setRowGap(uint64_t result, float *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  int v13;
  WTF *v14;
  void *v15;
  int v16;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  if (v4[388] == *(unsigned __int8 *)a2)
  {
    v5 = v4[396];
    if (v5 == *((unsigned __int8 *)a2 + 8) && (v4[397] != 0) == (*((_BYTE *)a2 + 9) != 0))
    {
      if (v5 == 13)
        return result;
      if (v5 == 11)
      {
        result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 392), (const WebCore::Length *)(a2 + 1));
        if ((result & 1) != 0)
          return result;
      }
      else
      {
        v6 = *((float *)v4 + 98);
        if (!v4[398])
          v6 = (float)SLODWORD(v6);
        v7 = a2[1];
        if (!*((_BYTE *)a2 + 10))
          v7 = (float)SLODWORD(v7);
        if (v6 == v7)
          return result;
      }
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_QWORD *)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v14, v15);
        v10 = *(_QWORD *)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  *(_BYTE *)(v10 + 388) = *(_BYTE *)a2;
  if ((float *)(v10 + 388) != a2)
  {
    if (*(_BYTE *)(v10 + 396) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v10 + 392));
    }
    v12 = *((unsigned __int8 *)a2 + 8);
    *(_BYTE *)(v10 + 396) = v12;
    *(_BYTE *)(v10 + 397) = *((_BYTE *)a2 + 9);
    if (v12 - 2 >= 9)
    {
      if (v12 > 0xD)
        goto LABEL_20;
      if (((1 << v12) & 0x3003) != 0)
      {
        *(_DWORD *)(v10 + 392) = 0;
        goto LABEL_20;
      }
      if (v12 != 11)
        goto LABEL_20;
      v16 = *((_DWORD *)a2 + 1);
      a2[1] = 0.0;
    }
    else
    {
      v13 = *((unsigned __int8 *)a2 + 10);
      *(_BYTE *)(v10 + 398) = v13;
      if (v13)
      {
        *(float *)(v10 + 392) = a2[1];
LABEL_20:
        *((_BYTE *)a2 + 8) = 0;
        return result;
      }
      v16 = *((_DWORD *)a2 + 1);
    }
    *(_DWORD *)(v10 + 392) = v16;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::SVGRenderStyle::setRx(uint64_t this, const WebCore::Length *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  WTF *v12;
  void *v13;

  v3 = this;
  v4 = *(unsigned __int8 **)(this + 64);
  v5 = v4[32];
  if (v5 != *((unsigned __int8 *)a2 + 4) || (v4[33] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_14;
  if (v5 == 13)
    return this;
  this = (uint64_t)(v4 + 28);
  if (v5 == 11)
  {
    this = WebCore::Length::isCalculatedEqual((WebCore::Length *)this, a2);
    if ((this & 1) != 0)
      return this;
    v4 = *(unsigned __int8 **)(v3 + 64);
    goto LABEL_14;
  }
  if (v4[34])
    v6 = *(float *)this;
  else
    v6 = (float)*(int *)this;
  v7 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v7 = (float)*(int *)a2;
  if (v6 != v7)
  {
LABEL_14:
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (uint64_t)v4;
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x48);
      WebCore::StyleLayoutData::StyleLayoutData((WebCore::StyleLayoutData *)v8, (const WebCore::StyleLayoutData *)v4);
      this = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v8;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::StyleLayoutData::~StyleLayoutData((WebCore::StyleLayoutData *)this);
          this = WTF::fastFree(v12, v13);
          v8 = *(_QWORD *)(v3 + 64);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
    }
    v9 = (_DWORD *)(v8 + 28);
    if ((const WebCore::Length *)(v8 + 28) != a2)
    {
      if (*(_BYTE *)(v8 + 32) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      }
      v10 = *((unsigned __int8 *)a2 + 4);
      *(_BYTE *)(v8 + 32) = v10;
      *(_BYTE *)(v8 + 33) = *((_BYTE *)a2 + 5);
      if (v10 <= 0xD)
      {
        v11 = 1 << v10;
        if ((v11 & 0x7FC) != 0)
        {
          *(_BYTE *)(v8 + 34) = *((_BYTE *)a2 + 6);
          *v9 = *(_DWORD *)a2;
        }
        else if ((v11 & 0x3003) != 0)
        {
          *v9 = 0;
        }
        else
        {
          *v9 = *(_DWORD *)a2;
          return (uint64_t)WebCore::Length::ref((int *)(v8 + 28));
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::SVGRenderStyle::setRy(WebCore::SVGRenderStyle *this, const WebCore::Length *a2)
{
  const WebCore::StyleLayoutData **v3;
  uint64_t result;
  WebCore::StyleLayoutData *v5;

  v3 = (const WebCore::StyleLayoutData **)((char *)this + 64);
  result = WebCore::Length::operator==((unsigned __int8 *)(*((_QWORD *)this + 8) + 36), (unsigned __int8 *)a2);
  if ((result & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleLayoutData>::access(v3);
    return (uint64_t)WebCore::Length::operator=((WebCore::StyleLayoutData *)((char *)v5 + 36), (unsigned __int8 *)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ScrollAxis,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  unsigned int v8;
  WTF *v9;
  size_t v10;
  void *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;

  if (a2 != (const void **)a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *((_DWORD *)a2 + 3);
    if (v4 <= v5)
    {
      v6 = *(_DWORD *)(a1 + 8);
      if (v5 > v6)
      {
        if (v6)
        {
          if (v4)
            *(_DWORD *)(a1 + 12) = 0;
          v7 = *(WTF **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v7, a2);
            v6 = *(_DWORD *)(a1 + 8);
          }
        }
        v8 = *((_DWORD *)a2 + 3);
        if (v6 < v8)
        {
          v9 = *(WTF **)a1;
          v10 = *(unsigned int *)(a1 + 12);
          v11 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 3));
          *(_DWORD *)(a1 + 8) = v8;
          *(_QWORD *)a1 = v11;
          memcpy(v11, v9, v10);
          if (v9)
          {
            if (*(WTF **)a1 == v9)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree(v9, v12);
          }
        }
      }
      v5 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
    }
    v13 = *(WTF **)a1;
    if (v5)
    {
      memmove(v13, *a2, v5);
      v14 = *(unsigned int *)(a1 + 12);
      v13 = *(WTF **)a1;
    }
    else
    {
      v14 = 0;
    }
    memcpy((char *)v13 + v14, (char *)*a2 + v14, (_BYTE *)*a2 + *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + v14));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

double WebCore::Style::BuilderConverter::convertScrollTimelineAxis(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  double result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  char v19;
  _BYTE *v20;

  v4 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v4 & 0x3F800) == 0)
  {
    if ((v4 & 0x3F87F) == 0x50)
    {
      v18 = *(unsigned __int16 *)(a2 + 8);
      if (v18 == 998)
        v19 = 2;
      else
        v19 = v18 == 366;
      if (v18 == 999)
        v5 = 3;
      else
        v5 = v19;
    }
    else
    {
      v5 = 0;
    }
    v20 = (_BYTE *)WTF::fastMalloc((WTF *)1);
    *(_QWORD *)a1 = v20;
    *v20 = v5;
    *(_QWORD *)&result = 0x100000001;
    *(_QWORD *)(a1 + 8) = 0x100000001;
    return result;
  }
  if ((v4 & 0x3F800) != 0x1D800)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1951E4798);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a2 + 8);
  if (v6)
  {
    v7 = WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 8));
    *(_DWORD *)(a1 + 8) = v6;
    *(_QWORD *)a1 = v7;
    v9 = *(_DWORD *)(a2 + 8);
    if (v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = *(_QWORD *)(a2 + 48);
      do
      {
        if (v11 > 3)
        {
          if (v9 <= v11)
            goto LABEL_30;
          v14 = (uint64_t *)(v13 + 8 * (v12 - 4));
        }
        else
        {
          v14 = (uint64_t *)(a2 + 16 + 8 * v12);
        }
        v15 = *v14;
        if (((*(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16)) & 0x3F87F) != 0x50)
          goto LABEL_11;
        v17 = *(unsigned __int16 *)(v15 + 8);
        switch(v17)
        {
          case 999:
            v16 = 3;
            break;
          case 998:
            v16 = 2;
            break;
          case 366:
            v16 = 1;
            break;
          default:
LABEL_11:
            v16 = 0;
            break;
        }
        *(_BYTE *)(v7 + v10++) = v16;
        *(_DWORD *)(a1 + 12) = v10;
        v11 = v12 + 1;
        v12 = (v12 + 1);
      }
      while (v9 != v11);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Style::BuilderConverter::convertScrollTimelineName(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t *v22;
  WTF::StringImpl *v23;

  v3 = result;
  v4 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v4 & 0x3F800) != 0x1D800)
  {
    if ((v4 & 0x3F800) != 0 || (v4 & 0x3F87F) == 0x50 && *(_WORD *)(a2 + 8) == 6)
    {
      *(_QWORD *)result = 0;
      *((_QWORD *)result + 1) = 0;
      return result;
    }
    v16 = 0;
    v17 = (*(unsigned __int16 *)(a2 + 4) & 0x7Fu) - 20;
    if (v17 > 0x3C)
      goto LABEL_36;
    if (((1 << ((*(_WORD *)(a2 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
    {
      v16 = *(WTF::StringImpl **)(a2 + 8);
      if (v16)
      {
LABEL_34:
        *(_DWORD *)v16 += 2;
        if ((*((_BYTE *)v16 + 16) & 0x10) == 0)
        {
          WTF::AtomStringImpl::addSlowCase();
          v19 = v16;
          v16 = v23;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v18);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
      }
    }
    else
    {
      if (v17 == 60)
      {
        v22 = WebCore::nameString(*(unsigned __int16 *)(a2 + 8));
      }
      else
      {
        if (v17 != 59)
          goto LABEL_36;
        v22 = WebCore::nameString(*(unsigned __int16 *)(a2 + 8));
      }
      v16 = (WTF::StringImpl *)*v22;
      if (*v22)
        goto LABEL_34;
    }
LABEL_36:
    *((_QWORD *)v3 + 1) = 1;
    result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v3 = result;
    if (v16)
    {
      v21 = *(_DWORD *)v16;
      *(_DWORD *)v16 += 2;
      *(_QWORD *)result = v16;
      *((_DWORD *)v3 + 3) = 1;
      if (v21)
        *(_DWORD *)v16 = v21;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v16, v20);
    }
    else
    {
      *(_QWORD *)result = 0;
      *((_DWORD *)v3 + 3) = 1;
    }
    return result;
  }
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
LABEL_53:
      __break(0xC471u);
      JUMPOUT(0x1951E4A78);
    }
    result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v5));
    *((_DWORD *)v3 + 2) = v5;
    *(_QWORD *)v3 = result;
    v6 = *(_DWORD *)(a2 + 8);
    if (v6)
    {
      v7 = result;
      v8 = 0;
      v9 = 0;
      v10 = 1;
      do
      {
        if (v8 > 3)
        {
          if (*(_DWORD *)(a2 + 8) <= v8)
          {
            __break(0xC471u);
            JUMPOUT(0x1951E4AC8);
          }
          v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 8 * (v9 - 4));
        }
        else
        {
          v11 = (uint64_t *)(a2 + 16 + 8 * v9);
        }
        v12 = *v11;
        if (((*(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16)) & 0x3F800) != 0)
          goto LABEL_53;
        v13 = 0;
        v14 = (*(unsigned __int16 *)(v12 + 4) & 0x7Fu) - 20;
        if (v14 <= 0x3C)
        {
          if (((1 << ((*(_WORD *)(v12 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
          {
            v13 = *(WTF::StringImpl **)(v12 + 8);
            if (v13)
              goto LABEL_16;
          }
          else
          {
            if (v14 == 60)
            {
              result = (WTF::StringImpl *)WebCore::nameString(*(unsigned __int16 *)(v12 + 8));
            }
            else
            {
              if (v14 != 59)
                goto LABEL_18;
              result = (WTF::StringImpl *)WebCore::nameString(*(unsigned __int16 *)(v12 + 8));
            }
            v13 = *(WTF::StringImpl **)result;
            if (*(_QWORD *)result)
            {
LABEL_16:
              *(_DWORD *)v13 += 2;
              if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
              {
                WTF::AtomStringImpl::addSlowCase();
                result = v13;
                v13 = v23;
                v23 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
                  else
                    *(_DWORD *)result -= 2;
                }
              }
            }
          }
        }
LABEL_18:
        *((_QWORD *)v7 + (v10 - 1)) = v13;
        *((_DWORD *)v3 + 3) = v10;
        v8 = v9 + 1;
        v9 = (v9 + 1);
        ++v10;
      }
      while (v6 != v8);
    }
  }
  return result;
}

void WebCore::RenderStyle::setScrollbarColor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  char v12;
  uint64_t v13;
  int v14;
  _BOOL4 v16;
  BOOL v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::StyleRareInheritedData *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t **v41;

  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_42;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned int *)(v4 + 392);
  if (!(_DWORD)v5 && (*(_BYTE *)(v4 + 390) & 4) == 0)
    goto LABEL_38;
  v6 = *(_DWORD *)(a2 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      goto LABEL_38;
  }
  else
  {
    v37 = &v32;
    v12 = ((uint64_t (*)(uint64_t **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v37, v4 + 384, a2);
    if ((v12 & 1) == 0)
      goto LABEL_38;
  }
  v13 = *(unsigned int *)(v4 + 408);
  v14 = *(_DWORD *)(a2 + 24);
  v16 = v14 == (_DWORD)v13 && v14 != -1;
  if ((_DWORD)v13 == -1 || !v16)
  {
    v18 = v14 == -1;
    if ((_DWORD)v13 == -1)
      v19 = v18;
    else
      v19 = v16;
    if ((v19 & 1) != 0)
      return;
LABEL_38:
    if (*(_BYTE *)(a2 + 32))
    {
      v37 = (uint64_t *)&v36;
      v38 = &v36;
      v39 = &v36;
      v40 = &v36;
      v21 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v21 == -1
        || (v41 = &v37,
            ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v21])(&v32, &v41, a2), v37 = (uint64_t *)&v36, v38 = &v36, v39 = &v36, v40 = &v36, v22 = *(unsigned int *)(a2 + 24), (_DWORD)v22 == -1))
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::ScrollbarColor::MarkableTraits::emptyValue(v31);
        return;
      }
      v41 = &v37;
      ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v22])(&v34, &v41, a2 + 16);
LABEL_43:
      v23 = *(_DWORD **)(a1 + 24);
      if (*v23 == 1)
      {
        v24 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v24 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v24, (uint64_t)v23);
        v28 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v24;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v28, v27);
            WTF::fastFree(v29, v30);
            v24 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            --*(_DWORD *)v28;
          }
        }
      }
      v25 = *(unsigned int *)(v24 + 392);
      if ((_DWORD)v25 == -1)
      {
        if (v33 == -1)
          goto LABEL_50;
      }
      else if (v33 == -1)
      {
        ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v25])(&v37, v24 + 384);
        *(_DWORD *)(v24 + 392) = -1;
        goto LABEL_50;
      }
      v37 = (uint64_t *)(v24 + 384);
      ((void (*)(uint64_t **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                        + v33))(&v37);
LABEL_50:
      v26 = *(unsigned int *)(v24 + 408);
      if ((_DWORD)v26 == -1)
      {
        if (v35 == -1)
        {
LABEL_57:
          v35 = -1;
          if (v33 != -1)
            ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v33])(&v37, &v32);
          return;
        }
      }
      else if (v35 == -1)
      {
        ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v26])(&v37, v24 + 400);
        *(_DWORD *)(v24 + 408) = -1;
        goto LABEL_55;
      }
      v37 = (uint64_t *)(v24 + 400);
      ((void (*)(uint64_t **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                        + v35))(&v37);
LABEL_55:
      if (v35 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v35])(&v37, &v34);
      goto LABEL_57;
    }
LABEL_42:
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    goto LABEL_43;
  }
  v37 = &v32;
  v20 = ((uint64_t (*)(uint64_t **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v13])(&v37, v4 + 400, a2 + 16);
  if ((v20 & 1) == 0)
    goto LABEL_38;
}

void WebCore::ScrollbarColor::MarkableTraits::emptyValue(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t WebCore::RenderStyle::setShapeMargin(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[252];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[253] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 248), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 62);
      if (!v4[254])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 248;
  if (v10 + 248 != (_BYTE *)a2)
  {
    if (v10[252] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[252] = v13;
    v10[253] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[254] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

unsigned int *WTF::DataRef<WebCore::StyleStopData>::access(unsigned int **a1)
{
  unsigned int *v1;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  void *v6;
  unsigned int *v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v12[4];
  _QWORD *v13;

  v1 = *a1;
  if (**a1 == 1)
    return *a1;
  v3 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *v3 = 1;
  v3[1] = v1[1];
  v12[0] = &v11;
  v12[1] = &v11;
  v12[2] = &v11;
  v12[3] = &v11;
  v4 = v1[4];
  if ((_DWORD)v4 != -1)
  {
    v5 = v3;
    v13 = v12;
    ((void (*)(_QWORD **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v4])(&v13, v1 + 2);
    v7 = *a1;
    *a1 = v5;
    if (v7)
    {
      if (*v7 == 1)
      {
        v9 = v7[4];
        if ((_DWORD)v9 != -1)
          ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v9])(v12, v7 + 2);
        v7[4] = -1;
        WTF::fastFree((WTF *)v7, v6);
        return *a1;
      }
      else
      {
        --*v7;
      }
    }
    return v5;
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return (unsigned int *)WebCore::SVGRenderStyle::setStrokePaint(v10);
}

void WebCore::SVGRenderStyle::setStrokePaint(uint64_t a1, int a2, const WTF::StringImpl *a3, WTF::StringImpl **a4, int a5, int a6)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v16;
  BOOL v18;
  char v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  BOOL v29;
  char v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  int *v50;
  char *v51;
  char *v52;
  char *v53;
  int **v54;

  if (!a5)
    goto LABEL_22;
  v11 = (uint64_t *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 24);
  if (*(unsigned __int8 *)(v12 + 80) != a2)
  {
    if (*(_DWORD *)v12 != 1)
    {
      v40 = WTF::fastMalloc((WTF *)0x58);
      v50 = WebCore::StyleStrokeData::StyleStrokeData(v40, v12);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::operator=((uint64_t *)(a1 + 24), (uint64_t *)&v50);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref((uint64_t *)&v50, v41);
      v12 = *v11;
    }
    *(_BYTE *)(v12 + 80) = a2;
  }
  v13 = *(unsigned int *)(v12 + 16);
  v14 = *((_DWORD *)a3 + 2);
  v16 = v14 == (_DWORD)v13 && v14 != -1;
  if ((_DWORD)v13 != -1 && v16)
  {
    v50 = (int *)&v47;
    v20 = ((uint64_t (*)(int **, uint64_t, const WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v13])(&v50, v12 + 8, a3);
    v12 = *v11;
    if ((v20 & 1) != 0)
      goto LABEL_20;
LABEL_44:
    if (*(_DWORD *)v12 != 1)
    {
      v32 = WTF::fastMalloc((WTF *)0x58);
      v50 = WebCore::StyleStrokeData::StyleStrokeData(v32, v12);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::operator=((uint64_t *)(a1 + 24), (uint64_t *)&v50);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref((uint64_t *)&v50, v33);
      v12 = *v11;
    }
    v50 = (int *)&v49;
    v51 = &v49;
    v52 = &v49;
    v53 = &v49;
    v34 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v34 == -1)
      goto LABEL_74;
    v54 = &v50;
    ((void (*)(uint64_t *__return_ptr, int ***, const WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v34])(&v47, &v54, a3);
    v35 = *(unsigned int *)(v12 + 16);
    if ((_DWORD)v35 == -1)
    {
      if (v48 == -1)
      {
LABEL_52:
        v12 = *v11;
        goto LABEL_20;
      }
    }
    else if (v48 == -1)
    {
      ((void (*)(int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v35])(&v50, v12 + 8);
      *(_DWORD *)(v12 + 16) = -1;
LABEL_50:
      if (v48 != -1)
        ((void (*)(int **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v48])(&v50, &v47);
      goto LABEL_52;
    }
    v50 = (int *)(v12 + 8);
    ((void (*)(int **, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                      + v48))(&v50, v12 + 8, &v47);
    goto LABEL_50;
  }
  v18 = v14 == -1;
  if ((_DWORD)v13 == -1)
    v19 = v18;
  else
    v19 = v16;
  if ((v19 & 1) == 0)
    goto LABEL_44;
LABEL_20:
  if ((WTF::equal(*(WTF **)(v12 + 40), *a4, a3) & 1) == 0)
  {
    v44 = WTF::DataRef<WebCore::StyleStrokeData>::access((uint64_t *)(a1 + 24));
    WTF::String::operator=((uint64_t *)(v44 + 40), a4);
  }
LABEL_22:
  if (!a6)
    return;
  v23 = *(_QWORD *)(a1 + 24);
  v21 = (uint64_t *)(a1 + 24);
  v22 = v23;
  if (*(unsigned __int8 *)(v23 + 81) != a2)
  {
    if (*(_DWORD *)v22 != 1)
    {
      v42 = WTF::fastMalloc((WTF *)0x58);
      v50 = WebCore::StyleStrokeData::StyleStrokeData(v42, v22);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::operator=(v21, (uint64_t *)&v50);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref((uint64_t *)&v50, v43);
      v22 = *v21;
    }
    *(_BYTE *)(v22 + 81) = a2;
  }
  v24 = *(unsigned int *)(v22 + 32);
  v25 = *((_DWORD *)a3 + 2);
  v27 = v25 == (_DWORD)v24 && v25 != -1;
  if ((_DWORD)v24 == -1 || !v27)
  {
    v29 = v25 == -1;
    if ((_DWORD)v24 == -1)
      v30 = v29;
    else
      v30 = v27;
    if ((v30 & 1) != 0)
      goto LABEL_41;
  }
  else
  {
    v50 = (int *)&v47;
    v31 = ((uint64_t (*)(int **, uint64_t, const WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v24])(&v50, v22 + 24, a3);
    v22 = *v21;
    if ((v31 & 1) != 0)
      goto LABEL_41;
  }
  if (*(_DWORD *)v22 != 1)
  {
    v36 = WTF::fastMalloc((WTF *)0x58);
    v50 = WebCore::StyleStrokeData::StyleStrokeData(v36, v22);
    WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::operator=(v21, (uint64_t *)&v50);
    WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref((uint64_t *)&v50, v37);
    v22 = *v21;
  }
  v50 = (int *)&v49;
  v51 = &v49;
  v52 = &v49;
  v53 = &v49;
  v38 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v38 == -1)
  {
LABEL_74:
    std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::SVGRenderStyle::initialStrokePaintColor(v46);
    return;
  }
  v54 = &v50;
  ((void (*)(uint64_t *__return_ptr, int ***, const WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v38])(&v47, &v54, a3);
  v39 = *(unsigned int *)(v22 + 32);
  if ((_DWORD)v39 != -1)
  {
    if (v48 == -1)
    {
      ((void (*)(int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v39])(&v50, v22 + 24);
      *(_DWORD *)(v22 + 32) = -1;
LABEL_59:
      if (v48 != -1)
        ((void (*)(int **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v48])(&v50, &v47);
      goto LABEL_61;
    }
LABEL_58:
    v50 = (int *)(v22 + 24);
    ((void (*)(int **, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                      + v48))(&v50, v22 + 24, &v47);
    goto LABEL_59;
  }
  if (v48 != -1)
    goto LABEL_58;
LABEL_61:
  v22 = *v21;
LABEL_41:
  if ((WTF::equal(*(WTF **)(v22 + 48), *a4, a3) & 1) == 0)
  {
    v45 = WTF::DataRef<WebCore::StyleStrokeData>::access(v21);
    WTF::String::operator=((uint64_t *)(v45 + 48), a4);
  }
}

void WebCore::SVGRenderStyle::initialStrokePaintColor(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t WTF::DataRef<WebCore::StyleStrokeData>::access(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  int *v6;

  v1 = *a1;
  if (*(_DWORD *)*a1 != 1)
  {
    v3 = WTF::fastMalloc((WTF *)0x58);
    v6 = WebCore::StyleStrokeData::StyleStrokeData(v3, v1);
    WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::operator=(a1, (uint64_t *)&v6);
    WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref((uint64_t *)&v6, v4);
    return *a1;
  }
  return v1;
}

uint64_t *WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *(WTF **)(v4 + 64);
      if (v6)
      {
        *(_QWORD *)(v4 + 64) = 0;
        *(_DWORD *)(v4 + 72) = 0;
        WTF::fastFree(v6, a2);
      }
      if (*(_BYTE *)(v4 + 60) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v4 + 56));
      }
      v7 = *(WTF::StringImpl **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(WTF::StringImpl **)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(unsigned int *)(v4 + 32);
      if ((_DWORD)v9 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v9])(&v11, v4 + 24);
      *(_DWORD *)(v4 + 32) = -1;
      v10 = *(unsigned int *)(v4 + 16);
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v12, v4 + 8);
      *(_DWORD *)(v4 + 16) = -1;
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t *WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(WTF **)(v3 + 64);
      if (v5)
      {
        *(_QWORD *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 72) = 0;
        WTF::fastFree(v5, a2);
      }
      if (*(_BYTE *)(v3 + 60) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 56));
      }
      v6 = *(WTF::StringImpl **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF::StringImpl **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(unsigned int *)(v3 + 32);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v10, v3 + 24);
      *(_DWORD *)(v3 + 32) = -1;
      v9 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v9 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v9])(&v11, v3 + 8);
      *(_DWORD *)(v3 + 16) = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::RenderStyle::setStrokeColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareInheritedData *v16;
  WTF *v17;
  void *v18;
  WebCore::RenderStyle *v19;
  const WebCore::StyleColor *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  _QWORD v24[4];
  _QWORD *v25;

  v3 = this;
  v4 = *(_DWORD **)(this + 24);
  v5 = v4[66];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v24[0] = &v21;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v24, v4 + 64, a2);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD **)(v3 + 24);
LABEL_19:
      if (*v4 == 1)
      {
        v12 = (uint64_t)v4;
      }
      else
      {
        v12 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v12, (uint64_t)v4);
        v16 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v12;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v16, v15);
            WTF::fastFree(v17, v18);
            v12 = *(_QWORD *)(v3 + 24);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      v24[0] = &v23;
      v24[1] = &v23;
      v24[2] = &v23;
      v24[3] = &v23;
      v13 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v13 == -1)
      {
        v19 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setVisitedLinkStrokeColor(v19, v20);
      }
      v25 = v24;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v21, &v25, a2);
      v14 = *(unsigned int *)(v12 + 264);
      if ((_DWORD)v14 == -1)
      {
        if (v22 == -1)
          return this;
      }
      else if (v22 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v24, v12 + 256);
        *(_DWORD *)(v12 + 264) = -1;
        goto LABEL_27;
      }
      v24[0] = v12 + 256;
      this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v22))(v24, v12 + 256, &v21);
LABEL_27:
      if (v22 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(v24, &v21);
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setVisitedLinkStrokeColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareInheritedData *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  _QWORD v23[4];
  _QWORD *v24;

  v3 = this;
  v4 = *(_DWORD **)(this + 24);
  v5 = v4[70];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v23[0] = &v20;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v23, v4 + 68, a2);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD **)(v3 + 24);
LABEL_19:
      if (*v4 == 1)
      {
        v12 = (uint64_t)v4;
      }
      else
      {
        v12 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v12, (uint64_t)v4);
        v16 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v12;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v16, v15);
            WTF::fastFree(v17, v18);
            v12 = *(_QWORD *)(v3 + 24);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      v23[0] = &v22;
      v23[1] = &v22;
      v23[2] = &v22;
      v23[3] = &v22;
      v13 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v13 == -1)
      {
        v19 = std::__throw_bad_variant_access[abi:sn180100]();
        return WTF::Vector<WebCore::SVGLengthValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v19);
      }
      v24 = v23;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v20, &v24, a2);
      v14 = *(unsigned int *)(v12 + 280);
      if ((_DWORD)v14 == -1)
      {
        if (v21 == -1)
          return this;
      }
      else if (v21 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v23, v12 + 272);
        *(_DWORD *)(v12 + 280) = -1;
        goto LABEL_27;
      }
      v23[0] = v12 + 272;
      this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v21))(v23, v12 + 272, &v20);
LABEL_27:
      if (v21 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(v23, &v20);
    }
  }
  return this;
}

uint64_t WTF::Vector<WebCore::SVGLengthValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(a1 + 12) > v4)
    {
      *(_DWORD *)(a1 + 12) = v4;
    }
    else
    {
      if (v4 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::SVGLengthValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::SVGLengthValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
      }
      v4 = *(_DWORD *)(a1 + 12);
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 8 * v4 - 2);
      v4 = *(_DWORD *)(a1 + 12);
    }
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 != (_DWORD)v5)
    {
      v6 = (_QWORD *)(*(_QWORD *)a1 + 8 * v4);
      v7 = (uint64_t *)(*(_QWORD *)a2 + 8 * v4);
      v8 = 8 * v5 - 8 * v4;
      do
      {
        v9 = *v7++;
        *v6++ = v9;
        v8 -= 8;
      }
      while (v8);
      v4 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::SVGLengthValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4 && (WTF *)result != v5)
      {
        v6 = 8 * v4;
        v7 = v5;
        do
        {
          v8 = *(_QWORD *)v7;
          v7 = (WTF *)((char *)v7 + 8);
          *(_QWORD *)result = v8;
          result += 8;
          v6 -= 8;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SVGLengthValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = 8 * v5;
      v9 = v4;
      do
      {
        v10 = *(_QWORD *)v9;
        v9 = (WTF *)((char *)v9 + 8);
        *v6++ = v10;
        v8 -= 8;
      }
      while (v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Style::BuilderConverter::convertSVGLengthVector(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v4[2];
  char v5;

  v5 = 1;
  if (((*(unsigned __int16 *)(a3 + 4) | (*(unsigned __int8 *)(a3 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v4[0] = a2;
    v4[1] = &v5;
    *a1 = 0;
    a1[1] = 0;
    return _ZN3WTF6MapperIZN7WebCore5Style16BuilderConverter22convertSVGLengthVectorERNS2_12BuilderStateERKNS1_8CSSValueENS1_29ShouldConvertNumberToPxLengthEEUlRT_E_NS_6VectorINS1_14SVGLengthValueELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS1_12CSSValueListEvE3mapERSH_SK_RKSC_((uint64_t)a1, a3, (uint64_t)v4);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6MapperIZN7WebCore5Style16BuilderConverter22convertSVGLengthVectorERNS2_12BuilderStateERKNS1_8CSSValueENS1_29ShouldConvertNumberToPxLengthEEUlRT_E_NS_6VectorINS1_14SVGLengthValueELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS1_12CSSValueListEvE3mapERSH_SK_RKSC_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
LABEL_11:
      __break(0xC471u);
      JUMPOUT(0x1951E5F2CLL);
    }
    v6 = result;
    result = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v6 + 8) = v3;
    *(_QWORD *)v6 = result;
    v7 = *(_DWORD *)(a2 + 8);
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        if (v8 > 3)
        {
          if (*(_DWORD *)(a2 + 8) <= v8)
            goto LABEL_11;
          v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 8 * (v9 - 4));
        }
        else
        {
          v10 = (uint64_t *)(a2 + 16 + 8 * v9);
        }
        result = WebCore::Style::BuilderConverter::convertSVGLengthValue(*(_QWORD *)a3, *v10, **(unsigned __int8 **)(a3 + 8));
        *(_QWORD *)(*(_QWORD *)v6 + 8 * (*(_DWORD *)(v6 + 12))++) = result;
        v8 = v9 + 1;
        v9 = (v9 + 1);
      }
      while (v7 != v8);
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setStrokeDashOffset(uint64_t a1, WebCore::Length *a2)
{
  WebCore::SVGRenderStyle *v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  WTF *v8;
  void *v9;
  WebCore::SVGRenderStyle *v10;

  v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
  if (*(_DWORD *)v4 != 1)
  {
    WebCore::SVGRenderStyle::copy(v4, &v10);
    v4 = v10;
    v7 = *(WebCore::SVGRenderStyle **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v10;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = *(WebCore::SVGRenderStyle **)(a1 + 56);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return WebCore::SVGRenderStyle::setStrokeDashOffset((uint64_t)v4, a2);
}

uint64_t WebCore::SVGRenderStyle::setStrokeDashOffset(uint64_t this, const WebCore::Length *a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  float v6;
  float v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int *v13;

  v4 = (uint64_t *)(this + 24);
  v3 = *(_QWORD *)(this + 24);
  v5 = *(unsigned __int8 *)(v3 + 60);
  if (v5 != *((unsigned __int8 *)a2 + 4) || (*(_BYTE *)(v3 + 61) != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v5 == 13)
    return this;
  this = v3 + 56;
  if (v5 == 11)
  {
    this = WebCore::Length::isCalculatedEqual((WebCore::Length *)this, a2);
    if ((this & 1) != 0)
      return this;
    v3 = *v4;
    goto LABEL_10;
  }
  if (*(_BYTE *)(v3 + 62))
    v6 = *(float *)this;
  else
    v6 = (float)*(int *)this;
  v7 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v7 = (float)*(int *)a2;
  if (v6 != v7)
  {
LABEL_10:
    if (*(_DWORD *)v3 != 1)
    {
      v8 = WTF::fastMalloc((WTF *)0x58);
      v13 = WebCore::StyleStrokeData::StyleStrokeData(v8, v3);
      WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::operator=(v4, (uint64_t *)&v13);
      this = (uint64_t)WTF::Ref<WebCore::StyleStrokeData,WTF::RawPtrTraits<WebCore::StyleStrokeData>,WTF::DefaultRefDerefTraits<WebCore::StyleStrokeData>>::~Ref((uint64_t *)&v13, v9);
      v3 = *v4;
    }
    v10 = (_DWORD *)(v3 + 56);
    if ((const WebCore::Length *)(v3 + 56) != a2)
    {
      if (*(_BYTE *)(v3 + 60) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *(_BYTE *)(v3 + 60) = v11;
      *(_BYTE *)(v3 + 61) = *((_BYTE *)a2 + 5);
      if (v11 <= 0xD)
      {
        v12 = 1 << v11;
        if ((v12 & 0x7FC) != 0)
        {
          *(_BYTE *)(v3 + 62) = *((_BYTE *)a2 + 6);
          *v10 = *(_DWORD *)a2;
        }
        else if ((v12 & 0x3003) != 0)
        {
          *v10 = 0;
        }
        else
        {
          *v10 = *(_DWORD *)a2;
          return (uint64_t)WebCore::Length::ref((int *)(v3 + 56));
        }
      }
    }
  }
  return this;
}

WebCore::Node *WebCore::Style::BuilderConverter::convertLengthAllowingNumber(WebCore::Style::BuilderConverter *this, const WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  int v3;
  int v7;
  WebCore::Node *result;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  double v15;
  WebCore::Style::BuilderState *v16;
  WTF::StringImpl *v17;
  WebCore::Style::BuilderState *v18;

  v3 = *((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16);
  if ((v3 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1951E62B4);
  }
  v7 = *((_WORD *)a3 + 2) & 0x7F;
  if ((v7 - 63) > 0x11 || ((1 << ((*((_WORD *)a3 + 2) & 0x7F) - 63)) & 0x34001) == 0)
  {
    if (v7 == 73)
    {
      v11 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
      v12 = v11[12];
      if (v12 != 1 && (v12 - 5) >= 4)
      {
        if (!v11[12])
          goto LABEL_25;
        goto LABEL_10;
      }
      v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 72))(*(_QWORD *)(*((_QWORD *)a3 + 1) + 8));
    }
    if (v7 == 1)
      goto LABEL_25;
    LOWORD(v3) = *((_WORD *)a3 + 2);
    v7 = v3 & 0x7F;
  }
LABEL_10:
  if ((v7 - 63) <= 0x11 && ((1 << (v7 - 63)) & 0x34001) != 0)
    return WebCore::Style::BuilderConverter::convertLength(a2, a3, (uint64_t)this);
  if ((v3 & 0x7F) == 0x49)
  {
    v13 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
    v14 = v13[12];
    if (v14 != 1 && (v14 - 5) > 3)
      return WebCore::Style::BuilderConverter::convertLength(a2, a3, (uint64_t)this);
    v7 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 72))(v13);
  }
  if (v7 != 2)
    return WebCore::Style::BuilderConverter::convertLength(a2, a3, (uint64_t)this);
LABEL_25:
  v15 = WebCore::CSSPrimitiveValue::doubleValue(a3);
  WebCore::CSSPrimitiveValue::create(6, (int **)&v18, v15);
  v16 = v18;
  result = WebCore::Style::BuilderConverter::convertLength(a2, v18, (uint64_t)this);
  if (*(_DWORD *)v16 == 2)
    return (WebCore::Node *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v17);
  *(_DWORD *)v16 -= 2;
  return result;
}

void WebCore::RenderStyle::setCapStyle(uint64_t a1, int a2)
{
  _DWORD *v2;
  int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[59];
  if ((unsigned __int16)v3 >> 14 != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[59];
      v2 = v7;
    }
    v2[59] = v3 & 0xFFFF3FFF | ((v4 & 3) << 14);
  }
}

void WebCore::RenderStyle::setJoinStyle(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[59];
  if ((HIWORD(v3) & 3) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[59];
      v2 = v7;
    }
    v2[59] = v3 & 0xFFFCFFFF | ((v4 & 3) << 16);
  }
}

uint64_t WebCore::RenderStyle::setStrokeWidth(uint64_t result, WebCore::Length *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  float v6;
  float v7;
  _BYTE *v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  WTF *v14;
  void *v15;

  v3 = result;
  v4 = *(_QWORD *)(result + 24);
  v5 = *(unsigned __int8 *)(v4 + 248);
  if (v5 != *((unsigned __int8 *)a2 + 4) || (*(_BYTE *)(v4 + 249) != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_13;
  if (v5 == 13)
    return result;
  if (v5 == 11)
  {
    result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 244), a2);
    if ((result & 1) != 0)
      return result;
    v4 = *(_QWORD *)(v3 + 24);
LABEL_13:
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (_BYTE *)v4;
    }
    else
    {
      v8 = (_BYTE *)WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData((uint64_t)v8, v4);
      result = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 24) = v8;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData((WebCore::StyleRareInheritedData *)result, v12);
          result = WTF::fastFree(v14, v15);
          v8 = *(_BYTE **)(v3 + 24);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
    }
    v9 = v8 + 244;
    if (v8 + 244 == (_BYTE *)a2)
      return result;
    if (v8[248] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
    }
    v10 = *((unsigned __int8 *)a2 + 4);
    v8[248] = v10;
    v8[249] = *((_BYTE *)a2 + 5);
    if (v10 - 2 >= 9)
    {
      if (v10 > 0xD)
        goto LABEL_20;
      if (((1 << v10) & 0x3003) != 0)
      {
        *v9 = 0;
        goto LABEL_20;
      }
      if (v10 != 11)
        goto LABEL_20;
      v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v11 = *((unsigned __int8 *)a2 + 6);
      v8[250] = v11;
      if (v11)
      {
        *v9 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v13 = *(_DWORD *)a2;
    }
    *v9 = v13;
    goto LABEL_20;
  }
  v6 = *(float *)(v4 + 244);
  if (!*(_BYTE *)(v4 + 250))
    v6 = (float)SLODWORD(v6);
  v7 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v7 = (float)*(int *)a2;
  if (v6 != v7)
    goto LABEL_13;
  return result;
}

void WebCore::RenderStyle::setTextAlignLast(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[58];
  if (((v3 >> 23) & 7) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[58];
      v2 = v7;
    }
    v2[58] = v3 & 0xFC7FFFFF | ((v4 & 7) << 23);
  }
}

uint64_t WebCore::RenderStyle::setTextDecorationColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t result;
  WTF *v5;
  _DWORD *v6;

  v3 = (WTF **)((char *)this + 8);
  result = WebCore::StyleColor::operator==(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 272, (uint64_t)a2);
  if ((result & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v6 = WTF::DataRef<WebCore::StyleRareNonInheritedData>::access((uint64_t *)v5 + 5);
    return WebCore::StyleColor::operator=((uint64_t)(v6 + 68), (uint64_t)a2);
  }
  return result;
}

uint64_t WebCore::RenderStyle::setVisitedLinkTextDecorationColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t result;
  WTF *v5;
  WebCore::StyleMiscNonInheritedData *v6;
  WebCore::StyleVisitedLinkColorData *v7;

  v3 = (WTF **)((char *)this + 8);
  result = WebCore::StyleColor::operator==(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 56) + 88, (uint64_t)a2);
  if ((result & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v6 = WTF::DataRef<WebCore::StyleMiscNonInheritedData>::access((WebCore::StyleMiscNonInheritedData **)v5 + 4);
    v7 = WTF::DataRef<WebCore::StyleVisitedLinkColorData>::access((WebCore::StyleVisitedLinkColorData **)v6 + 7);
    return WebCore::StyleColor::operator=((uint64_t)v7 + 88, (uint64_t)a2);
  }
  return result;
}

void WebCore::RenderStyle::setTextDecorationSkipInk(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[58];
  if (((v3 >> 28) & 3) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[58];
      v2 = v7;
    }
    v2[58] = v3 & 0xCFFFFFFF | ((v4 & 3) << 28);
  }
}

WTF **WebCore::RenderStyle::setTextDecorationStyle(uint64_t a1, int a2)
{
  WTF **result;
  uint64_t v3;
  char v4;
  WTF *v5;
  __int16 v6;
  unsigned int v7;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if (((*(_DWORD *)(*(_QWORD *)(v3 + 40) + 636) >> 12) & 7) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleRareNonInheritedData>::access((uint64_t *)v5 + 5);
    v6 = *((_WORD *)result + 320);
    v7 = *((_DWORD *)result + 159) & 0xFFFF8FFF;
    *((_BYTE *)result + 642) = *((_BYTE *)result + 642);
    *((_WORD *)result + 320) = v6;
    *((_DWORD *)result + 159) = v7 | ((v4 & 7) << 12);
  }
  return result;
}

int *WebCore::RenderStyle::setTextDecorationThickness(uint64_t a1, float *a2)
{
  int *result;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  _DWORD *v7;
  int *v8;
  _BYTE *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  WTF *v13;
  void *v14;
  int v15;
  int *v16;
  float v17;
  float v18;
  char isCalculatedEqual;

  v4 = *(_QWORD *)(a1 + 8);
  result = (int *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 40);
  v6 = v5[448];
  if (v6 < 2)
  {
    if (v6 == *(unsigned __int8 *)a2)
      return result;
    goto LABEL_3;
  }
  if (v6 != 2)
    return result;
  if (*(_BYTE *)a2 != 2)
    goto LABEL_3;
  v15 = v5[456];
  if (v15 != *((unsigned __int8 *)a2 + 8) || (v5[457] != 0) != (*((_BYTE *)a2 + 9) != 0))
    goto LABEL_3;
  if (v15 == 13)
    return result;
  v16 = result;
  if (v15 == 11)
  {
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 452), (const WebCore::Length *)(a2 + 1));
    result = v16;
    if ((isCalculatedEqual & 1) != 0)
      return result;
    goto LABEL_3;
  }
  v17 = *((float *)v5 + 113);
  if (!v5[458])
    v17 = (float)SLODWORD(v17);
  v18 = a2[1];
  if (!*((_BYTE *)a2 + 10))
    v18 = (float)SLODWORD(v18);
  if (v17 != v18)
  {
LABEL_3:
    result = (int *)WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v7 = (_DWORD *)*((_QWORD *)result + 5);
    if (*v7 == 1)
    {
      v9 = (_BYTE *)*((_QWORD *)result + 5);
    }
    else
    {
      v8 = result;
      v9 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
      WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v9, (uint64_t)v7);
      result = (int *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = v9;
      if (result)
      {
        if (*result == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v10);
          result = (int *)WTF::fastFree(v13, v14);
          v9 = (_BYTE *)*((_QWORD *)v8 + 5);
        }
        else
        {
          --*result;
        }
      }
    }
    v9[448] = *(_BYTE *)a2;
    if (v9 + 448 != (_BYTE *)a2)
    {
      result = (int *)(v9 + 452);
      if (v9[456] == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
        result = (int *)(v9 + 452);
      }
      v11 = *((unsigned __int8 *)a2 + 8);
      v9[456] = v11;
      v9[457] = *((_BYTE *)a2 + 9);
      if (v11 <= 0xD)
      {
        v12 = 1 << v11;
        if ((v12 & 0x7FC) != 0)
        {
          v9[458] = *((_BYTE *)a2 + 10);
          *result = *((_DWORD *)a2 + 1);
        }
        else if ((v12 & 0x3003) != 0)
        {
          *result = 0;
        }
        else
        {
          *result = *((_DWORD *)a2 + 1);
          return WebCore::Length::ref(result);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setTextEmphasisColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareInheritedData *v16;
  WTF *v17;
  void *v18;
  WebCore::RenderStyle *v19;
  const WebCore::StyleColor *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  _QWORD v24[4];
  _QWORD *v25;

  v3 = this;
  v4 = *(_DWORD **)(this + 24);
  v5 = v4[14];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v24[0] = &v21;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v24, v4 + 12, a2);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD **)(v3 + 24);
LABEL_19:
      if (*v4 == 1)
      {
        v12 = (uint64_t)v4;
      }
      else
      {
        v12 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v12, (uint64_t)v4);
        v16 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v12;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v16, v15);
            WTF::fastFree(v17, v18);
            v12 = *(_QWORD *)(v3 + 24);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      v24[0] = &v23;
      v24[1] = &v23;
      v24[2] = &v23;
      v24[3] = &v23;
      v13 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v13 == -1)
      {
        v19 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setVisitedLinkTextEmphasisColor(v19, v20);
      }
      v25 = v24;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v21, &v25, a2);
      v14 = *(unsigned int *)(v12 + 56);
      if ((_DWORD)v14 == -1)
      {
        if (v22 == -1)
          return this;
      }
      else if (v22 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v24, v12 + 48);
        *(_DWORD *)(v12 + 56) = -1;
        goto LABEL_27;
      }
      v24[0] = v12 + 48;
      this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v22))(v24, v12 + 48, &v21);
LABEL_27:
      if (v22 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(v24, &v21);
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setVisitedLinkTextEmphasisColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareInheritedData *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  _QWORD v23[4];
  _QWORD *v24;

  v3 = this;
  v4 = *(_DWORD **)(this + 24);
  v5 = v4[26];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v23[0] = &v20;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v23, v4 + 24, a2);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD **)(v3 + 24);
LABEL_19:
      if (*v4 == 1)
      {
        v12 = (uint64_t)v4;
      }
      else
      {
        v12 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v12, (uint64_t)v4);
        v16 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v12;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v16, v15);
            WTF::fastFree(v17, v18);
            v12 = *(_QWORD *)(v3 + 24);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      v23[0] = &v22;
      v23[1] = &v22;
      v23[2] = &v22;
      v23[3] = &v22;
      v13 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v13 == -1)
      {
        v19 = std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setTextEmphasisMark(v19);
      }
      v24 = v23;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v20, &v24, a2);
      v14 = *(unsigned int *)(v12 + 104);
      if ((_DWORD)v14 == -1)
      {
        if (v21 == -1)
          return this;
      }
      else if (v21 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v23, v12 + 96);
        *(_DWORD *)(v12 + 104) = -1;
        goto LABEL_27;
      }
      v23[0] = v12 + 96;
      this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v21))(v23, v12 + 96, &v20);
LABEL_27:
      if (v21 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(v23, &v20);
    }
  }
  return this;
}

void WebCore::RenderStyle::setTextEmphasisMark(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[57];
  if (((v3 >> 26) & 7) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[57];
      v2 = v7;
    }
    v2[57] = v3 & 0xE3FFFFFF | ((v4 & 7) << 26);
  }
}

void WebCore::RenderStyle::setTextJustify(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[58];
  if (((v3 >> 26) & 3) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[58];
      v2 = v7;
    }
    v2[58] = v3 & 0xF3FFFFFF | ((v4 & 3) << 26);
  }
}

void WebCore::ShadowData::~ShadowData(WebCore::ShadowData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::ShadowData *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  char v9;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 7) = 0;
    do
    {
      v4 = *(_QWORD *)(v2 + 56);
      *(_QWORD *)(v2 + 56) = 0;
      v8 = v4;
      std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)&v8, (unsigned int *)v2);
      v2 = v8;
    }
    while (v8);
    v5 = (WebCore::ShadowData *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v5)
    {
      WebCore::ShadowData::~ShadowData(v5);
      WTF::fastFree(v6, v7);
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v3])(&v9, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  if (*((_BYTE *)this + 28) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 6));
  }
  if (*((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
  if (*((_BYTE *)this + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 2));
  }
  if (*((_BYTE *)this + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)this);
  }
}

int *std::make_unique[abi:sn180100]<WebCore::ShadowData,WebCore::LengthPoint,WebCore::Length &,WebCore::Length &,WebCore::ShadowStyle &,BOOL,WebCore::StyleColor &>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char *a6, uint64_t a7)
{
  uint64_t v14;
  int *result;
  unsigned int v16;
  unsigned __int8 v17;
  char v18;
  char v19;
  unsigned int v20;
  unsigned __int8 v21;
  char v22;
  char v23;

  v14 = WTF::fastMalloc((WTF *)0x40);
  v20 = 0;
  v23 = 0;
  v21 = *(_BYTE *)(a3 + 4);
  v22 = *(_BYTE *)(a3 + 5);
  if (v21 - 2 >= 9)
  {
    if (v21 == 11)
    {
      v20 = *(_DWORD *)a3;
      WebCore::Length::ref((int *)&v20);
    }
  }
  else
  {
    v23 = *(_BYTE *)(a3 + 6);
    v20 = *(_DWORD *)a3;
  }
  v16 = 0;
  v19 = 0;
  v17 = *(_BYTE *)(a4 + 4);
  v18 = *(_BYTE *)(a4 + 5);
  if (v17 - 2 >= 9)
  {
    if (v17 == 11)
    {
      v16 = *(_DWORD *)a4;
      WebCore::Length::ref((int *)&v16);
    }
  }
  else
  {
    v19 = *(_BYTE *)(a4 + 6);
    v16 = *(_DWORD *)a4;
  }
  result = (int *)WebCore::ShadowData::ShadowData(v14, a2, (uint64_t)&v20, (uint64_t)&v16, *a5, *a6, a7);
  *a1 = v14;
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
  }
  if (v21 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v20);
  }
  return result;
}

uint64_t WebCore::ShadowData::ShadowData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  int v11;
  char v12;
  unsigned int v13;
  char v14;
  int v15;
  int v16;
  char v17;
  unsigned int v18;
  char v19;
  int v20;
  int *v21;
  unsigned int v22;
  int v23;
  int *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v37;
  unsigned __int8 v38;
  char v39;
  char v40;
  int v41;
  unsigned __int8 v42;
  char v43;
  char v44;
  char v45;
  _QWORD v46[4];
  _QWORD *v47;

  v44 = 0;
  v42 = *(_BYTE *)(a2 + 4);
  v11 = v42;
  v12 = *(_BYTE *)(a2 + 5);
  v43 = v12;
  v13 = v42 - 2;
  if (v13 >= 9)
  {
    if (v42 == 11)
    {
      v41 = *(_DWORD *)a2;
      v15 = v41;
      v29 = a7;
      WebCore::Length::ref(&v41);
      a7 = v29;
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
  }
  else if (*(_BYTE *)(a2 + 6))
  {
    v15 = *(_DWORD *)a2;
    v14 = 1;
  }
  else
  {
    v14 = 0;
    v15 = *(_DWORD *)a2;
  }
  v40 = 0;
  v38 = *(_BYTE *)(a2 + 12);
  v16 = v38;
  v17 = *(_BYTE *)(a2 + 13);
  v39 = v17;
  v18 = v38 - 2;
  if (v18 >= 9)
  {
    if (v38 == 11)
    {
      v37 = *(_DWORD *)(a2 + 8);
      v20 = v37;
      v34 = a7;
      v30 = v14;
      WebCore::Length::ref(&v37);
      v14 = v30;
      a7 = v34;
      v19 = 0;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
  }
  else
  {
    v19 = *(_BYTE *)(a2 + 14);
    v20 = *(_DWORD *)(a2 + 8);
    if (v19)
      v19 = 1;
  }
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_BYTE *)(a1 + 4) = v11;
  *(_BYTE *)(a1 + 5) = v12;
  if (v13 < 9)
  {
    *(_BYTE *)(a1 + 6) = v14;
LABEL_13:
    *(_DWORD *)a1 = v15;
    goto LABEL_14;
  }
  if (v11 == 11)
    goto LABEL_13;
LABEL_14:
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_BYTE *)(a1 + 12) = v16;
  *(_BYTE *)(a1 + 13) = v17;
  if (v18 < 9)
  {
    *(_BYTE *)(a1 + 14) = v19;
LABEL_16:
    *(_DWORD *)(a1 + 8) = v20;
    goto LABEL_17;
  }
  if (v16 == 11)
    goto LABEL_16;
LABEL_17:
  *(_DWORD *)(a1 + 16) = 0;
  v21 = (int *)(a1 + 16);
  *(_WORD *)(a1 + 21) = 0;
  v22 = *(unsigned __int8 *)(a4 + 4);
  *(_BYTE *)(a1 + 20) = v22;
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a4 + 5);
  if (v22 <= 0xD)
  {
    v23 = 1 << v22;
    if ((v23 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 22) = *(_BYTE *)(a4 + 6);
      *v21 = *(_DWORD *)a4;
    }
    else if ((v23 & 0x3003) != 0)
    {
      *v21 = 0;
    }
    else
    {
      *v21 = *(_DWORD *)a4;
      v31 = a7;
      WebCore::Length::ref(v21);
      a7 = v31;
    }
  }
  *(_DWORD *)(a1 + 24) = 0;
  v24 = (int *)(a1 + 24);
  *(_WORD *)(a1 + 29) = 0;
  v25 = *(unsigned __int8 *)(a3 + 4);
  *(_BYTE *)(a1 + 28) = v25;
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a3 + 5);
  if (v25 <= 0xD)
  {
    v26 = 1 << v25;
    if ((v26 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 30) = *(_BYTE *)(a3 + 6);
      *v24 = *(_DWORD *)a3;
    }
    else if ((v26 & 0x3003) != 0)
    {
      *v24 = 0;
    }
    else
    {
      *v24 = *(_DWORD *)a3;
      v32 = a7;
      WebCore::Length::ref(v24);
      a7 = v32;
    }
  }
  v46[0] = &v45;
  v46[1] = &v45;
  v46[2] = &v45;
  v46[3] = &v45;
  v27 = *(unsigned int *)(a7 + 8);
  if ((_DWORD)v27 == -1)
  {
    v33 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderStyle::setTextUnderlineOffset(v33);
  }
  else
  {
    v47 = v46;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v27])(&v47, a7);
    *(_BYTE *)(a1 + 48) = a5;
    *(_BYTE *)(a1 + 49) = a6;
    *(_QWORD *)(a1 + 56) = 0;
    return a1;
  }
}

void WebCore::RenderStyle::setTextUnderlineOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareInheritedData *v10;
  WTF *v11;
  void *v12;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v4 + 188);
  v6 = v5 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0 && v6)
  {
    if (*(float *)&v5 == *(float *)&a2)
      return;
  }
  else if (((a2 & 0xFF00000000) != 0) == (v6 != 0))
  {
    return;
  }
  if (*(_DWORD *)v4 == 1)
  {
    v7 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v8, v4);
    v10 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v10, v9);
        WTF::fastFree(v11, v12);
        v7 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  *(_QWORD *)(v7 + 188) = a2;
}

WTF **WebCore::RenderStyle::setTransform(WTF **result, uint64_t a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WebCore::StyleMiscNonInheritedData *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void *v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;

  v3 = result + 1;
  v4 = *(_QWORD *)(*((_QWORD *)result[1] + 4) + 40);
  v5 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
  {
LABEL_12:
    v13 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v15 = *((_QWORD *)v13 + 4);
    if (*(_DWORD *)v15 != 1)
    {
      v16 = v13;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v13 + 4), &v29);
      v15 = v29;
      v17 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v16 + 4);
      *((_QWORD *)v16 + 4) = v29;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v17, v14);
          WTF::fastFree(v24, v25);
          v15 = *((_QWORD *)v16 + 4);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
    v18 = *(_QWORD *)(v15 + 40);
    if (*(_DWORD *)v18 != 1)
    {
      WebCore::StyleTransformData::copy(*(WebCore::StyleTransformData **)(v15 + 40), &v29);
      v18 = v29;
      v19 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v29;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          if (*(_BYTE *)(v19 + 36) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v19 + 32));
          }
          if (*(_BYTE *)(v19 + 28) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v19 + 24));
          }
          v22 = *(unsigned int *)(v19 + 20);
          if ((_DWORD)v22)
          {
            v26 = *(_DWORD ***)(v19 + 8);
            v27 = 8 * v22;
            do
            {
              v28 = *v26;
              *v26 = 0;
              if (v28)
              {
                if (v28[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
                else
                  --v28[2];
              }
              ++v26;
              v27 -= 8;
            }
            while (v27);
          }
          v23 = *(WTF **)(v19 + 8);
          if (v23)
          {
            *(_QWORD *)(v19 + 8) = 0;
            *(_DWORD *)(v19 + 16) = 0;
            WTF::fastFree(v23, v14);
          }
          WTF::fastFree((WTF *)v19, v14);
          v18 = *(_QWORD *)(v15 + 40);
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
    }
    v20 = *(unsigned int *)(v18 + 20);
    if ((_DWORD)v20)
      WTF::VectorDestructor<true,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>::destruct(*(_DWORD **)(v18 + 8), (_DWORD **)(*(_QWORD *)(v18 + 8) + 8 * v20));
    result = *(WTF ***)(v18 + 8);
    if (result)
    {
      *(_QWORD *)(v18 + 8) = 0;
      *(_DWORD *)(v18 + 16) = 0;
      result = (WTF **)WTF::fastFree((WTF *)result, v14);
    }
    v21 = *(_QWORD **)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v18 + 8) = v21;
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(v18 + 16) = (_DWORD)v21;
    LODWORD(v21) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(v18 + 20) = (_DWORD)v21;
    return result;
  }
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD **)(v4 + 8);
  if ((_DWORD)v5)
  {
    v8 = 8 * v5 - 8;
    v9 = v7;
    v10 = *(_QWORD **)a2;
    while (1)
    {
      v11 = v8;
      result = (WTF **)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v9 + 32))(*v9, *v10);
      if (!(_DWORD)result)
        goto LABEL_12;
      ++v9;
      ++v10;
      v8 = v11 - 8;
      if (!v11)
        goto LABEL_8;
    }
  }
  v10 = *(_QWORD **)a2;
  v9 = *(_QWORD **)(v4 + 8);
LABEL_8:
  if (v9 != &v7[v5] || v10 != &v6[v5])
    goto LABEL_12;
  return result;
}

WebCore::StyleTransformData *WTF::DataRef<WebCore::StyleTransformData>::access(WebCore::StyleTransformData **a1)
{
  WebCore::StyleTransformData *result;
  void *v3;
  WebCore::StyleTransformData *v4;
  uint64_t v5;
  WTF *v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  WebCore::StyleTransformData *v10;

  result = *a1;
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleTransformData::copy(result, (uint64_t *)&v10);
    result = v10;
    v4 = *a1;
    *a1 = v10;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        if (*((_BYTE *)v4 + 36) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v4 + 8));
        }
        if (*((_BYTE *)v4 + 28) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v4 + 6));
        }
        v5 = *((unsigned int *)v4 + 5);
        if ((_DWORD)v5)
        {
          v7 = (_DWORD **)*((_QWORD *)v4 + 1);
          v8 = 8 * v5;
          do
          {
            v9 = *v7;
            *v7 = 0;
            if (v9)
            {
              if (v9[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
              else
                --v9[2];
            }
            ++v7;
            v8 -= 8;
          }
          while (v8);
        }
        v6 = (WTF *)*((_QWORD *)v4 + 1);
        if (v6)
        {
          *((_QWORD *)v4 + 1) = 0;
          *((_DWORD *)v4 + 4) = 0;
          WTF::fastFree(v6, v3);
        }
        WTF::fastFree(v4, v3);
        return *a1;
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

WebCore::StyleTransformData *WebCore::RenderStyle::setTransformOriginX(uint64_t a1, WebCore::Length *a2)
{
  WebCore::StyleTransformData *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  WebCore::StyleTransformData **v10;
  WTF::StringImpl *v11;
  WebCore::StyleMiscNonInheritedData *v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  WTF *v17;
  void *v18;
  WebCore::StyleTransformData *v19;
  char isCalculatedEqual;
  WebCore::StyleTransformData *v21;
  WebCore::StyleTransformData **v22;

  v4 = *(_QWORD *)(a1 + 8);
  result = (WebCore::StyleTransformData *)(a1 + 8);
  v5 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 32) + 40);
  v6 = v5[28];
  if (v6 == *((unsigned __int8 *)a2 + 4) && (v5[29] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v6 == 13)
      return result;
    if (v6 == 11)
    {
      v19 = result;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 24), a2);
      result = v19;
      if ((isCalculatedEqual & 1) != 0)
        return result;
    }
    else
    {
      v7 = *((float *)v5 + 6);
      if (!v5[30])
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v8 = (float)*(int *)a2;
      if (v7 == v8)
        return result;
    }
  }
  v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
  v10 = (WebCore::StyleTransformData **)*((_QWORD *)v9 + 4);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v10, (uint64_t *)&v22);
    v10 = v22;
    v12 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v9 + 4);
    *((_QWORD *)v9 + 4) = v22;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v12, v11);
        WTF::fastFree(v17, v18);
        v10 = (WebCore::StyleTransformData **)*((_QWORD *)v9 + 4);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  result = WTF::DataRef<WebCore::StyleTransformData>::access(v10 + 5);
  v13 = (_DWORD *)((char *)result + 24);
  if ((WebCore::StyleTransformData *)((char *)result + 24) != a2)
  {
    if (*((_BYTE *)result + 28) == 11)
    {
      v21 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v13);
      result = v21;
    }
    v14 = *((unsigned __int8 *)a2 + 4);
    *((_BYTE *)result + 28) = v14;
    *((_BYTE *)result + 29) = *((_BYTE *)a2 + 5);
    if (v14 - 2 >= 9)
    {
      if (v14 > 0xD)
        goto LABEL_19;
      if (((1 << v14) & 0x3003) != 0)
      {
        *v13 = 0;
        goto LABEL_19;
      }
      if (v14 != 11)
        goto LABEL_19;
      v16 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v15 = *((unsigned __int8 *)a2 + 6);
      *((_BYTE *)result + 30) = v15;
      if (v15)
      {
        *v13 = *(_DWORD *)a2;
LABEL_19:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v16 = *(_DWORD *)a2;
    }
    *v13 = v16;
    goto LABEL_19;
  }
  return result;
}

WebCore::StyleTransformData *WebCore::RenderStyle::setTransformOriginY(uint64_t a1, WebCore::Length *a2)
{
  WebCore::StyleTransformData *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  WebCore::StyleTransformData **v10;
  WTF::StringImpl *v11;
  WebCore::StyleMiscNonInheritedData *v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  WTF *v17;
  void *v18;
  WebCore::StyleTransformData *v19;
  char isCalculatedEqual;
  WebCore::StyleTransformData *v21;
  WebCore::StyleTransformData **v22;

  v4 = *(_QWORD *)(a1 + 8);
  result = (WebCore::StyleTransformData *)(a1 + 8);
  v5 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 32) + 40);
  v6 = v5[36];
  if (v6 == *((unsigned __int8 *)a2 + 4) && (v5[37] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v6 == 13)
      return result;
    if (v6 == 11)
    {
      v19 = result;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 32), a2);
      result = v19;
      if ((isCalculatedEqual & 1) != 0)
        return result;
    }
    else
    {
      v7 = *((float *)v5 + 8);
      if (!v5[38])
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v8 = (float)*(int *)a2;
      if (v7 == v8)
        return result;
    }
  }
  v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
  v10 = (WebCore::StyleTransformData **)*((_QWORD *)v9 + 4);
  if (*(_DWORD *)v10 != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)v10, (uint64_t *)&v22);
    v10 = v22;
    v12 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v9 + 4);
    *((_QWORD *)v9 + 4) = v22;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v12, v11);
        WTF::fastFree(v17, v18);
        v10 = (WebCore::StyleTransformData **)*((_QWORD *)v9 + 4);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  result = WTF::DataRef<WebCore::StyleTransformData>::access(v10 + 5);
  v13 = (_DWORD *)((char *)result + 32);
  if ((WebCore::StyleTransformData *)((char *)result + 32) != a2)
  {
    if (*((_BYTE *)result + 36) == 11)
    {
      v21 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v13);
      result = v21;
    }
    v14 = *((unsigned __int8 *)a2 + 4);
    *((_BYTE *)result + 36) = v14;
    *((_BYTE *)result + 37) = *((_BYTE *)a2 + 5);
    if (v14 - 2 >= 9)
    {
      if (v14 > 0xD)
        goto LABEL_19;
      if (((1 << v14) & 0x3003) != 0)
      {
        *v13 = 0;
        goto LABEL_19;
      }
      if (v14 != 11)
        goto LABEL_19;
      v16 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v15 = *((unsigned __int8 *)a2 + 6);
      *((_BYTE *)result + 38) = v15;
      if (v15)
      {
        *v13 = *(_DWORD *)a2;
LABEL_19:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v16 = *(_DWORD *)a2;
    }
    *v13 = v16;
    goto LABEL_19;
  }
  return result;
}

WebCore::StyleTransformData *WebCore::RenderStyle::setTransformOriginZ(WebCore::RenderStyle *this, float a2)
{
  WebCore::StyleTransformData *result;
  uint64_t v3;
  WTF *v5;
  WebCore::StyleMiscNonInheritedData *v6;

  v3 = *((_QWORD *)this + 1);
  result = (WebCore::RenderStyle *)((char *)this + 8);
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 40) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = WTF::DataRef<WebCore::StyleMiscNonInheritedData>::access((WebCore::StyleMiscNonInheritedData **)v5 + 4);
    result = WTF::DataRef<WebCore::StyleTransformData>::access((WebCore::StyleTransformData **)v6 + 5);
    *((float *)result + 10) = a2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3347DD8[v5])(&v6, v4);
  }
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKSS_EEEDcSK_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      if (*a3)
        *v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3347DD8[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t WebCore::RenderStyle::setVerticalAlignLength(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  WTF *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  _BYTE *v11;
  unsigned int v12;
  int v13;
  int v14;
  _DWORD *v15;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 8);
  if ((v4[68] & 0xF0) != 0x90)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(result + 8));
    result = (uint64_t)WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v5 + 1);
    *(_BYTE *)(result + 68) = *(_BYTE *)(result + 68) & 0xF | 0x90;
    v4 = (unsigned __int8 *)*((_QWORD *)*v3 + 1);
  }
  v6 = v4[56];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v4[57] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_14;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 52), a2);
    if ((result & 1) != 0)
      return result;
LABEL_14:
    v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    result = (uint64_t)WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v9 + 1);
    v10 = (_DWORD *)(result + 52);
    if ((WebCore::Length *)(result + 52) == a2)
      return result;
    v11 = (_BYTE *)result;
    if (*(_BYTE *)(result + 56) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v15 = (_DWORD *)(result + 52);
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
      v10 = v15;
    }
    v12 = *((unsigned __int8 *)a2 + 4);
    v11[56] = v12;
    v11[57] = *((_BYTE *)a2 + 5);
    if (v12 - 2 >= 9)
    {
      if (v12 > 0xD)
        goto LABEL_19;
      if (((1 << v12) & 0x3003) != 0)
      {
        *v10 = 0;
        goto LABEL_19;
      }
      if (v12 != 11)
        goto LABEL_19;
      v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v13 = *((unsigned __int8 *)a2 + 6);
      v11[58] = v13;
      if (v13)
      {
        *v10 = *(_DWORD *)a2;
LABEL_19:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v14 = *(_DWORD *)a2;
    }
    *v10 = v14;
    goto LABEL_19;
  }
  v7 = *((float *)v4 + 13);
  if (!v4[58])
    v7 = (float)SLODWORD(v7);
  v8 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v8 = (float)*(int *)a2;
  if (v7 != v8)
    goto LABEL_14;
  return result;
}

unsigned int *WTF::Vector<WebCore::ViewTimelineInsets,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = result[3];
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = 24 * v4 - 24 * v5;
    v7 = (unsigned int *)(*(_QWORD *)result + 24 * v5 + 12);
    do
    {
      if (*((_BYTE *)v7 + 8) && *((_BYTE *)v7 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v7);
      }
      if (*((_BYTE *)v7 - 4) && *((_BYTE *)v7 - 8) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v7 - 3));
      }
      v7 += 6;
      v6 -= 24;
    }
    while (v6);
    v2[3] = v5;
    goto LABEL_71;
  }
  v8 = result[2];
  if (v5 <= v8)
    goto LABEL_70;
  if (v8)
  {
    result = *(unsigned int **)result;
    if ((_DWORD)v4)
    {
      v9 = result + 3;
      v10 = 24 * v4;
      do
      {
        if (*((_BYTE *)v9 + 8) && *((_BYTE *)v9 + 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
        }
        if (*((_BYTE *)v9 - 4) && *((_BYTE *)v9 - 8) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v9 - 3));
        }
        v9 += 6;
        v10 -= 24;
      }
      while (v10);
      v2[3] = 0;
      result = *(unsigned int **)v2;
    }
    if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  v11 = a2[3];
  if (v2[2] >= v11)
    goto LABEL_70;
  if (v11 < 0xAAAAAAB)
  {
    v12 = *(WTF **)v2;
    v13 = v2[3];
    v14 = 24 * v11;
    v15 = WTF::fastMalloc((WTF *)(24 * v11));
    v2[2] = (v14 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v15;
    if ((_DWORD)v13)
    {
      v17 = (char *)v12 + 12;
      v18 = 24 * v13;
      v19 = v15 + 12;
      while (1)
      {
        *(_BYTE *)(v19 - 12) = 0;
        *(_BYTE *)(v19 - 4) = 0;
        if (!*(v17 - 4))
          goto LABEL_43;
        *(_DWORD *)(v19 - 12) = 0;
        *(_WORD *)(v19 - 7) = 0;
        v20 = *(v17 - 8);
        *(_BYTE *)(v19 - 8) = v20;
        *(_BYTE *)(v19 - 7) = *(v17 - 7);
        if (v20 - 2 >= 9)
          break;
        v21 = *(v17 - 6);
        *(_BYTE *)(v19 - 6) = v21;
        if (!v21)
        {
          v24 = *((_DWORD *)v17 - 3);
LABEL_53:
          *(_DWORD *)(v19 - 12) = v24;
          goto LABEL_42;
        }
        *(_DWORD *)(v19 - 12) = *((_DWORD *)v17 - 3);
LABEL_42:
        *(v17 - 8) = 0;
        *(_BYTE *)(v19 - 4) = 1;
LABEL_43:
        *(_BYTE *)v19 = 0;
        *(_BYTE *)(v19 + 8) = 0;
        if (!v17[8])
          goto LABEL_48;
        *(_DWORD *)v19 = 0;
        *(_WORD *)(v19 + 5) = 0;
        v22 = v17[4];
        *(_BYTE *)(v19 + 4) = v22;
        *(_BYTE *)(v19 + 5) = v17[5];
        if (v22 - 2 >= 9)
        {
          if (v22 > 0xD)
            goto LABEL_47;
          if (((1 << v22) & 0x3003) != 0)
          {
            *(_DWORD *)v19 = 0;
            goto LABEL_47;
          }
          if (v22 != 11)
            goto LABEL_47;
          v25 = *(_DWORD *)v17;
          *(_DWORD *)v17 = 0;
          goto LABEL_55;
        }
        v23 = v17[6];
        *(_BYTE *)(v19 + 6) = v23;
        if (!v23)
        {
          v25 = *(_DWORD *)v17;
LABEL_55:
          *(_DWORD *)v19 = v25;
          goto LABEL_47;
        }
        *(_DWORD *)v19 = *(_DWORD *)v17;
LABEL_47:
        v17[4] = 0;
        *(_BYTE *)(v19 + 8) = 1;
LABEL_48:
        if (*(v17 - 4) && *(v17 - 8) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v17 - 3));
        }
        v17 += 24;
        v19 += 24;
        v18 -= 24;
        if (!v18)
          goto LABEL_69;
      }
      if (v20 > 0xD)
        goto LABEL_42;
      if (((1 << v20) & 0x3003) != 0)
      {
        *(_DWORD *)(v19 - 12) = 0;
        goto LABEL_42;
      }
      if (v20 != 11)
        goto LABEL_42;
      v24 = *((_DWORD *)v17 - 3);
      *((_DWORD *)v17 - 3) = 0;
      goto LABEL_53;
    }
LABEL_69:
    if (v12)
    {
      if (*(WTF **)v2 == v12)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
      }
      WTF::fastFree(v12, v16);
    }
LABEL_70:
    LODWORD(v5) = v2[3];
LABEL_71:
    v26 = *(_QWORD *)a2;
    v27 = *(int **)v2;
    if ((_DWORD)v5)
    {
      v28 = v26 + 24 * v5;
      do
      {
        std::__optional_storage_base<WebCore::Length,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Length,false> const&>(v27, v26);
        std::__optional_storage_base<WebCore::Length,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Length,false> const&>(v27 + 3, v26 + 12);
        v26 += 24;
        v27 += 6;
      }
      while (v26 != v28);
      v26 = *(_QWORD *)a2;
      v29 = v2[3];
      v27 = *(int **)v2;
    }
    else
    {
      v29 = 0;
    }
    WTF::VectorCopier<false,WebCore::ViewTimelineInsets>::uninitializedCopy<WebCore::ViewTimelineInsets>((int *)(v26 + 24 * v29), (int *)(v26 + 24 * a2[3]), (uint64_t)&v27[6 * v29]);
    v2[3] = a2[3];
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ViewTimelineInsets::operator==<WebCore::ViewTimelineInsets>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  int v4;
  float v5;
  float v6;
  _BOOL8 v7;
  int v8;
  float v9;
  float v10;
  char isCalculatedEqual;
  unsigned __int8 *v13;
  unsigned __int8 *v14;

  v2 = a2[8];
  if (a1[8])
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((a1[8] != 0) == (v2 != 0))
      goto LABEL_17;
    return 0;
  }
  v4 = a1[4];
  if (v4 != a2[4] || (a1[5] != 0) != (a2[5] != 0))
    return 0;
  if (v4 == 13)
    goto LABEL_17;
  if (v4 == 11)
  {
    v13 = a2;
    v14 = a1;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)a1, (const WebCore::Length *)a2);
    a2 = v13;
    a1 = v14;
    if ((isCalculatedEqual & 1) != 0)
      goto LABEL_17;
    return 0;
  }
  v5 = *(float *)a1;
  if (!a1[6])
    v5 = (float)*(int *)a1;
  v6 = *(float *)a2;
  if (!a2[6])
    v6 = (float)*(int *)a2;
  if (v5 != v6)
    return 0;
LABEL_17:
  v7 = (a1[20] != 0) == (a2[20] != 0);
  if (!a1[20] || !a2[20])
    return v7;
  v8 = a1[16];
  if (v8 != a2[16] || (a1[17] != 0) != (a2[17] != 0))
    return 0;
  if (v8 == 13)
    return 1;
  if (v8 != 11)
  {
    v9 = *((float *)a1 + 3);
    if (!a1[18])
      v9 = (float)*((int *)a1 + 3);
    v10 = *((float *)a2 + 3);
    if (!a2[18])
      v10 = (float)SLODWORD(v10);
    return v9 == v10;
  }
  return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 12), (const WebCore::Length *)(a2 + 12));
}

int *std::__optional_storage_base<WebCore::Length,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Length,false> const&>(int *this, uint64_t a2)
{
  int *v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  v2 = this;
  if (*((unsigned __int8 *)this + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (this != (int *)a2 && *((_BYTE *)this + 8))
    {
      if (*((_BYTE *)this + 4) == 11)
      {
        v7 = a2;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*this);
        a2 = v7;
      }
      v3 = *(unsigned __int8 *)(a2 + 4);
      *((_BYTE *)v2 + 4) = v3;
      *((_BYTE *)v2 + 5) = *(_BYTE *)(a2 + 5);
      if (v3 <= 0xD)
      {
        v4 = 1 << v3;
        if ((v4 & 0x7FC) != 0)
        {
          *((_BYTE *)v2 + 6) = *(_BYTE *)(a2 + 6);
          *v2 = *(_DWORD *)a2;
        }
        else if ((v4 & 0x3003) != 0)
        {
          *v2 = 0;
        }
        else
        {
          *v2 = *(_DWORD *)a2;
          return WebCore::Length::ref(v2);
        }
      }
    }
  }
  else if (*((_BYTE *)this + 8))
  {
    if (*((_BYTE *)this + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*this);
    }
    *((_BYTE *)v2 + 8) = 0;
  }
  else
  {
    *this = 0;
    *(_WORD *)((char *)this + 5) = 0;
    v5 = *(unsigned __int8 *)(a2 + 4);
    *((_BYTE *)this + 4) = v5;
    *((_BYTE *)this + 5) = *(_BYTE *)(a2 + 5);
    if (v5 <= 0xD)
    {
      v6 = 1 << v5;
      if ((v6 & 0x7FC) != 0)
      {
        *((_BYTE *)this + 6) = *(_BYTE *)(a2 + 6);
        *this = *(_DWORD *)a2;
      }
      else if ((v6 & 0x3003) != 0)
      {
        *this = 0;
      }
      else
      {
        *this = *(_DWORD *)a2;
        this = WebCore::Length::ref(this);
      }
    }
    *((_BYTE *)v2 + 8) = 1;
  }
  return this;
}

int *WTF::VectorCopier<false,WebCore::ViewTimelineInsets>::uninitializedCopy<WebCore::ViewTimelineInsets>(int *result, int *a2, uint64_t a3)
{
  int *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;

  if (result != a2)
  {
    v4 = result;
    v5 = a3 + 12;
    do
    {
      *(_BYTE *)(v5 - 12) = 0;
      result = (int *)(v5 - 12);
      *(_BYTE *)(v5 - 4) = 0;
      if (*((_BYTE *)v4 + 8))
      {
        *(_DWORD *)(v5 - 12) = 0;
        *(_WORD *)(v5 - 7) = 0;
        v6 = *((unsigned __int8 *)v4 + 4);
        *(_BYTE *)(v5 - 8) = v6;
        *(_BYTE *)(v5 - 7) = *((_BYTE *)v4 + 5);
        if (v6 <= 0xD)
        {
          v7 = 1 << v6;
          if ((v7 & 0x7FC) != 0)
          {
            *(_BYTE *)(v5 - 6) = *((_BYTE *)v4 + 6);
            *result = *v4;
          }
          else if ((v7 & 0x3003) != 0)
          {
            *result = 0;
          }
          else
          {
            *result = *v4;
            result = WebCore::Length::ref(result);
          }
        }
        *(_BYTE *)(v5 - 4) = 1;
      }
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 8) = 0;
      if (*((_BYTE *)v4 + 20))
      {
        *(_DWORD *)v5 = 0;
        *(_WORD *)(v5 + 5) = 0;
        v8 = *((unsigned __int8 *)v4 + 16);
        *(_BYTE *)(v5 + 4) = v8;
        *(_BYTE *)(v5 + 5) = *((_BYTE *)v4 + 17);
        if (v8 <= 0xD)
        {
          v9 = 1 << v8;
          if ((v9 & 0x7FC) != 0)
          {
            *(_BYTE *)(v5 + 6) = *((_BYTE *)v4 + 18);
            *(_DWORD *)v5 = v4[3];
          }
          else if ((v9 & 0x3003) != 0)
          {
            *(_DWORD *)v5 = 0;
          }
          else
          {
            *(_DWORD *)v5 = v4[3];
            result = WebCore::Length::ref((int *)v5);
          }
        }
        *(_BYTE *)(v5 + 8) = 1;
      }
      v4 += 6;
      v5 += 24;
    }
    while (v4 != a2);
  }
  return result;
}

void WebCore::RenderStyle::setWidows(WebCore::RenderStyle *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::StyleRareInheritedData *v8;
  WTF *v9;
  void *v10;

  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = *((_QWORD *)this + 3);
  if (*(unsigned __int16 *)(v4 + 224) != v3 || (*(_BYTE *)(v4 + 228) & 1) != 0)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v5 = *((_QWORD *)this + 3);
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, v4);
      v8 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v5;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v8, v7);
          WTF::fastFree(v9, v10);
          v5 = *((_QWORD *)this + 3);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    *(_WORD *)(v5 + 224) = v3;
    *(_DWORD *)(v5 + 228) &= ~1u;
  }
}

uint64_t WTF::RefCounted<WebCore::WillChangeData>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(WTF **)(this + 8);
    if ((WTF *)(v2 + 24) != v3 && v3 != 0)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::Style::BuilderConverter::convertWillChange(uint64_t this, WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  uint64_t *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD v10[2];
  uint64_t v11;

  v5 = (uint64_t *)this;
  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F87F) == 0x50
    && *((_WORD *)a3 + 4) == 394)
  {
    *(_QWORD *)this = 0;
    return this;
  }
  this = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = this + 24;
  *(_QWORD *)(this + 16) = 1;
  *(_WORD *)(this + 32) = 0;
  *(_BYTE *)(this + 34) = 0;
  v10[1] = a2;
  v11 = this;
  v10[0] = &v11;
  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) == 0x1D800)
  {
    v6 = *((_DWORD *)a3 + 2);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        if (v7 > 3)
        {
          if (*((_DWORD *)a3 + 2) <= v7)
          {
            this = 148;
            __break(0xC471u);
            return this;
          }
          v9 = (uint64_t *)(*((_QWORD *)a3 + 6) + 8 * (v8 - 4));
        }
        else
        {
          v9 = (uint64_t *)((char *)a3 + 8 * v8 + 16);
        }
        this = WebCore::Style::BuilderConverter::convertWillChange(WebCore::Style::BuilderState &,WebCore::CSSValue const&)::{lambda(WebCore::CSSValue const&)#1}::operator()((uint64_t)v10, *v9);
        v7 = v8 + 1;
        v8 = (v8 + 1);
      }
      while (v6 != v7);
    }
  }
  else
  {
    this = WebCore::Style::BuilderConverter::convertWillChange(WebCore::Style::BuilderState &,WebCore::CSSValue const&)::{lambda(WebCore::CSSValue const&)#1}::operator()((uint64_t)v10, (uint64_t)a3);
  }
  *v5 = v11;
  return this;
}

uint64_t WebCore::Style::BuilderConverter::convertWillChange(WebCore::Style::BuilderState &,WebCore::CSSValue const&)::{lambda(WebCore::CSSValue const&)#1}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t **v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;

  if (((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F800) == 0)
  {
    v3 = (uint64_t **)result;
    v4 = *(_WORD *)(a2 + 4) & 0x7F;
    if (v4 != 79)
    {
      if (v4 != 80)
        return result;
      v8 = *(unsigned __int16 *)(a2 + 8);
      if (v8 == 384)
      {
        v5 = **(_QWORD **)result;
        v7 = 1;
      }
      else
      {
        if (v8 != 924)
          return result;
        v5 = **(_QWORD **)result;
        v7 = 0;
      }
      v6 = 0;
      return WebCore::WillChangeData::addFeature(v5, v7, v6);
    }
    result = WebCore::isExposed(*(unsigned __int16 *)(a2 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 24) + 680));
    if ((_DWORD)result)
    {
      v5 = **v3;
      if ((*(_WORD *)(a2 + 4) & 0x7F) == 0x4F)
        v6 = *(unsigned __int16 *)(a2 + 8);
      else
        v6 = 0;
      v7 = 2;
      return WebCore::WillChangeData::addFeature(v5, v7, v6);
    }
  }
  return result;
}

void WebCore::RenderStyle::setWordBreak(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;
  char v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareInheritedData *v9;
  WTF *v10;
  void *v11;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = v2[57];
  if (((v3 >> 6) & 7) != a2)
  {
    v4 = a2;
    if (*v2 != 1)
    {
      v6 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v2);
      v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, v8);
          WTF::fastFree(v10, v11);
          v7 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v3 = v7[57];
      v2 = v7;
    }
    v2[57] = v3 & 0xFFFFFE3F | ((v4 & 7) << 6);
  }
}

uint64_t WebCore::SVGRenderStyle::setX(uint64_t this, const WebCore::Length *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  WTF *v12;
  void *v13;

  v3 = this;
  v4 = *(unsigned __int8 **)(this + 64);
  v5 = v4[48];
  if (v5 != *((unsigned __int8 *)a2 + 4) || (v4[49] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v5 == 13)
    return this;
  this = (uint64_t)(v4 + 44);
  if (v5 == 11)
  {
    this = WebCore::Length::isCalculatedEqual((WebCore::Length *)this, a2);
    if ((this & 1) != 0)
      return this;
    v4 = *(unsigned __int8 **)(v3 + 64);
    goto LABEL_10;
  }
  if (v4[50])
    v6 = *(float *)this;
  else
    v6 = (float)*(int *)this;
  v7 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v7 = (float)*(int *)a2;
  if (v6 != v7)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (uint64_t)v4;
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x48);
      WebCore::StyleLayoutData::StyleLayoutData((WebCore::StyleLayoutData *)v8, (const WebCore::StyleLayoutData *)v4);
      this = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v8;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::StyleLayoutData::~StyleLayoutData((WebCore::StyleLayoutData *)this);
          this = WTF::fastFree(v12, v13);
          v8 = *(_QWORD *)(v3 + 64);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
    }
    v9 = (_DWORD *)(v8 + 44);
    if ((const WebCore::Length *)(v8 + 44) != a2)
    {
      if (*(_BYTE *)(v8 + 48) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      }
      v10 = *((unsigned __int8 *)a2 + 4);
      *(_BYTE *)(v8 + 48) = v10;
      *(_BYTE *)(v8 + 49) = *((_BYTE *)a2 + 5);
      if (v10 <= 0xD)
      {
        v11 = 1 << v10;
        if ((v11 & 0x7FC) != 0)
        {
          *(_BYTE *)(v8 + 50) = *((_BYTE *)a2 + 6);
          *v9 = *(_DWORD *)a2;
        }
        else if ((v11 & 0x3003) != 0)
        {
          *v9 = 0;
        }
        else
        {
          *v9 = *(_DWORD *)a2;
          return (uint64_t)WebCore::Length::ref((int *)(v8 + 44));
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::SVGRenderStyle::setY(uint64_t this, const WebCore::Length *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  WTF *v12;
  void *v13;

  v3 = this;
  v4 = *(unsigned __int8 **)(this + 64);
  v5 = v4[56];
  if (v5 != *((unsigned __int8 *)a2 + 4) || (v4[57] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v5 == 13)
    return this;
  this = (uint64_t)(v4 + 52);
  if (v5 == 11)
  {
    this = WebCore::Length::isCalculatedEqual((WebCore::Length *)this, a2);
    if ((this & 1) != 0)
      return this;
    v4 = *(unsigned __int8 **)(v3 + 64);
    goto LABEL_10;
  }
  if (v4[58])
    v6 = *(float *)this;
  else
    v6 = (float)*(int *)this;
  v7 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v7 = (float)*(int *)a2;
  if (v6 != v7)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (uint64_t)v4;
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x48);
      WebCore::StyleLayoutData::StyleLayoutData((WebCore::StyleLayoutData *)v8, (const WebCore::StyleLayoutData *)v4);
      this = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v8;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::StyleLayoutData::~StyleLayoutData((WebCore::StyleLayoutData *)this);
          this = WTF::fastFree(v12, v13);
          v8 = *(_QWORD *)(v3 + 64);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
    }
    v9 = (_DWORD *)(v8 + 52);
    if ((const WebCore::Length *)(v8 + 52) != a2)
    {
      if (*(_BYTE *)(v8 + 56) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      }
      v10 = *((unsigned __int8 *)a2 + 4);
      *(_BYTE *)(v8 + 56) = v10;
      *(_BYTE *)(v8 + 57) = *((_BYTE *)a2 + 5);
      if (v10 <= 0xD)
      {
        v11 = 1 << v10;
        if ((v11 & 0x7FC) != 0)
        {
          *(_BYTE *)(v8 + 58) = *((_BYTE *)a2 + 6);
          *v9 = *(_DWORD *)a2;
        }
        else if ((v11 & 0x3003) != 0)
        {
          *v9 = 0;
        }
        else
        {
          *v9 = *(_DWORD *)a2;
          return (uint64_t)WebCore::Length::ref((int *)(v8 + 52));
        }
      }
    }
  }
  return this;
}

WTF **WebCore::RenderStyle::setHasAutoSpecifiedZIndex(WebCore::RenderStyle *this)
{
  WTF **result;
  uint64_t v2;
  uint64_t v3;
  WTF *v4;

  v2 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v3 + 68) & 1) == 0 || *(_DWORD *)(v3 + 60))
  {
    v4 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    result = (WTF **)WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v4 + 1);
    *((_BYTE *)result + 68) |= 1u;
    *((_DWORD *)result + 15) = 0;
  }
  return result;
}

WTF *WebCore::RenderStyle::setAppleColorFilter(WTF *result, uint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  void *v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebCore::StyleRareInheritedData *v22;
  WTF *v23;
  void *v24;
  unsigned int **v25;
  unsigned int **v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  v3 = result;
  v4 = *(_QWORD *)(*((_QWORD *)result + 3) + 320);
  v5 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
  {
LABEL_12:
    v13 = (_DWORD *)*((_QWORD *)v3 + 3);
    if (*v13 == 1)
    {
      v14 = *((_QWORD *)v3 + 3);
    }
    else
    {
      v20 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v20, (uint64_t)v13);
      v22 = (WebCore::StyleRareInheritedData *)*((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = v14;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v22, v21);
          WTF::fastFree(v23, v24);
          v14 = *((_QWORD *)v3 + 3);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
    }
    v15 = WTF::DataRef<WebCore::StyleFilterData>::access((uint64_t *)(v14 + 320));
    v17 = v15;
    v18 = v15[5];
    if ((_DWORD)v18)
    {
      v25 = (unsigned int **)*((_QWORD *)v15 + 1);
      v26 = &v25[v18];
      do
      {
        v27 = *v25;
        *v25 = 0;
        if (v27)
        {
          v28 = v27 + 2;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            atomic_store(1u, v27 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
          }
        }
        ++v25;
      }
      while (v25 != v26);
    }
    result = (WTF *)*((_QWORD *)v17 + 1);
    if (result)
    {
      *((_QWORD *)v17 + 1) = 0;
      v17[4] = 0;
      result = (WTF *)WTF::fastFree(result, v16);
    }
    v19 = *(_QWORD **)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)v17 + 1) = v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    v17[4] = (_DWORD)v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v17[5] = (_DWORD)v19;
    return result;
  }
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD **)(v4 + 8);
  if ((_DWORD)v5)
  {
    v8 = 8 * v5 - 8;
    v9 = v7;
    v10 = *(_QWORD **)a2;
    while (1)
    {
      v11 = v8;
      result = (WTF *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v9 + 24))(*v9, *v10);
      if (!(_DWORD)result)
        goto LABEL_12;
      ++v9;
      ++v10;
      v8 = v11 - 8;
      if (!v11)
        goto LABEL_8;
    }
  }
  v10 = *(_QWORD **)a2;
  v9 = *(_QWORD **)(v4 + 8);
LABEL_8:
  if (v9 != &v7[v5] || v10 != &v6[v5])
    goto LABEL_12;
  return result;
}

uint64_t WebCore::RenderStyle::setBoxAlign(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  uint64_t v10;
  void *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 16) & 7) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v18);
      v6 = v18;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v18;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v16, v17);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    v10 = *(_QWORD *)(v6 + 8);
    if (*(_DWORD *)v10 == 1)
    {
      result = *(_QWORD *)(v6 + 8);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)result = 1;
      *(_DWORD *)(result + 4) = *(_DWORD *)(v10 + 4);
      *(_QWORD *)(result + 8) = *(_QWORD *)(v10 + 8);
      v12 = *(_BYTE *)(result + 16) & 0xF8 | *(_BYTE *)(v10 + 16) & 7;
      *(_BYTE *)(result + 16) = v12;
      v13 = v12 & 0xFFFFFFE7 | (8 * ((*(unsigned __int8 *)(v10 + 16) >> 3) & 3));
      *(_BYTE *)(result + 16) = v13;
      v14 = v13 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v10 + 16) >> 5) & 1));
      *(_BYTE *)(result + 16) = v14;
      *(_BYTE *)(result + 16) = v14 & 0xBF | *(_BYTE *)(v10 + 16) & 0x40;
      v15 = *(WTF **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = result;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WTF::fastFree(v15, v11);
          result = *(_QWORD *)(v6 + 8);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 0xF8 | v4 & 7;
  }
  return result;
}

WebCore::StyleDeprecatedFlexibleBoxData *WTF::DataRef<WebCore::StyleDeprecatedFlexibleBoxData>::access(WebCore::StyleDeprecatedFlexibleBoxData **a1)
{
  WebCore::StyleDeprecatedFlexibleBoxData *result;
  void *v3;
  WTF *v4;
  WebCore::StyleDeprecatedFlexibleBoxData *v5;

  result = *a1;
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleDeprecatedFlexibleBoxData::copy(result, (uint64_t *)&v5);
    result = v5;
    v4 = *a1;
    *a1 = v5;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WTF::fastFree(v4, v3);
        return *a1;
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBoxFlex(WebCore::RenderStyle *this, float a2)
{
  uint64_t result;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  uint64_t v10;
  void *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;

  v4 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 4) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v18);
      v6 = v18;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v18;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v16, v17);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    v10 = *(_QWORD *)(v6 + 8);
    if (*(_DWORD *)v10 == 1)
    {
      result = *(_QWORD *)(v6 + 8);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)result = 1;
      *(_DWORD *)(result + 4) = *(_DWORD *)(v10 + 4);
      *(_QWORD *)(result + 8) = *(_QWORD *)(v10 + 8);
      v12 = *(_BYTE *)(result + 16) & 0xF8 | *(_BYTE *)(v10 + 16) & 7;
      *(_BYTE *)(result + 16) = v12;
      v13 = v12 & 0xFFFFFFE7 | (8 * ((*(unsigned __int8 *)(v10 + 16) >> 3) & 3));
      *(_BYTE *)(result + 16) = v13;
      v14 = v13 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v10 + 16) >> 5) & 1));
      *(_BYTE *)(result + 16) = v14;
      *(_BYTE *)(result + 16) = v14 & 0xBF | *(_BYTE *)(v10 + 16) & 0x40;
      v15 = *(WTF **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = result;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WTF::fastFree(v15, v11);
          result = *(_QWORD *)(v6 + 8);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    *(float *)(result + 4) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBoxFlexGroup(WebCore::RenderStyle *this, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  uint64_t v10;
  void *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 8) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v18);
      v6 = v18;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v18;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v16, v17);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    v10 = *(_QWORD *)(v6 + 8);
    if (*(_DWORD *)v10 == 1)
    {
      result = *(_QWORD *)(v6 + 8);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)result = 1;
      *(_DWORD *)(result + 4) = *(_DWORD *)(v10 + 4);
      *(_QWORD *)(result + 8) = *(_QWORD *)(v10 + 8);
      v12 = *(_BYTE *)(result + 16) & 0xF8 | *(_BYTE *)(v10 + 16) & 7;
      *(_BYTE *)(result + 16) = v12;
      v13 = v12 & 0xFFFFFFE7 | (8 * ((*(unsigned __int8 *)(v10 + 16) >> 3) & 3));
      *(_BYTE *)(result + 16) = v13;
      v14 = v13 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v10 + 16) >> 5) & 1));
      *(_BYTE *)(result + 16) = v14;
      *(_BYTE *)(result + 16) = v14 & 0xBF | *(_BYTE *)(v10 + 16) & 0x40;
      v15 = *(WTF **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = result;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WTF::fastFree(v15, v11);
          result = *(_QWORD *)(v6 + 8);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBoxLines(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  uint64_t v10;
  void *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  char v16;
  WTF *v17;
  void *v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 16) & 0x40) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v19);
      v6 = v19;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v19;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v17, v18);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    v10 = *(_QWORD *)(v6 + 8);
    if (*(_DWORD *)v10 == 1)
    {
      result = *(_QWORD *)(v6 + 8);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)result = 1;
      *(_DWORD *)(result + 4) = *(_DWORD *)(v10 + 4);
      *(_QWORD *)(result + 8) = *(_QWORD *)(v10 + 8);
      v12 = *(_BYTE *)(result + 16) & 0xF8 | *(_BYTE *)(v10 + 16) & 7;
      *(_BYTE *)(result + 16) = v12;
      v13 = v12 & 0xFFFFFFE7 | (8 * ((*(unsigned __int8 *)(v10 + 16) >> 3) & 3));
      *(_BYTE *)(result + 16) = v13;
      v14 = v13 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v10 + 16) >> 5) & 1));
      *(_BYTE *)(result + 16) = v14;
      *(_BYTE *)(result + 16) = v14 & 0xBF | *(_BYTE *)(v10 + 16) & 0x40;
      v15 = *(WTF **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = result;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WTF::fastFree(v15, v11);
          result = *(_QWORD *)(v6 + 8);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    if (a2)
      v16 = 64;
    else
      v16 = 0;
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 0xBF | v16;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBoxOrdinalGroup(WebCore::RenderStyle *this, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  uint64_t v10;
  void *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 12) != a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v18);
      v6 = v18;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v18;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v16, v17);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    v10 = *(_QWORD *)(v6 + 8);
    if (*(_DWORD *)v10 == 1)
    {
      result = *(_QWORD *)(v6 + 8);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)result = 1;
      *(_DWORD *)(result + 4) = *(_DWORD *)(v10 + 4);
      *(_QWORD *)(result + 8) = *(_QWORD *)(v10 + 8);
      v12 = *(_BYTE *)(result + 16) & 0xF8 | *(_BYTE *)(v10 + 16) & 7;
      *(_BYTE *)(result + 16) = v12;
      v13 = v12 & 0xFFFFFFE7 | (8 * ((*(unsigned __int8 *)(v10 + 16) >> 3) & 3));
      *(_BYTE *)(result + 16) = v13;
      v14 = v13 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v10 + 16) >> 5) & 1));
      *(_BYTE *)(result + 16) = v14;
      *(_BYTE *)(result + 16) = v14 & 0xBF | *(_BYTE *)(v10 + 16) & 0x40;
      v15 = *(WTF **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = result;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WTF::fastFree(v15, v11);
          result = *(_QWORD *)(v6 + 8);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setColumnAxis(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  char v17;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 24) + 56) >> 4) & 3) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v16);
      v6 = v16;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v16;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v14, v15);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    result = *(_QWORD *)(v6 + 24);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)result, &v16);
      result = v16;
      v11 = *(unsigned int **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v16;
      if (v11)
      {
        if (*v11 == 1)
        {
          v12 = v11[12];
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v17, v11 + 10);
          v11[12] = -1;
          v13 = v11[6];
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v17, v11 + 4);
          v11[6] = -1;
          WTF::fastFree((WTF *)v11, v10);
          result = *(_QWORD *)(v6 + 24);
        }
        else
        {
          --*v11;
        }
      }
    }
    *(_BYTE *)(result + 56) = *(_BYTE *)(result + 56) & 0xCF | (16 * (v4 & 3));
  }
  return result;
}

uint64_t WebCore::RenderStyle::setColumnProgression(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  void *v10;
  unsigned int *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (a2 != *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 24) + 56) >> 6)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v17);
      v6 = v17;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v17;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v15, v16);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    result = *(_QWORD *)(v6 + 24);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMultiColData::copy((WebCore::StyleMultiColData *)result, &v17);
      result = v17;
      v11 = *(unsigned int **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v17;
      if (v11)
      {
        if (*v11 == 1)
        {
          v13 = v11[12];
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v18, v11 + 10);
          v11[12] = -1;
          v14 = v11[6];
          if ((_DWORD)v14 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v18, v11 + 4);
          v11[6] = -1;
          WTF::fastFree((WTF *)v11, v10);
          result = *(_QWORD *)(v6 + 24);
        }
        else
        {
          --*v11;
        }
      }
    }
    if (a2)
      v12 = 64;
    else
      v12 = 0;
    *(_BYTE *)(result + 56) = v12 & 0xC0 | *(_BYTE *)(result + 56) & 0x3F;
  }
  return result;
}

_DWORD *WTF::DataRef<WebCore::StyleMarqueeData>::access(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  int *v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return (_DWORD *)*a1;
  v4 = WTF::fastMalloc((WTF *)0x18);
  v2 = v4;
  *(_QWORD *)v4 = 1;
  *(_WORD *)(v4 + 9) = 0;
  v6 = *(unsigned __int8 *)(v1 + 8);
  *(_BYTE *)(v4 + 8) = v6;
  *(_BYTE *)(v4 + 9) = *(_BYTE *)(v1 + 9);
  if (v6 <= 0xD)
  {
    v7 = (int *)(v4 + 4);
    v8 = 1 << v6;
    if ((v8 & 0x7FC) != 0)
    {
      *(_BYTE *)(v2 + 10) = *(_BYTE *)(v1 + 10);
      *v7 = *(_DWORD *)(v1 + 4);
    }
    else if ((v8 & 0x3003) != 0)
    {
      *v7 = 0;
    }
    else
    {
      *v7 = *(_DWORD *)(v1 + 4);
      WebCore::Length::ref(v7);
    }
  }
  *(_QWORD *)(v2 + 12) = *(_QWORD *)(v1 + 12);
  v9 = *(_BYTE *)(v2 + 20) & 0xFC | *(_BYTE *)(v1 + 20) & 3;
  *(_BYTE *)(v2 + 20) = v9;
  *(_BYTE *)(v2 + 20) = v9 & 0xE3 | *(_BYTE *)(v1 + 20) & 0x1C;
  v10 = *a1;
  *a1 = v2;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      if (*(_BYTE *)(v10 + 8) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v12 = v10;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v10 + 4));
        v10 = v12;
      }
      WTF::fastFree((WTF *)v10, v5);
      return (_DWORD *)*a1;
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  return (_DWORD *)v2;
}

_DWORD *WebCore::RenderStyle::setMarqueeIncrement(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::StyleRareNonInheritedData *v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  WTF *v19;
  void *v20;
  int v21;
  _DWORD *v22;
  char isCalculatedEqual;
  _DWORD *v24;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 40) + 64);
  v6 = v5[8];
  if (v6 == *((unsigned __int8 *)a2 + 4) && (v5[9] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v6 == 13)
      return result;
    if (v6 == 11)
    {
      v22 = result;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 4), a2);
      result = v22;
      if ((isCalculatedEqual & 1) != 0)
        return result;
    }
    else
    {
      v7 = *((float *)v5 + 1);
      if (!v5[10])
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v8 = (float)*(int *)a2;
      if (v7 == v8)
        return result;
    }
  }
  v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
  v10 = (_DWORD *)*((_QWORD *)v9 + 5);
  if (*v10 == 1)
  {
    v13 = *((_QWORD *)v9 + 5);
  }
  else
  {
    v11 = v9;
    v12 = WTF::fastMalloc((WTF *)0x288);
    v13 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v12, (uint64_t)v10);
    v15 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v11 + 5);
    *((_QWORD *)v11 + 5) = v13;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v15, v14);
        WTF::fastFree(v19, v20);
        v13 = *((_QWORD *)v11 + 5);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  result = WTF::DataRef<WebCore::StyleMarqueeData>::access((uint64_t *)(v13 + 64));
  v16 = result + 1;
  if (result + 1 != (_DWORD *)a2)
  {
    if (*((_BYTE *)result + 8) == 11)
    {
      v24 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v16);
      result = v24;
    }
    v17 = *((unsigned __int8 *)a2 + 4);
    *((_BYTE *)result + 8) = v17;
    *((_BYTE *)result + 9) = *((_BYTE *)a2 + 5);
    if (v17 - 2 >= 9)
    {
      if (v17 > 0xD)
        goto LABEL_20;
      if (((1 << v17) & 0x3003) != 0)
      {
        *v16 = 0;
        goto LABEL_20;
      }
      if (v17 != 11)
        goto LABEL_20;
      v21 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v18 = *((unsigned __int8 *)a2 + 6);
      *((_BYTE *)result + 10) = v18;
      if (v18)
      {
        *v16 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v21 = *(_DWORD *)a2;
    }
    *v16 = v21;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setTapHighlightColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareInheritedData *v16;
  WTF *v17;
  void *v18;
  WebCore::RenderStyle *v19;
  const WebCore::StyleColor *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  _QWORD v24[4];
  _QWORD *v25;

  v3 = this;
  v4 = *(_DWORD **)(this + 24);
  v5 = v4[90];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v24[0] = &v21;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v24, v4 + 88, a2);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD **)(v3 + 24);
LABEL_19:
      if (*v4 == 1)
      {
        v12 = (uint64_t)v4;
      }
      else
      {
        v12 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v12, (uint64_t)v4);
        v16 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v12;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v16, v15);
            WTF::fastFree(v17, v18);
            v12 = *(_QWORD *)(v3 + 24);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      v24[0] = &v23;
      v24[1] = &v23;
      v24[2] = &v23;
      v24[3] = &v23;
      v13 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v13 == -1)
      {
        v19 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setTextFillColor(v19, v20);
      }
      v25 = v24;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v21, &v25, a2);
      v14 = *(unsigned int *)(v12 + 360);
      if ((_DWORD)v14 == -1)
      {
        if (v22 == -1)
          return this;
      }
      else if (v22 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v24, v12 + 352);
        *(_DWORD *)(v12 + 360) = -1;
        goto LABEL_27;
      }
      v24[0] = v12 + 352;
      this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v22))(v24, v12 + 352, &v21);
LABEL_27:
      if (v22 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(v24, &v21);
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setTextFillColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareInheritedData *v16;
  WTF *v17;
  void *v18;
  WebCore::RenderStyle *v19;
  const WebCore::StyleColor *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  _QWORD v24[4];
  _QWORD *v25;

  v3 = this;
  v4 = *(_DWORD **)(this + 24);
  v5 = v4[10];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v24[0] = &v21;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v24, v4 + 8, a2);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD **)(v3 + 24);
LABEL_19:
      if (*v4 == 1)
      {
        v12 = (uint64_t)v4;
      }
      else
      {
        v12 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v12, (uint64_t)v4);
        v16 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v12;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v16, v15);
            WTF::fastFree(v17, v18);
            v12 = *(_QWORD *)(v3 + 24);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      v24[0] = &v23;
      v24[1] = &v23;
      v24[2] = &v23;
      v24[3] = &v23;
      v13 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v13 == -1)
      {
        v19 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setVisitedLinkTextFillColor(v19, v20);
      }
      v25 = v24;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v21, &v25, a2);
      v14 = *(unsigned int *)(v12 + 40);
      if ((_DWORD)v14 == -1)
      {
        if (v22 == -1)
          return this;
      }
      else if (v22 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v24, v12 + 32);
        *(_DWORD *)(v12 + 40) = -1;
        goto LABEL_27;
      }
      v24[0] = v12 + 32;
      this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v22))(v24, v12 + 32, &v21);
LABEL_27:
      if (v22 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(v24, &v21);
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setVisitedLinkTextFillColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareInheritedData *v16;
  WTF *v17;
  void *v18;
  WebCore::RenderStyle *v19;
  const WebCore::StyleColor *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  _QWORD v24[4];
  _QWORD *v25;

  v3 = this;
  v4 = *(_DWORD **)(this + 24);
  v5 = v4[22];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v24[0] = &v21;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v24, v4 + 20, a2);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD **)(v3 + 24);
LABEL_19:
      if (*v4 == 1)
      {
        v12 = (uint64_t)v4;
      }
      else
      {
        v12 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v12, (uint64_t)v4);
        v16 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v12;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v16, v15);
            WTF::fastFree(v17, v18);
            v12 = *(_QWORD *)(v3 + 24);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      v24[0] = &v23;
      v24[1] = &v23;
      v24[2] = &v23;
      v24[3] = &v23;
      v13 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v13 == -1)
      {
        v19 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setTextStrokeColor(v19, v20);
      }
      v25 = v24;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v21, &v25, a2);
      v14 = *(unsigned int *)(v12 + 88);
      if ((_DWORD)v14 == -1)
      {
        if (v22 == -1)
          return this;
      }
      else if (v22 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v24, v12 + 80);
        *(_DWORD *)(v12 + 88) = -1;
        goto LABEL_27;
      }
      v24[0] = v12 + 80;
      this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v22))(v24, v12 + 80, &v21);
LABEL_27:
      if (v22 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(v24, &v21);
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setTextStrokeColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareInheritedData *v16;
  WTF *v17;
  void *v18;
  WebCore::RenderStyle *v19;
  const WebCore::StyleColor *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  _QWORD v24[4];
  _QWORD *v25;

  v3 = this;
  v4 = *(_DWORD **)(this + 24);
  v5 = v4[6];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v24[0] = &v21;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v24, v4 + 4, a2);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD **)(v3 + 24);
LABEL_19:
      if (*v4 == 1)
      {
        v12 = (uint64_t)v4;
      }
      else
      {
        v12 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v12, (uint64_t)v4);
        v16 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v12;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v16, v15);
            WTF::fastFree(v17, v18);
            v12 = *(_QWORD *)(v3 + 24);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      v24[0] = &v23;
      v24[1] = &v23;
      v24[2] = &v23;
      v24[3] = &v23;
      v13 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v13 == -1)
      {
        v19 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setVisitedLinkTextStrokeColor(v19, v20);
      }
      v25 = v24;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v21, &v25, a2);
      v14 = *(unsigned int *)(v12 + 24);
      if ((_DWORD)v14 == -1)
      {
        if (v22 == -1)
          return this;
      }
      else if (v22 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v24, v12 + 16);
        *(_DWORD *)(v12 + 24) = -1;
        goto LABEL_27;
      }
      v24[0] = v12 + 16;
      this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v22))(v24, v12 + 16, &v21);
LABEL_27:
      if (v22 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(v24, &v21);
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setVisitedLinkTextStrokeColor(uint64_t this, const WebCore::StyleColor *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::StyleRareInheritedData *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  _QWORD v24[4];
  _QWORD *v25;

  v3 = this;
  v4 = *(_DWORD **)(this + 24);
  v5 = v4[18];
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if ((v11 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v24[0] = &v21;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v24, v4 + 16, a2);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD **)(v3 + 24);
LABEL_19:
      if (*v4 == 1)
      {
        v12 = (uint64_t)v4;
      }
      else
      {
        v12 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v12, (uint64_t)v4);
        v16 = *(WebCore::StyleRareInheritedData **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v12;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v16, v15);
            WTF::fastFree(v17, v18);
            v12 = *(_QWORD *)(v3 + 24);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      v24[0] = &v23;
      v24[1] = &v23;
      v24[2] = &v23;
      v24[3] = &v23;
      v13 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v13 == -1)
      {
        v19 = std::__throw_bad_variant_access[abi:sn180100]();
        return (uint64_t)WebCore::RenderStyle::setUserDrag(v19, v20);
      }
      v25 = v24;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v21, &v25, a2);
      v14 = *(unsigned int *)(v12 + 72);
      if ((_DWORD)v14 == -1)
      {
        if (v22 == -1)
          return this;
      }
      else if (v22 == -1)
      {
        this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(v24, v12 + 64);
        *(_DWORD *)(v12 + 72) = -1;
        goto LABEL_27;
      }
      v24[0] = v12 + 64;
      this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v22))(v24, v12 + 64, &v21);
LABEL_27:
      if (v22 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(v24, &v21);
    }
  }
  return this;
}

WebCore::StyleMiscNonInheritedData *WebCore::RenderStyle::setUserDrag(uint64_t a1, int a2)
{
  WebCore::StyleMiscNonInheritedData *result;
  uint64_t v3;
  char v4;
  WTF *v5;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WebCore::StyleMiscNonInheritedData *)(a1 + 8);
  if (((*(_DWORD *)(*(_QWORD *)(v3 + 32) + 148) >> 22) & 3) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = WTF::DataRef<WebCore::StyleMiscNonInheritedData>::access((WebCore::StyleMiscNonInheritedData **)v5 + 4);
    *((_DWORD *)result + 37) = *((_DWORD *)result + 37) & 0xFF3FFFFF | ((v4 & 3) << 22);
  }
  return result;
}

uint64_t WebCore::RenderStyle::setVisitedLinkBorderBottomColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WebCore::StyleMiscNonInheritedData *v15;
  _DWORD *v16;
  WebCore::StyleVisitedLinkColorData *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WebCore::RenderStyle *v24;
  const WebCore::StyleColor *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29[4];
  uint64_t *v30;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 56);
  v5 = *(unsigned int *)(v4 + 80);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v29[0] = (uint64_t)&v26;
    this = ((uint64_t (*)(uint64_t *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v29, v4 + 72, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v12 = *((_QWORD *)v11 + 4);
    if (*(_DWORD *)v12 != 1)
    {
      v13 = v11;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v11 + 4), v29);
      v12 = v29[0];
      v15 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v13 + 4);
      *((_QWORD *)v13 + 4) = v29[0];
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v15, v14);
          WTF::fastFree(v22, v23);
          v12 = *((_QWORD *)v13 + 4);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    v16 = *(_DWORD **)(v12 + 56);
    if (*v16 != 1)
    {
      WebCore::StyleVisitedLinkColorData::copy(*(WebCore::StyleVisitedLinkColorData **)(v12 + 56), v29);
      v16 = (_DWORD *)v29[0];
      v17 = *(WebCore::StyleVisitedLinkColorData **)(v12 + 56);
      *(_QWORD *)(v12 + 56) = v29[0];
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v17);
          WTF::fastFree(v20, v21);
          v16 = *(_DWORD **)(v12 + 56);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
    v29[0] = (uint64_t)&v28;
    v29[1] = (uint64_t)&v28;
    v29[2] = (uint64_t)&v28;
    v29[3] = (uint64_t)&v28;
    v18 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v18 == -1)
    {
      v24 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setVisitedLinkBorderLeftColor(v24, v25);
    }
    v30 = v29;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v18])(&v26, &v30, a2);
    v19 = v16[20];
    if ((_DWORD)v19 == -1)
    {
      if (v27 == -1)
        return this;
    }
    else if (v27 == -1)
    {
      this = ((uint64_t (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(v29, v16 + 18);
      v16[20] = -1;
LABEL_31:
      if (v27 != -1)
        return ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(v29, &v26);
      return this;
    }
    v29[0] = (uint64_t)(v16 + 18);
    this = ((uint64_t (*)(uint64_t *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v27))(v29, v16 + 18, &v26);
    goto LABEL_31;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

uint64_t WebCore::RenderStyle::setVisitedLinkBorderLeftColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WebCore::StyleMiscNonInheritedData *v15;
  _DWORD *v16;
  WebCore::StyleVisitedLinkColorData *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WebCore::RenderStyle *v24;
  const WebCore::StyleColor *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29[4];
  uint64_t *v30;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 56);
  v5 = *(unsigned int *)(v4 + 32);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v29[0] = (uint64_t)&v26;
    this = ((uint64_t (*)(uint64_t *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v29, v4 + 24, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v12 = *((_QWORD *)v11 + 4);
    if (*(_DWORD *)v12 != 1)
    {
      v13 = v11;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v11 + 4), v29);
      v12 = v29[0];
      v15 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v13 + 4);
      *((_QWORD *)v13 + 4) = v29[0];
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v15, v14);
          WTF::fastFree(v22, v23);
          v12 = *((_QWORD *)v13 + 4);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    v16 = *(_DWORD **)(v12 + 56);
    if (*v16 != 1)
    {
      WebCore::StyleVisitedLinkColorData::copy(*(WebCore::StyleVisitedLinkColorData **)(v12 + 56), v29);
      v16 = (_DWORD *)v29[0];
      v17 = *(WebCore::StyleVisitedLinkColorData **)(v12 + 56);
      *(_QWORD *)(v12 + 56) = v29[0];
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v17);
          WTF::fastFree(v20, v21);
          v16 = *(_DWORD **)(v12 + 56);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
    v29[0] = (uint64_t)&v28;
    v29[1] = (uint64_t)&v28;
    v29[2] = (uint64_t)&v28;
    v29[3] = (uint64_t)&v28;
    v18 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v18 == -1)
    {
      v24 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setVisitedLinkBorderRightColor(v24, v25);
    }
    v30 = v29;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v18])(&v26, &v30, a2);
    v19 = v16[8];
    if ((_DWORD)v19 == -1)
    {
      if (v27 == -1)
        return this;
    }
    else if (v27 == -1)
    {
      this = ((uint64_t (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(v29, v16 + 6);
      v16[8] = -1;
LABEL_31:
      if (v27 != -1)
        return ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(v29, &v26);
      return this;
    }
    v29[0] = (uint64_t)(v16 + 6);
    this = ((uint64_t (*)(uint64_t *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v27))(v29, v16 + 6, &v26);
    goto LABEL_31;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

uint64_t WebCore::RenderStyle::setVisitedLinkBorderRightColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WebCore::StyleMiscNonInheritedData *v15;
  _DWORD *v16;
  WebCore::StyleVisitedLinkColorData *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WebCore::RenderStyle *v24;
  const WebCore::StyleColor *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29[4];
  uint64_t *v30;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 56);
  v5 = *(unsigned int *)(v4 + 48);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v29[0] = (uint64_t)&v26;
    this = ((uint64_t (*)(uint64_t *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v29, v4 + 40, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v12 = *((_QWORD *)v11 + 4);
    if (*(_DWORD *)v12 != 1)
    {
      v13 = v11;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v11 + 4), v29);
      v12 = v29[0];
      v15 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v13 + 4);
      *((_QWORD *)v13 + 4) = v29[0];
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v15, v14);
          WTF::fastFree(v22, v23);
          v12 = *((_QWORD *)v13 + 4);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    v16 = *(_DWORD **)(v12 + 56);
    if (*v16 != 1)
    {
      WebCore::StyleVisitedLinkColorData::copy(*(WebCore::StyleVisitedLinkColorData **)(v12 + 56), v29);
      v16 = (_DWORD *)v29[0];
      v17 = *(WebCore::StyleVisitedLinkColorData **)(v12 + 56);
      *(_QWORD *)(v12 + 56) = v29[0];
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v17);
          WTF::fastFree(v20, v21);
          v16 = *(_DWORD **)(v12 + 56);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
    v29[0] = (uint64_t)&v28;
    v29[1] = (uint64_t)&v28;
    v29[2] = (uint64_t)&v28;
    v29[3] = (uint64_t)&v28;
    v18 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v18 == -1)
    {
      v24 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setVisitedLinkBorderTopColor(v24, v25);
    }
    v30 = v29;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v18])(&v26, &v30, a2);
    v19 = v16[12];
    if ((_DWORD)v19 == -1)
    {
      if (v27 == -1)
        return this;
    }
    else if (v27 == -1)
    {
      this = ((uint64_t (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(v29, v16 + 10);
      v16[12] = -1;
LABEL_31:
      if (v27 != -1)
        return ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(v29, &v26);
      return this;
    }
    v29[0] = (uint64_t)(v16 + 10);
    this = ((uint64_t (*)(uint64_t *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v27))(v29, v16 + 10, &v26);
    goto LABEL_31;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

uint64_t WebCore::RenderStyle::setVisitedLinkBorderTopColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WebCore::StyleMiscNonInheritedData *v15;
  _DWORD *v16;
  WebCore::StyleVisitedLinkColorData *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  int v24;
  WebCore::Length *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29[4];
  uint64_t *v30;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 56);
  v5 = *(unsigned int *)(v4 + 64);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v29[0] = (uint64_t)&v26;
    this = ((uint64_t (*)(uint64_t *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v29, v4 + 56, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v12 = *((_QWORD *)v11 + 4);
    if (*(_DWORD *)v12 != 1)
    {
      v13 = v11;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v11 + 4), v29);
      v12 = v29[0];
      v15 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v13 + 4);
      *((_QWORD *)v13 + 4) = v29[0];
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v15, v14);
          WTF::fastFree(v22, v23);
          v12 = *((_QWORD *)v13 + 4);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    v16 = *(_DWORD **)(v12 + 56);
    if (*v16 != 1)
    {
      WebCore::StyleVisitedLinkColorData::copy(*(WebCore::StyleVisitedLinkColorData **)(v12 + 56), v29);
      v16 = (_DWORD *)v29[0];
      v17 = *(WebCore::StyleVisitedLinkColorData **)(v12 + 56);
      *(_QWORD *)(v12 + 56) = v29[0];
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v17);
          WTF::fastFree(v20, v21);
          v16 = *(_DWORD **)(v12 + 56);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
    v29[0] = (uint64_t)&v28;
    v29[1] = (uint64_t)&v28;
    v29[2] = (uint64_t)&v28;
    v29[3] = (uint64_t)&v28;
    v18 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v18 == -1)
    {
      v24 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setLeft(v24, v25);
    }
    v30 = v29;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v18])(&v26, &v30, a2);
    v19 = v16[16];
    if ((_DWORD)v19 == -1)
    {
      if (v27 == -1)
        return this;
    }
    else if (v27 == -1)
    {
      this = ((uint64_t (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(v29, v16 + 14);
      v16[16] = -1;
LABEL_31:
      if (v27 != -1)
        return ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(v29, &v26);
      return this;
    }
    v29[0] = (uint64_t)(v16 + 14);
    this = ((uint64_t (*)(uint64_t *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v27))(v29, v16 + 14, &v26);
    goto LABEL_31;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

uint64_t WebCore::RenderStyle::setLeft(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  _BYTE *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  WebCore::NinePieceImage::Data *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 24);
  v5 = v4[36];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[37] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 32), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 8);
      if (!v4[38])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 24);
  if (*v8 == 1)
  {
    v9 = *(_BYTE **)(result + 24);
  }
  else
  {
    v13 = result;
    v9 = (_BYTE *)WTF::fastMalloc((WTF *)0x110);
    result = WebCore::StyleSurroundData::StyleSurroundData((uint64_t)v9, (uint64_t)v8);
    v15 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = result;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        if (*(_BYTE *)(v15 + 268) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 264));
        }
        if (*(_BYTE *)(v15 + 260) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 256));
        }
        if (*(_BYTE *)(v15 + 252) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 248));
        }
        if (*(_BYTE *)(v15 + 244) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 240));
        }
        if (*(_BYTE *)(v15 + 236) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 232));
        }
        if (*(_BYTE *)(v15 + 228) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 224));
        }
        if (*(_BYTE *)(v15 + 220) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 216));
        }
        if (*(_BYTE *)(v15 + 212) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 208));
        }
        v17 = *(WebCore::NinePieceImage::Data **)(v15 + 200);
        *(_QWORD *)(v15 + 200) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            WebCore::NinePieceImage::Data::~Data(v17);
            WTF::fastFree(v22, v23);
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
        v18 = *(unsigned int *)(v15 + 184);
        if ((_DWORD)v18 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v18])(&v24, v15 + 176);
        *(_DWORD *)(v15 + 184) = -1;
        v19 = *(unsigned int *)(v15 + 160);
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(&v25, v15 + 152);
        *(_DWORD *)(v15 + 160) = -1;
        v20 = *(unsigned int *)(v15 + 136);
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(&v26, v15 + 128);
        *(_DWORD *)(v15 + 136) = -1;
        v21 = *(unsigned int *)(v15 + 112);
        if ((_DWORD)v21 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v27, v15 + 104);
        *(_DWORD *)(v15 + 112) = -1;
        if (*(_BYTE *)(v15 + 100) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 96));
        }
        if (*(_BYTE *)(v15 + 92) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 88));
        }
        if (*(_BYTE *)(v15 + 84) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 80));
        }
        if (*(_BYTE *)(v15 + 76) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 72));
        }
        if (*(_BYTE *)(v15 + 68) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 64));
        }
        if (*(_BYTE *)(v15 + 60) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 56));
        }
        if (*(_BYTE *)(v15 + 52) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 48));
        }
        if (*(_BYTE *)(v15 + 44) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 40));
        }
        if (*(_BYTE *)(v15 + 36) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 32));
        }
        if (*(_BYTE *)(v15 + 28) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 24));
        }
        if (*(_BYTE *)(v15 + 20) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 16));
        }
        if (*(_BYTE *)(v15 + 12) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 8));
        }
        result = WTF::fastFree((WTF *)v15, v14);
        v9 = *(_BYTE **)(v13 + 24);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  v10 = v9 + 32;
  if (v9 + 32 != (_BYTE *)a2)
  {
    if (v9[36] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
    }
    v11 = *((unsigned __int8 *)a2 + 4);
    v9[36] = v11;
    v9[37] = *((_BYTE *)a2 + 5);
    if (v11 - 2 >= 9)
    {
      if (v11 > 0xD)
        goto LABEL_17;
      if (((1 << v11) & 0x3003) != 0)
      {
        *v10 = 0;
        goto LABEL_17;
      }
      if (v11 != 11)
        goto LABEL_17;
      v16 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v12 = *((unsigned __int8 *)a2 + 6);
      v9[38] = v12;
      if (v12)
      {
        *v10 = *(_DWORD *)a2;
LABEL_17:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v16 = *(_DWORD *)a2;
    }
    *v10 = v16;
    goto LABEL_17;
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setMaxWidth(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 8);
  v6 = v5[32];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[33] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 28), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 7);
    if (!v5[34])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v9 + 1);
      v10 = result + 7;
      if (result + 7 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 32) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 7;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 32) = v11;
      *((_BYTE *)result + 33) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 34) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setMinWidth(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 8);
  v6 = v5[24];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[25] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 20), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 5);
    if (!v5[26])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v9 + 1);
      v10 = result + 5;
      if (result + 5 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 24) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 5;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 24) = v11;
      *((_BYTE *)result + 25) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 26) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setRight(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[20];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[21] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 16), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 4);
    if (!v5[22])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v9 + 3);
      v10 = result + 4;
      if (result + 4 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 20) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 4;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 20) = v11;
      *((_BYTE *)result + 21) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 22) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setTop(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  _BYTE *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  WebCore::NinePieceImage::Data *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 24);
  v5 = v4[12];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[13] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 8), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 2);
      if (!v4[14])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 24);
  if (*v8 == 1)
  {
    v9 = *(_BYTE **)(result + 24);
  }
  else
  {
    v13 = result;
    v9 = (_BYTE *)WTF::fastMalloc((WTF *)0x110);
    result = WebCore::StyleSurroundData::StyleSurroundData((uint64_t)v9, (uint64_t)v8);
    v15 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = result;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        if (*(_BYTE *)(v15 + 268) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 264));
        }
        if (*(_BYTE *)(v15 + 260) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 256));
        }
        if (*(_BYTE *)(v15 + 252) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 248));
        }
        if (*(_BYTE *)(v15 + 244) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 240));
        }
        if (*(_BYTE *)(v15 + 236) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 232));
        }
        if (*(_BYTE *)(v15 + 228) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 224));
        }
        if (*(_BYTE *)(v15 + 220) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 216));
        }
        if (*(_BYTE *)(v15 + 212) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 208));
        }
        v17 = *(WebCore::NinePieceImage::Data **)(v15 + 200);
        *(_QWORD *)(v15 + 200) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            WebCore::NinePieceImage::Data::~Data(v17);
            WTF::fastFree(v22, v23);
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
        v18 = *(unsigned int *)(v15 + 184);
        if ((_DWORD)v18 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v18])(&v24, v15 + 176);
        *(_DWORD *)(v15 + 184) = -1;
        v19 = *(unsigned int *)(v15 + 160);
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(&v25, v15 + 152);
        *(_DWORD *)(v15 + 160) = -1;
        v20 = *(unsigned int *)(v15 + 136);
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(&v26, v15 + 128);
        *(_DWORD *)(v15 + 136) = -1;
        v21 = *(unsigned int *)(v15 + 112);
        if ((_DWORD)v21 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v27, v15 + 104);
        *(_DWORD *)(v15 + 112) = -1;
        if (*(_BYTE *)(v15 + 100) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 96));
        }
        if (*(_BYTE *)(v15 + 92) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 88));
        }
        if (*(_BYTE *)(v15 + 84) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 80));
        }
        if (*(_BYTE *)(v15 + 76) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 72));
        }
        if (*(_BYTE *)(v15 + 68) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 64));
        }
        if (*(_BYTE *)(v15 + 60) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 56));
        }
        if (*(_BYTE *)(v15 + 52) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 48));
        }
        if (*(_BYTE *)(v15 + 44) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 40));
        }
        if (*(_BYTE *)(v15 + 36) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 32));
        }
        if (*(_BYTE *)(v15 + 28) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 24));
        }
        if (*(_BYTE *)(v15 + 20) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 16));
        }
        if (*(_BYTE *)(v15 + 12) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v15 + 8));
        }
        result = WTF::fastFree((WTF *)v15, v14);
        v9 = *(_BYTE **)(v13 + 24);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  v10 = v9 + 8;
  if (v9 + 8 != (_BYTE *)a2)
  {
    if (v9[12] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
    }
    v11 = *((unsigned __int8 *)a2 + 4);
    v9[12] = v11;
    v9[13] = *((_BYTE *)a2 + 5);
    if (v11 - 2 >= 9)
    {
      if (v11 > 0xD)
        goto LABEL_17;
      if (((1 << v11) & 0x3003) != 0)
      {
        *v10 = 0;
        goto LABEL_17;
      }
      if (v11 != 11)
        goto LABEL_17;
      v16 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v12 = *((unsigned __int8 *)a2 + 6);
      v9[14] = v12;
      if (v12)
      {
        *v10 = *(_DWORD *)a2;
LABEL_17:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v16 = *(_DWORD *)a2;
    }
    *v10 = v16;
    goto LABEL_17;
  }
  return result;
}

void WebCore::VideoPresentationModelVideoElement::VideoListener::handleEvent(WebCore::VideoPresentationModelVideoElement::VideoListener *this, WebCore::ScriptExecutionContext *a2, WebCore::Event *a3)
{
  uint64_t v3;
  WebCore::VideoPresentationModelVideoElement *v5;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
    return;
  v5 = (WebCore::VideoPresentationModelVideoElement *)*((_QWORD *)this + 4);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3, a2);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v5)
    return;
LABEL_15:
  WebCore::VideoPresentationModelVideoElement::updateForEventName(v5, (WebCore::Event *)((char *)a3 + 24));
  v9 = *((_QWORD *)v5 + 1);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_19:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return;
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
    goto LABEL_26;
  if (v12)
    return;
LABEL_27:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    WTF::fastFree((WTF *)v9, v8);
}

void sub_1951ECAB8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

void WebCore::VideoPresentationModelVideoElement::updateForEventName(WebCore::VideoPresentationModelVideoElement *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  WebCore::VideoPresentationModelVideoElement *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::VideoPresentationModelVideoElement *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  NSObject *v53;
  uint64_t v54;
  char *v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  WTF::JSONImpl::Value *v63;
  WTF::Logger *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::Logger *v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  WTF::String *v96;
  uint64_t v97;
  WTF::String *v98;
  unint64_t StatusReg;
  uint64_t v100;
  WebCore::VideoPresentationModelVideoElement *v101;
  uint64_t v102;
  uint64_t v103;
  WebCore::VideoPresentationModelVideoElement *v104;
  uint64_t v105;
  uint64_t v106;
  WebCore::VideoPresentationModelVideoElement *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  _BOOL8 v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  unsigned __int8 v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  WTF *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  WTF *v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v140;
  unsigned int v141;
  WTF::String *v142;
  unint64_t v143;
  _QWORD v144[4];
  WTF::Logger *v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::JSONImpl::Value *v153;
  __int128 buf;
  const char *v155;
  WTF::StringImpl *v156;
  int v157;
  WTF::StringImpl *v158;
  int v159;
  WTF::StringImpl *v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 6);
  if (!v2 || !*(_DWORD *)(v2 - 12))
    return;
  v4 = this;
  if (byte_1ECE81832 == 1)
  {
    v5 = qword_1ECE81840;
  }
  else
  {
    this = (WebCore::VideoPresentationModelVideoElement *)WTF::AtomStringImpl::add();
    v5 = buf;
    qword_1ECE81840 = buf;
    byte_1ECE81832 = 1;
  }
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 != v5)
  {
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v7 || (v8 = *(WebCore::VideoPresentationModelVideoElement **)(v7 + 96)) == 0)
    {
      this = (WebCore::VideoPresentationModelVideoElement *)WebCore::threadGlobalDataSlow(this);
      v8 = this;
    }
    v9 = *((_QWORD *)v8 + 5);
    if (!v9)
    {
      this = (WebCore::VideoPresentationModelVideoElement *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
      v9 = *((_QWORD *)v8 + 5);
    }
    if (*(_QWORD *)a2 != *(_QWORD *)(v9 + 1696))
      goto LABEL_176;
  }
  v10 = *((_QWORD *)v4 + 3);
  v11 = WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>::unspecifiedBoolTypeInstance;
  if (!v10)
    v11 = 0;
  v12 = v11 != 0;
  LOBYTE(v144[0]) = v12;
  if (*((unsigned __int8 *)v4 + 56) != v12)
  {
    if (v10)
    {
      v13 = *(_QWORD *)(v10 + 1824);
      if (v13)
      {
        v14 = *(WTF::StringImpl **)(v10 + 1832);
        *(_QWORD *)&buf = "VideoPresentationModelVideoElement";
        *((_QWORD *)&buf + 1) = 35;
        v155 = "setHasVideo";
        v156 = v14;
        if (*(_BYTE *)(v13 + 12))
        {
          this = (WebCore::VideoPresentationModelVideoElement *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
          LOBYTE(v12) = v144[0];
        }
      }
    }
    *((_BYTE *)v4 + 56) = v12;
    v15 = *((_QWORD *)v4 + 6);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 - 12);
      if ((_DWORD)v16)
      {
        if (v16 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1951ED8C8);
        }
        v18 = (WTF *)WTF::fastMalloc((WTF *)(8 * v16));
        v19 = *((_QWORD *)v4 + 6);
        if (v19 && *(_DWORD *)(v19 - 12))
        {
          v20 = *(unsigned int *)(v19 - 4);
          if ((_DWORD)v20)
          {
            v21 = 8 * v20;
            v22 = (uint64_t *)*((_QWORD *)v4 + 6);
            while ((unint64_t)(*v22 + 1) <= 1)
            {
              ++v22;
              v21 -= 8;
              if (!v21)
                goto LABEL_45;
            }
          }
          else
          {
            v22 = (uint64_t *)*((_QWORD *)v4 + 6);
          }
          v23 = (uint64_t *)(v19 + 8 * v20);
          if (v22 != v23)
          {
            v24 = v6;
            v25 = 0;
            v26 = *v22;
            v27 = 1;
LABEL_32:
            v28 = v27;
            if (v26)
              (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
            v29 = v25 + 1;
            *((_QWORD *)v18 + v25) = v26;
            while (++v22 != v23)
            {
              v26 = *v22;
              if ((unint64_t)(*v22 + 1) > 1)
              {
                v27 = v28 + 1;
                ++v25;
                if (v22 != v23)
                  goto LABEL_32;
                break;
              }
            }
            v6 = v24;
            if (v29)
            {
              v30 = 8 * v28;
              v31 = v18;
              do
              {
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v31 + 48))(*(_QWORD *)v31, *((unsigned __int8 *)v4 + 56));
                v31 = (WTF *)((char *)v31 + 8);
                v30 -= 8;
              }
              while (v30);
              v32 = 8 * v28;
              v33 = v18;
              do
              {
                if (*(_QWORD *)v33)
                  (*(void (**)(_QWORD))(**(_QWORD **)v33 + 40))(*(_QWORD *)v33);
                v33 = (WTF *)((char *)v33 + 8);
                v32 -= 8;
              }
              while (v32);
            }
          }
        }
LABEL_45:
        this = (WebCore::VideoPresentationModelVideoElement *)WTF::fastFree(v18, v17);
      }
    }
  }
  v34 = *((_QWORD *)v4 + 3);
  if (!v34)
  {
    v38 = 0.0;
    v39 = 0.0;
    goto LABEL_58;
  }
  v35 = *(_QWORD *)(v34 + 1136);
  if (!v35)
    goto LABEL_52;
  v36 = (*(float (**)(_QWORD))(**(_QWORD **)(v35 + 72) + 288))(*(_QWORD *)(v35 + 72));
  if (v36 >= 4294967300.0)
  {
    v37 = -1;
    goto LABEL_53;
  }
  if (v36 > 0.0)
    v37 = v36;
  else
LABEL_52:
    v37 = 0;
LABEL_53:
  v40 = *(_QWORD *)(*((_QWORD *)v4 + 3) + 1136);
  if (v40)
  {
    this = (WebCore::VideoPresentationModelVideoElement *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v40 + 72)
                                                                                            + 288))(*(_QWORD *)(v40 + 72));
    if (v41 >= 4294967300.0)
    {
      LODWORD(v40) = -1;
    }
    else if (v41 <= 0.0)
    {
      LODWORD(v40) = 0;
    }
    else
    {
      LODWORD(v40) = v41;
    }
  }
  v38 = (float)v37;
  v39 = (float)v40;
LABEL_58:
  v143 = __PAIR64__(LODWORD(v39), LODWORD(v38));
  if (*((float *)v4 + 15) != v38 || *((float *)v4 + 16) != v39)
  {
    v43 = *((_QWORD *)v4 + 3);
    if (v43)
    {
      v44 = *(_QWORD *)(v43 + 1824);
      if (v44)
      {
        v45 = *(_QWORD *)(v43 + 1832);
        v144[0] = "VideoPresentationModelVideoElement";
        v144[1] = 35;
        v144[2] = "setVideoDimensions";
        v144[3] = v45;
        v46 = *((_QWORD *)v4 + 6);
        v141 = v46 ? *(_DWORD *)(v46 - 12) : 0;
        if (*(_BYTE *)(v44 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v144);
          WebCore::FloatSize::toJSONObject((WebCore::FloatSize *)&v143, (uint64_t *)&buf);
          WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
          v47 = (_DWORD *)buf;
          *(_QWORD *)&buf = 0;
          if (v47)
          {
            if (*v47 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v47;
          }
          WTF::String::String((WTF::String *)&v148, ", clients=");
          WTF::String::number((WTF::String *)v141);
          *(_QWORD *)&buf = v150;
          v145 = v149;
          v152 = v147;
          v153 = v148;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v145, (uint64_t *)&v153, (uint64_t *)&v152, &v151);
          if (!v151)
            goto LABEL_265;
          v49 = v147;
          v147 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v48);
            else
              *(_DWORD *)v49 -= 2;
          }
          v50 = v148;
          v148 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v48);
            else
              *(_DWORD *)v50 -= 2;
          }
          v51 = v149;
          v149 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v48);
            else
              *(_DWORD *)v51 -= 2;
          }
          v52 = v150;
          v150 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v48);
            else
              *(_DWORD *)v52 -= 2;
          }
          v53 = qword_1ECE7C248;
          v54 = os_log_type_enabled((os_log_t)qword_1ECE7C248, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v54)
          {
            WTF::String::utf8();
            v55 = v145 ? (char *)v145 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v55;
            _os_log_impl(&dword_1940B8000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v54 = (uint64_t)v145;
            v145 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 1)
                v54 = WTF::fastFree((WTF *)v54, a2);
              else
                --*(_DWORD *)v54;
            }
          }
          if (WebCore::LogFullscreen)
          {
            v56 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v57 = *v56;
              if ((v57 & 1) != 0)
                break;
              v58 = __ldaxr(v56);
              if (v58 == v57)
              {
                if (!__stxr(v57 | 1, v56))
                {
                  v59 = WTF::Logger::observers((WTF::Logger *)v54);
                  v60 = *(unsigned int *)(v59 + 12);
                  if ((_DWORD)v60)
                  {
                    v61 = *(uint64_t **)v59;
                    v140 = *(_QWORD *)v59 + 8 * v60;
                    do
                    {
                      v62 = *v61;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v144);
                      LODWORD(v155) = 1;
                      WebCore::FloatSize::toJSONObject((WebCore::FloatSize *)&v143, (uint64_t *)&v153);
                      WTF::JSONImpl::Value::toJSONString(v153);
                      v63 = v153;
                      v153 = 0;
                      if (v63)
                      {
                        if (*(_DWORD *)v63 == 1)
                          WTF::JSONImpl::Value::operator delete();
                        else
                          --*(_DWORD *)v63;
                      }
                      v157 = 0;
                      WTF::String::String((WTF::String *)&v158, ", clients=");
                      v159 = 0;
                      WTF::String::number((WTF::String *)v141);
                      v145 = 0;
                      v146 = 0;
                      v64 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                      LODWORD(v146) = 4;
                      v145 = v64;
                      v65 = HIDWORD(v146);
                      *((_DWORD *)v64 + 4 * HIDWORD(v146)) = buf;
                      v66 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v64 + 2 * v65 + 1) = v66;
                      *((_DWORD *)v64 + 4 * (v65 + 1)) = (_DWORD)v155;
                      v67 = v156;
                      if (v156)
                        *(_DWORD *)v156 += 2;
                      *((_QWORD *)v64 + 2 * (v65 + 1) + 1) = v67;
                      *((_DWORD *)v64 + 4 * (v65 + 2)) = v157;
                      v68 = v158;
                      if (v158)
                        *(_DWORD *)v158 += 2;
                      *((_QWORD *)v64 + 2 * (v65 + 2) + 1) = v68;
                      *((_DWORD *)v64 + 4 * (v65 + 3)) = v159;
                      v69 = v160;
                      if (v160)
                        *(_DWORD *)v160 += 2;
                      *((_QWORD *)v64 + 2 * (v65 + 3) + 1) = v69;
                      HIDWORD(v146) = v65 + 4;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v62 + 16))(v62, &WebCore::LogFullscreen, 0, &v145);
                      v70 = v145;
                      if (HIDWORD(v146))
                      {
                        v71 = 16 * HIDWORD(v146);
                        v72 = (WTF::StringImpl **)((char *)v145 + 8);
                        do
                        {
                          v73 = *v72;
                          *v72 = 0;
                          if (v73)
                          {
                            if (*(_DWORD *)v73 == 2)
                              WTF::StringImpl::destroy(v73, a2);
                            else
                              *(_DWORD *)v73 -= 2;
                          }
                          v72 += 2;
                          v71 -= 16;
                        }
                        while (v71);
                        v70 = v145;
                      }
                      if (v70)
                      {
                        v145 = 0;
                        LODWORD(v146) = 0;
                        WTF::fastFree(v70, a2);
                      }
                      v74 = v160;
                      v160 = 0;
                      if (v74)
                      {
                        if (*(_DWORD *)v74 == 2)
                          WTF::StringImpl::destroy(v74, a2);
                        else
                          *(_DWORD *)v74 -= 2;
                      }
                      v75 = v158;
                      v158 = 0;
                      if (v75)
                      {
                        if (*(_DWORD *)v75 == 2)
                          WTF::StringImpl::destroy(v75, a2);
                        else
                          *(_DWORD *)v75 -= 2;
                      }
                      v76 = v156;
                      v156 = 0;
                      if (v76)
                      {
                        if (*(_DWORD *)v76 == 2)
                          WTF::StringImpl::destroy(v76, a2);
                        else
                          *(_DWORD *)v76 -= 2;
                      }
                      v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v77)
                      {
                        if (*(_DWORD *)v77 == 2)
                          WTF::StringImpl::destroy(v77, a2);
                        else
                          *(_DWORD *)v77 -= 2;
                      }
                      ++v61;
                    }
                    while (v61 != (uint64_t *)v140);
                  }
                  v78 = __ldxr(v56);
                  if (v78 == 1)
                  {
                    if (!__stlxr(0, v56))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          this = v151;
          v151 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WebCore::VideoPresentationModelVideoElement *)WTF::StringImpl::destroy(this, a2);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
    }
    *(_QWORD *)((char *)v4 + 60) = v143;
    v79 = *((_QWORD *)v4 + 6);
    if (v79)
    {
      v80 = *(unsigned int *)(v79 - 12);
      if ((_DWORD)v80)
      {
        if (v80 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1951ED8D0);
        }
        v81 = WTF::fastMalloc((WTF *)(8 * v80));
        v83 = (WTF *)v81;
        v84 = v6;
        v85 = *((_QWORD *)v4 + 6);
        if (v85 && *(_DWORD *)(v85 - 12))
        {
          v86 = *(unsigned int *)(v85 - 4);
          if ((_DWORD)v86)
          {
            v87 = 8 * v86;
            v88 = (uint64_t *)*((_QWORD *)v4 + 6);
            while ((unint64_t)(*v88 + 1) <= 1)
            {
              ++v88;
              v87 -= 8;
              if (!v87)
                goto LABEL_174;
            }
          }
          else
          {
            v88 = (uint64_t *)*((_QWORD *)v4 + 6);
          }
          v89 = (uint64_t *)(v85 + 8 * v86);
          if (v88 != v89)
          {
            v142 = (WTF::String *)v81;
            v90 = 0;
            v91 = *v88;
            v92 = 1;
LABEL_161:
            v93 = v92;
            if (v91)
              (*(void (**)(uint64_t))(*(_QWORD *)v91 + 32))(v91);
            v94 = v90 + 1;
            *((_QWORD *)v142 + v90) = v91;
            while (++v88 != v89)
            {
              v91 = *v88;
              if ((unint64_t)(*v88 + 1) > 1)
              {
                v92 = v93 + 1;
                ++v90;
                if (v88 != v89)
                  goto LABEL_161;
                break;
              }
            }
            v83 = v142;
            if (v94)
            {
              v95 = 8 * v93;
              v96 = v142;
              do
              {
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v96 + 56))(*(_QWORD *)v96, (uint64_t)v4 + 60);
                v96 = (WTF::String *)((char *)v96 + 8);
                v95 -= 8;
              }
              while (v95);
              v97 = 8 * v93;
              v98 = v142;
              do
              {
                if (*(_QWORD *)v98)
                  (*(void (**)(_QWORD))(**(_QWORD **)v98 + 40))(*(_QWORD *)v98);
                v98 = (WTF::String *)((char *)v98 + 8);
                v97 -= 8;
              }
              while (v97);
            }
          }
        }
LABEL_174:
        this = (WebCore::VideoPresentationModelVideoElement *)WTF::fastFree(v83, v82);
        v6 = v84;
      }
    }
  }
  if (v6 == v5)
  {
    this = (WebCore::VideoPresentationModelVideoElement *)WebCore::VideoPresentationModelVideoElement::documentVisibilityChanged((unsigned int *)v4, a2);
    goto LABEL_197;
  }
LABEL_176:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v100 = *(_QWORD *)(StatusReg + 736);
  if (!v100 || (v101 = *(WebCore::VideoPresentationModelVideoElement **)(v100 + 96)) == 0)
  {
    this = (WebCore::VideoPresentationModelVideoElement *)WebCore::threadGlobalDataSlow(this);
    v101 = this;
  }
  v102 = *((_QWORD *)v101 + 5);
  if (!v102)
  {
    this = (WebCore::VideoPresentationModelVideoElement *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v101);
    v102 = *((_QWORD *)v101 + 5);
  }
  if (*(_QWORD *)a2 == *(_QWORD *)(v102 + 2248))
    this = (WebCore::VideoPresentationModelVideoElement *)WebCore::VideoPresentationModelVideoElement::documentVisibilityChanged((unsigned int *)v4, a2);
  v103 = *(_QWORD *)(StatusReg + 736);
  if (!v103 || (v104 = *(WebCore::VideoPresentationModelVideoElement **)(v103 + 96)) == 0)
  {
    this = (WebCore::VideoPresentationModelVideoElement *)WebCore::threadGlobalDataSlow(this);
    v104 = this;
  }
  v105 = *((_QWORD *)v104 + 5);
  if (!v105)
  {
    this = (WebCore::VideoPresentationModelVideoElement *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v104);
    v105 = *((_QWORD *)v104 + 5);
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(v105 + 1120))
  {
    v106 = *(_QWORD *)(StatusReg + 736);
    if (!v106 || (v107 = *(WebCore::VideoPresentationModelVideoElement **)(v106 + 96)) == 0)
    {
      this = (WebCore::VideoPresentationModelVideoElement *)WebCore::threadGlobalDataSlow(this);
      v107 = this;
    }
    v108 = *((_QWORD *)v107 + 5);
    if (!v108)
    {
      this = (WebCore::VideoPresentationModelVideoElement *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v107);
      v108 = *((_QWORD *)v107 + 5);
    }
    if (*(_QWORD *)a2 != *(_QWORD *)(v108 + 1160))
      return;
  }
LABEL_197:
  v109 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v109 || (v110 = *(_QWORD *)(v109 + 96)) == 0)
    v110 = WebCore::threadGlobalDataSlow(this);
  v111 = *(_QWORD *)(v110 + 40);
  if (!v111)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v110);
    v111 = *(_QWORD *)(v110 + 40);
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(v111 + 1160))
  {
    v112 = *((_QWORD *)v4 + 3);
    if (!v112)
    {
      v116 = 0;
      goto LABEL_209;
    }
    v113 = *(_QWORD *)(v112 + 1136);
    if (v113)
    {
      v114 = *(unsigned __int8 **)v113;
      if (__ldaxr(*(unsigned __int8 **)v113))
      {
        __clrex();
      }
      else if (!__stxr(1u, v114))
      {
        goto LABEL_212;
      }
      MEMORY[0x19AEA534C](v114);
LABEL_212:
      ++*((_QWORD *)v114 + 1);
      v118 = __ldxr(v114);
      if (v118 == 1)
      {
        if (!__stlxr(0, v114))
          goto LABEL_217;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v114);
LABEL_217:
      v119 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v113 + 72) + 1152))(*(_QWORD *)(v113 + 72));
      v120 = v119;
      v116 = v119 != 0;
      v117 = v119 & 0xFFFFFFFFFFFFFF00;
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v113);
      v112 = v120;
      goto LABEL_218;
    }
  }
  v116 = 0;
  v112 = 0;
LABEL_209:
  v117 = 0;
LABEL_218:
  v121 = v117 | v112;
  if (v116 && *((_BYTE *)v4 + 128))
  {
    if (*((_QWORD *)v4 + 15) == v121)
      return;
  }
  else if (v116 == (*((_BYTE *)v4 + 128) != 0))
  {
    return;
  }
  *((_QWORD *)v4 + 15) = v121;
  *((_BYTE *)v4 + 128) = v116;
  v122 = *((_QWORD *)v4 + 6);
  if (v122)
  {
    v123 = *(unsigned int *)(v122 - 12);
    if ((_DWORD)v123)
    {
      if (!(v123 >> 29))
      {
        v125 = (WTF *)WTF::fastMalloc((WTF *)(8 * v123));
        v126 = *((_QWORD *)v4 + 6);
        if (v126 && *(_DWORD *)(v126 - 12))
        {
          v127 = *(unsigned int *)(v126 - 4);
          if ((_DWORD)v127)
          {
            v128 = 8 * v127;
            v129 = (uint64_t *)*((_QWORD *)v4 + 6);
            while ((unint64_t)(*v129 + 1) <= 1)
            {
              ++v129;
              v128 -= 8;
              if (!v128)
                goto LABEL_249;
            }
          }
          else
          {
            v129 = (uint64_t *)*((_QWORD *)v4 + 6);
          }
          v130 = (uint64_t *)(v126 + 8 * v127);
          if (v129 != v130)
          {
            v131 = 0;
            v132 = *v129;
            v133 = 1;
LABEL_236:
            v134 = v133;
            if (v132)
              (*(void (**)(uint64_t))(*(_QWORD *)v132 + 32))(v132);
            v135 = v131 + 1;
            *((_QWORD *)v125 + v131) = v132;
            while (++v129 != v130)
            {
              v132 = *v129;
              if ((unint64_t)(*v129 + 1) > 1)
              {
                v133 = v134 + 1;
                ++v131;
                if (v129 != v130)
                  goto LABEL_236;
                break;
              }
            }
            if (v135)
            {
              v136 = 8 * v134;
              v137 = v125;
              do
              {
                (*(void (**)(_QWORD, unint64_t, _BOOL8))(**(_QWORD **)v137 + 104))(*(_QWORD *)v137, v121, v116);
                v137 = (WTF *)((char *)v137 + 8);
                v136 -= 8;
              }
              while (v136);
              v138 = 8 * v134;
              v139 = v125;
              do
              {
                if (*(_QWORD *)v139)
                  (*(void (**)(_QWORD))(**(_QWORD **)v139 + 40))(*(_QWORD *)v139);
                v139 = (WTF *)((char *)v139 + 8);
                v138 -= 8;
              }
              while (v138);
            }
          }
        }
LABEL_249:
        WTF::fastFree(v125, v124);
        return;
      }
LABEL_265:
      __break(0xC471u);
      JUMPOUT(0x1951ED8C0);
    }
  }
}

void sub_1951ED8DC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,int a23,int a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  unsigned int v29;
  uint64_t v31;
  WTF *v32;

  if (v29)
  {
    v31 = 8 * v29;
    v32 = a16;
    do
    {
      if (*(_QWORD *)v32)
        (*(void (**)(_QWORD))(**(_QWORD **)v32 + 40))(*(_QWORD *)v32);
      v32 = (WTF *)((char *)v32 + 8);
      v31 -= 8;
    }
    while (v31);
  }
  WTF::fastFree(a16, a2);
  _Unwind_Resume(a1);
}

WebCore::VideoPresentationModelVideoElement *WebCore::VideoPresentationModelVideoElement::VideoPresentationModelVideoElement(WebCore::VideoPresentationModelVideoElement *this)
{
  uint64_t v2;

  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_19689B170;
  *(_QWORD *)(v2 + 24) = this;
  *(_QWORD *)this = off_1E3348210;
  *((_QWORD *)this + 1) = v2;
  WebCore::VideoPresentationModelVideoElement::VideoListener::create(this, (uint64_t *)this + 2);
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 256;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 17) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  return this;
}

{
  uint64_t v2;

  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_19689B170;
  *(_QWORD *)(v2 + 24) = this;
  *(_QWORD *)this = off_1E3348210;
  *((_QWORD *)this + 1) = v2;
  WebCore::VideoPresentationModelVideoElement::VideoListener::create(this, (uint64_t *)this + 2);
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 256;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 17) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  return this;
}

uint64_t WebCore::VideoPresentationModelVideoElement::VideoListener::create@<X0>(WebCore::VideoPresentationModelVideoElement::VideoListener *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  result = WTF::fastMalloc((WTF *)0x28);
  v6 = result;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 3;
  *(_QWORD *)result = off_1E33481B8;
  *(_QWORD *)(result + 8) = 0;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v7);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_13:
  *(_QWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 32) = this;
  *a2 = v6;
  return result;
}

void sub_1951EDDB4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *((_QWORD *)v2 + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)v2 + 1) = 0;
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::VideoPresentationModelVideoElement::~VideoPresentationModelVideoElement(WebCore::VideoPresentationModelVideoElement *this)
{
  void *v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const void *v16;
  uint64_t v17;
  _DWORD *v18;

  WebCore::VideoPresentationModelVideoElement::cleanVideoListeners((uint64_t)this);
  v3 = *((unsigned int *)this + 29);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 13);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 13);
  if (v7)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v7, v2);
  }
  v8 = *((unsigned int *)this + 25);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD **)*((_QWORD *)this + 11);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 11);
  if (v12)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v12, v2);
  }
  v13 = *((_QWORD *)this + 6);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v14)
    {
      v15 = (_QWORD *)*((_QWORD *)this + 6);
      do
      {
        if ((unint64_t)(*v15 + 1) >= 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v15 + 40))(*v15);
        ++v15;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), v2);
  }
  v16 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
    CFRelease(v16);
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v2);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  v18 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v18)
  {
    if (v18[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[4];
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::VideoPresentationModelVideoElement::~VideoPresentationModelVideoElement(this);
  WTF::fastFree(v1, v2);
}

void sub_1951EE038(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const void *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;

  v4 = *(unsigned int *)(v2 + 116);
  if ((_DWORD)v4)
  {
    v14 = *(_DWORD ***)(v2 + 104);
    v15 = 8 * v4;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (v16[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
        else
          --v16[4];
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v5 = *(WTF **)(v2 + 104);
  if (v5)
  {
    *(_QWORD *)(v2 + 104) = 0;
    *(_DWORD *)(v2 + 112) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(unsigned int *)(v2 + 100);
  if ((_DWORD)v6)
  {
    v17 = *(_DWORD ***)(v2 + 88);
    v18 = 8 * v6;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
      {
        if (v19[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
        else
          --v19[4];
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  v7 = *(WTF **)(v2 + 88);
  if (v7)
  {
    *(_QWORD *)(v2 + 88) = 0;
    *(_DWORD *)(v2 + 96) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_QWORD *)(v2 + 48);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)(v2 + 48);
      do
      {
        if ((unint64_t)(*v10 + 1) >= 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 40))(*v10);
        ++v10;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v11 = *(const void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v13 = *(_DWORD **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v13)
  {
    if (v13[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[4];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::VideoPresentationModelVideoElement::cleanVideoListeners(uint64_t this)
{
  uint64_t v1;
  WebCore *v2;
  WebCore::EventListener *v3;
  WebCore *v4;
  WebCore::EventListener *v5;
  WebCore *v6;
  WebCore::EventListener *v7;
  WebCore *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char v15;
  unsigned __int8 v16;

  if (*(_BYTE *)(this + 40))
  {
    v1 = this;
    *(_BYTE *)(this + 40) = 0;
    if (*(_QWORD *)(this + 24))
    {
      WebCore::VideoPresentationModelVideoElement::observedEventNames((WebCore::EventNames **)this);
      v3 = *(WebCore::EventListener **)(v1 + 16);
      v2 = *(WebCore **)(v1 + 24);
      v16 = 0;
      WebCore::HTMLMediaElement::removeEventListener(v2, (WTF::StringImpl **)&qword_1ECE81848, v3, &v16);
      v5 = *(WebCore::EventListener **)(v1 + 16);
      v4 = *(WebCore **)(v1 + 24);
      v16 = 0;
      WebCore::HTMLMediaElement::removeEventListener(v4, &qword_1ECE81850, v5, &v16);
      v7 = *(WebCore::EventListener **)(v1 + 16);
      v6 = *(WebCore **)(v1 + 24);
      v16 = 0;
      v8 = (WebCore *)WebCore::HTMLMediaElement::removeEventListener(v6, (WTF::StringImpl **)&qword_1ECE81858, v7, &v16);
      if ((byte_1ECE81831 & 1) == 0)
      {
        v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
          v12 = WebCore::threadGlobalDataSlow(v8);
        v13 = *(_QWORD *)(v12 + 40);
        if (!v13)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
          v13 = *(_QWORD *)(v12 + 40);
        }
        v14 = *(_DWORD **)(v13 + 2248);
        if (v14)
          *v14 += 2;
        qword_1ECE81838 = v14;
        byte_1ECE81831 = 1;
      }
      v9 = *(_QWORD *)(v1 + 16);
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 40) + 8);
      v15 = 0;
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, char *))(*(_QWORD *)v10 + 32))(v10, &qword_1ECE81838, v9, &v15);
    }
  }
  return this;
}

WebCore::EventNames **WebCore::VideoPresentationModelVideoElement::observedEventNames(WebCore::EventNames **this)
{
  unint64_t StatusReg;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  if ((_MergedGlobals_121 & 1) == 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v2 = *(_QWORD *)(StatusReg + 736);
    if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    {
      this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
      v3 = (uint64_t)this;
    }
    v4 = *(_QWORD *)(v3 + 40);
    if (!v4)
    {
      this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
      v4 = *(_QWORD *)(v3 + 40);
    }
    v5 = *(_DWORD **)(v4 + 1696);
    if (v5)
      *v5 += 2;
    v6 = *(_QWORD *)(StatusReg + 736);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    {
      this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
      v7 = (uint64_t)this;
    }
    v8 = *(_QWORD *)(v7 + 40);
    if (!v8)
    {
      this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
      v8 = *(_QWORD *)(v7 + 40);
    }
    v9 = *(_DWORD **)(v8 + 1160);
    if (v9)
      *v9 += 2;
    v10 = *(_QWORD *)(StatusReg + 736);
    if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    {
      this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
      v11 = (uint64_t)this;
    }
    v12 = *(_QWORD *)(v11 + 40);
    if (!v12)
    {
      this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
      v12 = *(_QWORD *)(v11 + 40);
    }
    v13 = *(_DWORD **)(v12 + 1120);
    if (v13)
      *v13 += 2;
    qword_1ECE81848 = (uint64_t)v5;
    unk_1ECE81850 = v9;
    qword_1ECE81858 = (uint64_t)v13;
    _MergedGlobals_121 = 1;
  }
  return this;
}

void WebCore::VideoPresentationModelVideoElement::setVideoElement(WebCore::VideoPresentationModelVideoElement *this, WebCore::HTMLVideoElement *a2)
{
  WebCore::HTMLVideoElement *v2;
  WebCore::HTMLVideoElement *v3;
  char *v5;
  const char *v6;
  void *v7;
  uint64_t Ref;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::HTMLMediaElement *v13;
  WebCore *v14;
  void *v15;
  WebCore::AbortSignal *v16;
  WebCore *v17;
  WebCore::HTMLMediaElement *v18;
  WebCore *v19;
  void *v20;
  WebCore::AbortSignal *v21;
  WebCore *v22;
  WebCore::HTMLMediaElement *v23;
  WebCore *v24;
  void *v25;
  WebCore::AbortSignal *v26;
  WebCore *v27;
  WebCore *v28;
  uint64_t v29;
  void *v30;
  WebCore::AbortSignal *v31;
  WebCore *v32;
  bmalloc::api *v33;
  void *v34;
  bmalloc::api *v35;
  void *v36;
  bmalloc::api *v37;
  void *v38;
  bmalloc::api *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  WebCore *v45;
  const char *v46;
  WebCore::AbortSignal *v47;
  const char *v48;
  uint64_t v49;

  v2 = (WebCore::HTMLVideoElement *)*((_QWORD *)this + 3);
  if (v2 == a2)
    return;
  v3 = a2;
  if (v2)
  {
    if (*((_QWORD *)v2 + 138))
    {
      v5 = (char *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v5 = off_1E3348550;
      v46 = v5;
      WebCore::HTMLMediaElement::setVideoFullscreenLayer((uint64_t)v2, 0, &v46);
      v6 = v46;
      v46 = 0;
      if (v6)
        (*(void (**)(const char *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  WebCore::VideoPresentationModelVideoElement::cleanVideoListeners((uint64_t)this);
  Ref = *((_QWORD *)this + 3);
  if (v3 || !Ref)
  {
    if (v3)
      *((_DWORD *)v3 + 6) += 2;
  }
  else
  {
    v9 = *(_QWORD *)(Ref + 1824);
    if (!v9)
    {
      *((_QWORD *)this + 3) = 0;
LABEL_14:
      if (*(_DWORD *)(Ref + 24) == 2)
      {
        if ((*(_WORD *)(Ref + 30) & 0x400) == 0)
        {
          Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)Ref, v7);
          v3 = (WebCore::HTMLVideoElement *)*((_QWORD *)this + 3);
        }
      }
      else
      {
        *(_DWORD *)(Ref + 24) -= 2;
      }
      goto LABEL_16;
    }
    v10 = *(_QWORD *)(Ref + 1832);
    v46 = "VideoPresentationModelVideoElement";
    v47 = (WebCore::AbortSignal *)35;
    v48 = "setVideoElement";
    v49 = v10;
    if (*(_BYTE *)(v9 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [8]>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v46, "-> null");
      Ref = *((_QWORD *)this + 3);
    }
  }
  *((_QWORD *)this + 3) = v3;
  if (Ref)
    goto LABEL_14;
LABEL_16:
  if (v3)
  {
    v11 = *((_QWORD *)v3 + 228);
    if (!v11
      || (v12 = *((_QWORD *)v3 + 229),
          v46 = "VideoPresentationModelVideoElement",
          v47 = (WebCore::AbortSignal *)35,
          v48 = "setVideoElement",
          v49 = v12,
          !*(_BYTE *)(v11 + 12))
      || (Ref = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v46), *((_QWORD *)this + 3)))
    {
      WebCore::VideoPresentationModelVideoElement::observedEventNames((WebCore::EventNames **)Ref);
      v14 = (WebCore *)*((_QWORD *)this + 2);
      v13 = (WebCore::HTMLMediaElement *)*((_QWORD *)this + 3);
      ++*((_DWORD *)v14 + 4);
      v45 = v14;
      LOBYTE(v46) = 0;
      *(_WORD *)((char *)&v46 + 1) = 0;
      BYTE3(v46) = 0;
      v47 = 0;
      WebCore::HTMLMediaElement::addEventListener(v13, (WTF::StringImpl **)&qword_1ECE81848, (uint64_t *)&v45, (unsigned __int8 *)&v46);
      v16 = v47;
      v47 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v16, v15);
          bmalloc::api::isoDeallocate(v33, v34);
        }
        else
        {
          --*((_DWORD *)v16 + 6);
        }
      }
      v17 = v45;
      v45 = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 4) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v17 + 8))(v17);
        else
          --*((_DWORD *)v17 + 4);
      }
      v19 = (WebCore *)*((_QWORD *)this + 2);
      v18 = (WebCore::HTMLMediaElement *)*((_QWORD *)this + 3);
      ++*((_DWORD *)v19 + 4);
      v45 = v19;
      LOBYTE(v46) = 0;
      *(_WORD *)((char *)&v46 + 1) = 0;
      BYTE3(v46) = 0;
      v47 = 0;
      WebCore::HTMLMediaElement::addEventListener(v18, &qword_1ECE81850, (uint64_t *)&v45, (unsigned __int8 *)&v46);
      v21 = v47;
      v47 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v21, v20);
          bmalloc::api::isoDeallocate(v35, v36);
        }
        else
        {
          --*((_DWORD *)v21 + 6);
        }
      }
      v22 = v45;
      v45 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 4) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v22 + 8))(v22);
        else
          --*((_DWORD *)v22 + 4);
      }
      v24 = (WebCore *)*((_QWORD *)this + 2);
      v23 = (WebCore::HTMLMediaElement *)*((_QWORD *)this + 3);
      ++*((_DWORD *)v24 + 4);
      v45 = v24;
      LOBYTE(v46) = 0;
      *(_WORD *)((char *)&v46 + 1) = 0;
      BYTE3(v46) = 0;
      v47 = 0;
      WebCore::HTMLMediaElement::addEventListener(v23, (WTF::StringImpl **)&qword_1ECE81858, (uint64_t *)&v45, (unsigned __int8 *)&v46);
      v26 = v47;
      v47 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v26, v25);
          bmalloc::api::isoDeallocate(v37, v38);
        }
        else
        {
          --*((_DWORD *)v26 + 6);
        }
      }
      v27 = v45;
      v45 = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 4) == 1)
          v27 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v27 + 8))(v27);
        else
          --*((_DWORD *)v27 + 4);
      }
      *((_BYTE *)this + 40) = 1;
      if ((byte_1ECE81831 & 1) == 0)
      {
        v41 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v41 || (v42 = *(_QWORD *)(v41 + 96)) == 0)
          v42 = WebCore::threadGlobalDataSlow(v27);
        v43 = *(_QWORD *)(v42 + 40);
        if (!v43)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v42);
          v43 = *(_QWORD *)(v42 + 40);
        }
        v44 = *(_DWORD **)(v43 + 2248);
        if (v44)
          *v44 += 2;
        qword_1ECE81838 = v44;
        byte_1ECE81831 = 1;
      }
      v28 = (WebCore *)*((_QWORD *)this + 2);
      v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
      ++*((_DWORD *)v28 + 4);
      v45 = v28;
      LOBYTE(v46) = 0;
      *(_WORD *)((char *)&v46 + 1) = 0;
      BYTE3(v46) = 0;
      v47 = 0;
      (*(void (**)(uint64_t, _QWORD *, WebCore **, const char **))(*(_QWORD *)v29 + 24))(v29, &qword_1ECE81838, &v45, &v46);
      v31 = v47;
      v47 = 0;
      if (v31)
      {
        if (*((_DWORD *)v31 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v31, v30);
          bmalloc::api::isoDeallocate(v39, v40);
        }
        else
        {
          --*((_DWORD *)v31 + 6);
        }
      }
      v32 = v45;
      v45 = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 4) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v32 + 8))(v32);
        else
          --*((_DWORD *)v32 + 4);
      }
    }
  }
  if ((byte_1ECE81832 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE81840 = (uint64_t)v46;
    byte_1ECE81832 = 1;
  }
  WebCore::VideoPresentationModelVideoElement::updateForEventName(this, (const WTF::AtomString *)&qword_1ECE81840);
}

void sub_1951EE87C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, uint64_t a11, WebCore::AbortSignal *a12)
{
  bmalloc::api *v13;
  void *v14;

  if (a12)
  {
    if (*((_DWORD *)a12 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(a12, a2);
      bmalloc::api::isoDeallocate(v13, v14);
    }
    else
    {
      --*((_DWORD *)a12 + 6);
    }
  }
  if (a10)
  {
    if (a10[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
    else
      --a10[4];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::VideoPresentationModelVideoElement::loggerPtr(WebCore::VideoPresentationModelVideoElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 1824);
  else
    return 0;
}

uint64_t WebCore::VideoPresentationModelVideoElement::logIdentifier(WebCore::VideoPresentationModelVideoElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 1832);
  else
    return 0;
}

unsigned int *WebCore::VideoPresentationModelVideoElement::documentVisibilityChanged(unsigned int *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = this;
    v4 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v4 + 2;
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
    v6 = *(_QWORD *)(v5 + 528);
    v10 = !v6
       || (v7 = *(_QWORD *)(v6 + 8)) == 0
       || (v8 = *(_QWORD *)(v7 + 24)) == 0
       || (v9 = *(_QWORD *)(v8 + 8)) == 0
       || *(_BYTE *)(v5 + 3437)
       || (*(_WORD *)(v9 + 658) & 4) == 0;
    v11 = !v10;
    if (*((unsigned __int8 *)this + 57) != v11)
    {
      *((_BYTE *)this + 57) = v11;
      v12 = *((_QWORD *)this + 6);
      if (v12)
      {
        v13 = *(unsigned int *)(v12 - 12);
        if ((_DWORD)v13)
        {
          if (v13 >> 29)
          {
            __break(0xC471u);
            return this;
          }
          v15 = (WTF *)WTF::fastMalloc((WTF *)(8 * v13));
          v16 = *((_QWORD *)v3 + 6);
          if (v16 && *(_DWORD *)(v16 - 12))
          {
            v17 = *(unsigned int *)(v16 - 4);
            if ((_DWORD)v17)
            {
              v18 = 8 * v17;
              v19 = (uint64_t *)*((_QWORD *)v3 + 6);
              while ((unint64_t)(*v19 + 1) <= 1)
              {
                ++v19;
                v18 -= 8;
                if (!v18)
                  goto LABEL_36;
              }
            }
            else
            {
              v19 = (uint64_t *)*((_QWORD *)v3 + 6);
            }
            v20 = (uint64_t *)(v16 + 8 * v17);
            if (v19 != v20)
            {
              v21 = 0;
              v22 = *v19;
              v23 = 1;
LABEL_23:
              v24 = v23;
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
              v25 = v21 + 1;
              *((_QWORD *)v15 + v21) = v22;
              while (++v19 != v20)
              {
                v22 = *v19;
                if ((unint64_t)(*v19 + 1) > 1)
                {
                  v23 = v24 + 1;
                  ++v21;
                  if (v19 != v20)
                    goto LABEL_23;
                  break;
                }
              }
              if (v25)
              {
                v26 = 0;
                do
                {
                  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)((char *)v15 + v26) + 112))(*(_QWORD *)((char *)v15 + v26), *((unsigned __int8 *)v3 + 57));
                  v26 += 8;
                }
                while (8 * v24 != v26);
                v27 = 8 * v24;
                v28 = v15;
                do
                {
                  if (*(_QWORD *)v28)
                    (*(void (**)(_QWORD))(**(_QWORD **)v28 + 40))(*(_QWORD *)v28);
                  v28 = (WTF *)((char *)v28 + 8);
                  v27 -= 8;
                }
                while (v27);
              }
            }
          }
LABEL_36:
          this = (unsigned int *)WTF::fastFree(v15, v14);
          v4 = *(_DWORD *)(v2 + 24) - 2;
        }
      }
    }
    if (v4)
    {
      *(_DWORD *)(v2 + 24) = v4;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
  }
  return this;
}

void sub_1951EEB14(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  uint64_t v6;
  WTF *v7;
  void *v8;

  if (v4)
  {
    v6 = 8 * v4;
    v7 = v3;
    do
    {
      if (*(_QWORD *)v7)
        (*(void (**)(_QWORD))(**(_QWORD **)v7 + 40))(*(_QWORD *)v7);
      v7 = (WTF *)((char *)v7 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  WTF::fastFree(v3, a2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v8);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *WebCore::VideoPresentationModelVideoElement::willExitFullscreen(unsigned __int8 *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;
  _QWORD v9[4];

  v1 = (_QWORD *)*((_QWORD *)this + 3);
  if (v1)
  {
    v2 = v1[228];
    if (!v2)
      goto LABEL_5;
    v3 = v1[229];
    v9[0] = "VideoPresentationModelVideoElement";
    v9[1] = 35;
    v9[2] = "willExitFullscreen";
    v9[3] = v3;
    if (!*(_BYTE *)(v2 + 12)
      || (v4 = this,
          this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9), (v1 = (_QWORD *)*((_QWORD *)v4 + 3)) != 0))
    {
LABEL_5:
      v5 = v1[142];
      if (v5)
      {
        v6 = *(unsigned __int8 **)v5;
        if (__ldaxr(*(unsigned __int8 **)v5))
        {
          __clrex();
        }
        else if (!__stxr(1u, v6))
        {
          goto LABEL_10;
        }
        MEMORY[0x19AEA534C](v6);
LABEL_10:
        ++*((_QWORD *)v6 + 1);
        v8 = __ldxr(v6);
        if (v8 == 1)
        {
          if (!__stlxr(0, v6))
            goto LABEL_15;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_15:
        (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 112))(*(_QWORD *)(v5 + 72));
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
      }
    }
  }
  return this;
}

unsigned __int8 *WebCore::VideoPresentationModelVideoElement::createVideoFullscreenLayer@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  _QWORD v11[4];

  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (!v3)
    goto LABEL_8;
  v4 = v3[228];
  if (v4)
  {
    v5 = v3[229];
    v11[0] = "VideoPresentationModelVideoElement";
    v11[1] = 35;
    v11[2] = "createVideoFullscreenLayer";
    v11[3] = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      v6 = this;
      this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11);
      v3 = (_QWORD *)*((_QWORD *)v6 + 3);
      if (!v3)
        goto LABEL_8;
    }
  }
  v7 = v3[142];
  if (!v7)
  {
LABEL_8:
    *a2 = 0;
    return this;
  }
  v8 = *(unsigned __int8 **)v7;
  if (__ldaxr(*(unsigned __int8 **)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_11:
  ++*((_QWORD *)v8 + 1);
  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
      goto LABEL_16;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_16:
  (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 72) + 96))(*(_QWORD *)(v7 + 72));
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
}

void WebCore::VideoPresentationModelVideoElement::setVideoFullscreenLayer(uint64_t a1, CFTypeRef cf, _QWORD *a3)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  if (*(CFTypeRef *)(a1 + 32) == cf)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  }
  else
  {
    v4 = (void *)cf;
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 1824);
      if (v7)
      {
        v8 = *(_QWORD *)(v6 + 1832);
        v11 = "VideoPresentationModelVideoElement";
        v12 = 35;
        v13 = "setVideoFullscreenLayer";
        v14 = v8;
        if (*(_BYTE *)(v7 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v11);
      }
    }
    if (v4)
      CFRetain(v4);
    v9 = *(const void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    if (v9)
    {
      CFRelease(v9);
      v4 = *(void **)(a1 + 32);
    }
    objc_msgSend(v4, "setAnchorPoint:", 0.5, 0.5, v11, v12, v13, v14);
    objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(float *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76), *(float *)(a1 + 80));
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
      WebCore::HTMLMediaElement::setVideoFullscreenLayer(v10, *(CFTypeRef *)(a1 + 32), a3);
    else
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  }
}

_QWORD *WebCore::VideoPresentationModelVideoElement::waitForPreparedForInlineThen(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, a2, a3, a4);
  v6 = *(_QWORD *)(v5 + 1824);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 1832);
    v15 = "VideoPresentationModelVideoElement";
    v16 = 35;
    v17 = "waitForPreparedForInlineThen";
    v18 = v7;
    if (*(_BYTE *)(v6 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
      v5 = *(_QWORD *)(a1 + 24);
      if (!v5)
        return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, a2, a3, a4);
    }
  }
  v9 = *(_QWORD *)(v5 + 1824);
  v10 = *(_QWORD *)(v5 + 1832);
  v15 = "HTMLMediaElement";
  v16 = 17;
  v17 = "waitForPreparedForInlineThen";
  v18 = v10;
  if (*(_BYTE *)(v9 + 12))
  {
    if (WebCore::LogMedia)
      v11 = byte_1ECE7C490 >= 3u;
    else
      v11 = 0;
    if (v11)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v15);
  }
  if (*(_BYTE *)(v5 + 1085))
  {
    result = (_QWORD *)*a2;
    v13 = 2;
  }
  else
  {
    v14 = *a2;
    *a2 = 0;
    result = *(_QWORD **)(v5 + 1088);
    *(_QWORD *)(v5 + 1088) = v14;
    if (!result)
      return result;
    v13 = 1;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(*result + 8 * v13))(result, a2, a3, a4);
}

void WebCore::VideoPresentationModelVideoElement::requestFullscreenMode(WebCore::VideoPresentationModelVideoElement *this, WTF::String *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  void *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  void *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  char v58;
  _QWORD v59[4];
  WTF::Logger *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  __int128 v68;
  char v69;
  __int128 buf;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    v6 = *(_QWORD *)(v3 + 1824);
    if (v6)
    {
      v7 = *(_QWORD *)(v3 + 1832);
      v59[0] = "VideoPresentationModelVideoElement";
      v59[1] = 35;
      v59[2] = "requestFullscreenMode";
      v59[3] = v7;
      if (*(_BYTE *)(v6 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v59);
        WTF::String::number(a2);
        WTF::String::String((WTF::String *)&v62, ", finishedWithMedia: ");
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v8 = (WTF::StringImpl *)buf;
        *(_QWORD *)&buf = v64;
        v60 = v63;
        v66 = v8;
        v67 = v62;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v60, (uint64_t *)&v67, (uint64_t *)&v66, &v65);
        if (!v65)
        {
          __break(0xC471u);
          return;
        }
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v9);
          else
            *(_DWORD *)v8 -= 2;
        }
        v10 = v62;
        v62 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v9);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = v63;
        v63 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v9);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v64;
        v64 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v9);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = qword_1ECE7C248;
        v14 = os_log_type_enabled((os_log_t)qword_1ECE7C248, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v14)
        {
          WTF::String::utf8();
          v16 = v60 ? (char *)v60 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v16;
          _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v14 = (uint64_t)v60;
          v60 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
              v14 = WTF::fastFree((WTF *)v14, v15);
            else
              --*(_DWORD *)v14;
          }
        }
        if (WebCore::LogFullscreen)
        {
          v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v18 = *v17;
            if ((v18 & 1) != 0)
              break;
            v19 = __ldaxr(v17);
            if (v19 == v18)
            {
              if (!__stxr(v18 | 1, v17))
              {
                v53 = a3;
                v54 = v3;
                v20 = WTF::Logger::observers((WTF::Logger *)v14);
                v21 = *(unsigned int *)(v20 + 12);
                if ((_DWORD)v21)
                {
                  v22 = *(uint64_t **)v20;
                  v55 = *(_QWORD *)v20 + 8 * v21;
                  do
                  {
                    v23 = *v22;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v59);
                    v71 = 0;
                    WTF::String::number((WTF::String *)a2);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, ", finishedWithMedia: ");
                    v75 = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v76 = v67;
                    v60 = 0;
                    v61 = 0;
                    v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                    LODWORD(v61) = 4;
                    v60 = v24;
                    v25 = HIDWORD(v61);
                    *((_DWORD *)v24 + 4 * HIDWORD(v61)) = buf;
                    v26 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                    *((_DWORD *)v24 + 4 * (v25 + 1)) = v71;
                    v27 = v72;
                    if (v72)
                      *(_DWORD *)v72 += 2;
                    *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                    *((_DWORD *)v24 + 4 * (v25 + 2)) = v73;
                    v28 = v74;
                    if (v74)
                      *(_DWORD *)v74 += 2;
                    *((_QWORD *)v24 + 2 * (v25 + 2) + 1) = v28;
                    *((_DWORD *)v24 + 4 * (v25 + 3)) = v75;
                    v29 = v76;
                    if (v76)
                      *(_DWORD *)v76 += 2;
                    *((_QWORD *)v24 + 2 * (v25 + 3) + 1) = v29;
                    HIDWORD(v61) = v25 + 4;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogFullscreen, 0, &v60);
                    v30 = v60;
                    if (HIDWORD(v61))
                    {
                      v31 = 16 * HIDWORD(v61);
                      v32 = (WTF::StringImpl **)((char *)v60 + 8);
                      do
                      {
                        v33 = *v32;
                        *v32 = 0;
                        if (v33)
                        {
                          if (*(_DWORD *)v33 == 2)
                            WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                          else
                            *(_DWORD *)v33 -= 2;
                        }
                        v32 += 2;
                        v31 -= 16;
                      }
                      while (v31);
                      v30 = v60;
                    }
                    if (v30)
                    {
                      v60 = 0;
                      LODWORD(v61) = 0;
                      WTF::fastFree(v30, v15);
                    }
                    v34 = v76;
                    v76 = 0;
                    if (v34)
                    {
                      if (*(_DWORD *)v34 == 2)
                        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v34 -= 2;
                    }
                    v35 = v74;
                    v74 = 0;
                    if (v35)
                    {
                      if (*(_DWORD *)v35 == 2)
                        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v35 -= 2;
                    }
                    v36 = v72;
                    v72 = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v37)
                    {
                      if (*(_DWORD *)v37 == 2)
                        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v37 -= 2;
                    }
                    ++v22;
                  }
                  while (v22 != (uint64_t *)v55);
                }
                v38 = __ldxr(v17);
                if (v38 == 1)
                {
                  v3 = v54;
                  a3 = v53;
                  if (!__stlxr(0, v17))
                    break;
                }
                else
                {
                  __clrex();
                  v3 = v54;
                  a3 = v53;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v39 = v65;
        v65 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v15);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
    }
    v40 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
    LOBYTE(v68) = 0;
    v69 = 0;
    v41 = 1;
    WebCore::UserGestureIndicator::UserGestureIndicator((uint64_t *)&buf, 257, v40, 1, 0, &v68, 1);
    if ((_DWORD)a2 != 1)
    {
      if ((a2 & 2) == 0)
      {
        if ((_DWORD)a2 == 4)
          v42 = 3;
        else
          v42 = 0;
        WebCore::HTMLVideoElement::setPresentationMode((WebCore::HTMLVideoElement *)v3, (void *)v42);
        if (!(_DWORD)a2)
        {
          if (a3)
          {
            v43 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
            if ((*(_WORD *)(v43 + 3358) & 0x10) != 0)
            {
              v44 = *(_QWORD *)(v43 + 696);
              if (v44)
              {
                v45 = *(_QWORD *)(v44 + 120);
                if (!v45)
                {
                  v45 = bmalloc::api::isoAllocate();
                  *(_QWORD *)v45 = 0;
                  *(_DWORD *)(v45 + 8) = 1;
                  v46 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v44);
                  if (v46)
                  {
                    do
                      v48 = __ldaxr(v46);
                    while (__stlxr(v48 + 1, v46));
                  }
                  *(_QWORD *)(v45 + 16) = v46;
                  *(_QWORD *)(v45 + 24) = 0;
                  *(_QWORD *)(v45 + 32) = 0;
                  *(_QWORD *)(v45 + 40) = 0;
                  __dmb(0xAu);
                  v49 = *(_QWORD *)(v45 + 40);
                  *(_QWORD *)(v45 + 40) = 0;
                  if (v49)
                    *(_QWORD *)(v49 + 8) = 3;
                  *(_DWORD *)(v45 + 48) = 0;
                  *(_BYTE *)(v45 + 76) = 0;
                  *(_QWORD *)(v45 + 80) = 0;
                  *(_QWORD *)(v45 + 56) = 0;
                  *(_QWORD *)(v45 + 64) = 0;
                  *(_BYTE *)(v45 + 72) = 0;
                  v50 = *(_QWORD *)(v44 + 120);
                  *(_QWORD *)(v44 + 120) = v45;
                  if (v50)
                  {
                    WTF::RefCounted<WebCore::History>::deref(v50 + 8, v47);
                    v45 = *(_QWORD *)(v44 + 120);
                  }
                }
                WebCore::History::go((WebCore::History *)v45, 0xFFFFFFFFLL, &v56);
                if (v58 && v57)
                {
                  if (*(_DWORD *)v57 == 2)
                    WTF::StringImpl::destroy(v57, v51);
                  else
                    *(_DWORD *)v57 -= 2;
                }
              }
            }
          }
        }
        goto LABEL_99;
      }
      v41 = 2;
    }
    WebCore::HTMLVideoElement::setPresentationMode((WebCore::HTMLVideoElement *)v3, (void *)v41);
LABEL_99:
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&buf);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v52);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

void sub_1951EF768(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WebCore::Node *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,int a25,WTF::StringImpl *a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  uint64_t v29;

  if (a29)
  {
    if (*(_DWORD *)a29 == 2)
      WTF::StringImpl::destroy(a29, a2);
    else
      *(_DWORD *)a29 -= 2;
  }
  if (*(_DWORD *)(v29 + 24) == 2)
  {
    if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v29, a2);
  }
  else
  {
    *(_DWORD *)(v29 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::VideoPresentationModelVideoElement::setVideoLayerFrame(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *result;
  _DWORD v15[2];
  _QWORD v16[4];
  __int128 v17;

  *(_QWORD *)&v17 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  *((_QWORD *)&v17 + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 1824);
    if (v11)
    {
      v12 = *(_QWORD *)(v10 + 1832);
      v16[0] = "VideoPresentationModelVideoElement";
      v16[1] = 35;
      v16[2] = "setVideoLayerFrame";
      v16[3] = v12;
      *(float *)v15 = a4;
      *(float *)&v15[1] = a5;
      if (*(_BYTE *)(v11 + 12))
      {
        if (WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v16, (WebCore::FloatSize *)v15);
      }
    }
  }
  *(_OWORD *)(a1 + 68) = v17;
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", a2, a3, a4, a5);
  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
    return WebCore::HTMLVideoElement::setVideoFullscreenFrame(result, (const WebCore::FloatRect *)&v17);
  return result;
}

unsigned __int8 *WebCore::VideoPresentationModelVideoElement::setVideoSizeFenced(unsigned __int8 *result, float *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v3 = *((_QWORD *)result + 3);
  if (v3)
  {
    v6 = result;
    v7 = *(_QWORD *)(v3 + 1824);
    if (v7)
    {
      v8 = *(_QWORD *)(v3 + 1832);
      v17 = "VideoPresentationModelVideoElement";
      v18 = 35;
      v19 = "setVideoSizeFenced";
      v20 = v8;
      if (*(_BYTE *)(v7 + 12))
      {
        if (WebCore::LogFullscreen && byte_1ECE7C238 >= 3u)
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)&v17, (WebCore::FloatSize *)a2);
          v3 = *((_QWORD *)v6 + 3);
        }
      }
    }
    if (*(float *)(v3 + 1772) == *a2 && *(float *)(v3 + 1776) == a2[1])
      goto LABEL_25;
    *(_QWORD *)(v3 + 1772) = *(_QWORD *)a2;
    v11 = *(_QWORD *)(v3 + 1136);
    if (!v11)
      goto LABEL_25;
    v12 = *(unsigned __int8 **)v11;
    if (__ldaxr(*(unsigned __int8 **)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_19:
    ++*((_QWORD *)v12 + 1);
    v14 = __ldxr(v12);
    if (v14 == 1)
    {
      if (!__stlxr(0, v12))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_24:
    (*(void (**)(_QWORD, float *, uint64_t))(**(_QWORD **)(v11 + 72) + 176))(*(_QWORD *)(v11 + 72), a2, a3);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v11);
LABEL_25:
    v15 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
    v16 = *(_QWORD *)a2;
    v17 = 0;
    v18 = v16;
    return WebCore::HTMLVideoElement::setVideoFullscreenFrame(v15, (const WebCore::FloatRect *)&v17);
  }
  return result;
}

unsigned int *WebCore::VideoPresentationModelVideoElement::setVideoFullscreenFrame(unsigned int *result, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int *v9;
  void *v10;
  _DWORD v11[2];
  _QWORD v12[4];
  _DWORD v13[4];

  *(float *)v13 = a2;
  *(float *)&v13[1] = a3;
  *(float *)&v13[2] = a4;
  *(float *)&v13[3] = a5;
  v5 = *((_QWORD *)result + 3);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 1824);
    if (!v6)
      goto LABEL_10;
    v7 = *(_QWORD *)(v5 + 1832);
    v12[0] = "VideoPresentationModelVideoElement";
    v12[1] = 35;
    v12[2] = "setVideoFullscreenFrame";
    v12[3] = v7;
    *(float *)v11 = a4;
    *(float *)&v11[1] = a5;
    if (!*(_BYTE *)(v6 + 12))
      goto LABEL_10;
    v8 = WebCore::LogFullscreen && byte_1ECE7C238 > 2u;
    if (!v8
      || (v9 = result,
          result = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>((uint64_t)&WebCore::LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v12, (WebCore::FloatSize *)v11), (v5 = *((_QWORD *)v9 + 3)) != 0))
    {
LABEL_10:
      *(_DWORD *)(v5 + 24) += 2;
      result = (unsigned int *)WebCore::HTMLVideoElement::setVideoFullscreenFrame((unsigned __int8 *)v5, (const WebCore::FloatRect *)v13);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v5, v10);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  return result;
}

unsigned __int8 *WebCore::VideoPresentationModelVideoElement::setVideoLayerGravity(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  _QWORD v11[4];
  unsigned __int8 v12;

  v12 = a2;
  v2 = *((_QWORD *)result + 3);
  if (v2)
  {
    v3 = a2;
    v4 = *(_QWORD *)(v2 + 1824);
    if (v4)
    {
      v5 = *(_QWORD *)(v2 + 1832);
      v11[0] = "VideoPresentationModelVideoElement";
      v11[1] = 35;
      v11[2] = "setVideoLayerGravity";
      v11[3] = v5;
      if (*(_BYTE *)(v4 + 12))
      {
        v6 = result;
        result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerVideoGravity>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11, &v12);
        v2 = *((_QWORD *)v6 + 3);
        if (!v2)
          return result;
        v3 = v12;
      }
    }
    *(_BYTE *)(v2 + 1128) = v3;
    v7 = *(_QWORD *)(v2 + 1136);
    if (v7)
    {
      v8 = *(unsigned __int8 **)v7;
      if (__ldaxr(*(unsigned __int8 **)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, v8))
      {
        goto LABEL_11;
      }
      MEMORY[0x19AEA534C](v8);
LABEL_11:
      ++*((_QWORD *)v8 + 1);
      v10 = __ldxr(v8);
      if (v10 == 1)
      {
        if (!__stlxr(0, v8))
          goto LABEL_16;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_16:
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 72) + 128))(*(_QWORD *)(v7 + 72), v3);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
    }
  }
  return result;
}

void WebCore::VideoPresentationModelVideoElement::fullscreenModeChanged(WebCore::VideoPresentationModelVideoElement *this, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10[4];
  unsigned int v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v4 = v2[228];
    if (!v4
      || (v5 = v2[229],
          v10[0] = (uint64_t)"VideoPresentationModelVideoElement",
          v10[1] = 35,
          v10[2] = (uint64_t)"fullscreenModeChanged",
          v10[3] = v5,
          !*(_BYTE *)(v4 + 12))
      || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned int>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v10, &v11), (v2 = (_QWORD *)*((_QWORD *)this + 3)) != 0))
    {
      v6 = *(_QWORD *)(v2[5] + 8);
      LOBYTE(v12) = 0;
      v13 = 0;
      WebCore::UserGestureIndicator::UserGestureIndicator(v10, 257, v6, 1, 0, &v12, 1);
      if (v11 == 4)
        v7 = 3;
      else
        v7 = 0;
      if ((v11 & 2) != 0)
        v8 = 2;
      else
        v8 = v7;
      if (v11 == 1)
        v9 = 1;
      else
        v9 = v8;
      WebCore::HTMLVideoElement::setPresentationMode(*((WebCore::HTMLVideoElement **)this + 3), (void *)v9);
      WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v10);
    }
  }
}

WTF::StringImpl *WebCore::VideoPresentationModelVideoElement::requestRouteSharingPolicyAndContextUID(WebCore::AudioSession *a1, uint64_t *a2)
{
  WebCore::AudioSessionIOS *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = WebCore::AudioSession::sharedSession(a1);
  v4 = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v3 + 56))(v3);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AudioSessionIOS *))(*(_QWORD *)v3 + 64))(&v11, v3);
  v5 = *a2;
  *a2 = 0;
  v6 = v11;
  v11 = 0;
  v12 = v6;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, v4, &v12);
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1951F0028(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  WTF::StringImpl *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v12);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

WebCore::VideoPresentationModelClient *WebCore::VideoPresentationModelVideoElement::addClient(WebCore::VideoPresentationModelVideoElement *this, WebCore::VideoPresentationModelClient *a2)
{
  uint64_t *v2;
  WebCore::VideoPresentationModelClient *result;
  uint64_t v4;
  WebCore::VideoPresentationModelClient *v5;

  v2 = (uint64_t *)((char *)this + 48);
  v5 = a2;
  (*(void (**)(WebCore::VideoPresentationModelClient *))(*(_QWORD *)a2 + 32))(a2);
  WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add(v2, (uint64_t *)&v5, (uint64_t)&v4);
  result = v5;
  if (v5)
    return (WebCore::VideoPresentationModelClient *)(*(uint64_t (**)(WebCore::VideoPresentationModelClient *))(*(_QWORD *)v5 + 40))(v5);
  return result;
}

void sub_1951F00E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 40))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::VideoPresentationModelVideoElement::removeClient(WebCore::VideoPresentationModelVideoElement *this, WebCore::VideoPresentationModelClient *a2)
{
  return WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)this + 6, (uint64_t)a2);
}

uint64_t WebCore::VideoPresentationModelVideoElement::willEnterPictureInPicture(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  _QWORD v23[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 1824);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 1832);
      v23[0] = "VideoPresentationModelVideoElement";
      v23[1] = 35;
      v23[2] = "willEnterPictureInPicture";
      v23[3] = v4;
      if (*(_BYTE *)(v3 + 12))
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v23);
    }
  }
  v5 = *(_QWORD *)(v1 + 48);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 12);
    if ((_DWORD)v6)
    {
      if (v6 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
        v9 = *(_QWORD *)(v1 + 48);
        if (v9 && *(_DWORD *)(v9 - 12))
        {
          v10 = *(unsigned int *)(v9 - 4);
          if ((_DWORD)v10)
          {
            v11 = 8 * v10;
            for (i = *(uint64_t **)(v1 + 48); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v11 -= 8;
              if (!v11)
                return WTF::fastFree(v8, v7);
            }
          }
          else
          {
            i = *(uint64_t **)(v1 + 48);
          }
          v13 = (uint64_t *)(v9 + 8 * v10);
          if (i != v13)
          {
            v14 = 0;
            v15 = *i;
            v16 = 1;
LABEL_18:
            v17 = v16;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
            v18 = v14 + 1;
            *((_QWORD *)v8 + v14) = v15;
            while (++i != v13)
            {
              v15 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                v16 = v17 + 1;
                ++v14;
                if (i != v13)
                  goto LABEL_18;
                break;
              }
            }
            if (v18)
            {
              v19 = 8 * v17;
              v20 = v8;
              do
              {
                (*(void (**)(_QWORD))(**(_QWORD **)v20 + 64))(*(_QWORD *)v20);
                v20 = (WTF *)((char *)v20 + 8);
                v19 -= 8;
              }
              while (v19);
              v21 = 8 * v17;
              v22 = v8;
              do
              {
                if (*(_QWORD *)v22)
                  (*(void (**)(_QWORD))(**(_QWORD **)v22 + 40))(*(_QWORD *)v22);
                v22 = (WTF *)((char *)v22 + 8);
                v21 -= 8;
              }
              while (v21);
            }
          }
        }
        return WTF::fastFree(v8, v7);
      }
    }
  }
  return this;
}

void sub_1951F02BC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  unsigned int v3;
  uint64_t v5;
  WTF *v6;

  if (v3)
  {
    v5 = 8 * v3;
    v6 = v2;
    do
    {
      if (*(_QWORD *)v6)
        (*(void (**)(_QWORD))(**(_QWORD **)v6 + 40))(*(_QWORD *)v6);
      v6 = (WTF *)((char *)v6 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::VideoPresentationModelVideoElement::didEnterPictureInPicture(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  _QWORD v23[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 1824);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 1832);
      v23[0] = "VideoPresentationModelVideoElement";
      v23[1] = 35;
      v23[2] = "didEnterPictureInPicture";
      v23[3] = v4;
      if (*(_BYTE *)(v3 + 12))
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v23);
    }
  }
  v5 = *(_QWORD *)(v1 + 48);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 12);
    if ((_DWORD)v6)
    {
      if (v6 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
        v9 = *(_QWORD *)(v1 + 48);
        if (v9 && *(_DWORD *)(v9 - 12))
        {
          v10 = *(unsigned int *)(v9 - 4);
          if ((_DWORD)v10)
          {
            v11 = 8 * v10;
            for (i = *(uint64_t **)(v1 + 48); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v11 -= 8;
              if (!v11)
                return WTF::fastFree(v8, v7);
            }
          }
          else
          {
            i = *(uint64_t **)(v1 + 48);
          }
          v13 = (uint64_t *)(v9 + 8 * v10);
          if (i != v13)
          {
            v14 = 0;
            v15 = *i;
            v16 = 1;
LABEL_18:
            v17 = v16;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
            v18 = v14 + 1;
            *((_QWORD *)v8 + v14) = v15;
            while (++i != v13)
            {
              v15 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                v16 = v17 + 1;
                ++v14;
                if (i != v13)
                  goto LABEL_18;
                break;
              }
            }
            if (v18)
            {
              v19 = 8 * v17;
              v20 = v8;
              do
              {
                (*(void (**)(_QWORD))(**(_QWORD **)v20 + 72))(*(_QWORD *)v20);
                v20 = (WTF *)((char *)v20 + 8);
                v19 -= 8;
              }
              while (v19);
              v21 = 8 * v17;
              v22 = v8;
              do
              {
                if (*(_QWORD *)v22)
                  (*(void (**)(_QWORD))(**(_QWORD **)v22 + 40))(*(_QWORD *)v22);
                v22 = (WTF *)((char *)v22 + 8);
                v21 -= 8;
              }
              while (v21);
            }
          }
        }
        return WTF::fastFree(v8, v7);
      }
    }
  }
  return this;
}

void sub_1951F04D8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  unsigned int v3;
  uint64_t v5;
  WTF *v6;

  if (v3)
  {
    v5 = 8 * v3;
    v6 = v2;
    do
    {
      if (*(_QWORD *)v6)
        (*(void (**)(_QWORD))(**(_QWORD **)v6 + 40))(*(_QWORD *)v6);
      v6 = (WTF *)((char *)v6 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::VideoPresentationModelVideoElement::failedToEnterPictureInPicture(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  _QWORD v23[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 1824);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 1832);
      v23[0] = "VideoPresentationModelVideoElement";
      v23[1] = 35;
      v23[2] = "failedToEnterPictureInPicture";
      v23[3] = v4;
      if (*(_BYTE *)(v3 + 12))
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 1, (WTF::Logger::LogSiteIdentifier *)v23);
    }
  }
  v5 = *(_QWORD *)(v1 + 48);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 12);
    if ((_DWORD)v6)
    {
      if (v6 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
        v9 = *(_QWORD *)(v1 + 48);
        if (v9 && *(_DWORD *)(v9 - 12))
        {
          v10 = *(unsigned int *)(v9 - 4);
          if ((_DWORD)v10)
          {
            v11 = 8 * v10;
            for (i = *(uint64_t **)(v1 + 48); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v11 -= 8;
              if (!v11)
                return WTF::fastFree(v8, v7);
            }
          }
          else
          {
            i = *(uint64_t **)(v1 + 48);
          }
          v13 = (uint64_t *)(v9 + 8 * v10);
          if (i != v13)
          {
            v14 = 0;
            v15 = *i;
            v16 = 1;
LABEL_18:
            v17 = v16;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
            v18 = v14 + 1;
            *((_QWORD *)v8 + v14) = v15;
            while (++i != v13)
            {
              v15 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                v16 = v17 + 1;
                ++v14;
                if (i != v13)
                  goto LABEL_18;
                break;
              }
            }
            if (v18)
            {
              v19 = 8 * v17;
              v20 = v8;
              do
              {
                (*(void (**)(_QWORD))(**(_QWORD **)v20 + 80))(*(_QWORD *)v20);
                v20 = (WTF *)((char *)v20 + 8);
                v19 -= 8;
              }
              while (v19);
              v21 = 8 * v17;
              v22 = v8;
              do
              {
                if (*(_QWORD *)v22)
                  (*(void (**)(_QWORD))(**(_QWORD **)v22 + 40))(*(_QWORD *)v22);
                v22 = (WTF *)((char *)v22 + 8);
                v21 -= 8;
              }
              while (v21);
            }
          }
        }
        return WTF::fastFree(v8, v7);
      }
    }
  }
  return this;
}

void sub_1951F06F4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  unsigned int v3;
  uint64_t v5;
  WTF *v6;

  if (v3)
  {
    v5 = 8 * v3;
    v6 = v2;
    do
    {
      if (*(_QWORD *)v6)
        (*(void (**)(_QWORD))(**(_QWORD **)v6 + 40))(*(_QWORD *)v6);
      v6 = (WTF *)((char *)v6 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::VideoPresentationModelVideoElement::willExitPictureInPicture(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  _QWORD v23[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 1824);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 1832);
      v23[0] = "VideoPresentationModelVideoElement";
      v23[1] = 35;
      v23[2] = "willExitPictureInPicture";
      v23[3] = v4;
      if (*(_BYTE *)(v3 + 12))
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v23);
    }
  }
  v5 = *(_QWORD *)(v1 + 48);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 12);
    if ((_DWORD)v6)
    {
      if (v6 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
        v9 = *(_QWORD *)(v1 + 48);
        if (v9 && *(_DWORD *)(v9 - 12))
        {
          v10 = *(unsigned int *)(v9 - 4);
          if ((_DWORD)v10)
          {
            v11 = 8 * v10;
            for (i = *(uint64_t **)(v1 + 48); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v11 -= 8;
              if (!v11)
                return WTF::fastFree(v8, v7);
            }
          }
          else
          {
            i = *(uint64_t **)(v1 + 48);
          }
          v13 = (uint64_t *)(v9 + 8 * v10);
          if (i != v13)
          {
            v14 = 0;
            v15 = *i;
            v16 = 1;
LABEL_18:
            v17 = v16;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
            v18 = v14 + 1;
            *((_QWORD *)v8 + v14) = v15;
            while (++i != v13)
            {
              v15 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                v16 = v17 + 1;
                ++v14;
                if (i != v13)
                  goto LABEL_18;
                break;
              }
            }
            if (v18)
            {
              v19 = 8 * v17;
              v20 = v8;
              do
              {
                (*(void (**)(_QWORD))(**(_QWORD **)v20 + 88))(*(_QWORD *)v20);
                v20 = (WTF *)((char *)v20 + 8);
                v19 -= 8;
              }
              while (v19);
              v21 = 8 * v17;
              v22 = v8;
              do
              {
                if (*(_QWORD *)v22)
                  (*(void (**)(_QWORD))(**(_QWORD **)v22 + 40))(*(_QWORD *)v22);
                v22 = (WTF *)((char *)v22 + 8);
                v21 -= 8;
              }
              while (v21);
            }
          }
        }
        return WTF::fastFree(v8, v7);
      }
    }
  }
  return this;
}

void sub_1951F0910(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  unsigned int v3;
  uint64_t v5;
  WTF *v6;

  if (v3)
  {
    v5 = 8 * v3;
    v6 = v2;
    do
    {
      if (*(_QWORD *)v6)
        (*(void (**)(_QWORD))(**(_QWORD **)v6 + 40))(*(_QWORD *)v6);
      v6 = (WTF *)((char *)v6 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::VideoPresentationModelVideoElement::didExitPictureInPicture(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  _QWORD v23[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 1824);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 1832);
      v23[0] = "VideoPresentationModelVideoElement";
      v23[1] = 35;
      v23[2] = "didExitPictureInPicture";
      v23[3] = v4;
      if (*(_BYTE *)(v3 + 12))
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v23);
    }
  }
  v5 = *(_QWORD *)(v1 + 48);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 12);
    if ((_DWORD)v6)
    {
      if (v6 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
        v9 = *(_QWORD *)(v1 + 48);
        if (v9 && *(_DWORD *)(v9 - 12))
        {
          v10 = *(unsigned int *)(v9 - 4);
          if ((_DWORD)v10)
          {
            v11 = 8 * v10;
            for (i = *(uint64_t **)(v1 + 48); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v11 -= 8;
              if (!v11)
                return WTF::fastFree(v8, v7);
            }
          }
          else
          {
            i = *(uint64_t **)(v1 + 48);
          }
          v13 = (uint64_t *)(v9 + 8 * v10);
          if (i != v13)
          {
            v14 = 0;
            v15 = *i;
            v16 = 1;
LABEL_18:
            v17 = v16;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
            v18 = v14 + 1;
            *((_QWORD *)v8 + v14) = v15;
            while (++i != v13)
            {
              v15 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                v16 = v17 + 1;
                ++v14;
                if (i != v13)
                  goto LABEL_18;
                break;
              }
            }
            if (v18)
            {
              v19 = 8 * v17;
              v20 = v8;
              do
              {
                (*(void (**)(_QWORD))(**(_QWORD **)v20 + 96))(*(_QWORD *)v20);
                v20 = (WTF *)((char *)v20 + 8);
                v19 -= 8;
              }
              while (v19);
              v21 = 8 * v17;
              v22 = v8;
              do
              {
                if (*(_QWORD *)v22)
                  (*(void (**)(_QWORD))(**(_QWORD **)v22 + 40))(*(_QWORD *)v22);
                v22 = (WTF *)((char *)v22 + 8);
                v21 -= 8;
              }
              while (v21);
            }
          }
        }
        return WTF::fastFree(v8, v7);
      }
    }
  }
  return this;
}

void sub_1951F0B2C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  unsigned int v3;
  uint64_t v5;
  WTF *v6;

  if (v3)
  {
    v5 = 8 * v3;
    v6 = v2;
    do
    {
      if (*(_QWORD *)v6)
        (*(void (**)(_QWORD))(**(_QWORD **)v6 + 40))(*(_QWORD *)v6);
      v6 = (WTF *)((char *)v6 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebCore::VideoPresentationModelVideoElement::setRequiresTextTrackRepresentation(unsigned int *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    *(_DWORD *)(v2 + 24) += 2;
    v4 = *(_QWORD *)(v2 + 1824);
    if (v4)
    {
      v5 = *(_QWORD *)(v2 + 1832);
      v7[0] = "VideoPresentationModelVideoElement";
      v7[1] = 35;
      v7[2] = "setRequiresTextTrackRepresentation";
      v7[3] = v5;
      if (*(_BYTE *)(v4 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v7);
    }
    this = (unsigned int *)WebCore::HTMLMediaElement::setRequiresTextTrackRepresentation((WebCore::RenderVideo *)v2, a2);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, v6);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

void sub_1951F0C48(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::VideoPresentationModelVideoElement::setTextTrackRepresentationBounds(unsigned int *this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    *(_DWORD *)(v2 + 24) += 2;
    v4 = *(_QWORD *)(v2 + 1824);
    if (v4)
    {
      v5 = *(_QWORD *)(v2 + 1832);
      v8[0] = "VideoPresentationModelVideoElement";
      v8[1] = 35;
      v8[2] = "setTextTrackRepresentationBounds";
      v8[3] = v5;
      v7 = *((_QWORD *)a2 + 1);
      if (*(_BYTE *)(v4 + 12))
        this = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v8, (WebCore::IntSize *)&v7);
    }
    *(_OWORD *)(v2 + 1272) = *(_OWORD *)a2;
    if (((*(unsigned int *)(v2 + 1265) | ((unint64_t)*(unsigned __int16 *)(v2 + 1269) << 32)) & 0x40000000000) != 0)
    {
      this = (unsigned int *)WebCore::HTMLMediaElement::ensureMediaControls((WebCore::HTMLMediaElement *)v2);
      if ((_DWORD)this)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v2 + 1616) + 24);
        if (v6)
        {
          this = *(unsigned int **)(v6 + 144);
          if (this)
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *, const WebCore::IntRect *))(*(_QWORD *)this + 40))(this, a2);
        }
      }
    }
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

void sub_1951F0D74(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebCore::VideoPresentationModelVideoElement::nextChildIdentifier(WebCore::VideoPresentationModelVideoElement *this)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v1 = *(_QWORD *)(v1 + 1832) & 0xFFFFFFFFFFFF0000;
  v2 = *((_QWORD *)this + 17) + 1;
  *((_QWORD *)this + 17) = v2;
  return (unsigned __int16)v2 | v1;
}

uint64_t WebCore::mediaKeyErrorSystemCode(WebCore *this, NSError *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  void *v6;

  result = -[WebCore code](this, "code");
  if (result == -11800)
  {
    v4 = (void *)-[WebCore userInfo](this, "userInfo");
    v5 = objc_msgSend(v4, "valueForKey:", *MEMORY[0x1E0CB3388]);
    if (v5 && (v6 = (void *)v5, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      return objc_msgSend(v6, "code");
    else
      return -11800;
  }
  return result;
}

void WebCore::PlatformGamepad::~PlatformGamepad(WebCore::PlatformGamepad *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E3348500;
  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_2(WTF::MonotonicTime *a1)
{
  uint64_t v1;
  WebCore::GameControllerGamepadProvider *v2;
  uint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)a1 + 4);
  v2 = (WebCore::GameControllerGamepadProvider *)WTF::MonotonicTime::now(a1);
  *(_QWORD *)(v1 + 40) = v3;
  if ((byte_1ECE81833 & 1) == 0)
  {
    WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(v2);
    byte_1ECE81833 = 1;
  }
  result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)qword_1ECE818B8);
  if ((result & 1) == 0)
    result = WTF::RunLoop::TimerBase::start();
  byte_1ECE818D8 = 1;
  return result;
}

uint64_t *WebCore::GameControllerGamepadProvider::singleton(WebCore::GameControllerGamepadProvider *this)
{
  if ((byte_1ECE81833 & 1) == 0)
  {
    WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(this);
    byte_1ECE81833 = 1;
  }
  return &qword_1ECE81860;
}

uint64_t ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_3(uint64_t result, void *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  float v7;
  _QWORD v8[5];
  char v9;

  v3 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v3 + 100) <= a3)
  {
    __break(0xC471u);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 88);
    result = objc_msgSend(a2, "value");
    *(double *)(*(_QWORD *)(v6 + 8 * a3) + 8) = v7;
    if (a2)
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
      v8[3] = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
      v8[4] = v3;
      v9 = a3;
      return objc_msgSend(a2, "setValueChangedHandler:", v8);
    }
  }
  return result;
}

uint64_t ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4(uint64_t result, float a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::GameControllerGamepadProvider *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(unsigned __int8 *)(result + 40);
  if (*(_DWORD *)(v4 + 100) <= v5)
  {
    __break(0xC471u);
  }
  else
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 8 * v5) + 8) = a2;
    v7 = (WebCore::GameControllerGamepadProvider *)WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    *(_QWORD *)(v4 + 40) = v8;
    if ((byte_1ECE81833 & 1) == 0)
    {
      WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(v7);
      byte_1ECE81833 = 1;
    }
    result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)qword_1ECE818B8);
    if ((result & 1) == 0)
      result = WTF::RunLoop::TimerBase::start();
    if (a4)
      byte_1ECE818D8 = 1;
  }
  return result;
}

uint64_t ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_5(uint64_t result, float a2)
{
  uint64_t v2;
  WebCore::GameControllerGamepadProvider *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v2 + 84))
  {
    *(double *)(**(_QWORD **)(v2 + 72) + 8) = a2;
    v3 = (WebCore::GameControllerGamepadProvider *)WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    *(_QWORD *)(v2 + 40) = v4;
    if ((byte_1ECE81833 & 1) == 0)
    {
      WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(v3);
      byte_1ECE81833 = 1;
    }
    result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)qword_1ECE818B8);
    if ((result & 1) == 0)
      return WTF::RunLoop::TimerBase::start();
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_6(uint64_t result, float a2)
{
  uint64_t v2;
  WebCore::GameControllerGamepadProvider *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v2 + 84) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(v2 + 72) + 8) + 8) = (float)-a2;
    v3 = (WebCore::GameControllerGamepadProvider *)WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    *(_QWORD *)(v2 + 40) = v4;
    if ((byte_1ECE81833 & 1) == 0)
    {
      WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(v3);
      byte_1ECE81833 = 1;
    }
    result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)qword_1ECE818B8);
    if ((result & 1) == 0)
      return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

uint64_t ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_7(uint64_t result, float a2)
{
  uint64_t v2;
  WebCore::GameControllerGamepadProvider *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v2 + 84) <= 2u)
  {
    __break(0xC471u);
  }
  else
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(v2 + 72) + 16) + 8) = a2;
    v3 = (WebCore::GameControllerGamepadProvider *)WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    *(_QWORD *)(v2 + 40) = v4;
    if ((byte_1ECE81833 & 1) == 0)
    {
      WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(v3);
      byte_1ECE81833 = 1;
    }
    result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)qword_1ECE818B8);
    if ((result & 1) == 0)
      return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

uint64_t ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_8(uint64_t result, float a2)
{
  uint64_t v2;
  WebCore::GameControllerGamepadProvider *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v2 + 84) <= 3u)
  {
    __break(0xC471u);
  }
  else
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(v2 + 72) + 24) + 8) = (float)-a2;
    v3 = (WebCore::GameControllerGamepadProvider *)WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    *(_QWORD *)(v2 + 40) = v4;
    if ((byte_1ECE81833 & 1) == 0)
    {
      WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(v3);
      byte_1ECE81833 = 1;
    }
    result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)qword_1ECE818B8);
    if ((result & 1) == 0)
      return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

uint64_t WebCore::GameControllerGamepad::playEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1951F13AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::GameControllerGamepad::stopEffects(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1951F1404(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(WebCore::GameControllerGamepadProvider *this)
{
  WTF::RunLoop *v1;
  _QWORD *v2;
  uint64_t result;

  qword_1ECE81868 = 0;
  *(_QWORD *)&dword_1ECE81870 = 0;
  byte_1ECE81878 = 0;
  qword_1ECE81860 = (uint64_t)&off_1E3348448;
  xmmword_1ECE81880 = 0u;
  *(_OWORD *)&dword_1ECE81890 = 0u;
  xmmword_1ECE818A0 = 0u;
  qword_1ECE818B0 = 0;
  v1 = (WTF::RunLoop *)WTF::RunLoop::current(this);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v2 = off_1E3348578;
  v2[1] = WebCore::GameControllerGamepadProvider::inputNotificationTimerFired;
  v2[2] = 0;
  v2[3] = &qword_1ECE81860;
  result = WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)qword_1ECE818B8, v1);
  qword_1ECE818B8[0] = (uint64_t)off_1E32051C0;
  qword_1ECE818D0 = (uint64_t)v2;
  byte_1ECE818D8 = 0;
  return result;
}

void sub_1951F14C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t i;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t j;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v5 = (const void *)qword_1ECE818B0;
  qword_1ECE818B0 = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)&xmmword_1ECE818A0 + 1);
  *((_QWORD *)&xmmword_1ECE818A0 + 1) = 0;
  if (v6)
    CFRelease(v6);
  v7 = qword_1ECE81898;
  if (qword_1ECE81898)
  {
    v19 = *(unsigned int *)(qword_1ECE81898 - 4);
    if ((_DWORD)v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v21 = *(unsigned int **)(v7 + 8 * i);
        if (v21 != (unsigned int *)-1)
        {
          *(_QWORD *)(v7 + 8 * i) = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              WTF::fastFree((WTF *)v21, v4);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v7 - 16), v4);
  }
  if (dword_1ECE81894)
  {
    v14 = (unsigned int **)*((_QWORD *)&xmmword_1ECE81880 + 1);
    v15 = *((_QWORD *)&xmmword_1ECE81880 + 1) + 8 * dword_1ECE81894;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, v4);
        }
      }
      ++v14;
    }
    while (v14 != (unsigned int **)v15);
  }
  v8 = (WTF *)*((_QWORD *)&xmmword_1ECE81880 + 1);
  if (*((_QWORD *)&xmmword_1ECE81880 + 1))
  {
    *((_QWORD *)&xmmword_1ECE81880 + 1) = 0;
    dword_1ECE81890 = 0;
    WTF::fastFree(v8, v4);
  }
  v9 = xmmword_1ECE81880;
  if ((_QWORD)xmmword_1ECE81880)
  {
    v10 = *(unsigned int *)(xmmword_1ECE81880 - 4);
    if ((_DWORD)v10)
    {
      v11 = (uint64_t *)(xmmword_1ECE81880 + 8);
      do
      {
        if (*(v11 - 1) != -1)
        {
          v12 = *v11;
          *v11 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), v4);
  }
  *v2 = off_1E33485A0;
  v13 = v2[1];
  if (v13)
  {
    v24 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v24)
    {
      for (j = 0; j != v24; ++j)
      {
        v26 = *(unsigned int **)(v13 + 8 * j);
        if (v26 != (unsigned int *)-1)
        {
          *(_QWORD *)(v13 + 8 * j) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v4);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v13 - 16), v4);
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::GameControllerGamepadProvider::inputNotificationTimerFired(WebCore::GameControllerGamepadProvider *this, void *a2)
{
  if (*((_BYTE *)this + 120))
  {
    *((_BYTE *)this + 24) = 1;
    WebCore::GameControllerGamepadProvider::makeInvisibleGamepadsVisible((uint64_t)this, a2);
  }
  *((_BYTE *)this + 120) = 0;
  return WebCore::GamepadProvider::dispatchPlatformGamepadInputActivity((uint64_t)this);
}

uint64_t WebCore::GameControllerGamepadProvider::controllerDidConnect(uint64_t result, void *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t *v29;
  int v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  float v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  float v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  float v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  float v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  float v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  float v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  float v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  float v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  float v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  float v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  float v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  float v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  float v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  float v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  float v126;
  uint64_t v127;
  void *v128;
  float v129;
  uint64_t v130;
  void *v131;
  float v132;
  uint64_t v133;
  void *v134;
  float v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  WTF *v147;
  _QWORD *v148;
  unsigned int **v149;
  unsigned int **v150;
  unsigned int *v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  WTF **v155;
  uint64_t v156;
  WTF *v157;
  WTF **v158;
  uint64_t v159;
  WTF *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int v177;
  _QWORD *v178;
  void *v179;
  _QWORD *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  unint64_t v189;
  unsigned int v190;
  uint64_t *v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  void *v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  void *v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t v223;
  unsigned int v224;
  int v225;
  uint64_t v226;
  unsigned int v227;
  unsigned int v228;
  uint64_t v229;
  int v230;
  unsigned int v231;
  unsigned int v233;
  uint64_t *v235;
  uint64_t *v236;
  unsigned int *v237;
  unsigned int *v238;
  _QWORD v239[5];
  _QWORD v240[5];
  _QWORD v241[5];
  _QWORD v242[2];
  uint64_t (*v243)(uint64_t, void *, unsigned int);
  void *v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD v247[5];
  uint64_t v248;
  uint64_t v249;
  void *v250;
  void *v251;
  uint64_t v252;
  char v253;

  v4 = result;
  v5 = *(_QWORD *)(result + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(void **)(v5 + 16 * v10);
    if (v11 == a2)
      return result;
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(void **)(v5 + 16 * v10);
      ++v12;
      if (v11 == a2)
        return result;
    }
  }
  v13 = *(unsigned int *)(result + 52);
  if ((_DWORD)v13)
  {
    v14 = 0;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8 * v14);
      if (!v15 || !*(_QWORD *)(v15 + 8))
        break;
      if (v13 == ++v14)
      {
        LODWORD(v14) = *(_DWORD *)(result + 52);
        break;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  v236 = (uint64_t *)(result + 32);
  v16 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)(v16 + 8) = 0;
  v235 = (uint64_t *)(v16 + 8);
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 32) = v14;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)v16 = off_1E3348338;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = a2;
  if (a2)
    CFRetain(a2);
  *(_OWORD *)(v16 + 72) = 0u;
  v237 = (unsigned int *)(v16 + 72);
  *(_OWORD *)(v16 + 88) = 0u;
  v238 = (unsigned int *)(v16 + 88);
  if (WebCore::IOSApplication::isBackboneApp((WebCore::IOSApplication *)objc_msgSend(a2, "setPlayerIndex:"))&& (WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(v16 + 64), "extendedGamepad"), "setValueChangedHandler:", &__block_literal_global_38);
  }
  v17 = (void *)objc_msgSend(*(id *)(v16 + 64), "physicalInputProfile");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v247[0] = MEMORY[0x1E0C809B0];
    v247[1] = 3221225472;
    v247[2] = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_2;
    v247[3] = &__block_descriptor_40_e56_v24__0__GCPhysicalInputProfile_8__GCControllerElement_16l;
    v247[4] = v16;
    objc_msgSend(v17, "setThumbstickUserIntentHandler:", v247);
  }
  v18 = (void *)objc_msgSend(v17, "buttons");
  v20 = (void *)objc_msgSend(v18, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputButtonHome);
  if (v20)
    v21 = 17;
  else
    v21 = 16;
  v22 = *(unsigned int *)(v16 + 100);
  if (v21 <= v22)
  {
    if (v21 != v22)
    {
      v155 = (WTF **)(*(_QWORD *)v238 + 8 * v21);
      v156 = 8 * v22 - 8 * v21;
      do
      {
        v157 = *v155;
        *v155 = 0;
        if (v157)
        {
          if (*(_DWORD *)v157 == 1)
            WTF::fastFree(v157, v19);
          else
            --*(_DWORD *)v157;
        }
        ++v155;
        v156 -= 8;
      }
      while (v156);
    }
  }
  else
  {
    if (v21 > *(unsigned int *)(v16 + 96))
      WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v238, v21);
    if (*(_QWORD *)v238)
    {
      v23 = *(unsigned int *)(v16 + 100);
      if (v21 != v23)
      {
        v24 = (uint64_t *)(*(_QWORD *)v238 + 8 * v23);
        v25 = 8 * v21 - 8 * v23;
        do
        {
          v26 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)v26 = 1;
          *(_QWORD *)(v26 + 8) = 0;
          *v24++ = v26;
          v25 -= 8;
        }
        while (v25);
      }
    }
  }
  *(_DWORD *)(v16 + 100) = v21;
  MEMORY[0x19AEA5508](&v246, objc_msgSend(*(id *)(v16 + 64), "vendorName"));
  v27 = objc_msgSend(*(id *)(v16 + 64), "extendedGamepad");
  v28 = 18;
  if (v27)
  {
    v29 = (int8x16_t *)" Extended Gamepad";
  }
  else
  {
    v28 = 9;
    v29 = (int8x16_t *)" Gamepad";
  }
  v233 = v28 - 1;
  if ((unint64_t)(v28 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D50);
  }
  if (!v246)
  {
    v31 = v28 - 1;
LABEL_41:
    v32 = 1;
    goto LABEL_42;
  }
  v30 = *(_DWORD *)(v246 + 4);
  if (v30 < 0 || (v31 = v30 + v233, __OFADD__(v30, v233)))
  {
LABEL_299:
    __break(0xC471u);
    JUMPOUT(0x1951F2D24);
  }
  if ((*(_BYTE *)(v246 + 16) & 4) != 0)
    goto LABEL_41;
  v32 = 0;
LABEL_42:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v31, v32, v246, v29, v233, &v248);
  if (!v248)
    goto LABEL_299;
  v34 = *(WTF::StringImpl **)(v16 + 16);
  *(_QWORD *)(v16 + 16) = v248;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = (WTF::StringImpl *)v246;
  v246 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (objc_msgSend(*(id *)(v16 + 64), "extendedGamepad"))
  {
    {
      v37 = (_DWORD *)WebCore::standardGamepadMappingString(void)::standardGamepadMapping;
      if (!WebCore::standardGamepadMappingString(void)::standardGamepadMapping)
        goto LABEL_53;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::standardGamepadMappingString(void)::standardGamepadMapping = v248;
      v37 = (_DWORD *)v248;
      if (!v248)
      {
LABEL_53:
        v38 = *(WTF::StringImpl **)(v16 + 24);
        *(_QWORD *)(v16 + 24) = v37;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v36);
          else
            *(_DWORD *)v38 -= 2;
        }
        goto LABEL_56;
      }
    }
    *v37 += 2;
    goto LABEL_53;
  }
LABEL_56:
  v242[0] = MEMORY[0x1E0C809B0];
  v242[1] = 3221225472;
  v243 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_3;
  v244 = &__block_descriptor_40_e36_v20__0__GCControllerButtonInput_8C16l;
  v245 = v16;
  v39 = (void *)objc_msgSend(v17, "buttons");
  v40 = (void *)objc_msgSend(v39, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputButtonA);
  if (!*(_DWORD *)(v16 + 100))
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D58);
  }
  v41 = v40;
  v42 = *(_QWORD *)v238;
  objc_msgSend(v40, "value");
  *(double *)(*(_QWORD *)v42 + 8) = v43;
  if (v41)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 0;
    objc_msgSend(v41, "setValueChangedHandler:", &v248);
  }
  v44 = (void *)objc_msgSend(v17, "buttons");
  v45 = (void *)objc_msgSend(v44, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputButtonB);
  if (*(_DWORD *)(v16 + 100) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D60);
  }
  v46 = v45;
  v47 = *(_QWORD *)v238;
  objc_msgSend(v45, "value");
  *(double *)(*(_QWORD *)(v47 + 8) + 8) = v48;
  if (v46)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 1;
    objc_msgSend(v46, "setValueChangedHandler:", &v248);
  }
  v49 = (void *)objc_msgSend(v17, "buttons");
  v50 = (void *)objc_msgSend(v49, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputButtonX);
  if (*(_DWORD *)(v16 + 100) <= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D68);
  }
  v51 = v50;
  v52 = *(_QWORD *)v238;
  objc_msgSend(v50, "value");
  *(double *)(*(_QWORD *)(v52 + 16) + 8) = v53;
  if (v51)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 2;
    objc_msgSend(v51, "setValueChangedHandler:", &v248);
  }
  v54 = (void *)objc_msgSend(v17, "buttons");
  v55 = (void *)objc_msgSend(v54, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputButtonY);
  if (*(_DWORD *)(v16 + 100) <= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D70);
  }
  v56 = v55;
  v57 = *(_QWORD *)v238;
  objc_msgSend(v55, "value");
  *(double *)(*(_QWORD *)(v57 + 24) + 8) = v58;
  if (v56)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 3;
    objc_msgSend(v56, "setValueChangedHandler:", &v248);
  }
  v59 = (void *)objc_msgSend(v17, "buttons");
  v60 = (void *)objc_msgSend(v59, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputLeftShoulder);
  if (*(_DWORD *)(v16 + 100) <= 4u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D78);
  }
  v61 = v60;
  v62 = *(_QWORD *)v238;
  objc_msgSend(v60, "value");
  *(double *)(*(_QWORD *)(v62 + 32) + 8) = v63;
  if (v61)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 4;
    objc_msgSend(v61, "setValueChangedHandler:", &v248);
  }
  v64 = (void *)objc_msgSend(v17, "buttons");
  v65 = (void *)objc_msgSend(v64, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputRightShoulder);
  if (*(_DWORD *)(v16 + 100) <= 5u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D80);
  }
  v66 = v65;
  v67 = *(_QWORD *)v238;
  objc_msgSend(v65, "value");
  *(double *)(*(_QWORD *)(v67 + 40) + 8) = v68;
  if (v66)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 5;
    objc_msgSend(v66, "setValueChangedHandler:", &v248);
  }
  v69 = (void *)objc_msgSend(v17, "buttons");
  v70 = (void *)objc_msgSend(v69, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputLeftTrigger);
  if (*(_DWORD *)(v16 + 100) <= 6u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D88);
  }
  v71 = v70;
  v72 = *(_QWORD *)v238;
  objc_msgSend(v70, "value");
  *(double *)(*(_QWORD *)(v72 + 48) + 8) = v73;
  if (v71)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 6;
    objc_msgSend(v71, "setValueChangedHandler:", &v248);
  }
  v74 = (void *)objc_msgSend(v17, "buttons");
  v75 = (void *)objc_msgSend(v74, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputRightTrigger);
  if (*(_DWORD *)(v16 + 100) <= 7u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D90);
  }
  v76 = v75;
  v77 = *(_QWORD *)v238;
  objc_msgSend(v75, "value");
  *(double *)(*(_QWORD *)(v77 + 56) + 8) = v78;
  if (v76)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 7;
    objc_msgSend(v76, "setValueChangedHandler:", &v248);
  }
  v79 = (void *)objc_msgSend(v17, "dpads");
  v80 = (void *)objc_msgSend((id)objc_msgSend(v79, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputDirectionPad), "up");
  if (*(_DWORD *)(v16 + 100) <= 0xCu)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2D98);
  }
  v81 = v80;
  v82 = *(_QWORD *)v238;
  objc_msgSend(v80, "value");
  *(double *)(*(_QWORD *)(v82 + 96) + 8) = v83;
  if (v81)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 12;
    objc_msgSend(v81, "setValueChangedHandler:", &v248);
  }
  v84 = (void *)objc_msgSend(v17, "dpads");
  v85 = (void *)objc_msgSend((id)objc_msgSend(v84, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputDirectionPad), "down");
  if (*(_DWORD *)(v16 + 100) <= 0xDu)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DA0);
  }
  v86 = v85;
  v87 = *(_QWORD *)v238;
  objc_msgSend(v85, "value");
  *(double *)(*(_QWORD *)(v87 + 104) + 8) = v88;
  if (v86)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 13;
    objc_msgSend(v86, "setValueChangedHandler:", &v248);
  }
  v89 = (void *)objc_msgSend(v17, "dpads");
  v90 = (void *)objc_msgSend((id)objc_msgSend(v89, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputDirectionPad), "left");
  if (*(_DWORD *)(v16 + 100) <= 0xEu)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DA8);
  }
  v91 = v90;
  v92 = *(_QWORD *)v238;
  objc_msgSend(v90, "value");
  *(double *)(*(_QWORD *)(v92 + 112) + 8) = v93;
  if (v91)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 14;
    objc_msgSend(v91, "setValueChangedHandler:", &v248);
  }
  v94 = (void *)objc_msgSend(v17, "dpads");
  v95 = (void *)objc_msgSend((id)objc_msgSend(v94, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputDirectionPad), "right");
  if (*(_DWORD *)(v16 + 100) <= 0xFu)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DB0);
  }
  v96 = v95;
  v97 = *(_QWORD *)v238;
  objc_msgSend(v95, "value");
  *(double *)(*(_QWORD *)(v97 + 120) + 8) = v98;
  if (v96)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 15;
    objc_msgSend(v96, "setValueChangedHandler:", &v248);
  }
  if (v20)
  {
    if (*(_DWORD *)(v16 + 100) <= 0x10u)
    {
      __break(0xC471u);
      JUMPOUT(0x1951F2DF0);
    }
    v99 = *(_QWORD *)v238;
    objc_msgSend(v20, "value");
    *(double *)(*(_QWORD *)(v99 + 128) + 8) = v100;
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 16;
    objc_msgSend(v20, "setValueChangedHandler:", &v248);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v20, "setPreferredSystemGestureState:", 2);
  }
  v101 = (void *)objc_msgSend(v17, "buttons");
  v102 = (void *)objc_msgSend(v101, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputButtonOptions);
  if (*(_DWORD *)(v16 + 100) <= 8u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DB8);
  }
  v103 = v102;
  v104 = *(_QWORD *)v238;
  objc_msgSend(v102, "value");
  *(double *)(*(_QWORD *)(v104 + 64) + 8) = v105;
  if (v103)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v16;
    v253 = 8;
    objc_msgSend(v103, "setValueChangedHandler:", &v248);
  }
  v106 = (void *)objc_msgSend(v17, "buttons");
  v107 = (void *)objc_msgSend(v106, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputButtonOptions);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v107, "setPreferredSystemGestureState:", 2);
  v108 = (void *)objc_msgSend(v17, "buttons");
  v109 = (void *)objc_msgSend(v108, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputButtonMenu);
  v110 = v245;
  if (*(_DWORD *)(v245 + 100) <= 9u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DC0);
  }
  v111 = v109;
  v112 = *(_QWORD *)(v245 + 88);
  objc_msgSend(v109, "value");
  *(double *)(*(_QWORD *)(v112 + 72) + 8) = v113;
  if (v111)
  {
    v248 = MEMORY[0x1E0C809B0];
    v249 = 3221225472;
    v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_4;
    v251 = &__block_descriptor_41_e39_v24__0__GCControllerButtonInput_8f16B20l;
    v252 = v110;
    v253 = 9;
    objc_msgSend(v111, "setValueChangedHandler:", &v248);
  }
  v114 = (void *)objc_msgSend(v17, "buttons");
  v115 = (void *)objc_msgSend(v114, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputButtonMenu);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v115, "setPreferredSystemGestureState:", 2);
  v116 = (void *)objc_msgSend(v17, "buttons");
  v243((uint64_t)v242, (void *)objc_msgSend(v116, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputLeftThumbstickButton), 10u);
  v117 = (void *)objc_msgSend(v17, "buttons");
  v118 = objc_msgSend(v117, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputRightThumbstickButton);
  v243((uint64_t)v242, (void *)v118, 11u);
  v120 = *(unsigned int *)(v16 + 84);
  if (v120 >= 4)
  {
    if ((_DWORD)v120 != 4)
    {
      v158 = (WTF **)(*(_QWORD *)v237 + 32);
      v159 = 8 * v120 - 32;
      do
      {
        v160 = *v158;
        *v158 = 0;
        if (v160)
        {
          if (*(_DWORD *)v160 == 1)
            WTF::fastFree(v160, v119);
          else
            --*(_DWORD *)v160;
        }
        ++v158;
        v159 -= 8;
      }
      while (v159);
    }
  }
  else
  {
    if (*(_DWORD *)(v16 + 80) <= 3u)
      WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v237, 4uLL);
    v121 = *(_QWORD *)v237;
    if (*(_QWORD *)v237)
    {
      v122 = *(unsigned int *)(v16 + 84);
      if ((_DWORD)v122 != 4)
      {
        do
        {
          v123 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)v123 = 1;
          *(_QWORD *)(v123 + 8) = 0;
          *(_QWORD *)(v121 + 8 * v122++) = v123;
        }
        while (v122 != 4);
      }
    }
  }
  *(_DWORD *)(v16 + 84) = 4;
  v124 = *(_QWORD *)(v16 + 72);
  v125 = (void *)objc_msgSend(v17, "dpads");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v125, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputLeftThumbstick), "xAxis"), "value");
  *(double *)(*(_QWORD *)v124 + 8) = v126;
  if (*(_DWORD *)(v16 + 84) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DC8);
  }
  v127 = *(_QWORD *)v237;
  v128 = (void *)objc_msgSend(v17, "dpads");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v128, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputLeftThumbstick), "yAxis"), "value");
  *(double *)(*(_QWORD *)(v127 + 8) + 8) = (float)-v129;
  if (*(_DWORD *)(v16 + 84) <= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DD0);
  }
  v130 = *(_QWORD *)v237;
  v131 = (void *)objc_msgSend(v17, "dpads");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v131, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputRightThumbstick), "xAxis"), "value");
  *(double *)(*(_QWORD *)(v130 + 16) + 8) = v132;
  if (*(_DWORD *)(v16 + 84) <= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DD8);
  }
  v133 = *(_QWORD *)v237;
  v134 = (void *)objc_msgSend(v17, "dpads");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v134, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputRightThumbstick), "yAxis"), "value");
  *(double *)(*(_QWORD *)(v133 + 24) + 8) = (float)-v135;
  v248 = MEMORY[0x1E0C809B0];
  v249 = 3221225472;
  v250 = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_5;
  v251 = &__block_descriptor_40_e34_v20__0__GCControllerAxisInput_8f16l;
  v252 = v16;
  v136 = (void *)objc_msgSend(v17, "dpads");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v136, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputLeftThumbstick), "xAxis"), "setValueChangedHandler:", &v248);
  v241[0] = MEMORY[0x1E0C809B0];
  v241[1] = 3221225472;
  v241[2] = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_6;
  v241[3] = &__block_descriptor_40_e34_v20__0__GCControllerAxisInput_8f16l;
  v241[4] = v16;
  v137 = (void *)objc_msgSend(v17, "dpads");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v137, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputLeftThumbstick), "yAxis"), "setValueChangedHandler:", v241);
  v240[0] = MEMORY[0x1E0C809B0];
  v240[1] = 3221225472;
  v240[2] = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_7;
  v240[3] = &__block_descriptor_40_e34_v20__0__GCControllerAxisInput_8f16l;
  v240[4] = v16;
  v138 = (void *)objc_msgSend(v17, "dpads");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v138, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputRightThumbstick), "xAxis"), "setValueChangedHandler:", v240);
  v239[0] = MEMORY[0x1E0C809B0];
  v239[1] = 3221225472;
  v239[2] = ___ZN7WebCore21GameControllerGamepad13setupElementsEv_block_invoke_8;
  v239[3] = &__block_descriptor_40_e34_v20__0__GCControllerAxisInput_8f16l;
  v239[4] = v16;
  v139 = (void *)objc_msgSend(v17, "dpads");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v139, "objectForKeyedSubscript:", WebCore::constantGameControllerGCInputRightThumbstick), "yAxis"), "setValueChangedHandler:", v239);
  v141 = *(unsigned int *)(v4 + 52);
  if (v141 <= v14)
  {
    v142 = (v14 + 1);
    v143 = *(unsigned int *)(v4 + 48);
    if (v143 < v142)
    {
      v144 = v143 + (v143 >> 2);
      if (v144 >= 0x10)
        v145 = v144 + 1;
      else
        v145 = 16;
      if (v145 <= v142)
        v146 = (v14 + 1);
      else
        v146 = v145;
      if (v146 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1951F2E00);
      }
      v147 = *(WTF **)(v4 + 40);
      v148 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v146));
      *(_DWORD *)(v4 + 48) = v146;
      *(_QWORD *)(v4 + 40) = v148;
      if ((_DWORD)v141)
      {
        v149 = (unsigned int **)((char *)v147 + 8 * v141);
        v150 = (unsigned int **)v147;
        do
        {
          v151 = *v150;
          *v150 = 0;
          *v148 = v151;
          v152 = *v150;
          *v150 = 0;
          if (v152)
          {
            do
            {
              v153 = __ldaxr(v152);
              v154 = v153 - 1;
            }
            while (__stlxr(v154, v152));
            if (!v154)
            {
              atomic_store(1u, v152);
              WTF::fastFree((WTF *)v152, v140);
            }
          }
          ++v148;
          ++v150;
        }
        while (v150 != v149);
      }
      if (v147)
      {
        if (*(WTF **)(v4 + 40) == v147)
        {
          *(_QWORD *)(v4 + 40) = 0;
          *(_DWORD *)(v4 + 48) = 0;
        }
        WTF::fastFree(v147, v140);
      }
    }
    v161 = *(_QWORD *)(v4 + 40);
    if (v161)
    {
      v162 = *(unsigned int *)(v4 + 52);
      if ((_DWORD)v162 != (_DWORD)v142)
        bzero((void *)(v161 + 8 * v162), (8 * v142 - 8 * v162) & 0xFFFFFFFFFFFFFFF8);
    }
    *(_DWORD *)(v4 + 52) = v142;
  }
  v163 = *v235;
  if (*v235)
    goto LABEL_351;
  v163 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v163 = 1;
  *(_QWORD *)(v163 + 8) = v16;
  v164 = *(unsigned int **)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v163;
  if (!v164)
    goto LABEL_351;
  do
  {
    v165 = __ldaxr(v164);
    v166 = v165 - 1;
  }
  while (__stlxr(v166, v164));
  if (!v166)
  {
    atomic_store(1u, v164);
    WTF::fastFree((WTF *)v164, v140);
  }
  v163 = *v235;
  if (*v235)
  {
LABEL_351:
    do
      v167 = __ldaxr((unsigned int *)v163);
    while (__stlxr(v167 + 1, (unsigned int *)v163));
  }
  if (*(_DWORD *)(v4 + 52) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DE0);
  }
  v168 = *(_QWORD *)(v4 + 40);
  v169 = *(unsigned int **)(v168 + 8 * v14);
  *(_QWORD *)(v168 + 8 * v14) = v163;
  if (v169)
  {
    do
    {
      v170 = __ldaxr(v169);
      v171 = v170 - 1;
    }
    while (__stlxr(v171, v169));
    if (!v171)
    {
      atomic_store(1u, v169);
      WTF::fastFree((WTF *)v169, v140);
    }
  }
  v172 = *v236;
  if (*v236
    || (WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WebCore::GameControllerGamepad>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v236, 8u), (v172 = *v236) != 0))
  {
    v173 = *(_DWORD *)(v172 - 8);
  }
  else
  {
    v173 = 0;
  }
  v174 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v175 = 9 * ((v174 + ~(v174 << 13)) ^ ((v174 + ~(v174 << 13)) >> 8));
  v176 = (v175 ^ (v175 >> 15)) + ~((v175 ^ (v175 >> 15)) << 27);
  v177 = v173 & ((v176 >> 31) ^ v176);
  v178 = (_QWORD *)(v172 + 16 * v177);
  v179 = (void *)*v178;
  if (!*v178)
  {
LABEL_178:
    v182 = v178[1];
    *v178 = a2;
    v178[1] = v16;
    if (v182)
      (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
    v183 = *v236;
    if (*v236)
      v184 = *(_DWORD *)(v183 - 12) + 1;
    else
      v184 = 1;
    *(_DWORD *)(v183 - 12) = v184;
    v186 = *v236;
    if (*v236)
      v187 = *(_DWORD *)(v186 - 12);
    else
      v187 = 0;
    v188 = (*(_DWORD *)(v186 - 16) + v187);
    v189 = *(unsigned int *)(v186 - 4);
    if (v189 > 0x400)
    {
      if (v189 > 2 * v188)
        goto LABEL_195;
    }
    else
    {
      if (3 * v189 > 4 * v188)
        goto LABEL_195;
      if (!(_DWORD)v189)
      {
        v190 = 8;
        goto LABEL_194;
      }
    }
    v190 = (_DWORD)v189 << (6 * *(_DWORD *)(v186 - 12) >= (2 * v189));
LABEL_194:
    WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WebCore::GameControllerGamepad>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v236, v190);
    goto LABEL_195;
  }
  v180 = 0;
  v181 = 1;
  while (v179 != a2)
  {
    if (v179 == (void *)-1)
      v180 = v178;
    v177 = (v177 + v181) & v173;
    v178 = (_QWORD *)(v172 + 16 * v177);
    v179 = (void *)*v178;
    ++v181;
    if (!*v178)
    {
      if (v180)
      {
        *v180 = 0;
        v180[1] = 0;
        --*(_DWORD *)(*v236 - 16);
        v178 = v180;
      }
      goto LABEL_178;
    }
  }
  v185 = v178[1];
  v178[1] = v16;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
LABEL_195:
  if (a3 != 1)
  {
    result = WebCore::GameControllerGamepadProvider::makeInvisibleGamepadsVisible(v4, v140);
    v210 = *(_QWORD *)(v4 + 8);
    if (v210)
    {
      v212 = *(unsigned int *)(v210 - 4);
      v211 = (uint64_t *)(v210 + 8 * v212);
      if (*(_DWORD *)(v210 - 12))
      {
        if (!(_DWORD)v212)
        {
          v223 = 0;
          v213 = *(uint64_t **)(v4 + 8);
          v214 = v14;
          goto LABEL_289;
        }
        v218 = 8 * v212;
        v213 = *(uint64_t **)(v4 + 8);
        while ((unint64_t)(*v213 + 1) <= 1)
        {
          ++v213;
          v218 -= 8;
          if (!v218)
          {
            v213 = v211;
            break;
          }
        }
LABEL_220:
        v214 = v14;
        if (!v210)
        {
          v215 = 0;
LABEL_222:
          if (v215 != v213)
          {
            while (!*(_QWORD *)(*v213 + 8))
            {
              v216 = v213 + 1;
              v213 = v211;
              if (v216 != v211)
              {
                v213 = v216;
                while ((unint64_t)(*v213 + 1) <= 1)
                {
                  if (++v213 == v211)
                  {
                    v213 = v211;
                    break;
                  }
                }
              }
              if (v213 == v215)
              {
                v213 = v215;
                break;
              }
            }
          }
          if (v210)
            v217 = (uint64_t *)(v210 + 8 * *(unsigned int *)(v210 - 4));
          else
            v217 = 0;
          while (v213 != v217)
          {
            if (*(_DWORD *)(v4 + 52) <= v14)
            {
              __break(0xC471u);
              JUMPOUT(0x1951F2D1CLL);
            }
            v220 = *v213;
            v219 = v213 + 1;
            result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v220 + 8) + 16))(*(_QWORD *)(v220 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * v214) + 8), 1);
            v221 = v211;
            if (v219 != v211)
            {
              v221 = v219;
              while ((unint64_t)(*v221 + 1) <= 1)
              {
                if (++v221 == v211)
                {
                  v221 = v211;
                  break;
                }
              }
            }
            v213 = v215;
            if (v221 != v215)
            {
              v213 = v221;
              if (!*(_QWORD *)(*v221 + 8))
              {
                while (1)
                {
                  v222 = v213 + 1;
                  v213 = v211;
                  if (v222 != v211)
                  {
                    v213 = v222;
                    while ((unint64_t)(*v213 + 1) <= 1)
                    {
                      if (++v213 == v211)
                      {
                        v213 = v211;
                        break;
                      }
                    }
                  }
                  if (v213 == v215)
                    break;
                  if (*(_QWORD *)(*v213 + 8))
                    goto LABEL_263;
                }
                v213 = v215;
              }
            }
LABEL_263:
            ++*(_DWORD *)(v4 + 16);
          }
          return result;
        }
        v223 = *(unsigned int *)(v210 - 4);
LABEL_289:
        v215 = (uint64_t *)(v210 + 8 * v223);
        goto LABEL_222;
      }
    }
    else
    {
      v211 = 0;
      v212 = 0;
    }
    v213 = v211;
    v211 = (uint64_t *)(v210 + 8 * v212);
    goto LABEL_220;
  }
  if (*(_DWORD *)(v4 + 52) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1951F2DF8);
  }
  v191 = (uint64_t *)(v4 + 56);
  v192 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * v14) + 8);
  v193 = *(_DWORD *)(v4 + 68);
  v194 = *(_DWORD *)(v4 + 64) + 1;
  *(_DWORD *)(v4 + 64) = v194;
  if (v194 <= v193)
    goto LABEL_202;
  v195 = *v191;
  if (!*v191)
    goto LABEL_199;
  v224 = *(_DWORD *)(v195 - 4);
  if (!v224)
    goto LABEL_287;
  v225 = 0;
  do
  {
    v226 = *(_QWORD *)(v195 + 8 * --v224);
    if ((unint64_t)(v226 + 1) >= 2 && !*(_QWORD *)(v226 + 8))
    {
      *(_QWORD *)(v195 + 8 * v224) = 0;
      do
      {
        v227 = __ldaxr((unsigned int *)v226);
        v228 = v227 - 1;
      }
      while (__stlxr(v228, (unsigned int *)v226));
      if (!v228)
      {
        atomic_store(1u, (unsigned int *)v226);
        WTF::fastFree((WTF *)v226, v140);
      }
      *(_QWORD *)(v195 + 8 * v224) = -1;
      ++v225;
    }
  }
  while (v224);
  v195 = *v191;
  if (v225)
  {
    *(_DWORD *)(v195 - 16) += v225;
    v229 = *v191;
    if (*v191)
      v230 = *(_DWORD *)(v229 - 12);
    else
      v230 = 0;
    *(_DWORD *)(v229 - 12) = v230 - v225;
    v195 = *v191;
  }
  if (v195)
  {
    v231 = *(_DWORD *)(v195 - 4);
    if (v231 >= 9 && 6 * *(_DWORD *)(v195 - 12) < v231)
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v4 + 56));
      v195 = *(_QWORD *)(v4 + 56);
      *(_DWORD *)(v4 + 64) = 0;
      if (!v195)
      {
        v196 = 0;
        goto LABEL_200;
      }
LABEL_291:
      v196 = *(_DWORD *)(v195 - 12);
      v197 = 0x7FFFFFFF;
      if (v196 >= 0x7FFFFFFF)
        goto LABEL_201;
      goto LABEL_200;
    }
LABEL_287:
    *(_DWORD *)(v4 + 64) = 0;
    goto LABEL_291;
  }
LABEL_199:
  v196 = 0;
  *(_DWORD *)(v4 + 64) = 0;
LABEL_200:
  v197 = v196;
LABEL_201:
  *(_DWORD *)(v4 + 68) = 2 * v197;
LABEL_202:
  v198 = *(_QWORD *)(v192 + 8);
  if (!v198)
  {
    v198 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v198 = 1;
    *(_QWORD *)(v198 + 8) = v192;
    v200 = *(unsigned int **)(v192 + 8);
    *(_QWORD *)(v192 + 8) = v198;
    if (v200)
    {
      do
      {
        v201 = __ldaxr(v200);
        v202 = v201 - 1;
      }
      while (__stlxr(v202, v200));
      if (!v202)
      {
        atomic_store(1u, v200);
        WTF::fastFree((WTF *)v200, v199);
      }
      v198 = *(_QWORD *)(v192 + 8);
    }
  }
  do
    v203 = __ldaxr((unsigned int *)v198);
  while (__stlxr(v203 + 1, (unsigned int *)v198));
  do
    v204 = __ldaxr((unsigned int *)v198);
  while (__stlxr(v204 + 1, (unsigned int *)v198));
  v247[0] = v198;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)(v4 + 56), v247, (uint64_t)&v248);
  result = v247[0];
  v247[0] = 0;
  if (!result)
    goto LABEL_213;
  do
  {
    v206 = __ldaxr((unsigned int *)result);
    v207 = v206 - 1;
  }
  while (__stlxr(v207, (unsigned int *)result));
  if (!v207)
  {
    atomic_store(1u, (unsigned int *)result);
    result = WTF::fastFree((WTF *)result, v205);
    if (!v198)
      return result;
  }
  else
  {
LABEL_213:
    if (!v198)
      return result;
  }
  do
  {
    v208 = __ldaxr((unsigned int *)v198);
    v209 = v208 - 1;
  }
  while (__stlxr(v209, (unsigned int *)v198));
  if (!v209)
  {
    atomic_store(1u, (unsigned int *)v198);
    return WTF::fastFree((WTF *)v198, v205);
  }
  return result;
}

void sub_1951F2E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GameControllerGamepadProvider::makeInvisibleGamepadsVisible(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  v2 = this;
  v3 = *(_QWORD *)(this + 56);
  if (!v3)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = v4;
    v4 = v3 + 8 * v5;
    goto LABEL_4;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v4 = v3 + 8 * v5;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_3;
  if (!(_DWORD)v5)
  {
    v33 = 0;
    v6 = *(_QWORD *)(this + 56);
    goto LABEL_103;
  }
  v27 = 8 * v5;
  v6 = *(_QWORD *)(this + 56);
  while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
  {
    v6 += 8;
    v27 -= 8;
    if (!v27)
    {
      v6 = v4;
      break;
    }
  }
LABEL_4:
  if (!v3)
  {
    v7 = 0;
    goto LABEL_6;
  }
  v33 = *(unsigned int *)(v3 - 4);
LABEL_103:
  v7 = v3 + 8 * v33;
LABEL_6:
  if (v7 != v6)
  {
    while (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v8 = v6 + 8;
      v6 = v4;
      if (v8 != v4)
      {
        v6 = v8;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
  }
  if (v3)
    v9 = v3 + 8 * *(unsigned int *)(v3 - 4);
  else
    v9 = 0;
  if (v6 != v9)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v2 + 8);
      if (!v10)
        break;
      v12 = *(unsigned int *)(v10 - 4);
      v11 = (uint64_t *)(v10 + 8 * v12);
      if (!*(_DWORD *)(v10 - 12))
        goto LABEL_20;
      if (!(_DWORD)v12)
      {
        v25 = 0;
        v13 = *(uint64_t **)(v2 + 8);
        goto LABEL_79;
      }
      v18 = 8 * v12;
      v13 = *(uint64_t **)(v2 + 8);
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        ++v13;
        v18 -= 8;
        if (!v18)
        {
          v13 = v11;
          break;
        }
      }
LABEL_21:
      if (v10)
      {
        v25 = *(unsigned int *)(v10 - 4);
LABEL_79:
        v14 = (uint64_t *)(v10 + 8 * v25);
        goto LABEL_23;
      }
      v14 = 0;
LABEL_23:
      if (v14 != v13)
      {
        while (!*(_QWORD *)(*v13 + 8))
        {
          v15 = v13 + 1;
          v13 = v11;
          if (v15 != v11)
          {
            v13 = v15;
            while ((unint64_t)(*v13 + 1) <= 1)
            {
              if (++v13 == v11)
              {
                v13 = v11;
                break;
              }
            }
          }
          if (v13 == v14)
          {
            v13 = v14;
            break;
          }
        }
      }
      v16 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      if (v10)
        v17 = (uint64_t *)(v10 + 8 * *(unsigned int *)(v10 - 4));
      else
        v17 = 0;
      while (v13 != v17)
      {
        v20 = *v13;
        v19 = v13 + 1;
        this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v20 + 8) + 16))(*(_QWORD *)(v20 + 8), v16, 1);
        v21 = v11;
        if (v19 != v11)
        {
          v21 = v19;
          while ((unint64_t)(*v21 + 1) <= 1)
          {
            if (++v21 == v11)
            {
              v21 = v11;
              break;
            }
          }
        }
        v13 = v14;
        if (v21 != v14)
        {
          v13 = v21;
          if (!*(_QWORD *)(*v21 + 8))
          {
            while (1)
            {
              v22 = v13 + 1;
              v13 = v11;
              if (v22 != v11)
              {
                v13 = v22;
                while ((unint64_t)(*v13 + 1) <= 1)
                {
                  if (++v13 == v11)
                  {
                    v13 = v11;
                    break;
                  }
                }
              }
              if (v13 == v14)
                break;
              if (*(_QWORD *)(*v13 + 8))
                goto LABEL_57;
            }
            v13 = v14;
          }
        }
LABEL_57:
        ++*(_DWORD *)(v2 + 16);
      }
      v23 = v4;
      if (v6 + 8 != v4)
      {
        v23 = v6 + 8;
        while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
        {
          v23 += 8;
          if (v23 == v4)
          {
            v23 = v4;
            break;
          }
        }
      }
      v6 = v7;
      if (v23 != v7)
      {
        v6 = v23;
        if (!*(_QWORD *)(*(_QWORD *)v23 + 8))
        {
          while (1)
          {
            v24 = v6 + 8;
            v6 = v4;
            if (v24 != v4)
            {
              v6 = v24;
              while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
              {
                v6 += 8;
                if (v6 == v4)
                {
                  v6 = v4;
                  break;
                }
              }
            }
            if (v6 == v7)
              break;
            if (*(_QWORD *)(*(_QWORD *)v6 + 8))
              goto LABEL_75;
          }
          v6 = v7;
        }
      }
LABEL_75:
      ++*(_DWORD *)(v2 + 64);
      if (v6 == v9)
      {
        v3 = *(_QWORD *)(v2 + 56);
        goto LABEL_80;
      }
    }
    v11 = 0;
    v12 = 0;
LABEL_20:
    v13 = v11;
    v11 = (uint64_t *)(v10 + 8 * v12);
    goto LABEL_21;
  }
LABEL_80:
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = 0;
    v28 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v28)
    {
      for (i = 0; i != v28; ++i)
      {
        v30 = *(unsigned int **)(v3 + 8 * i);
        if (v30 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v30)
          {
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              atomic_store(1u, v30);
              WTF::fastFree((WTF *)v30, a2);
            }
          }
        }
      }
    }
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
    v26 = *(_QWORD *)(v2 + 56);
    *(_DWORD *)(v2 + 64) = 0;
    if (v26)
    {
      LODWORD(v26) = *(_DWORD *)(v26 - 12);
      if (v26 > 0x7FFFFFFE)
        LODWORD(v26) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v26) = 0;
    *(_DWORD *)(v2 + 64) = 0;
  }
  *(_DWORD *)(v2 + 68) = 2 * v26;
  return this;
}

uint64_t WebCore::GameControllerGamepadProvider::startMonitoringGamepads(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  WebCore *v23;
  _BOOL8 inited;
  _BOOL8 v25;
  _BOOL8 v26;
  _BOOL8 v27;
  _BOOL8 v28;
  _BOOL8 v29;
  _BOOL8 v30;
  _BOOL8 v31;
  _BOOL8 v32;
  _BOOL8 v33;
  _BOOL8 v34;
  _BOOL8 v35;
  _BOOL8 v36;
  _BOOL8 v37;
  _BOOL8 v38;
  void *canLoad_GameController_GCControllerDidConnectNotification;
  void *v40;
  const void *v41;
  const void *v42;
  void *canLoad_GameController_GCControllerDidDisconnectNotification;
  void *v44;
  const void *v45;
  const void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[24];
  WTF *v68;
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(_DWORD *)(a1 + 16) + 1;
  *(_DWORD *)(a1 + 16) = v6;
  if (v6 > v5)
  {
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      v8 = 0;
      *(_DWORD *)(a1 + 16) = 0;
LABEL_4:
      v9 = v8;
LABEL_5:
      *(_DWORD *)(a1 + 20) = 2 * v9;
      goto LABEL_6;
    }
    v52 = *(_DWORD *)(v7 - 4);
    if (!v52)
      goto LABEL_65;
    v53 = 0;
    do
    {
      while (1)
      {
        v54 = --v52;
        v55 = *(_QWORD *)(v7 + 8 * v52);
        if ((unint64_t)(v55 + 1) >= 2 && !*(_QWORD *)(v55 + 8))
          break;
        if (!v52)
          goto LABEL_55;
      }
      *(_QWORD *)(v7 + 8 * v52) = 0;
      do
      {
        v56 = __ldaxr((unsigned int *)v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, (unsigned int *)v55));
      if (!v57)
      {
        atomic_store(1u, (unsigned int *)v55);
        v62 = v53;
        WTF::fastFree((WTF *)v55, a2);
        v54 = v52;
        v53 = v62;
      }
      *(_QWORD *)(v7 + 8 * v54) = -1;
      ++v53;
    }
    while (v54);
LABEL_55:
    v7 = *v4;
    if (v53)
    {
      *(_DWORD *)(v7 - 16) += v53;
      v58 = *v4;
      if (*v4)
        v59 = *(_DWORD *)(v58 - 12);
      else
        v59 = 0;
      *(_DWORD *)(v58 - 12) = v59 - v53;
      v7 = *v4;
    }
    if (!v7)
      goto LABEL_3;
    v60 = *(_DWORD *)(v7 - 4);
    if (v60 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v60)
    {
LABEL_65:
      *(_DWORD *)(a1 + 16) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
      v7 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = 0;
      if (!v7)
      {
        v8 = 0;
        goto LABEL_4;
      }
    }
    v8 = *(_DWORD *)(v7 - 12);
    v9 = 0x7FFFFFFF;
    if (v8 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v10 = a2[1];
  if (!v10)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = a2;
    v12 = (unsigned int *)a2[1];
    a2[1] = v10;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
      v10 = a2[1];
    }
  }
  do
    v15 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v15 + 1, (unsigned int *)v10));
  do
    v16 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v16 + 1, (unsigned int *)v10));
  v68 = (WTF *)v10;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v4, &v68, (uint64_t)v67);
  result = (uint64_t)v68;
  v68 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v19 = __ldaxr((unsigned int *)result);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)result));
  if (!v20)
  {
    atomic_store(1u, (unsigned int *)result);
    result = WTF::fastFree((WTF *)result, v17);
    if (!v10)
      goto LABEL_21;
  }
  else
  {
LABEL_17:
    if (!v10)
      goto LABEL_21;
  }
  do
  {
    v21 = __ldaxr((unsigned int *)v10);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v10));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v10);
    result = WTF::fastFree((WTF *)v10, v17);
  }
LABEL_21:
  if (!*(_QWORD *)(a1 + 72))
  {
    if ((WebCore::GameControllerGamepadProvider::prewarmGameControllerDevicesIfNecessary(void)::prewarmed & 1) == 0)
    {
      v23 = (WebCore *)objc_msgSend((id)WebCore::getGCControllerClass((WebCore *)result), "__openXPC_and_CBApplicationDidBecomeActive");
      inited = WebCore::init_GameController_GCInputButtonA(v23);
      v25 = WebCore::init_GameController_GCInputButtonB((WebCore *)inited);
      v26 = WebCore::init_GameController_GCInputButtonX((WebCore *)v25);
      v27 = WebCore::init_GameController_GCInputButtonY((WebCore *)v26);
      v28 = WebCore::init_GameController_GCInputButtonHome((WebCore *)v27);
      v29 = WebCore::init_GameController_GCInputButtonMenu((WebCore *)v28);
      v30 = WebCore::init_GameController_GCInputButtonOptions((WebCore *)v29);
      v31 = WebCore::init_GameController_GCInputDirectionPad((WebCore *)v30);
      v32 = WebCore::init_GameController_GCInputLeftShoulder((WebCore *)v31);
      v33 = WebCore::init_GameController_GCInputLeftTrigger((WebCore *)v32);
      v34 = WebCore::init_GameController_GCInputLeftThumbstick((WebCore *)v33);
      v35 = WebCore::init_GameController_GCInputLeftThumbstickButton((WebCore *)v34);
      v36 = WebCore::init_GameController_GCInputRightShoulder((WebCore *)v35);
      v37 = WebCore::init_GameController_GCInputRightTrigger((WebCore *)v36);
      v38 = WebCore::init_GameController_GCInputRightThumbstick((WebCore *)v37);
      result = WebCore::init_GameController_GCInputRightThumbstickButton((WebCore *)v38);
      WebCore::GameControllerGamepadProvider::prewarmGameControllerDevicesIfNecessary(void)::prewarmed = 1;
    }
    canLoad_GameController_GCControllerDidConnectNotification = (void *)WebCore::canLoad_GameController_GCControllerDidConnectNotification((WebCore *)result);
    if ((_DWORD)canLoad_GameController_GCControllerDidConnectNotification)
    {
      v40 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v41 = (const void *)objc_msgSend(v40, "addObserverForName:object:queue:usingBlock:", WebCore::constantGameControllerGCControllerDidConnectNotification, 0, 0, &__block_literal_global_16_8);
      v42 = v41;
      if (v41)
        CFRetain(v41);
      canLoad_GameController_GCControllerDidConnectNotification = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v42;
      if (canLoad_GameController_GCControllerDidConnectNotification)
        CFRelease(canLoad_GameController_GCControllerDidConnectNotification);
    }
    canLoad_GameController_GCControllerDidDisconnectNotification = (void *)WebCore::canLoad_GameController_GCControllerDidDisconnectNotification((WebCore *)canLoad_GameController_GCControllerDidConnectNotification);
    if ((_DWORD)canLoad_GameController_GCControllerDidDisconnectNotification)
    {
      v44 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v45 = (const void *)objc_msgSend(v44, "addObserverForName:object:queue:usingBlock:", WebCore::constantGameControllerGCControllerDidDisconnectNotification, 0, 0, &__block_literal_global_17_2);
      v46 = v45;
      if (v45)
        CFRetain(v45);
      canLoad_GameController_GCControllerDidDisconnectNotification = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v46;
      if (canLoad_GameController_GCControllerDidDisconnectNotification)
        CFRelease(canLoad_GameController_GCControllerDidDisconnectNotification);
    }
    v47 = (void *)objc_msgSend((id)WebCore::getGCControllerClass((WebCore *)canLoad_GameController_GCControllerDidDisconnectNotification), "controllers");
    v48 = v47;
    if (v47)
      objc_msgSend(v47, "count");
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    result = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
    v49 = result;
    if (result)
    {
      v50 = *(_QWORD *)v64;
      do
      {
        v51 = 0;
        do
        {
          if (*(_QWORD *)v64 != v50)
            objc_enumerationMutation(v48);
          WebCore::GameControllerGamepadProvider::controllerDidConnect(a1, *(void **)(*((_QWORD *)&v63 + 1) + 8 * v51++), 1);
        }
        while (v49 != v51);
        result = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
        v49 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1951F3838(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23)
{
  unsigned int *v23;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  if (!a23)
    goto LABEL_4;
  do
  {
    v25 = __ldaxr((unsigned int *)a23);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, (unsigned int *)a23));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)a23);
    WTF::fastFree(a23, a2);
    if (!v23)
      goto LABEL_9;
  }
  else
  {
LABEL_4:
    if (!v23)
      goto LABEL_9;
  }
  do
  {
    v27 = __ldaxr(v23);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v23));
  if (!v28)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, a2);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore29GameControllerGamepadProvider23startMonitoringGamepadsERNS_21GamepadProviderClientE_block_invoke(int a1, WebCore::GameControllerGamepadProvider *this)
{
  WebCore::GameControllerGamepadProvider *v2;

  v2 = this;
  if ((byte_1ECE81833 & 1) == 0)
  {
    WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(this);
    v2 = this;
    byte_1ECE81833 = 1;
  }
  return WebCore::GameControllerGamepadProvider::controllerDidConnect((uint64_t)&qword_1ECE81860, (void *)-[WebCore::GameControllerGamepadProvider object](v2, "object"), 0);
}

uint64_t ___ZN7WebCore29GameControllerGamepadProvider23startMonitoringGamepadsERNS_21GamepadProviderClientE_block_invoke_2(WebCore::GameControllerGamepadProvider *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;

  if ((byte_1ECE81833 & 1) == 0)
  {
    WebCore::GameControllerGamepadProvider::GameControllerGamepadProvider(a1);
    byte_1ECE81833 = 1;
  }
  v3 = objc_msgSend(a2, "object");
  if (!(_QWORD)xmmword_1ECE81880)
    goto LABEL_11;
  v5 = *(_DWORD *)(xmmword_1ECE81880 - 8);
  v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(_QWORD *)(xmmword_1ECE81880 + 16 * v9);
  if (v10 != v3)
  {
    v11 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v11) & v5;
      v10 = *(_QWORD *)(xmmword_1ECE81880 + 16 * v9);
      ++v11;
      if (v10 == v3)
        goto LABEL_10;
    }
    v9 = *(unsigned int *)(xmmword_1ECE81880 - 4);
  }
LABEL_10:
  if (v9 != *(_DWORD *)(xmmword_1ECE81880 - 4))
  {
    v31 = (_QWORD *)(xmmword_1ECE81880 + 16 * v9);
    v12 = (_QWORD *)v31[1];
    v31[1] = 0;
    v32 = (_QWORD *)xmmword_1ECE81880;
    if (!(_QWORD)xmmword_1ECE81880
      || (v32 = (_QWORD *)(xmmword_1ECE81880 + 16 * *(unsigned int *)(xmmword_1ECE81880 - 4)), v32 != v31))
    {
      if (v32 != v31)
      {
        *v31 = -1;
        v31[1] = 0;
        ++*(_DWORD *)(xmmword_1ECE81880 - 16);
        v33 = (_QWORD)xmmword_1ECE81880 ? *(_DWORD *)(xmmword_1ECE81880 - 12) - 1 : -1;
        *(_DWORD *)(xmmword_1ECE81880 - 12) = v33;
        if ((_QWORD)xmmword_1ECE81880)
        {
          v35 = *(_DWORD *)(xmmword_1ECE81880 - 4);
          if (6 * *(_DWORD *)(xmmword_1ECE81880 - 12) < v35 && v35 >= 9)
            WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WebCore::GameControllerGamepad>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash((uint64_t *)&xmmword_1ECE81880, v35 >> 1);
        }
      }
    }
  }
  else
  {
LABEL_11:
    v12 = 0;
  }
  if (dword_1ECE81894)
  {
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(*((_QWORD *)&xmmword_1ECE81880 + 1) + 8 * v13);
      v15 = v14 ? *(_QWORD **)(v14 + 8) : 0;
      if (v15 == v12)
        break;
      if (dword_1ECE81894 == ++v13)
        goto LABEL_25;
    }
    if (v13 >= dword_1ECE81894)
    {
      __break(0xC471u);
      JUMPOUT(0x1951F3E48);
    }
    *(_QWORD *)(*((_QWORD *)&xmmword_1ECE81880 + 1) + 8 * v13) = 0;
    if (v14)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v14);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v14));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v14);
        WTF::fastFree((WTF *)v14, v4);
      }
    }
  }
LABEL_25:
  LODWORD(xmmword_1ECE818A0) = xmmword_1ECE818A0 + 1;
  if (xmmword_1ECE818A0 > DWORD1(xmmword_1ECE818A0))
  {
    v18 = qword_1ECE81898;
    if (!qword_1ECE81898)
    {
LABEL_27:
      v19 = 0;
      LODWORD(xmmword_1ECE818A0) = 0;
LABEL_28:
      v20 = v19;
LABEL_29:
      DWORD1(xmmword_1ECE818A0) = 2 * v20;
      goto LABEL_30;
    }
    v38 = *(_DWORD *)(qword_1ECE81898 - 4);
    if (!v38)
      goto LABEL_110;
    v39 = 0;
    do
    {
      while (1)
      {
        v40 = --v38;
        v41 = *(_QWORD *)(v18 + 8 * v38);
        if ((unint64_t)(v41 + 1) >= 2 && !*(_QWORD *)(v41 + 8))
          break;
        if (!v38)
          goto LABEL_100;
      }
      *(_QWORD *)(v18 + 8 * v38) = 0;
      do
      {
        v42 = __ldaxr((unsigned int *)v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, (unsigned int *)v41));
      if (!v43)
      {
        atomic_store(1u, (unsigned int *)v41);
        WTF::fastFree((WTF *)v41, v4);
        v40 = v38;
      }
      *(_QWORD *)(v18 + 8 * v40) = -1;
      ++v39;
    }
    while (v40);
LABEL_100:
    v18 = qword_1ECE81898;
    if (v39)
    {
      *(_DWORD *)(qword_1ECE81898 - 16) += v39;
      if (qword_1ECE81898)
        v44 = *(_DWORD *)(qword_1ECE81898 - 12);
      else
        v44 = 0;
      *(_DWORD *)(qword_1ECE81898 - 12) = v44 - v39;
      v18 = qword_1ECE81898;
    }
    if (!v18)
      goto LABEL_27;
    v45 = *(_DWORD *)(v18 - 4);
    if (v45 < 9 || 6 * *(_DWORD *)(v18 - 12) >= v45)
    {
LABEL_110:
      LODWORD(xmmword_1ECE818A0) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1ECE81898);
      v18 = qword_1ECE81898;
      LODWORD(xmmword_1ECE818A0) = 0;
      if (!qword_1ECE81898)
      {
        v19 = 0;
        goto LABEL_28;
      }
    }
    v19 = *(_DWORD *)(v18 - 12);
    v20 = 0x7FFFFFFF;
    if (v19 >= 0x7FFFFFFF)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_30:
  v21 = (WTF *)v12[1];
  if (v21 && *((_QWORD *)v21 + 1))
    WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(&qword_1ECE81898, v21);
  if (!qword_1ECE81868)
  {
    v22 = 0;
    v23 = 0;
LABEL_35:
    v24 = v22;
    v22 = qword_1ECE81868 + 8 * v23;
    goto LABEL_36;
  }
  v23 = *(unsigned int *)(qword_1ECE81868 - 4);
  v22 = qword_1ECE81868 + 8 * v23;
  if (!*(_DWORD *)(qword_1ECE81868 - 12))
    goto LABEL_35;
  if (!(_DWORD)v23)
  {
    v37 = 0;
    v24 = qword_1ECE81868;
    goto LABEL_112;
  }
  v34 = 8 * v23;
  v24 = qword_1ECE81868;
  while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
  {
    v24 += 8;
    v34 -= 8;
    if (!v34)
    {
      v24 = v22;
      break;
    }
  }
LABEL_36:
  if (!qword_1ECE81868)
  {
    v25 = 0;
    goto LABEL_38;
  }
  v37 = *(unsigned int *)(qword_1ECE81868 - 4);
LABEL_112:
  v25 = qword_1ECE81868 + 8 * v37;
LABEL_38:
  if (v25 != v24)
  {
    while (!*(_QWORD *)(*(_QWORD *)v24 + 8))
    {
      v26 = v24 + 8;
      v24 = v22;
      if (v26 != v22)
      {
        v24 = v26;
        while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
        {
          v24 += 8;
          if (v24 == v22)
          {
            v24 = v22;
            break;
          }
        }
      }
      if (v24 == v25)
      {
        v24 = v25;
        break;
      }
    }
  }
  if (qword_1ECE81868)
    v27 = qword_1ECE81868 + 8 * *(unsigned int *)(qword_1ECE81868 - 4);
  else
    v27 = 0;
  for (; v24 != v27; ++dword_1ECE81870)
  {
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)v24 + 8) + 24))(*(_QWORD *)(*(_QWORD *)v24 + 8), v12);
    v28 = v22;
    if (v24 + 8 != v22)
    {
      v28 = v24 + 8;
      while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
      {
        v28 += 8;
        if (v28 == v22)
        {
          v28 = v22;
          break;
        }
      }
    }
    v24 = v25;
    if (v28 != v25)
    {
      v24 = v28;
      if (!*(_QWORD *)(*(_QWORD *)v28 + 8))
      {
        while (1)
        {
          v29 = v24 + 8;
          v24 = v22;
          if (v29 != v22)
          {
            v24 = v29;
            while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
            {
              v24 += 8;
              if (v24 == v22)
              {
                v24 = v22;
                break;
              }
            }
          }
          if (v24 == v25)
            break;
          if (*(_QWORD *)(*(_QWORD *)v24 + 8))
            goto LABEL_66;
        }
        v24 = v25;
      }
    }
LABEL_66:
    ;
  }
  return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
}

void sub_1951F3E54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GameControllerGamepadProvider::stopMonitoringGamepads(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  WTF *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = result;
  v4 = (uint64_t *)(result + 8);
  v5 = *(_DWORD *)(result + 20);
  v6 = *(_DWORD *)(result + 16) + 1;
  *(_DWORD *)(result + 16) = v6;
  if (v6 > v5)
  {
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      LODWORD(v7) = 0;
      *(_DWORD *)(v3 + 16) = 0;
LABEL_4:
      v8 = v7;
LABEL_5:
      *(_DWORD *)(v3 + 20) = 2 * v8;
      goto LABEL_6;
    }
    v20 = *(unsigned int *)(v7 - 4);
    if (!(_DWORD)v20)
      goto LABEL_58;
    v21 = 0;
    do
    {
      while (1)
      {
        v22 = --v20;
        result = *(_QWORD *)(v7 + 8 * v20);
        if ((unint64_t)(result + 1) >= 2 && !*(_QWORD *)(result + 8))
          break;
        if (!(_DWORD)v20)
          goto LABEL_48;
      }
      *(_QWORD *)(v7 + 8 * v20) = 0;
      do
      {
        v23 = __ldaxr((unsigned int *)result);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, (unsigned int *)result));
      if (!v24)
      {
        atomic_store(1u, (unsigned int *)result);
        v32 = v20;
        v33 = v7;
        v31 = v21;
        v34 = v20;
        result = WTF::fastFree((WTF *)result, a2);
        v7 = v33;
        v22 = v34;
        v20 = v32;
        v21 = v31;
      }
      *(_QWORD *)(v7 + 8 * v22) = -1;
      ++v21;
    }
    while (v22);
LABEL_48:
    v7 = *v4;
    if (v21)
    {
      *(_DWORD *)(v7 - 16) += v21;
      v25 = *v4;
      if (*v4)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      *(_DWORD *)(v25 - 12) = v26 - v21;
      v7 = *v4;
    }
    if (!v7)
      goto LABEL_3;
    v27 = *(_DWORD *)(v7 - 4);
    if (v27 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v27)
    {
LABEL_58:
      *(_DWORD *)(v3 + 16) = 0;
    }
    else
    {
      result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
      v7 = *(_QWORD *)(v3 + 8);
      *(_DWORD *)(v3 + 16) = 0;
      if (!v7)
        goto LABEL_4;
    }
    LODWORD(v7) = *(_DWORD *)(v7 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v9 = (WTF *)a2[1];
  if (v9 && *((_QWORD *)v9 + 1))
    result = WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(v4, v9);
  if (!*(_QWORD *)(v3 + 72))
    return result;
  v10 = *v4;
  if (!*v4 || !*(_DWORD *)(v10 - 12))
    goto LABEL_11;
  v17 = *(unsigned int *)(v10 - 4);
  if ((_DWORD)v17)
  {
    v18 = 8 * v17;
    v19 = (uint64_t *)*v4;
    while ((unint64_t)(*v19 + 1) <= 1)
    {
      ++v19;
      v18 -= 8;
      if (!v18)
        goto LABEL_11;
    }
  }
  else
  {
    v19 = (uint64_t *)*v4;
  }
  v29 = (uint64_t *)(v10 + 8 * v17);
  if (v19 == v29)
  {
LABEL_11:
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *(_QWORD *)(v3 + 72));
    result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *(_QWORD *)(v3 + 80));
    v11 = *(_QWORD **)(v3 + 32);
    if (v11)
    {
      v12 = *((unsigned int *)v11 - 1);
      v13 = &v11[2 * v12];
      if (*((_DWORD *)v11 - 3))
      {
        v14 = *(_QWORD **)(v3 + 32);
        if ((_DWORD)v12)
        {
          v15 = 16 * v12;
          v14 = *(_QWORD **)(v3 + 32);
          while ((unint64_t)(*v14 + 1) <= 1)
          {
            v14 += 2;
            v15 -= 16;
            if (!v15)
            {
              v14 = v13;
              goto LABEL_21;
            }
          }
        }
        goto LABEL_21;
      }
      v14 = &v11[2 * v12];
    }
    else
    {
      v14 = 0;
      v12 = 0;
    }
    v13 = &v11[2 * v12];
LABEL_21:
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
    while (v14 != v11)
    {
      v16 = v14 + 2;
      v14 = v13;
      if (v16 != v13)
      {
        v14 = v16;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 2;
          if (v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
    }
    return result;
  }
  v30 = *v19;
LABEL_65:
  if (!*(_QWORD *)(v30 + 8))
  {
    while (1)
    {
      if (++v19 == v29)
        goto LABEL_11;
      v30 = *v19;
      if ((unint64_t)(*v19 + 1) > 1)
      {
        if (v19 != v29)
          goto LABEL_65;
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t WebCore::GameControllerGamepadProvider::playEffect(uint64_t a1, unsigned int a2, const WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  if (*(_DWORD *)(a1 + 52) <= a2)
  {
    v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2);
  if (!v7)
    goto LABEL_8;
  do
    v10 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v10 + 1, (unsigned int *)v7));
  v11 = *(_QWORD *)(v7 + 8);
  if (v11 && (WTF::equal(*(WTF **)(v11 + 16), *a3, (const WTF::StringImpl *)a3) & 1) != 0)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(v7 + 8) + 40))(*(_QWORD *)(v7 + 8), a4, a5, a6);
  }
  else
  {
LABEL_8:
    v15 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (!v7)
      return result;
  }
  do
  {
    v16 = __ldaxr((unsigned int *)v7);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v7));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v7);
    return WTF::fastFree((WTF *)v7, v13);
  }
  return result;
}

void sub_1951F4290(_Unwind_Exception *a1)
{
  unsigned int *v1;
  uint64_t v2;
  void *v4;
  unsigned int v5;
  unsigned int v6;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
  {
    do
    {
      v5 = __ldaxr(v1);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v1));
    if (!v6)
    {
      atomic_store(1u, v1);
      WTF::fastFree((WTF *)v1, v4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::GameControllerGamepadProvider::stopEffects(uint64_t a1, unsigned int a2, const WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  if (*(_DWORD *)(a1 + 52) <= a2)
  {
    v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2);
  if (!v5)
    goto LABEL_8;
  do
    v6 = __ldaxr((unsigned int *)v5);
  while (__stlxr(v6 + 1, (unsigned int *)v5));
  v7 = *(_QWORD *)(v5 + 8);
  if (v7 && (WTF::equal(*(WTF **)(v7 + 16), *a3, (const WTF::StringImpl *)a3) & 1) != 0)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 8) + 48))(*(_QWORD *)(v5 + 8), a4);
  }
  else
  {
LABEL_8:
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (!v5)
      return result;
  }
  do
  {
    v12 = __ldaxr((unsigned int *)v5);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)v5));
  if (!v13)
  {
    atomic_store(1u, (unsigned int *)v5);
    return WTF::fastFree((WTF *)v5, v9);
  }
  return result;
}

void sub_1951F4400(_Unwind_Exception *a1)
{
  unsigned int *v1;
  uint64_t v2;
  void *v4;
  unsigned int v5;
  unsigned int v6;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
  {
    do
    {
      v5 = __ldaxr(v1);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v1));
    if (!v6)
    {
      atomic_store(1u, v1);
      WTF::fastFree((WTF *)v1, v4);
    }
  }
  _Unwind_Resume(a1);
}

void WebCore::VideoPresentationModelVideoElement::VideoListener::~VideoListener(WebCore::VideoPresentationModelVideoElement::VideoListener *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v5;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = __ldxr((unsigned __int8 *)v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
          if (v6)
            goto LABEL_14;
LABEL_13:
          WTF::fastFree((WTF *)v3, a2);
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_14:
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v5;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = __ldxr((unsigned __int8 *)v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
          if (v6)
            goto LABEL_14;
LABEL_13:
          WTF::fastFree((WTF *)v3, a2);
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_14:
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

float WebCore::VideoPresentationModelVideoElement::videoDimensions(WebCore::VideoPresentationModelVideoElement *this)
{
  return *((float *)this + 15);
}

uint64_t WebCore::VideoPresentationModelVideoElement::hasVideo(WebCore::VideoPresentationModelVideoElement *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t WebCore::VideoPresentationModel::presentingViewController(WebCore::VideoPresentationModel *this)
{
  return 0;
}

void WebCore::VideoPresentationModel::createVideoFullscreenViewController(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::GameControllerGamepad::~GameControllerGamepad(WebCore::GameControllerGamepad *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::GameControllerGamepad::~GameControllerGamepad(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  WTF **v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  const void *v13;

  *(_QWORD *)this = off_1E3348338;
  v3 = *((unsigned int *)this + 25);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)*((_QWORD *)this + 11);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, a2);
        else
          --*(_DWORD *)v6;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 11);
  if (v7)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 21);
  if ((_DWORD)v8)
  {
    v9 = (WTF **)*((_QWORD *)this + 9);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          WTF::fastFree(v11, a2);
        else
          --*(_DWORD *)v11;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 9);
  if (v12)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
    CFRelease(v13);
  WebCore::PlatformGamepad::~PlatformGamepad(this, a2);
}

double WebCore::PlatformGamepad::lastUpdateTime(WebCore::PlatformGamepad *this)
{
  return *((double *)this + 5);
}

uint64_t WebCore::GameControllerGamepad::axisValues(WebCore::GameControllerGamepad *this)
{
  return (uint64_t)this + 72;
}

uint64_t WebCore::GameControllerGamepad::buttonValues(WebCore::GameControllerGamepad *this)
{
  return (uint64_t)this + 88;
}

const char *WebCore::GameControllerGamepad::source(WebCore::GameControllerGamepad *this)
{
  return "GameController";
}

void WebCore::GameControllerGamepadProvider::~GameControllerGamepadProvider(WebCore::GameControllerGamepadProvider *this)
{
  WebCore::GameControllerGamepadProvider::~GameControllerGamepadProvider(this);
  JUMPOUT(0x19AEA7644);
}

{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t j;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)this = &off_1E3348448;
  *((_QWORD *)this + 11) = off_1E32051C0;
  v2 = (WebCore::GameControllerGamepadProvider *)((char *)this + 88);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    v20 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v20)
    {
      for (i = 0; i != v20; ++i)
      {
        v22 = *(unsigned int **)(v7 + 8 * i);
        if (v22 != (unsigned int *)-1)
        {
          *(_QWORD *)(v7 + 8 * i) = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              v30 = v20;
              WTF::fastFree((WTF *)v22, v4);
              v20 = v30;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v7 - 16), v4);
  }
  v8 = *((unsigned int *)this + 13);
  if ((_DWORD)v8)
  {
    v9 = (unsigned int **)*((_QWORD *)this + 5);
    v10 = &v9[v8];
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v4);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  v14 = (WTF *)*((_QWORD *)this + 5);
  if (v14)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v14, v4);
  }
  v15 = *((_QWORD *)this + 4);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      v17 = (uint64_t *)(v15 + 8);
      do
      {
        if (*(v17 - 1) != -1)
        {
          v18 = *v17;
          *v17 = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        }
        v17 += 2;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((WTF *)(v15 - 16), v4);
  }
  *(_QWORD *)this = off_1E33485A0;
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    v25 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v25)
    {
      for (j = 0; j != v25; ++j)
      {
        v27 = *(unsigned int **)(v19 + 8 * j);
        if (v27 != (unsigned int *)-1)
        {
          *(_QWORD *)(v19 + 8 * j) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              v31 = v25;
              WTF::fastFree((WTF *)v27, v4);
              v25 = v31;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v19 - 16), v4);
  }
}

uint64_t WebCore::GameControllerGamepadProvider::platformGamepads(WebCore::GameControllerGamepadProvider *this)
{
  return (uint64_t)this + 40;
}

uint64_t WebCore::GamepadProvider::isMockGamepadProvider(WebCore::GamepadProvider *this)
{
  return 0;
}

uint64_t WebCore::PlatformGamepad::playEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1951F4780(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformGamepad::stopEffects(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1951F47D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

const char *WebCore::PlatformGamepad::source(WebCore::PlatformGamepad *this)
{
  return "Unknown";
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [8]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1951F4F38(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerVideoGravity>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, unsigned __int8 *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::String *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 buf;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::number((WTF::String *)*a4);
  if (!v43)
  {
    v8 = 0;
    if (v42)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v42 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v43)
  {
    v10 = *((_DWORD *)v43 + 4);
    v11 = (v10 >> 2) & 1;
    if (v42 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v42)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v43, (uint64_t)v42, &buf);
  v44 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v42;
  v42 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v27 = (WTF::String *)*a4;
              v46 = 0;
              WTF::String::number(v27);
              v40 = 0;
              v41 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v28;
              v29 = HIDWORD(v41);
              *((_DWORD *)v28 + 4 * HIDWORD(v41)) = buf;
              v30 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v46;
              v31 = v47;
              if (v47)
                *(_DWORD *)v47 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              HIDWORD(v41) = v29 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v40);
              v32 = v40;
              if (HIDWORD(v41))
              {
                v33 = 16 * HIDWORD(v41);
                v34 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v40;
              }
              if (v32)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v17);
              }
              v36 = v47;
              v47 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v38 = __ldxr(v19);
          if (v38 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1951F54A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned int>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, unsigned int *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::String *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 buf;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::number((WTF::String *)*a4);
  if (!v43)
  {
    v8 = 0;
    if (v42)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v42 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v43)
  {
    v10 = *((_DWORD *)v43 + 4);
    v11 = (v10 >> 2) & 1;
    if (v42 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v42)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v43, (uint64_t)v42, &buf);
  v44 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v42;
  v42 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v27 = (WTF::String *)*a4;
              v46 = 0;
              WTF::String::number(v27);
              v40 = 0;
              v41 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v28;
              v29 = HIDWORD(v41);
              *((_DWORD *)v28 + 4 * HIDWORD(v41)) = buf;
              v30 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v46;
              v31 = v47;
              if (v47)
                *(_DWORD *)v47 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              HIDWORD(v41) = v29 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v40);
              v32 = v40;
              if (HIDWORD(v41))
              {
                v33 = 16 * HIDWORD(v41);
                v34 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v40;
              }
              if (v32)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v17);
              }
              v36 = v47;
              v47 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v38 = __ldxr(v19);
          if (v38 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1951F5A0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WebCore::IntSize *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::JSONImpl::Value *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::JSONImpl::Value *v45;
  __int128 buf;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WebCore::IntSize::toJSONObject(a4, (uint64_t *)&buf);
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  if (!v43)
  {
    v8 = 0;
    if (v42)
      goto LABEL_6;
LABEL_80:
    v9 = 0;
    goto LABEL_7;
  }
  v8 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_80;
LABEL_6:
  v9 = *((_DWORD *)v42 + 1);
LABEL_7:
  if ((v9 | v8) < 0)
    goto LABEL_83;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_83;
  if (v43)
  {
    v10 = *((_DWORD *)v43 + 4);
    v11 = (v10 >> 2) & 1;
    if (v42 && (v10 & 4) != 0)
      goto LABEL_12;
  }
  else
  {
    if (v42)
    {
LABEL_12:
      v11 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_13;
    }
    v11 = 1;
  }
LABEL_13:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v43, (uint64_t)v42, &buf);
  v44 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_83:
    __break(0xC471u);
    return result;
  }
  v13 = v42;
  v42 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v47 = 1;
              WebCore::IntSize::toJSONObject(a4, (uint64_t *)&v45);
              WTF::JSONImpl::Value::toJSONString(v45);
              v27 = v45;
              v45 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v27;
              }
              v40 = 0;
              v41 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v28;
              v29 = HIDWORD(v41);
              *((_DWORD *)v28 + 4 * HIDWORD(v41)) = buf;
              v30 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v47;
              v31 = v48;
              if (v48)
                *(_DWORD *)v48 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              HIDWORD(v41) = v29 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v40);
              v32 = v40;
              if (HIDWORD(v41))
              {
                v33 = 16 * HIDWORD(v41);
                v34 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v40;
              }
              if (v32)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v17);
              }
              v36 = v48;
              v48 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v38 = __ldxr(v19);
          if (v38 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1951F5FD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21)
{
  unsigned __int8 *v21;
  int v23;

  v23 = __ldxr(v21);
  if (v23 == 1)
  {
    if (!__stlxr(0, v21))
    {
LABEL_6:
      if (a16)
      {
        if (*(_DWORD *)a16 == 2)
          WTF::StringImpl::destroy(a16, a2);
        else
          *(_DWORD *)a16 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

unsigned int *WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = 8 * v8;
        v12 = (unsigned int **)v7;
        do
        {
          v13 = *v12;
          *v12 = 0;
          *(_QWORD *)v10 = v13;
          result = *v12;
          *v12 = 0;
          if (result)
          {
            if (*result == 1)
              result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
            else
              --*result;
          }
          v10 += 2;
          ++v12;
          v11 -= 8;
        }
        while (v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::GameControllerGamepadProvider::*&)(void),WebCore::GameControllerGamepadProvider*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WebCore::GameControllerGamepad>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WebCore::GameControllerGamepad>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WebCore::GameControllerGamepad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::ApplePayAMSUIRequest>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;

  v17 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v15);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v7);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (*((_DWORD *)v17 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v17, "engagementRequest", 18, "ApplePayAMSUIRequest", 21, "JSON", 5);
LABEL_10:
    *(_DWORD *)(a3 + 8) = 1;
    return result;
  }
  v10 = a2[7];
  JSC::JSONStringify();
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
  {
    v16 = 1;
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 = 1;
    v12 = 1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v16 = 0;
    v15 = 0;
    *(_QWORD *)a3 = v18;
  }
  *(_DWORD *)(a3 + 8) = v12;
  return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v11])(&v18, &v15);
}

void WebCore::convertDictionary<WebCore::ApplePayAutomaticReloadPaymentRequest>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  JSC::JSCell *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  unint64_t v19;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSC::VM *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  char v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[24];
  uint64_t v73;
  __int16 v74;
  __int128 v75;
  uint64_t v76;
  JSC::VM *v77;
  WTF::StringImpl *v78;
  unint64_t v79[2];

  v77 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
LABEL_5:
    v68 = 0;
    v69 = 1;
    v70 = 0uLL;
    LOBYTE(v71) = 0;
    *((_QWORD *)&v71 + 1) = 0x7FF8000000000000;
    v72[0] = 1;
    *(_DWORD *)&v72[4] = 1;
    *(int64x2_t *)&v72[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    v73 = 0;
    v74 = 0;
    v76 = 0;
    v75 = 0uLL;
    if (v5 == 2)
      goto LABEL_11;
    WTF::AtomStringImpl::addLiteral();
    v8 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v59);
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v7);
      else
        *(_DWORD *)v59 -= 2;
    }
    if (*((_DWORD *)v77 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v77))
    {
      *(_DWORD *)(a3 + 112) = 1;
      goto LABEL_80;
    }
    if (v8 == (JSC::JSCell *)10)
    {
LABEL_11:
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v77, "automaticReloadBilling", 23, "ApplePayAutomaticReloadPaymentRequest", 38, "ApplePayLineItem", 17);
      *(_DWORD *)(a3 + 112) = 1;
LABEL_80:
      WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v68, v9);
      return;
    }
    WebCore::convertDictionary<WebCore::ApplePayLineItem>(v8, (uint64_t)a2, (uint64_t)&v59);
    v10 = v67;
    if (v67)
    {
      *(_DWORD *)(a3 + 112) = 1;
      if ((_DWORD)v10 == -1)
        goto LABEL_80;
      goto LABEL_79;
    }
    v11 = (char)v59;
    v13 = v60;
    v12 = v61;
    v60 = 0;
    v61 = 0;
    v71 = v62;
    *(_OWORD *)v72 = v63;
    v14 = v65;
    v65 = 0;
    v69 = (char)v59;
    *(_QWORD *)&v70 = v13;
    *((_QWORD *)&v70 + 1) = v12;
    *(_QWORD *)&v72[16] = v64;
    v73 = v14;
    v54 = v14;
    v74 = v66;
    WTF::AtomStringImpl::addLiteral();
    v16 = JSC::JSObject::get(Object, a2, (unint64_t)v57);
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v15);
      else
        *(_DWORD *)v57 -= 2;
    }
    if (*((_DWORD *)v77 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v77))
      goto LABEL_36;
    if (v16 == 10)
    {
      v17 = 0;
      goto LABEL_30;
    }
    v55 = (WTF::StringImpl *)v16;
    v18 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v55, a2);
LABEL_25:
      if (!*((_DWORD *)v18 + 20))
      {
        v17 = (WTF::StringImpl *)v79[0];
LABEL_27:
        v58 = 0;
LABEL_28:
        v20 = 0;
        v57 = 0;
        *(_QWORD *)&v75 = v17;
        v21 = 1;
        goto LABEL_29;
      }
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
      v17 = (WTF::StringImpl *)v79[0];
      if ((hasExceptionsAfterHandlingTraps & 1) == 0)
        goto LABEL_27;
      v20 = 1;
      v58 = 1;
      v79[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::destroy(v17, v45);
          v20 = v58;
          if (!v58)
          {
            v17 = v57;
            goto LABEL_28;
          }
          *(_DWORD *)(a3 + 112) = 1;
          if (v20 == -1)
            goto LABEL_79;
          v21 = 0;
          v17 = 0;
LABEL_29:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v20])(&v55, &v57);
          if (!v21)
          {
LABEL_79:
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v10])(&v57, &v59);
            goto LABEL_80;
          }
LABEL_30:
          v53 = v12;
          WTF::AtomStringImpl::addLiteral();
          v22 = v57;
          v24 = JSC::JSObject::get(Object, a2, (unint64_t)v57);
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v23);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (*((_DWORD *)v77 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v77))
            goto LABEL_36;
          if (v24 == 10)
          {
            WebCore::throwRequiredMemberTypeError((int)a2, (int)&v77, "managementURL", 14, "ApplePayAutomaticReloadPaymentRequest", 38, "DOMString", 10);
LABEL_36:
            *(_DWORD *)(a3 + 112) = 1;
            goto LABEL_79;
          }
          v55 = (WTF::StringImpl *)v24;
          v25 = (JSC::VM *)*((_QWORD *)a2 + 7);
          if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v55, a2);
LABEL_43:
            v52 = v13;
            if (*((_DWORD *)v25 + 20))
            {
              v46 = JSC::VM::hasExceptionsAfterHandlingTraps(v25);
              v27 = (WTF::StringImpl *)v79[0];
              if (v46)
              {
                v58 = 1;
                v79[0] = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2)
                    WTF::StringImpl::destroy(v27, v47);
                  else
                    *(_DWORD *)v27 -= 2;
                }
                v31 = 1;
                goto LABEL_52;
              }
            }
            else
            {
              v27 = (WTF::StringImpl *)v79[0];
            }
            v58 = 0;
            v57 = 0;
            *((_QWORD *)&v75 + 1) = v27;
            WTF::AtomStringImpl::addLiteral();
            v28 = v55;
            v30 = JSC::JSObject::get(Object, a2, (unint64_t)v55);
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v29);
              else
                *(_DWORD *)v28 -= 2;
            }
            if (*((_DWORD *)v77 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v77) & 1) != 0)
            {
LABEL_51:
              v31 = 0;
LABEL_52:
              *(_DWORD *)(a3 + 112) = 1;
LABEL_78:
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v31])(&v55, &v57);
              goto LABEL_79;
            }
            if (v30 == 10)
            {
              WebCore::throwRequiredMemberTypeError((int)a2, (int)&v77, "paymentDescription", 19, "ApplePayAutomaticReloadPaymentRequest", 38, "DOMString", 10);
              goto LABEL_51;
            }
            v79[0] = v30;
            v32 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((v30 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v30 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v79, a2);
LABEL_59:
              if (*((_DWORD *)v32 + 20))
              {
                v48 = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
                v34 = v78;
                if (v48)
                {
                  v56 = 1;
                  v78 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, v49);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v41 = 1;
                  v42 = 1;
                  goto LABEL_77;
                }
              }
              else
              {
                v34 = v78;
              }
              v56 = 0;
              v55 = 0;
              v68 = v34;
              WTF::AtomStringImpl::addLiteral();
              v35 = (WTF::StringImpl *)v79[0];
              v37 = JSC::JSObject::get(Object, a2, v79[0]);
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v36);
                else
                  *(_DWORD *)v35 -= 2;
              }
              if (*((_DWORD *)v77 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v77) & 1) != 0)
                goto LABEL_129;
              if (v37 == 10)
              {
                v38 = 0;
                goto LABEL_76;
              }
              v79[0] = v37;
              v39 = (JSC::VM *)*((_QWORD *)a2 + 7);
              if ((v37 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v37 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v79, a2);
LABEL_74:
                if (*((_DWORD *)v39 + 20))
                {
                  v51 = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
                  v38 = v78;
                  if (v51)
                  {
                    v78 = 0;
                    if (v38)
                    {
                      if (*(_DWORD *)v38 == 2)
                        WTF::StringImpl::destroy(v38, v50);
                      else
                        *(_DWORD *)v38 -= 2;
                    }
LABEL_129:
                    v42 = 0;
                    v41 = 1;
                    goto LABEL_77;
                  }
                }
                else
                {
                  v38 = v78;
                }
LABEL_76:
                v41 = 0;
                v42 = 0;
                *(_QWORD *)a3 = v34;
                *(_BYTE *)(a3 + 8) = v11;
                v70 = 0u;
                *(_QWORD *)(a3 + 16) = v52;
                *(_QWORD *)(a3 + 24) = v53;
                v43 = *(_OWORD *)v72;
                *(_OWORD *)(a3 + 32) = v71;
                *(_OWORD *)(a3 + 48) = v43;
                v68 = 0;
                v73 = 0;
                *(_QWORD *)(a3 + 64) = *(_QWORD *)&v72[16];
                *(_QWORD *)(a3 + 72) = v54;
                *(_WORD *)(a3 + 80) = v74;
                v75 = 0u;
                *(_QWORD *)(a3 + 88) = v17;
                *(_QWORD *)(a3 + 96) = v27;
                v76 = 0;
                *(_QWORD *)(a3 + 104) = v38;
LABEL_77:
                *(_DWORD *)(a3 + 112) = v41;
                ((void (*)(unint64_t *, WTF::StringImpl **))off_1E334B060[v42])(v79, &v55);
                v31 = 0;
                goto LABEL_78;
              }
              v40 = *(WTF::StringImpl **)(v37 + 8);
              if ((v40 & 1) != 0)
              {
                v40 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v37, a2);
                if (!v40)
                  goto LABEL_73;
              }
              else if (!v40)
              {
LABEL_73:
                v78 = v40;
                goto LABEL_74;
              }
              *(_DWORD *)v40 += 2;
              goto LABEL_73;
            }
            v33 = *(WTF::StringImpl **)(v30 + 8);
            if ((v33 & 1) != 0)
            {
              v33 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v30, a2);
              if (!v33)
                goto LABEL_58;
            }
            else if (!v33)
            {
LABEL_58:
              v78 = v33;
              goto LABEL_59;
            }
            *(_DWORD *)v33 += 2;
            goto LABEL_58;
          }
          v26 = *(_QWORD *)(v24 + 8);
          if ((v26 & 1) != 0)
          {
            v26 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v24, a2);
            if (!v26)
              goto LABEL_42;
          }
          else if (!v26)
          {
LABEL_42:
            v79[0] = v26;
            goto LABEL_43;
          }
          *(_DWORD *)v26 += 2;
          goto LABEL_42;
        }
        *(_DWORD *)v17 -= 2;
      }
      v21 = 0;
      v17 = 0;
      *(_DWORD *)(a3 + 112) = 1;
      goto LABEL_29;
    }
    v19 = *(_QWORD *)(v16 + 8);
    if ((v19 & 1) != 0)
    {
      v19 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, a2);
      if (!v19)
        goto LABEL_24;
    }
    else if (!v19)
    {
LABEL_24:
      v79[0] = v19;
      goto LABEL_25;
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_24;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::Structure *)JSC::JSCell::getObject(this);
    if (Object)
      goto LABEL_5;
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 112) = 1;
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::ApplePayAutomaticReloadPaymentRequest *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  bzero((void *)(v10 + 16), v9);
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  v12 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)a3 + 8);
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v13 = v52;
  v52 = 0;
  v53 = v10;
  v54 = -1;
  v55 = 0x1000000;
  v56 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v13, v12, 0, (uint64_t)&v52);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  v15 = *((_QWORD *)a3 + 11);
  if (!v15)
    goto LABEL_17;
  v16 = *((_QWORD *)this + 7);
  v17 = *(_DWORD *)(v15 + 4);
  if (v17)
  {
    if (v17 != 1)
    {
LABEL_10:
      v18 = *(_QWORD *)(v16 + 64760);
      if (!v18 || v15 != *(_QWORD *)(v18 + 8))
        v18 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_13;
    }
    v44 = *(unsigned __int8 **)(v15 + 8);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      v45 = *v44;
    }
    else
    {
      v50 = *(unsigned __int16 *)v44;
      if (v50 > 0xFF)
        goto LABEL_10;
      v45 = v50;
    }
    v18 = *(_QWORD *)(v16 + 8 * v45 + 42216);
  }
  else
  {
    v18 = *(_QWORD *)(v16 + 41968);
  }
LABEL_13:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v19 = v52;
  v52 = 0;
  v53 = v10;
  v54 = -1;
  v55 = 0x1000000;
  v56 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v19, v18, 0, (uint64_t)&v52);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
LABEL_17:
  v21 = *((_QWORD *)this + 7);
  v22 = *((_QWORD *)a3 + 12);
  if (!v22 || (v23 = *(_DWORD *)(v22 + 4)) == 0)
  {
    v24 = *(_QWORD *)(v21 + 41968);
    goto LABEL_23;
  }
  if (v23 == 1)
  {
    v40 = *(unsigned __int8 **)(v22 + 8);
    if ((*(_BYTE *)(v22 + 16) & 4) != 0)
    {
      v41 = *v40;
    }
    else
    {
      v48 = *(unsigned __int16 *)v40;
      if (v48 > 0xFF)
        goto LABEL_20;
      v41 = v48;
    }
    v24 = *(_QWORD *)(v21 + 8 * v41 + 42216);
    goto LABEL_23;
  }
LABEL_20:
  v24 = *(_QWORD *)(v21 + 64760);
  if (!v24 || v22 != *(_QWORD *)(v24 + 8))
    v24 = JSC::jsStringWithCacheSlowCase();
LABEL_23:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v25 = v52;
  v52 = 0;
  v53 = v10;
  v54 = -1;
  v55 = 0x1000000;
  v56 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v25, v24, 0, (uint64_t)&v52);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  v27 = *((_QWORD *)this + 7);
  v28 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3 || (v29 = *(_DWORD *)(v28 + 4)) == 0)
  {
    v30 = *(_QWORD *)(v27 + 41968);
    goto LABEL_33;
  }
  if (v29 == 1)
  {
    v42 = *(unsigned __int8 **)(v28 + 8);
    if ((*(_BYTE *)(v28 + 16) & 4) != 0)
    {
      v43 = *v42;
    }
    else
    {
      v49 = *(unsigned __int16 *)v42;
      if (v49 > 0xFF)
        goto LABEL_30;
      v43 = v49;
    }
    v30 = *(_QWORD *)(v27 + 8 * v43 + 42216);
    goto LABEL_33;
  }
LABEL_30:
  v30 = *(_QWORD *)(v27 + 64760);
  if (!v30 || v28 != *(_QWORD *)(v30 + 8))
    v30 = JSC::jsStringWithCacheSlowCase();
LABEL_33:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v31 = v52;
  v52 = 0;
  v53 = v10;
  v54 = -1;
  v55 = 0x1000000;
  v56 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v31, v30, 0, (uint64_t)&v52);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  v33 = *((_QWORD *)a3 + 13);
  if (!v33)
    return v10;
  v34 = *((_QWORD *)this + 7);
  v35 = *(_DWORD *)(v33 + 4);
  if (v35)
  {
    if (v35 != 1)
    {
LABEL_40:
      v36 = *(_QWORD *)(v34 + 64760);
      if (!v36 || v33 != *(_QWORD *)(v36 + 8))
        v36 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_43;
    }
    v46 = *(unsigned __int8 **)(v33 + 8);
    if ((*(_BYTE *)(v33 + 16) & 4) != 0)
    {
      v47 = *v46;
    }
    else
    {
      v51 = *(unsigned __int16 *)v46;
      if (v51 > 0xFF)
        goto LABEL_40;
      v47 = v51;
    }
    v36 = *(_QWORD *)(v34 + 8 * v47 + 42216);
  }
  else
  {
    v36 = *(_QWORD *)(v34 + 41968);
  }
LABEL_43:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v37 = v52;
  v52 = 0;
  v53 = v10;
  v54 = -1;
  v55 = 0x1000000;
  v56 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v37, v36, 0, (uint64_t)&v52);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v38);
    else
      *(_DWORD *)v37 -= 2;
  }
  return v10;
}

uint64_t WebCore::JSApplePayCancelEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePayCancelEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSApplePayCancelEvent::visitChildren(WebCore::JSApplePayCancelEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSApplePayCancelEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePayCancelEventPrototype::create(WebCore::JSApplePayCancelEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSApplePayCancelEvent::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSApplePayCancelEventPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unsigned __int8 *WebCore::jsApplePayCancelEvent_sessionError(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  _QWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  _QWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  char v44;
  JSC::VM *v45;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  WTF::StringImpl **v63;
  WTF *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v74;
  WTF::StringImpl **v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unsigned __int8 *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  JSC::VM *v89;
  JSC::VM *v90;
  unsigned __int8 *v91;
  WTF::StringImpl *v92;
  WTF *v93;
  int v94;
  unsigned int v95;
  WTF::StringImpl *v96;
  unsigned __int8 *v97;
  int v98;
  int v99;
  uint64_t v100;

  v2 = *(unsigned __int8 **)(a2 + 32);
  if (v2)
    return v2;
  v3 = a2;
  v4 = a1;
  v5 = *(JSC::VM **)(a1 + 56);
  WebCore::PaymentSessionError::sessionError((id *)(*(_QWORD *)(a2 + 24) + 72), (uint64_t)&v92);
  v6 = *(_QWORD *)(v4 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  if (v92)
  {
    v11 = *(_QWORD *)(v4 + 56);
    v12 = *((_DWORD *)v92 + 1);
    if (v12)
    {
      if (v12 != 1)
      {
LABEL_7:
        v13 = *(_QWORD *)(v11 + 64760);
        if (!v13 || v92 != *(WTF::StringImpl **)(v13 + 8))
          v13 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_10;
      }
      v82 = (unsigned __int8 *)*((_QWORD *)v92 + 1);
      if ((*((_BYTE *)v92 + 16) & 4) != 0)
      {
        v83 = *v82;
      }
      else
      {
        v84 = *(unsigned __int16 *)v82;
        if (v84 > 0xFF)
          goto LABEL_7;
        v83 = v84;
      }
      v13 = *(_QWORD *)(v11 + 8 * v83 + 42216);
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 41968);
    }
LABEL_10:
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      goto LABEL_148;
    WTF::AtomStringImpl::addLiteral();
    v14 = v96;
    v96 = 0;
    v97 = (unsigned __int8 *)v9;
    v98 = -1;
    v99 = 0x1000000;
    v100 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v14, v13, 0, (uint64_t)&v96);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v90 = v5;
  v91 = (unsigned __int8 *)v9;
  if (v95)
  {
    if (v95 >> 28)
      goto LABEL_149;
    v16 = (WTF *)(16 * v95);
    v17 = WTF::fastMalloc(v16);
    v19 = (WTF *)v17;
    if (v95)
    {
      v20 = v93;
      v21 = (WTF *)((char *)v93 + 16 * v95);
      v22 = (_QWORD *)v17;
      do
      {
        v23 = *(_DWORD **)v20;
        if (*(_QWORD *)v20)
          *v23 += 2;
        *v22 = v23;
        v24 = (_DWORD *)*((_QWORD *)v20 + 1);
        if (v24)
          *v24 += 2;
        v22[1] = v24;
        v20 = (WTF *)((char *)v20 + 16);
        v22 += 2;
      }
      while (v20 != v21);
    }
    v25 = v6;
    v26 = 0;
    do
    {
      v27 = (WTF::StringImpl **)((char *)v26 + (_QWORD)v19);
      v28 = *(WTF::StringImpl **)((char *)v26 + (_QWORD)v19 + 8);
      *(_QWORD *)((char *)v26 + (_QWORD)v19 + 8) = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v18);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = *v27;
      *v27 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v18);
        else
          *(_DWORD *)v29 -= 2;
      }
      v26 = (WTF *)((char *)v26 + 16);
    }
    while (v16 != v26);
    WTF::fastFree(v19, v18);
    v30 = v95;
    v6 = v25;
    if (v95)
    {
      if (!(v95 >> 28))
      {
        v31 = WTF::fastMalloc((WTF *)(16 * v95));
        v32 = v31;
        if (v95)
        {
          v33 = v93;
          v34 = (WTF *)((char *)v93 + 16 * v95);
          v35 = (_QWORD *)v31;
          do
          {
            v36 = *(_DWORD **)v33;
            if (*(_QWORD *)v33)
              *v36 += 2;
            *v35 = v36;
            v37 = (_DWORD *)*((_QWORD *)v33 + 1);
            if (v37)
              *v37 += 2;
            v35[1] = v37;
            v33 = (WTF *)((char *)v33 + 16);
            v35 += 2;
          }
          while (v33 != v34);
        }
        v38 = WTF::fastMalloc((WTF *)(16 * v30));
        v39 = (WTF *)v38;
        v40 = 0;
        do
        {
          v41 = v32 + v40;
          v42 = *(_DWORD **)(v32 + v40);
          if (v42)
            *v42 += 2;
          *(_QWORD *)(v38 + v40) = v42;
          v43 = *(_DWORD **)(v41 + 8);
          if (v43)
            *v43 += 2;
          *(_QWORD *)(v38 + v40 + 8) = v43;
          v40 += 16;
        }
        while (v41 + 16 != v32 + 16 * v30);
        v88 = (WTF *)v32;
        v44 = 0;
        v85 = v30;
        goto LABEL_52;
      }
LABEL_149:
      __break(0xC471u);
      JUMPOUT(0x1951F8244);
    }
  }
  else
  {
    LODWORD(v30) = 0;
  }
  v39 = 0;
  v88 = 0;
  v85 = 0;
  v44 = 1;
LABEL_52:
  v45 = *(JSC::VM **)(v4 + 56);
  v46 = v4;
  v47 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v48 = 8 * *(unsigned __int8 *)(v47 + 14);
  v49 = JSC::allocateCell<JSC::JSFinalObject>((uint64_t)v45, v48 + 16);
  v50 = *(_DWORD *)(v47 + 8);
  *(_DWORD *)v49 = v47 >> 4;
  *(_DWORD *)(v49 + 4) = v50;
  *(_QWORD *)(v49 + 8) = 0;
  bzero((void *)(v49 + 16), v48);
  if (*((_BYTE *)v45 + 755))
    __dmb(0xAu);
  v89 = (JSC::VM *)v6;
  v4 = v46;
  if (!(_DWORD)v30)
  {
    v2 = v91;
    v64 = v88;
    goto LABEL_91;
  }
  v87 = v3;
  v52 = 16 * v30;
  v53 = (uint64_t *)((char *)v39 + 8);
  v86 = v52;
  do
  {
    v54 = *(_QWORD *)(v4 + 56);
    v55 = *v53;
    if (!*v53 || (v56 = *(_DWORD *)(v55 + 4)) == 0)
    {
      v57 = *(_QWORD *)(v54 + 41968);
      goto LABEL_62;
    }
    if (v56 != 1)
      goto LABEL_59;
    v60 = *(unsigned __int8 **)(v55 + 8);
    if ((*(_BYTE *)(v55 + 16) & 4) != 0)
    {
      v61 = *v60;
LABEL_77:
      v57 = *(_QWORD *)(v54 + 8 * v61 + 42216);
      goto LABEL_62;
    }
    v62 = *(unsigned __int16 *)v60;
    if (v62 <= 0xFF)
    {
      v61 = v62;
      goto LABEL_77;
    }
LABEL_59:
    v57 = *(_QWORD *)(v54 + 64760);
    if (!v57 || v55 != *(_QWORD *)(v57 + 8))
      v57 = JSC::jsStringWithCacheSlowCase();
LABEL_62:
    v58 = (WTF::StringImpl *)*(v53 - 1);
    if (v58)
    {
      if ((*((_BYTE *)v58 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v58 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v58 = v96;
      }
    }
    v59 = *(_DWORD *)v58;
    *(_DWORD *)v58 += 2;
    if (v59)
      *(_DWORD *)v58 = v59;
    else
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v55);
    v96 = 0;
    v97 = (unsigned __int8 *)v49;
    v98 = -1;
    v99 = 0x1000000;
    v100 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v49, v45, (unint64_t)v58, v57, 0, (uint64_t)&v96);
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v51);
    else
      *(_DWORD *)v58 -= 2;
    v4 = v46;
    v53 += 2;
    v52 -= 16;
  }
  while (v52);
  v63 = (WTF::StringImpl **)((char *)v39 + 8);
  v3 = v87;
  v64 = v88;
  v2 = v91;
  v65 = v86;
  do
  {
    v66 = *v63;
    *v63 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v51);
      else
        *(_DWORD *)v66 -= 2;
    }
    v67 = *(v63 - 1);
    *(v63 - 1) = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v51);
      else
        *(_DWORD *)v67 -= 2;
    }
    v63 += 2;
    v65 -= 16;
  }
  while (v65);
LABEL_91:
  if (v39)
    WTF::fastFree(v39, v51);
  v5 = v90;
  if ((v44 & 1) == 0)
  {
    v78 = 16 * v85;
    v79 = (WTF::StringImpl **)((char *)v64 + 8);
    do
    {
      v80 = *v79;
      *v79 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v51);
        else
          *(_DWORD *)v80 -= 2;
      }
      v81 = *(v79 - 1);
      *(v79 - 1) = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v51);
        else
          *(_DWORD *)v81 -= 2;
      }
      v79 += 2;
      v78 -= 16;
    }
    while (v78);
  }
  if (v64)
    WTF::fastFree(v64, v51);
  if (*((_DWORD *)v89 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v89) & 1) != 0)
  {
LABEL_148:
    v2 = 0;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v68 = v96;
    v96 = 0;
    v97 = v2;
    v98 = -1;
    v99 = 0x1000000;
    v100 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v2, v89, (unint64_t)v68, v49, 0, (uint64_t)&v96);
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v69);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  if (v95)
  {
    v74 = 16 * v95;
    v75 = (WTF::StringImpl **)((char *)v93 + 8);
    do
    {
      v76 = *v75;
      *v75 = 0;
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, v69);
        else
          *(_DWORD *)v76 -= 2;
      }
      v77 = *(v75 - 1);
      *(v75 - 1) = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v69);
        else
          *(_DWORD *)v77 -= 2;
      }
      v75 += 2;
      v74 -= 16;
    }
    while (v74);
  }
  v70 = v93;
  if (v93)
  {
    v93 = 0;
    v94 = 0;
    WTF::fastFree(v70, v69);
  }
  v71 = v92;
  v92 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v69);
    else
      *(_DWORD *)v71 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  v72 = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v3 + 32) = v2;
  if (((unint64_t)v2 & 0xFFFE000000000002) == 0
    && v2
    && *(_DWORD *)(v72 + 760) >= *(unsigned __int8 *)(v3 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v72 + 192), (const JSCell *)v3);
  }
  return v2;
}

uint64_t WebCore::JSApplePayCancelEvent::subspaceForImpl(WebCore::JSApplePayCancelEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 384);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 384))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 40, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 384);
    *(_QWORD *)(v8 + 384) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 384);
  *(_QWORD *)(v3 + 384) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePayContactField>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  char **v11;
  int v14;
  int v15;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v20;
  uint16x8_t v21;
  uint64_t v23;
  unint64_t v24;

  v3 = a1;
  v24 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v24, a1);
    v4 = v23;
    if (v23)
      goto LABEL_7;
LABEL_48:
    v14 = 0;
    v15 = 0;
    return v14 | (v15 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_48;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v6 != 5;
  if (v5 == "email" || v6 != 5)
  {
    if (v5 == "email" && v6 == 5)
      goto LABEL_60;
    if (v5 == "name" || v6 != 4)
    {
      if (v5 != "name")
      {
        v9 = *(_DWORD *)(v4 + 4);
        goto LABEL_14;
      }
      v9 = *(_DWORD *)(v4 + 4);
      if (v6 != 4)
        goto LABEL_14;
LABEL_41:
      v11 = &off_1E3348708;
      goto LABEL_61;
    }
    if ((_DWORD)v7)
    {
      if (*v5 == 110 && *(_WORD *)(v5 + 1) == 28001 && *((_WORD *)v5 + 1) == 25965)
        goto LABEL_41;
    }
    else if (*(_WORD *)v5 == 110 && *(_DWORD *)(v5 + 2) == 7143521 && *((_DWORD *)v5 + 1) == 6619245)
    {
      goto LABEL_41;
    }
    v9 = 4;
    goto LABEL_14;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 != 101 || *(_QWORD *)(v5 + 2) != 0x6C00690061006DLL)
      goto LABEL_13;
LABEL_60:
    v11 = &WebCore::parseEnumerationFromString<WebCore::ApplePayContactField>(WTF::String const&)::mappings;
    goto LABEL_61;
  }
  if (*v5 == 101 && *(_WORD *)(v5 + 1) == 24941 && *(_WORD *)(v5 + 3) == 27753)
    goto LABEL_60;
LABEL_13:
  v8 = 0;
  v9 = 5;
LABEL_14:
  v10 = v7 << 32;
  if (v5 != "phone" && !v8)
  {
    if (v9)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 112 || *(_WORD *)(v5 + 1) != 28520 || *(_WORD *)(v5 + 3) != 25966)
          goto LABEL_21;
      }
      else if (*(_WORD *)v5 != 112 || *(_QWORD *)(v5 + 2) != 0x65006E006F0068)
      {
        v10 = 0;
        goto LABEL_21;
      }
    }
LABEL_44:
    v11 = &off_1E3348720;
    goto LABEL_61;
  }
  if (v5 == "phone" && v6 == 5)
    goto LABEL_44;
LABEL_21:
  if (v5 == "phoneticName" || v9 != 12)
  {
    if (v5 == "phoneticName" && v9 == 12)
      goto LABEL_27;
    if (v5 == "postalAddress" || v9 != 13)
    {
      if (v9 != 13 || v5 != "postalAddress")
        goto LABEL_72;
    }
    else if (v10)
    {
      if (*v5 != 112 || *(_QWORD *)(v5 + 1) != 0x6464416C6174736FLL || *(_QWORD *)(v5 + 5) != 0x737365726464416CLL)
        goto LABEL_72;
    }
    else
    {
      if (*(_WORD *)v5 != 112)
        goto LABEL_72;
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC230);
      v20.i16[0] = vminvq_u16(v20);
      if (!v20.i32[0])
        goto LABEL_72;
      v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968DC240);
      v21.i16[0] = vminvq_u16(v21);
      if (!v21.i32[0])
        goto LABEL_72;
    }
    v11 = &off_1E3348750;
    goto LABEL_61;
  }
  if (v10)
  {
    if (*v5 == 112 && *(_QWORD *)(v5 + 1) == 0x4E636974656E6F68 && *(_QWORD *)(v5 + 4) == 0x656D614E63697465)
    {
LABEL_27:
      v11 = &off_1E3348738;
LABEL_61:
      v14 = *((unsigned __int8 *)v11 + 16);
      v15 = 1;
      goto LABEL_62;
    }
  }
  else if (*(_WORD *)v5 == 112)
  {
    v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC210);
    v17.i16[0] = vminvq_u16(v17);
    if (v17.i32[0])
    {
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 8), (int16x8_t)xmmword_1968DC220);
      v18.i16[0] = vminvq_u16(v18);
      if (v18.i32[0])
        goto LABEL_27;
    }
  }
LABEL_72:
  v14 = 0;
  v15 = 0;
LABEL_62:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v14 | (v15 << 8);
}

uint64_t WebCore::JSApplePayCouponCodeChangedEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePayCouponCodeChangedEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePayCouponCodeChangedEventPrototype::create(WebCore::JSApplePayCouponCodeChangedEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSApplePayCouponCodeChangedEvent::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSApplePayCouponCodeChangedEventPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::jsApplePayCouponCodeChangedEvent_couponCode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSApplePayCouponCodeChangedEvent::subspaceForImpl(WebCore::JSApplePayCouponCodeChangedEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 392);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 392))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 392);
    *(_QWORD *)(v8 + 392) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 392);
  *(_QWORD *)(v3 + 392) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t std::optional<WebCore::ApplePayRecurringPaymentRequest>::operator=[abi:sn180100]<WebCore::ApplePayRecurringPaymentRequest,void>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 200))
  {
    WebCore::ApplePayRecurringPaymentRequest::operator=(a1, a2);
  }
  else
  {
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v4 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(a1 + 16) = v4;
    v5 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *((_OWORD *)a2 + 2);
    v7 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    v8 = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = 0;
    *(_QWORD *)(a1 + 72) = v8;
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    *(_BYTE *)(a1 + 88) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    if (*((_BYTE *)a2 + 168))
    {
      *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
      v9 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a2 + 12) = 0;
      *(_QWORD *)(a1 + 96) = v9;
      v10 = *((_QWORD *)a2 + 13);
      *((_QWORD *)a2 + 13) = 0;
      *(_QWORD *)(a1 + 104) = v10;
      v11 = *((_OWORD *)a2 + 7);
      v12 = *((_OWORD *)a2 + 8);
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 128) = v12;
      v13 = *((_QWORD *)a2 + 19);
      *((_QWORD *)a2 + 19) = 0;
      *(_QWORD *)(a1 + 152) = v13;
      *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
      *(_BYTE *)(a1 + 168) = 1;
    }
    v14 = *((_QWORD *)a2 + 22);
    *((_QWORD *)a2 + 22) = 0;
    *(_QWORD *)(a1 + 176) = v14;
    v15 = *((_QWORD *)a2 + 23);
    *((_QWORD *)a2 + 23) = 0;
    *(_QWORD *)(a1 + 184) = v15;
    v16 = *((_QWORD *)a2 + 24);
    *((_QWORD *)a2 + 24) = 0;
    *(_QWORD *)(a1 + 192) = v16;
    *(_BYTE *)(a1 + 200) = 1;
  }
  return a1;
}

JSC::JSGlobalObject *WebCore::convertDictionary<WebCore::ApplePayDateComponents>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *result@<X0>, uint64_t a3@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  JSC::VM *v7;
  char v8;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;
  char v12;
  unsigned __int8 v13;
  char v14;
  int v15;
  unsigned int v16;
  JSC::JSGlobalObject *v17;
  uint64_t Object;
  JSC::Structure *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  char v34;
  __int16 v35;
  char v36;
  __int16 v37;
  char v38;
  __int16 v39;
  char v40;
  __int16 v41;
  char v42;
  WTF::StringImpl *v43;

  v7 = (JSC::VM *)*((_QWORD *)result + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v17 = result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = (JSC::JSGlobalObject *)JSC::throwTypeError();
      goto LABEL_45;
    }
    v19 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v21 = JSC::JSObject::get(v19, v17, (unint64_t)v43);
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v20);
      else
        *(_DWORD *)v43 -= 2;
    }
    if (*((_DWORD *)v7 + 20))
    {
      result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v7);
      if ((_DWORD)result)
        goto LABEL_45;
    }
    if (v21 == 10)
    {
      v34 = 0;
      v9 = 0;
    }
    else
    {
      result = (JSC::JSGlobalObject *)WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v17, v21, &v43);
      if (HIDWORD(v43))
        goto LABEL_45;
      v9 = v43;
      v32 = v43 >> 8;
      v34 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v22 = v43;
    v24 = JSC::JSObject::get(v19, v17, (unint64_t)v43);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v23);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (*((_DWORD *)v7 + 20))
    {
      result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v7);
      if ((_DWORD)result)
        goto LABEL_45;
    }
    if (v24 == 10)
    {
      v33 = 0;
      v11 = 0;
    }
    else
    {
      result = (JSC::JSGlobalObject *)WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v17, v24, &v43);
      if (HIDWORD(v43))
        goto LABEL_45;
      v11 = v43;
      v31 = v43 >> 8;
      v33 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v25 = v43;
    v27 = JSC::JSObject::get(v19, v17, (unint64_t)v43);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v26);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (*((_DWORD *)v7 + 20))
    {
      result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v7);
      if ((_DWORD)result)
        goto LABEL_45;
    }
    if (v27 == 10)
    {
      v12 = 0;
      v13 = 0;
    }
    else
    {
      result = (JSC::JSGlobalObject *)WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v17, v27, &v43);
      if (HIDWORD(v43))
        goto LABEL_45;
      v13 = v43;
      v5 = v43 >> 8;
      v12 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v28 = v43;
    result = (JSC::JSGlobalObject *)JSC::JSObject::get(v19, v17, (unint64_t)v43);
    v30 = (unint64_t)result;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        result = (JSC::JSGlobalObject *)WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v7 + 20))
    {
      result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v7);
      if ((_DWORD)result)
        goto LABEL_45;
    }
    if (v30 == 10)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
LABEL_37:
      v10 = v33;
      v8 = v34;
      v4 = v31;
      v3 = v32;
      goto LABEL_38;
    }
    result = (JSC::JSGlobalObject *)WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v17, v30, &v43);
    if (!HIDWORD(v43))
    {
      v16 = v43 & 0xFFFFFF00;
      v15 = v43;
      v14 = 1;
      goto LABEL_37;
    }
LABEL_45:
    *(_DWORD *)(a3 + 36) = 1;
    return result;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
LABEL_38:
  *(_DWORD *)(a3 + 4) = v16 | v15;
  *(_BYTE *)(a3 + 8) = v14;
  *(_WORD *)(a3 + 9) = v41;
  *(_BYTE *)(a3 + 11) = v42;
  *(_DWORD *)(a3 + 12) = v13 | (v5 << 8);
  *(_BYTE *)(a3 + 16) = v12;
  *(_WORD *)(a3 + 17) = v39;
  *(_BYTE *)(a3 + 19) = v40;
  *(_DWORD *)(a3 + 20) = v9 | (v3 << 8);
  *(_BYTE *)(a3 + 24) = v8;
  *(_BYTE *)(a3 + 27) = v38;
  *(_WORD *)(a3 + 25) = v37;
  *(_DWORD *)(a3 + 28) = v11 | (v4 << 8);
  *(_BYTE *)(a3 + 32) = v10;
  *(_BYTE *)(a3 + 35) = v36;
  *(_WORD *)(a3 + 33) = v35;
  *(_DWORD *)(a3 + 36) = 0;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::ApplePayDateComponentsRange>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  JSC::JSCell *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  WTF::StringImpl *v20;
  JSC::JSCell *v21;
  char v22;
  char v23;
  char v24;
  char v25;
  __int16 v26;
  char v27;
  char v28;
  char v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  char v37;
  char v38;
  WTF::StringImpl *v39;
  char v40;
  __int16 v41;
  char v42;
  char v43;
  __int16 v44;
  char v45;
  char v46;
  __int16 v47;
  char v48;
  char v49;
  __int16 v50;
  char v51;
  char v52;
  __int16 v53;
  char v54;
  char v55;
  __int16 v56;
  char v57;
  char v58;
  __int16 v59;
  char v60;
  int v61;
  WTF::StringImpl *v62;
  char v63;
  __int16 v64;
  char v65;
  char v66;
  __int16 v67;
  char v68;
  char v69;
  __int16 v70;
  char v71;
  char v72;
  __int16 v73;
  char v74;
  char v75;
  __int16 v76;
  char v77;
  char v78;
  __int16 v79;
  char v80;
  char v81;
  __int16 v82;
  char v83;
  int v84;
  __int16 v85;
  char v86;
  __int16 v87;
  char v88;
  __int16 v89;
  char v90;
  __int16 v91;
  char v92;
  __int16 v93;
  char v94;
  __int16 v95;
  char v96;
  __int16 v97;
  char v98;
  __int16 v99;
  char v100;
  JSC::VM *v101;

  v101 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_11;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = (JSC::JSCell *)JSC::JSObject::get(v6, a2, (unint64_t)v62);
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v7);
    else
      *(_DWORD *)v62 -= 2;
  }
  if (*((_DWORD *)v101 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v8 == (JSC::JSCell *)10)
  {
LABEL_9:
    v9 = "endDateComponents";
    v10 = (int)a2;
    v11 = 18;
LABEL_10:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError(v10, (int)&v101, v9, v11, "ApplePayDateComponentsRange", 28, "ApplePayDateComponents", 23);
    goto LABEL_11;
  }
  result = (uint64_t)WebCore::convertDictionary<WebCore::ApplePayDateComponents>(v8, a2, (uint64_t)&v62);
  if (v84)
    goto LABEL_11;
  v14 = BYTE4(v62);
  v99 = *(_WORD *)((char *)&v62 + 5);
  v100 = HIBYTE(v62);
  v15 = v63;
  v97 = v64;
  v98 = v65;
  v16 = v66;
  v95 = v67;
  v96 = v68;
  v17 = v69;
  v94 = v71;
  v93 = v70;
  v18 = v72;
  v92 = v74;
  v91 = v73;
  v19 = v75;
  v90 = v77;
  v89 = v76;
  v87 = v79;
  v88 = v80;
  v37 = v81;
  v38 = v78;
  v86 = v83;
  v85 = v82;
  WTF::AtomStringImpl::addLiteral();
  v21 = (JSC::JSCell *)JSC::JSObject::get(v6, a2, (unint64_t)v39);
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v20);
    else
      *(_DWORD *)v39 -= 2;
  }
  if (*((_DWORD *)v101 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v21 == (JSC::JSCell *)10)
  {
    v9 = "startDateComponents";
    v10 = (int)a2;
    v11 = 20;
    goto LABEL_10;
  }
  result = (uint64_t)WebCore::convertDictionary<WebCore::ApplePayDateComponents>(v21, a2, (uint64_t)&v39);
  v13 = v61;
  if (!v61)
  {
    v22 = BYTE4(v39);
    *(_WORD *)(a3 + 5) = *(_WORD *)((char *)&v39 + 5);
    *(_BYTE *)(a3 + 7) = HIBYTE(v39);
    v23 = v40;
    *(_WORD *)(a3 + 9) = v41;
    *(_BYTE *)(a3 + 11) = v42;
    v24 = v43;
    *(_WORD *)(a3 + 13) = v44;
    *(_BYTE *)(a3 + 15) = v45;
    v25 = v46;
    v26 = v47;
    *(_BYTE *)(a3 + 19) = v48;
    *(_WORD *)(a3 + 17) = v26;
    LOBYTE(v26) = v49;
    *(_WORD *)(a3 + 21) = v50;
    *(_BYTE *)(a3 + 23) = v51;
    v27 = v52;
    *(_WORD *)(a3 + 25) = v53;
    *(_BYTE *)(a3 + 27) = v54;
    v28 = v55;
    *(_BYTE *)(a3 + 31) = v57;
    *(_WORD *)(a3 + 29) = v56;
    *(_BYTE *)(a3 + 35) = v60;
    *(_WORD *)(a3 + 33) = v59;
    v29 = v58;
    *(_BYTE *)(a3 + 4) = v22;
    *(_BYTE *)(a3 + 8) = v23;
    *(_BYTE *)(a3 + 12) = v24;
    *(_BYTE *)(a3 + 16) = v25;
    *(_BYTE *)(a3 + 20) = v26;
    *(_BYTE *)(a3 + 24) = v27;
    *(_BYTE *)(a3 + 28) = v28;
    *(_BYTE *)(a3 + 32) = v29;
    *(_BYTE *)(a3 + 36) = v14;
    *(_BYTE *)(a3 + 39) = v100;
    *(_WORD *)(a3 + 37) = v99;
    *(_BYTE *)(a3 + 40) = v15;
    v30 = v97;
    *(_BYTE *)(a3 + 43) = v98;
    *(_WORD *)(a3 + 41) = v30;
    *(_BYTE *)(a3 + 44) = v16;
    v31 = v95;
    *(_BYTE *)(a3 + 47) = v96;
    *(_WORD *)(a3 + 45) = v31;
    *(_BYTE *)(a3 + 48) = v17;
    v32 = v93;
    *(_BYTE *)(a3 + 51) = v94;
    *(_WORD *)(a3 + 49) = v32;
    *(_BYTE *)(a3 + 52) = v18;
    v33 = v91;
    *(_BYTE *)(a3 + 55) = v92;
    *(_WORD *)(a3 + 53) = v33;
    *(_BYTE *)(a3 + 56) = v19;
    v34 = v89;
    *(_BYTE *)(a3 + 59) = v90;
    *(_WORD *)(a3 + 57) = v34;
    *(_BYTE *)(a3 + 60) = v38;
    v35 = v87;
    *(_BYTE *)(a3 + 63) = v88;
    *(_WORD *)(a3 + 61) = v35;
    *(_BYTE *)(a3 + 64) = v37;
    v36 = v85;
    *(_BYTE *)(a3 + 67) = v86;
    *(_WORD *)(a3 + 65) = v36;
    goto LABEL_12;
  }
LABEL_11:
  v13 = 1;
LABEL_12:
  *(_DWORD *)(a3 + 68) = v13;
  return result;
}

void WebCore::convertDictionary<WebCore::ApplePayDeferredPaymentRequest>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::JSCell *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  JSC::VM *v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  unint64_t v33;
  int v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  JSC::VM *v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  JSC::VM *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  WTF::StringImpl *v58;
  int hasExceptionsAfterHandlingTraps;
  char v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  unsigned int v84;
  WTF::StringImpl *v85;
  char v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[24];
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  JSC::VM *v95;
  WTF::StringImpl *v96;
  unint64_t v97[2];

  v95 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
    goto LABEL_5;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::Structure *)JSC::JSCell::getObject(this);
    if (Object)
    {
LABEL_5:
      v85 = 0;
      v86 = 1;
      v87 = 0uLL;
      LOBYTE(v88) = 0;
      *((_QWORD *)&v88 + 1) = 0x7FF8000000000000;
      v89[0] = 1;
      *(_DWORD *)&v89[4] = 1;
      *(int64x2_t *)&v89[8] = vdupq_n_s64(0x7FF8000000000000uLL);
      v90 = 0;
      v91 = 0;
      v92 = 0x7FF8000000000000;
      v93 = 0u;
      v94 = 0u;
      if (v5 == 2)
      {
LABEL_28:
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v95, "deferredBilling", 16, "ApplePayDeferredPaymentRequest", 31, "ApplePayLineItem", 17);
        *(_DWORD *)(a3 + 128) = 1;
        goto LABEL_107;
      }
      WTF::AtomStringImpl::addLiteral();
      v8 = JSC::JSObject::get(Object, a2, (unint64_t)v76);
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, v7);
        else
          *(_DWORD *)v76 -= 2;
      }
      if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
        goto LABEL_130;
      if (v8 == 10)
      {
        v9 = 0;
        goto LABEL_23;
      }
      v74 = (WTF::StringImpl *)v8;
      v10 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v74, a2);
LABEL_18:
        if (!*((_DWORD *)v10 + 20))
        {
          v9 = v72;
LABEL_20:
          LODWORD(v77) = 0;
LABEL_21:
          v12 = 0;
          v76 = 0;
          v85 = v9;
          v13 = 1;
          goto LABEL_22;
        }
        v9 = v72;
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) == 0)
          goto LABEL_20;
        v12 = 1;
        LODWORD(v77) = 1;
        v72 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
          {
            WTF::StringImpl::destroy(v9, v58);
            v12 = v77;
            if (!(_DWORD)v77)
            {
              v9 = v76;
              goto LABEL_21;
            }
            *(_DWORD *)(a3 + 128) = 1;
            if (v12 == -1)
              goto LABEL_107;
            v13 = 0;
            v9 = 0;
LABEL_22:
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v12])(&v74, &v76);
            if (!v13)
            {
LABEL_107:
              WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v85, v14);
              return;
            }
LABEL_23:
            WTF::AtomStringImpl::addLiteral();
            v15 = v76;
            v17 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v76);
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v16);
              else
                *(_DWORD *)v15 -= 2;
            }
            if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
            {
LABEL_130:
              *(_DWORD *)(a3 + 128) = 1;
              goto LABEL_107;
            }
            if (v17 == (JSC::JSCell *)10)
              goto LABEL_28;
            WebCore::convertDictionary<WebCore::ApplePayLineItem>(v17, (uint64_t)a2, (uint64_t)&v76);
            v18 = v84;
            if (v84)
            {
              *(_DWORD *)(a3 + 128) = 1;
              if ((_DWORD)v18 == -1)
                goto LABEL_107;
              goto LABEL_106;
            }
            v19 = (char)v76;
            v21 = v77;
            v20 = v78;
            v77 = 0;
            v78 = 0;
            v88 = v79;
            *(_OWORD *)v89 = v80;
            v22 = v82;
            v82 = 0;
            v86 = (char)v76;
            *(_QWORD *)&v87 = v21;
            *((_QWORD *)&v87 + 1) = v20;
            *(_QWORD *)&v89[16] = v81;
            v90 = v22;
            v71 = v22;
            v91 = v83;
            WTF::AtomStringImpl::addLiteral();
            v23 = v74;
            v25 = JSC::JSObject::get(Object, a2, (unint64_t)v74);
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v24);
              else
                *(_DWORD *)v23 -= 2;
            }
            if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
              goto LABEL_60;
            if (v25 != 10)
            {
              v26 = (JSC::VM *)*((_QWORD *)a2 + 7);
              v27 = WebCore::valueToDate(a2, v25);
              if (*((_DWORD *)v26 + 20))
              {
                v68 = v27;
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
                v27 = v68;
                if (hasExceptionsAfterHandlingTraps)
                  goto LABEL_60;
              }
              v92 = *(_QWORD *)&v27;
            }
            WTF::AtomStringImpl::addLiteral();
            v28 = v74;
            v30 = JSC::JSObject::get(Object, a2, (unint64_t)v74);
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v29);
              else
                *(_DWORD *)v28 -= 2;
            }
            if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
              goto LABEL_60;
            if (v30 == 10)
            {
              v31 = 0;
              goto LABEL_54;
            }
            v72 = (WTF::StringImpl *)v30;
            v32 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((v30 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v30 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v72, a2);
LABEL_49:
              if (!*((_DWORD *)v32 + 20))
              {
                v31 = (WTF::StringImpl *)v97[0];
LABEL_51:
                v75 = 0;
LABEL_52:
                v34 = 0;
                v74 = 0;
                *(_QWORD *)&v93 = v31;
                v35 = 1;
                goto LABEL_53;
              }
              v60 = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
              v31 = (WTF::StringImpl *)v97[0];
              if ((v60 & 1) == 0)
                goto LABEL_51;
              v34 = 1;
              v75 = 1;
              v97[0] = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                {
                  WTF::StringImpl::destroy(v31, v61);
                  v34 = v75;
                  if (!v75)
                  {
                    v31 = v74;
                    goto LABEL_52;
                  }
                  *(_DWORD *)(a3 + 128) = 1;
                  if (v34 == -1)
                    goto LABEL_106;
                  v35 = 0;
                  v31 = 0;
LABEL_53:
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v34])(&v72, &v74);
                  if (!v35)
                  {
LABEL_106:
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v18])(&v74, &v76);
                    goto LABEL_107;
                  }
LABEL_54:
                  v70 = v20;
                  WTF::AtomStringImpl::addLiteral();
                  v36 = v74;
                  v38 = JSC::JSObject::get(Object, a2, (unint64_t)v74);
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, v37);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
                    goto LABEL_60;
                  if (v38 == 10)
                  {
                    WebCore::throwRequiredMemberTypeError((int)a2, (int)&v95, "managementURL", 14, "ApplePayDeferredPaymentRequest", 31, "DOMString", 10);
LABEL_60:
                    *(_DWORD *)(a3 + 128) = 1;
                    goto LABEL_106;
                  }
                  v72 = (WTF::StringImpl *)v38;
                  v39 = (JSC::VM *)*((_QWORD *)a2 + 7);
                  if ((v38 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v38 + 5) != 2)
                  {
                    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v72, a2);
LABEL_67:
                    v69 = v21;
                    if (*((_DWORD *)v39 + 20))
                    {
                      v62 = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
                      v41 = (WTF::StringImpl *)v97[0];
                      if (v62)
                      {
                        v75 = 1;
                        v97[0] = 0;
                        if (v41)
                        {
                          if (*(_DWORD *)v41 == 2)
                            WTF::StringImpl::destroy(v41, v63);
                          else
                            *(_DWORD *)v41 -= 2;
                        }
                        v45 = 1;
                        goto LABEL_76;
                      }
                    }
                    else
                    {
                      v41 = (WTF::StringImpl *)v97[0];
                    }
                    v75 = 0;
                    v74 = 0;
                    *((_QWORD *)&v93 + 1) = v41;
                    WTF::AtomStringImpl::addLiteral();
                    v42 = v72;
                    v44 = JSC::JSObject::get(Object, a2, (unint64_t)v72);
                    if (v42)
                    {
                      if (*(_DWORD *)v42 == 2)
                        WTF::StringImpl::destroy(v42, v43);
                      else
                        *(_DWORD *)v42 -= 2;
                    }
                    if (*((_DWORD *)v95 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v95) & 1) != 0)
                    {
LABEL_75:
                      v45 = 0;
LABEL_76:
                      *(_DWORD *)(a3 + 128) = 1;
LABEL_105:
                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v45])(&v72, &v74);
                      goto LABEL_106;
                    }
                    if (v44 == 10)
                    {
                      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v95, "paymentDescription", 19, "ApplePayDeferredPaymentRequest", 31, "DOMString", 10);
                      goto LABEL_75;
                    }
                    v97[0] = v44;
                    v46 = (JSC::VM *)*((_QWORD *)a2 + 7);
                    if ((v44 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v44 + 5) != 2)
                    {
                      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v97, a2);
LABEL_84:
                      if (*((_DWORD *)v46 + 20))
                      {
                        v64 = JSC::VM::hasExceptionsAfterHandlingTraps(v46);
                        v48 = v96;
                        if (v64)
                        {
                          v73 = 1;
                          v96 = 0;
                          if (v48)
                          {
                            if (*(_DWORD *)v48 == 2)
                              WTF::StringImpl::destroy(v48, v65);
                            else
                              *(_DWORD *)v48 -= 2;
                          }
                          v55 = 1;
                          v56 = 1;
                          goto LABEL_104;
                        }
                      }
                      else
                      {
                        v48 = v96;
                      }
                      v73 = 0;
                      v72 = 0;
                      *(_QWORD *)&v94 = v48;
                      WTF::AtomStringImpl::addLiteral();
                      v49 = (WTF::StringImpl *)v97[0];
                      v51 = JSC::JSObject::get(Object, a2, v97[0]);
                      if (v49)
                      {
                        if (*(_DWORD *)v49 == 2)
                          WTF::StringImpl::destroy(v49, v50);
                        else
                          *(_DWORD *)v49 -= 2;
                      }
                      if (*((_DWORD *)v95 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v95) & 1) != 0)
                        goto LABEL_169;
                      if (v51 == 10)
                      {
                        v52 = 0;
                        goto LABEL_103;
                      }
                      v97[0] = v51;
                      v53 = (JSC::VM *)*((_QWORD *)a2 + 7);
                      if ((v51 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v51 + 5) != 2)
                      {
                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v97, a2);
LABEL_101:
                        if (*((_DWORD *)v53 + 20))
                        {
                          v67 = JSC::VM::hasExceptionsAfterHandlingTraps(v53);
                          v52 = v96;
                          if (v67)
                          {
                            v96 = 0;
                            if (v52)
                            {
                              if (*(_DWORD *)v52 == 2)
                                WTF::StringImpl::destroy(v52, v66);
                              else
                                *(_DWORD *)v52 -= 2;
                            }
LABEL_169:
                            v56 = 0;
                            v55 = 1;
                            goto LABEL_104;
                          }
                        }
                        else
                        {
                          v52 = v96;
                        }
LABEL_103:
                        v55 = 0;
                        v56 = 0;
                        *(_QWORD *)a3 = v9;
                        *(_BYTE *)(a3 + 8) = v19;
                        v85 = 0;
                        v87 = 0u;
                        *(_QWORD *)(a3 + 16) = v69;
                        *(_QWORD *)(a3 + 24) = v70;
                        v57 = *(_OWORD *)v89;
                        *(_OWORD *)(a3 + 32) = v88;
                        *(_OWORD *)(a3 + 48) = v57;
                        v90 = 0;
                        *(_QWORD *)(a3 + 64) = *(_QWORD *)&v89[16];
                        *(_QWORD *)(a3 + 72) = v71;
                        *(_WORD *)(a3 + 80) = v91;
                        *(_QWORD *)(a3 + 88) = v92;
                        *(_QWORD *)(a3 + 96) = v31;
                        *(_QWORD *)(a3 + 104) = v41;
                        *(_QWORD *)(a3 + 112) = v48;
                        v93 = 0u;
                        v94 = 0u;
                        *(_QWORD *)(a3 + 120) = v52;
LABEL_104:
                        *(_DWORD *)(a3 + 128) = v55;
                        ((void (*)(unint64_t *, WTF::StringImpl **))off_1E334B060[v56])(v97, &v72);
                        v45 = 0;
                        goto LABEL_105;
                      }
                      v54 = *(WTF::StringImpl **)(v51 + 8);
                      if ((v54 & 1) != 0)
                      {
                        v54 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v51, a2);
                        if (!v54)
                          goto LABEL_100;
                      }
                      else if (!v54)
                      {
LABEL_100:
                        v96 = v54;
                        goto LABEL_101;
                      }
                      *(_DWORD *)v54 += 2;
                      goto LABEL_100;
                    }
                    v47 = *(WTF::StringImpl **)(v44 + 8);
                    if ((v47 & 1) != 0)
                    {
                      v47 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v44, a2);
                      if (!v47)
                        goto LABEL_83;
                    }
                    else if (!v47)
                    {
LABEL_83:
                      v96 = v47;
                      goto LABEL_84;
                    }
                    *(_DWORD *)v47 += 2;
                    goto LABEL_83;
                  }
                  v40 = *(_QWORD *)(v38 + 8);
                  if ((v40 & 1) != 0)
                  {
                    v40 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v38, a2);
                    if (!v40)
                      goto LABEL_66;
                  }
                  else if (!v40)
                  {
LABEL_66:
                    v97[0] = v40;
                    goto LABEL_67;
                  }
                  *(_DWORD *)v40 += 2;
                  goto LABEL_66;
                }
                *(_DWORD *)v31 -= 2;
              }
              v35 = 0;
              v31 = 0;
              *(_DWORD *)(a3 + 128) = 1;
              goto LABEL_53;
            }
            v33 = *(_QWORD *)(v30 + 8);
            if ((v33 & 1) != 0)
            {
              v33 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v30, a2);
              if (!v33)
                goto LABEL_48;
            }
            else if (!v33)
            {
LABEL_48:
              v97[0] = v33;
              goto LABEL_49;
            }
            *(_DWORD *)v33 += 2;
            goto LABEL_48;
          }
          *(_DWORD *)v9 -= 2;
        }
        v13 = 0;
        v9 = 0;
        *(_DWORD *)(a3 + 128) = 1;
        goto LABEL_22;
      }
      v11 = *(WTF::StringImpl **)(v8 + 8);
      if ((v11 & 1) != 0)
      {
        v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, a2);
        if (!v11)
          goto LABEL_17;
      }
      else if (!v11)
      {
LABEL_17:
        v72 = v11;
        goto LABEL_18;
      }
      *(_DWORD *)v11 += 2;
      goto LABEL_17;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 128) = 1;
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::ApplePayDeferredPaymentRequest *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  bzero((void *)(v10 + 16), v9);
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_13;
  v13 = *((_QWORD *)this + 7);
  v14 = *(_DWORD *)(v12 + 4);
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_6:
      v15 = *(_QWORD *)(v13 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
        v15 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_9;
    }
    v53 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v54 = *v53;
    }
    else
    {
      v61 = *(unsigned __int16 *)v53;
      if (v61 > 0xFF)
        goto LABEL_6;
      v54 = v61;
    }
    v15 = *(_QWORD *)(v13 + 8 * v54 + 42216);
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 41968);
  }
LABEL_9:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v16 = v64;
  v64 = 0;
  v65 = v10;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v16, v15, 0, (uint64_t)&v64);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_13:
  v18 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)a3 + 8);
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v19 = v64;
  v64 = 0;
  v65 = v10;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v19, v18, 0, (uint64_t)&v64);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
  v21 = WebCore::jsDate((uint64_t)this);
  if (*(_DWORD *)(v7 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v22 = v64;
  v64 = 0;
  v65 = v10;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v22, v21, 0, (uint64_t)&v64);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  v24 = *((_QWORD *)a3 + 12);
  if (!v24)
    goto LABEL_31;
  v25 = *((_QWORD *)this + 7);
  v26 = *(_DWORD *)(v24 + 4);
  if (v26)
  {
    if (v26 != 1)
    {
LABEL_24:
      v27 = *(_QWORD *)(v25 + 64760);
      if (!v27 || v24 != *(_QWORD *)(v27 + 8))
        v27 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_27;
    }
    v55 = *(unsigned __int8 **)(v24 + 8);
    if ((*(_BYTE *)(v24 + 16) & 4) != 0)
    {
      v56 = *v55;
    }
    else
    {
      v62 = *(unsigned __int16 *)v55;
      if (v62 > 0xFF)
        goto LABEL_24;
      v56 = v62;
    }
    v27 = *(_QWORD *)(v25 + 8 * v56 + 42216);
  }
  else
  {
    v27 = *(_QWORD *)(v25 + 41968);
  }
LABEL_27:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v28 = v64;
  v64 = 0;
  v65 = v10;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v28, v27, 0, (uint64_t)&v64);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
LABEL_31:
  v30 = *((_QWORD *)this + 7);
  v31 = *((_QWORD *)a3 + 13);
  if (!v31 || (v32 = *(_DWORD *)(v31 + 4)) == 0)
  {
    v33 = *(_QWORD *)(v30 + 41968);
    goto LABEL_37;
  }
  if (v32 == 1)
  {
    v49 = *(unsigned __int8 **)(v31 + 8);
    if ((*(_BYTE *)(v31 + 16) & 4) != 0)
    {
      v50 = *v49;
    }
    else
    {
      v59 = *(unsigned __int16 *)v49;
      if (v59 > 0xFF)
        goto LABEL_34;
      v50 = v59;
    }
    v33 = *(_QWORD *)(v30 + 8 * v50 + 42216);
    goto LABEL_37;
  }
LABEL_34:
  v33 = *(_QWORD *)(v30 + 64760);
  if (!v33 || v31 != *(_QWORD *)(v33 + 8))
    v33 = JSC::jsStringWithCacheSlowCase();
LABEL_37:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v34 = v64;
  v64 = 0;
  v65 = v10;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v34, v33, 0, (uint64_t)&v64);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  v36 = *((_QWORD *)this + 7);
  v37 = *((_QWORD *)a3 + 14);
  if (!v37 || (v38 = *(_DWORD *)(v37 + 4)) == 0)
  {
    v39 = *(_QWORD *)(v36 + 41968);
    goto LABEL_47;
  }
  if (v38 == 1)
  {
    v51 = *(unsigned __int8 **)(v37 + 8);
    if ((*(_BYTE *)(v37 + 16) & 4) != 0)
    {
      v52 = *v51;
    }
    else
    {
      v60 = *(unsigned __int16 *)v51;
      if (v60 > 0xFF)
        goto LABEL_44;
      v52 = v60;
    }
    v39 = *(_QWORD *)(v36 + 8 * v52 + 42216);
    goto LABEL_47;
  }
LABEL_44:
  v39 = *(_QWORD *)(v36 + 64760);
  if (!v39 || v37 != *(_QWORD *)(v39 + 8))
    v39 = JSC::jsStringWithCacheSlowCase();
LABEL_47:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v40 = v64;
  v64 = 0;
  v65 = v10;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v40, v39, 0, (uint64_t)&v64);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v41);
    else
      *(_DWORD *)v40 -= 2;
  }
  v42 = *((_QWORD *)a3 + 15);
  if (!v42)
    return v10;
  v43 = *((_QWORD *)this + 7);
  v44 = *(_DWORD *)(v42 + 4);
  if (v44)
  {
    if (v44 != 1)
    {
LABEL_54:
      v45 = *(_QWORD *)(v43 + 64760);
      if (!v45 || v42 != *(_QWORD *)(v45 + 8))
        v45 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_57;
    }
    v57 = *(unsigned __int8 **)(v42 + 8);
    if ((*(_BYTE *)(v42 + 16) & 4) != 0)
    {
      v58 = *v57;
    }
    else
    {
      v63 = *(unsigned __int16 *)v57;
      if (v63 > 0xFF)
        goto LABEL_54;
      v58 = v63;
    }
    v45 = *(_QWORD *)(v43 + 8 * v58 + 42216);
  }
  else
  {
    v45 = *(_QWORD *)(v43 + 41968);
  }
LABEL_57:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v46 = v64;
  v64 = 0;
  v65 = v10;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v46, v45, 0, (uint64_t)&v64);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v47);
    else
      *(_DWORD *)v46 -= 2;
  }
  return v10;
}

JSC::JSGlobalObject *WebCore::convertDictionary<WebCore::ApplePayDisbursementRequest>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *result@<X0>, uint64_t a3@<X8>)
{
  uint64_t v3;
  JSC::VM *v5;
  JSC::JSGlobalObject *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  char v13;
  WTF *v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  char v19;
  void *v20;
  WTF *v21;
  WTF::StringImpl *v22[2];
  int v23;
  JSC::VM *v24;
  JSC::VM *v25;
  WTF *v26;
  uint64_t v27;

  v5 = (JSC::VM *)*((_QWORD *)result + 7);
  v24 = v5;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  v6 = result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (JSC::JSGlobalObject *)JSC::throwTypeError();
LABEL_31:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  v8 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  result = (JSC::JSGlobalObject *)JSC::JSObject::get(v8, v6, (unint64_t)v22[0]);
  v10 = (uint64_t)result;
  if (v22[0])
  {
    if (*(_DWORD *)v22[0] == 2)
      result = (JSC::JSGlobalObject *)WTF::StringImpl::destroy(v22[0], v9);
    else
      *(_DWORD *)v22[0] -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((_DWORD)result)
      goto LABEL_31;
  }
  if (v10 == 10)
  {
LABEL_9:
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
LABEL_10:
    *(_DWORD *)(a3 + 32) = 0;
    return result;
  }
  v11 = (JSC::VM *)*((_QWORD *)v6 + 7);
  v25 = v11;
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v23 = 1;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v22[0] = (WTF::StringImpl *)&v26;
    JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayContactField>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(v6, v10, (uint64_t *)v22);
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    {
      v12 = 0;
      v13 = 0;
      v14 = v26;
      v3 = v27;
      v23 = 0;
      v15 = 1;
      v22[0] = 0;
      v22[1] = 0;
      goto LABEL_21;
    }
    v21 = v26;
    v23 = 1;
    if (v26)
    {
      v26 = 0;
      LODWORD(v27) = 0;
      WTF::fastFree(v21, v20);
    }
  }
  v15 = 0;
  v14 = 0;
  v12 = 1;
  *(_DWORD *)(a3 + 32) = 1;
  v13 = 1;
LABEL_21:
  result = (JSC::JSGlobalObject *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E334B150[v12])(&v26, v22);
  if ((v15 & 1) != 0)
  {
    *(_QWORD *)(a3 + 8) = v14;
    *(_QWORD *)(a3 + 16) = v3;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_10;
  }
  if (v14)
    v19 = v13;
  else
    v19 = 1;
  if ((v19 & 1) == 0)
    return (JSC::JSGlobalObject *)WTF::fastFree(v14, v18);
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePayError::Domain>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  uint64_t v9;
  uint16x8_t v10;
  uint64_t v12;
  unint64_t v13;

  v3 = a1;
  v13 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v13, a1);
  v4 = v12;
  if (!v12)
    return 0;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  if (v5 == "disbursement" || v6 != 12)
  {
    if (v6 != 12 || v5 != "disbursement")
      goto LABEL_30;
LABEL_22:
    v9 = 256;
    goto LABEL_31;
  }
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    if (*v5 == 100 && *(_QWORD *)(v5 + 1) == 0x6D65737275627369 && *(_QWORD *)(v5 + 4) == 0x746E656D65737275)
      goto LABEL_22;
  }
  else if (*(_WORD *)v5 == 100)
  {
    v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC250);
    v10.i16[0] = vminvq_u16(v10);
    if (v10.i32[0])
    {
      if (vminvq_u16((uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 8), (int16x8_t)xmmword_1968DC260)))
        goto LABEL_22;
    }
  }
LABEL_30:
  v9 = 0;
LABEL_31:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSApplePayError>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  JSC::VM *v15;
  JSC::VM *v16;
  uint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  void (***v22)(WebCore::ApplePayError *__hidden);
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  int v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v35;
  JSC::Structure *v36;
  JSC::JSCell *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  JSC::VM *v45;
  uint64_t v46;
  unsigned __int16 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  int v57;
  unint64_t SlowCase;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  JSC::VM *Allocator;
  JSC::JSCell *v63;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v65;
  JSC::JSGlobalObject *v66;
  JSC::VM *v67;
  JSC::Structure *v68;
  uint64_t FunctionRealm;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char **v76;
  int v77;
  JSC::JSObject *v78;
  unint64_t v79;
  WebCore::JSDOMGlobalObject *v80;
  JSC::Structure *v81;
  JSC::JSCell *v82;
  uint64_t v83;
  unint64_t SubclassStructure;
  int v85;
  JSValue v87;
  unint64_t v88;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v90;
  JSC::JSGlobalObject *v91;
  JSC::VM *v92;
  JSC::VM *v93;
  int v94;
  JSC::VM *v95;
  uint64_t v96[2];

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v87.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return JSC::VM::throwException(v3, a1, v87);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  v93 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v8 = WebCore::parseEnumeration<WebCore::ApplePayErrorCode>(a1, v6);
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  if (v8 <= 0xFFu)
  {
    WebCore::throwArgumentMustBeEnumError((uint64_t)a1, (uint64_t)&v93, 0, "errorCode", 10, "ApplePayError", 14, v7, 0, 0, "\"unknown\", \"shippingContactInvalid\", \"billingContactInvalid\", \"addressUnserviceable\", \"couponCodeInvalid\", \"couponCodeExpired\", \"unsupportedCard\", \"recipientContactInvalid\"", 173);
    return 0;
  }
  v9 = *(int *)(a2 + 32);
  v92 = v3;
  if ((unint64_t)(v9 - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 56);
    if (v10 != 10)
    {
      v93 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v13 = WebCore::parseEnumeration<WebCore::ApplePayErrorContactField>(a1, v10);
      if (!*((_DWORD *)v93 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v93) & 1) == 0)
      {
        if (v13 > 0xFFu)
        {
          v11 = v13 | 0x100;
          v9 = *(int *)(a2 + 32);
          goto LABEL_11;
        }
        WebCore::throwArgumentMustBeEnumError((uint64_t)a1, (uint64_t)&v93, 1, "contactField", 13, "ApplePayError", 14, v12, 0, 0, "\"phoneNumber\", \"emailAddress\", \"name\", \"phoneticName\", \"postalAddress\", \"addressLines\", \"subLocality\", \"locality\", \"postalCode\", \"subAdministrativeArea\", \"administrativeArea\", \"country\", \"countryCode\"", 201);
      }
      return 0;
    }
    v11 = 0;
  }
LABEL_11:
  if ((unint64_t)(v9 - 4) >= 0xFFFFFFFFFFFFFFFDLL || (v14 = *(_QWORD *)(a2 + 64), v14 == 10))
  {
    v15 = (JSC::VM *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v15 += 2;
    v93 = v15;
    v94 = 0;
    goto LABEL_25;
  }
  v96[0] = *(_QWORD *)(a2 + 64);
  v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v96, a1);
    goto LABEL_22;
  }
  v17 = *(_QWORD *)(v14 + 8);
  if ((v17 & 1) != 0)
  {
    v17 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v14, a1);
    if (!v17)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (v17)
LABEL_20:
    *(_DWORD *)v17 += 2;
LABEL_21:
  v95 = (JSC::VM *)v17;
LABEL_22:
  if (*((_DWORD *)v16 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    v15 = v95;
    if (hasExceptionsAfterHandlingTraps)
    {
      v94 = 1;
      v95 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v90);
        else
          *(_DWORD *)v15 -= 2;
      }
      SlowCase = 0;
      v85 = 1;
      goto LABEL_93;
    }
  }
  else
  {
    v15 = v95;
  }
  v93 = v15;
  v94 = 0;
LABEL_25:
  v91 = a1;
  if ((unint64_t)(*(int *)(a2 + 32) - 5) > 0xFFFFFFFFFFFFFFFBLL || (v18 = *(_QWORD *)(a2 + 72), v18 == 10))
  {
    v19 = 0;
    goto LABEL_28;
  }
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
    goto LABEL_28;
  }
  v96[0] = *((_QWORD *)a1 + 7);
  v45 = (JSC::VM *)v96[0];
  v47 = WebCore::parseEnumeration<WebCore::ApplePayError::Domain>(a1, v18);
  if (*((_DWORD *)v45 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) != 0)
  {
LABEL_128:
    SlowCase = 0;
    v85 = 0;
LABEL_93:
    ((void (*)(uint64_t *, JSC::VM **))off_1E334B060[v85])(v96, &v93);
    return SlowCase;
  }
  if (v47 <= 0xFFu)
  {
    WebCore::throwArgumentMustBeEnumError((uint64_t)a1, (uint64_t)v96, 3, "domain", 7, "ApplePayError", 14, v46, 0, 0, "\"disbursement\"", 15);
    goto LABEL_128;
  }
  v19 = 256;
LABEL_28:
  v93 = 0;
  v20 = WTF::fastMalloc((WTF *)0x20);
  v22 = (void (***)(WebCore::ApplePayError *__hidden))v20;
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)v20 = off_1E334CCA0;
  *(_BYTE *)(v20 + 12) = v8;
  *(_WORD *)(v20 + 13) = v11;
  if (v15)
  {
    *(_DWORD *)v15 += 2;
    *(_QWORD *)(v20 + 16) = v15;
    *(_WORD *)(v20 + 24) = v19;
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v21);
      if (*v22 != off_1E334CCA0)
      {
        __break(0xC471u);
        JUMPOUT(0x1951FBFECLL);
      }
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
    *(_QWORD *)(v20 + 16) = 0;
    *(_WORD *)(v20 + 24) = v19;
  }
  v23 = *(_QWORD *)(v5 + 40);
  v24 = *(_QWORD *)(v23 + 3296);
  if (v24)
  {
    v25 = *(_DWORD *)(v24 - 8);
    v26 = ((unint64_t)&WebCore::JSApplePayError::s_info + ~((_QWORD)&WebCore::JSApplePayError::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayError::s_info + ~((_QWORD)&WebCore::JSApplePayError::s_info << 32)) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v25 & ((v28 >> 31) ^ v28);
    v30 = *(char ***)(v24 + 16 * v29);
    if (v30 == &WebCore::JSApplePayError::s_info)
    {
LABEL_36:
      v32 = *(_QWORD *)(v24 + 16 * v29 + 8);
      if (v32)
        goto LABEL_38;
    }
    else
    {
      v31 = 1;
      while (v30)
      {
        v29 = ((_DWORD)v29 + v31) & v25;
        v30 = *(char ***)(v24 + 16 * v29);
        ++v31;
        if (v30 == &WebCore::JSApplePayError::s_info)
          goto LABEL_36;
      }
    }
  }
  v33 = *(uint64_t **)(v23 + 56);
  Structure = WebCore::JSApplePayErrorPrototype::createStructure(v33, v23, *(JSC::JSCell **)(v23 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v37 = (JSC::JSCell *)WebCore::JSApplePayErrorPrototype::create((WebCore::JSApplePayErrorPrototype *)v33, Structure, v35, v36);
  v38 = WebCore::JSApplePayError::createStructure(v33, v23, v37);
  v32 = WebCore::cacheDOMStructure((JSCell *)v23, v38, (uint64_t)&WebCore::JSApplePayError::s_info);
LABEL_38:
  v39 = *(_QWORD *)(v23 + 56);
  v40 = *(_QWORD *)(v39 + 41456);
  v41 = *(_QWORD *)(v40 + 23536);
  v42 = *(_QWORD **)(v41 + 400);
  if (v42)
    goto LABEL_63;
  v43 = *(_QWORD *)(v40 + 22648);
  if (__ldaxr((unsigned __int8 *)v43))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v43))
  {
    goto LABEL_48;
  }
  MEMORY[0x19AEA534C](v43);
LABEL_48:
  v48 = *(_QWORD *)(v43 + 2824);
  if (!*(_QWORD *)(v48 + 400))
  {
    v49 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v96, "IsoSpace T");
    v95 = 0;
    MEMORY[0x19AEA3204](v49, v96, v39 + 192, v39 + 1872, 32, 8, &v95);
    v51 = (uint64_t)v95;
    v95 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = (WTF *)v96[0];
    v96[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::fastFree(v52, v50);
      else
        --*(_DWORD *)v52;
    }
    v53 = *(_QWORD *)(v48 + 400);
    *(_QWORD *)(v48 + 400) = v49;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v54 = *(_QWORD *)(v41 + 400);
  *(_QWORD *)(v41 + 400) = v42;
  if (v54)
  {
    v55 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v55, v56);
  }
  v57 = __ldxr((unsigned __int8 *)v43);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, (unsigned __int8 *)v43))
LABEL_62:
    WTF::Lock::unlockSlow((WTF::Lock *)v43);
LABEL_63:
  SlowCase = v42[3];
  if (SlowCase < v42[4])
  {
LABEL_64:
    v42[3] = SlowCase + 32;
    goto LABEL_65;
  }
  SlowCase = v42[5];
  if ((SlowCase & 1) == 0)
  {
    v88 = *(_QWORD *)(SlowCase + 8) ^ v42[6];
    v42[4] = SlowCase + HIDWORD(v88);
    v42[5] = SlowCase + (int)v88;
    goto LABEL_64;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_65:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v32);
  *(_QWORD *)(SlowCase + 24) = v22;
  if (*(_BYTE *)(v39 + 755))
    __dmb(0xAu);
  v59 = *(_QWORD *)(v23 + 3320);
  if ((byte_1EE337500 & 1) == 0)
  {
    qword_1EE3374F8 = (uint64_t)&off_1E334AF50;
    byte_1EE337500 = 1;
  }
  v96[0] = (uint64_t)v22;
  if ((SlowCase & 8) != 0)
    v60 = (SlowCase - 112) | 1;
  else
    v60 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v60 & 1) != 0)
    v61 = v60 + 47;
  else
    v61 = *(_QWORD *)v60 + 32;
  Allocator = *(JSC::VM **)(v61 + 16);
  if (!Allocator)
    Allocator = (JSC::VM *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v61 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = SlowCase;
  *((_QWORD *)Allocator + 1) = &qword_1EE3374F8;
  *((_QWORD *)Allocator + 2) = v59;
  v95 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v59 + 32), v96, (uint64_t *)&v95);
  if (v95)
    *((_QWORD *)v95 + 1) = 3;
  v63 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v63 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v63);
    if (Object)
    {
      v66 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v67 = (JSC::VM *)*((_QWORD *)v91 + 7);
        FunctionRealm = JSC::getFunctionRealm(v91, Object, v65);
        if (!*((_DWORD *)v67 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v67) & 1) == 0)
        {
          v70 = *(_QWORD *)(FunctionRealm + 3296);
          if (v70)
          {
            v71 = *(_DWORD *)(v70 - 8);
            v72 = ((unint64_t)&WebCore::JSApplePayError::s_info
                 + ~((_QWORD)&WebCore::JSApplePayError::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayError::s_info
                                                                         + ~((_QWORD)&WebCore::JSApplePayError::s_info << 32)) >> 22);
            v73 = 9 * ((v72 + ~(v72 << 13)) ^ ((v72 + ~(v72 << 13)) >> 8));
            v74 = (v73 ^ (v73 >> 15)) + ~((v73 ^ (v73 >> 15)) << 27);
            v75 = v71 & ((v74 >> 31) ^ v74);
            v76 = *(char ***)(v70 + 16 * v75);
            if (v76 == &WebCore::JSApplePayError::s_info)
            {
LABEL_87:
              v78 = *(JSC::JSObject **)(v70 + 16 * v75 + 8);
              if (v78)
              {
LABEL_89:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(v91, v66, v78, v68);
                if (!*((_DWORD *)v67 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v67) & 1) == 0)
                  JSC::JSObject::setStructure((JSCell *)SlowCase, v67, SubclassStructure);
                goto LABEL_91;
              }
            }
            else
            {
              v77 = 1;
              while (v76)
              {
                v75 = ((_DWORD)v75 + v77) & v71;
                v76 = *(char ***)(v70 + 16 * v75);
                ++v77;
                if (v76 == &WebCore::JSApplePayError::s_info)
                  goto LABEL_87;
              }
            }
          }
          v79 = WebCore::JSApplePayErrorPrototype::createStructure((uint64_t *)v67, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(v79 + 16) |= 0x80000u;
          v82 = (JSC::JSCell *)WebCore::JSApplePayErrorPrototype::create(v67, v79, v80, v81);
          v83 = WebCore::JSApplePayError::createStructure((uint64_t *)v67, FunctionRealm, v82);
          v78 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v83, (uint64_t)&WebCore::JSApplePayError::s_info);
          goto LABEL_89;
        }
      }
    }
  }
LABEL_91:
  if (*((_DWORD *)v92 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v92) & 1) != 0)
    SlowCase = 0;
  v85 = v94;
  if (v94 != -1)
    goto LABEL_93;
  return SlowCase;
}

uint64_t WebCore::JSApplePayError::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 8) == 1)
    {
      v3 = *(WTF::StringImpl **)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      return WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)(v2 + 8);
    }
  }
  return this;
}

uint64_t WebCore::JSApplePayError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePayErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePayErrorPrototype::create(WebCore::JSApplePayErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSApplePayError::s_info, &WebCore::JSApplePayErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSApplePayError>,(WebCore::DOMConstructorID)50>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 400);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSApplePayError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSApplePayError::s_info + ~((_QWORD)&WebCore::JSApplePayError::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePayError::s_info + ~((_QWORD)&WebCore::JSApplePayError::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSApplePayError::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSApplePayError::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSApplePayErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSApplePayErrorPrototype::create((WebCore::JSApplePayErrorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSApplePayError::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSApplePayError::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 400) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsApplePayErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSApplePayErrorPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSApplePayError>,(WebCore::DOMConstructorID)50>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsApplePayError_code(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::ApplePayErrorCode>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 12));
}

BOOL WebCore::setJSApplePayError_code(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  __int16 v10;
  char v11;
  int v12;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSApplePayError::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSApplePayError::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = WebCore::parseEnumeration<WebCore::ApplePayErrorCode>(a1, (unint64_t)this);
  v11 = v10;
  v12 = HIBYTE(v10);
  if (!*((_DWORD *)v3 + 20))
  {
    if (!HIBYTE(v10))
      return 0;
    goto LABEL_14;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
  result = 0;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0 && v12)
  {
LABEL_14:
    *(_BYTE *)(v9 + 12) = v11;
    return 1;
  }
  return result;
}

uint64_t WebCore::jsApplePayError_contactField(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  if (*(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 13) < 0x100u)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  WebCore::convertEnumerationToString(*(_WORD *)(*(_QWORD *)(a2 + 24) + 13), &v11);
  v6 = v11;
  if (!v11)
    return *v4;
  v7 = *((_DWORD *)v11 + 1);
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v2 = *(_QWORD *)(v3 + 64760);
      if (!v2 || v11 != *(WTF::StringImpl **)(v2 + 8))
        v2 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_9;
    }
    v9 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_6;
      v10 = v10;
    }
    v2 = *(_QWORD *)(v3 + 8 * v10 + 42216);
  }
  else
  {
    v2 = *v4;
  }
LABEL_9:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v5);
  else
    *(_DWORD *)v6 -= 2;
  return v2;
}

BOOL WebCore::setJSApplePayError_contactField(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSApplePayError::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSApplePayError::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
LABEL_17:
    *(_WORD *)(v9 + 13) = v10;
    return 1;
  }
  v11 = WebCore::parseEnumeration<WebCore::ApplePayErrorContactField>(a1, this);
  if (!*((_DWORD *)v3 + 20))
  {
    if (!HIBYTE(v11))
      return 0;
    goto LABEL_16;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
  result = 0;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0 && HIBYTE(v11))
  {
LABEL_16:
    v10 = v11 | 0x100;
    goto LABEL_17;
  }
  return result;
}

uint64_t WebCore::jsApplePayError_message(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 16);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

BOOL WebCore::setJSApplePayError_message(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  unint64_t v20;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSApplePayError::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSApplePayError::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v19 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v19;
    if (hasExceptionsAfterHandlingTraps)
    {
      v18 = 1;
      v19 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v13 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = v19;
  }
  v18 = 0;
  v17 = 0;
  v12 = *(WTF::StringImpl **)(v9 + 16);
  *(_QWORD *)(v9 + 16) = v11;
  if (!v12)
    goto LABEL_29;
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
LABEL_29:
    v13 = 0;
    goto LABEL_23;
  }
  v13 = 0;
  *(_DWORD *)v12 -= 2;
LABEL_23:
  v14 = 1;
LABEL_24:
  ((void (*)(unint64_t *, uint64_t *))off_1E334B060[v13])(&v20, &v17);
  return v14;
}

uint64_t WebCore::jsApplePayError_domain(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(unsigned __int16 *)(*((_QWORD *)a2 + 3) + 24);
  if (v2 < 0x100)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = (uint64_t *)(v4 + 41968);
  if ((byte_1EE3374D9 & 1) == 0)
  {
    WebCore::convertEnumerationToString(WebCore::ApplePayError::Domain)::$_0::operator() const(void)::impl += 2;
    unk_1EE3374F0 = &WebCore::convertEnumerationToString(WebCore::ApplePayError::Domain)::$_0::operator() const(void)::impl;
    byte_1EE3374D9 = 1;
  }
  v6 = *(_QWORD *)&_MergedGlobals_204[8 * v2 + 24];
  if (!v6)
    return *v5;
  v7 = *(_DWORD *)v6;
  v8 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)v6 += 2;
  if (v8)
  {
    if (v8 != 1)
    {
LABEL_8:
      v3 = *(_QWORD *)(v4 + 64760);
      if (!v3 || v6 != *(_QWORD *)(v3 + 8))
      {
        v3 = JSC::jsStringWithCacheSlowCase();
        v7 = *(_DWORD *)v6 - 2;
      }
      goto LABEL_11;
    }
    v10 = *(unsigned __int8 **)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_8;
      v11 = v12;
    }
    v3 = *(_QWORD *)(v4 + 8 * v11 + 42216);
  }
  else
  {
    v3 = *v5;
  }
LABEL_11:
  if (v7)
    *(_DWORD *)v6 = v7;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v6, a2);
  return v3;
}

BOOL WebCore::setJSApplePayError_domain(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSApplePayError::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSApplePayError::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
LABEL_17:
    *(_WORD *)(v9 + 24) = v10;
    return 1;
  }
  v11 = WebCore::parseEnumeration<WebCore::ApplePayError::Domain>(a1, this);
  if (!*((_DWORD *)v3 + 20))
  {
    if (!HIBYTE(v11))
      return 0;
    goto LABEL_16;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
  result = 0;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0 && HIBYTE(v11))
  {
LABEL_16:
    v10 = v11 | 0x100;
    goto LABEL_17;
  }
  return result;
}

uint64_t WebCore::JSApplePayErrorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSApplePayErrorOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v24;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)(v3 + 8);
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)(v3 + 8) == 1)
  {
    v24 = *(WTF::StringImpl **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  else
  {
    --*(_DWORD *)(v3 + 8);
  }
}

uint64_t WebCore::convertEnumerationToJS<WebCore::ApplePayErrorCode>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE3374DA & 1) == 0)
  {
    dword_1ECE7A9B0 += 2;
    qword_1EE3376E8 = (uint64_t)&dword_1ECE7A9B0;
    dword_1ECE7A9D0 += 2;
    qword_1EE3376F0 = (uint64_t)&dword_1ECE7A9D0;
    dword_1ECE7A9F0 += 2;
    qword_1EE3376F8 = (uint64_t)&dword_1ECE7A9F0;
    dword_1ECE7AA10 += 2;
    qword_1EE337700 = (uint64_t)&dword_1ECE7AA10;
    dword_1ECE7AA30 += 2;
    qword_1EE337708 = (uint64_t)&dword_1ECE7AA30;
    dword_1ECE7AA50 += 2;
    qword_1EE337710 = (uint64_t)&dword_1ECE7AA50;
    dword_1ECE7AA70 += 2;
    qword_1EE337718 = (uint64_t)&dword_1ECE7AA70;
    dword_1ECE7AA90 += 2;
    qword_1EE337720 = (uint64_t)&dword_1ECE7AA90;
    byte_1EE3374DA = 1;
  }
  v3 = *(_QWORD *)&_MergedGlobals_204[8 * a2 + 528];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::ApplePayErrorCode>(uint64_t *a1)
{
  char **v1;
  int v2;
  int v3;

  v1 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::ApplePayErrorCode> [8]>::tryGet<WTF::String>(*a1);
  if (v1)
  {
    v2 = *(unsigned __int8 *)v1;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  return v2 | (v3 << 8);
}

char **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::ApplePayErrorCode> [8]>::tryGet<WTF::String>(uint64_t a1)
{
  const char *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint8x16_t v6;
  char **v7;
  BOOL v8;
  _BOOL4 v9;
  uint8x16_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  BOOL v14;
  BOOL v15;
  _BOOL4 v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  BOOL v20;
  _BOOL4 v21;
  BOOL v22;
  _BOOL4 v23;
  char **result;
  uint16x8_t v25;
  uint16x8_t v26;
  uint8x16_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v38;
  uint16x8_t v39;

  if (!a1)
  {
    v1 = 0;
    v2 = 0;
    v4 = 0x100000000;
    goto LABEL_36;
  }
  v1 = *(const char **)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 4);
  v3 = ((unint64_t)*(unsigned int *)(a1 + 16) >> 2) & 1;
  v4 = v3 << 32;
  if (v1 != "addressUnserviceable" && v2 == 20)
  {
    if ((_DWORD)v3)
    {
      if (*v1 == 97)
      {
        v6 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v1 + 4), (int8x16_t)xmmword_1968DC280), vceqq_s8(*(int8x16_t *)(v1 + 1), (int8x16_t)xmmword_1968DC270));
        v6.i8[0] = vminvq_u8(v6);
        if (v6.i32[0])
        {
LABEL_13:
          v7 = &WebCore::parseEnumerationFromString<WebCore::ApplePayErrorCode>(WTF::String const&)::mappings;
          return v7 + 2;
        }
        v2 = 20;
        goto LABEL_46;
      }
    }
    else if (*(_WORD *)v1 == 97)
    {
      v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC290);
      v11.i16[0] = vminvq_u16(v11);
      if (v11.i32[0])
      {
        v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 8), (int16x8_t)xmmword_1968DC2A0);
        v12.i16[0] = vminvq_u16(v12);
        if (v12.i32[0])
        {
          v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 24), (int16x8_t)xmmword_1968DC2B0);
          v13.i16[0] = vminvq_u16(v13);
          if (v13.i32[0])
            goto LABEL_13;
        }
        v8 = 0;
        v9 = v1 == "billingContactInvalid";
        goto LABEL_26;
      }
    }
    v2 = 20;
LABEL_36:
    v14 = 0;
    v16 = v1 == "couponCodeExpired";
    v15 = 1;
    goto LABEL_37;
  }
  if (v1 == "addressUnserviceable" && v2 == 20)
    goto LABEL_13;
  v8 = v2 == 21;
  v9 = v1 == "billingContactInvalid";
  if (v1 != "billingContactInvalid" && v2 == 21)
  {
    if ((_DWORD)v3)
    {
      if (*v1 == 98)
      {
        v10 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v1 + 5), (int8x16_t)xmmword_1968DC2D0), vceqq_s8(*(int8x16_t *)(v1 + 1), (int8x16_t)xmmword_1968DC2C0));
        v10.i8[0] = vminvq_u8(v10);
        if (v10.i32[0])
        {
LABEL_19:
          v7 = &off_1E3348B88;
          return v7 + 2;
        }
      }
      goto LABEL_45;
    }
    if (*(_WORD *)v1 != 98
      || (v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC2E0),
          v17.i16[0] = vminvq_u16(v17),
          !v17.i32[0]))
    {
LABEL_45:
      v2 = 21;
LABEL_46:
      v20 = 0;
      v21 = v1 == "shippingContactInvalid";
      goto LABEL_47;
    }
    v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 10), (int16x8_t)xmmword_1968DC2F0);
    v18.i16[0] = vminvq_u16(v18);
    if (v18.i32[0])
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 26), (int16x8_t)xmmword_1968DC300);
      v19.i16[0] = vminvq_u16(v19);
      if (v19.i32[0])
        goto LABEL_19;
    }
    v2 = 21;
    goto LABEL_36;
  }
LABEL_26:
  if (v9 && v8)
    goto LABEL_19;
  v14 = v2 == 17;
  v15 = v2 != 17;
  v16 = v1 == "couponCodeExpired";
  if (v1 != "couponCodeExpired" && v2 == 17)
  {
    if ((_DWORD)v3)
    {
      if (*v1 == 99 && *(_QWORD *)(v1 + 1) == 0x646F436E6F70756FLL && *(_QWORD *)(v1 + 9) == 0x6465726970784565)
        goto LABEL_39;
      v15 = 0;
      v2 = 17;
      v4 = 0x100000000;
    }
    else
    {
      if (*(_WORD *)v1 == 99)
      {
        v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC310);
        v25.i16[0] = vminvq_u16(v25);
        if (v25.i32[0])
        {
          v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 18), (int16x8_t)xmmword_1968DC320);
          v26.i16[0] = vminvq_u16(v26);
          if (v26.i32[0])
            goto LABEL_39;
        }
      }
      v15 = 0;
      v2 = 17;
    }
    goto LABEL_65;
  }
LABEL_37:
  if (v16 && v14)
  {
LABEL_39:
    v7 = &off_1E3348BA0;
    return v7 + 2;
  }
LABEL_65:
  if (v1 == "couponCodeInvalid" || v15)
  {
    if (v1 != "couponCodeInvalid")
      v14 = 0;
    if (v14)
      goto LABEL_72;
  }
  else
  {
    if (!v2)
    {
LABEL_72:
      v7 = &off_1E3348BB8;
      return v7 + 2;
    }
    if ((v4 & 0x100000000) != 0)
    {
      if (*v1 == 99 && *(_QWORD *)(v1 + 1) == 0x646F436E6F70756FLL && *(_QWORD *)(v1 + 9) == 0x64696C61766E4965)
        goto LABEL_72;
      v4 = 0x100000000;
    }
    else if (*(_WORD *)v1 == 99)
    {
      v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC310);
      v28.i16[0] = vminvq_u16(v28);
      if (v28.i32[0])
      {
        v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 18), (int16x8_t)xmmword_1968DC330);
        v29.i16[0] = vminvq_u16(v29);
        if (v29.i32[0])
          goto LABEL_72;
      }
    }
  }
  if (v1 != "recipientContactInvalid" && v2 == 23)
  {
    if ((v4 & 0x100000000) != 0)
    {
      if (*v1 != 114)
        return 0;
      v27 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v1 + 7), (int8x16_t)xmmword_1968DC350), vceqq_s8(*(int8x16_t *)(v1 + 1), (int8x16_t)xmmword_1968DC340));
      v27.i8[0] = vminvq_u8(v27);
      if (!v27.i32[0])
        return 0;
    }
    else
    {
      if (*(_WORD *)v1 != 114)
        return 0;
      v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC360);
      v30.i16[0] = vminvq_u16(v30);
      if (!v30.i32[0])
        return 0;
      v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 14), (int16x8_t)xmmword_1968DC370);
      v31.i16[0] = vminvq_u16(v31);
      if (!v31.i32[0]
        || (v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 30), (int16x8_t)xmmword_1968DC300),
            v32.i16[0] = vminvq_u16(v32),
            !v32.i32[0]))
      {
        v2 = 23;
        goto LABEL_46;
      }
    }
LABEL_79:
    v7 = &off_1E3348BD0;
    return v7 + 2;
  }
  if (v1 == "recipientContactInvalid" && v2 == 23)
    goto LABEL_79;
  v20 = v2 == 22;
  v21 = v1 == "shippingContactInvalid";
  if (v1 != "shippingContactInvalid" && v2 == 22)
  {
    if ((v4 & 0x100000000) != 0)
    {
      if (*v1 == 115)
      {
        v33 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v1 + 6), (int8x16_t)xmmword_1968DC2D0), vceqq_s8(*(int8x16_t *)(v1 + 1), (int8x16_t)xmmword_1968DC380));
        v33.i8[0] = vminvq_u8(v33);
        if (v33.i32[0])
          goto LABEL_49;
      }
      return 0;
    }
    if (*(_WORD *)v1 != 115)
      return 0;
    v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC390);
    v34.i16[0] = vminvq_u16(v34);
    if (!v34.i32[0])
      return 0;
    v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 12), (int16x8_t)xmmword_1968DC2F0);
    v35.i16[0] = vminvq_u16(v35);
    if (v35.i32[0])
    {
      v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 28), (int16x8_t)xmmword_1968DC300);
      v36.i16[0] = vminvq_u16(v36);
      if (v36.i32[0])
        goto LABEL_49;
    }
    v22 = 0;
    v23 = v1 == "unknown";
    v2 = 22;
LABEL_108:
    if (v23 && v22)
      goto LABEL_56;
    if (v1 == "unsupportedCard" || v2 != 15)
    {
      if (v2 != 15 || v1 != "unsupportedCard")
        return 0;
    }
    else if ((v4 & 0x100000000) != 0)
    {
      if (*v1 != 117 || *(_QWORD *)(v1 + 1) != 0x74726F707075736ELL || *(_QWORD *)(v1 + 7) != 0x6472614364657472)
        return 0;
    }
    else
    {
      if (*(_WORD *)v1 != 117)
        return 0;
      v38 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC3A0);
      v38.i16[0] = vminvq_u16(v38);
      if (!v38.i32[0])
        return 0;
      v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 14), (int16x8_t)xmmword_1968DC3B0);
      v39.i16[0] = vminvq_u16(v39);
      if (!v39.i32[0])
        return 0;
    }
    v7 = &off_1E3348C18;
    return v7 + 2;
  }
LABEL_47:
  if (v21 && v20)
  {
LABEL_49:
    v7 = &off_1E3348BE8;
    return v7 + 2;
  }
  v22 = v2 == 7;
  v23 = v1 == "unknown";
  if (v1 == "unknown" || v2 != 7)
    goto LABEL_108;
  if ((v4 & 0x100000000) != 0)
  {
    if (*v1 == 117 && *(_DWORD *)(v1 + 1) == 1869507438 && *(_DWORD *)(v1 + 3) == 1853321070)
    {
LABEL_56:
      v7 = &off_1E3348C00;
      return v7 + 2;
    }
    return 0;
  }
  if (*(_WORD *)v1 != 117)
    return 0;
  result = 0;
  if (*(_QWORD *)(v1 + 2) == 0x6F006E006B006ELL && *(_QWORD *)(v1 + 6) == 0x6E0077006F006ELL)
    goto LABEL_56;
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePayErrorCode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  char **v3;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  WTF::StringImpl *v8;
  unint64_t v9;

  v9 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v9, a1);
    v2 = v8;
  }
  else
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) == 0)
    {
      if (!v2)
        goto LABEL_6;
      goto LABEL_5;
    }
    v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
    if (v2)
LABEL_5:
      *(_DWORD *)v2 += 2;
  }
LABEL_6:
  v3 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::ApplePayErrorCode> [8]>::tryGet<WTF::String>((uint64_t)v2);
  if (v3)
  {
    v5 = *(unsigned __int8 *)v3;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v5 | (v6 << 8);
}

const char *WebCore::expectedEnumerationValues<WebCore::ApplePayErrorCode>()
{
  return "\"unknown\", \"shippingContactInvalid\", \"billingContactInvalid\", \"addressUnserviceable\", \"couponCodeInval"
         "id\", \"couponCodeExpired\", \"unsupportedCard\", \"recipientContactInvalid\"";
}

uint64_t WebCore::convertEnumerationToJS<WebCore::ApplePayErrorContactField>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  v3 = (uint64_t *)(a1 + 41968);
  WebCore::convertEnumerationToString(a2, &v11);
  v5 = v11;
  if (!v11)
    return *v3;
  v6 = *((_DWORD *)v11 + 1);
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = v3[2849];
      if (!v7 || v11 != *(WTF::StringImpl **)(v7 + 8))
        v7 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_7;
    }
    v9 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    v7 = *(_QWORD *)(a1 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v4);
  else
    *(_DWORD *)v5 -= 2;
  return v7;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::ApplePayErrorContactField>(uint64_t *a1)
{
  char **v1;
  int v2;
  int v3;

  v1 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::ApplePayErrorContactField> [13]>::tryGet<WTF::String>(*a1);
  if (v1)
  {
    v2 = *(unsigned __int8 *)v1;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  return v2 | (v3 << 8);
}

char **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::ApplePayErrorContactField> [13]>::tryGet<WTF::String>(uint64_t a1)
{
  const char *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  _BOOL4 v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  _BOOL4 v11;
  uint8x16_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  BOOL v15;
  _BOOL4 v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  char v25;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  BOOL v31;
  _BOOL4 v32;
  uint16x8_t v33;
  uint16x8_t v34;
  BOOL v35;
  _BOOL4 v36;
  uint8x16_t v37;
  char v38;
  _BOOL4 v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  char v45;
  uint16x8_t v47;
  uint16x8_t v48;

  if (!a1)
  {
    v1 = 0;
    v2 = 0;
    v5 = 0;
    v6 = 1;
    v4 = 0x100000000;
LABEL_33:
    v15 = 0;
    v16 = v1 == "country";
    goto LABEL_34;
  }
  v1 = *(const char **)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 4);
  v3 = ((unint64_t)*(unsigned int *)(a1 + 16) >> 2) & 1;
  v4 = v3 << 32;
  v5 = v2 == 12;
  v6 = v2 != 12;
  if (v1 == "addressLines" || v2 != 12)
  {
    if (v1 == "addressLines" && v2 == 12)
      goto LABEL_11;
    v10 = v2 == 18;
    v11 = v1 == "administrativeArea";
    if (v1 != "administrativeArea" && v2 == 18)
    {
      if ((_DWORD)v3)
      {
        if (*v1 == 97)
        {
          v12 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v1 + 2), (int8x16_t)xmmword_1968DC3F0), vceqq_s8(*(int8x16_t *)(v1 + 1), (int8x16_t)xmmword_1968DC3E0));
          v12.i8[0] = vminvq_u8(v12);
          if (v12.i32[0])
            goto LABEL_17;
        }
      }
      else if (*(_WORD *)v1 == 97)
      {
        v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC400);
        v17.i16[0] = vminvq_u16(v17);
        if (v17.i32[0])
        {
          v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 4), (int16x8_t)xmmword_1968DC410);
          v18.i16[0] = vminvq_u16(v18);
          if (!v18.i32[0]
            || (v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 20), (int16x8_t)xmmword_1968DC420),
                v19.i16[0] = vminvq_u16(v19),
                !v19.i32[0]))
          {
            v2 = 18;
            goto LABEL_33;
          }
LABEL_17:
          v9 = &off_1E3348C48;
          return v9 + 2;
        }
      }
      v7 = 0;
      v8 = 1;
      v2 = 18;
      goto LABEL_54;
    }
  }
  else
  {
    if ((_DWORD)v3)
    {
      if (*v1 == 97 && *(_QWORD *)(v1 + 1) == 0x694C737365726464)
      {
        if (*(_QWORD *)(v1 + 4) != 0x73656E694C737365)
        {
          v6 = 0;
          v7 = 0;
          v8 = 1;
          v2 = 12;
          goto LABEL_54;
        }
LABEL_11:
        v9 = &WebCore::parseEnumerationFromString<WebCore::ApplePayErrorContactField>(WTF::String const&)::mappings;
        return v9 + 2;
      }
      goto LABEL_32;
    }
    if (*(_WORD *)v1 != 97
      || (v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC3C0),
          v13.i16[0] = vminvq_u16(v13),
          !v13.i32[0]))
    {
LABEL_32:
      v6 = 0;
      v2 = 12;
      goto LABEL_33;
    }
    v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 8), (int16x8_t)xmmword_1968DC3D0);
    v14.i16[0] = vminvq_u16(v14);
    v10 = v14.i8[0];
    if (v14.i32[0])
      goto LABEL_11;
    v11 = v1 == "administrativeArea";
  }
  if (v11 && v10)
    goto LABEL_17;
  v15 = v2 == 7;
  v16 = v1 == "country";
  if (v1 != "country" && v2 == 7)
  {
    if ((_DWORD)v3)
    {
      if (*v1 == 99 && *(_DWORD *)(v1 + 1) == 1953396079 && *(_DWORD *)(v1 + 3) == 2037544046)
        goto LABEL_36;
      v7 = 0;
      v8 = 1;
      v2 = 7;
LABEL_44:
      v4 = 0x100000000;
      goto LABEL_54;
    }
    if (*(_WORD *)v1 != 99)
    {
      v7 = 0;
      v8 = 1;
      v2 = 7;
      goto LABEL_54;
    }
    v7 = 0;
    v8 = 1;
    v2 = 7;
    if (*(_QWORD *)(v1 + 2) == 0x74006E0075006FLL && *(_QWORD *)(v1 + 6) == 0x7900720074006ELL)
    {
LABEL_36:
      v9 = &off_1E3348C60;
      return v9 + 2;
    }
    goto LABEL_54;
  }
LABEL_34:
  if (v16 && v15)
    goto LABEL_36;
  v7 = v2 == 11;
  v8 = v2 != 11;
  if (v1 != "countryCode" && v2 == 11)
  {
    if ((v4 & 0x100000000) != 0)
    {
      if (*v1 != 99 || *(_QWORD *)(v1 + 1) != 0x6F437972746E756FLL || *(_QWORD *)(v1 + 3) != 0x65646F437972746ELL)
      {
        v8 = 0;
        v2 = 11;
        goto LABEL_44;
      }
    }
    else if (*(_WORD *)v1 != 99
           || (v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC430),
               v23.i16[0] = vminvq_u16(v23),
               !v23.i32[0])
           || (v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 6), (int16x8_t)xmmword_1968DC440),
               v24.i16[0] = vminvq_u16(v24),
               !v24.i32[0]))
    {
      v8 = 0;
      v2 = 11;
      goto LABEL_54;
    }
LABEL_47:
    v9 = &off_1E3348C78;
    return v9 + 2;
  }
  if (v1 == "countryCode" && v2 == 11)
    goto LABEL_47;
LABEL_54:
  if (v1 == "emailAddress" || v6)
  {
    if (v1 == "emailAddress" && v5)
      goto LABEL_66;
  }
  else
  {
    if (!v2)
      goto LABEL_66;
    if ((v4 & 0x100000000) != 0)
    {
      if (*v1 != 101 || *(_QWORD *)(v1 + 1) != 0x726464416C69616DLL || *(_QWORD *)(v1 + 4) != 0x737365726464416CLL)
        goto LABEL_70;
LABEL_66:
      v9 = &off_1E3348C90;
      return v9 + 2;
    }
    if (*(_WORD *)v1 == 101)
    {
      v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC450);
      v21.i16[0] = vminvq_u16(v21);
      if (v21.i32[0])
      {
        v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 8), (int16x8_t)xmmword_1968DC240);
        v22.i16[0] = vminvq_u16(v22);
        if (v22.i32[0])
          goto LABEL_66;
      }
    }
  }
LABEL_70:
  if (v1 == "locality" || v2 != 8)
  {
    if (v1 == "locality" && v2 == 8)
      goto LABEL_79;
    if (v1 == "name" || v2 != 4)
    {
      if (v1 != "name" || v2 != 4)
        goto LABEL_98;
    }
    else if ((v4 & 0x100000000) != 0)
    {
      if (*v1 != 110 || *(_WORD *)(v1 + 1) != 28001 || *((_WORD *)v1 + 1) != 25965)
        goto LABEL_98;
    }
    else if (*(_WORD *)v1 != 110 || *(_DWORD *)(v1 + 2) != 7143521 || *((_DWORD *)v1 + 1) != 6619245)
    {
      goto LABEL_98;
    }
    v9 = &off_1E3348CC0;
    return v9 + 2;
  }
  if ((v4 & 0x100000000) == 0)
  {
    if (*(_WORD *)v1 != 108 || *(_QWORD *)(v1 + 2) != 0x6C00610063006FLL || *((_QWORD *)v1 + 1) != 0x7900740069006CLL)
      goto LABEL_98;
    goto LABEL_79;
  }
  if (*v1 == 108 && *(_DWORD *)(v1 + 1) == 1818321775 && *((_DWORD *)v1 + 1) == 2037672300)
  {
LABEL_79:
    v9 = &off_1E3348CA8;
    return v9 + 2;
  }
LABEL_98:
  v25 = v1 == "phoneNumber" || v8;
  if ((v25 & 1) != 0)
  {
    if (v1 != "phoneNumber" || !v7)
      goto LABEL_116;
LABEL_112:
    v9 = &off_1E3348CD8;
    return v9 + 2;
  }
  if (!v2)
    goto LABEL_112;
  if ((v4 & 0x100000000) != 0)
  {
    if (*v1 != 112 || *(_QWORD *)(v1 + 1) != 0x626D754E656E6F68 || *(_QWORD *)(v1 + 3) != 0x7265626D754E656ELL)
      goto LABEL_116;
    goto LABEL_112;
  }
  if (*(_WORD *)v1 == 112)
  {
    v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC460);
    v27.i16[0] = vminvq_u16(v27);
    if (v27.i32[0])
    {
      v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 6), (int16x8_t)xmmword_1968DC470);
      v28.i16[0] = vminvq_u16(v28);
      if (v28.i32[0])
        goto LABEL_112;
    }
  }
LABEL_116:
  if (v1 == "phoneticName")
    v6 = 1;
  if (v6)
  {
    if (v1 != "phoneticName")
      v5 = 0;
    if (!v5)
      goto LABEL_132;
LABEL_128:
    v9 = &off_1E3348CF0;
    return v9 + 2;
  }
  if (!v2)
    goto LABEL_128;
  if ((v4 & 0x100000000) != 0)
  {
    if (*v1 != 112 || *(_QWORD *)(v1 + 1) != 0x4E636974656E6F68 || *(_QWORD *)(v1 + 4) != 0x656D614E63697465)
      goto LABEL_132;
    goto LABEL_128;
  }
  if (*(_WORD *)v1 == 112)
  {
    v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC210);
    v29.i16[0] = vminvq_u16(v29);
    if (v29.i32[0])
    {
      v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 8), (int16x8_t)xmmword_1968DC220);
      v30.i16[0] = vminvq_u16(v30);
      if (v30.i32[0])
        goto LABEL_128;
    }
  }
LABEL_132:
  if (v1 != "postalAddress" && v2 == 13)
  {
    if ((v4 & 0x100000000) != 0)
    {
      if (*v1 != 112 || *(_QWORD *)(v1 + 1) != 0x6464416C6174736FLL || *(_QWORD *)(v1 + 5) != 0x737365726464416CLL)
        goto LABEL_183;
      goto LABEL_141;
    }
    if (*(_WORD *)v1 != 112)
      goto LABEL_183;
    v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC230);
    v33.i16[0] = vminvq_u16(v33);
    if (!v33.i32[0])
      goto LABEL_183;
    v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 10), (int16x8_t)xmmword_1968DC240);
    v34.i16[0] = vminvq_u16(v34);
    v31 = v34.i8[0];
    if (!v34.i32[0])
    {
      v32 = v1 == "postalCode";
      goto LABEL_153;
    }
LABEL_141:
    v9 = &off_1E3348D08;
    return v9 + 2;
  }
  if (v1 == "postalAddress" && v2 == 13)
    goto LABEL_141;
  v31 = v2 == 10;
  v32 = v1 == "postalCode";
  if (v1 != "postalCode" && v2 == 10)
  {
    if ((v4 & 0x100000000) != 0)
    {
      if (*v1 != 112 || *(_QWORD *)(v1 + 1) != 0x646F436C6174736FLL || *(_QWORD *)(v1 + 2) != 0x65646F436C617473)
        goto LABEL_183;
    }
    else
    {
      if (*(_WORD *)v1 != 112)
        goto LABEL_183;
      v40 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC480);
      v40.i16[0] = vminvq_u16(v40);
      if (!v40.i32[0])
        goto LABEL_183;
      v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 4), (int16x8_t)xmmword_1968DC490);
      v41.i16[0] = vminvq_u16(v41);
      v35 = v41.i8[0];
      if (!v41.i32[0])
      {
        v36 = v1 == "subAdministrativeArea";
        goto LABEL_172;
      }
    }
LABEL_148:
    v9 = &off_1E3348D20;
    return v9 + 2;
  }
LABEL_153:
  if (v32 && v31)
    goto LABEL_148;
  v35 = v2 == 21;
  v36 = v1 == "subAdministrativeArea";
  if (v1 == "subAdministrativeArea" || v2 != 21)
  {
LABEL_172:
    if (!v36 || !v35)
      goto LABEL_183;
    goto LABEL_174;
  }
  if ((v4 & 0x100000000) == 0)
  {
    if (*(_WORD *)v1 != 115)
      goto LABEL_183;
    v42 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC4B0);
    v42.i16[0] = vminvq_u16(v42);
    if (!v42.i32[0])
      goto LABEL_183;
    v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 10), (int16x8_t)xmmword_1968DC410);
    v43.i16[0] = vminvq_u16(v43);
    if (!v43.i32[0])
      goto LABEL_183;
    v44 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 26), (int16x8_t)xmmword_1968DC420);
    v44.i16[0] = vminvq_u16(v44);
    if (!v44.i32[0])
      goto LABEL_183;
    goto LABEL_174;
  }
  if (*v1 == 115)
  {
    v37 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v1 + 5), (int8x16_t)xmmword_1968DC3F0), vceqq_s8(*(int8x16_t *)(v1 + 1), (int8x16_t)xmmword_1968DC4A0));
    v37.i8[0] = vminvq_u8(v37);
    if (!v37.i32[0])
    {
      v38 = v1 == "subLocality" || v8;
      v39 = v1 == "subLocality" && v7;
      if ((v38 & 1) == 0)
        goto LABEL_192;
      goto LABEL_196;
    }
LABEL_174:
    v9 = &off_1E3348D38;
    return v9 + 2;
  }
LABEL_183:
  v45 = v1 == "subLocality" || v8;
  v39 = v1 == "subLocality" && v7;
  if ((v45 & 1) != 0)
  {
LABEL_196:
    if (!v39)
      return 0;
LABEL_197:
    v9 = &off_1E3348D50;
    return v9 + 2;
  }
  if (!v2)
    goto LABEL_197;
  if ((v4 & 0x100000000) == 0)
  {
    if (*(_WORD *)v1 == 115)
    {
      v47 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1968DC4C0);
      v47.i16[0] = vminvq_u16(v47);
      if (v47.i32[0])
      {
        v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 6), (int16x8_t)xmmword_1968DC4D0);
        v48.i16[0] = vminvq_u16(v48);
        if (v48.i32[0])
          goto LABEL_197;
      }
    }
    return 0;
  }
LABEL_192:
  if (*v1 == 115 && *(_QWORD *)(v1 + 1) == 0x696C61636F4C6275 && *(_QWORD *)(v1 + 3) == 0x7974696C61636F4CLL)
    goto LABEL_197;
  return 0;
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePayErrorContactField>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  char **v3;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  WTF::StringImpl *v8;
  unint64_t v9;

  v9 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v9, a1);
    v2 = v8;
  }
  else
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) == 0)
    {
      if (!v2)
        goto LABEL_6;
      goto LABEL_5;
    }
    v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
    if (v2)
LABEL_5:
      *(_DWORD *)v2 += 2;
  }
LABEL_6:
  v3 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::ApplePayErrorContactField> [13]>::tryGet<WTF::String>((uint64_t)v2);
  if (v3)
  {
    v5 = *(unsigned __int8 *)v3;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v5 | (v6 << 8);
}

const char *WebCore::expectedEnumerationValues<WebCore::ApplePayErrorContactField>()
{
  return "\"phoneNumber\", \"emailAddress\", \"name\", \"phoneticName\", \"postalAddress\", \"addressLines\", \"subLocali"
         "ty\", \"locality\", \"postalCode\", \"subAdministrativeArea\", \"administrativeArea\", \"country\", \"countryCode\"";
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePayFeature>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  int v11;
  uint16x8_t v14;
  char **v15;
  uint16x8_t v16;
  uint16x8_t v17;
  BOOL v18;
  uint16x8_t v20;
  uint16x8_t v21;
  _BOOL4 v22;
  BOOL v23;
  uint8x16_t v24;
  BOOL v25;
  BOOL v26;
  uint8x16_t v27;
  uint8x16_t v28;
  char v29;
  uint8x16_t v30;
  BOOL v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint8x16_t v54;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint8x16_t v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  uint8x16_t v79;
  uint8x16_t v80;
  uint8x16_t v81;
  uint8x16_t v82;
  uint8x16_t v83;
  uint8x16_t v84;
  char v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint64_t v117;
  unint64_t v118;

  v3 = a1;
  v118 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v11 = 0;
        return v10 | (v11 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v118, a1);
  v4 = v117;
  if (!v117)
    goto LABEL_34;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v7 << 32;
  if (v5 != "applePayLater" && v6 == 13)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 97 || *(_QWORD *)(v5 + 1) != 0x4C796150656C7070 || *(_QWORD *)(v5 + 5) != 0x726574614C796150)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v5 != 97)
        goto LABEL_16;
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC4E0);
      v16.i16[0] = vminvq_u16(v16);
      if (!v16.i32[0])
        goto LABEL_16;
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968DC4F0);
      v17.i16[0] = vminvq_u16(v17);
      v18 = v17.i8[0];
      if (!v17.i32[0])
      {
        v22 = v5 == "lineItemPaymentTiming";
        v6 = 13;
        v23 = 1;
        goto LABEL_49;
      }
    }
    goto LABEL_38;
  }
  if (v5 == "applePayLater" && v6 == 13)
  {
LABEL_38:
    v15 = &WebCore::parseEnumerationFromString<WebCore::ApplePayFeature>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v5 != "applePayLaterAvailability" && v6 == 25)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 97)
        goto LABEL_16;
      v14 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 9), (int8x16_t)xmmword_1968DC510), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC500));
      v14.i8[0] = vminvq_u8((uint8x16_t)v14);
    }
    else
    {
      if (*(_WORD *)v5 != 97)
        goto LABEL_16;
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC4E0);
      v20.i16[0] = vminvq_u16(v20);
      if (!v20.i32[0])
        goto LABEL_16;
      v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 18), (int16x8_t)xmmword_1968DC520);
      v21.i16[0] = vminvq_u16(v21);
      if (!v21.i32[0])
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 34), (int16x8_t)xmmword_1968DC530);
      v14.i16[0] = vminvq_u16(v14);
    }
    if (!v14.i32[0])
      goto LABEL_16;
  }
  else if (v5 != "applePayLaterAvailability" || v6 != 25)
  {
    if (v5 != "authorizationResultOrderDetails" && v6 == 31)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 97)
          goto LABEL_16;
        v50 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 15), (int8x16_t)xmmword_1968DC550), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC540));
        v50.i8[0] = vminvq_u8((uint8x16_t)v50);
      }
      else
      {
        if (*(_WORD *)v5 != 97)
          goto LABEL_16;
        v51 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC560);
        v51.i16[0] = vminvq_u16(v51);
        if (!v51.i32[0])
          goto LABEL_16;
        v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 14), (int16x8_t)xmmword_1968DC570);
        v52.i16[0] = vminvq_u16(v52);
        if (!v52.i32[0])
          goto LABEL_16;
        v53 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 30), (int16x8_t)xmmword_1968DC580);
        v53.i16[0] = vminvq_u16(v53);
        if (!v53.i32[0])
          goto LABEL_16;
        v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 46), (int16x8_t)xmmword_1968DC590);
        v50.i16[0] = vminvq_u16(v50);
      }
      if (v50.i32[0])
      {
LABEL_128:
        v15 = &off_1E3348D98;
        goto LABEL_39;
      }
LABEL_16:
      v10 = 0;
      v11 = 0;
      goto LABEL_40;
    }
    if (v5 == "authorizationResultOrderDetails" && v6 == 31)
      goto LABEL_128;
    v18 = v6 == 21;
    v23 = v6 != 21;
    v22 = v5 == "lineItemPaymentTiming";
    if (v5 != "lineItemPaymentTiming" && v6 == 21)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 108
          || (v73 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 5), (int8x16_t)xmmword_1968DC5B0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC5A0)), v73.i8[0] = vminvq_u8(v73), !v73.i32[0]))
        {
          v25 = 0;
          v23 = 0;
          v8 = 0x100000000;
LABEL_331:
          v6 = 21;
          goto LABEL_60;
        }
        goto LABEL_51;
      }
      if (*(_WORD *)v5 != 108)
      {
        v25 = 0;
LABEL_330:
        v23 = 0;
        goto LABEL_331;
      }
      v86 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC5C0);
      v86.i16[0] = vminvq_u16(v86);
      v25 = v86.i8[0];
      if (!v86.i32[0])
        goto LABEL_330;
      v87 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968DC5D0);
      v87.i16[0] = vminvq_u16(v87);
      v25 = v87.i8[0];
      if (!v87.i32[0])
        goto LABEL_330;
      v88 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 26), (int16x8_t)xmmword_1968DC5E0);
      v88.i16[0] = vminvq_u16(v88);
      v25 = v88.i8[0];
      if (!v88.i32[0])
        goto LABEL_330;
LABEL_51:
      v15 = &off_1E3348DB0;
      goto LABEL_39;
    }
LABEL_49:
    if (v22 && v18)
      goto LABEL_51;
    if (v5 != "paymentRequestAutomaticReload" && v6 == 29)
    {
      if ((_DWORD)v7)
      {
        if (*v5 == 112)
        {
          v24 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 13), (int8x16_t)xmmword_1968DC600), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC5F0));
          v24.i8[0] = vminvq_u8(v24);
          if (v24.i32[0])
          {
LABEL_57:
            v15 = &off_1E3348DC8;
            goto LABEL_39;
          }
        }
        v25 = 0;
        v8 = 0x100000000;
      }
      else if (*(_WORD *)v5 == 112)
      {
        v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC610);
        v36.i16[0] = vminvq_u16(v36);
        v25 = v36.i8[0];
        if (v36.i32[0])
        {
          v37 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968DC620);
          v37.i16[0] = vminvq_u16(v37);
          v25 = v37.i8[0];
          if (v37.i32[0])
          {
            v38 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 26), (int16x8_t)xmmword_1968DC630);
            v38.i16[0] = vminvq_u16(v38);
            v25 = v38.i8[0];
            if (v38.i32[0])
            {
              v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 42), (int16x8_t)xmmword_1968DC640);
              v39.i16[0] = vminvq_u16(v39);
              v25 = v39.i8[0];
              if (v39.i32[0])
                goto LABEL_57;
            }
          }
        }
      }
      else
      {
        v25 = 0;
      }
      v6 = 29;
LABEL_60:
      v26 = 1;
      goto LABEL_61;
    }
    if (v5 == "paymentRequestAutomaticReload" && v6 == 29)
      goto LABEL_57;
    if (v5 != "paymentRequestCouponCode" && v6 == 24)
    {
      if ((_DWORD)v7)
      {
        if (*v5 == 112)
        {
          v54 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 8), (int8x16_t)xmmword_1968DC660), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC650));
          v54.i8[0] = vminvq_u8(v54);
          if (v54.i32[0])
          {
LABEL_142:
            v15 = &off_1E3348DE0;
            goto LABEL_39;
          }
        }
        v25 = 0;
        v8 = 0x100000000;
      }
      else if (*(_WORD *)v5 == 112)
      {
        v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC610);
        v65.i16[0] = vminvq_u16(v65);
        v25 = v65.i8[0];
        if (v65.i32[0])
        {
          v66 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v5 + 1), (int16x8_t)xmmword_1968DC670);
          v66.i16[0] = vminvq_u16(v66);
          v25 = v66.i8[0];
          if (v66.i32[0])
          {
            v67 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v5 + 2), (int16x8_t)xmmword_1968DC680);
            v67.i16[0] = vminvq_u16(v67);
            v25 = v67.i8[0];
            if (v67.i32[0])
              goto LABEL_142;
          }
        }
      }
      else
      {
        v25 = 0;
      }
      v6 = 24;
      goto LABEL_60;
    }
    if (v5 == "paymentRequestCouponCode" && v6 == 24)
      goto LABEL_142;
    v25 = v6 == 22;
    v26 = v6 != 22;
    if (v5 != "paymentRequestDeferred" && v6 == 22)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 112
          || (v74 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 6), (int8x16_t)xmmword_1968DC6A0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC690)), v74.i8[0] = vminvq_u8(v74), !v74.i32[0]))
        {
          v26 = 0;
          v8 = 0x100000000;
LABEL_333:
          v6 = 22;
          goto LABEL_61;
        }
      }
      else if (*(_WORD *)v5 != 112
             || (v89 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC610),
                 v89.i16[0] = vminvq_u16(v89),
                 !v89.i32[0])
             || (v90 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1968DC6B0),
                 v90.i16[0] = vminvq_u16(v90),
                 !v90.i32[0])
             || (v91 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 28), (int16x8_t)xmmword_1968DC6C0),
                 v91.i16[0] = vminvq_u16(v91),
                 !v91.i32[0]))
      {
        v26 = 0;
        goto LABEL_333;
      }
LABEL_289:
      v15 = &off_1E3348DF8;
      goto LABEL_39;
    }
    if (v5 == "paymentRequestDeferred" && v6 == 22)
      goto LABEL_289;
    if (v5 != "paymentRequestDisbursements" && v6 == 27)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 112
          || (v75 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 11), (int8x16_t)xmmword_1968DC6E0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC6D0)), v75.i8[0] = vminvq_u8(v75), !v75.i32[0]))
        {
          v8 = 0x100000000;
LABEL_334:
          v6 = 27;
          goto LABEL_61;
        }
      }
      else
      {
        if (*(_WORD *)v5 != 112)
          goto LABEL_334;
        v92 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC610);
        v92.i16[0] = vminvq_u16(v92);
        if (!v92.i32[0])
          goto LABEL_334;
        v93 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 6), (int16x8_t)xmmword_1968DC6F0);
        v93.i16[0] = vminvq_u16(v93);
        if (!v93.i32[0])
          goto LABEL_334;
        v94 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 22), (int16x8_t)xmmword_1968DC700);
        v94.i16[0] = vminvq_u16(v94);
        if (!v94.i32[0])
          goto LABEL_334;
        v95 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 38), (int16x8_t)xmmword_1968DC710);
        v95.i16[0] = vminvq_u16(v95);
        if (!v95.i32[0])
          goto LABEL_334;
      }
LABEL_295:
      v15 = &off_1E3348E10;
      goto LABEL_39;
    }
    if (v5 == "paymentRequestDisbursements" && v6 == 27)
      goto LABEL_295;
    if (v5 != "paymentRequestMerchantCategoryCode" && v6 == 34)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 112
          || (v76 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC720),
              v76.i8[0] = vminvq_u8(v76),
              !v76.i32[0])
          || (v77 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v5 + 2), (int8x16_t)xmmword_1968DC730),
              v77.i8[0] = vminvq_u8(v77),
              !v77.i32[0])
          || (v78 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v5 + 18), (int8x16_t)xmmword_1968DC740),
              v78.i8[0] = vminvq_u8(v78),
              !v78.i32[0]))
        {
          v8 = 0x100000000;
LABEL_335:
          v6 = 34;
          goto LABEL_61;
        }
      }
      else
      {
        if (*(_WORD *)v5 != 112)
          goto LABEL_335;
        v96 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC610);
        v96.i16[0] = vminvq_u16(v96);
        if (!v96.i32[0])
          goto LABEL_335;
        v97 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1968DC750);
        v97.i16[0] = vminvq_u16(v97);
        if (!v97.i32[0])
          goto LABEL_335;
        v98 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 20), (int16x8_t)xmmword_1968DC760);
        v98.i16[0] = vminvq_u16(v98);
        if (!v98.i32[0])
          goto LABEL_335;
        v99 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 36), (int16x8_t)xmmword_1968DC770);
        v99.i16[0] = vminvq_u16(v99);
        if (!v99.i32[0])
          goto LABEL_335;
        v100 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 52), (int16x8_t)xmmword_1968DC780);
        v100.i16[0] = vminvq_u16(v100);
        if (!v100.i32[0])
          goto LABEL_335;
      }
LABEL_302:
      v15 = &off_1E3348E28;
      goto LABEL_39;
    }
    if (v5 == "paymentRequestMerchantCategoryCode" && v6 == 34)
      goto LABEL_302;
    if (v5 != "paymentRequestMultiTokenContexts" && v6 == 32)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 112
          || (v79 = (uint8x16_t)vandq_s8(vceqq_s8(*((int8x16_t *)v5 + 1), (int8x16_t)xmmword_1968DC7A0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC790)), v79.i8[0] = vminvq_u8(v79), !v79.i32[0]))
        {
          v8 = 0x100000000;
LABEL_336:
          v6 = 32;
          goto LABEL_61;
        }
      }
      else
      {
        if (*(_WORD *)v5 != 112)
          goto LABEL_336;
        v101 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC610);
        v101.i16[0] = vminvq_u16(v101);
        if (!v101.i32[0])
          goto LABEL_336;
        v102 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v5 + 1), (int16x8_t)xmmword_1968DC7B0);
        v102.i16[0] = vminvq_u16(v102);
        if (!v102.i32[0])
          goto LABEL_336;
        v103 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v5 + 2), (int16x8_t)xmmword_1968DC7C0);
        v103.i16[0] = vminvq_u16(v103);
        if (!v103.i32[0])
          goto LABEL_336;
        v104 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v5 + 3), (int16x8_t)xmmword_1968DC7D0);
        v104.i16[0] = vminvq_u16(v104);
        if (!v104.i32[0])
          goto LABEL_336;
      }
LABEL_308:
      v15 = &off_1E3348E40;
      goto LABEL_39;
    }
    if (v5 == "paymentRequestMultiTokenContexts" && v6 == 32)
      goto LABEL_308;
    if (v5 != "paymentRequestRecurring" && v6 == 23)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 112
          || (v80 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 7), (int8x16_t)xmmword_1968DC7F0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC7E0)), v80.i8[0] = vminvq_u8(v80), !v80.i32[0]))
        {
          v8 = 0x100000000;
LABEL_337:
          v6 = 23;
          goto LABEL_61;
        }
      }
      else
      {
        if (*(_WORD *)v5 != 112)
          goto LABEL_337;
        v105 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC610);
        v105.i16[0] = vminvq_u16(v105);
        if (!v105.i32[0])
          goto LABEL_337;
        v106 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 14), (int16x8_t)xmmword_1968DC800);
        v106.i16[0] = vminvq_u16(v106);
        if (!v106.i32[0])
          goto LABEL_337;
        v107 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 30), (int16x8_t)xmmword_1968DC810);
        v107.i16[0] = vminvq_u16(v107);
        if (!v107.i32[0])
          goto LABEL_337;
      }
LABEL_313:
      v15 = &off_1E3348E58;
      goto LABEL_39;
    }
    if (v5 == "paymentRequestRecurring" && v6 == 23)
      goto LABEL_313;
    if (v5 != "paymentRequestShippingContactEditingMode" && v6 == 40)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 112
          || (v81 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC820),
              v81.i8[0] = vminvq_u8(v81),
              !v81.i32[0])
          || (v82 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v5 + 8), (int8x16_t)xmmword_1968DC830),
              v82.i8[0] = vminvq_u8(v82),
              !v82.i32[0])
          || (v83 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v5 + 24), (int8x16_t)xmmword_1968DC840),
              v83.i8[0] = vminvq_u8(v83),
              !v83.i32[0]))
        {
          v8 = 0x100000000;
LABEL_338:
          v6 = 40;
          goto LABEL_61;
        }
      }
      else
      {
        if (*(_WORD *)v5 != 112)
          goto LABEL_338;
        v108 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC610);
        v108.i16[0] = vminvq_u16(v108);
        if (!v108.i32[0])
          goto LABEL_338;
        v109 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v5 + 1), (int16x8_t)xmmword_1968DC850);
        v109.i16[0] = vminvq_u16(v109);
        if (!v109.i32[0])
          goto LABEL_338;
        v110 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v5 + 2), (int16x8_t)xmmword_1968DC860);
        v110.i16[0] = vminvq_u16(v110);
        if (!v110.i32[0])
          goto LABEL_338;
        v111 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v5 + 3), (int16x8_t)xmmword_1968DC870);
        v111.i16[0] = vminvq_u16(v111);
        if (!v111.i32[0])
          goto LABEL_338;
        v112 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v5 + 4), (int16x8_t)xmmword_1968DC880);
        v112.i16[0] = vminvq_u16(v112);
        if (!v112.i32[0])
          goto LABEL_338;
      }
LABEL_320:
      v15 = &off_1E3348E70;
      goto LABEL_39;
    }
    if (v5 == "paymentRequestShippingContactEditingMode" && v6 == 40)
      goto LABEL_320;
    if (v5 != "paymentTimingAutomaticReload" && v6 == 28)
    {
      if ((_DWORD)v7)
      {
        if (*v5 == 112)
        {
          v84 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 12), (int8x16_t)xmmword_1968DC8A0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC890));
          v84.i8[0] = vminvq_u8(v84);
          if (!v84.i32[0])
          {
            v85 = v5 == "paymentTimingDeferred" || v23;
            if (v5 != "paymentTimingDeferred")
              v18 = 0;
            v6 = 28;
            if ((v85 & 1) == 0)
              goto LABEL_66;
            v8 = 0x100000000;
            goto LABEL_274;
          }
          goto LABEL_326;
        }
        v8 = 0x100000000;
      }
      else if (*(_WORD *)v5 == 112)
      {
        v113 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC8B0);
        v113.i16[0] = vminvq_u16(v113);
        if (v113.i32[0])
        {
          v114 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 8), (int16x8_t)xmmword_1968DC8C0);
          v114.i16[0] = vminvq_u16(v114);
          if (v114.i32[0])
          {
            v115 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 24), (int16x8_t)xmmword_1968DC8D0);
            v115.i16[0] = vminvq_u16(v115);
            if (v115.i32[0])
            {
              v116 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 40), (int16x8_t)xmmword_1968DC640);
              v116.i16[0] = vminvq_u16(v116);
              if (v116.i32[0])
                goto LABEL_326;
            }
          }
        }
      }
      v6 = 28;
      goto LABEL_61;
    }
    if (v5 != "paymentTimingAutomaticReload" || v6 != 28)
    {
LABEL_61:
      if (v5 != "paymentTimingDeferred")
      {
        v18 = 0;
        if (!v23)
        {
          if (!v6)
          {
LABEL_67:
            v15 = &off_1E3348EA0;
            goto LABEL_39;
          }
          if ((v8 & 0x100000000) != 0)
          {
            if (*v5 != 112)
            {
LABEL_68:
              v8 = 0x100000000;
              goto LABEL_69;
            }
LABEL_66:
            v27 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 5), (int8x16_t)xmmword_1968DC8F0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC8E0));
            v27.i8[0] = vminvq_u8(v27);
            if (v27.i32[0])
              goto LABEL_67;
            goto LABEL_68;
          }
          if (*(_WORD *)v5 == 112)
          {
            v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC8B0);
            v33.i16[0] = vminvq_u16(v33);
            if (v33.i32[0])
            {
              v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968DC5E0);
              v34.i16[0] = vminvq_u16(v34);
              if (v34.i32[0])
              {
                v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 26), (int16x8_t)xmmword_1968DC6C0);
                v35.i16[0] = vminvq_u16(v35);
                if (v35.i32[0])
                  goto LABEL_67;
              }
            }
          }
LABEL_69:
          if (v5 == "paymentTimingImmediate" || v26)
          {
            if (v5 == "paymentTimingImmediate" && v25)
              goto LABEL_75;
          }
          else
          {
            if (!v6)
            {
LABEL_75:
              v15 = &off_1E3348EB8;
              goto LABEL_39;
            }
            if ((v8 & 0x100000000) != 0)
            {
              if (*v5 == 112)
              {
                v28 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 6), (int8x16_t)xmmword_1968DC910), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC900));
                v28.i8[0] = vminvq_u8(v28);
                if (v28.i32[0])
                  goto LABEL_75;
              }
              v8 = 0x100000000;
            }
            else if (*(_WORD *)v5 == 112)
            {
              v40 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC8B0);
              v40.i16[0] = vminvq_u16(v40);
              if (v40.i32[0])
              {
                v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1968DC920);
                v41.i16[0] = vminvq_u16(v41);
                if (v41.i32[0])
                {
                  v42 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 28), (int16x8_t)xmmword_1968DC930);
                  v42.i16[0] = vminvq_u16(v42);
                  if (v42.i32[0])
                    goto LABEL_75;
                }
              }
            }
          }
          v29 = v5 == "paymentTimingRecurring" || v26;
          if ((v29 & 1) != 0)
          {
            if (v5 == "paymentTimingRecurring" && v25)
              goto LABEL_85;
          }
          else
          {
            if (!v6)
            {
LABEL_85:
              v15 = &off_1E3348ED0;
              goto LABEL_39;
            }
            if ((v8 & 0x100000000) != 0)
            {
              if (*v5 == 112)
              {
                v30 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 6), (int8x16_t)xmmword_1968DC950), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC940));
                v30.i8[0] = vminvq_u8(v30);
                if (v30.i32[0])
                  goto LABEL_85;
              }
              v8 = 0x100000000;
            }
            else if (*(_WORD *)v5 == 112)
            {
              v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC8B0);
              v43.i16[0] = vminvq_u16(v43);
              if (v43.i32[0])
              {
                v44 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1968DC960);
                v44.i16[0] = vminvq_u16(v44);
                if (v44.i32[0])
                {
                  v45 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 28), (int16x8_t)xmmword_1968DC810);
                  v45.i16[0] = vminvq_u16(v45);
                  if (v45.i32[0])
                    goto LABEL_85;
                }
              }
            }
          }
          v31 = v6 != 33;
          if (v5 != "shippingContactEditingModeEnabled" && v6 == 33)
          {
            if ((v8 & 0x100000000) != 0)
            {
              if (*v5 == 115)
              {
                v32 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 17), (int8x16_t)xmmword_1968DC980), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC970));
                v32.i8[0] = vminvq_u8(v32);
                if (v32.i32[0])
                {
LABEL_92:
                  v15 = &off_1E3348EE8;
                  goto LABEL_39;
                }
              }
              goto LABEL_165;
            }
            if (*(_WORD *)v5 == 115)
            {
              v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC390);
              v46.i16[0] = vminvq_u16(v46);
              if (v46.i32[0])
              {
                v47 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 18), (int16x8_t)xmmword_1968DC990);
                v47.i16[0] = vminvq_u16(v47);
                if (v47.i32[0])
                {
                  v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 34), (int16x8_t)xmmword_1968DC9A0);
                  v48.i16[0] = vminvq_u16(v48);
                  if (v48.i32[0])
                  {
                    v49 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 50), (int16x8_t)xmmword_1968DC9B0);
                    v49.i16[0] = vminvq_u16(v49);
                    if (v49.i32[0])
                      goto LABEL_92;
                  }
                }
              }
            }
LABEL_166:
            if (v5 == "shippingMethodDateComponentsRange")
              v31 = 1;
            if (v31)
            {
              if (v6 != 33 || v5 != "shippingMethodDateComponentsRange")
                goto LABEL_16;
            }
            else if ((v8 & 0x100000000) != 0)
            {
              if (*v5 != 115
                || !vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 17), (int8x16_t)xmmword_1968DCA30), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DCA20))))
              {
                goto LABEL_16;
              }
            }
            else
            {
              if (*(_WORD *)v5 != 115)
                goto LABEL_16;
              v60 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DCA40);
              v60.i16[0] = vminvq_u16(v60);
              if (!v60.i32[0])
                goto LABEL_16;
              v61 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 18), (int16x8_t)xmmword_1968DCA50);
              v61.i16[0] = vminvq_u16(v61);
              if (!v61.i32[0])
                goto LABEL_16;
              v62 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 34), (int16x8_t)xmmword_1968DCA60);
              v62.i16[0] = vminvq_u16(v62);
              if (!v62.i32[0])
                goto LABEL_16;
              v63 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 50), (int16x8_t)xmmword_1968DCA70);
              v63.i16[0] = vminvq_u16(v63);
              if (!v63.i32[0])
                goto LABEL_16;
            }
            v15 = &off_1E3348F18;
            goto LABEL_39;
          }
          if (v5 == "shippingContactEditingModeEnabled" && v6 == 33)
            goto LABEL_92;
          if (v5 == "shippingContactEditingModeStorePickup" || v6 != 37)
          {
            if (v5 != "shippingContactEditingModeStorePickup" || v6 != 37)
              goto LABEL_166;
          }
          else if ((v8 & 0x100000000) != 0)
          {
            if (*v5 != 115
              || (v57 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DC970),
                  v57.i8[0] = vminvq_u8(v57),
                  !v57.i32[0])
              || (v58 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v5 + 5), (int8x16_t)xmmword_1968DC9C0),
                  v58.i8[0] = vminvq_u8(v58),
                  !v58.i32[0])
              || (v59 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v5 + 21), (int8x16_t)xmmword_1968DC9D0),
                  v59.i8[0] = vminvq_u8(v59),
                  !v59.i32[0]))
            {
LABEL_165:
              v8 = 0x100000000;
              goto LABEL_166;
            }
          }
          else
          {
            if (*(_WORD *)v5 != 115)
              goto LABEL_166;
            v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DC390);
            v68.i16[0] = vminvq_u16(v68);
            if (!v68.i32[0])
              goto LABEL_166;
            v69 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968DC9E0);
            v69.i16[0] = vminvq_u16(v69);
            if (!v69.i32[0])
              goto LABEL_166;
            v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 26), (int16x8_t)xmmword_1968DC9F0);
            v70.i16[0] = vminvq_u16(v70);
            if (!v70.i32[0])
              goto LABEL_166;
            v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 42), (int16x8_t)xmmword_1968DCA00);
            v71.i16[0] = vminvq_u16(v71);
            if (!v71.i32[0])
              goto LABEL_166;
            v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 58), (int16x8_t)xmmword_1968DCA10);
            v72.i16[0] = vminvq_u16(v72);
            if (!v72.i32[0])
              goto LABEL_166;
          }
          v15 = &off_1E3348F00;
          goto LABEL_39;
        }
      }
LABEL_274:
      if (v18)
        goto LABEL_67;
      goto LABEL_69;
    }
LABEL_326:
    v15 = &off_1E3348E88;
    goto LABEL_39;
  }
  v15 = &off_1E3348D80;
LABEL_39:
  v10 = *((unsigned __int8 *)v15 + 16);
  v11 = 1;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v11 << 8);
}

void WebCore::convertDictionary<WebCore::ApplePayInstallmentConfiguration>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t Object;
  JSC::Structure *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  JSC::VM *v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  BOOL v44;
  WTF::StringImpl *v45;
  unsigned __int16 v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  JSC::VM *v50;
  double v51;
  BOOL v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  JSValue v57;
  int i;
  unsigned int v59;
  JSC::JSCell *IndexQuickly;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  int v63;
  int v64;
  uint64_t v65;
  JSC::JSCell *v67;
  uint64_t v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  JSC::VM *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  JSC::VM *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  JSC::VM *v85;
  JSC::VM *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  JSC::VM *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  int v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  JSC::VM *v100;
  WTF::StringImpl *v101;
  const char *v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  BOOL v106;
  int v107;
  char **v108;
  int v109;
  BOOL v110;
  char v111;
  int v112;
  WTF::StringImpl **v113;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v118;
  char v119;
  WTF::StringImpl *v120;
  BOOL v121;
  BOOL v122;
  int v123;
  int v124;
  WTF::StringImpl *v125;
  char v126;
  int v127;
  char v128;
  char v129;
  BOOL v130;
  int v131;
  char v132;
  WebCore::ApplePayInstallmentItem *v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  int v137;
  uint64_t v138;
  int *v139;
  int v140;
  WTF::StringImpl *v141;
  BOOL v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  int v148;
  char v149[8];
  WTF::StringImpl *v150[4];
  BOOL v151;
  WTF::StringImpl *v152[6];
  JSC::VM *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  uint64_t v156;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v153 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v149[0] = 1;
    v151 = 0;
    memset(v150, 0, sizeof(v150));
    memset(v152, 0, 40);
LABEL_3:
    LOBYTE(v152[5]) = v14;
    *(_BYTE *)a3 = v149[0];
    v15 = v150[0];
    v16 = v152[0];
    v150[0] = 0;
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)&v150[1] = 0u;
    *(_QWORD *)(a3 + 24) = v12;
    *(_QWORD *)(a3 + 32) = v11;
    *(_BYTE *)(a3 + 40) = v10;
    v150[3] = 0;
    v152[0] = 0;
    *(_QWORD *)(a3 + 48) = v16;
    *(_QWORD *)(a3 + 56) = v9;
    *(_OWORD *)&v152[1] = 0u;
    *(_QWORD *)(a3 + 64) = v8;
    v152[3] = 0;
    v152[4] = 0;
    *(_DWORD *)(a3 + 72) = v7;
    *(_DWORD *)(a3 + 76) = v6;
    *(_QWORD *)(a3 + 80) = v5;
    *(_BYTE *)(a3 + 88) = v14;
    *(_DWORD *)(a3 + 96) = 0;
    goto LABEL_4;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(this);
    if (Object)
    {
      v19 = (JSC::Structure *)Object;
      v149[0] = 1;
      memset(v150, 0, sizeof(v150));
      v151 = 0;
      memset(v152, 0, 41);
      WTF::AtomStringImpl::addLiteral();
      v21 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
      if (v146)
      {
        if (*(_DWORD *)v146 == 2)
          WTF::StringImpl::destroy(v146, v20);
        else
          *(_DWORD *)v146 -= 2;
      }
      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
        goto LABEL_375;
      if (v21 == 10)
      {
        v145 = 0;
        goto LABEL_16;
      }
      v22 = (JSC::VM *)*((_QWORD *)a2 + 7);
      JSC::JSONStringify();
      if (!*((_DWORD *)v22 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) == 0)
      {
        LODWORD(v147) = 0;
        v23 = 0;
        v146 = 0;
        v145 = v155;
        v152[4] = v155;
        v24 = 1;
        goto LABEL_15;
      }
      v23 = 1;
      LODWORD(v147) = 1;
      v116 = v155;
      v155 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
        {
          WTF::StringImpl::destroy(v116, v115);
          v23 = v147;
          *(_DWORD *)(a3 + 96) = 1;
          v145 = 0;
          v24 = 0;
LABEL_15:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v23])(&v155, &v146);
          if (!v24)
            goto LABEL_4;
LABEL_16:
          WTF::AtomStringImpl::addLiteral();
          v25 = v146;
          v27 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v26);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
            goto LABEL_375;
          if (v27 == 10)
          {
            v144 = 0;
            goto LABEL_33;
          }
          v155 = (WTF::StringImpl *)v27;
          v28 = (JSC::VM *)*((_QWORD *)a2 + 7);
          if ((v27 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v27 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v155, a2);
LABEL_28:
            if (!*((_DWORD *)v28 + 20))
            {
              v30 = v154;
LABEL_30:
              LODWORD(v147) = 0;
LABEL_31:
              v31 = 0;
              v146 = 0;
              v144 = v30;
              v150[2] = v30;
              v32 = 1;
              goto LABEL_32;
            }
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
            v30 = v154;
            if ((hasExceptionsAfterHandlingTraps & 1) == 0)
              goto LABEL_30;
            v31 = 1;
            LODWORD(v147) = 1;
            v154 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
              {
                WTF::StringImpl::destroy(v30, v118);
                v31 = v147;
                if (!(_DWORD)v147)
                {
                  v30 = v146;
                  goto LABEL_31;
                }
                *(_DWORD *)(a3 + 96) = 1;
                if (v31 == -1)
                  goto LABEL_4;
                v144 = 0;
                v32 = 0;
LABEL_32:
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v31])(&v155, &v146);
                if (!v32)
                  goto LABEL_4;
LABEL_33:
                WTF::AtomStringImpl::addLiteral();
                v33 = v146;
                v35 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2)
                    WTF::StringImpl::destroy(v33, v34);
                  else
                    *(_DWORD *)v33 -= 2;
                }
                if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                  goto LABEL_375;
                if (v35 == 10)
                {
                  v143 = 0;
                  goto LABEL_50;
                }
                v155 = (WTF::StringImpl *)v35;
                v36 = (JSC::VM *)*((_QWORD *)a2 + 7);
                if ((v35 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v35 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v155, a2);
LABEL_45:
                  if (!*((_DWORD *)v36 + 20))
                  {
                    v38 = v154;
LABEL_47:
                    LODWORD(v147) = 0;
LABEL_48:
                    v39 = 0;
                    v146 = 0;
                    v143 = v38;
                    v150[3] = v38;
                    v40 = 1;
                    goto LABEL_49;
                  }
                  v119 = JSC::VM::hasExceptionsAfterHandlingTraps(v36);
                  v38 = v154;
                  if ((v119 & 1) == 0)
                    goto LABEL_47;
                  v39 = 1;
                  LODWORD(v147) = 1;
                  v154 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                    {
                      WTF::StringImpl::destroy(v38, v120);
                      v39 = v147;
                      if (!(_DWORD)v147)
                      {
                        v38 = v146;
                        goto LABEL_48;
                      }
                      *(_DWORD *)(a3 + 96) = 1;
                      if (v39 == -1)
                        goto LABEL_4;
                      v143 = 0;
                      v40 = 0;
LABEL_49:
                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v39])(&v155, &v146);
                      if (!v40)
                        goto LABEL_4;
LABEL_50:
                      WTF::AtomStringImpl::addLiteral();
                      v41 = v146;
                      v43 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
                      if (v41)
                      {
                        if (*(_DWORD *)v41 == 2)
                          WTF::StringImpl::destroy(v41, v42);
                        else
                          *(_DWORD *)v41 -= 2;
                      }
                      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                        goto LABEL_375;
                      if (v43 == 10)
                      {
                        v44 = 1;
                      }
                      else
                      {
                        v146 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                        v45 = v146;
                        v46 = WebCore::parseEnumeration<WebCore::ApplePaySetupFeatureType>(a2, v43);
                        if (*((_DWORD *)v45 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) != 0)
                          goto LABEL_375;
                        if (v46 <= 0xFFu)
                          goto LABEL_374;
                        v44 = v46 != 0;
                      }
                      v149[0] = v44;
                      WTF::AtomStringImpl::addLiteral();
                      v47 = v146;
                      v49 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
                      if (v47)
                      {
                        if (*(_DWORD *)v47 == 2)
                          WTF::StringImpl::destroy(v47, v48);
                        else
                          *(_DWORD *)v47 -= 2;
                      }
                      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                        goto LABEL_375;
                      if (v49 == 10)
                      {
                        v142 = 0;
                        goto LABEL_71;
                      }
                      v50 = (JSC::VM *)*((_QWORD *)a2 + 7);
                      if (v49 >= 0xFFFE000000000000)
                      {
                        v136 = (_DWORD)v49 == 0;
                        goto LABEL_415;
                      }
                      *(_QWORD *)&v51 = v49 - 0x2000000000000;
                      if (v49 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                      {
                        if (v51 <= 0.0)
                        {
                          v52 = v51 < 0.0;
                          goto LABEL_69;
                        }
                      }
                      else
                      {
                        if ((v49 & 0xFFFE000000000002) != 0)
                        {
                          v52 = v49 == 7;
                          goto LABEL_69;
                        }
                        v137 = *(unsigned __int8 *)(v49 + 5);
                        if (v137 == 3)
                        {
                          v140 = *(_DWORD *)(v49 + 8);
LABEL_414:
                          v136 = v140 == 0;
                          goto LABEL_415;
                        }
                        if (v137 == 2)
                        {
                          v138 = *(_QWORD *)(v49 + 8);
                          if ((v138 & 1) != 0)
                            v139 = (int *)(v49 + 16);
                          else
                            v139 = (int *)(v138 + 4);
                          v140 = *v139;
                          goto LABEL_414;
                        }
                        if ((*(_BYTE *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                        {
                          v136 = *(_QWORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_415:
                          v52 = !v136;
                          goto LABEL_69;
                        }
                      }
                      v52 = 1;
LABEL_69:
                      if (*((_DWORD *)v50 + 20))
                      {
                        v122 = v52;
                        v123 = JSC::VM::hasExceptionsAfterHandlingTraps(v50);
                        v52 = v122;
                        if (v123)
                          goto LABEL_375;
                      }
                      v142 = v52;
                      v151 = v52;
LABEL_71:
                      WTF::AtomStringImpl::addLiteral();
                      v53 = v146;
                      v55 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
                      if (v53)
                      {
                        if (*(_DWORD *)v53 == 2)
                          WTF::StringImpl::destroy(v53, v54);
                        else
                          *(_DWORD *)v53 -= 2;
                      }
                      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                        goto LABEL_375;
                      if (v55 == 10)
                      {
                        v6 = 0;
                        v7 = 0;
                        v141 = 0;
                      }
                      else
                      {
                        v56 = *((_QWORD *)a2 + 7);
                        v154 = (WTF::StringImpl *)v56;
                        if ((v55 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v55 + 5) <= 0x16u)
                        {
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          JSC::throwTypeError();
                          v62 = v155;
                          v155 = 0;
                          if (v62)
                          {
                            if (*(_DWORD *)v62 == 2)
                              WTF::StringImpl::destroy(v62, v61);
                            else
                              *(_DWORD *)v62 -= 2;
                          }
                          v141 = 0;
                          v7 = 0;
                          v6 = 0;
                          v63 = 0;
                          v64 = 1;
                          v148 = 1;
                          *(_DWORD *)(a3 + 96) = 1;
                        }
                        else
                        {
                          v155 = 0;
                          v156 = 0;
                          if (JSC::getIterationMode() == 2)
                          {
                            for (i = 1; ; ++i)
                            {
                              v59 = (*(_BYTE *)(v55 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v55 + 8) - 8) : 0;
                              if (i - 1 >= v59)
                                break;
                              IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v55, i - 1, 0);
                              if (!IndexQuickly)
                                IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v55, a2, (i - 1));
                              if (*(_DWORD *)(v56 + 80)
                                && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v56) & 1) != 0)
                              {
                                break;
                              }
                              WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayInstallmentItem>>::convert((uint64_t)a2, IndexQuickly, (uint64_t)&v155);
                              if (*(_QWORD *)(v56 + 16))
                              {
                                v68 = JSC::JSArrayIterator::create();
                                v69 = i | 0xFFFE000000000000;
                                if (i < 0)
                                  v69 = COERCE__INT64((double)i) + 0x2000000000000;
                                *(_QWORD *)(v68 + 16) = v69;
                                goto LABEL_123;
                              }
                            }
                          }
                          else
                          {
                            JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)v55, v57);
                            if (!*(_DWORD *)(v56 + 80)
                              || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v56) & 1) == 0)
                            {
                              while (1)
                              {
                                v65 = JSC::iteratorStep();
                                if (*(_QWORD *)(v56 + 16) || v65 == 6)
                                  break;
                                v67 = (JSC::JSCell *)JSC::iteratorValue();
                                if (*(_DWORD *)(v56 + 80))
                                {
                                  if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v56) & 1) != 0)
                                    break;
                                }
                                WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayInstallmentItem>>::convert((uint64_t)a2, v67, (uint64_t)&v155);
                                if (*(_QWORD *)(v56 + 16))
                                {
LABEL_123:
                                  JSC::iteratorClose();
                                  break;
                                }
                              }
                            }
                          }
                          if (*(_DWORD *)(v56 + 80)
                            && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v56) & 1) != 0)
                          {
                            v133 = v155;
                            v148 = 1;
                            if (HIDWORD(v156))
                            {
                              v134 = 48 * HIDWORD(v156);
                              do
                              {
                                WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v133, this);
                                v133 = (WebCore::ApplePayInstallmentItem *)(v135 + 48);
                                v134 -= 48;
                              }
                              while (v134);
                              v133 = v155;
                            }
                            if (v133)
                            {
                              v155 = 0;
                              LODWORD(v156) = 0;
                              WTF::fastFree(v133, this);
                            }
                          }
                          else
                          {
                            v146 = v155;
                            v147 = v156;
                            v148 = 0;
                          }
                          v64 = v148;
                          if (v148)
                          {
                            *(_DWORD *)(a3 + 96) = 1;
                            if (v64 == -1)
                              goto LABEL_4;
                            v141 = 0;
                            v7 = 0;
                            v6 = 0;
                            v63 = 0;
                          }
                          else
                          {
                            v70 = v146;
                            v7 = v147;
                            v6 = HIDWORD(v147);
                            v146 = 0;
                            v147 = 0;
                            v141 = v70;
                            v152[2] = v70;
                            v152[3] = (WTF::StringImpl *)__PAIR64__(v6, v7);
                            v63 = 1;
                          }
                        }
                        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B228[v64])(&v155, &v146);
                        if (!v63)
                        {
LABEL_4:
                          WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v149, this);
                          return;
                        }
                      }
                      WTF::AtomStringImpl::addLiteral();
                      v71 = v146;
                      v73 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
                      if (v71)
                      {
                        if (*(_DWORD *)v71 == 2)
                          WTF::StringImpl::destroy(v71, v72);
                        else
                          *(_DWORD *)v71 -= 2;
                      }
                      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                      {
LABEL_375:
                        *(_DWORD *)(a3 + 96) = 1;
                        goto LABEL_4;
                      }
                      if (v73 == 10)
                      {
LABEL_144:
                        WTF::AtomStringImpl::addLiteral();
                        v77 = v146;
                        v78 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
                        if (v77)
                        {
                          if (*(_DWORD *)v77 == 2)
                            WTF::StringImpl::destroy(v77, this);
                          else
                            *(_DWORD *)v77 -= 2;
                        }
                        if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                          goto LABEL_375;
                        if (v78 == 10)
                        {
LABEL_162:
                          WTF::AtomStringImpl::addLiteral();
                          v83 = v146;
                          v84 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
                          if (v83)
                          {
                            if (*(_DWORD *)v83 == 2)
                              WTF::StringImpl::destroy(v83, this);
                            else
                              *(_DWORD *)v83 -= 2;
                          }
                          v85 = v153;
                          if (*((_DWORD *)v153 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v153))
                            goto LABEL_375;
                          if (v84 == 10)
                          {
                            v13 = 0;
                            goto LABEL_182;
                          }
                          v155 = (WTF::StringImpl *)v84;
                          v86 = (JSC::VM *)*((_QWORD *)a2 + 7);
                          if ((v84 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v84 + 5) != 2)
                          {
                            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v155, a2);
LABEL_174:
                            if (!*((_DWORD *)v86 + 20))
                            {
                              v13 = v154;
LABEL_176:
                              LODWORD(v147) = 0;
LABEL_177:
                              v146 = 0;
                              v88 = v150[1];
                              v150[1] = v13;
                              if (!v88)
                              {
                                v89 = 0;
                                goto LABEL_180;
                              }
                              if (*(_DWORD *)v88 != 2)
                              {
                                v89 = 0;
                                *(_DWORD *)v88 -= 2;
LABEL_180:
                                LOBYTE(v90) = 1;
                                goto LABEL_181;
                              }
                              WTF::StringImpl::destroy(v88, this);
                              v90 = 1;
                              v89 = v147;
LABEL_257:
                              if (v89 == -1)
                              {
                                if (!v90)
                                  goto LABEL_4;
                                goto LABEL_182;
                              }
LABEL_181:
                              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v89])(&v155, &v146);
                              if ((v90 & 1) == 0)
                                goto LABEL_4;
LABEL_182:
                              WTF::AtomStringImpl::addLiteral();
                              v91 = v146;
                              v92 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
                              if (v91)
                              {
                                if (*(_DWORD *)v91 == 2)
                                  WTF::StringImpl::destroy(v91, this);
                                else
                                  *(_DWORD *)v91 -= 2;
                              }
                              if (*((_DWORD *)v85 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v85))
                                goto LABEL_375;
                              if (v92 == 10)
                              {
                                v9 = 0;
                                goto LABEL_201;
                              }
                              v155 = (WTF::StringImpl *)v92;
                              v93 = (JSC::VM *)*((_QWORD *)a2 + 7);
                              if ((v92 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v92 + 5) != 2)
                              {
                                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v155, a2);
LABEL_194:
                                if (*((_DWORD *)v93 + 20))
                                {
                                  v131 = JSC::VM::hasExceptionsAfterHandlingTraps(v93);
                                  v9 = v154;
                                  if (v131)
                                  {
                                    v96 = 1;
                                    LODWORD(v147) = 1;
                                    v154 = 0;
                                    if (v9)
                                    {
                                      if (*(_DWORD *)v9 == 2)
                                        WTF::StringImpl::destroy(v9, this);
                                      else
                                        *(_DWORD *)v9 -= 2;
                                    }
                                    v97 = 0;
                                    v9 = 0;
                                    *(_DWORD *)(a3 + 96) = 1;
LABEL_200:
                                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v96])(&v155, &v146);
                                    if (!v97)
                                      goto LABEL_4;
LABEL_201:
                                    WTF::AtomStringImpl::addLiteral();
                                    v98 = v146;
                                    v99 = JSC::JSObject::get(v19, a2, (unint64_t)v146);
                                    v10 = v142;
                                    if (v98)
                                    {
                                      if (*(_DWORD *)v98 == 2)
                                      {
                                        WTF::StringImpl::destroy(v98, this);
                                        v10 = v142;
                                      }
                                      else
                                      {
                                        *(_DWORD *)v98 -= 2;
                                      }
                                    }
                                    if (*((_DWORD *)v85 + 20))
                                    {
                                      v124 = JSC::VM::hasExceptionsAfterHandlingTraps(v85);
                                      v10 = v142;
                                      if (v124)
                                        goto LABEL_375;
                                    }
                                    if (v99 == 10)
                                    {
                                      v14 = 0;
                                      goto LABEL_285;
                                    }
                                    v100 = (JSC::VM *)*((_QWORD *)a2 + 7);
                                    v154 = v100;
                                    v146 = (WTF::StringImpl *)v99;
                                    if ((v99 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v99 + 5) != 2)
                                    {
                                      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v146, a2);
                                      v10 = v142;
                                      v101 = v155;
                                      if (v155)
                                        goto LABEL_213;
                                      goto LABEL_289;
                                    }
                                    v101 = *(WTF::StringImpl **)(v99 + 8);
                                    if ((v101 & 1) != 0)
                                    {
                                      v113 = (WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v99, a2);
                                      v10 = v142;
                                      v101 = *v113;
                                      if (!v101)
                                      {
LABEL_212:
                                        v155 = v101;
                                        if (v101)
                                        {
LABEL_213:
                                          v102 = (const char *)*((_QWORD *)v101 + 1);
                                          v103 = *((_DWORD *)v101 + 1);
                                          v104 = ((unint64_t)*((unsigned int *)v101 + 4) >> 2) & 1;
                                          v105 = v104 << 32;
                                          v106 = v103 != 3;
                                          if (v102 != "app" && v103 == 3)
                                          {
                                            if ((_DWORD)v104)
                                            {
                                              if (*v102 != 97 || *(_WORD *)(v102 + 1) != 28784)
                                              {
                                                v106 = 0;
LABEL_219:
                                                v107 = 3;
                                                v105 = 1;
LABEL_220:
                                                if (v102 == "web" || v106)
                                                {
                                                  if (v103 == 3 && v102 == "web")
                                                    goto LABEL_226;
                                                }
                                                else
                                                {
                                                  if (!v107)
                                                  {
LABEL_226:
                                                    v108 = &off_1E3348FF0;
LABEL_230:
                                                    v14 = *((_BYTE *)v108 + 16);
                                                    v109 = 1;
                                                    goto LABEL_281;
                                                  }
                                                  if (v105)
                                                  {
                                                    if (*v102 == 119 && *(_WORD *)(v102 + 1) == 25189)
                                                      goto LABEL_226;
                                                  }
                                                  else if (*(_WORD *)v102 == 119 && *(_DWORD *)(v102 + 2) == 6422629)
                                                  {
                                                    goto LABEL_226;
                                                  }
                                                }
                                                v109 = 0;
                                                v14 = 0;
LABEL_281:
                                                v155 = 0;
                                                if (*(_DWORD *)v101 == 2)
                                                {
                                                  WTF::StringImpl::destroy(v101, this);
                                                  v10 = v142;
                                                }
                                                else
                                                {
                                                  *(_DWORD *)v101 -= 2;
                                                }
LABEL_283:
                                                if (*((_DWORD *)v100 + 20))
                                                {
                                                  v132 = JSC::VM::hasExceptionsAfterHandlingTraps(v100);
                                                  v10 = v142;
                                                  if ((v132 & 1) != 0)
                                                    goto LABEL_375;
                                                }
                                                if (v109)
                                                {
LABEL_285:
                                                  v12 = v144;
                                                  v5 = v145;
                                                  v11 = v143;
                                                  v8 = v141;
                                                  goto LABEL_3;
                                                }
LABEL_374:
                                                JSC::throwTypeError();
                                                goto LABEL_375;
                                              }
                                            }
                                            else if (*(_WORD *)v102 != 97 || *(_DWORD *)(v102 + 2) != 7340144)
                                            {
                                              v106 = 0;
                                              v107 = 3;
                                              goto LABEL_220;
                                            }
LABEL_229:
                                            v108 = &WebCore::parseEnumerationFromString<WebCore::ApplePayInstallmentRetailChannel>(WTF::String const&)::mappings;
                                            goto LABEL_230;
                                          }
                                          if (v102 == "app" && v103 == 3)
                                            goto LABEL_229;
                                          v110 = v103 != 7;
                                          if (v102 == "inStore" || v103 != 7)
                                          {
                                            if (v102 == "inStore")
                                            {
                                              v107 = *((_DWORD *)v101 + 1);
                                              v121 = v103 == 7;
LABEL_334:
                                              v10 = v142;
                                              if (v121)
                                              {
LABEL_250:
                                                v108 = &off_1E3348FC0;
                                                goto LABEL_230;
                                              }
LABEL_265:
                                              if (v102 == "unknown" || v110)
                                              {
                                                if (v102 == "unknown")
                                                {
                                                  v130 = v103 == 7;
LABEL_365:
                                                  v10 = v142;
                                                  if (!v130)
                                                    goto LABEL_220;
                                                  goto LABEL_272;
                                                }
                                              }
                                              else
                                              {
                                                if (!v107)
                                                  goto LABEL_272;
                                                if ((_DWORD)v104)
                                                {
                                                  if (*v102 != 117
                                                    || *(_DWORD *)(v102 + 1) != 1869507438
                                                    || *(_DWORD *)(v102 + 3) != 1853321070)
                                                  {
                                                    goto LABEL_219;
                                                  }
LABEL_272:
                                                  v108 = &off_1E3348FD8;
                                                  goto LABEL_230;
                                                }
                                                if (*(_WORD *)v102 == 117)
                                                {
                                                  v105 = 0;
                                                  v107 = 3;
                                                  if (*(_QWORD *)(v102 + 2) == 0x6F006E006B006ELL)
                                                  {
                                                    v130 = *(_QWORD *)(v102 + 6) == 0x6E0077006F006ELL;
                                                    goto LABEL_365;
                                                  }
                                                }
                                                else
                                                {
                                                  v105 = 0;
                                                  v107 = 3;
                                                }
                                              }
                                              v10 = v142;
                                              goto LABEL_220;
                                            }
                                            v107 = *((_DWORD *)v101 + 1);
                                          }
                                          else
                                          {
                                            if ((_DWORD)v104)
                                            {
                                              if (*v102 == 105
                                                && *(_DWORD *)(v102 + 1) == 1869894510
                                                && *(_DWORD *)(v102 + 3) == 1701998452)
                                              {
                                                goto LABEL_250;
                                              }
                                              v110 = 0;
                                              v107 = 7;
                                              goto LABEL_265;
                                            }
                                            if (*(_WORD *)v102 == 105)
                                            {
                                              v110 = 0;
                                              v107 = 7;
                                              if (*(_QWORD *)(v102 + 2) == 0x6F00740053006ELL)
                                              {
                                                v121 = *(_QWORD *)(v102 + 6) == 0x650072006F0074;
                                                goto LABEL_334;
                                              }
                                            }
                                            else
                                            {
                                              v110 = 0;
                                              v107 = 7;
                                            }
                                          }
                                          v10 = v142;
                                          goto LABEL_265;
                                        }
LABEL_289:
                                        v14 = 0;
                                        v109 = 0;
                                        goto LABEL_283;
                                      }
                                    }
                                    else if (!v101)
                                    {
                                      goto LABEL_212;
                                    }
                                    *(_DWORD *)v101 += 2;
                                    goto LABEL_212;
                                  }
                                }
                                else
                                {
                                  v9 = v154;
                                }
                                LODWORD(v147) = 0;
                                v146 = 0;
                                v95 = v152[1];
                                v152[1] = v9;
                                if (v95)
                                {
                                  if (*(_DWORD *)v95 != 2)
                                  {
                                    v96 = 0;
                                    *(_DWORD *)v95 -= 2;
LABEL_199:
                                    v97 = 1;
                                    goto LABEL_200;
                                  }
                                  WTF::StringImpl::destroy(v95, this);
                                }
                                v96 = 0;
                                goto LABEL_199;
                              }
                              v94 = *(WTF::StringImpl **)(v92 + 8);
                              if ((v94 & 1) != 0)
                              {
                                v94 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v92, a2);
                                if (!v94)
                                  goto LABEL_193;
                              }
                              else if (!v94)
                              {
LABEL_193:
                                v154 = v94;
                                goto LABEL_194;
                              }
                              *(_DWORD *)v94 += 2;
                              goto LABEL_193;
                            }
                            v129 = JSC::VM::hasExceptionsAfterHandlingTraps(v86);
                            v13 = v154;
                            if ((v129 & 1) == 0)
                              goto LABEL_176;
                            LODWORD(v147) = 1;
                            v154 = 0;
                            if (v13)
                            {
                              if (*(_DWORD *)v13 == 2)
                              {
                                WTF::StringImpl::destroy(v13, this);
                                v89 = v147;
                                if (!(_DWORD)v147)
                                {
                                  v13 = v146;
                                  goto LABEL_177;
                                }
LABEL_360:
                                v90 = 0;
                                v13 = 0;
                                *(_DWORD *)(a3 + 96) = 1;
                                goto LABEL_257;
                              }
                              *(_DWORD *)v13 -= 2;
                            }
                            v89 = 1;
                            goto LABEL_360;
                          }
                          v87 = *(WTF::StringImpl **)(v84 + 8);
                          if ((v87 & 1) != 0)
                          {
                            v87 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v84, a2);
                            if (!v87)
                              goto LABEL_173;
                          }
                          else if (!v87)
                          {
LABEL_173:
                            v154 = v87;
                            goto LABEL_174;
                          }
                          *(_DWORD *)v87 += 2;
                          goto LABEL_173;
                        }
                        v155 = (WTF::StringImpl *)v78;
                        v79 = (JSC::VM *)*((_QWORD *)a2 + 7);
                        if ((v78 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v78 + 5) != 2)
                        {
                          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v155, a2);
LABEL_155:
                          if (!*((_DWORD *)v79 + 20))
                          {
                            v81 = v154;
LABEL_157:
                            LODWORD(v147) = 0;
LABEL_158:
                            v146 = 0;
                            v82 = v152[0];
                            v152[0] = v81;
                            if (!v82)
                            {
LABEL_161:
                              _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v155, (WTF::StringImpl *)&v146);
                              goto LABEL_162;
                            }
                            if (*(_DWORD *)v82 != 2)
                            {
                              *(_DWORD *)v82 -= 2;
                              goto LABEL_161;
                            }
                            WTF::StringImpl::destroy(v82, this);
                            v111 = 1;
                            v112 = v147;
                            goto LABEL_252;
                          }
                          v128 = JSC::VM::hasExceptionsAfterHandlingTraps(v79);
                          v81 = v154;
                          if ((v128 & 1) == 0)
                            goto LABEL_157;
                          LODWORD(v147) = 1;
                          v154 = 0;
                          if (v81)
                          {
                            if (*(_DWORD *)v81 == 2)
                            {
                              WTF::StringImpl::destroy(v81, this);
                              v112 = v147;
                              if (!(_DWORD)v147)
                              {
                                v81 = v146;
                                goto LABEL_158;
                              }
LABEL_354:
                              v111 = 0;
                              *(_DWORD *)(a3 + 96) = 1;
LABEL_252:
                              if (v112 != -1)
                                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v112])(&v155, &v146);
                              if ((v111 & 1) == 0)
                                goto LABEL_4;
                              goto LABEL_162;
                            }
                            *(_DWORD *)v81 -= 2;
                          }
                          v112 = 1;
                          goto LABEL_354;
                        }
                        v80 = *(WTF::StringImpl **)(v78 + 8);
                        if ((v80 & 1) != 0)
                        {
                          v80 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v78, a2);
                          if (!v80)
                            goto LABEL_154;
                        }
                        else if (!v80)
                        {
LABEL_154:
                          v154 = v80;
                          goto LABEL_155;
                        }
                        *(_DWORD *)v80 += 2;
                        goto LABEL_154;
                      }
                      v155 = (WTF::StringImpl *)v73;
                      v74 = (JSC::VM *)*((_QWORD *)a2 + 7);
                      if ((v73 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v73 + 5) != 2)
                      {
                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v155, a2);
LABEL_140:
                        if (!*((_DWORD *)v74 + 20))
                        {
                          v76 = v154;
LABEL_142:
                          LODWORD(v147) = 0;
LABEL_143:
                          v146 = 0;
                          v150[0] = v76;
                          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v155, (WTF::StringImpl *)&v146);
                          goto LABEL_144;
                        }
                        v126 = JSC::VM::hasExceptionsAfterHandlingTraps(v74);
                        v76 = v154;
                        if ((v126 & 1) == 0)
                          goto LABEL_142;
                        v127 = 1;
                        LODWORD(v147) = 1;
                        v154 = 0;
                        if (v76)
                        {
                          if (*(_DWORD *)v76 == 2)
                          {
                            WTF::StringImpl::destroy(v76, v125);
                            v127 = v147;
                            if (!(_DWORD)v147)
                            {
                              v76 = v146;
                              goto LABEL_143;
                            }
                            *(_DWORD *)(a3 + 96) = 1;
                            if (v127 == -1)
                              goto LABEL_4;
LABEL_348:
                            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v127])(&v155, &v146);
                            goto LABEL_4;
                          }
                          *(_DWORD *)v76 -= 2;
                        }
                        *(_DWORD *)(a3 + 96) = 1;
                        goto LABEL_348;
                      }
                      v75 = *(WTF::StringImpl **)(v73 + 8);
                      if ((v75 & 1) != 0)
                      {
                        v75 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v73, a2);
                        if (!v75)
                          goto LABEL_139;
                      }
                      else if (!v75)
                      {
LABEL_139:
                        v154 = v75;
                        goto LABEL_140;
                      }
                      *(_DWORD *)v75 += 2;
                      goto LABEL_139;
                    }
                    *(_DWORD *)v38 -= 2;
                  }
                  v143 = 0;
                  v40 = 0;
                  *(_DWORD *)(a3 + 96) = 1;
                  goto LABEL_49;
                }
                v37 = *(WTF::StringImpl **)(v35 + 8);
                if ((v37 & 1) != 0)
                {
                  v37 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v35, a2);
                  if (!v37)
                    goto LABEL_44;
                }
                else if (!v37)
                {
LABEL_44:
                  v154 = v37;
                  goto LABEL_45;
                }
                *(_DWORD *)v37 += 2;
                goto LABEL_44;
              }
              *(_DWORD *)v30 -= 2;
            }
            v144 = 0;
            v32 = 0;
            *(_DWORD *)(a3 + 96) = 1;
            goto LABEL_32;
          }
          v29 = *(WTF::StringImpl **)(v27 + 8);
          if ((v29 & 1) != 0)
          {
            v29 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, a2);
            if (!v29)
              goto LABEL_27;
          }
          else if (!v29)
          {
LABEL_27:
            v154 = v29;
            goto LABEL_28;
          }
          *(_DWORD *)v29 += 2;
          goto LABEL_27;
        }
        *(_DWORD *)v116 -= 2;
      }
      v145 = 0;
      v24 = 0;
      *(_DWORD *)(a3 + 96) = 1;
      goto LABEL_15;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 96) = 1;
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::ApplePayInstallmentConfiguration *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  unint64_t result;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  WTF *v52;
  WTF *v53;
  JSC::JSGlobalObject *v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  int v98;
  unsigned __int8 *v99;
  unsigned int v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unsigned __int8 *v103;
  unsigned int v104;
  unsigned __int8 *v105;
  unsigned int v106;
  unsigned __int8 *v107;
  unsigned int v108;
  unsigned __int8 *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  JSValue v117;
  void *v118;
  JSC::VM *v119;
  uint64_t v120;
  uint64_t *v121;
  WebCore::ApplePayInstallmentItem *v122;
  uint64_t v123;
  WTF *v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  unsigned __int8 *v162;
  unsigned int v163;
  unsigned __int8 *v164;
  unsigned int v165;
  unsigned __int8 *v166;
  unsigned int v167;
  unsigned __int8 *v168;
  unsigned int v169;
  unsigned __int8 *v170;
  unsigned int v171;
  unsigned __int8 *v172;
  unsigned int v173;
  unsigned __int8 *v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  _QWORD *v183;
  unsigned int v184;
  WTF *v185;
  WebCore::JSDOMGlobalObject *v186;
  JSC::VM *v187;
  WTF *v188;
  int v189;
  unsigned int v190;
  char v191;
  WTF *v192;
  uint64_t v193;
  WTF *v194;
  _OWORD v195[4];
  uint64_t v196;
  JSC::VM *v197;
  WTF *v198;
  unint64_t v199;
  int v200;
  int v201;
  uint64_t v202;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  bzero((void *)(v10 + 16), v9);
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  if (*((_QWORD *)a3 + 10))
  {
    v12 = JSC::JSONParse();
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = v192;
    v192 = 0;
    v193 = v10;
    v194 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v195[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v13, v12, 0, (uint64_t)&v192);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v15 = *((_QWORD *)a3 + 3);
  if (v15)
  {
    v16 = *((_QWORD *)this + 7);
    v17 = *(_DWORD *)(v15 + 4);
    if (v17)
    {
      if (v17 != 1)
      {
LABEL_11:
        v18 = *(_QWORD *)(v16 + 64760);
        if (!v18 || v15 != *(_QWORD *)(v18 + 8))
          v18 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_14;
      }
      v164 = *(unsigned __int8 **)(v15 + 8);
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
        v165 = *v164;
      }
      else
      {
        v177 = *(unsigned __int16 *)v164;
        if (v177 > 0xFF)
          goto LABEL_11;
        v165 = v177;
      }
      v18 = *(_QWORD *)(v16 + 8 * v165 + 42216);
    }
    else
    {
      v18 = *(_QWORD *)(v16 + 41968);
    }
LABEL_14:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v19 = v192;
    v192 = 0;
    v193 = v10;
    v194 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v195[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v19, v18, 0, (uint64_t)&v192);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v21 = *((_QWORD *)a3 + 4);
  if (v21)
  {
    v22 = *((_QWORD *)this + 7);
    v23 = *(_DWORD *)(v21 + 4);
    if (v23)
    {
      if (v23 != 1)
      {
LABEL_21:
        v24 = *(_QWORD *)(v22 + 64760);
        if (!v24 || v21 != *(_QWORD *)(v24 + 8))
          v24 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_24;
      }
      v166 = *(unsigned __int8 **)(v21 + 8);
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
      {
        v167 = *v166;
      }
      else
      {
        v178 = *(unsigned __int16 *)v166;
        if (v178 > 0xFF)
          goto LABEL_21;
        v167 = v178;
      }
      v24 = *(_QWORD *)(v22 + 8 * v167 + 42216);
    }
    else
    {
      v24 = *(_QWORD *)(v22 + 41968);
    }
LABEL_24:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v25 = v192;
    v192 = 0;
    v193 = v10;
    v194 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v195[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v25, v24, 0, (uint64_t)&v192);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v26);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v27 = WebCore::convertEnumerationToJS<WebCore::ApplePaySetupFeatureType>(*((_QWORD *)this + 7), (WTF::StringImpl *)*(unsigned __int8 *)a3);
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v28 = v192;
  v192 = 0;
  v193 = v10;
  v194 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v195[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v28, v27, 0, (uint64_t)&v192);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  v30 = *((_BYTE *)a3 + 40) ? 7 : 6;
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v31 = v192;
  v192 = 0;
  v193 = v10;
  v194 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v195[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v31, v30, 0, (uint64_t)&v192);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v192, (uint64_t *)a3 + 8);
  LOBYTE(v194) = 1;
  if (HIDWORD(v193))
  {
    v34 = v192;
    v35 = 48 * HIDWORD(v193);
    do
    {
      WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v34, v33);
      v34 = (WTF *)(v36 + 48);
      v35 -= 48;
    }
    while (v35);
  }
  v37 = v192;
  if (v192)
  {
    v192 = 0;
    LODWORD(v193) = 0;
    WTF::fastFree(v37, v33);
  }
  result = WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v188, (uint64_t *)a3 + 8);
  v191 = 1;
  v39 = v190;
  if (v190)
  {
    if (v190 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    v40 = WTF::fastMalloc((WTF *)(48 * v190));
    v41 = (WTF *)v40;
    if (v190)
    {
      v42 = 0;
      v43 = v188;
      v44 = (char *)v188 + 48 * v190;
      do
      {
        v45 = (_QWORD *)(v40 + v42);
        v46 = (_QWORD *)((char *)v43 + v42);
        *(_BYTE *)(v40 + v42) = *((_BYTE *)v43 + v42);
        v47 = *(_DWORD **)((char *)v43 + v42 + 8);
        if (v47)
          *v47 += 2;
        v45[1] = v47;
        v48 = (_DWORD *)v46[2];
        if (v48)
          *v48 += 2;
        v45[2] = v48;
        v49 = (_DWORD *)v46[3];
        if (v49)
          *v49 += 2;
        v45[3] = v49;
        v50 = (_DWORD *)v46[4];
        if (v50)
          *v50 += 2;
        v45[4] = v50;
        v51 = (_DWORD *)v46[5];
        if (v51)
          *v51 += 2;
        v45[5] = v51;
        v42 += 48;
      }
      while (v46 + 6 != (_QWORD *)v44);
    }
  }
  else
  {
    v41 = 0;
  }
  v187 = (JSC::VM *)*((_QWORD *)this + 7);
  v197 = v187;
  LOBYTE(v192) = 0;
  v193 = 0x800000000;
  v194 = (WTF *)((char *)v195 + 8);
  memset(v195, 0, sizeof(v195));
  v196 = 0;
  if (v39 >= 9)
  {
    LOBYTE(v192) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v193) == 1;
    v52 = (WTF *)((char *)v41 + 48 * v39);
  }
  else
  {
    v52 = (WTF *)((char *)v41 + 48 * v39);
    if (!v39)
    {
LABEL_200:
      v198 = v194;
      LODWORD(v199) = v193;
      v119 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if (*((_DWORD *)v119 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v119) & 1) != 0)
        v120 = 0;
      else
        v120 = JSC::constructArray();
      goto LABEL_202;
    }
  }
  v184 = v39;
  v185 = v41;
  v186 = a3;
  v53 = v41;
  do
  {
    v54 = a2;
    v55 = *((_QWORD *)this + 7);
    v56 = JSC::StructureCache::emptyObjectStructureForPrototype();
    v57 = 8 * *(unsigned __int8 *)(v56 + 14);
    v58 = JSC::allocateCell<JSC::JSFinalObject>(v55, v57 + 16);
    v59 = *(_DWORD *)(v56 + 8);
    *(_DWORD *)v58 = v56 >> 4;
    *(_DWORD *)(v58 + 4) = v59;
    *(_QWORD *)(v58 + 8) = 0;
    bzero((void *)(v58 + 16), v57);
    if (*(_BYTE *)(v55 + 755))
      __dmb(0xAu);
    v60 = *((_QWORD *)v53 + 1);
    if (!v60)
      goto LABEL_76;
    v61 = *((_QWORD *)this + 7);
    v62 = *(_DWORD *)(v60 + 4);
    if (v62)
    {
      if (v62 != 1)
        goto LABEL_69;
      v101 = *(unsigned __int8 **)(v60 + 8);
      if ((*(_BYTE *)(v60 + 16) & 4) != 0)
      {
        v102 = *v101;
      }
      else
      {
        v112 = *(unsigned __int16 *)v101;
        if (v112 > 0xFF)
        {
LABEL_69:
          v63 = *(_QWORD *)(v61 + 64760);
          if (!v63 || v60 != *(_QWORD *)(v63 + 8))
            v63 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_72;
        }
        v102 = v112;
      }
      v63 = *(_QWORD *)(v61 + 8 * v102 + 42216);
    }
    else
    {
      v63 = *(_QWORD *)(v61 + 41968);
    }
LABEL_72:
    if (*(_DWORD *)(v55 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v55) & 1) != 0)
    {
LABEL_196:
      v58 = 0;
LABEL_197:
      a2 = v54;
      goto LABEL_130;
    }
    WTF::AtomStringImpl::addLiteral();
    v64 = v198;
    v198 = 0;
    v199 = v58;
    v200 = -1;
    v201 = 0x1000000;
    v202 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v58, (JSC::VM *)v55, (unint64_t)v64, v63, 0, (uint64_t)&v198);
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v65);
      else
        *(_DWORD *)v64 -= 2;
    }
LABEL_76:
    v66 = *((_QWORD *)v53 + 4);
    if (!v66)
      goto LABEL_86;
    v67 = *((_QWORD *)this + 7);
    v68 = *(_DWORD *)(v66 + 4);
    if (v68)
    {
      if (v68 != 1)
        goto LABEL_79;
      v103 = *(unsigned __int8 **)(v66 + 8);
      if ((*(_BYTE *)(v66 + 16) & 4) != 0)
      {
        v104 = *v103;
      }
      else
      {
        v113 = *(unsigned __int16 *)v103;
        if (v113 > 0xFF)
        {
LABEL_79:
          v69 = *(_QWORD *)(v67 + 64760);
          if (!v69 || v66 != *(_QWORD *)(v69 + 8))
            v69 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_82;
        }
        v104 = v113;
      }
      v69 = *(_QWORD *)(v67 + 8 * v104 + 42216);
    }
    else
    {
      v69 = *(_QWORD *)(v67 + 41968);
    }
LABEL_82:
    if (*(_DWORD *)(v55 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v55) & 1) != 0)
      goto LABEL_196;
    WTF::AtomStringImpl::addLiteral();
    v70 = v198;
    v198 = 0;
    v199 = v58;
    v200 = -1;
    v201 = 0x1000000;
    v202 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v58, (JSC::VM *)v55, (unint64_t)v70, v69, 0, (uint64_t)&v198);
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v71);
      else
        *(_DWORD *)v70 -= 2;
    }
LABEL_86:
    v72 = *((_QWORD *)v53 + 2);
    if (!v72)
      goto LABEL_96;
    v73 = *((_QWORD *)this + 7);
    v74 = *(_DWORD *)(v72 + 4);
    if (v74)
    {
      if (v74 != 1)
        goto LABEL_89;
      v105 = *(unsigned __int8 **)(v72 + 8);
      if ((*(_BYTE *)(v72 + 16) & 4) != 0)
      {
        v106 = *v105;
      }
      else
      {
        v114 = *(unsigned __int16 *)v105;
        if (v114 > 0xFF)
        {
LABEL_89:
          v75 = *(_QWORD *)(v73 + 64760);
          if (!v75 || v72 != *(_QWORD *)(v75 + 8))
            v75 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_92;
        }
        v106 = v114;
      }
      v75 = *(_QWORD *)(v73 + 8 * v106 + 42216);
    }
    else
    {
      v75 = *(_QWORD *)(v73 + 41968);
    }
LABEL_92:
    if (*(_DWORD *)(v55 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v55) & 1) != 0)
      goto LABEL_196;
    WTF::AtomStringImpl::addLiteral();
    v76 = v198;
    v198 = 0;
    v199 = v58;
    v200 = -1;
    v201 = 0x1000000;
    v202 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v58, (JSC::VM *)v55, (unint64_t)v76, v75, 0, (uint64_t)&v198);
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v77);
      else
        *(_DWORD *)v76 -= 2;
    }
LABEL_96:
    v78 = *((_QWORD *)v53 + 3);
    if (!v78)
      goto LABEL_106;
    v79 = *((_QWORD *)this + 7);
    v80 = *(_DWORD *)(v78 + 4);
    if (v80)
    {
      if (v80 != 1)
        goto LABEL_99;
      v107 = *(unsigned __int8 **)(v78 + 8);
      if ((*(_BYTE *)(v78 + 16) & 4) != 0)
      {
        v108 = *v107;
      }
      else
      {
        v115 = *(unsigned __int16 *)v107;
        if (v115 > 0xFF)
        {
LABEL_99:
          v81 = *(_QWORD *)(v79 + 64760);
          if (!v81 || v78 != *(_QWORD *)(v81 + 8))
            v81 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_102;
        }
        v108 = v115;
      }
      v81 = *(_QWORD *)(v79 + 8 * v108 + 42216);
    }
    else
    {
      v81 = *(_QWORD *)(v79 + 41968);
    }
LABEL_102:
    if (*(_DWORD *)(v55 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v55) & 1) != 0)
      goto LABEL_196;
    WTF::AtomStringImpl::addLiteral();
    v82 = v198;
    v198 = 0;
    v199 = v58;
    v200 = -1;
    v201 = 0x1000000;
    v202 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v58, (JSC::VM *)v55, (unint64_t)v82, v81, 0, (uint64_t)&v198);
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, v83);
      else
        *(_DWORD *)v82 -= 2;
    }
LABEL_106:
    v84 = *((_QWORD *)v53 + 5);
    if (!v84)
      goto LABEL_116;
    v85 = *((_QWORD *)this + 7);
    v86 = *(_DWORD *)(v84 + 4);
    if (v86)
    {
      if (v86 != 1)
        goto LABEL_109;
      v109 = *(unsigned __int8 **)(v84 + 8);
      if ((*(_BYTE *)(v84 + 16) & 4) != 0)
      {
        v110 = *v109;
      }
      else
      {
        v116 = *(unsigned __int16 *)v109;
        if (v116 > 0xFF)
        {
LABEL_109:
          v87 = *(_QWORD *)(v85 + 64760);
          if (!v87 || v84 != *(_QWORD *)(v87 + 8))
            v87 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_112;
        }
        v110 = v116;
      }
      v87 = *(_QWORD *)(v85 + 8 * v110 + 42216);
    }
    else
    {
      v87 = *(_QWORD *)(v85 + 41968);
    }
LABEL_112:
    if (*(_DWORD *)(v55 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v55) & 1) != 0)
      goto LABEL_196;
    WTF::AtomStringImpl::addLiteral();
    v88 = v198;
    v198 = 0;
    v199 = v58;
    v200 = -1;
    v201 = 0x1000000;
    v202 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v58, (JSC::VM *)v55, (unint64_t)v88, v87, 0, (uint64_t)&v198);
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v84);
      else
        *(_DWORD *)v88 -= 2;
    }
LABEL_116:
    v89 = *(unsigned __int8 *)v53;
    v90 = *((_QWORD *)this + 7);
    if ((byte_1EE3374DC & 1) == 0)
    {
      dword_1ECE7AC50 += 2;
      byte_1EE3374DC = 1;
      dword_1ECE7AC70 += 2;
      qword_1EE337670 = (uint64_t)&dword_1ECE7AC50;
      unk_1EE337678 = &dword_1ECE7AC70;
      dword_1ECE7AC90 += 2;
      dword_1ECE7ACB0 += 2;
      qword_1EE337680 = (uint64_t)&dword_1ECE7AC90;
      unk_1EE337688 = &dword_1ECE7ACB0;
      dword_1ECE7ACD0 += 2;
      qword_1EE337690 = (uint64_t)&dword_1ECE7ACD0;
    }
    v91 = (uint64_t *)(v90 + 41968);
    v92 = *(_QWORD *)&_MergedGlobals_204[8 * v89 + 408];
    if (!v92)
    {
      v95 = *v91;
      goto LABEL_126;
    }
    v93 = *(_DWORD *)v92;
    v94 = *(_DWORD *)(v92 + 4);
    *(_DWORD *)v92 += 2;
    if (v94)
    {
      if (v94 != 1)
        goto LABEL_121;
      v99 = *(unsigned __int8 **)(v92 + 8);
      if ((*(_BYTE *)(v92 + 16) & 4) != 0)
      {
        v100 = *v99;
      }
      else
      {
        v111 = *(unsigned __int16 *)v99;
        if (v111 > 0xFF)
        {
LABEL_121:
          v95 = *(_QWORD *)(v90 + 64760);
          if (!v95 || v92 != *(_QWORD *)(v95 + 8))
          {
            v95 = JSC::jsStringWithCacheSlowCase();
            v93 = *(_DWORD *)v92 - 2;
          }
          goto LABEL_124;
        }
        v100 = v111;
      }
      v95 = *(_QWORD *)(v90 + 8 * v100 + 42216);
    }
    else
    {
      v95 = *v91;
    }
LABEL_124:
    if (v93)
      *(_DWORD *)v92 = v93;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v92, (WTF::StringImpl *)v84);
LABEL_126:
    if (*(_DWORD *)(v55 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v55) & 1) != 0)
      goto LABEL_196;
    WTF::AtomStringImpl::addLiteral();
    v96 = v198;
    v198 = 0;
    v199 = v58;
    v200 = -1;
    v201 = 0x1000000;
    v202 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v58, (JSC::VM *)v55, (unint64_t)v96, v95, 0, (uint64_t)&v198);
    if (!v96)
      goto LABEL_197;
    a2 = v54;
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, v97);
    else
      *(_DWORD *)v96 -= 2;
LABEL_130:
    if (*((_DWORD *)v187 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v187) & 1) != 0)
      goto LABEL_339;
    v98 = v193;
    if ((_DWORD)v193 == HIDWORD(v193) || v194 != (WTF *)((char *)v195 + 8) && v194)
    {
      v117.super.isa = (Class)v58;
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v193, v117) == 1)
        LOBYTE(v192) = 1;
    }
    else
    {
      *((_QWORD *)v194 + v193) = v58;
      LODWORD(v193) = v98 + 1;
    }
    v53 = (WTF *)((char *)v53 + 48);
  }
  while (v53 != v52);
  if (!(_BYTE)v192)
  {
    v41 = v185;
    a3 = v186;
    v39 = v184;
    goto LABEL_200;
  }
  JSC::throwOutOfMemoryError();
LABEL_339:
  v120 = 0;
  v41 = v185;
  a3 = v186;
  v39 = v184;
LABEL_202:
  v121 = *(uint64_t **)&v195[0];
  if (*(_QWORD *)&v195[0])
  {
    v198 = (WTF *)&v193;
    v183 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v195[0], (uint64_t *)&v198);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v121, v183);
  }
  if (v194 != (WTF *)((char *)v195 + 8) && v194)
    WTF::fastFree(v194, v118);
  if (v39)
  {
    v122 = v41;
    do
    {
      WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v122, (WTF::StringImpl *)v118);
      v122 = (WebCore::ApplePayInstallmentItem *)(v123 + 48);
    }
    while (v122 != v52);
  }
  if (v41)
    WTF::fastFree(v41, v118);
  if (v191)
  {
    if (v190)
    {
      v124 = v188;
      v125 = 48 * v190;
      do
      {
        WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v124, (WTF::StringImpl *)v118);
        v124 = (WTF *)(v126 + 48);
        v125 -= 48;
      }
      while (v125);
    }
    v127 = v188;
    if (v188)
    {
      v188 = 0;
      v189 = 0;
      WTF::fastFree(v127, v118);
    }
  }
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v128 = v192;
  v192 = 0;
  v193 = v10;
  v194 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v195[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v128, v120, 0, (uint64_t)&v192);
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      WTF::StringImpl::destroy(v128, v129);
    else
      *(_DWORD *)v128 -= 2;
  }
  v130 = *((_QWORD *)a3 + 1);
  if (v130)
  {
    v131 = *((_QWORD *)this + 7);
    v132 = *(_DWORD *)(v130 + 4);
    if (v132)
    {
      if (v132 != 1)
        goto LABEL_223;
      v168 = *(unsigned __int8 **)(v130 + 8);
      if ((*(_BYTE *)(v130 + 16) & 4) != 0)
      {
        v169 = *v168;
        goto LABEL_305;
      }
      v179 = *(unsigned __int16 *)v168;
      if (v179 > 0xFF)
      {
LABEL_223:
        v133 = *(_QWORD *)(v131 + 64760);
        if (!v133 || v130 != *(_QWORD *)(v133 + 8))
          v133 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v169 = v179;
LABEL_305:
        v133 = *(_QWORD *)(v131 + 8 * v169 + 42216);
      }
    }
    else
    {
      v133 = *(_QWORD *)(v131 + 41968);
    }
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v134 = v192;
    v192 = 0;
    v193 = v10;
    v194 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v195[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v134, v133, 0, (uint64_t)&v192);
    if (v134)
    {
      if (*(_DWORD *)v134 == 2)
        WTF::StringImpl::destroy(v134, v135);
      else
        *(_DWORD *)v134 -= 2;
    }
  }
  v136 = *((_QWORD *)a3 + 6);
  if (v136)
  {
    v137 = *((_QWORD *)this + 7);
    v138 = *(_DWORD *)(v136 + 4);
    if (v138)
    {
      if (v138 != 1)
        goto LABEL_233;
      v170 = *(unsigned __int8 **)(v136 + 8);
      if ((*(_BYTE *)(v136 + 16) & 4) != 0)
      {
        v171 = *v170;
        goto LABEL_308;
      }
      v180 = *(unsigned __int16 *)v170;
      if (v180 > 0xFF)
      {
LABEL_233:
        v139 = *(_QWORD *)(v137 + 64760);
        if (!v139 || v136 != *(_QWORD *)(v139 + 8))
          v139 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v171 = v180;
LABEL_308:
        v139 = *(_QWORD *)(v137 + 8 * v171 + 42216);
      }
    }
    else
    {
      v139 = *(_QWORD *)(v137 + 41968);
    }
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v140 = v192;
    v192 = 0;
    v193 = v10;
    v194 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v195[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v140, v139, 0, (uint64_t)&v192);
    if (v140)
    {
      if (*(_DWORD *)v140 == 2)
        WTF::StringImpl::destroy(v140, v141);
      else
        *(_DWORD *)v140 -= 2;
    }
  }
  v142 = *((_QWORD *)a3 + 2);
  if (v142)
  {
    v143 = *((_QWORD *)this + 7);
    v144 = *(_DWORD *)(v142 + 4);
    if (v144)
    {
      if (v144 != 1)
        goto LABEL_243;
      v172 = *(unsigned __int8 **)(v142 + 8);
      if ((*(_BYTE *)(v142 + 16) & 4) != 0)
      {
        v173 = *v172;
        goto LABEL_311;
      }
      v181 = *(unsigned __int16 *)v172;
      if (v181 > 0xFF)
      {
LABEL_243:
        v145 = *(_QWORD *)(v143 + 64760);
        if (!v145 || v142 != *(_QWORD *)(v145 + 8))
          v145 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v173 = v181;
LABEL_311:
        v145 = *(_QWORD *)(v143 + 8 * v173 + 42216);
      }
    }
    else
    {
      v145 = *(_QWORD *)(v143 + 41968);
    }
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v146 = v192;
    v192 = 0;
    v193 = v10;
    v194 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v195[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v146, v145, 0, (uint64_t)&v192);
    if (v146)
    {
      if (*(_DWORD *)v146 == 2)
        WTF::StringImpl::destroy(v146, v147);
      else
        *(_DWORD *)v146 -= 2;
    }
  }
  v148 = *((_QWORD *)a3 + 7);
  if (v148)
  {
    v149 = *((_QWORD *)this + 7);
    v150 = *(_DWORD *)(v148 + 4);
    if (v150)
    {
      if (v150 != 1)
        goto LABEL_253;
      v174 = *(unsigned __int8 **)(v148 + 8);
      if ((*(_BYTE *)(v148 + 16) & 4) != 0)
      {
        v175 = *v174;
        goto LABEL_314;
      }
      v182 = *(unsigned __int16 *)v174;
      if (v182 > 0xFF)
      {
LABEL_253:
        v151 = *(_QWORD *)(v149 + 64760);
        if (!v151 || v148 != *(_QWORD *)(v151 + 8))
          v151 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v175 = v182;
LABEL_314:
        v151 = *(_QWORD *)(v149 + 8 * v175 + 42216);
      }
    }
    else
    {
      v151 = *(_QWORD *)(v149 + 41968);
    }
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v152 = v192;
    v192 = 0;
    v193 = v10;
    v194 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v195[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v152, v151, 0, (uint64_t)&v192);
    if (v152)
    {
      if (*(_DWORD *)v152 == 2)
        WTF::StringImpl::destroy(v152, (WTF::StringImpl *)v148);
      else
        *(_DWORD *)v152 -= 2;
    }
  }
  v153 = *((unsigned __int8 *)a3 + 88);
  v154 = *((_QWORD *)this + 7);
  v155 = (uint64_t *)(v154 + 41968);
  if ((byte_1EE3374DD & 1) == 0)
  {
    dword_1ECE7ACF0 += 2;
    dword_1ECE7AD10 += 2;
    unk_1EE3375D0 = &dword_1ECE7AD10;
    unk_1EE3375C8 = &dword_1ECE7ACF0;
    dword_1ECE7AD30 += 2;
    unk_1EE3375D8 = &dword_1ECE7AD30;
    dword_1ECE7AD50 += 2;
    qword_1EE3375E0 = (uint64_t)&dword_1ECE7AD50;
    byte_1EE3374DD = 1;
  }
  v156 = *(_QWORD *)&_MergedGlobals_204[8 * v153 + 240];
  if (v156)
  {
    v157 = *(_DWORD *)v156;
    v158 = *(_DWORD *)(v156 + 4);
    *(_DWORD *)v156 += 2;
    if (v158)
    {
      if (v158 != 1)
        goto LABEL_265;
      v162 = *(unsigned __int8 **)(v156 + 8);
      if ((*(_BYTE *)(v156 + 16) & 4) != 0)
      {
        v163 = *v162;
        goto LABEL_290;
      }
      v176 = *(unsigned __int16 *)v162;
      if (v176 > 0xFF)
      {
LABEL_265:
        v159 = *(_QWORD *)(v154 + 64760);
        if (!v159 || v156 != *(_QWORD *)(v159 + 8))
        {
          v159 = JSC::jsStringWithCacheSlowCase();
          v157 = *(_DWORD *)v156 - 2;
        }
      }
      else
      {
        v163 = v176;
LABEL_290:
        v159 = *(_QWORD *)(v154 + 8 * v163 + 42216);
      }
    }
    else
    {
      v159 = *v155;
    }
    if (v157)
      *(_DWORD *)v156 = v157;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v156, (WTF::StringImpl *)v148);
  }
  else
  {
    v159 = *v155;
  }
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v160 = v192;
  v192 = 0;
  v193 = v10;
  v194 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v195[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v160, v159, 0, (uint64_t)&v192);
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, v161);
    else
      *(_DWORD *)v160 -= 2;
  }
  return v10;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::ApplePayLaterAvailability>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE3374DE & 1) == 0)
  {
    dword_1ECE7AD70 += 2;
    unk_1EE337598 = &dword_1ECE7AD70;
    dword_1ECE7AD90 += 2;
    unk_1EE3375A0 = &dword_1ECE7AD90;
    dword_1ECE7ADB0 += 2;
    unk_1EE3375A8 = &dword_1ECE7ADB0;
    byte_1EE3374DE = 1;
  }
  v3 = *(_QWORD *)&_MergedGlobals_204[8 * a2 + 192];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::ApplePayLaterAvailability>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  int v6;
  __int32 v7;
  uint16x8_t v10;
  char **v11;
  uint16x8_t v12;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;

  v1 = *a1;
  if (!*a1)
    goto LABEL_11;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "available" && v4 == 9)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 97 || *(_DWORD *)(v3 + 1) != 1818845558 || *(_DWORD *)(v3 + 5) != 1701601889)
        goto LABEL_11;
    }
    else
    {
      if (*(_WORD *)v3 != 97)
        goto LABEL_11;
      v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968DCA80);
      v12.i16[0] = vminvq_u16(v12);
      v6 = v12.i32[0];
      if (!v12.i32[0])
        goto LABEL_12;
    }
    goto LABEL_29;
  }
  if (v3 == "available" && v4 == 9)
  {
LABEL_29:
    v11 = &WebCore::parseEnumerationFromString<WebCore::ApplePayLaterAvailability>(WTF::String const&)::mappings;
    goto LABEL_30;
  }
  if (v3 != "unavailableItemIneligible" && v4 == 25)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 117)
        goto LABEL_11;
      v10 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 9), (int8x16_t)xmmword_1968DCAA0), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1968DCA90));
      v10.i8[0] = vminvq_u8((uint8x16_t)v10);
    }
    else
    {
      if (*(_WORD *)v3 != 117)
        goto LABEL_11;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968DCAB0);
      v14.i16[0] = vminvq_u16(v14);
      v7 = v14.i32[0];
      if (!v14.i32[0])
        goto LABEL_52;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 18), (int16x8_t)xmmword_1968DCAC0);
      v15.i16[0] = vminvq_u16(v15);
      v7 = v15.i32[0];
      if (!v15.i32[0])
        goto LABEL_52;
      v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 34), (int16x8_t)xmmword_1968DCAD0);
      v10.i16[0] = vminvq_u16(v10);
    }
    v6 = v10.i32[0];
    if (!v10.i32[0])
      goto LABEL_12;
    goto LABEL_26;
  }
  if (v3 == "unavailableItemIneligible" && v4 == 25)
  {
LABEL_26:
    v11 = &off_1E3349020;
LABEL_30:
    v7 = *((unsigned __int8 *)v11 + 16);
    v6 = 1;
    return v7 | (v6 << 8);
  }
  if (v3 == "unavailableRecurringTransaction" || v4 != 31)
  {
    if (v4 == 31 && v3 == "unavailableRecurringTransaction")
      goto LABEL_45;
    goto LABEL_11;
  }
  if ((v2 & 4) != 0)
  {
    if (*v3 == 117
      && vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 15), (int8x16_t)xmmword_1968DCAF0), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1968DCAE0))))
    {
      goto LABEL_45;
    }
    goto LABEL_11;
  }
  if (*(_WORD *)v3 != 117)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_12;
  }
  v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968DCAB0);
  v17.i16[0] = vminvq_u16(v17);
  v7 = v17.i32[0];
  if (!v17.i32[0]
    || (v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 14), (int16x8_t)xmmword_1968DCB00),
        v18.i16[0] = vminvq_u16(v18),
        (v7 = v18.i32[0]) == 0)
    || (v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 30), (int16x8_t)xmmword_1968DCB10),
        v19.i16[0] = vminvq_u16(v19),
        (v7 = v19.i32[0]) == 0))
  {
LABEL_52:
    v6 = 0;
    return v7 | (v6 << 8);
  }
  v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 46), (int16x8_t)xmmword_1968DCB20);
  v20.i16[0] = vminvq_u16(v20);
  v6 = v20.i32[0];
  if (v20.i32[0])
  {
LABEL_45:
    v11 = &off_1E3349038;
    goto LABEL_30;
  }
LABEL_12:
  v7 = 0;
  return v7 | (v6 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePayLaterAvailability>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unint64_t v7;

  v7 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v6 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v7, a1);
  v2 = v6;
LABEL_7:
  v4 = WebCore::parseEnumerationFromString<WebCore::ApplePayLaterAvailability>((uint64_t *)&v6);
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v4;
}

const char *WebCore::expectedEnumerationValues<WebCore::ApplePayLaterAvailability>()
{
  return "\"available\", \"unavailableItemIneligible\", \"unavailableRecurringTransaction\"";
}

uint64_t WebCore::convertDictionary<WebCore::ApplePayLineItem>@<X0>(JSC::JSCell *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int16 v7;
  WTF::StringImpl *v8;
  char v9;
  BOOL v10;
  double v11;
  double v12;
  double v13;
  int v14;
  char v15;
  JSC::JSGlobalObject *v16;
  uint64_t Object;
  JSC::Structure *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  int v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  const char *v41;
  int v42;
  int v43;
  __int32 v44;
  char **v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  JSC::VM *v50;
  WTF::StringImpl *v51;
  int v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  const char *v58;
  int v59;
  unint64_t v60;
  int v61;
  char **v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  JSC::VM *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  int v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  const char *v75;
  int v76;
  unint64_t v77;
  int v78;
  char **v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  JSC::VM *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  int v87;
  const char *v88;
  int v89;
  int v90;
  int v91;
  char **v92;
  int v93;
  uint64_t v94;
  BOOL v95;
  int v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  WTF::StringImpl *v105;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v107;
  char v109;
  WTF::StringImpl *v110;
  uint64_t v112;
  BOOL v113;
  int v116;
  uint16x8_t v117;
  uint16x8_t v118;
  int v120;
  char v121;
  __int16 v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  int v125;
  __int16 v126;
  char v127;
  _BYTE v128[7];
  JSC::VM *v129;
  WTF::StringImpl *v130;
  _QWORD v131[2];

  v4 = *(JSC::VM **)(result + 56);
  v129 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v16 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
LABEL_289:
      *(_DWORD *)(a3 + 80) = 1;
      return result;
    }
    v18 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v20 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
    if (v124)
    {
      if (*(_DWORD *)v124 == 2)
        WTF::StringImpl::destroy(v124, v19);
      else
        *(_DWORD *)v124 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((_DWORD)result)
        goto LABEL_289;
    }
    if (v20 == 10)
    {
      v5 = 0;
      goto LABEL_21;
    }
    v131[0] = v20;
    v21 = (JSC::VM *)*((_QWORD *)v16 + 7);
    if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v131, v16);
LABEL_17:
      if (!*((_DWORD *)v21 + 20))
      {
        v5 = v130;
LABEL_19:
        v125 = 0;
        v23 = 0;
        v124 = 0;
        v24 = 1;
        goto LABEL_20;
      }
      v5 = v130;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
        goto LABEL_19;
      v23 = 1;
      v125 = 1;
      v130 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
        {
          WTF::StringImpl::destroy(v5, v105);
          v23 = v125;
          *(_DWORD *)(a3 + 80) = 1;
          v5 = 0;
          v24 = 0;
LABEL_20:
          result = ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v23])(v131, &v124);
          if (!v24)
            goto LABEL_392;
LABEL_21:
          WTF::AtomStringImpl::addLiteral();
          v25 = v124;
          v27 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v26);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (*((_DWORD *)v4 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
            if ((_DWORD)result)
            {
              v8 = 0;
              *(_DWORD *)(a3 + 80) = 1;
              goto LABEL_201;
            }
          }
          if (v27 == 10)
          {
            v6 = 0;
            goto LABEL_38;
          }
          v131[0] = v27;
          v28 = (JSC::VM *)*((_QWORD *)v16 + 7);
          if ((v27 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v27 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v131, v16);
            goto LABEL_33;
          }
          v29 = *(WTF::StringImpl **)(v27 + 8);
          if ((v29 & 1) != 0)
          {
            v29 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, v16);
            if (!v29)
              goto LABEL_32;
          }
          else if (!v29)
          {
LABEL_32:
            v130 = v29;
LABEL_33:
            if (!*((_DWORD *)v28 + 20))
            {
              v6 = v130;
LABEL_35:
              v125 = 0;
LABEL_36:
              v30 = 0;
              v124 = 0;
              v31 = 1;
              goto LABEL_37;
            }
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
            v6 = v130;
            if ((hasExceptionsAfterHandlingTraps & 1) == 0)
              goto LABEL_35;
            v30 = 1;
            v125 = 1;
            v130 = 0;
            if (!v6)
              goto LABEL_356;
            if (*(_DWORD *)v6 != 2)
            {
              *(_DWORD *)v6 -= 2;
LABEL_356:
              v6 = 0;
              v31 = 0;
              *(_DWORD *)(a3 + 80) = 1;
              goto LABEL_37;
            }
            result = WTF::StringImpl::destroy(v6, v107);
            v30 = v125;
            if (!v125)
            {
              v6 = v124;
              goto LABEL_36;
            }
            *(_DWORD *)(a3 + 80) = 1;
            if (v30 != -1)
            {
              v6 = 0;
              v31 = 0;
LABEL_37:
              result = ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v30])(v131, &v124);
              if (!v31)
                goto LABEL_396;
LABEL_38:
              WTF::AtomStringImpl::addLiteral();
              v32 = v124;
              v34 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, v33);
                else
                  *(_DWORD *)v32 -= 2;
              }
              if (*((_DWORD *)v4 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                if ((_DWORD)result)
                  goto LABEL_369;
              }
              if (v34 == 10)
              {
                v13 = NAN;
              }
              else
              {
                v35 = (JSC::VM *)*((_QWORD *)v16 + 7);
                v13 = WebCore::valueToDate(v16, v34);
                if (*((_DWORD *)v35 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v35);
                  if ((_DWORD)result)
                    goto LABEL_369;
                }
              }
              WTF::AtomStringImpl::addLiteral();
              v36 = v124;
              v37 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, this);
                else
                  *(_DWORD *)v36 -= 2;
              }
              if (*((_DWORD *)v4 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                if ((_DWORD)result)
                  goto LABEL_369;
              }
              if (v37 == 10)
              {
                v122 = 0;
                goto LABEL_74;
              }
              v38 = (WTF::StringImpl *)*((_QWORD *)v16 + 7);
              v130 = v38;
              v124 = (WTF::StringImpl *)v37;
              if ((v37 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v37 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v124, v16);
                v39 = v131[0];
                if (v131[0])
                  goto LABEL_57;
                goto LABEL_280;
              }
              v39 = *(_QWORD *)(v37 + 8);
              if ((v39 & 1) != 0)
              {
                v39 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v37, v16);
                if (!v39)
                {
LABEL_56:
                  v131[0] = v39;
                  if (v39)
                  {
LABEL_57:
                    v40 = *(_DWORD *)(v39 + 16);
                    v41 = *(const char **)(v39 + 8);
                    v42 = *(_DWORD *)(v39 + 4);
                    if (v41 != "disbursement" && v42 == 12)
                    {
                      if ((v40 & 4) != 0)
                      {
                        if (*v41 != 100
                          || *(_QWORD *)(v41 + 1) != 0x6D65737275627369
                          || *(_QWORD *)(v41 + 4) != 0x746E656D65737275)
                        {
                          goto LABEL_63;
                        }
                        goto LABEL_67;
                      }
                      if (*(_WORD *)v41 == 100)
                      {
                        v97 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v41 + 2), (int16x8_t)xmmword_1968DC250);
                        v97.i16[0] = vminvq_u16(v97);
                        v44 = v97.i32[0];
                        if (v97.i32[0])
                        {
                          v98 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v41 + 8), (int16x8_t)xmmword_1968DC260);
                          v98.i16[0] = vminvq_u16(v98);
                          v43 = v98.i32[0];
                          if (!v98.i32[0])
                            goto LABEL_64;
                          goto LABEL_67;
                        }
LABEL_387:
                        v43 = 0;
LABEL_69:
                        v46 = v44 | (v43 << 8);
                        v131[0] = 0;
                        if (*(_DWORD *)v39 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v39, this);
                        else
                          *(_DWORD *)v39 -= 2;
LABEL_71:
                        if (!*((_DWORD *)v38 + 20)
                          || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v38), (result & 1) == 0))
                        {
                          if (v46 > 0xFF)
                          {
                            v122 = v46 | 0x100;
LABEL_74:
                            WTF::AtomStringImpl::addLiteral();
                            v47 = v124;
                            v49 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
                            if (v47)
                            {
                              if (*(_DWORD *)v47 == 2)
                                WTF::StringImpl::destroy(v47, v48);
                              else
                                *(_DWORD *)v47 -= 2;
                            }
                            if (*((_DWORD *)v4 + 20))
                            {
                              result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                              if ((_DWORD)result)
                                goto LABEL_369;
                            }
                            if (v49 == 10)
                            {
                              v8 = 0;
                              goto LABEL_91;
                            }
                            v131[0] = v49;
                            v50 = (JSC::VM *)*((_QWORD *)v16 + 7);
                            if ((v49 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v49 + 5) != 2)
                            {
                              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v131, v16);
                              goto LABEL_86;
                            }
                            v51 = *(WTF::StringImpl **)(v49 + 8);
                            if ((v51 & 1) != 0)
                            {
                              v51 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v49, v16);
                              if (!v51)
                                goto LABEL_85;
                            }
                            else if (!v51)
                            {
LABEL_85:
                              v130 = v51;
LABEL_86:
                              if (!*((_DWORD *)v50 + 20))
                              {
                                v8 = v130;
LABEL_88:
                                v125 = 0;
LABEL_89:
                                v52 = 0;
                                v124 = 0;
                                v53 = 1;
                                goto LABEL_90;
                              }
                              v109 = JSC::VM::hasExceptionsAfterHandlingTraps(v50);
                              v8 = v130;
                              if ((v109 & 1) == 0)
                                goto LABEL_88;
                              v52 = 1;
                              v125 = 1;
                              v130 = 0;
                              if (!v8)
                                goto LABEL_375;
                              if (*(_DWORD *)v8 != 2)
                              {
                                *(_DWORD *)v8 -= 2;
LABEL_375:
                                v8 = 0;
                                v53 = 0;
                                *(_DWORD *)(a3 + 80) = 1;
                                goto LABEL_90;
                              }
                              result = WTF::StringImpl::destroy(v8, v110);
                              v52 = v125;
                              if (!v125)
                              {
                                v8 = v124;
                                goto LABEL_89;
                              }
                              *(_DWORD *)(a3 + 80) = 1;
                              if (v52 != -1)
                              {
                                v8 = 0;
                                v53 = 0;
LABEL_90:
                                result = ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v52])(v131, &v124);
                                if (!v53)
                                  goto LABEL_198;
LABEL_91:
                                WTF::AtomStringImpl::addLiteral();
                                v54 = v124;
                                v55 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
                                if (v54)
                                {
                                  if (*(_DWORD *)v54 == 2)
                                    WTF::StringImpl::destroy(v54, this);
                                  else
                                    *(_DWORD *)v54 -= 2;
                                }
                                if (*((_DWORD *)v4 + 20))
                                {
                                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                                  if ((_DWORD)result)
                                    goto LABEL_370;
                                }
                                if (v55 == 10)
                                {
                                  v121 = 0;
                                  goto LABEL_119;
                                }
                                v56 = (WTF::StringImpl *)*((_QWORD *)v16 + 7);
                                v130 = v56;
                                v124 = (WTF::StringImpl *)v55;
                                if ((v55 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v55 + 5) != 2)
                                {
                                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v124, v16);
                                  v57 = v131[0];
                                  if (v131[0])
                                    goto LABEL_103;
                                  goto LABEL_283;
                                }
                                v57 = *(_QWORD *)(v55 + 8);
                                if ((v57 & 1) != 0)
                                {
                                  v57 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v55, v16);
                                  if (!v57)
                                  {
LABEL_102:
                                    v131[0] = v57;
                                    if (v57)
                                    {
LABEL_103:
                                      v58 = *(const char **)(v57 + 8);
                                      v59 = *(_DWORD *)(v57 + 4);
                                      v60 = ((unint64_t)*(unsigned int *)(v57 + 16) >> 2) & 1;
                                      if (v58 != "automaticReload" && v59 == 15)
                                      {
                                        if ((_DWORD)v60)
                                        {
                                          if (*v58 != 97
                                            || *(_QWORD *)(v58 + 1) != 0x636974616D6F7475
                                            || *(_QWORD *)(v58 + 7) != 0x64616F6C65526369)
                                          {
                                            goto LABEL_109;
                                          }
                                        }
                                        else
                                        {
                                          if (*(_WORD *)v58 != 97)
                                            goto LABEL_109;
                                          v99 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v58 + 2), (int16x8_t)xmmword_1968DCB80);
                                          v99.i16[0] = vminvq_u16(v99);
                                          if (!v99.i32[0])
                                            goto LABEL_109;
                                          v100 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v58 + 14), (int16x8_t)xmmword_1968DC640);
                                          v100.i16[0] = vminvq_u16(v100);
                                          if (!v100.i32[0])
                                            goto LABEL_109;
                                        }
                                        goto LABEL_113;
                                      }
                                      if (v58 == "automaticReload" && v59 == 15)
                                      {
LABEL_113:
                                        v62 = &WebCore::parseEnumerationFromString<WebCore::ApplePayPaymentTiming>(WTF::String const&)::mappings;
LABEL_114:
                                        v121 = *((_BYTE *)v62 + 16);
                                        v61 = 1;
                                        goto LABEL_115;
                                      }
                                      if (v58 != "deferred" && v59 == 8)
                                      {
                                        if ((_DWORD)v60)
                                        {
                                          if (*v58 != 100
                                            || *(_DWORD *)(v58 + 1) != 1919247973
                                            || *((_DWORD *)v58 + 1) != 1684370034)
                                          {
                                            goto LABEL_109;
                                          }
                                          goto LABEL_242;
                                        }
                                        if (*(_WORD *)v58 != 100)
                                        {
LABEL_109:
                                          v61 = 0;
                                          v121 = 0;
                                          goto LABEL_115;
                                        }
                                        v61 = 0;
                                        if (*(_QWORD *)(v58 + 2) != 0x72006500660065)
                                        {
                                          v121 = 0;
                                          goto LABEL_115;
                                        }
                                        v121 = 0;
                                        if (*((_QWORD *)v58 + 1) != 0x64006500720072)
                                        {
LABEL_115:
                                          v131[0] = 0;
                                          if (*(_DWORD *)v57 == 2)
                                            WTF::StringImpl::destroy((WTF::StringImpl *)v57, this);
                                          else
                                            *(_DWORD *)v57 -= 2;
LABEL_117:
                                          if (*((_DWORD *)v56 + 20))
                                          {
                                            result = JSC::VM::hasExceptionsAfterHandlingTraps(v56);
                                            if ((result & 1) != 0)
                                              goto LABEL_370;
                                          }
                                          if (!v61)
                                            goto LABEL_313;
LABEL_119:
                                          WTF::AtomStringImpl::addLiteral();
                                          v63 = v124;
                                          v65 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
                                          if (v63)
                                          {
                                            if (*(_DWORD *)v63 == 2)
                                              WTF::StringImpl::destroy(v63, v64);
                                            else
                                              *(_DWORD *)v63 -= 2;
                                          }
                                          if (*((_DWORD *)v4 + 20))
                                          {
                                            result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                                            if ((_DWORD)result)
                                              goto LABEL_370;
                                          }
                                          if (v65 == 10)
                                          {
                                            v12 = NAN;
                                          }
                                          else
                                          {
                                            v66 = (JSC::VM *)*((_QWORD *)v16 + 7);
                                            v12 = WebCore::valueToDate(v16, v65);
                                            if (*((_DWORD *)v66 + 20))
                                            {
                                              result = JSC::VM::hasExceptionsAfterHandlingTraps(v66);
                                              if ((_DWORD)result)
                                                goto LABEL_370;
                                            }
                                          }
                                          WTF::AtomStringImpl::addLiteral();
                                          v67 = v124;
                                          v69 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
                                          if (v67)
                                          {
                                            if (*(_DWORD *)v67 == 2)
                                              WTF::StringImpl::destroy(v67, v68);
                                            else
                                              *(_DWORD *)v67 -= 2;
                                          }
                                          if (*((_DWORD *)v4 + 20))
                                          {
                                            result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                                            if ((_DWORD)result)
                                              goto LABEL_370;
                                          }
                                          if (v69 == 10)
                                          {
                                            v123 = 1;
                                            v70 = 1;
                                          }
                                          else
                                          {
                                            result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v16, v69, &v123);
                                            if (HIDWORD(v123))
                                            {
LABEL_370:
                                              v93 = 1;
                                              goto LABEL_197;
                                            }
                                            v70 = v123;
                                          }
                                          v120 = v70;
                                          WTF::AtomStringImpl::addLiteral();
                                          v71 = v124;
                                          v72 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
                                          if (v71)
                                          {
                                            if (*(_DWORD *)v71 == 2)
                                              WTF::StringImpl::destroy(v71, this);
                                            else
                                              *(_DWORD *)v71 -= 2;
                                          }
                                          if (*((_DWORD *)v4 + 20))
                                          {
                                            result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                                            if ((result & 1) != 0)
                                              goto LABEL_370;
                                          }
                                          if (v72 == 10)
                                          {
                                            v15 = 1;
                                            goto LABEL_160;
                                          }
                                          v73 = (WTF::StringImpl *)*((_QWORD *)v16 + 7);
                                          v130 = v73;
                                          v124 = (WTF::StringImpl *)v72;
                                          if ((v72 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v72 + 5) != 2)
                                          {
                                            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v124, v16);
                                            v74 = v131[0];
                                            if (v131[0])
                                              goto LABEL_146;
                                            goto LABEL_285;
                                          }
                                          v74 = *(_QWORD *)(v72 + 8);
                                          if ((v74 & 1) != 0)
                                          {
                                            v74 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v72, v16);
                                            if (!v74)
                                            {
LABEL_145:
                                              v131[0] = v74;
                                              if (v74)
                                              {
LABEL_146:
                                                v75 = *(const char **)(v74 + 8);
                                                v76 = *(_DWORD *)(v74 + 4);
                                                v77 = ((unint64_t)*(unsigned int *)(v74 + 16) >> 2) & 1;
                                                if (v75 != "day" && v76 == 3)
                                                {
                                                  if ((_DWORD)v77)
                                                  {
                                                    if (*v75 != 100 || *(_WORD *)(v75 + 1) != 31073)
                                                    {
LABEL_151:
                                                      v15 = 0;
                                                      v78 = 0;
                                                      goto LABEL_156;
                                                    }
                                                  }
                                                  else if (*(_WORD *)v75 != 100 || *(_DWORD *)(v75 + 2) != 7929953)
                                                  {
                                                    goto LABEL_151;
                                                  }
                                                  goto LABEL_154;
                                                }
                                                if (v75 == "day" && v76 == 3)
                                                {
LABEL_154:
                                                  v79 = &WebCore::parseEnumerationFromString<WebCore::ApplePayRecurringPaymentDateUnit>(WTF::String const&)::mappings;
                                                  goto LABEL_155;
                                                }
                                                v94 = v77 << 32;
                                                v95 = v76 != 4;
                                                if (v75 != "hour" && v76 == 4)
                                                {
                                                  if ((_DWORD)v77)
                                                  {
                                                    if (*v75 == 104
                                                      && *(_WORD *)(v75 + 1) == 30063
                                                      && *((_WORD *)v75 + 1) == 29301)
                                                    {
LABEL_249:
                                                      v79 = &off_1E33494E0;
                                                      goto LABEL_155;
                                                    }
                                                    v95 = 0;
                                                    goto LABEL_266;
                                                  }
                                                  if (*(_WORD *)v75 == 104)
                                                  {
                                                    v95 = 0;
                                                    v96 = 5;
                                                    if (*(_DWORD *)(v75 + 2) == 7667823
                                                      && *((_DWORD *)v75 + 1) == 7471221)
                                                    {
                                                      goto LABEL_249;
                                                    }
LABEL_267:
                                                    if (v75 == "year" || v95)
                                                    {
                                                      if (v76 != 4 || v75 != "year")
                                                        goto LABEL_151;
                                                    }
                                                    else if (v96)
                                                    {
                                                      if (v94)
                                                      {
                                                        if (*v75 != 121
                                                          || *(_WORD *)(v75 + 1) != 24933
                                                          || *((_WORD *)v75 + 1) != 29281)
                                                        {
                                                          goto LABEL_151;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if (*(_WORD *)v75 != 121)
                                                          goto LABEL_151;
                                                        if (*((_DWORD *)v75 + 1) != 7471201
                                                          || *(_DWORD *)(v75 + 2) != 6357093)
                                                        {
                                                          goto LABEL_151;
                                                        }
                                                      }
                                                    }
                                                    v79 = &off_1E3349528;
LABEL_155:
                                                    v15 = *((_BYTE *)v79 + 16);
                                                    v78 = 1;
LABEL_156:
                                                    v131[0] = 0;
                                                    if (*(_DWORD *)v74 == 2)
                                                      WTF::StringImpl::destroy((WTF::StringImpl *)v74, this);
                                                    else
                                                      *(_DWORD *)v74 -= 2;
LABEL_158:
                                                    if (*((_DWORD *)v73 + 20))
                                                    {
                                                      result = JSC::VM::hasExceptionsAfterHandlingTraps(v73);
                                                      if ((result & 1) != 0)
                                                        goto LABEL_370;
                                                    }
                                                    if (v78)
                                                    {
LABEL_160:
                                                      WTF::AtomStringImpl::addLiteral();
                                                      v80 = v124;
                                                      v82 = JSC::JSObject::get(v18, v16, (unint64_t)v124);
                                                      if (v80)
                                                      {
                                                        if (*(_DWORD *)v80 == 2)
                                                          WTF::StringImpl::destroy(v80, v81);
                                                        else
                                                          *(_DWORD *)v80 -= 2;
                                                      }
                                                      if (*((_DWORD *)v4 + 20))
                                                      {
                                                        result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                                                        if ((result & 1) != 0)
                                                          goto LABEL_370;
                                                      }
                                                      if (v82 == 10)
                                                      {
                                                        v11 = NAN;
                                                      }
                                                      else
                                                      {
                                                        v83 = (JSC::VM *)*((_QWORD *)v16 + 7);
                                                        v11 = WebCore::valueToDate(v16, v82);
                                                        if (*((_DWORD *)v83 + 20))
                                                        {
                                                          result = JSC::VM::hasExceptionsAfterHandlingTraps(v83);
                                                          if ((result & 1) != 0)
                                                            goto LABEL_370;
                                                        }
                                                      }
                                                      WTF::AtomStringImpl::addLiteral();
                                                      v84 = v124;
                                                      result = JSC::JSObject::get(v18, v16, (unint64_t)v124);
                                                      v85 = result;
                                                      if (v84)
                                                      {
                                                        if (*(_DWORD *)v84 == 2)
                                                          result = WTF::StringImpl::destroy(v84, this);
                                                        else
                                                          *(_DWORD *)v84 -= 2;
                                                      }
                                                      if (*((_DWORD *)v4 + 20))
                                                      {
                                                        result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                                                        if ((result & 1) != 0)
                                                          goto LABEL_370;
                                                      }
                                                      if (v85 == 10)
                                                      {
                                                        v10 = 1;
LABEL_195:
                                                        v9 = v121;
                                                        v7 = v122;
                                                        v14 = v120;
                                                        goto LABEL_196;
                                                      }
                                                      v86 = (WTF::StringImpl *)*((_QWORD *)v16 + 7);
                                                      v130 = v86;
                                                      v124 = (WTF::StringImpl *)v85;
                                                      if ((v85 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v85 + 5) != 2)
                                                      {
                                                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v124, v16);
                                                        result = v131[0];
                                                        if (v131[0])
                                                          goto LABEL_179;
                                                        goto LABEL_287;
                                                      }
                                                      result = *(_QWORD *)(v85 + 8);
                                                      if ((result & 1) != 0)
                                                      {
                                                        result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v85, v16);
                                                        if (!result)
                                                        {
LABEL_178:
                                                          v131[0] = result;
                                                          if (result)
                                                          {
LABEL_179:
                                                            v87 = *(_DWORD *)(result + 16);
                                                            v88 = *(const char **)(result + 8);
                                                            v89 = *(_DWORD *)(result + 4);
                                                            if (v88 == "final" || v89 != 5)
                                                            {
                                                              if (v88 != "final" || v89 != 5)
                                                              {
                                                                if (v88 == "pending" || v89 != 7)
                                                                {
                                                                  if (v89 != 7 || v88 != "pending")
                                                                    goto LABEL_185;
                                                                }
                                                                else if ((v87 & 4) != 0)
                                                                {
                                                                  if (*v88 != 112
                                                                    || *(_DWORD *)(v88 + 1) != 1768189541
                                                                    || *(_DWORD *)(v88 + 3) != 1735289188)
                                                                  {
                                                                    goto LABEL_185;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if (*(_WORD *)v88 != 112)
                                                                    goto LABEL_185;
                                                                  if (*(_QWORD *)(v88 + 6) != 0x67006E00690064
                                                                    || *(_QWORD *)(v88 + 2) != 0x690064006E0065)
                                                                  {
                                                                    goto LABEL_185;
                                                                  }
                                                                }
                                                                v92 = &off_1E3349068;
LABEL_189:
                                                                v91 = *((unsigned __int8 *)v92 + 16);
                                                                v90 = 1;
LABEL_190:
                                                                v131[0] = 0;
                                                                if (*(_DWORD *)result == 2)
                                                                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, this);
                                                                else
                                                                  *(_DWORD *)result -= 2;
LABEL_192:
                                                                if (*((_DWORD *)v86 + 20))
                                                                {
                                                                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v86);
                                                                  if ((result & 1) != 0)
                                                                    goto LABEL_370;
                                                                }
                                                                if (v90)
                                                                {
                                                                  v10 = v91 != 0;
                                                                  goto LABEL_195;
                                                                }
                                                                goto LABEL_313;
                                                              }
                                                            }
                                                            else if ((v87 & 4) != 0)
                                                            {
                                                              if (*v88 != 102
                                                                || *(_WORD *)(v88 + 1) != 28265
                                                                || *(_WORD *)(v88 + 3) != 27745)
                                                              {
LABEL_185:
                                                                v90 = 0;
                                                                v91 = 0;
                                                                goto LABEL_190;
                                                              }
                                                            }
                                                            else if (*(_WORD *)v88 != 102
                                                                   || *(_QWORD *)(v88 + 2) != 0x6C0061006E0069)
                                                            {
                                                              goto LABEL_185;
                                                            }
                                                            v92 = &WebCore::parseEnumerationFromString<WebCore::ApplePayLineItem::Type>(WTF::String const&)::mappings;
                                                            goto LABEL_189;
                                                          }
LABEL_287:
                                                          v91 = 0;
                                                          v90 = 0;
                                                          goto LABEL_192;
                                                        }
                                                      }
                                                      else if (!result)
                                                      {
                                                        goto LABEL_178;
                                                      }
                                                      *(_DWORD *)result += 2;
                                                      goto LABEL_178;
                                                    }
LABEL_313:
                                                    result = JSC::throwTypeError();
                                                    goto LABEL_370;
                                                  }
                                                  v95 = 0;
LABEL_399:
                                                  v96 = 5;
                                                  goto LABEL_267;
                                                }
                                                if (v75 == "hour" && v76 == 4)
                                                  goto LABEL_249;
                                                if (v75 != "minute" && v76 == 6)
                                                {
                                                  if (!(_DWORD)v77)
                                                  {
                                                    if (*(_WORD *)v75 != 109)
                                                      goto LABEL_399;
                                                    v96 = 5;
                                                    if (*(_QWORD *)(v75 + 2) != 0x740075006E0069
                                                      || *(_QWORD *)(v75 + 4) != 0x6500740075006ELL)
                                                    {
                                                      goto LABEL_267;
                                                    }
LABEL_423:
                                                    v79 = &off_1E33494F8;
                                                    goto LABEL_155;
                                                  }
                                                  if (*v75 == 109
                                                    && *(_DWORD *)(v75 + 1) == 1953853033
                                                    && *(_DWORD *)(v75 + 2) == 1702131054)
                                                  {
                                                    goto LABEL_423;
                                                  }
LABEL_266:
                                                  v96 = 5;
                                                  v94 = 0x100000000;
                                                  goto LABEL_267;
                                                }
                                                if (v75 == "minute" && v76 == 6)
                                                  goto LABEL_423;
                                                if (v75 == "month" || v76 != 5)
                                                {
                                                  v96 = *(_DWORD *)(v74 + 4);
                                                  if (v75 != "month" || v76 != 5)
                                                    goto LABEL_267;
                                                }
                                                else if ((_DWORD)v77)
                                                {
                                                  if (*v75 != 109
                                                    || *(_WORD *)(v75 + 1) != 28271
                                                    || *(_WORD *)(v75 + 3) != 26740)
                                                  {
                                                    goto LABEL_266;
                                                  }
                                                }
                                                else if (*(_WORD *)v75 != 109
                                                       || *(_QWORD *)(v75 + 2) != 0x680074006E006FLL)
                                                {
                                                  goto LABEL_399;
                                                }
                                                v79 = &off_1E3349510;
                                                goto LABEL_155;
                                              }
LABEL_285:
                                              v15 = 0;
                                              v78 = 0;
                                              goto LABEL_158;
                                            }
                                          }
                                          else if (!v74)
                                          {
                                            goto LABEL_145;
                                          }
                                          *(_DWORD *)v74 += 2;
                                          goto LABEL_145;
                                        }
LABEL_242:
                                        v62 = &off_1E3349480;
                                        goto LABEL_114;
                                      }
                                      if (v58 == "deferred" && v59 == 8)
                                        goto LABEL_242;
                                      v112 = v60 << 32;
                                      v113 = v59 != 9;
                                      if (v58 == "immediate" || v59 != 9)
                                      {
                                        v116 = *(_DWORD *)(v57 + 4);
                                        if (v58 == "immediate" && v59 == 9)
                                          goto LABEL_414;
                                      }
                                      else if ((_DWORD)v60)
                                      {
                                        if (*v58 == 105
                                          && *(_DWORD *)(v58 + 1) == 1684368749
                                          && *(_DWORD *)(v58 + 5) == 1702125929)
                                        {
                                          goto LABEL_414;
                                        }
                                        v113 = 0;
                                        v116 = 9;
                                        v112 = 0x100000000;
                                      }
                                      else
                                      {
                                        if (*(_WORD *)v58 == 105)
                                        {
                                          v117 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v58 + 2), (int16x8_t)xmmword_1968DC930);
                                          v117.i16[0] = vminvq_u16(v117);
                                          v113 = v117.i8[0];
                                          if (v117.i32[0])
                                          {
LABEL_414:
                                            v62 = &off_1E3349498;
                                            goto LABEL_114;
                                          }
                                        }
                                        else
                                        {
                                          v113 = 0;
                                        }
                                        v116 = 9;
                                      }
                                      if (v58 == "recurring" || v113)
                                      {
                                        if (v59 != 9 || v58 != "recurring")
                                          goto LABEL_109;
                                      }
                                      else if (v116)
                                      {
                                        if ((v112 & 0x100000000) != 0)
                                        {
                                          if (*v58 != 114
                                            || *(_DWORD *)(v58 + 1) != 1920295781
                                            || *(_DWORD *)(v58 + 5) != 1735289202)
                                          {
                                            goto LABEL_109;
                                          }
                                        }
                                        else
                                        {
                                          if (*(_WORD *)v58 != 114)
                                            goto LABEL_109;
                                          v118 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v58 + 2), (int16x8_t)xmmword_1968DC810);
                                          v118.i16[0] = vminvq_u16(v118);
                                          if (!v118.i32[0])
                                            goto LABEL_109;
                                        }
                                      }
                                      v62 = &off_1E33494B0;
                                      goto LABEL_114;
                                    }
LABEL_283:
                                    v121 = 0;
                                    v61 = 0;
                                    goto LABEL_117;
                                  }
                                }
                                else if (!v57)
                                {
                                  goto LABEL_102;
                                }
                                *(_DWORD *)v57 += 2;
                                goto LABEL_102;
                              }
LABEL_396:
                              v8 = 0;
                              if (!v6)
                                goto LABEL_201;
                              goto LABEL_199;
                            }
                            *(_DWORD *)v51 += 2;
                            goto LABEL_85;
                          }
                          result = JSC::throwTypeError();
                        }
LABEL_369:
                        v8 = 0;
                        goto LABEL_370;
                      }
LABEL_63:
                      v43 = 0;
LABEL_64:
                      v44 = 0;
                      goto LABEL_69;
                    }
                    if (v41 == "disbursement" && v42 == 12)
                    {
LABEL_67:
                      v45 = &WebCore::parseEnumerationFromString<WebCore::ApplePayLineItem::DisbursementLineItemType>(WTF::String const&)::mappings;
LABEL_68:
                      v44 = *((unsigned __int8 *)v45 + 16);
                      v43 = 1;
                      goto LABEL_69;
                    }
                    if (v41 == "instantFundsOutFee" || v42 != 18)
                    {
                      if (v42 != 18 || v41 != "instantFundsOutFee")
                        goto LABEL_63;
                    }
                    else if ((v40 & 4) != 0)
                    {
                      if (*v41 != 105
                        || !vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v41 + 2), (int8x16_t)xmmword_1968DCB40), vceqq_s8(*(int8x16_t *)(v41 + 1), (int8x16_t)xmmword_1968DCB30))))
                      {
                        goto LABEL_63;
                      }
                    }
                    else
                    {
                      if (*(_WORD *)v41 != 105)
                        goto LABEL_63;
                      v101 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v41 + 2), (int16x8_t)xmmword_1968DCB50);
                      v101.i16[0] = vminvq_u16(v101);
                      v44 = v101.i32[0];
                      if (!v101.i32[0])
                        goto LABEL_387;
                      v102 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v41 + 4), (int16x8_t)xmmword_1968DCB60);
                      v102.i16[0] = vminvq_u16(v102);
                      v44 = v102.i32[0];
                      if (!v102.i32[0])
                        goto LABEL_387;
                      v103 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v41 + 20), (int16x8_t)xmmword_1968DCB70);
                      v103.i16[0] = vminvq_u16(v103);
                      v43 = v103.i32[0];
                      if (!v103.i32[0])
                        goto LABEL_64;
                    }
                    v45 = &off_1E3349098;
                    goto LABEL_68;
                  }
LABEL_280:
                  v46 = 0;
                  goto LABEL_71;
                }
              }
              else if (!v39)
              {
                goto LABEL_56;
              }
              *(_DWORD *)v39 += 2;
              goto LABEL_56;
            }
LABEL_392:
            v8 = 0;
            goto LABEL_201;
          }
          *(_DWORD *)v29 += 2;
          goto LABEL_32;
        }
        *(_DWORD *)v5 -= 2;
      }
      v5 = 0;
      v24 = 0;
      *(_DWORD *)(a3 + 80) = 1;
      goto LABEL_20;
    }
    v22 = *(WTF::StringImpl **)(v20 + 8);
    if ((v22 & 1) != 0)
    {
      v22 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, v16);
      if (!v22)
        goto LABEL_16;
    }
    else if (!v22)
    {
LABEL_16:
      v130 = v22;
      goto LABEL_17;
    }
    *(_DWORD *)v22 += 2;
    goto LABEL_16;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v123 = 1;
  v10 = 1;
  v11 = NAN;
  v12 = NAN;
  v13 = NAN;
  v14 = 1;
  v15 = 1;
LABEL_196:
  v93 = 0;
  *(_BYTE *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v5;
  *(_BYTE *)(a3 + 24) = v9;
  *(_DWORD *)(a3 + 25) = *(_DWORD *)v128;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)&v128[3];
  *(double *)(a3 + 32) = v11;
  *(_BYTE *)(a3 + 40) = v15;
  *(_WORD *)(a3 + 41) = v126;
  *(_BYTE *)(a3 + 43) = v127;
  *(_DWORD *)(a3 + 44) = v14;
  *(double *)(a3 + 48) = v12;
  *(double *)(a3 + 56) = v13;
  *(_QWORD *)(a3 + 64) = v6;
  *(_WORD *)(a3 + 72) = v7;
  v6 = 0;
  v5 = 0;
  v8 = 0;
LABEL_197:
  *(_DWORD *)(a3 + 80) = v93;
LABEL_198:
  if (!v6)
    goto LABEL_201;
LABEL_199:
  if (*(_DWORD *)v6 == 2)
    result = WTF::StringImpl::destroy(v6, this);
  else
    *(_DWORD *)v6 -= 2;
LABEL_201:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      result = WTF::StringImpl::destroy(v5, this);
      if (!v8)
        return result;
      goto LABEL_205;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (!v8)
    return result;
LABEL_205:
  if (*(_DWORD *)v8 == 2)
    return WTF::StringImpl::destroy(v8, this);
  *(_DWORD *)v8 -= 2;
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePayMerchantCapability>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  char **v11;
  uint64_t v14;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint64_t v28;
  unint64_t v29;

  v3 = a1;
  v29 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, a1);
    v4 = v28;
    if (v28)
      goto LABEL_7;
    return 0;
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    return 0;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v6 != 11;
  if (v5 == "supports3DS" || v6 != 11)
  {
    if (v5 == "supports3DS" && v6 == 11)
      goto LABEL_58;
    if (v5 == "supportsCredit" || v6 != 14)
    {
      if (v5 != "supportsCredit" || v6 != 14)
      {
        if (v5 != "supportsDebit" && v6 == 13)
        {
          if ((_DWORD)v7)
          {
            if (*v5 == 115
              && *(_QWORD *)(v5 + 1) == 0x447374726F707075
              && *(_QWORD *)(v5 + 5) == 0x7469626544737472)
            {
              goto LABEL_85;
            }
          }
          else if (*(_WORD *)v5 == 115)
          {
            v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DCBD0);
            v26.i16[0] = vminvq_u16(v26);
            if (v26.i32[0])
            {
              v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968DCBE0);
              v27.i16[0] = vminvq_u16(v27);
              if (v27.i32[0])
                goto LABEL_85;
            }
          }
          v9 = 13;
          goto LABEL_15;
        }
        if (v5 != "supportsDebit")
        {
          v9 = *(_DWORD *)(v4 + 4);
          goto LABEL_15;
        }
        v9 = *(_DWORD *)(v4 + 4);
        if (v6 != 13)
          goto LABEL_15;
LABEL_85:
        v11 = &off_1E33490E0;
        goto LABEL_59;
      }
LABEL_42:
      v11 = &off_1E33490C8;
      goto LABEL_59;
    }
    if ((_DWORD)v7)
    {
      if (*v5 == 115 && *(_QWORD *)(v5 + 1) == 0x437374726F707075 && *(_QWORD *)(v5 + 6) == 0x7469646572437374)
        goto LABEL_42;
    }
    else if (*(_WORD *)v5 == 115)
    {
      v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DCBB0);
      v24.i16[0] = vminvq_u16(v24);
      if (v24.i32[0])
      {
        v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1968DCBC0);
        v25.i16[0] = vminvq_u16(v25);
        if (v25.i32[0])
          goto LABEL_42;
      }
    }
    v9 = 14;
    goto LABEL_15;
  }
  if ((_DWORD)v7)
  {
    if (*v5 != 115 || *(_QWORD *)(v5 + 1) != 0x337374726F707075 || *(_QWORD *)(v5 + 3) != 0x5344337374726F70)
      goto LABEL_13;
LABEL_58:
    v11 = &WebCore::parseEnumerationFromString<WebCore::ApplePayMerchantCapability>(WTF::String const&)::mappings;
    goto LABEL_59;
  }
  if (*(_WORD *)v5 == 115)
  {
    v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DCB90);
    v16.i16[0] = vminvq_u16(v16);
    v8 = v16.i8[0];
    if (!v16.i32[0])
      goto LABEL_14;
    v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 6), (int16x8_t)xmmword_1968DCBA0);
    v17.i16[0] = vminvq_u16(v17);
    v8 = v17.i8[0];
    if (!v17.i32[0])
      goto LABEL_14;
    goto LABEL_58;
  }
LABEL_13:
  v8 = 0;
LABEL_14:
  v9 = 11;
LABEL_15:
  if (v5 != "supportsEMV" && !v8)
  {
    if (v9)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 115 || *(_QWORD *)(v5 + 1) != 0x457374726F707075 || *(_QWORD *)(v5 + 3) != 0x564D457374726F70)
        {
          v10 = 1;
          goto LABEL_23;
        }
      }
      else if (*(_WORD *)v5 != 115
             || (v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DCBF0),
                 v19.i16[0] = vminvq_u16(v19),
                 !v19.i32[0])
             || (v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 6), (int16x8_t)xmmword_1968DCC00),
                 v20.i16[0] = vminvq_u16(v20),
                 !v20.i32[0]))
      {
        v10 = 0;
        goto LABEL_23;
      }
    }
LABEL_45:
    v11 = &off_1E33490F8;
    goto LABEL_59;
  }
  v10 = v7 << 32;
  if (v5 == "supportsEMV" && v6 == 11)
    goto LABEL_45;
LABEL_23:
  if (v5 == "supportsInstantFundsOut" || v9 != 23)
  {
    if (v9 == 23 && v5 == "supportsInstantFundsOut")
      goto LABEL_28;
    goto LABEL_54;
  }
  if (!v10)
  {
    if (*(_WORD *)v5 == 115)
    {
      v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968DCC30);
      v21.i16[0] = vminvq_u16(v21);
      if (v21.i32[0])
      {
        v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 14), (int16x8_t)xmmword_1968DCC40);
        v22.i16[0] = vminvq_u16(v22);
        if (v22.i32[0])
        {
          v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 30), (int16x8_t)xmmword_1968DCC50);
          v23.i16[0] = vminvq_u16(v23);
          if (v23.i32[0])
            goto LABEL_28;
        }
      }
    }
LABEL_54:
    v14 = 0;
    goto LABEL_60;
  }
  if (*v5 != 115
    || !vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 7), (int8x16_t)xmmword_1968DCC20), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968DCC10))))
  {
    goto LABEL_54;
  }
LABEL_28:
  v11 = &off_1E3349110;
LABEL_59:
  v14 = *((unsigned int *)v11 + 4) | 0x100000000;
LABEL_60:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v14;
}

void WebCore::convertDictionary<WebCore::ApplePayModifier>(JSC::JSCell *this@<X1>, WTF::StringImpl **a2@<X0>, uint64_t a3@<X8>)
{
  int v3;
  JSC::VM *v6;
  unint64_t v7;
  JSC::Structure *Object;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  int v14;
  WTF *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  JSC::JSCell *v38;
  WTF::StringImpl **v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  JSC::JSCell *v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  JSC::JSCell *v63;
  int v64;
  int v65;
  WTF *v66;
  int v67;
  WTF *v68;
  WTF *v69;
  int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  JSC::VM *v74;
  WebCore::ApplePayPaymentTokenContext *hasExceptionsAfterHandlingTraps;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  unsigned int v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  int v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  JSC::JSCell *v93;
  unsigned int v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unsigned int v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  JSC::JSCell *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  __int16 v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116[2];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  __int16 v122;
  _BYTE v123[24];
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  __int16 v128;
  char v129;
  __int128 v130;
  uint64_t v131;
  int v132;
  char v133;
  char v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  __int16 v141;
  char v142;
  __int128 v143;
  __int128 v144;
  _BYTE v145[208];
  WTF::StringImpl *v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  __int16 v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  WTF *v158;
  int v159;
  unsigned int v160;
  char v161;
  WTF::StringImpl *v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  WTF::StringImpl *v168;
  uint64_t v169;
  __int16 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  WTF *v176;
  int v177;
  int v178;
  unsigned __int8 v179;
  char v180;
  JSC::VM *v181;
  JSC::VM *v182;
  WTF::StringImpl **v183;
  WTF::StringImpl *v184;
  WTF *v185;
  _BYTE v186[48];
  WTF::StringImpl *v187;
  uint64_t v188;
  unsigned int v189;
  _BYTE v190[24];
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  __int16 v195;
  char v196;
  __int128 v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  v6 = a2[7];
  v181 = v6;
  v7 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
    goto LABEL_5;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::Structure *)JSC::JSCell::getObject(this);
    if (Object)
    {
LABEL_5:
      LOBYTE(v132) = 0;
      v133 = 0;
      v134 = 0;
      v142 = 0;
      v145[200] = 0;
      LOBYTE(v146) = 0;
      v157 = 0;
      LOBYTE(v158) = 0;
      v161 = 0;
      LOBYTE(v162) = 0;
      v175 = 0;
      LOBYTE(v176) = 0;
      v180 = 0;
      v143 = 0u;
      v144 = 0u;
      v145[0] = 0;
      if (v7 == 2)
      {
LABEL_6:
        WebCore::ApplePayModifier::ApplePayModifier(a3 + 8, (uint64_t)&v132);
        *(_DWORD *)(a3 + 656) = 0;
LABEL_7:
        WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v132, v9);
        return;
      }
      WTF::AtomStringImpl::addLiteral();
      v11 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v184);
      if (v184)
      {
        if (*(_DWORD *)v184 == 2)
          WTF::StringImpl::destroy(v184, v10);
        else
          *(_DWORD *)v184 -= 2;
      }
      if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6))
        goto LABEL_224;
      if (v11 == 10)
      {
LABEL_45:
        WTF::AtomStringImpl::addLiteral();
        v28 = v184;
        v30 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v184);
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v29);
          else
            *(_DWORD *)v28 -= 2;
        }
        if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6))
          goto LABEL_224;
        if (v30 != 10)
        {
          WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>>::convert((uint64_t)&v184, (JSC::JSGlobalObject *)a2, v30);
          v31 = *(_DWORD *)v186;
          if (*(_DWORD *)v186)
          {
            *(_DWORD *)(a3 + 656) = 1;
            v35 = v31;
          }
          else
          {
            v32 = v184;
            v184 = 0;
            v33 = v185;
            v185 = 0;
            if (HIDWORD(v144))
              WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v144, (WTF::StringImpl *)(v144 + 104 * HIDWORD(v144)));
            v34 = (WTF *)v144;
            if ((_QWORD)v144)
            {
              *(_QWORD *)&v144 = 0;
              DWORD2(v144) = 0;
              WTF::fastFree(v34, v9);
            }
            *(_QWORD *)&v144 = v32;
            *((_QWORD *)&v144 + 1) = v33;
            v35 = *(_DWORD *)v186;
          }
          if (v35 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B140[v35])(v116, &v184);
          if (v31)
            goto LABEL_7;
        }
        WTF::AtomStringImpl::addLiteral();
        v36 = v184;
        v38 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v184);
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v37);
          else
            *(_DWORD *)v36 -= 2;
        }
        if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6))
          goto LABEL_224;
        v39 = &v184;
        if (v38 != (JSC::JSCell *)10)
        {
          WebCore::convertDictionary<WebCore::ApplePayAutomaticReloadPaymentRequest>(v38, (JSC::JSGlobalObject *)a2, (uint64_t)&v184);
          v40 = v191;
          if ((_DWORD)v191)
          {
            *(_DWORD *)(a3 + 656) = 1;
            v46 = v40;
          }
          else
          {
            v41 = v184;
            v116[0] = v184;
            LOBYTE(v116[1]) = (_BYTE)v185;
            v42 = *(_QWORD *)v186;
            v43 = *(_QWORD *)&v186[8];
            *(_OWORD *)v186 = 0u;
            *(_QWORD *)&v117 = v42;
            *((_QWORD *)&v117 + 1) = v43;
            v118 = *(_OWORD *)&v186[16];
            v119 = *(_OWORD *)&v186[32];
            v44 = v188;
            v184 = 0;
            v188 = 0;
            v120 = v187;
            v121 = v44;
            v122 = v189;
            v45 = *(_OWORD *)v190;
            memset(v190, 0, sizeof(v190));
            *(_OWORD *)v123 = v45;
            *(_QWORD *)&v123[16] = *(_QWORD *)&v190[16];
            if (v157)
            {
              WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v146, (WTF::StringImpl *)v116);
            }
            else
            {
              v116[0] = 0;
              v146 = v41;
              v147 = (char)v185;
              v117 = 0uLL;
              v148 = v42;
              v149 = v43;
              v150 = *(_OWORD *)&v186[16];
              v151 = *(_OWORD *)&v186[32];
              v121 = 0;
              v152 = v187;
              v153 = v44;
              v154 = v189;
              memset(v123, 0, sizeof(v123));
              v155 = v45;
              v156 = *(_QWORD *)&v190[16];
              v157 = 1;
            }
            WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v116, (WTF::StringImpl *)v9);
            v46 = v191;
          }
          if (v46 != -1)
            (*(&off_1E334B0D0 + v46))((int)v116, (WebCore::ApplePayAutomaticReloadPaymentRequest *)&v184);
          if (v40)
            goto LABEL_7;
        }
        WTF::AtomStringImpl::addLiteral();
        v47 = v184;
        v49 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v184);
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v48);
          else
            *(_DWORD *)v47 -= 2;
        }
        if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6))
          goto LABEL_224;
        if (v49 != (JSC::JSCell *)10)
        {
          WebCore::convertDictionary<WebCore::ApplePayDeferredPaymentRequest>(v49, (JSC::JSGlobalObject *)a2, (uint64_t)&v184);
          v50 = v192;
          if ((_DWORD)v192)
          {
            *(_DWORD *)(a3 + 656) = 1;
            v60 = v50;
          }
          else
          {
            v51 = v184;
            v116[0] = v184;
            LOBYTE(v116[1]) = (_BYTE)v185;
            v52 = *(_QWORD *)v186;
            v53 = *(_QWORD *)&v186[8];
            *(_OWORD *)v186 = 0u;
            *(_QWORD *)&v117 = v52;
            *((_QWORD *)&v117 + 1) = v53;
            v118 = *(_OWORD *)&v186[16];
            v119 = *(_OWORD *)&v186[32];
            v54 = v188;
            v184 = 0;
            v188 = 0;
            v120 = v187;
            v121 = v54;
            v122 = v189;
            v55 = *(_OWORD *)v190;
            *(_OWORD *)v123 = *(_OWORD *)v190;
            v56 = *(_QWORD *)&v190[16];
            v57 = v191;
            *(_QWORD *)&v123[16] = *(_QWORD *)&v190[16];
            v58 = *((_QWORD *)&v191 + 1);
            *(_QWORD *)&v124 = v191;
            *(_OWORD *)&v190[8] = 0u;
            v191 = 0u;
            *((_QWORD *)&v124 + 1) = v58;
            if (v175)
            {
              WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v162, (WTF::StringImpl *)v116);
            }
            else
            {
              v59 = (WTF::StringImpl *)&v186[16];
              v116[0] = 0;
              v162 = v51;
              v163 = (char)v185;
              v117 = 0uLL;
              v164 = v52;
              v165 = v53;
              v166 = *(_OWORD *)&v186[16];
              v167 = *(_OWORD *)&v186[32];
              v168 = v187;
              v121 = 0;
              v169 = v54;
              v170 = v189;
              v171 = v55;
              v172 = v56;
              v173 = v57;
              *(_OWORD *)&v123[8] = 0uLL;
              v124 = 0uLL;
              v174 = v58;
              v175 = 1;
            }
            WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v116, v59);
            v60 = v192;
          }
          if (v60 != -1)
            (*(&off_1E334B0E0 + v60))((int)v116, (WebCore::ApplePayDeferredPaymentRequest *)&v184);
          if (v50)
            goto LABEL_7;
        }
        WTF::AtomStringImpl::addLiteral();
        v61 = v184;
        v63 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v184);
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v62);
          else
            *(_DWORD *)v61 -= 2;
        }
        if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6))
          goto LABEL_224;
        if (v63 == (JSC::JSCell *)10)
        {
LABEL_121:
          WTF::AtomStringImpl::addLiteral();
          v71 = v184;
          v73 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v184);
          if (v71)
          {
            if (*(_DWORD *)v71 == 2)
              WTF::StringImpl::destroy(v71, v72);
            else
              *(_DWORD *)v71 -= 2;
          }
          if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6))
            goto LABEL_224;
          if (v73 == 10)
            goto LABEL_150;
          v74 = a2[7];
          v182 = v74;
          if ((v73 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v73 + 5) <= 0x16u)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            JSC::throwTypeError();
            v85 = v116[0];
            v116[0] = 0;
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
                WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v9);
              else
                *(_DWORD *)v85 -= 2;
            }
            v76 = 1;
            *(_DWORD *)v186 = 1;
          }
          else
          {
            v116[0] = 0;
            v116[1] = 0;
            v183 = v116;
            hasExceptionsAfterHandlingTraps = (WebCore::ApplePayPaymentTokenContext *)JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)a2, v73, (uint64_t *)&v183);
            if (*((_DWORD *)v74 + 20)
              && (hasExceptionsAfterHandlingTraps = (WebCore::ApplePayPaymentTokenContext *)JSC::VM::hasExceptionsAfterHandlingTraps(v74),
                  (hasExceptionsAfterHandlingTraps & 1) != 0))
            {
              hasExceptionsAfterHandlingTraps = v116[0];
              *(_DWORD *)v186 = 1;
              if (HIDWORD(v116[1]))
              {
                v114 = 40 * HIDWORD(v116[1]);
                do
                {
                  WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(hasExceptionsAfterHandlingTraps, (WTF::StringImpl *)v9);
                  hasExceptionsAfterHandlingTraps = (WebCore::ApplePayPaymentTokenContext *)(v115 + 40);
                  v114 -= 40;
                }
                while (v114);
                hasExceptionsAfterHandlingTraps = v116[0];
              }
              if (hasExceptionsAfterHandlingTraps)
              {
                v116[0] = 0;
                LODWORD(v116[1]) = 0;
                hasExceptionsAfterHandlingTraps = (WebCore::ApplePayPaymentTokenContext *)WTF::fastFree(hasExceptionsAfterHandlingTraps, v9);
              }
            }
            else
            {
              v184 = v116[0];
              v185 = v116[1];
              *(_DWORD *)v186 = 0;
            }
            v76 = *(_DWORD *)v186;
            if (!*(_DWORD *)v186)
            {
              v77 = v184;
              v184 = 0;
              v78 = (int)v185;
              v79 = HIDWORD(v185);
              v185 = 0;
              if (!v161)
              {
                v158 = v77;
                v159 = v78;
                v160 = v79;
                v161 = 1;
                _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore27ApplePayPaymentTokenContextELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_((uint64_t)hasExceptionsAfterHandlingTraps, (WTF::StringImpl *)&v184);
LABEL_150:
                WTF::AtomStringImpl::addLiteral();
                v86 = v184;
                v88 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v184);
                if (v86)
                {
                  if (*(_DWORD *)v86 == 2)
                    WTF::StringImpl::destroy(v86, v87);
                  else
                    *(_DWORD *)v86 -= 2;
                }
                if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6))
                  goto LABEL_224;
                if (v88 != 10)
                {
                  v184 = a2[7];
                  v89 = v184;
                  v90 = WebCore::parseEnumeration<WebCore::ApplePayPaymentMethodType>((JSC::JSGlobalObject *)a2, v88);
                  if (*((_DWORD *)v89 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v89) & 1) != 0)
                    goto LABEL_224;
                  if ((v90 & 0xFF00000000) == 0)
                  {
                    JSC::throwTypeError();
                    goto LABEL_224;
                  }
                  v132 = v90;
                  v133 = 1;
                }
                WTF::AtomStringImpl::addLiteral();
                v91 = v184;
                v93 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v184);
                if (v91)
                {
                  if (*(_DWORD *)v91 == 2)
                    WTF::StringImpl::destroy(v91, v92);
                  else
                    *(_DWORD *)v91 -= 2;
                }
                if (!*((_DWORD *)v6 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v6))
                {
                  if (v93 != (JSC::JSCell *)10)
                  {
                    WebCore::convertDictionary<WebCore::ApplePayRecurringPaymentRequest>(v93, (JSC::JSGlobalObject *)a2, (uint64_t)&v184);
                    v94 = v199;
                    if (v199)
                    {
                      *(_DWORD *)(a3 + 656) = 1;
                      v102 = v94;
                    }
                    else
                    {
                      v116[0] = v184;
                      LOBYTE(v116[1]) = (_BYTE)v185;
                      v95 = *(_OWORD *)v186;
                      v184 = 0;
                      *(_QWORD *)v186 = 0;
                      v117 = v95;
                      v118 = *(_OWORD *)&v186[16];
                      v119 = *(_OWORD *)&v186[32];
                      v96 = v188;
                      *(_QWORD *)&v186[8] = 0;
                      v188 = 0;
                      v120 = v187;
                      v121 = v96;
                      v122 = v189;
                      v123[0] = 0;
                      v129 = 0;
                      if (v196)
                      {
                        v123[0] = v190[0];
                        v97 = *(_OWORD *)&v190[8];
                        *(_QWORD *)&v190[8] = 0;
                        *(_QWORD *)&v190[16] = 0;
                        *(_OWORD *)&v123[8] = v97;
                        v124 = v191;
                        v125 = v192;
                        v98 = v194;
                        v194 = 0;
                        v126 = v193;
                        v127 = v98;
                        v128 = v195;
                        v129 = 1;
                      }
                      v99 = v197;
                      v197 = 0uLL;
                      v130 = v99;
                      v100 = v198;
                      v198 = 0;
                      v131 = v100;
                      std::optional<WebCore::ApplePayRecurringPaymentRequest>::operator=[abi:sn180100]<WebCore::ApplePayRecurringPaymentRequest,void>((uint64_t)v145, (WTF::StringImpl *)v116);
                      WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v116, v101);
                      v102 = v199;
                    }
                    if (v102 != -1)
                      (*(&off_1E334B120 + v102))((int)v116, (WebCore::ApplePayRecurringPaymentRequest *)&v184);
                    if (v94)
                      goto LABEL_7;
                  }
                  WTF::AtomStringImpl::addLiteral();
                  v103 = v184;
                  v105 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v184);
                  if (v103)
                  {
                    if (*(_DWORD *)v103 == 2)
                      WTF::StringImpl::destroy(v103, v104);
                    else
                      *(_DWORD *)v103 -= 2;
                  }
                  if (!*((_DWORD *)v6 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v6))
                  {
                    if (v105 != (JSC::JSCell *)10)
                    {
                      v106 = (WTF::StringImpl *)WebCore::convertDictionary<WebCore::ApplePayLineItem>(v105, (uint64_t)a2, (uint64_t)&v184);
                      v107 = v189;
                      if (v189)
                      {
                        *(_DWORD *)(a3 + 656) = 1;
                        if ((_DWORD)v107 != -1)
                          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v107])(v116, &v184);
                        goto LABEL_7;
                      }
                      v108 = v185;
                      v109 = *(WTF::StringImpl **)v186;
                      v185 = 0;
                      *(_QWORD *)v186 = 0;
                      *(_OWORD *)v116 = *(_OWORD *)&v186[8];
                      v117 = *(_OWORD *)&v186[24];
                      v110 = v187;
                      *(_QWORD *)&v118 = *(_QWORD *)&v186[40];
                      v187 = 0;
                      v111 = v188;
                      v134 = (char)v184;
                      if (v142)
                      {
                        v112 = v135;
                        v135 = v108;
                        if (v112)
                        {
                          if (*(_DWORD *)v112 == 2)
                            WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v9);
                          else
                            *(_DWORD *)v112 -= 2;
                        }
                        v113 = v136;
                        v136 = v109;
                        if (v113)
                        {
                          if (*(_DWORD *)v113 == 2)
                            WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v9);
                          else
                            *(_DWORD *)v113 -= 2;
                        }
                        v137 = *(_OWORD *)v116;
                        v138 = v117;
                        v106 = v140;
                        v139 = v118;
                        v140 = v110;
                        if (v106)
                        {
                          if (*(_DWORD *)v106 == 2)
                            v106 = (WTF::StringImpl *)WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v9);
                          else
                            *(_DWORD *)v106 -= 2;
                        }
                        v141 = v111;
                      }
                      else
                      {
                        v135 = v108;
                        v136 = v109;
                        v137 = *(_OWORD *)&v186[8];
                        v138 = *(_OWORD *)&v186[24];
                        v139 = *(_QWORD *)&v186[40];
                        v140 = v110;
                        v141 = v188;
                        v142 = 1;
                      }
                      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ApplePayLineItemENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_((uint64_t)v106, (WTF::StringImpl *)&v184);
                    }
                    goto LABEL_6;
                  }
                }
LABEL_224:
                *(_DWORD *)(a3 + 656) = 1;
                goto LABEL_7;
              }
              if (v160)
              {
                v80 = v158;
                v81 = 40 * v160;
                do
                {
                  WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v80, (WTF::StringImpl *)v9);
                  v80 = (WTF *)(v82 + 40);
                  v81 -= 40;
                }
                while (v81);
              }
              v83 = v158;
              if (v158)
              {
                v158 = 0;
                v159 = 0;
                WTF::fastFree(v83, v9);
              }
              v158 = v77;
              v159 = v78;
              v160 = v79;
              v84 = 1;
              v76 = *(_DWORD *)v186;
LABEL_143:
              if (v76 == -1)
              {
                if (!v84)
                  goto LABEL_7;
              }
              else
              {
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B110[v76])(v116, &v184);
                if ((v84 & 1) == 0)
                  goto LABEL_7;
              }
              goto LABEL_150;
            }
          }
          v84 = 0;
          *(_DWORD *)(a3 + 656) = 1;
          goto LABEL_143;
        }
        WebCore::convertDictionary<WebCore::ApplePayDisbursementRequest>(v63, (JSC::JSGlobalObject *)a2, (uint64_t)&v184);
        v64 = *(_DWORD *)&v186[16];
        if (*(_DWORD *)&v186[16])
        {
          *(_DWORD *)(a3 + 656) = 1;
          v70 = v64;
LABEL_118:
          if (v70 != -1)
            ((void (*)(WTF::StringImpl **, WTF **))off_1E334B0F0[v70])(v116, &v185);
          if (v64)
            goto LABEL_7;
          goto LABEL_121;
        }
        v65 = v186[8];
        if (v186[8])
        {
          v66 = v185;
          v185 = 0;
          v3 = *(_DWORD *)v186;
          LODWORD(v39) = *(_DWORD *)&v186[4];
          *(_QWORD *)v186 = 0;
          v67 = 1;
          if (!v180)
          {
            v176 = v66;
            v177 = v3;
            v178 = (int)v39;
            v179 = 1;
LABEL_115:
            v180 = 1;
LABEL_117:
            v70 = *(_DWORD *)&v186[16];
            goto LABEL_118;
          }
        }
        else
        {
          if (!v180)
          {
            LOBYTE(v176) = 0;
            v179 = 0;
            goto LABEL_115;
          }
          v66 = 0;
          v67 = 0;
        }
        if (v179 == v67)
        {
          if (v179)
          {
            v68 = v176;
            if (v176)
            {
              v176 = 0;
              v177 = 0;
              WTF::fastFree(v68, v9);
            }
            v176 = v66;
            v177 = v3;
            v178 = (int)v39;
            goto LABEL_117;
          }
        }
        else
        {
          if (!v179)
          {
            v176 = v66;
            v177 = v3;
            v178 = (int)v39;
            v179 = 1;
            goto LABEL_117;
          }
          v69 = v176;
          if (v176)
          {
            v176 = 0;
            v177 = 0;
            WTF::fastFree(v69, v9);
          }
          v179 = 0;
        }
        if (v65 && v66)
          WTF::fastFree(v66, v9);
        goto LABEL_117;
      }
      v12 = (WTF::StringImpl **)a2[7];
      v183 = v12;
      if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v24 = v184;
        v184 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v9);
          else
            *(_DWORD *)v24 -= 2;
        }
        v16 = 1;
        *(_DWORD *)v186 = 1;
      }
      else
      {
        v116[0] = 0;
        v116[1] = 0;
        v184 = (WTF::StringImpl *)v116;
        JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)a2, v11, (uint64_t *)&v184);
        if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12) & 1) != 0)
        {
          v14 = 1;
        }
        else
        {
          v14 = 0;
          v184 = v116[0];
          v15 = v116[1];
          v116[0] = 0;
          v116[1] = 0;
          v185 = v15;
        }
        *(_DWORD *)v186 = v14;
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v116, v13);
        v16 = *(_DWORD *)v186;
        if (!*(_DWORD *)v186)
        {
          v17 = v184;
          v184 = 0;
          v116[0] = v17;
          v18 = v185;
          v185 = 0;
          v116[1] = v18;
          if (HIDWORD(v143))
          {
            v19 = 80 * HIDWORD(v143);
            v20 = (WTF::StringImpl **)(v143 + 64);
            do
            {
              v21 = *v20;
              *v20 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
                else
                  *(_DWORD *)v21 -= 2;
              }
              v22 = *(v20 - 6);
              *(v20 - 6) = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v9);
                else
                  *(_DWORD *)v22 -= 2;
              }
              v23 = *(v20 - 7);
              *(v20 - 7) = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v9);
                else
                  *(_DWORD *)v23 -= 2;
              }
              v20 += 10;
              v19 -= 80;
            }
            while (v19);
          }
          v26 = (WTF *)v143;
          if ((_QWORD)v143)
          {
            *(_QWORD *)&v143 = 0;
            DWORD2(v143) = 0;
            WTF::fastFree(v26, v9);
          }
          *(WTF::StringImpl **)&v143 = v116[0];
          v27 = v116[1];
          v116[0] = 0;
          v116[1] = 0;
          *((_QWORD *)&v143 + 1) = v27;
          WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v116, (WTF::StringImpl *)v9);
          v25 = 1;
          v16 = *(_DWORD *)v186;
LABEL_42:
          if (v16 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B100[v16])(v116, &v184);
          if (!v25)
            goto LABEL_7;
          goto LABEL_45;
        }
      }
      v25 = 0;
      *(_DWORD *)(a3 + 656) = 1;
      goto LABEL_42;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 656) = 1;
}

uint64_t std::optional<WebCore::ApplePayPaymentOrderDetails>::operator=[abi:sn180100]<WebCore::ApplePayPaymentOrderDetails,void>(uint64_t a1, WTF::StringImpl *a2)
{
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v4)
  {
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v8 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    v10 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    v12 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, a2);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    *(_QWORD *)a1 = v5;
    v13 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(a1 + 8) = v13;
    v14 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(a1 + 16) = v14;
    v15 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(a1 + 24) = v15;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t WebCore::JSApplePayPaymentAuthorizedEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePayPaymentAuthorizedEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSApplePayPaymentAuthorizedEvent::visitChildren(WebCore::JSApplePayPaymentAuthorizedEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSApplePayPaymentAuthorizedEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePayPaymentAuthorizedEventPrototype::create(WebCore::JSApplePayPaymentAuthorizedEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSApplePayPaymentAuthorizedEvent::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSApplePayPaymentAuthorizedEventPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsApplePayPaymentAuthorizedEvent_payment(WebCore *a1, uint64_t a2)
{
  unint64_t v2;
  JSC::VM *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
  {
    v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v2 = WebCore::convertDictionaryToJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(a2 + 24) + 72);
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v6 = *((_QWORD *)a1 + 7);
      *(_QWORD *)(a2 + 32) = v2;
      if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v6 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v6 + 192), (const JSCell *)a2);
    }
  }
  return v2;
}

uint64_t WebCore::JSApplePayPaymentAuthorizedEvent::subspaceForImpl(WebCore::JSApplePayPaymentAuthorizedEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 408);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 408))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 40, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 408);
    *(_QWORD *)(v8 + 408) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 408);
  *(_QWORD *)(v3 + 408) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::convertDictionary<WebCore::ApplePayPaymentCompleteDetails>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t Object;
  JSC::Structure *v7;
  JSC::JSCell *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  __int128 v18;
  uint64_t result;
  WTF::StringImpl *v20[2];
  WTF::StringImpl *v21[2];
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 v27;
  JSC::VM *v28;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v28 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v25) = 0;
    v27 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 40) = 0;
  }
  else
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      *(_DWORD *)(a3 + 48) = 1;
      return result;
    }
    v7 = (JSC::Structure *)Object;
    LOBYTE(v25) = 0;
    v27 = 0;
    WTF::AtomStringImpl::addLiteral();
    v8 = (JSC::JSCell *)JSC::JSObject::get(v7, a2, v22);
    if ((_QWORD)v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v22, this);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      *(_DWORD *)(a3 + 48) = 1;
      return std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, this);
    }
    if (v8 != (JSC::JSCell *)10)
    {
      WebCore::convertDictionary<WebCore::ApplePayPaymentOrderDetails>((uint64_t)&v22, (JSC::VM **)a2, v8);
      v9 = v24;
      if (v24)
      {
        *(_DWORD *)(a3 + 48) = 1;
        if ((_DWORD)v9 != -1)
          ((void (*)(WTF::StringImpl **, __int128 *))off_1E334B238[v9])(v20, &v22);
        return std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, this);
      }
      v10 = v22;
      v11 = v23;
      v22 = 0u;
      v23 = 0u;
      *(_OWORD *)v20 = v10;
      *(_OWORD *)v21 = v11;
      std::optional<WebCore::ApplePayPaymentOrderDetails>::operator=[abi:sn180100]<WebCore::ApplePayPaymentOrderDetails,void>((uint64_t)&v25, (WTF::StringImpl *)v20);
      v13 = v21[1];
      v21[1] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v21[0];
      v21[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v20[1];
      v20[1] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v20[0];
      v20[0] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          v16 = (WTF::StringImpl *)WTF::StringImpl::destroy(v16, v12);
        else
          *(_DWORD *)v16 -= 2;
      }
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentOrderDetailsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_((uint64_t)v16, (WTF::StringImpl *)&v22);
    }
    v17 = v27;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 40) = 0;
    if (v17)
    {
      v18 = v26;
      *(_OWORD *)(a3 + 8) = v25;
      v25 = 0u;
      v26 = 0u;
      *(_OWORD *)(a3 + 24) = v18;
      *(_BYTE *)(a3 + 40) = 1;
    }
  }
  *(_DWORD *)(a3 + 48) = 0;
  return std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, this);
}

void WebCore::convertDictionary<WebCore::ApplePayPaymentContact>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  JSC::VM *v4;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  JSC::VM *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  JSC::VM *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  JSC::VM *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  JSC::VM *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  JSC::VM *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  JSC::VM *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  JSC::VM *v73;
  _DWORD *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  int v82;
  WTF::StringImpl *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unsigned int v87;
  WTF *v88;
  unsigned int v89;
  unsigned int v90;
  WTF *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t (**v94)();
  WTF *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  char v98;
  int v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v112;
  uint64_t v113;
  int v114;
  WTF::StringImpl *v115[2];
  WTF::StringImpl *v116[2];
  WTF::StringImpl *v117[2];
  WTF::StringImpl *v118[2];
  WTF *v119;
  unint64_t v120;
  char v121;
  WTF::StringImpl *v122[7];
  JSC::VM *v123;
  WTF::StringImpl *v124;
  _QWORD v125[3];

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v123 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v121 = 0;
    *(_OWORD *)v115 = 0u;
    *(_OWORD *)v116 = 0u;
    *(_OWORD *)v117 = 0u;
    *(_OWORD *)v118 = 0u;
    LOBYTE(v119) = 0;
    memset(v122, 0, sizeof(v122));
LABEL_230:
    v77 = *(_OWORD *)v115;
    v78 = *(_OWORD *)v116;
    *(_OWORD *)v115 = 0u;
    *(_OWORD *)v116 = 0u;
    *(_OWORD *)a1 = v77;
    *(_OWORD *)(a1 + 16) = v78;
    v79 = *(_OWORD *)v117;
    v80 = *(_OWORD *)v118;
    *(_OWORD *)v117 = 0u;
    *(_OWORD *)v118 = 0u;
    *(_OWORD *)(a1 + 32) = v79;
    *(_OWORD *)(a1 + 48) = v80;
    *(_BYTE *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    if (v121)
    {
      *(_QWORD *)(a1 + 64) = v119;
      v81 = v120;
      v119 = 0;
      v120 = 0;
      *(_QWORD *)(a1 + 72) = v81;
      *(_BYTE *)(a1 + 80) = 1;
    }
    v82 = 0;
    v83 = v122[0];
    v122[0] = 0;
    *(_QWORD *)(a1 + 88) = v83;
    v84 = *(_OWORD *)&v122[1];
    v85 = *(_OWORD *)&v122[3];
    memset(&v122[1], 0, 32);
    *(_OWORD *)(a1 + 96) = v84;
    *(_OWORD *)(a1 + 112) = v85;
    v86 = *(_OWORD *)&v122[5];
    *(_OWORD *)&v122[5] = 0uLL;
    *(_OWORD *)(a1 + 128) = v86;
    goto LABEL_233;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(this);
    if (Object)
    {
      v7 = (JSC::Structure *)Object;
      v121 = 0;
      *(_OWORD *)v115 = 0u;
      *(_OWORD *)v116 = 0u;
      *(_OWORD *)v117 = 0u;
      *(_OWORD *)v118 = 0u;
      LOBYTE(v119) = 0;
      memset(v122, 0, sizeof(v122));
      WTF::AtomStringImpl::addLiteral();
      v9 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
      if (v112)
      {
        if (*(_DWORD *)v112 == 2)
          WTF::StringImpl::destroy(v112, v8);
        else
          *(_DWORD *)v112 -= 2;
      }
      if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
        goto LABEL_431;
      if (v9 == 10)
      {
LABEL_10:
        WTF::AtomStringImpl::addLiteral();
        v10 = v112;
        v11 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
          goto LABEL_431;
        if (v11 == 10)
        {
LABEL_27:
          WTF::AtomStringImpl::addLiteral();
          v16 = v112;
          v17 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, a2);
            else
              *(_DWORD *)v16 -= 2;
          }
          if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
            goto LABEL_431;
          if (v17 == 10)
          {
LABEL_44:
            WTF::AtomStringImpl::addLiteral();
            v21 = v112;
            v22 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, a2);
              else
                *(_DWORD *)v21 -= 2;
            }
            if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
              goto LABEL_431;
            if (v22 == 10)
            {
LABEL_61:
              WTF::AtomStringImpl::addLiteral();
              v26 = v112;
              v27 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, a2);
                else
                  *(_DWORD *)v26 -= 2;
              }
              if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                goto LABEL_431;
              if (v27 == 10)
              {
LABEL_78:
                WTF::AtomStringImpl::addLiteral();
                v31 = v112;
                v32 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2)
                    WTF::StringImpl::destroy(v31, a2);
                  else
                    *(_DWORD *)v31 -= 2;
                }
                if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                  goto LABEL_431;
                if (v32 == 10)
                {
LABEL_95:
                  WTF::AtomStringImpl::addLiteral();
                  v36 = v112;
                  v37 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, a2);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                    goto LABEL_431;
                  if (v37 == 10)
                  {
LABEL_112:
                    WTF::AtomStringImpl::addLiteral();
                    v41 = v112;
                    v42 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
                    if (v41)
                    {
                      if (*(_DWORD *)v41 == 2)
                        WTF::StringImpl::destroy(v41, a2);
                      else
                        *(_DWORD *)v41 -= 2;
                    }
                    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                      goto LABEL_431;
                    if (v42 == 10)
                    {
LABEL_129:
                      WTF::AtomStringImpl::addLiteral();
                      v46 = v112;
                      v47 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
                      if (v46)
                      {
                        if (*(_DWORD *)v46 == 2)
                          WTF::StringImpl::destroy(v46, a2);
                        else
                          *(_DWORD *)v46 -= 2;
                      }
                      if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                        goto LABEL_431;
                      if (v47 == 10)
                      {
LABEL_146:
                        WTF::AtomStringImpl::addLiteral();
                        v51 = v112;
                        v52 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
                        if (v51)
                        {
                          if (*(_DWORD *)v51 == 2)
                            WTF::StringImpl::destroy(v51, a2);
                          else
                            *(_DWORD *)v51 -= 2;
                        }
                        if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                          goto LABEL_431;
                        if (v52 == 10)
                        {
LABEL_163:
                          WTF::AtomStringImpl::addLiteral();
                          v56 = v112;
                          v57 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
                          if (v56)
                          {
                            if (*(_DWORD *)v56 == 2)
                              WTF::StringImpl::destroy(v56, a2);
                            else
                              *(_DWORD *)v56 -= 2;
                          }
                          if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                            goto LABEL_431;
                          if (v57 == 10)
                          {
LABEL_180:
                            WTF::AtomStringImpl::addLiteral();
                            v61 = v112;
                            v62 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
                            if (v61)
                            {
                              if (*(_DWORD *)v61 == 2)
                                WTF::StringImpl::destroy(v61, a2);
                              else
                                *(_DWORD *)v61 -= 2;
                            }
                            if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                              goto LABEL_431;
                            if (v62 == 10)
                            {
LABEL_197:
                              WTF::AtomStringImpl::addLiteral();
                              v66 = v112;
                              v67 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
                              if (v66)
                              {
                                if (*(_DWORD *)v66 == 2)
                                  WTF::StringImpl::destroy(v66, a2);
                                else
                                  *(_DWORD *)v66 -= 2;
                              }
                              if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                                goto LABEL_431;
                              if (v67 == 10)
                              {
LABEL_214:
                                WTF::AtomStringImpl::addLiteral();
                                v71 = v112;
                                v72 = JSC::JSObject::get(v7, a2, (unint64_t)v112);
                                if (v71)
                                {
                                  if (*(_DWORD *)v71 == 2)
                                    WTF::StringImpl::destroy(v71, a2);
                                  else
                                    *(_DWORD *)v71 -= 2;
                                }
                                if (*((_DWORD *)v123 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v123) & 1) != 0)
                                  goto LABEL_431;
                                if (v72 == 10)
                                  goto LABEL_230;
                                v112 = (WTF::StringImpl *)v72;
                                v73 = (JSC::VM *)*((_QWORD *)a2 + 7);
                                if ((v72 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v72 + 5) != 2)
                                {
                                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v112, a2);
LABEL_225:
                                  if (*((_DWORD *)v73 + 20))
                                  {
                                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v73);
                                    v75 = (WTF::StringImpl *)v125[0];
                                    if (hasExceptionsAfterHandlingTraps)
                                    {
                                      v125[0] = 0;
                                      if (v75)
                                      {
                                        if (*(_DWORD *)v75 == 2)
                                          WTF::StringImpl::destroy(v75, a2);
                                        else
                                          *(_DWORD *)v75 -= 2;
                                      }
LABEL_431:
                                      v82 = 1;
LABEL_233:
                                      *(_DWORD *)(a1 + 144) = v82;
LABEL_234:
                                      WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v115, a2);
                                      return;
                                    }
                                  }
                                  else
                                  {
                                    v75 = (WTF::StringImpl *)v125[0];
                                  }
                                  v76 = v122[0];
                                  v122[0] = v75;
                                  if (v76)
                                  {
                                    if (*(_DWORD *)v76 == 2)
                                      WTF::StringImpl::destroy(v76, a2);
                                    else
                                      *(_DWORD *)v76 -= 2;
                                  }
                                  goto LABEL_230;
                                }
                                v74 = *(_DWORD **)(v72 + 8);
                                if ((v74 & 1) != 0)
                                {
                                  v74 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v72, a2);
                                  if (!v74)
                                    goto LABEL_224;
                                }
                                else if (!v74)
                                {
LABEL_224:
                                  v125[0] = v74;
                                  goto LABEL_225;
                                }
                                *v74 += 2;
                                goto LABEL_224;
                              }
                              v125[0] = v67;
                              v68 = (JSC::VM *)*((_QWORD *)a2 + 7);
                              if ((v67 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v67 + 5) != 2)
                              {
                                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
                                goto LABEL_208;
                              }
                              v69 = *(WTF::StringImpl **)(v67 + 8);
                              if ((v69 & 1) != 0)
                              {
                                v69 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v67, a2);
                                if (!v69)
                                  goto LABEL_207;
                              }
                              else if (!v69)
                              {
LABEL_207:
                                v124 = v69;
LABEL_208:
                                if (!*((_DWORD *)v68 + 20))
                                {
                                  v14 = v124;
LABEL_210:
                                  LODWORD(v113) = 0;
                                  goto LABEL_211;
                                }
                                v110 = JSC::VM::hasExceptionsAfterHandlingTraps(v68);
                                v14 = v124;
                                if ((v110 & 1) == 0)
                                  goto LABEL_210;
                                v87 = 1;
                                LODWORD(v113) = 1;
                                v124 = 0;
                                if (!v14)
                                  goto LABEL_425;
                                v99 = *(_DWORD *)v14 - 2;
                                if (*(_DWORD *)v14 != 2)
                                  goto LABEL_424;
                                WTF::StringImpl::destroy(v14, a2);
                                v87 = v113;
                                if (!(_DWORD)v113)
                                {
                                  v14 = v112;
LABEL_211:
                                  v112 = 0;
                                  v70 = v122[3];
                                  v122[3] = v14;
                                  if (v70)
                                  {
                                    if (*(_DWORD *)v70 == 2)
                                    {
                                      WTF::StringImpl::destroy(v70, a2);
                                      if ((_DWORD)v113 != -1)
                                        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                                    }
                                    else
                                    {
                                      *(_DWORD *)v70 -= 2;
                                    }
                                  }
                                  goto LABEL_214;
                                }
LABEL_433:
                                *(_DWORD *)(a1 + 144) = 1;
                                if (v87 == -1)
                                  goto LABEL_234;
                                goto LABEL_426;
                              }
                              *(_DWORD *)v69 += 2;
                              goto LABEL_207;
                            }
                            v125[0] = v62;
                            v63 = (JSC::VM *)*((_QWORD *)a2 + 7);
                            if ((v62 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v62 + 5) != 2)
                            {
                              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_191:
                              if (!*((_DWORD *)v63 + 20))
                              {
                                v14 = v124;
LABEL_193:
                                LODWORD(v113) = 0;
LABEL_194:
                                v112 = 0;
                                v65 = v122[2];
                                v122[2] = v14;
                                if (v65)
                                {
                                  if (*(_DWORD *)v65 == 2)
                                  {
                                    WTF::StringImpl::destroy(v65, a2);
                                    if ((_DWORD)v113 != -1)
                                      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v65 -= 2;
                                  }
                                }
                                goto LABEL_197;
                              }
                              v109 = JSC::VM::hasExceptionsAfterHandlingTraps(v63);
                              v14 = v124;
                              if ((v109 & 1) == 0)
                                goto LABEL_193;
                              v87 = 1;
                              LODWORD(v113) = 1;
                              v124 = 0;
                              if (v14)
                              {
                                v99 = *(_DWORD *)v14 - 2;
                                if (*(_DWORD *)v14 == 2)
                                {
                                  WTF::StringImpl::destroy(v14, a2);
                                  v87 = v113;
                                  if ((_DWORD)v113)
                                    goto LABEL_433;
                                  v14 = v112;
                                  goto LABEL_194;
                                }
LABEL_424:
                                *(_DWORD *)v14 = v99;
                              }
LABEL_425:
                              *(_DWORD *)(a1 + 144) = 1;
LABEL_426:
                              v94 = off_1E334B060;
                              goto LABEL_249;
                            }
                            v64 = *(WTF::StringImpl **)(v62 + 8);
                            if ((v64 & 1) != 0)
                            {
                              v64 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v62, a2);
                              if (!v64)
                                goto LABEL_190;
                            }
                            else if (!v64)
                            {
LABEL_190:
                              v124 = v64;
                              goto LABEL_191;
                            }
                            *(_DWORD *)v64 += 2;
                            goto LABEL_190;
                          }
                          v125[0] = v57;
                          v58 = (JSC::VM *)*((_QWORD *)a2 + 7);
                          if ((v57 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v57 + 5) != 2)
                          {
                            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_174:
                            if (*((_DWORD *)v58 + 20))
                            {
                              v108 = JSC::VM::hasExceptionsAfterHandlingTraps(v58);
                              v14 = v124;
                              if ((v108 & 1) != 0)
                              {
                                v87 = 1;
                                LODWORD(v113) = 1;
                                v124 = 0;
                                if (!v14)
                                  goto LABEL_425;
                                v99 = *(_DWORD *)v14 - 2;
                                if (*(_DWORD *)v14 != 2)
                                  goto LABEL_424;
                                WTF::StringImpl::destroy(v14, a2);
                                v87 = v113;
                                if ((_DWORD)v113)
                                  goto LABEL_433;
                                v14 = v112;
                                goto LABEL_177;
                              }
                            }
                            else
                            {
                              v14 = v124;
                            }
                            LODWORD(v113) = 0;
LABEL_177:
                            v112 = 0;
                            v60 = v117[1];
                            v117[1] = v14;
                            if (v60)
                            {
                              if (*(_DWORD *)v60 == 2)
                              {
                                WTF::StringImpl::destroy(v60, a2);
                                if ((_DWORD)v113 != -1)
                                  ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                              }
                              else
                              {
                                *(_DWORD *)v60 -= 2;
                              }
                            }
                            goto LABEL_180;
                          }
                          v59 = *(WTF::StringImpl **)(v57 + 8);
                          if ((v59 & 1) != 0)
                          {
                            v59 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v57, a2);
                            if (!v59)
                              goto LABEL_173;
                          }
                          else if (!v59)
                          {
LABEL_173:
                            v124 = v59;
                            goto LABEL_174;
                          }
                          *(_DWORD *)v59 += 2;
                          goto LABEL_173;
                        }
                        v125[0] = v52;
                        v53 = (JSC::VM *)*((_QWORD *)a2 + 7);
                        if ((v52 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v52 + 5) != 2)
                        {
                          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_157:
                          if (*((_DWORD *)v53 + 20))
                          {
                            v107 = JSC::VM::hasExceptionsAfterHandlingTraps(v53);
                            v14 = v124;
                            if ((v107 & 1) != 0)
                            {
                              v87 = 1;
                              LODWORD(v113) = 1;
                              v124 = 0;
                              if (!v14)
                                goto LABEL_425;
                              v99 = *(_DWORD *)v14 - 2;
                              if (*(_DWORD *)v14 != 2)
                                goto LABEL_424;
                              WTF::StringImpl::destroy(v14, a2);
                              v87 = v113;
                              if ((_DWORD)v113)
                                goto LABEL_433;
                              v14 = v112;
                              goto LABEL_160;
                            }
                          }
                          else
                          {
                            v14 = v124;
                          }
                          LODWORD(v113) = 0;
LABEL_160:
                          v112 = 0;
                          v55 = v118[0];
                          v118[0] = v14;
                          if (v55)
                          {
                            if (*(_DWORD *)v55 == 2)
                            {
                              WTF::StringImpl::destroy(v55, a2);
                              if ((_DWORD)v113 != -1)
                                ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                            }
                            else
                            {
                              *(_DWORD *)v55 -= 2;
                            }
                          }
                          goto LABEL_163;
                        }
                        v54 = *(WTF::StringImpl **)(v52 + 8);
                        if ((v54 & 1) != 0)
                        {
                          v54 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v52, a2);
                          if (!v54)
                            goto LABEL_156;
                        }
                        else if (!v54)
                        {
LABEL_156:
                          v124 = v54;
                          goto LABEL_157;
                        }
                        *(_DWORD *)v54 += 2;
                        goto LABEL_156;
                      }
                      v125[0] = v47;
                      v48 = (JSC::VM *)*((_QWORD *)a2 + 7);
                      if ((v47 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v47 + 5) != 2)
                      {
                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_140:
                        if (*((_DWORD *)v48 + 20))
                        {
                          v106 = JSC::VM::hasExceptionsAfterHandlingTraps(v48);
                          v14 = v124;
                          if ((v106 & 1) != 0)
                          {
                            v87 = 1;
                            LODWORD(v113) = 1;
                            v124 = 0;
                            if (!v14)
                              goto LABEL_425;
                            v99 = *(_DWORD *)v14 - 2;
                            if (*(_DWORD *)v14 != 2)
                              goto LABEL_424;
                            WTF::StringImpl::destroy(v14, a2);
                            v87 = v113;
                            if ((_DWORD)v113)
                              goto LABEL_433;
                            v14 = v112;
                            goto LABEL_143;
                          }
                        }
                        else
                        {
                          v14 = v124;
                        }
                        LODWORD(v113) = 0;
LABEL_143:
                        v112 = 0;
                        v50 = v115[0];
                        v115[0] = v14;
                        if (v50)
                        {
                          if (*(_DWORD *)v50 == 2)
                          {
                            WTF::StringImpl::destroy(v50, a2);
                            if ((_DWORD)v113 != -1)
                              ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                          }
                          else
                          {
                            *(_DWORD *)v50 -= 2;
                          }
                        }
                        goto LABEL_146;
                      }
                      v49 = *(WTF::StringImpl **)(v47 + 8);
                      if ((v49 & 1) != 0)
                      {
                        v49 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v47, a2);
                        if (!v49)
                          goto LABEL_139;
                      }
                      else if (!v49)
                      {
LABEL_139:
                        v124 = v49;
                        goto LABEL_140;
                      }
                      *(_DWORD *)v49 += 2;
                      goto LABEL_139;
                    }
                    v125[0] = v42;
                    v43 = (JSC::VM *)*((_QWORD *)a2 + 7);
                    if ((v42 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v42 + 5) != 2)
                    {
                      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_123:
                      if (*((_DWORD *)v43 + 20))
                      {
                        v105 = JSC::VM::hasExceptionsAfterHandlingTraps(v43);
                        v14 = v124;
                        if ((v105 & 1) != 0)
                        {
                          v87 = 1;
                          LODWORD(v113) = 1;
                          v124 = 0;
                          if (!v14)
                            goto LABEL_425;
                          v99 = *(_DWORD *)v14 - 2;
                          if (*(_DWORD *)v14 != 2)
                            goto LABEL_424;
                          WTF::StringImpl::destroy(v14, a2);
                          v87 = v113;
                          if ((_DWORD)v113)
                            goto LABEL_433;
                          v14 = v112;
                          goto LABEL_126;
                        }
                      }
                      else
                      {
                        v14 = v124;
                      }
                      LODWORD(v113) = 0;
LABEL_126:
                      v112 = 0;
                      v45 = v122[1];
                      v122[1] = v14;
                      if (v45)
                      {
                        if (*(_DWORD *)v45 == 2)
                        {
                          WTF::StringImpl::destroy(v45, a2);
                          if ((_DWORD)v113 != -1)
                            ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                        }
                        else
                        {
                          *(_DWORD *)v45 -= 2;
                        }
                      }
                      goto LABEL_129;
                    }
                    v44 = *(WTF::StringImpl **)(v42 + 8);
                    if ((v44 & 1) != 0)
                    {
                      v44 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v42, a2);
                      if (!v44)
                        goto LABEL_122;
                    }
                    else if (!v44)
                    {
LABEL_122:
                      v124 = v44;
                      goto LABEL_123;
                    }
                    *(_DWORD *)v44 += 2;
                    goto LABEL_122;
                  }
                  v125[0] = v37;
                  v38 = (JSC::VM *)*((_QWORD *)a2 + 7);
                  if ((v37 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v37 + 5) != 2)
                  {
                    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_106:
                    if (*((_DWORD *)v38 + 20))
                    {
                      v104 = JSC::VM::hasExceptionsAfterHandlingTraps(v38);
                      v14 = v124;
                      if ((v104 & 1) != 0)
                      {
                        v87 = 1;
                        LODWORD(v113) = 1;
                        v124 = 0;
                        if (!v14)
                          goto LABEL_425;
                        v99 = *(_DWORD *)v14 - 2;
                        if (*(_DWORD *)v14 != 2)
                          goto LABEL_424;
                        WTF::StringImpl::destroy(v14, a2);
                        v87 = v113;
                        if ((_DWORD)v113)
                          goto LABEL_433;
                        v14 = v112;
                        goto LABEL_109;
                      }
                    }
                    else
                    {
                      v14 = v124;
                    }
                    LODWORD(v113) = 0;
LABEL_109:
                    v112 = 0;
                    v40 = v116[0];
                    v116[0] = v14;
                    if (v40)
                    {
                      if (*(_DWORD *)v40 == 2)
                      {
                        WTF::StringImpl::destroy(v40, a2);
                        if ((_DWORD)v113 != -1)
                          ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                      }
                      else
                      {
                        *(_DWORD *)v40 -= 2;
                      }
                    }
                    goto LABEL_112;
                  }
                  v39 = *(WTF::StringImpl **)(v37 + 8);
                  if ((v39 & 1) != 0)
                  {
                    v39 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v37, a2);
                    if (!v39)
                      goto LABEL_105;
                  }
                  else if (!v39)
                  {
LABEL_105:
                    v124 = v39;
                    goto LABEL_106;
                  }
                  *(_DWORD *)v39 += 2;
                  goto LABEL_105;
                }
                v125[0] = v32;
                v33 = (JSC::VM *)*((_QWORD *)a2 + 7);
                if ((v32 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v32 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_89:
                  if (*((_DWORD *)v33 + 20))
                  {
                    v103 = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
                    v14 = v124;
                    if ((v103 & 1) != 0)
                    {
                      v87 = 1;
                      LODWORD(v113) = 1;
                      v124 = 0;
                      if (!v14)
                        goto LABEL_425;
                      v99 = *(_DWORD *)v14 - 2;
                      if (*(_DWORD *)v14 != 2)
                        goto LABEL_424;
                      WTF::StringImpl::destroy(v14, a2);
                      v87 = v113;
                      if ((_DWORD)v113)
                        goto LABEL_433;
                      v14 = v112;
                      goto LABEL_92;
                    }
                  }
                  else
                  {
                    v14 = v124;
                  }
                  LODWORD(v113) = 0;
LABEL_92:
                  v112 = 0;
                  v35 = v116[1];
                  v116[1] = v14;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                    {
                      WTF::StringImpl::destroy(v35, a2);
                      if ((_DWORD)v113 != -1)
                        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                    }
                    else
                    {
                      *(_DWORD *)v35 -= 2;
                    }
                  }
                  goto LABEL_95;
                }
                v34 = *(WTF::StringImpl **)(v32 + 8);
                if ((v34 & 1) != 0)
                {
                  v34 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v32, a2);
                  if (!v34)
                    goto LABEL_88;
                }
                else if (!v34)
                {
LABEL_88:
                  v124 = v34;
                  goto LABEL_89;
                }
                *(_DWORD *)v34 += 2;
                goto LABEL_88;
              }
              v125[0] = v27;
              v28 = (JSC::VM *)*((_QWORD *)a2 + 7);
              if ((v27 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v27 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_72:
                if (*((_DWORD *)v28 + 20))
                {
                  v102 = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
                  v14 = v124;
                  if ((v102 & 1) != 0)
                  {
                    v87 = 1;
                    LODWORD(v113) = 1;
                    v124 = 0;
                    if (!v14)
                      goto LABEL_425;
                    v99 = *(_DWORD *)v14 - 2;
                    if (*(_DWORD *)v14 != 2)
                      goto LABEL_424;
                    WTF::StringImpl::destroy(v14, a2);
                    v87 = v113;
                    if ((_DWORD)v113)
                      goto LABEL_433;
                    v14 = v112;
                    goto LABEL_75;
                  }
                }
                else
                {
                  v14 = v124;
                }
                LODWORD(v113) = 0;
LABEL_75:
                v112 = 0;
                v30 = v115[1];
                v115[1] = v14;
                if (v30)
                {
                  if (*(_DWORD *)v30 == 2)
                  {
                    WTF::StringImpl::destroy(v30, a2);
                    if ((_DWORD)v113 != -1)
                      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                  }
                  else
                  {
                    *(_DWORD *)v30 -= 2;
                  }
                }
                goto LABEL_78;
              }
              v29 = *(WTF::StringImpl **)(v27 + 8);
              if ((v29 & 1) != 0)
              {
                v29 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, a2);
                if (!v29)
                  goto LABEL_71;
              }
              else if (!v29)
              {
LABEL_71:
                v124 = v29;
                goto LABEL_72;
              }
              *(_DWORD *)v29 += 2;
              goto LABEL_71;
            }
            v125[0] = v22;
            v23 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((v22 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v22 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_55:
              if (*((_DWORD *)v23 + 20))
              {
                v101 = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
                v14 = v124;
                if ((v101 & 1) != 0)
                {
                  v87 = 1;
                  LODWORD(v113) = 1;
                  v124 = 0;
                  if (!v14)
                    goto LABEL_425;
                  v99 = *(_DWORD *)v14 - 2;
                  if (*(_DWORD *)v14 != 2)
                    goto LABEL_424;
                  WTF::StringImpl::destroy(v14, a2);
                  v87 = v113;
                  if ((_DWORD)v113)
                    goto LABEL_433;
                  v14 = v112;
                  goto LABEL_58;
                }
              }
              else
              {
                v14 = v124;
              }
              LODWORD(v113) = 0;
LABEL_58:
              v112 = 0;
              v25 = v122[6];
              v122[6] = v14;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                {
                  WTF::StringImpl::destroy(v25, a2);
                  if ((_DWORD)v113 != -1)
                    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
                }
                else
                {
                  *(_DWORD *)v25 -= 2;
                }
              }
              goto LABEL_61;
            }
            v24 = *(WTF::StringImpl **)(v22 + 8);
            if ((v24 & 1) != 0)
            {
              v24 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v22, a2);
              if (!v24)
                goto LABEL_54;
            }
            else if (!v24)
            {
LABEL_54:
              v124 = v24;
              goto LABEL_55;
            }
            *(_DWORD *)v24 += 2;
            goto LABEL_54;
          }
          v125[0] = v17;
          v18 = (JSC::VM *)*((_QWORD *)a2 + 7);
          if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_38:
            if (*((_DWORD *)v18 + 20))
            {
              v100 = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
              v14 = v124;
              if ((v100 & 1) != 0)
              {
                v87 = 1;
                LODWORD(v113) = 1;
                v124 = 0;
                if (!v14)
                  goto LABEL_425;
                v99 = *(_DWORD *)v14 - 2;
                if (*(_DWORD *)v14 != 2)
                  goto LABEL_424;
                WTF::StringImpl::destroy(v14, a2);
                v87 = v113;
                if ((_DWORD)v113)
                  goto LABEL_433;
                v14 = v112;
                goto LABEL_41;
              }
            }
            else
            {
              v14 = v124;
            }
            LODWORD(v113) = 0;
LABEL_41:
            v112 = 0;
            v20 = v122[5];
            v122[5] = v14;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
              {
                WTF::StringImpl::destroy(v20, a2);
                if ((_DWORD)v113 != -1)
                  ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
              }
              else
              {
                *(_DWORD *)v20 -= 2;
              }
            }
            goto LABEL_44;
          }
          v19 = *(WTF::StringImpl **)(v17 + 8);
          if ((v19 & 1) != 0)
          {
            v19 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, a2);
            if (!v19)
              goto LABEL_37;
          }
          else if (!v19)
          {
LABEL_37:
            v124 = v19;
            goto LABEL_38;
          }
          *(_DWORD *)v19 += 2;
          goto LABEL_37;
        }
        v125[0] = v11;
        v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
        if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v125, a2);
LABEL_21:
          if (*((_DWORD *)v12 + 20))
          {
            v98 = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
            v14 = v124;
            if ((v98 & 1) != 0)
            {
              v87 = 1;
              LODWORD(v113) = 1;
              v124 = 0;
              if (!v14)
                goto LABEL_425;
              v99 = *(_DWORD *)v14 - 2;
              if (*(_DWORD *)v14 != 2)
                goto LABEL_424;
              WTF::StringImpl::destroy(v14, a2);
              v87 = v113;
              if ((_DWORD)v113)
                goto LABEL_433;
              v14 = v112;
              goto LABEL_24;
            }
          }
          else
          {
            v14 = v124;
          }
          LODWORD(v113) = 0;
LABEL_24:
          v112 = 0;
          v15 = v122[4];
          v122[4] = v14;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
            {
              WTF::StringImpl::destroy(v15, a2);
              if ((_DWORD)v113 != -1)
                ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v113])(v125, &v112);
            }
            else
            {
              *(_DWORD *)v15 -= 2;
            }
          }
          goto LABEL_27;
        }
        v13 = *(WTF::StringImpl **)(v11 + 8);
        if ((v13 & 1) != 0)
        {
          v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, a2);
          if (!v13)
            goto LABEL_20;
        }
        else if (!v13)
        {
LABEL_20:
          v124 = v13;
          goto LABEL_21;
        }
        *(_DWORD *)v13 += 2;
        goto LABEL_20;
      }
      v124 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
      if ((v9 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v9 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v93 = (WTF::StringImpl *)v125[0];
        v125[0] = 0;
        if (v93)
        {
          if (*(_DWORD *)v93 == 2)
            WTF::StringImpl::destroy(v93, v92);
          else
            *(_DWORD *)v93 -= 2;
        }
        v87 = 1;
        v114 = 1;
        *(_DWORD *)(a1 + 144) = 1;
      }
      else
      {
        WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(a2, v9, (uint64_t)&v112);
        v87 = v114;
        if (!v114)
        {
          v88 = v112;
          v90 = v113;
          v89 = HIDWORD(v113);
          v112 = 0;
          v113 = 0;
          if (v121)
          {
            if (HIDWORD(v120))
            {
              v95 = v119;
              v96 = 8 * HIDWORD(v120);
              do
              {
                v97 = *(WTF::StringImpl **)v95;
                *(_QWORD *)v95 = 0;
                if (v97)
                {
                  if (*(_DWORD *)v97 == 2)
                    WTF::StringImpl::destroy(v97, a2);
                  else
                    *(_DWORD *)v97 -= 2;
                }
                v95 = (WTF *)((char *)v95 + 8);
                v96 -= 8;
              }
              while (v96);
            }
            v91 = v119;
            if (v119)
            {
              v119 = 0;
              LODWORD(v120) = 0;
              WTF::fastFree(v91, a2);
            }
            v119 = v88;
            v120 = __PAIR64__(v89, v90);
            if (v114 != -1)
              ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B270[v114])(v125, &v112);
          }
          else
          {
            v119 = v88;
            v120 = __PAIR64__(v89, v90);
            v121 = 1;
          }
          goto LABEL_10;
        }
        *(_DWORD *)(a1 + 144) = 1;
        if (v87 == -1)
          goto LABEL_234;
      }
      v94 = off_1E334B270;
LABEL_249:
      ((void (*)(_QWORD *, WTF::StringImpl **))v94[v87])(v125, &v112);
      goto LABEL_234;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a1 + 144) = 1;
}

void WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::ApplePayPaymentContact *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unsigned __int8 *v98;
  unsigned int v99;
  unsigned __int8 *v100;
  unsigned int v101;
  unsigned __int8 *v102;
  unsigned int v103;
  unsigned __int8 *v104;
  unsigned int v105;
  unsigned __int8 *v106;
  unsigned int v107;
  unsigned __int8 *v108;
  unsigned int v109;
  unsigned __int8 *v110;
  unsigned int v111;
  unsigned __int8 *v112;
  unsigned int v113;
  unsigned __int8 *v114;
  unsigned int v115;
  unsigned __int8 *v116;
  unsigned int v117;
  unsigned __int8 *v118;
  unsigned int v119;
  unsigned __int8 *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  WTF *v135;
  uint64_t v136;
  _DWORD **v137;
  uint64_t v138;
  _DWORD *v139;
  WTF *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF *v143;
  unint64_t v144;
  int v145;
  int v146;
  uint64_t v147;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  bzero((void *)(v10 + 16), v9);
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  if (!*((_BYTE *)a3 + 80))
  {
LABEL_12:
    v18 = *((_QWORD *)a3 + 15);
    if (!v18)
      goto LABEL_22;
    v19 = *((_QWORD *)this + 7);
    v20 = *(_DWORD *)(v18 + 4);
    if (v20)
    {
      if (v20 != 1)
      {
LABEL_15:
        v21 = *(_QWORD *)(v19 + 64760);
        if (!v21 || v18 != *(_QWORD *)(v21 + 8))
          v21 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_18;
      }
      v96 = *(unsigned __int8 **)(v18 + 8);
      if ((*(_BYTE *)(v18 + 16) & 4) != 0)
      {
        v97 = *v96;
      }
      else
      {
        v122 = *(unsigned __int16 *)v96;
        if (v122 > 0xFF)
          goto LABEL_15;
        v97 = v122;
      }
      v21 = *(_QWORD *)(v19 + 8 * v97 + 42216);
    }
    else
    {
      v21 = *(_QWORD *)(v19 + 41968);
    }
LABEL_18:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v22 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v22, v21, 0, (uint64_t)&v143);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v23);
      else
        *(_DWORD *)v22 -= 2;
    }
LABEL_22:
    v24 = *((_QWORD *)a3 + 16);
    if (!v24)
      goto LABEL_32;
    v25 = *((_QWORD *)this + 7);
    v26 = *(_DWORD *)(v24 + 4);
    if (v26)
    {
      if (v26 != 1)
      {
LABEL_25:
        v27 = *(_QWORD *)(v25 + 64760);
        if (!v27 || v24 != *(_QWORD *)(v27 + 8))
          v27 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_28;
      }
      v98 = *(unsigned __int8 **)(v24 + 8);
      if ((*(_BYTE *)(v24 + 16) & 4) != 0)
      {
        v99 = *v98;
      }
      else
      {
        v123 = *(unsigned __int16 *)v98;
        if (v123 > 0xFF)
          goto LABEL_25;
        v99 = v123;
      }
      v27 = *(_QWORD *)(v25 + 8 * v99 + 42216);
    }
    else
    {
      v27 = *(_QWORD *)(v25 + 41968);
    }
LABEL_28:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v28 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v28, v27, 0, (uint64_t)&v143);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
LABEL_32:
    v30 = *((_QWORD *)a3 + 17);
    if (!v30)
      goto LABEL_42;
    v31 = *((_QWORD *)this + 7);
    v32 = *(_DWORD *)(v30 + 4);
    if (v32)
    {
      if (v32 != 1)
      {
LABEL_35:
        v33 = *(_QWORD *)(v31 + 64760);
        if (!v33 || v30 != *(_QWORD *)(v33 + 8))
          v33 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_38;
      }
      v100 = *(unsigned __int8 **)(v30 + 8);
      if ((*(_BYTE *)(v30 + 16) & 4) != 0)
      {
        v101 = *v100;
      }
      else
      {
        v124 = *(unsigned __int16 *)v100;
        if (v124 > 0xFF)
          goto LABEL_35;
        v101 = v124;
      }
      v33 = *(_QWORD *)(v31 + 8 * v101 + 42216);
    }
    else
    {
      v33 = *(_QWORD *)(v31 + 41968);
    }
LABEL_38:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v34 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v34, v33, 0, (uint64_t)&v143);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v35);
      else
        *(_DWORD *)v34 -= 2;
    }
LABEL_42:
    v36 = *((_QWORD *)a3 + 1);
    if (!v36)
      goto LABEL_52;
    v37 = *((_QWORD *)this + 7);
    v38 = *(_DWORD *)(v36 + 4);
    if (v38)
    {
      if (v38 != 1)
      {
LABEL_45:
        v39 = *(_QWORD *)(v37 + 64760);
        if (!v39 || v36 != *(_QWORD *)(v39 + 8))
          v39 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_48;
      }
      v102 = *(unsigned __int8 **)(v36 + 8);
      if ((*(_BYTE *)(v36 + 16) & 4) != 0)
      {
        v103 = *v102;
      }
      else
      {
        v125 = *(unsigned __int16 *)v102;
        if (v125 > 0xFF)
          goto LABEL_45;
        v103 = v125;
      }
      v39 = *(_QWORD *)(v37 + 8 * v103 + 42216);
    }
    else
    {
      v39 = *(_QWORD *)(v37 + 41968);
    }
LABEL_48:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v40 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v40, v39, 0, (uint64_t)&v143);
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v41);
      else
        *(_DWORD *)v40 -= 2;
    }
LABEL_52:
    v42 = *((_QWORD *)a3 + 3);
    if (!v42)
      goto LABEL_62;
    v43 = *((_QWORD *)this + 7);
    v44 = *(_DWORD *)(v42 + 4);
    if (v44)
    {
      if (v44 != 1)
      {
LABEL_55:
        v45 = *(_QWORD *)(v43 + 64760);
        if (!v45 || v42 != *(_QWORD *)(v45 + 8))
          v45 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_58;
      }
      v104 = *(unsigned __int8 **)(v42 + 8);
      if ((*(_BYTE *)(v42 + 16) & 4) != 0)
      {
        v105 = *v104;
      }
      else
      {
        v126 = *(unsigned __int16 *)v104;
        if (v126 > 0xFF)
          goto LABEL_55;
        v105 = v126;
      }
      v45 = *(_QWORD *)(v43 + 8 * v105 + 42216);
    }
    else
    {
      v45 = *(_QWORD *)(v43 + 41968);
    }
LABEL_58:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v46 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v46, v45, 0, (uint64_t)&v143);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v47);
      else
        *(_DWORD *)v46 -= 2;
    }
LABEL_62:
    v48 = *((_QWORD *)a3 + 2);
    if (!v48)
      goto LABEL_72;
    v49 = *((_QWORD *)this + 7);
    v50 = *(_DWORD *)(v48 + 4);
    if (v50)
    {
      if (v50 != 1)
      {
LABEL_65:
        v51 = *(_QWORD *)(v49 + 64760);
        if (!v51 || v48 != *(_QWORD *)(v51 + 8))
          v51 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_68;
      }
      v106 = *(unsigned __int8 **)(v48 + 8);
      if ((*(_BYTE *)(v48 + 16) & 4) != 0)
      {
        v107 = *v106;
      }
      else
      {
        v127 = *(unsigned __int16 *)v106;
        if (v127 > 0xFF)
          goto LABEL_65;
        v107 = v127;
      }
      v51 = *(_QWORD *)(v49 + 8 * v107 + 42216);
    }
    else
    {
      v51 = *(_QWORD *)(v49 + 41968);
    }
LABEL_68:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v52 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v52, v51, 0, (uint64_t)&v143);
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v53);
      else
        *(_DWORD *)v52 -= 2;
    }
LABEL_72:
    v54 = *((_QWORD *)a3 + 12);
    if (!v54)
      goto LABEL_82;
    v55 = *((_QWORD *)this + 7);
    v56 = *(_DWORD *)(v54 + 4);
    if (v56)
    {
      if (v56 != 1)
      {
LABEL_75:
        v57 = *(_QWORD *)(v55 + 64760);
        if (!v57 || v54 != *(_QWORD *)(v57 + 8))
          v57 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_78;
      }
      v108 = *(unsigned __int8 **)(v54 + 8);
      if ((*(_BYTE *)(v54 + 16) & 4) != 0)
      {
        v109 = *v108;
      }
      else
      {
        v128 = *(unsigned __int16 *)v108;
        if (v128 > 0xFF)
          goto LABEL_75;
        v109 = v128;
      }
      v57 = *(_QWORD *)(v55 + 8 * v109 + 42216);
    }
    else
    {
      v57 = *(_QWORD *)(v55 + 41968);
    }
LABEL_78:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v58 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v58, v57, 0, (uint64_t)&v143);
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v59);
      else
        *(_DWORD *)v58 -= 2;
    }
LABEL_82:
    v60 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_92;
    v61 = *((_QWORD *)this + 7);
    v62 = *(_DWORD *)(v60 + 4);
    if (v62)
    {
      if (v62 != 1)
      {
LABEL_85:
        v63 = *(_QWORD *)(v61 + 64760);
        if (!v63 || v60 != *(_QWORD *)(v63 + 8))
          v63 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_88;
      }
      v110 = *(unsigned __int8 **)(v60 + 8);
      if ((*(_BYTE *)(v60 + 16) & 4) != 0)
      {
        v111 = *v110;
      }
      else
      {
        v129 = *(unsigned __int16 *)v110;
        if (v129 > 0xFF)
          goto LABEL_85;
        v111 = v129;
      }
      v63 = *(_QWORD *)(v61 + 8 * v111 + 42216);
    }
    else
    {
      v63 = *(_QWORD *)(v61 + 41968);
    }
LABEL_88:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v64 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v64, v63, 0, (uint64_t)&v143);
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v65);
      else
        *(_DWORD *)v64 -= 2;
    }
LABEL_92:
    v66 = *((_QWORD *)a3 + 6);
    if (!v66)
      goto LABEL_102;
    v67 = *((_QWORD *)this + 7);
    v68 = *(_DWORD *)(v66 + 4);
    if (v68)
    {
      if (v68 != 1)
      {
LABEL_95:
        v69 = *(_QWORD *)(v67 + 64760);
        if (!v69 || v66 != *(_QWORD *)(v69 + 8))
          v69 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_98;
      }
      v112 = *(unsigned __int8 **)(v66 + 8);
      if ((*(_BYTE *)(v66 + 16) & 4) != 0)
      {
        v113 = *v112;
      }
      else
      {
        v130 = *(unsigned __int16 *)v112;
        if (v130 > 0xFF)
          goto LABEL_95;
        v113 = v130;
      }
      v69 = *(_QWORD *)(v67 + 8 * v113 + 42216);
    }
    else
    {
      v69 = *(_QWORD *)(v67 + 41968);
    }
LABEL_98:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v70 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v70, v69, 0, (uint64_t)&v143);
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v71);
      else
        *(_DWORD *)v70 -= 2;
    }
LABEL_102:
    v72 = *((_QWORD *)a3 + 5);
    if (!v72)
      goto LABEL_112;
    v73 = *((_QWORD *)this + 7);
    v74 = *(_DWORD *)(v72 + 4);
    if (v74)
    {
      if (v74 != 1)
      {
LABEL_105:
        v75 = *(_QWORD *)(v73 + 64760);
        if (!v75 || v72 != *(_QWORD *)(v75 + 8))
          v75 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_108;
      }
      v114 = *(unsigned __int8 **)(v72 + 8);
      if ((*(_BYTE *)(v72 + 16) & 4) != 0)
      {
        v115 = *v114;
      }
      else
      {
        v131 = *(unsigned __int16 *)v114;
        if (v131 > 0xFF)
          goto LABEL_105;
        v115 = v131;
      }
      v75 = *(_QWORD *)(v73 + 8 * v115 + 42216);
    }
    else
    {
      v75 = *(_QWORD *)(v73 + 41968);
    }
LABEL_108:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v76 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v76, v75, 0, (uint64_t)&v143);
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v77);
      else
        *(_DWORD *)v76 -= 2;
    }
LABEL_112:
    v78 = *((_QWORD *)a3 + 13);
    if (!v78)
      goto LABEL_122;
    v79 = *((_QWORD *)this + 7);
    v80 = *(_DWORD *)(v78 + 4);
    if (v80)
    {
      if (v80 != 1)
      {
LABEL_115:
        v81 = *(_QWORD *)(v79 + 64760);
        if (!v81 || v78 != *(_QWORD *)(v81 + 8))
          v81 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_118;
      }
      v116 = *(unsigned __int8 **)(v78 + 8);
      if ((*(_BYTE *)(v78 + 16) & 4) != 0)
      {
        v117 = *v116;
      }
      else
      {
        v132 = *(unsigned __int16 *)v116;
        if (v132 > 0xFF)
          goto LABEL_115;
        v117 = v132;
      }
      v81 = *(_QWORD *)(v79 + 8 * v117 + 42216);
    }
    else
    {
      v81 = *(_QWORD *)(v79 + 41968);
    }
LABEL_118:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v82 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v82, v81, 0, (uint64_t)&v143);
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, v83);
      else
        *(_DWORD *)v82 -= 2;
    }
LABEL_122:
    v84 = *((_QWORD *)a3 + 14);
    if (!v84)
      goto LABEL_132;
    v85 = *((_QWORD *)this + 7);
    v86 = *(_DWORD *)(v84 + 4);
    if (v86)
    {
      if (v86 != 1)
      {
LABEL_125:
        v87 = *(_QWORD *)(v85 + 64760);
        if (!v87 || v84 != *(_QWORD *)(v87 + 8))
          v87 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_128;
      }
      v118 = *(unsigned __int8 **)(v84 + 8);
      if ((*(_BYTE *)(v84 + 16) & 4) != 0)
      {
        v119 = *v118;
      }
      else
      {
        v133 = *(unsigned __int16 *)v118;
        if (v133 > 0xFF)
          goto LABEL_125;
        v119 = v133;
      }
      v87 = *(_QWORD *)(v85 + 8 * v119 + 42216);
    }
    else
    {
      v87 = *(_QWORD *)(v85 + 41968);
    }
LABEL_128:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v88 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v88, v87, 0, (uint64_t)&v143);
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, v89);
      else
        *(_DWORD *)v88 -= 2;
    }
LABEL_132:
    v90 = *((_QWORD *)a3 + 11);
    if (!v90)
      return;
    v91 = *((_QWORD *)this + 7);
    v92 = *(_DWORD *)(v90 + 4);
    if (v92)
    {
      if (v92 != 1)
      {
LABEL_135:
        v93 = *(_QWORD *)(v91 + 64760);
        if (!v93 || v90 != *(_QWORD *)(v93 + 8))
          v93 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_138;
      }
      v120 = *(unsigned __int8 **)(v90 + 8);
      if ((*(_BYTE *)(v90 + 16) & 4) != 0)
      {
        v121 = *v120;
      }
      else
      {
        v134 = *(unsigned __int16 *)v120;
        if (v134 > 0xFF)
          goto LABEL_135;
        v121 = v134;
      }
      v93 = *(_QWORD *)(v91 + 8 * v121 + 42216);
    }
    else
    {
      v93 = *(_QWORD *)(v91 + 41968);
    }
LABEL_138:
    if (!*(_DWORD *)(v7 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) == 0)
    {
      WTF::AtomStringImpl::addLiteral();
      v94 = v143;
      v143 = 0;
      v144 = v10;
      v145 = -1;
      v146 = 0x1000000;
      v147 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v94, v93, 0, (uint64_t)&v143);
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
          WTF::StringImpl::destroy(v94, v95);
        else
          *(_DWORD *)v94 -= 2;
      }
    }
    return;
  }
  v12 = *((unsigned int *)a3 + 19);
  v143 = 0;
  LODWORD(v144) = 0;
  HIDWORD(v144) = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v135 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
    LODWORD(v144) = v12;
    v143 = v135;
    v136 = *((unsigned int *)a3 + 19);
    if ((_DWORD)v136)
    {
      v137 = (_DWORD **)*((_QWORD *)a3 + 8);
      v138 = 8 * v136;
      do
      {
        v139 = *v137;
        if (*v137)
          *v139 += 2;
        *(_QWORD *)v135 = v139;
        v135 = (WTF *)((char *)v135 + 8);
        ++v137;
        v138 -= 8;
      }
      while (v138);
    }
  }
  v14 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)&v143);
  if (HIDWORD(v144))
  {
    v140 = v143;
    v141 = 8 * HIDWORD(v144);
    do
    {
      v142 = *(WTF::StringImpl **)v140;
      *(_QWORD *)v140 = 0;
      if (v142)
      {
        if (*(_DWORD *)v142 == 2)
          WTF::StringImpl::destroy(v142, v13);
        else
          *(_DWORD *)v142 -= 2;
      }
      v140 = (WTF *)((char *)v140 + 8);
      v141 -= 8;
    }
    while (v141);
  }
  v15 = v143;
  if (v143)
  {
    v143 = 0;
    LODWORD(v144) = 0;
    WTF::fastFree(v15, v13);
  }
  if (!*(_DWORD *)(v7 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v143;
    v143 = 0;
    v144 = v10;
    v145 = -1;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v16, v14, 0, (uint64_t)&v143);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    goto LABEL_12;
  }
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::ApplePayPaymentMethod>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC::JSCell *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  JSC::VM *v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  JSC::VM *v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  JSC::VM *v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  JSC::Structure *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  const char *v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  char v69;
  int v70;
  char v71;
  int v72;
  char v73;
  int v74;
  char **v75;
  unint64_t v77;
  WTF::StringImpl *result;
  uint16x8_t v79;
  uint16x8_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  JSC::VM *v85;
  unint64_t v86;
  int v87;
  int v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  JSC::VM *v93;
  _DWORD *v94;
  WTF::StringImpl *v95;
  int v96;
  int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  _DWORD *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  JSC::VM *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  int v112;
  int v113;
  __int128 v114;
  __int128 v115;
  int v116;
  int v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  JSC::VM *v127;
  uint64_t v128;
  unint64_t v129;
  char hasExceptionsAfterHandlingTraps;
  char v131;
  char v132;
  uint16x8_t v133;
  uint16x8_t v134;
  JSC::VM *v135;
  unint64_t v136;
  char v137;
  char v138;
  WTF::StringImpl *v139;
  char v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  int v145;
  uint16x8_t v146;
  uint16x8_t v147;
  uint8x16_t v148;
  uint16x8_t v149;
  uint16x8_t v150;
  uint16x8_t v151;
  WTF::StringImpl *v152;
  int v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  unsigned __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  unsigned int v176;
  WTF::StringImpl *v177[2];
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  int v181;
  unsigned __int8 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char v194;
  WTF::StringImpl *v195;
  JSC::VM *v196;
  WTF::StringImpl *v197;
  int v198;
  JSC::VM *v199;
  WTF::StringImpl *v200;
  _QWORD v201[3];

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v196 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 232) = 1;
    return result;
  }
  BYTE4(v178) = 0;
  LOBYTE(v179) = 0;
  v182 = 0;
  LOBYTE(v183) = 0;
  v194 = 0;
  v195 = 0;
  v177[0] = 0;
  v177[1] = 0;
  LOBYTE(v178) = 0;
  if (v6 == 2)
    goto LABEL_6;
  WTF::AtomStringImpl::addLiteral();
  v22 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, v165);
  if ((_QWORD)v165)
  {
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v165, v21);
    else
      *(_DWORD *)v165 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    goto LABEL_368;
  if (v22 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayPaymentContact>((uint64_t)&v165, a2, v22);
    v23 = v176;
    if (v176)
    {
      *(_DWORD *)(a3 + 232) = 1;
      v35 = v23;
    }
    else
    {
      v24 = v165;
      v154 = v165;
      v25 = v166;
      v165 = 0u;
      v166 = 0u;
      v155 = v25;
      v26 = v167;
      v156 = v167;
      v27 = v168;
      v167 = 0u;
      v168 = 0u;
      v157 = v27;
      LOBYTE(v158) = 0;
      v160 = 0;
      if (v171)
      {
        v158 = v169;
        v28 = v170;
        v169 = 0;
        v170 = 0;
        v159 = v28;
        v160 = 1;
      }
      v29 = (WTF::StringImpl *)*((_QWORD *)&v172 + 1);
      v30 = v172;
      v172 = 0uLL;
      v161 = __PAIR128__((unint64_t)v29, v30);
      v31 = v173;
      v173 = 0uLL;
      v162 = v31;
      v32 = v174;
      v174 = 0uLL;
      v163 = v32;
      v33 = v175;
      v175 = 0;
      v164 = v33;
      if (v194)
      {
        WebCore::ApplePayPaymentContact::operator=((WTF::StringImpl **)&v183, (WTF::StringImpl **)&v154);
      }
      else
      {
        v183 = v24;
        v154 = 0uLL;
        v155 = 0uLL;
        v184 = v25;
        v185 = v26;
        v156 = 0uLL;
        v157 = 0uLL;
        v186 = v27;
        LOBYTE(v187) = 0;
        v189 = 0;
        if (v171)
        {
          v187 = v158;
          v34 = v159;
          v158 = 0;
          v159 = 0;
          v188 = v34;
          v189 = 1;
        }
        v161 = 0uLL;
        *(_QWORD *)&v190 = v30;
        *((_QWORD *)&v190 + 1) = v29;
        v162 = 0uLL;
        v191 = v31;
        v163 = 0uLL;
        v192 = v32;
        v164 = 0;
        v193 = v33;
        v194 = 1;
      }
      WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)&v154, v29);
      v35 = v176;
    }
    if (v35 != -1)
      (*(&off_1E334B280 + v35))((int)&v154, (WebCore::ApplePayPaymentContact *)&v165);
    if (v23)
      goto LABEL_294;
  }
  WTF::AtomStringImpl::addLiteral();
  v36 = (WTF::StringImpl *)v165;
  v37 = JSC::JSObject::get(Object, a2, v165);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, this);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    goto LABEL_368;
  if (v37 != 10)
  {
    *(_QWORD *)&v154 = v37;
    v38 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v37 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v37 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v154, a2);
LABEL_41:
      if (!*((_DWORD *)v38 + 20))
      {
        v40 = v197;
LABEL_43:
        DWORD2(v165) = 0;
LABEL_44:
        *(_QWORD *)&v165 = 0;
        v41 = v195;
        v195 = v40;
        if (!v41)
        {
LABEL_47:
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v154, (WTF::StringImpl *)&v165);
          goto LABEL_48;
        }
        if (*(_DWORD *)v41 != 2)
        {
          *(_DWORD *)v41 -= 2;
          goto LABEL_47;
        }
        WTF::StringImpl::destroy(v41, this);
        v69 = 1;
        v70 = DWORD2(v165);
        goto LABEL_133;
      }
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v38);
      v40 = v197;
      if ((hasExceptionsAfterHandlingTraps & 1) == 0)
        goto LABEL_43;
      DWORD2(v165) = 1;
      v197 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::destroy(v40, this);
          v70 = DWORD2(v165);
          if (!DWORD2(v165))
          {
            v40 = (WTF::StringImpl *)v165;
            goto LABEL_44;
          }
LABEL_351:
          v69 = 0;
          *(_DWORD *)(a3 + 232) = 1;
LABEL_133:
          if (v70 != -1)
            ((void (*)(__int128 *, __int128 *))off_1E334B060[v70])(&v154, &v165);
          if ((v69 & 1) == 0)
            goto LABEL_294;
          goto LABEL_48;
        }
        *(_DWORD *)v40 -= 2;
      }
      v70 = 1;
      goto LABEL_351;
    }
    v39 = *(_QWORD *)(v37 + 8);
    if ((v39 & 1) != 0)
    {
      v39 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v37, a2);
      if (!v39)
        goto LABEL_40;
    }
    else if (!v39)
    {
LABEL_40:
      v197 = (WTF::StringImpl *)v39;
      goto LABEL_41;
    }
    *(_DWORD *)v39 += 2;
    goto LABEL_40;
  }
LABEL_48:
  WTF::AtomStringImpl::addLiteral();
  v42 = (WTF::StringImpl *)v165;
  v43 = JSC::JSObject::get(Object, a2, v165);
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, this);
    else
      *(_DWORD *)v42 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    goto LABEL_368;
  if (v43 != 10)
  {
    *(_QWORD *)&v154 = v43;
    v44 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v43 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v43 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v154, a2);
LABEL_59:
      if (!*((_DWORD *)v44 + 20))
      {
        v46 = v197;
LABEL_61:
        DWORD2(v165) = 0;
LABEL_62:
        *(_QWORD *)&v165 = 0;
        v47 = v177[0];
        v177[0] = v46;
        if (!v47)
        {
LABEL_65:
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v154, (WTF::StringImpl *)&v165);
          goto LABEL_66;
        }
        if (*(_DWORD *)v47 != 2)
        {
          *(_DWORD *)v47 -= 2;
          goto LABEL_65;
        }
        WTF::StringImpl::destroy(v47, this);
        v71 = 1;
        v72 = DWORD2(v165);
        goto LABEL_138;
      }
      v131 = JSC::VM::hasExceptionsAfterHandlingTraps(v44);
      v46 = v197;
      if ((v131 & 1) == 0)
        goto LABEL_61;
      DWORD2(v165) = 1;
      v197 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::destroy(v46, this);
          v72 = DWORD2(v165);
          if (!DWORD2(v165))
          {
            v46 = (WTF::StringImpl *)v165;
            goto LABEL_62;
          }
LABEL_357:
          v71 = 0;
          *(_DWORD *)(a3 + 232) = 1;
LABEL_138:
          if (v72 != -1)
            ((void (*)(__int128 *, __int128 *))off_1E334B060[v72])(&v154, &v165);
          if ((v71 & 1) == 0)
            goto LABEL_294;
          goto LABEL_66;
        }
        *(_DWORD *)v46 -= 2;
      }
      v72 = 1;
      goto LABEL_357;
    }
    v45 = *(_QWORD *)(v43 + 8);
    if ((v45 & 1) != 0)
    {
      v45 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v43, a2);
      if (!v45)
        goto LABEL_58;
    }
    else if (!v45)
    {
LABEL_58:
      v197 = (WTF::StringImpl *)v45;
      goto LABEL_59;
    }
    *(_DWORD *)v45 += 2;
    goto LABEL_58;
  }
LABEL_66:
  WTF::AtomStringImpl::addLiteral();
  v48 = (WTF::StringImpl *)v165;
  v49 = JSC::JSObject::get(Object, a2, v165);
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, this);
    else
      *(_DWORD *)v48 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    goto LABEL_368;
  if (v49 != 10)
  {
    *(_QWORD *)&v154 = v49;
    v50 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v49 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v49 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v154, a2);
LABEL_77:
      if (!*((_DWORD *)v50 + 20))
      {
        v52 = v197;
LABEL_79:
        DWORD2(v165) = 0;
LABEL_80:
        *(_QWORD *)&v165 = 0;
        v53 = v177[1];
        v177[1] = v52;
        if (!v53)
        {
LABEL_83:
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v154, (WTF::StringImpl *)&v165);
          goto LABEL_84;
        }
        if (*(_DWORD *)v53 != 2)
        {
          *(_DWORD *)v53 -= 2;
          goto LABEL_83;
        }
        WTF::StringImpl::destroy(v53, this);
        v73 = 1;
        v74 = DWORD2(v165);
        goto LABEL_143;
      }
      v132 = JSC::VM::hasExceptionsAfterHandlingTraps(v50);
      v52 = v197;
      if ((v132 & 1) == 0)
        goto LABEL_79;
      DWORD2(v165) = 1;
      v197 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::destroy(v52, this);
          v74 = DWORD2(v165);
          if (!DWORD2(v165))
          {
            v52 = (WTF::StringImpl *)v165;
            goto LABEL_80;
          }
LABEL_363:
          v73 = 0;
          *(_DWORD *)(a3 + 232) = 1;
LABEL_143:
          if (v74 != -1)
            ((void (*)(__int128 *, __int128 *))off_1E334B060[v74])(&v154, &v165);
          if ((v73 & 1) == 0)
            goto LABEL_294;
          goto LABEL_84;
        }
        *(_DWORD *)v52 -= 2;
      }
      v74 = 1;
      goto LABEL_363;
    }
    v51 = *(_QWORD *)(v49 + 8);
    if ((v51 & 1) != 0)
    {
      v51 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v49, a2);
      if (!v51)
        goto LABEL_76;
    }
    else if (!v51)
    {
LABEL_76:
      v197 = (WTF::StringImpl *)v51;
      goto LABEL_77;
    }
    *(_DWORD *)v51 += 2;
    goto LABEL_76;
  }
LABEL_84:
  WTF::AtomStringImpl::addLiteral();
  v54 = (WTF::StringImpl *)v165;
  v56 = JSC::JSObject::get(Object, a2, v165);
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v55);
    else
      *(_DWORD *)v54 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    goto LABEL_368;
  if (v56 != 10)
  {
    v199 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v56 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_97:
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v199, "activationState", 16, "ApplePayPaymentPass", 20, "ApplePayPaymentPassActivationState", 35);
LABEL_98:
      DWORD2(v167) = 1;
      goto LABEL_274;
    }
    if ((v56 & 0xFFFE000000000002) != 0)
      goto LABEL_173;
    v57 = JSC::JSCell::getObject((JSC::JSCell *)v56);
    if (!v57)
      goto LABEL_173;
    v58 = (JSC::Structure *)v57;
    WTF::AtomStringImpl::addLiteral();
    v59 = (WTF::StringImpl *)v165;
    v60 = JSC::JSObject::get(v58, a2, v165);
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, this);
      else
        *(_DWORD *)v59 -= 2;
    }
    if (*((_DWORD *)v199 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v199))
      goto LABEL_98;
    if (v60 == 10)
      goto LABEL_97;
    v61 = *((_QWORD *)a2 + 7);
    v197 = (WTF::StringImpl *)v61;
    *(_QWORD *)&v165 = v60;
    if ((v60 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v60 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v165, a2);
      v62 = v154;
      if ((_QWORD)v154)
        goto LABEL_105;
      goto LABEL_172;
    }
    v62 = *(_QWORD *)(v60 + 8);
    if ((v62 & 1) != 0)
    {
      v62 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v60, a2);
      if (!v62)
      {
LABEL_104:
        *(_QWORD *)&v154 = v62;
        if (v62)
        {
LABEL_105:
          v63 = *(const char **)(v62 + 8);
          v64 = *(_DWORD *)(v62 + 4);
          v65 = ((unint64_t)*(unsigned int *)(v62 + 16) >> 2) & 1;
          v66 = v65 << 32;
          v67 = v64 != 9;
          if (v63 != "activated" && v64 == 9)
          {
            if ((_DWORD)v65)
            {
              if (*v63 != 97 || *(_DWORD *)(v63 + 1) != 1986622563 || *(_DWORD *)(v63 + 5) != 1684370529)
              {
                v67 = 0;
LABEL_112:
                v68 = 18;
                v66 = 0x100000000;
                goto LABEL_113;
              }
LABEL_149:
              v75 = &WebCore::parseEnumerationFromString<WebCore::ApplePayPaymentPass::ActivationState>(WTF::String const&)::mappings;
              goto LABEL_167;
            }
            if (*(_WORD *)v63 == 97)
            {
              v79 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v63 + 2), (int16x8_t)xmmword_1968DCC60);
              v79.i16[0] = vminvq_u16(v79);
              v67 = v79.i8[0];
              if (v79.i32[0])
                goto LABEL_149;
            }
            else
            {
              v67 = 0;
            }
            v68 = 18;
LABEL_113:
            if (v63 == "suspended" || v67)
            {
              if (v64 != 9 || v63 != "suspended")
                goto LABEL_189;
            }
            else if (v68)
            {
              if (v66)
              {
                if (*v63 != 115 || *(_DWORD *)(v63 + 1) != 1701868405 || *(_DWORD *)(v63 + 5) != 1684366446)
                {
LABEL_189:
                  v77 = 0;
LABEL_190:
                  *(_QWORD *)&v154 = 0;
                  if (*(_DWORD *)v62 == 2)
                  {
                    v129 = v77;
                    WTF::StringImpl::destroy((WTF::StringImpl *)v62, this);
                    v77 = v129;
                  }
                  else
                  {
                    *(_DWORD *)v62 -= 2;
                  }
LABEL_192:
                  if (*(_DWORD *)(v61 + 80))
                  {
                    v135 = (JSC::VM *)v61;
                    v136 = v77;
                    v137 = JSC::VM::hasExceptionsAfterHandlingTraps(v135);
                    v77 = v136;
                    if ((v137 & 1) != 0)
                      goto LABEL_98;
                  }
                  v153 = v77;
                  if (HIDWORD(v77))
                  {
                    WTF::AtomStringImpl::addLiteral();
                    v81 = (WTF::StringImpl *)v165;
                    v83 = JSC::JSObject::get(v58, a2, v165);
                    if (v81)
                    {
                      if (*(_DWORD *)v81 == 2)
                        WTF::StringImpl::destroy(v81, v82);
                      else
                        *(_DWORD *)v81 -= 2;
                    }
                    if (*((_DWORD *)v199 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v199))
                      goto LABEL_98;
                    if (v83 == 10)
                    {
                      v84 = 0;
                      goto LABEL_211;
                    }
                    *(_QWORD *)&v165 = v83;
                    v85 = (JSC::VM *)*((_QWORD *)a2 + 7);
                    if ((v83 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v83 + 5) != 2)
                    {
                      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v165, a2);
LABEL_206:
                      if (!*((_DWORD *)v85 + 20))
                      {
                        v84 = v197;
LABEL_208:
                        DWORD2(v154) = 0;
LABEL_209:
                        v87 = 0;
                        *(_QWORD *)&v154 = 0;
                        v88 = 1;
                        goto LABEL_210;
                      }
                      v138 = JSC::VM::hasExceptionsAfterHandlingTraps(v85);
                      v84 = v197;
                      if ((v138 & 1) == 0)
                        goto LABEL_208;
                      v87 = 1;
                      DWORD2(v154) = 1;
                      v197 = 0;
                      if (v84)
                      {
                        if (*(_DWORD *)v84 == 2)
                        {
                          WTF::StringImpl::destroy(v84, v139);
                          v87 = DWORD2(v154);
                          if (!DWORD2(v154))
                          {
                            v84 = (WTF::StringImpl *)v154;
                            goto LABEL_209;
                          }
                          DWORD2(v167) = 1;
                          if (DWORD2(v154) == -1)
                            goto LABEL_274;
                          v84 = 0;
                          v88 = 0;
LABEL_210:
                          ((void (*)(WTF::StringImpl **, __int128 *))off_1E334B060[v87])(&v197, &v154);
                          if (!v88)
                          {
                            v101 = 0;
                            goto LABEL_268;
                          }
LABEL_211:
                          WTF::AtomStringImpl::addLiteral();
                          v89 = (WTF::StringImpl *)v154;
                          v91 = JSC::JSObject::get(v58, a2, v154);
                          if (v89)
                          {
                            if (*(_DWORD *)v89 == 2)
                              WTF::StringImpl::destroy(v89, v90);
                            else
                              *(_DWORD *)v89 -= 2;
                          }
                          if (*((_DWORD *)v199 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v199))
                          {
                            v101 = 0;
                            DWORD2(v167) = 1;
                            goto LABEL_268;
                          }
                          if (v91 == 10)
                          {
                            v92 = v84;
                            v152 = 0;
                            goto LABEL_229;
                          }
                          v197 = (WTF::StringImpl *)v91;
                          v93 = (JSC::VM *)*((_QWORD *)a2 + 7);
                          if ((v91 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v91 + 5) != 2)
                          {
                            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v197, a2);
LABEL_223:
                            if (*((_DWORD *)v93 + 20))
                            {
                              v140 = JSC::VM::hasExceptionsAfterHandlingTraps(v93);
                              v95 = (WTF::StringImpl *)v201[0];
                              if ((v140 & 1) != 0)
                              {
                                v96 = 1;
                                DWORD2(v154) = 1;
                                v201[0] = 0;
                                if (v95)
                                {
                                  if (*(_DWORD *)v95 == 2)
                                  {
                                    WTF::StringImpl::destroy(v95, v141);
                                    v96 = DWORD2(v154);
                                    if (DWORD2(v154))
                                    {
                                      DWORD2(v167) = 1;
                                      if (DWORD2(v154) == -1)
                                      {
                                        v101 = 0;
                                        goto LABEL_268;
                                      }
                                      v95 = 0;
                                      v97 = 0;
                                      goto LABEL_227;
                                    }
                                    v95 = (WTF::StringImpl *)v154;
                                    goto LABEL_226;
                                  }
                                  *(_DWORD *)v95 -= 2;
                                }
                                v95 = 0;
                                v97 = 0;
                                DWORD2(v167) = 1;
                                goto LABEL_227;
                              }
                            }
                            else
                            {
                              v95 = (WTF::StringImpl *)v201[0];
                            }
                            DWORD2(v154) = 0;
LABEL_226:
                            v96 = 0;
                            *(_QWORD *)&v154 = 0;
                            v97 = 1;
LABEL_227:
                            ((void (*)(WTF::StringImpl **, __int128 *))off_1E334B060[v96])(&v197, &v154);
                            if (!v97)
                            {
                              v101 = 0;
                              if (!v95)
                                goto LABEL_268;
                              goto LABEL_266;
                            }
                            v152 = v95;
                            v92 = v84;
LABEL_229:
                            WTF::AtomStringImpl::addLiteral();
                            v98 = (WTF::StringImpl *)v154;
                            v100 = JSC::JSObject::get(v58, a2, v154);
                            if (v98)
                            {
                              if (*(_DWORD *)v98 == 2)
                                WTF::StringImpl::destroy(v98, v99);
                              else
                                *(_DWORD *)v98 -= 2;
                            }
                            if (*((_DWORD *)v199 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v199))
                            {
                              v101 = 0;
                              DWORD2(v167) = 1;
                              v84 = v92;
LABEL_235:
                              v95 = v152;
                              if (!v152)
                                goto LABEL_268;
                              goto LABEL_266;
                            }
                            v84 = v92;
                            if (v100 == 10)
                            {
                              WebCore::throwRequiredMemberTypeError((int)a2, (int)&v199, "primaryAccountIdentifier", 25, "ApplePayPaymentPass", 20, "DOMString", 10);
                              v101 = 0;
                              DWORD2(v167) = 1;
                              goto LABEL_235;
                            }
                            v197 = (WTF::StringImpl *)v100;
                            v102 = (JSC::VM *)*((_QWORD *)a2 + 7);
                            v95 = v152;
                            if ((v100 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v100 + 5) != 2)
                            {
                              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v197, a2);
LABEL_243:
                              if (*((_DWORD *)v102 + 20))
                              {
                                v142 = JSC::VM::hasExceptionsAfterHandlingTraps(v102);
                                v101 = (WTF::StringImpl *)v201[0];
                                if (v142)
                                {
                                  v107 = 1;
                                  DWORD2(v154) = 1;
                                  v201[0] = 0;
                                  if (v101)
                                  {
                                    if (*(_DWORD *)v101 == 2)
                                      WTF::StringImpl::destroy(v101, v143);
                                    else
                                      *(_DWORD *)v101 -= 2;
                                  }
                                  v101 = 0;
                                  DWORD2(v167) = 1;
                                  v95 = v152;
LABEL_265:
                                  ((void (*)(WTF::StringImpl **, __int128 *))off_1E334B060[v107])(&v197, &v154);
                                  if (!v95)
                                    goto LABEL_268;
LABEL_266:
                                  if (*(_DWORD *)v95 == 2)
                                    WTF::StringImpl::destroy(v95, this);
                                  else
                                    *(_DWORD *)v95 -= 2;
LABEL_268:
                                  if (v84)
                                  {
                                    if (*(_DWORD *)v84 == 2)
                                    {
                                      WTF::StringImpl::destroy(v84, this);
                                      if (!v101)
                                        goto LABEL_274;
                                      goto LABEL_272;
                                    }
                                    *(_DWORD *)v84 -= 2;
                                  }
                                  if (!v101)
                                    goto LABEL_274;
LABEL_272:
                                  if (*(_DWORD *)v101 == 2)
                                    WTF::StringImpl::destroy(v101, this);
                                  else
                                    *(_DWORD *)v101 -= 2;
LABEL_274:
                                  v113 = DWORD2(v167);
                                  if (DWORD2(v167))
                                  {
                                    *(_DWORD *)(a3 + 232) = 1;
                                    v117 = v113;
                                  }
                                  else
                                  {
                                    v114 = v165;
                                    v115 = v166;
                                    v165 = 0u;
                                    v166 = 0u;
                                    v116 = v167;
                                    v117 = v182;
                                    if (!v182)
                                    {
                                      v179 = v114;
                                      v180 = v115;
                                      v181 = v167;
                                      v182 = 1;
LABEL_293:
                                      ((void (*)(__int128 *, __int128 *))off_1E334B290[v117])(&v154, &v165);
                                      if (v113)
                                        goto LABEL_294;
                                      goto LABEL_306;
                                    }
                                    v118 = (WTF::StringImpl *)v179;
                                    *(_QWORD *)&v179 = v114;
                                    if (v118)
                                    {
                                      if (*(_DWORD *)v118 == 2)
                                        WTF::StringImpl::destroy(v118, this);
                                      else
                                        *(_DWORD *)v118 -= 2;
                                    }
                                    v119 = (WTF::StringImpl *)*((_QWORD *)&v179 + 1);
                                    *((_QWORD *)&v179 + 1) = *((_QWORD *)&v114 + 1);
                                    if (v119)
                                    {
                                      if (*(_DWORD *)v119 == 2)
                                        WTF::StringImpl::destroy(v119, this);
                                      else
                                        *(_DWORD *)v119 -= 2;
                                    }
                                    v120 = (WTF::StringImpl *)v180;
                                    *(_QWORD *)&v180 = v115;
                                    if (v120)
                                    {
                                      if (*(_DWORD *)v120 == 2)
                                        WTF::StringImpl::destroy(v120, this);
                                      else
                                        *(_DWORD *)v120 -= 2;
                                    }
                                    v121 = (WTF::StringImpl *)*((_QWORD *)&v180 + 1);
                                    *((_QWORD *)&v180 + 1) = *((_QWORD *)&v115 + 1);
                                    if (v121)
                                    {
                                      if (*(_DWORD *)v121 == 2)
                                        WTF::StringImpl::destroy(v121, this);
                                      else
                                        *(_DWORD *)v121 -= 2;
                                    }
                                    v181 = v116;
                                    v117 = DWORD2(v167);
                                  }
                                  if (v117 == -1)
                                  {
                                    if (v113)
                                      goto LABEL_294;
                                    goto LABEL_306;
                                  }
                                  goto LABEL_293;
                                }
                                v95 = v152;
                              }
                              else
                              {
                                v101 = (WTF::StringImpl *)v201[0];
                              }
                              DWORD2(v154) = 0;
                              *(_QWORD *)&v154 = 0;
                              WTF::AtomStringImpl::addLiteral();
                              v104 = v197;
                              v106 = JSC::JSObject::get(v58, a2, (unint64_t)v197);
                              if (v104)
                              {
                                if (*(_DWORD *)v104 == 2)
                                  WTF::StringImpl::destroy(v104, v105);
                                else
                                  *(_DWORD *)v104 -= 2;
                              }
                              if (*((_DWORD *)v199 + 20)
                                && JSC::VM::hasExceptionsAfterHandlingTraps(v199))
                              {
                                goto LABEL_251;
                              }
                              if (v106 == 10)
                              {
                                WebCore::throwRequiredMemberTypeError((int)a2, (int)&v199, "primaryAccountNumberSuffix", 27, "ApplePayPaymentPass", 20, "DOMString", 10);
LABEL_251:
                                v107 = 0;
                                DWORD2(v167) = 1;
                                goto LABEL_265;
                              }
                              v201[0] = v106;
                              v108 = (JSC::VM *)*((_QWORD *)a2 + 7);
                              if ((v106 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v106 + 5) != 2)
                              {
                                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v201, a2);
LABEL_261:
                                if (*((_DWORD *)v108 + 20))
                                {
                                  v145 = JSC::VM::hasExceptionsAfterHandlingTraps(v108);
                                  v110 = v200;
                                  if (v145)
                                  {
                                    v198 = 1;
                                    v200 = 0;
                                    if (v110)
                                    {
                                      if (*(_DWORD *)v110 == 2)
                                        WTF::StringImpl::destroy(v110, v144);
                                      else
                                        *(_DWORD *)v110 -= 2;
                                    }
                                    v111 = 1;
                                    v112 = 1;
                                    v95 = v152;
                                    goto LABEL_264;
                                  }
                                  v95 = v152;
                                }
                                else
                                {
                                  v110 = v200;
                                }
                                v111 = 0;
                                v112 = 0;
                                v198 = 0;
                                v197 = 0;
                                *(_QWORD *)&v165 = v101;
                                *((_QWORD *)&v165 + 1) = v110;
                                *(_QWORD *)&v166 = v84;
                                *((_QWORD *)&v166 + 1) = v95;
                                LODWORD(v167) = v153;
                                v95 = 0;
                                v84 = 0;
                                v101 = 0;
LABEL_264:
                                DWORD2(v167) = v112;
                                ((void (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v111])(v201, &v197);
                                v107 = 0;
                                goto LABEL_265;
                              }
                              v109 = *(WTF::StringImpl **)(v106 + 8);
                              if ((v109 & 1) != 0)
                              {
                                v109 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v106, a2);
                                if (!v109)
                                  goto LABEL_260;
                              }
                              else if (!v109)
                              {
LABEL_260:
                                v200 = v109;
                                goto LABEL_261;
                              }
                              *(_DWORD *)v109 += 2;
                              goto LABEL_260;
                            }
                            v103 = *(_DWORD **)(v100 + 8);
                            if ((v103 & 1) != 0)
                            {
                              v103 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v100, a2);
                              if (!v103)
                                goto LABEL_242;
                            }
                            else if (!v103)
                            {
LABEL_242:
                              v201[0] = v103;
                              goto LABEL_243;
                            }
                            *v103 += 2;
                            goto LABEL_242;
                          }
                          v94 = *(_DWORD **)(v91 + 8);
                          if ((v94 & 1) != 0)
                          {
                            v94 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v91, a2);
                            if (!v94)
                              goto LABEL_222;
                          }
                          else if (!v94)
                          {
LABEL_222:
                            v201[0] = v94;
                            goto LABEL_223;
                          }
                          *v94 += 2;
                          goto LABEL_222;
                        }
                        *(_DWORD *)v84 -= 2;
                      }
                      v84 = 0;
                      v88 = 0;
                      DWORD2(v167) = 1;
                      goto LABEL_210;
                    }
                    v86 = *(_QWORD *)(v83 + 8);
                    if ((v86 & 1) != 0)
                    {
                      v86 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v83, a2);
                      if (!v86)
                        goto LABEL_205;
                    }
                    else if (!v86)
                    {
LABEL_205:
                      v197 = (WTF::StringImpl *)v86;
                      goto LABEL_206;
                    }
                    *(_DWORD *)v86 += 2;
                    goto LABEL_205;
                  }
LABEL_173:
                  JSC::throwTypeError();
                  goto LABEL_98;
                }
              }
              else
              {
                if (*(_WORD *)v63 != 115)
                  goto LABEL_189;
                v80 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v63 + 2), (int16x8_t)xmmword_1968DCCF0);
                v80.i16[0] = vminvq_u16(v80);
                if (!v80.i32[0])
                  goto LABEL_189;
              }
            }
            v75 = &off_1E33493F0;
LABEL_167:
            v77 = *((unsigned int *)v75 + 4) | 0x100000000;
            goto LABEL_190;
          }
          if (v63 == "activated" && v64 == 9)
            goto LABEL_149;
          if (v63 != "activating" && v64 == 10)
          {
            if ((_DWORD)v65)
            {
              if (*v63 == 97
                && *(_QWORD *)(v63 + 1) == 0x6E69746176697463
                && *(_QWORD *)(v63 + 2) == 0x676E697461766974)
              {
                v75 = &off_1E33493A8;
                goto LABEL_167;
              }
              goto LABEL_112;
            }
            if (*(_WORD *)v63 == 97)
            {
              v133 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v63 + 2), (int16x8_t)xmmword_1968DCC70);
              v133.i16[0] = vminvq_u16(v133);
              if (v133.i32[0])
              {
                v134 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v63 + 4), (int16x8_t)xmmword_1968DCC80);
                v134.i16[0] = vminvq_u16(v134);
                if (v134.i32[0])
                {
LABEL_372:
                  v75 = &off_1E33493A8;
                  goto LABEL_167;
                }
              }
            }
LABEL_439:
            v68 = 18;
            goto LABEL_113;
          }
          if (v63 == "activating" && v64 == 10)
            goto LABEL_372;
          if (v63 != "deactivated" && v64 == 11)
          {
            if (!(_DWORD)v65)
            {
              if (*(_WORD *)v63 != 100)
                goto LABEL_439;
              v146 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v63 + 2), (int16x8_t)xmmword_1968DCC90);
              v146.i16[0] = vminvq_u16(v146);
              if (!v146.i32[0])
                goto LABEL_439;
              v147 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v63 + 6), (int16x8_t)xmmword_1968DCC60);
              v147.i16[0] = vminvq_u16(v147);
              if (!v147.i32[0])
                goto LABEL_439;
LABEL_435:
              v75 = &off_1E33493C0;
              goto LABEL_167;
            }
            if (*v63 == 100
              && *(_QWORD *)(v63 + 1) == 0x7461766974636165
              && *(_QWORD *)(v63 + 3) == 0x6465746176697463)
            {
              goto LABEL_435;
            }
LABEL_450:
            v68 = 18;
            v66 = 0x100000000;
            goto LABEL_113;
          }
          if (v63 == "deactivated" && v64 == 11)
            goto LABEL_435;
          if (v63 == "requiresActivation" || v64 != 18)
          {
            v68 = *(_DWORD *)(v62 + 4);
            if (v63 == "requiresActivation" && v64 == 18)
            {
              v75 = &off_1E33493D8;
              goto LABEL_167;
            }
            goto LABEL_113;
          }
          if ((_DWORD)v65)
          {
            if (*v63 != 114)
              goto LABEL_450;
            v148 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v63 + 2), (int8x16_t)xmmword_1968DCCB0), vceqq_s8(*(int8x16_t *)(v63 + 1), (int8x16_t)xmmword_1968DCCA0));
            v148.i8[0] = vminvq_u8(v148);
            if (!v148.i32[0])
              goto LABEL_450;
          }
          else
          {
            if (*(_WORD *)v63 != 114)
              goto LABEL_439;
            v149 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v63 + 2), (int16x8_t)xmmword_1968DCCC0);
            v149.i16[0] = vminvq_u16(v149);
            if (!v149.i32[0])
              goto LABEL_439;
            v150 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v63 + 4), (int16x8_t)xmmword_1968DCCD0);
            v150.i16[0] = vminvq_u16(v150);
            if (!v150.i32[0])
              goto LABEL_439;
            v151 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v63 + 20), (int16x8_t)xmmword_1968DCCE0);
            v151.i16[0] = vminvq_u16(v151);
            if (!v151.i32[0])
              goto LABEL_439;
          }
          v75 = &off_1E33493D8;
          goto LABEL_167;
        }
LABEL_172:
        v77 = 0;
        goto LABEL_192;
      }
    }
    else if (!v62)
    {
      goto LABEL_104;
    }
    *(_DWORD *)v62 += 2;
    goto LABEL_104;
  }
LABEL_306:
  WTF::AtomStringImpl::addLiteral();
  v125 = (WTF::StringImpl *)v165;
  v126 = JSC::JSObject::get(Object, a2, v165);
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, this);
    else
      *(_DWORD *)v125 -= 2;
  }
  if (*((_DWORD *)v196 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v196) & 1) != 0)
    goto LABEL_368;
  if (v126 != 10)
  {
    *(_QWORD *)&v165 = *((_QWORD *)a2 + 7);
    v127 = (JSC::VM *)v165;
    v128 = WebCore::parseEnumeration<WebCore::ApplePayPaymentMethodType>(a2, v126);
    if (*((_DWORD *)v127 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v127) & 1) != 0)
      goto LABEL_368;
    if ((v128 & 0xFF00000000) == 0)
    {
      JSC::throwTypeError();
LABEL_368:
      *(_DWORD *)(a3 + 232) = 1;
LABEL_294:
      v122 = v195;
      v195 = 0;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
          WTF::StringImpl::destroy(v122, this);
        else
          *(_DWORD *)v122 -= 2;
      }
      goto LABEL_297;
    }
    LODWORD(v178) = v128;
    BYTE4(v178) = 1;
  }
LABEL_6:
  v8 = *(_OWORD *)v177;
  v177[0] = 0;
  v177[1] = 0;
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v178;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  if (v182)
  {
    v9 = v179;
    v179 = 0u;
    *(_OWORD *)(a3 + 24) = v9;
    v10 = v180;
    v180 = 0u;
    *(_OWORD *)(a3 + 40) = v10;
    *(_DWORD *)(a3 + 56) = v181;
    *(_BYTE *)(a3 + 64) = 1;
  }
  *(_BYTE *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 216) = 0;
  if (v194)
  {
    v11 = v183;
    v183 = 0u;
    *(_OWORD *)(a3 + 72) = v11;
    v12 = v184;
    v184 = 0u;
    *(_OWORD *)(a3 + 88) = v12;
    v13 = v185;
    v185 = 0u;
    *(_OWORD *)(a3 + 104) = v13;
    v14 = v186;
    v186 = 0u;
    *(_OWORD *)(a3 + 120) = v14;
    *(_BYTE *)(a3 + 136) = 0;
    *(_BYTE *)(a3 + 152) = 0;
    if (v189)
    {
      v15 = v187;
      v187 = 0;
      *(_QWORD *)(a3 + 136) = v15;
      v16 = v188;
      v188 = 0;
      *(_QWORD *)(a3 + 144) = v16;
      *(_BYTE *)(a3 + 152) = 1;
    }
    v17 = v190;
    v18 = v191;
    v190 = 0uLL;
    v191 = 0uLL;
    *(_OWORD *)(a3 + 160) = v17;
    *(_OWORD *)(a3 + 176) = v18;
    v19 = v192;
    v192 = 0uLL;
    *(_OWORD *)(a3 + 192) = v19;
    v20 = v193;
    v193 = 0;
    *(_QWORD *)(a3 + 208) = v20;
    *(_BYTE *)(a3 + 216) = 1;
  }
  *(_QWORD *)(a3 + 224) = v195;
  *(_DWORD *)(a3 + 232) = 0;
  v195 = 0;
LABEL_297:
  if (v194)
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)&v183, this);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v179, this);
  v124 = v177[1];
  v177[1] = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, v123);
    else
      *(_DWORD *)v124 -= 2;
  }
  result = v177[0];
  v177[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v123);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

