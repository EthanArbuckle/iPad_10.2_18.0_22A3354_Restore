uint64_t *WebCore::BifurcatedGraphicsContext::beginTransparencyLayer(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 712);
  (*(void (**)(_QWORD, float))(**(_QWORD **)(a1 + 720) + 592))(*(_QWORD *)(a1 + 720), 1.0);
  (*(void (**)(_QWORD, float))(**(_QWORD **)(a1 + 728) + 592))(*(_QWORD *)(a1 + 728), 1.0);
  return WebCore::GraphicsContext::save(a1, 2);
}

uint64_t WebCore::BifurcatedGraphicsContext::endTransparencyLayer(WebCore::BifurcatedGraphicsContext *this)
{
  --*((_DWORD *)this + 178);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 608))(*((_QWORD *)this + 90));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 91) + 608))(*((_QWORD *)this + 91));
  return WebCore::GraphicsContext::restore((uint64_t)this, (void *)2);
}

uint64_t WebCore::BifurcatedGraphicsContext::applyDeviceScaleFactor(WebCore::BifurcatedGraphicsContext *this, float a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 680))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 91) + 680))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::fillRect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 216))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 216))(*(_QWORD *)(a1 + 728), a2, a3);
}

{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 240))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 240))(*(_QWORD *)(a1 + 728), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::fillRect(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2, const WebCore::Color *a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 224))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *, const WebCore::Color *))(**((_QWORD **)this + 91)
                                                                                               + 224))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::fillRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 232))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 232))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5);
}

uint64_t WebCore::BifurcatedGraphicsContext::fillRoundedRectImpl(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRoundedRect *a2, const WebCore::Color *a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 256))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRoundedRect *, const WebCore::Color *))(**((_QWORD **)this + 91) + 256))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::fillRectWithRoundedHole(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2, const WebCore::FloatRoundedRect *a3, const WebCore::Color *a4)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 272))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *, const WebCore::FloatRoundedRect *, const WebCore::Color *))(**((_QWORD **)this + 91) + 272))(*((_QWORD *)this + 91), a2, a3, a4);
}

uint64_t WebCore::BifurcatedGraphicsContext::clearRect(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 280))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *))(**((_QWORD **)this + 91) + 280))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::strokeRect(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2, float a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 288))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *, float))(**((_QWORD **)this + 91) + 288))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::fillEllipse(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 200))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *))(**((_QWORD **)this + 91) + 200))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::strokeEllipse(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 208))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *))(**((_QWORD **)this + 91) + 208))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::isCALayerContext(WebCore::BifurcatedGraphicsContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 128))(*((_QWORD *)this + 90));
}

uint64_t WebCore::BifurcatedGraphicsContext::renderingMode(WebCore::BifurcatedGraphicsContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 136))(*((_QWORD *)this + 90));
}

uint64_t WebCore::BifurcatedGraphicsContext::clip(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 456))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *))(**((_QWORD **)this + 91) + 456))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::clipRoundedRect(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRoundedRect *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 464))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRoundedRect *))(**((_QWORD **)this + 91) + 464))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::clipOut(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 472))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *))(**((_QWORD **)this + 91) + 472))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::clipOutRoundedRect(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRoundedRect *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 488))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRoundedRect *))(**((_QWORD **)this + 91) + 488))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::clipOut(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 480))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 480))(*(_QWORD *)(a1 + 728), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::clipPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 496))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 496))(*(_QWORD *)(a1 + 728), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::clipToImageBuffer(WebCore::BifurcatedGraphicsContext *this, WebCore::ImageBuffer *a2, const WebCore::FloatRect *a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 504))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, WebCore::ImageBuffer *, const WebCore::FloatRect *))(**((_QWORD **)this + 91)
                                                                                               + 504))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::clipBounds(WebCore::BifurcatedGraphicsContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 512))(*((_QWORD *)this + 90));
}

uint64_t WebCore::BifurcatedGraphicsContext::resetClip(WebCore::BifurcatedGraphicsContext *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 448))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 448))(*((_QWORD *)this + 91));
}

uint64_t WebCore::BifurcatedGraphicsContext::setLineCap(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 296))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 296))(*(_QWORD *)(a1 + 728), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::setLineDash(uint64_t a1, uint64_t a2, float a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 304))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 728) + 304))(*(_QWORD *)(a1 + 728), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::setLineJoin(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 312))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 312))(*(_QWORD *)(a1 + 728), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::setMiterLimit(WebCore::BifurcatedGraphicsContext *this, float a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 320))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 91) + 320))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawNativeImageInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;

  v9 = *(_QWORD *)&a5 & 0xFFFFFFLL;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 720) + 720))(*(_QWORD *)(a1 + 720), a2, a3, a4, *(_QWORD *)&a5 & 0xFFFFFFLL);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 720))(*(_QWORD *)(a1 + 728), a2, a3, a4, v9);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawSystemImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 352))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 352))(*(_QWORD *)(a1 + 728), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawControlPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 424))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, float))(**(_QWORD **)(a1 + 728) + 424))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawPattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v15;

  v15 = *(_QWORD *)&a8 & 0xFFFFFFLL;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 720)
                                                                                                + 408))(*(_QWORD *)(a1 + 720), a2, a3, a4, a5, a6, a7, *(_QWORD *)&a8 & 0xFFFFFFLL);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 408))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5, a6, a7, v15);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)&a5 & 0xFFFFFFLL;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 720) + 360))(*(_QWORD *)(a1 + 720), a2, a3, a4, *(_QWORD *)&a5 & 0xFFFFFFLL);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 360))(*(_QWORD *)(a1 + 728), a2, a3, a4, v9);
  return v10;
}

uint64_t WebCore::BifurcatedGraphicsContext::drawTiledImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t v14;

  v13 = *(_QWORD *)&a7 & 0xFFFFFFLL;
  v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 720)
                                                                                                + 368))(*(_QWORD *)(a1 + 720), a2, a3, a4, a5, a6, *(_QWORD *)&a7 & 0xFFFFFFLL);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 368))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5, a6, v13);
  return v14;
}

uint64_t WebCore::BifurcatedGraphicsContext::drawTiledImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v15;
  uint64_t v16;

  v15 = *(_QWORD *)&a8 & 0xFFFFFFLL;
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 720) + 376))(*(_QWORD *)(a1 + 720), a2, a3, a4, a5, a6, a7, *(_QWORD *)&a8 & 0xFFFFFFLL);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                                + 376))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5, a6, a7, v15);
  return v16;
}

uint64_t WebCore::BifurcatedGraphicsContext::paintFrameForMedia(WebCore::BifurcatedGraphicsContext *this, WebCore::MediaPlayer *a2, const WebCore::FloatRect *a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 432))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, WebCore::MediaPlayer *, const WebCore::FloatRect *))(**((_QWORD **)this + 91)
                                                                                               + 432))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::scale(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatSize *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 632))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatSize *))(**((_QWORD **)this + 91) + 632))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::rotate(WebCore::BifurcatedGraphicsContext *this, float a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 640))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 91) + 640))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::translate(WebCore::BifurcatedGraphicsContext *this, float a2, float a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 648))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, float, float))(**((_QWORD **)this + 91) + 648))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::concatCTM(WebCore::BifurcatedGraphicsContext *this, const WebCore::AffineTransform *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 656))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::AffineTransform *))(**((_QWORD **)this + 91) + 656))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::setCTM(WebCore::BifurcatedGraphicsContext *this, const WebCore::AffineTransform *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 664))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::AffineTransform *))(**((_QWORD **)this + 91) + 664))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::getCTM(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 672))(*(_QWORD *)(a1 + 720));
}

uint64_t WebCore::BifurcatedGraphicsContext::drawFocusRing(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 616))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float))(**(_QWORD **)(a1 + 728) + 616))(*(_QWORD *)(a1 + 728), a2, a3, a4);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawFocusRing(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 624))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float, float))(**(_QWORD **)(a1 + 728) + 624))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5);
}

float WebCore::BifurcatedGraphicsContext::drawText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v12;

  v12 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 520))(*(_QWORD *)(a1 + 720));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 520))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5, a6);
  return v12;
}

uint64_t WebCore::BifurcatedGraphicsContext::drawGlyphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 552))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                                 + 552))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5, a6, a7);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawDecomposedGlyphs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 560))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 560))(*(_QWORD *)(a1 + 728), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawEmphasisMarks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 528))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728)
                                                                                                 + 528))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5, a6, a7);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawBidiText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 536))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 536))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawLinesForText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 568))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(**(_QWORD **)(a1 + 728)
                                                                                               + 568))(*(_QWORD *)(a1 + 728), a2, a3, a4, a5, a6, a7);
}

unsigned int *WebCore::BifurcatedGraphicsContext::drawDotsForDocumentMarker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *result;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE v22[8];
  uint64_t v23;
  _BYTE v24[8];
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 720);
  v24[0] = *(_BYTE *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v25 = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v6 + 576))(v6, a2, v24);
  if ((v25 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v8);
    }
  }
  v9 = *(_QWORD *)(a1 + 728);
  v22[0] = *(_BYTE *)a3;
  v10 = *(_QWORD *)(a3 + 8);
  v23 = v10;
  if ((v10 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v9 + 576))(v9, a2, v22);
  if ((v23 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(result);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, result));
    if (!v21)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v12);
    }
  }
  return result;
}

uint64_t WebCore::BifurcatedGraphicsContext::setURLForRect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 688))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 728) + 688))(*(_QWORD *)(a1 + 728), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::setDestinationForRect(WebCore::BifurcatedGraphicsContext *this, const WTF::String *a2, const WebCore::FloatRect *a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 696))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WTF::String *, const WebCore::FloatRect *))(**((_QWORD **)this + 91)
                                                                                            + 696))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::addDestinationAtPoint(WebCore::BifurcatedGraphicsContext *this, const WTF::String *a2, const WebCore::FloatPoint *a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 704))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WTF::String *, const WebCore::FloatPoint *))(**((_QWORD **)this + 91)
                                                                                             + 704))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::supportsInternalLinks(WebCore::BifurcatedGraphicsContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 712))(*((_QWORD *)this + 90));
}

void WebCore::BifurcatedGraphicsContext::didUpdateState(WebCore::BifurcatedGraphicsContext *this, WebCore::GraphicsContextState *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8[43];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 90);
  LOBYTE(v8[0]) = 0;
  v9 = 0;
  WebCore::GraphicsContextState::mergeLastChanges(v4 + 8, a2, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
  if (v9)
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v8, v5);
  v6 = *((_QWORD *)this + 91);
  LOBYTE(v8[0]) = 0;
  v9 = 0;
  WebCore::GraphicsContextState::mergeLastChanges(v6 + 8, a2, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, v6 + 8);
  if (v9)
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v8, v7);
  *((_DWORD *)a2 + 44) = 0;
}

WTF::StringImpl *WebCore::BifurcatedGraphicsContext::verifyStateSynchronization(WebCore::BifurcatedGraphicsContext *this)
{
  WTF::StringImpl *result;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  BOOL v18;
  float v19;
  BOOL v20;
  float v21;
  BOOL v22;
  BOOL v23;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  BOOL v29;
  float v30;
  float v32;
  BOOL v34;
  float v35;
  float v37;
  float v38;
  BOOL v40;
  float v41;
  float v43;
  BOOL v45;
  float v46;
  float v48;
  float v49;
  BOOL v51;
  float v52;
  float v54;
  BOOL v56;
  float v57;
  float v59;
  float v60;
  BOOL v62;
  float v63;
  float v65;
  BOOL v67;
  float v68;
  float v70;
  float v71;
  BOOL v73;
  float v74;
  float v76;
  BOOL v78;
  float v79;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  char v90;
  int v91;
  __int16 v92;
  int v93;
  float64x2_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  float64x2_t v99;
  double v100;
  double v101;
  double v102;
  double v103;

  (*(void (**)(float64x2_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 90) + 672))(&v99, *((_QWORD *)this + 90), 1);
  result = (WTF::StringImpl *)(*(_QWORD *(**)(float64x2_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 91) + 672))(&v94, *((_QWORD *)this + 91), 1);
  if (!*((_BYTE *)this + 717))
  {
    v3 = v99.f64[0];
    v4 = v94.f64[0];
    if (v3 != v4)
    {
      v26 = vabds_f32(v3, v4);
      v27 = fabsf(v3);
      if (v27 < 1.0 && (float)(v27 * 3.4028e38) < v26)
        goto LABEL_151;
      v29 = (float)(v27 * 1.1755e-38) <= v26 || v27 <= 1.0;
      v30 = v26 / v27;
      if (v29 && v30 > 0.00000011921)
        goto LABEL_151;
      v32 = fabsf(v4);
      if (v32 < 1.0 && (float)(v32 * 3.4028e38) < v26)
        goto LABEL_151;
      v34 = (float)(v32 * 1.1755e-38) <= v26 || v32 <= 1.0;
      v35 = v26 / v32;
      if (v34 && v35 > 0.00000011921)
        goto LABEL_151;
    }
    v5 = v99.f64[1];
    v6 = v94.f64[1];
    if (v5 != v6)
    {
      v37 = vabds_f32(v5, v6);
      v38 = fabsf(v5);
      if (v38 < 1.0 && (float)(v38 * 3.4028e38) < v37)
        goto LABEL_151;
      v40 = (float)(v38 * 1.1755e-38) <= v37 || v38 <= 1.0;
      v41 = v37 / v38;
      if (v40 && v41 > 0.00000011921)
        goto LABEL_151;
      v43 = fabsf(v6);
      if (v43 < 1.0 && (float)(v43 * 3.4028e38) < v37)
        goto LABEL_151;
      v45 = (float)(v43 * 1.1755e-38) <= v37 || v43 <= 1.0;
      v46 = v37 / v43;
      if (v45 && v46 > 0.00000011921)
        goto LABEL_151;
    }
    v7 = v100;
    v8 = v95;
    if (v7 != v8)
    {
      v48 = vabds_f32(v7, v8);
      v49 = fabsf(v7);
      if (v49 < 1.0 && (float)(v49 * 3.4028e38) < v48)
        goto LABEL_151;
      v51 = (float)(v49 * 1.1755e-38) <= v48 || v49 <= 1.0;
      v52 = v48 / v49;
      if (v51 && v52 > 0.00000011921)
        goto LABEL_151;
      v54 = fabsf(v8);
      if (v54 < 1.0 && (float)(v54 * 3.4028e38) < v48)
        goto LABEL_151;
      v56 = (float)(v54 * 1.1755e-38) <= v48 || v54 <= 1.0;
      v57 = v48 / v54;
      if (v56 && v57 > 0.00000011921)
        goto LABEL_151;
    }
    v9 = v101;
    v10 = v96;
    if (v9 != v10)
    {
      v59 = vabds_f32(v9, v10);
      v60 = fabsf(v9);
      if (v60 < 1.0 && (float)(v60 * 3.4028e38) < v59)
        goto LABEL_151;
      v62 = (float)(v60 * 1.1755e-38) <= v59 || v60 <= 1.0;
      v63 = v59 / v60;
      if (v62 && v63 > 0.00000011921)
        goto LABEL_151;
      v65 = fabsf(v10);
      if (v65 < 1.0 && (float)(v65 * 3.4028e38) < v59)
        goto LABEL_151;
      v67 = (float)(v65 * 1.1755e-38) <= v59 || v65 <= 1.0;
      v68 = v59 / v65;
      if (v67 && v68 > 0.00000011921)
        goto LABEL_151;
    }
    v11 = v102;
    v12 = v97;
    if (v11 != v12)
    {
      v70 = vabds_f32(v11, v12);
      v71 = fabsf(v11);
      if (v71 < 1.0 && (float)(v71 * 3.4028e38) < v70)
        goto LABEL_151;
      v73 = (float)(v71 * 1.1755e-38) <= v70 || v71 <= 1.0;
      v74 = v70 / v71;
      if (v73 && v74 > 0.00000011921)
        goto LABEL_151;
      v76 = fabsf(v12);
      if (v76 < 1.0 && (float)(v76 * 3.4028e38) < v70)
        goto LABEL_151;
      v78 = (float)(v76 * 1.1755e-38) <= v70 || v76 <= 1.0;
      v79 = v70 / v76;
      if (v78 && v79 > 0.00000011921)
        goto LABEL_151;
    }
    v13 = v103;
    v14 = v98;
    if (v13 != v14)
    {
      v15 = vabds_f32(v13, v14);
      v16 = fabsf(v13);
      if (v16 < 1.0 && (float)(v16 * 3.4028e38) < v15)
        goto LABEL_151;
      v18 = (float)(v16 * 1.1755e-38) <= v15 || v16 <= 1.0;
      v19 = v15 / v16;
      v20 = v18 && v19 > 0.00000011921;
      if (v20
        || ((v21 = fabsf(v14), v21 < 1.0) ? (v22 = (float)(v21 * 3.4028e38) < v15) : (v22 = 0),
            v22
         || ((float)(v21 * 1.1755e-38) > v15 ? (v23 = v21 <= 1.0) : (v23 = 1),
             (v24 = v15 / v21, v23) ? (v25 = v24 > 0.00000011921) : (v25 = 0),
             v25)))
      {
LABEL_151:
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 1;
        v91 = 0;
        v92 = 0;
        v93 = 0;
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v81 = WTF::TextStream::operator<<();
        WebCore::operator<<(v81, &v99);
        v82 = WTF::TextStream::operator<<();
        WebCore::operator<<(v82, &v94);
        WTF::TextStream::release((WTF::TextStream *)&v87);
        WTF::String::utf8();
        WTFLogAlways();
        if (v86)
        {
          if (*(_DWORD *)v86 == 1)
            WTF::fastFree(v86, v83);
          else
            --*(_DWORD *)v86;
        }
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
            WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v83);
          else
            *(_DWORD *)v85 -= 2;
        }
        v84 = v88;
        v88 = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2)
            WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v83);
          else
            *(_DWORD *)v84 -= 2;
        }
        result = v87;
        v87 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v83);
          else
            *(_DWORD *)result -= 2;
        }
        *((_BYTE *)this + 717) = 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::BitmapImage::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v8 = WTF::fastMalloc((WTF *)0x48);
  v9 = 0;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E340D128;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  if (a1)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      goto LABEL_14;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = a1;
    v14 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    if (!v14)
      goto LABEL_14;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
LABEL_14:
      do
        v12 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v12 + 1, (unsigned int *)v9));
    }
  }
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_WORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E340AC28;
  v10 = WTF::fastMalloc((WTF *)0xF8);
  result = WebCore::BitmapImageSource::BitmapImageSource(v10, v8, a2, a3);
  *(_QWORD *)(v8 + 64) = result;
  *a4 = v8;
  return result;
}

uint64_t WebCore::BitmapImage::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_WORD *)(v4 + 48) = 0;
  *(_QWORD *)v4 = off_1E340AC28;
  v5 = WTF::fastMalloc((WTF *)0x60);
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)v5 = off_1E340E898;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = 0;
  v7 = *a1;
  *a1 = 0;
  *(_QWORD *)(v5 + 32) = v7;
  *(_DWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 44) = 0;
  *(_BYTE *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 60) = 1;
  *(_BYTE *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_BYTE *)(v5 + 88) = 1;
  *(_QWORD *)(v5 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 48) + 24))(*(_QWORD *)(v7 + 48));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 32) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 48));
  *(_BYTE *)(v5 + 88) = result;
  *(_QWORD *)(v4 + 64) = v5;
  *a2 = v4;
  return result;
}

uint64_t *WebCore::BitmapImage::create@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*result)
  {
    v3 = result;
    v4 = WTF::fastMalloc((WTF *)0x48);
    v5 = *v3;
    *v3 = 0;
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_WORD *)(v4 + 48) = 0;
    *(_QWORD *)v4 = off_1E340AC28;
    v6 = WTF::fastMalloc((WTF *)0x60);
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v7 = 0;
    *(_OWORD *)(v7 + 8) = xmmword_19689B170;
    *(_QWORD *)(v7 + 24) = v6;
    *(_QWORD *)v6 = off_1E340E898;
    *(_QWORD *)(v6 + 8) = v7;
    *(_QWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = v5;
    *(_DWORD *)(v6 + 40) = 0;
    *(_BYTE *)(v6 + 44) = 0;
    *(_BYTE *)(v6 + 48) = 0;
    *(_BYTE *)(v6 + 56) = 0;
    *(_BYTE *)(v6 + 60) = 1;
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 72) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *(_BYTE *)(v6 + 88) = 1;
    *(_QWORD *)(v6 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 48) + 24))(*(_QWORD *)(v5 + 48));
    result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 48));
    *(_BYTE *)(v6 + 88) = (_BYTE)result;
    *(_QWORD *)(v4 + 64) = v6;
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t *WebCore::BitmapImage::create@<X0>(CGImageRef *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t IdentifierInternal;
  unsigned __int8 *v5;
  CGImageRef v6;
  unsigned __int8 **v7;
  uint64_t v8;
  uint64_t *result;
  void *v10;
  unsigned __int8 **v11;

  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x196139140);
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  if (!*a1 || CGImageGetWidth(*a1) >> 31 || CGImageGetHeight(*a1) >> 31)
  {
    v7 = 0;
  }
  else
  {
    v5 = (unsigned __int8 *)operator new();
    v6 = *a1;
    *a1 = 0;
    *(_QWORD *)v5 = &off_1E340E810;
    *((_QWORD *)v5 + 1) = v6;
    v7 = (unsigned __int8 **)WTF::fastMalloc((WTF *)0x38);
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v8 = 0;
    *(_OWORD *)(v8 + 8) = xmmword_19689B170;
    *(_QWORD *)(v8 + 24) = v7;
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = (unsigned __int8 *)IdentifierInternal;
    v7[5] = (unsigned __int8 *)1;
    *v7 = (unsigned __int8 *)off_1E340E858;
    v7[1] = (unsigned __int8 *)v8;
    v7[6] = v5;
  }
  v11 = v7;
  result = WebCore::BitmapImage::create((uint64_t *)&v11, a2);
  if (v11)
    return (uint64_t *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v11 + 1, v10);
  return result;
}

void WebCore::BitmapImage::destroyDecodedData(WebCore::BitmapImage *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
  WebCore::Image::invalidateAdapter(this);
}

_QWORD *WebCore::BitmapImage::drawPattern(_QWORD *result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  float v8;
  float v10;
  uint64_t v17;
  float v18;
  int v19;
  float v20;
  int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  WebCore::GraphicsContext *v28;
  void *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  float32x4_t *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  BOOL v70;
  float32x4_t v71;
  uint64_t v72;
  char v73;
  float32x4_t *v74;

  v8 = a4->f32[2];
  if (v8 <= 0.0)
    return result;
  v10 = a4->f32[3];
  if (v10 <= 0.0)
    return result;
  v17 = (uint64_t)result;
  if (!*(_BYTE *)(a2 + 346))
    return WebCore::Image::drawPattern(result, a2, a3, (uint64_t)a4, a5, a6, a7, a8 & 0xFF0FFF);
  v18 = ceilf(v8);
  if (v18 >= 2147500000.0)
  {
    v19 = 0x7FFFFFFF;
  }
  else if (v18 <= -2147500000.0)
  {
    v19 = 0x80000000;
  }
  else
  {
    v19 = (int)v18;
  }
  v20 = ceilf(v10);
  if (v20 >= 2147500000.0)
  {
    v21 = 0x7FFFFFFF;
  }
  else if (v20 <= -2147500000.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v20;
  }
  *(float *)&v72 = (float)v19;
  *((float *)&v72 + 1) = (float)v21;
  v22 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v22 != -1)
  {
    v71.i64[0] = (uint64_t)&v73;
    v74 = &v71;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v74, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (*(_QWORD *(**)(float32x4_t **__return_ptr, uint64_t, uint64_t *, uint64_t *, _QWORD, _QWORD, float))(*(_QWORD *)a2 + 328))(&v74, a2, &v72, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0, 0, 1.0);
  if (!v74)
    return result;
  v24 = *(_QWORD *)(v17 + 32);
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
      ++*(_DWORD *)(v25 + 8);
    *(_QWORD *)(v17 + 32) = 0;
    do
    {
      v26 = __ldaxr((unsigned int *)v24);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v24));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v24);
      WTF::fastFree((WTF *)v24, v23);
    }
  }
  else
  {
    v25 = 0;
    *(_QWORD *)(v17 + 32) = 0;
  }
  v71.i64[0] = 0;
  v71.i64[1] = v74[1].i64[0];
  v28 = (WebCore::GraphicsContext *)(*(uint64_t (**)(float32x4_t *))(v74->i64[0] + 16))(v74);
  WebCore::BitmapImage::draw(v17, v28, &v71, a4, a8 & 0xFF0F1F | 0x20);
  if (v25)
  {
    v30 = *(_QWORD *)(v25 + 16);
    if (v30)
      goto LABEL_115;
    v30 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = v25;
    v67 = *(unsigned int **)(v25 + 16);
    *(_QWORD *)(v25 + 16) = v30;
    if (!v67)
      goto LABEL_115;
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      WTF::fastFree((WTF *)v67, v29);
    }
    v30 = *(_QWORD *)(v25 + 16);
    if (v30)
    {
LABEL_115:
      do
        v66 = __ldaxr((unsigned int *)v30);
      while (__stlxr(v66 + 1, (unsigned int *)v30));
    }
  }
  else
  {
    v30 = 0;
  }
  v31 = *(unsigned int **)(v17 + 32);
  *(_QWORD *)(v17 + 32) = v30;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v29);
    }
  }
  result = (_QWORD *)(*(uint64_t (**)(float32x4_t *))(v74->i64[0] + 72))(v74);
  v35 = (uint64_t *)v74;
  v74 = 0;
  if (!v35)
    goto LABEL_74;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *))(*v35 + 136))(&v72, v35);
  v36 = v35[1];
  if (__ldaxr((unsigned __int8 *)v36))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v36))
  {
    goto LABEL_32;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v36);
LABEL_32:
  v38 = *(_QWORD *)(v36 + 8);
  v39 = v38 - 1;
  *(_QWORD *)(v36 + 8) = v38 - 1;
  if (v38 == 1)
  {
    v64 = *(_QWORD *)(v36 + 16);
    v40 = *(_QWORD *)(v36 + 24);
    *(_QWORD *)(v36 + 24) = 0;
    v41 = v64 != 0;
  }
  else
  {
    v40 = 0;
    v41 = 1;
  }
  v70 = v41;
  v42 = __ldxr((unsigned __int8 *)v36);
  if (v42 != 1)
  {
    __clrex();
    goto LABEL_38;
  }
  if (__stlxr(0, (unsigned __int8 *)v36))
LABEL_38:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v36);
  if (!v39)
  {
    if (v40)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    if (!v70)
      result = (_QWORD *)WTF::fastFree((WTF *)v36, v34);
  }
  if (v72)
  {
    if (*(_BYTE *)(a2 + 346))
    {
      *(_BYTE *)(a2 + 346) = 0;
      *(_DWORD *)(a2 + 184) |= 0x8000u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
    v43 = v72;
    v44 = *(_QWORD *)(v72 + 8);
    if (__ldaxr((unsigned __int8 *)v44))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v44))
    {
      goto LABEL_51;
    }
    MEMORY[0x19AEA534C](v44);
LABEL_51:
    ++*(_QWORD *)(v44 + 8);
    v46 = __ldxr((unsigned __int8 *)v44);
    if (v46 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v44))
      {
LABEL_56:
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 408))(a2, v43, a3, &v71, a5, a6, a7, *(_QWORD *)&a8 & 0xFF0FFFLL);
        v47 = *(_QWORD *)(v43 + 8);
        if (__ldaxr((unsigned __int8 *)v47))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v47))
        {
          goto LABEL_60;
        }
        result = (_QWORD *)MEMORY[0x19AEA534C](v47);
LABEL_60:
        v49 = *(_QWORD *)(v47 + 8);
        v50 = v49 - 1;
        *(_QWORD *)(v47 + 8) = v49 - 1;
        if (v49 == 1)
        {
          v65 = *(_QWORD *)(v47 + 16);
          v51 = *(_QWORD *)(v47 + 24);
          *(_QWORD *)(v47 + 24) = 0;
          v52 = v65 != 0;
        }
        else
        {
          v51 = 0;
          v52 = 1;
        }
        v53 = __ldxr((unsigned __int8 *)v47);
        if (v53 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v47))
            goto LABEL_67;
        }
        else
        {
          __clrex();
        }
        result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v47);
LABEL_67:
        if (!v50)
        {
          if (v51)
            result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          if (!v52)
            result = (_QWORD *)WTF::fastFree((WTF *)v47, v34);
        }
        v54 = v72;
        v72 = 0;
        if (v54)
          result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v54 + 8), v34);
        goto LABEL_74;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
    goto LABEL_56;
  }
LABEL_74:
  if (v25)
  {
    if (*(_DWORD *)(v25 + 8) == 1)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    else
      --*(_DWORD *)(v25 + 8);
  }
  v55 = v74;
  v74 = 0;
  if (v55)
  {
    v56 = v55->i64[1];
    if (__ldaxr((unsigned __int8 *)v56))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v56))
    {
      goto LABEL_82;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v56);
LABEL_82:
    v58 = *(_QWORD *)(v56 + 8);
    v59 = v58 - 1;
    *(_QWORD *)(v56 + 8) = v58 - 1;
    if (v58 == 1)
    {
      v63 = *(_QWORD *)(v56 + 16);
      v60 = *(_QWORD *)(v56 + 24);
      *(_QWORD *)(v56 + 24) = 0;
      v61 = v63 != 0;
    }
    else
    {
      v60 = 0;
      v61 = 1;
    }
    v62 = __ldxr((unsigned __int8 *)v56);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v56))
      {
        if (v59)
          return result;
LABEL_90:
        if (v60)
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
        if (!v61)
          return (_QWORD *)WTF::fastFree((WTF *)v56, v34);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v56);
    if (v59)
      return result;
    goto LABEL_90;
  }
  return result;
}

uint64_t WebCore::BitmapImage::dump(WebCore::BitmapImage *this, WTF::TextStream *a2)
{
  WebCore::Image::dump(this, a2);
  return (*(uint64_t (**)(_QWORD, WTF::TextStream *))(**((_QWORD **)this + 8) + 352))(*((_QWORD *)this + 8), a2);
}

uint64_t WebCore::BitmapImageDescriptor::size(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _DWORD *v10;
  BOOL v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;

  v1 = a1;
  if ((*(_WORD *)a1 & 4) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = (_DWORD *)(a1 + 24);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 120);
    v3 = *(_WORD *)(v2 + 40);
    v4 = (uint64_t *)(v2 + 72);
    v59 = 0;
    if ((v3 & 0x10) == 0)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v2 + 160) + 168);
      if (v36 && (a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36), (_DWORD)a1))
      {
        *(_QWORD *)(v2 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 64))(v36);
        *(_WORD *)(v2 + 40) |= 0x10u;
        v37 = *(_QWORD *)(v2 + 160);
        a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        if (!*(_DWORD *)(v37 + 224))
        {
          v38 = *(_DWORD *)(v37 + 228);
          *(_DWORD *)(v37 + 228) = a1;
          if (v38 != (_DWORD)a1)
          {
            v39 = *(_QWORD *)(v37 + 16);
            if (v39)
            {
              v40 = *(_QWORD *)(v39 + 8);
              if (v40)
              {
                v41 = *(_QWORD *)(v40 + 32);
                if (v41)
                {
                  v42 = *(_DWORD **)(v41 + 8);
                  if (v42)
                  {
                    ++v42[2];
                    a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v42 + 56))(v42);
                    if (v42[2] == 1)
                      a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
                    else
                      --v42[2];
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v4 = &v59;
      }
    }
    if (*(_QWORD *)(v2 + 168) && (v5 = *v4, *(_DWORD *)(v2 + 220) > *v4))
    {
      v6 = *v4;
      v7 = *(_QWORD *)(v2 + 208) + 80 * v5;
      if (*(_DWORD *)v7 != 2 || *(_DWORD *)(v7 + 24) != 0)
      {
        a1 = WebCore::ImageFrame::clearImage(*(_QWORD *)(v2 + 208) + 80 * v5);
        if ((_DWORD)a1)
        {
          *(_DWORD *)(v2 + 224) -= a1;
          a1 = WebCore::BitmapImageSource::decodedSizeChanged(v2, -(uint64_t)a1);
        }
        LOBYTE(v59) = 1;
        BYTE4(v59) = 0;
        v60 = 0;
        if (*(_DWORD *)(v2 + 220) > v5)
        {
          v34 = *(_QWORD *)(v2 + 208);
          (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v2 + 168) + 168))(*(_QWORD *)(v2 + 168), v6, 0, &v59, v34 + 80 * v6);
          v61 = 0;
          a1 = WebCore::BitmapImageDescriptor::imageMetadata<int>(v2 + 40, (unsigned int *)(v2 + 88), &v61, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
          if ((_DWORD)a1)
            *(double *)(v34 + 80 * v6 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 168) + 144))(*(_QWORD *)(v2 + 168), v6);
        }
      }
    }
    else
    {
      a1 = (uint64_t)WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)a1);
      v7 = a1;
    }
    v9 = *(_QWORD *)(v7 + 48);
    v10 = (_DWORD *)(v7 + 56);
    v11 = *(int *)(v7 + 4) < 1 || *(_DWORD *)(v7 + 8) < 1;
    if (!v11)
    {
      v12 = *v10;
      *(_QWORD *)(v1 + 16) = v9;
      *(_BYTE *)(v1 + 24) = v12;
      v10 = (_DWORD *)(v1 + 24);
      *(_WORD *)v1 |= 4u;
    }
  }
  if (*(_BYTE *)v10)
  {
    v57 = WebCore::BitmapImageDescriptor::orientation((WebCore::BitmapImageDescriptor *)v1);
    v58 = __ROR8__(v9, 32);
    if (((v57 - 5) & 0xFC) != 0)
      return v9;
    else
      return v58;
  }
  else
  {
    v13 = *(_WORD *)v1;
    if ((*(_WORD *)v1 & 2) != 0)
    {
      v21 = *(_QWORD *)(v1 + 8);
    }
    else
    {
      v14 = *(_QWORD *)(v1 + 120);
      v15 = *(_WORD *)(v14 + 40);
      v16 = (uint64_t *)(v14 + 72);
      v59 = 0;
      if ((v15 & 0x10) == 0)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v14 + 160) + 168);
        if (v43 && (a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43), (_DWORD)a1))
        {
          *(_QWORD *)(v14 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 64))(v43);
          *(_WORD *)(v14 + 40) |= 0x10u;
          v44 = *(_QWORD *)(v14 + 160);
          a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
          if (!*(_DWORD *)(v44 + 224))
          {
            v45 = *(_DWORD *)(v44 + 228);
            *(_DWORD *)(v44 + 228) = a1;
            if (v45 != (_DWORD)a1)
            {
              v46 = *(_QWORD *)(v44 + 16);
              if (v46)
              {
                v47 = *(_QWORD *)(v46 + 8);
                if (v47)
                {
                  v48 = *(_QWORD *)(v47 + 32);
                  if (v48)
                  {
                    v49 = *(_DWORD **)(v48 + 8);
                    if (v49)
                    {
                      ++v49[2];
                      a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 56))(v49);
                      if (v49[2] == 1)
                        a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
                      else
                        --v49[2];
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v16 = &v59;
        }
      }
      if (*(_QWORD *)(v14 + 168) && (v17 = *v16, *(_DWORD *)(v14 + 220) > *v16))
      {
        v18 = *v16;
        v19 = *(_QWORD *)(v14 + 208) + 80 * v17;
        if (*(_DWORD *)v19 != 2 || *(_DWORD *)(v19 + 24) != 0)
        {
          a1 = WebCore::ImageFrame::clearImage(*(_QWORD *)(v14 + 208) + 80 * v17);
          if ((_DWORD)a1)
          {
            *(_DWORD *)(v14 + 224) -= a1;
            a1 = WebCore::BitmapImageSource::decodedSizeChanged(v14, -(uint64_t)a1);
          }
          LOBYTE(v59) = 1;
          BYTE4(v59) = 0;
          v60 = 0;
          if (*(_DWORD *)(v14 + 220) > v17)
          {
            v35 = *(_QWORD *)(v14 + 208);
            (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v14 + 168) + 168))(*(_QWORD *)(v14 + 168), v18, 0, &v59, v35 + 80 * v18);
            v61 = 0;
            a1 = WebCore::BitmapImageDescriptor::imageMetadata<int>(v14 + 40, (unsigned int *)(v14 + 88), &v61, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
            if ((_DWORD)a1)
              *(double *)(v35 + 80 * v18 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v14 + 168) + 144))(*(_QWORD *)(v14 + 168), v18);
          }
        }
      }
      else
      {
        a1 = (uint64_t)WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)a1);
        v19 = a1;
      }
      v21 = *(_QWORD *)(v19 + 4);
      v13 = *(_WORD *)v1;
      if ((int)v21 >= 1 && SHIDWORD(v21) >= 1)
      {
        *(_QWORD *)(v1 + 8) = v21;
        v13 |= 2u;
        *(_WORD *)v1 = v13;
      }
    }
    if ((v13 & 8) != 0)
    {
      v28 = *(unsigned __int8 *)(v1 + 28);
    }
    else
    {
      v22 = *(_QWORD *)(v1 + 120);
      v23 = *(_WORD *)(v22 + 40);
      v24 = (uint64_t *)(v22 + 72);
      v59 = 0;
      if ((v23 & 0x10) == 0)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(v22 + 160) + 168);
        if (v50 && (a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50), (_DWORD)a1))
        {
          *(_QWORD *)(v22 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 64))(v50);
          *(_WORD *)(v22 + 40) |= 0x10u;
          v51 = *(_QWORD *)(v22 + 160);
          a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
          if (!*(_DWORD *)(v51 + 224))
          {
            v52 = *(_DWORD *)(v51 + 228);
            *(_DWORD *)(v51 + 228) = a1;
            if (v52 != (_DWORD)a1)
            {
              v53 = *(_QWORD *)(v51 + 16);
              if (v53)
              {
                v54 = *(_QWORD *)(v53 + 8);
                if (v54)
                {
                  v55 = *(_QWORD *)(v54 + 32);
                  if (v55)
                  {
                    v56 = *(_DWORD **)(v55 + 8);
                    if (v56)
                    {
                      ++v56[2];
                      a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v56 + 56))(v56);
                      if (v56[2] == 1)
                        a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
                      else
                        --v56[2];
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v24 = &v59;
        }
      }
      if (*(_QWORD *)(v22 + 168) && (v25 = *v24, *(_DWORD *)(v22 + 220) > *v24))
      {
        v26 = *v24;
        v27 = (uint64_t *)(*(_QWORD *)(v22 + 208) + 80 * v25);
        if (*(_DWORD *)v27 != 2)
        {
          v31 = *((unsigned int *)v27 + 6);
          v32 = WebCore::ImageFrame::clearImage(*(_QWORD *)(v22 + 208) + 80 * v25);
          if (v32)
          {
            *(_DWORD *)(v22 + 224) -= v32;
            WebCore::BitmapImageSource::decodedSizeChanged(v22, -(uint64_t)v32);
          }
          LOBYTE(v59) = 1;
          BYTE4(v59) = 0;
          v60 = 0;
          if (*(_DWORD *)(v22 + 220) > v25)
          {
            v33 = *(_QWORD *)(v22 + 208);
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v22 + 168) + 168))(*(_QWORD *)(v22 + 168), v26, v31, &v59, v33 + 80 * v26);
            v61 = 0;
            if (WebCore::BitmapImageDescriptor::imageMetadata<int>(v22 + 40, (unsigned int *)(v22 + 88), &v61, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1))*(double *)(v33 + 80 * v26 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v22 + 168) + 144))(*(_QWORD *)(v22 + 168), v26);
          }
        }
      }
      else
      {
        v27 = WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)a1);
      }
      v28 = *((unsigned __int8 *)v27 + 44);
      if (*((int *)v27 + 1) >= 1 && *((int *)v27 + 2) >= 1)
      {
        *(_BYTE *)(v1 + 28) = v28;
        *(_WORD *)v1 |= 8u;
      }
    }
    v11 = (v28 - 5) > 3;
    v29 = __ROR8__(v21, 32);
    if (v11)
      return v21;
    else
      return v29;
  }
}

uint64_t WebCore::BitmapImageDescriptor::densityCorrectedSize(WebCore::BitmapImageDescriptor *this)
{
  WebCore::BitmapImageDescriptor *v1;
  uint64_t v2;
  __int16 v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  char v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char v22;
  unsigned int v23;

  v1 = this;
  if ((*(_WORD *)this & 4) != 0)
    return *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 15);
  v3 = *(_WORD *)(v2 + 40);
  v4 = (uint64_t *)(v2 + 72);
  v21 = 0;
  if ((v3 & 0x10) == 0)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 160) + 168);
    if (v14
      && (this = (WebCore::BitmapImageDescriptor *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14),
          (_DWORD)this))
    {
      *(_QWORD *)(v2 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14);
      *(_WORD *)(v2 + 40) |= 0x10u;
      v15 = *(_QWORD *)(v2 + 160);
      this = (WebCore::BitmapImageDescriptor *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      if (!*(_DWORD *)(v15 + 224))
      {
        v16 = *(_DWORD *)(v15 + 228);
        *(_DWORD *)(v15 + 228) = (_DWORD)this;
        if (v16 != (_DWORD)this)
        {
          v17 = *(_QWORD *)(v15 + 16);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 8);
            if (v18)
            {
              v19 = *(_QWORD *)(v18 + 32);
              if (v19)
              {
                v20 = *(_DWORD **)(v19 + 8);
                if (v20)
                {
                  ++v20[2];
                  this = (WebCore::BitmapImageDescriptor *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 56))(v20);
                  if (v20[2] == 1)
                    this = (WebCore::BitmapImageDescriptor *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
                  else
                    --v20[2];
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v4 = &v21;
    }
  }
  if (*(_QWORD *)(v2 + 168) && (v5 = *v4, *(_DWORD *)(v2 + 220) > *v4))
  {
    v6 = *v4;
    v7 = (uint64_t *)(*(_QWORD *)(v2 + 208) + 80 * v5);
    if (*(_DWORD *)v7 != 2 || *((_DWORD *)v7 + 6) != 0)
    {
      v12 = WebCore::ImageFrame::clearImage(*(_QWORD *)(v2 + 208) + 80 * v5);
      if (v12)
      {
        *(_DWORD *)(v2 + 224) -= v12;
        WebCore::BitmapImageSource::decodedSizeChanged(v2, -(uint64_t)v12);
      }
      LOBYTE(v21) = 1;
      BYTE4(v21) = 0;
      v22 = 0;
      if (*(_DWORD *)(v2 + 220) > v5)
      {
        v13 = *(_QWORD *)(v2 + 208);
        (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v2 + 168) + 168))(*(_QWORD *)(v2 + 168), v6, 0, &v21, v13 + 80 * v6);
        v23 = 0;
        if (WebCore::BitmapImageDescriptor::imageMetadata<int>(v2 + 40, (unsigned int *)(v2 + 88), &v23, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1))*(double *)(v13 + 80 * v6 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 168) + 144))(*(_QWORD *)(v2 + 168), v6);
      }
    }
  }
  else
  {
    v7 = WebCore::ImageFrame::defaultFrame(this);
  }
  result = v7[6];
  if (*((int *)v7 + 1) >= 1 && *((_DWORD *)v7 + 2) >= 1)
  {
    v11 = *((_DWORD *)v7 + 14);
    *((_QWORD *)v1 + 2) = result;
    *((_BYTE *)v1 + 24) = v11;
    *(_WORD *)v1 |= 4u;
  }
  return result;
}

uint64_t WebCore::BitmapImageDescriptor::orientation(WebCore::BitmapImageDescriptor *this)
{
  WebCore::BitmapImageDescriptor *v1;
  uint64_t v2;
  __int16 v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  char v21;
  unsigned int v22;

  v1 = this;
  if ((*(_WORD *)this & 8) != 0)
    return *((unsigned __int8 *)this + 28);
  v2 = *((_QWORD *)this + 15);
  v3 = *(_WORD *)(v2 + 40);
  v4 = (uint64_t *)(v2 + 72);
  v20 = 0;
  if ((v3 & 0x10) == 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 160) + 168);
    if (v13
      && (this = (WebCore::BitmapImageDescriptor *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13),
          (_DWORD)this))
    {
      *(_QWORD *)(v2 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13);
      *(_WORD *)(v2 + 40) |= 0x10u;
      v14 = *(_QWORD *)(v2 + 160);
      this = (WebCore::BitmapImageDescriptor *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      if (!*(_DWORD *)(v14 + 224))
      {
        v15 = *(_DWORD *)(v14 + 228);
        *(_DWORD *)(v14 + 228) = (_DWORD)this;
        if (v15 != (_DWORD)this)
        {
          v16 = *(_QWORD *)(v14 + 16);
          if (v16)
          {
            v17 = *(_QWORD *)(v16 + 8);
            if (v17)
            {
              v18 = *(_QWORD *)(v17 + 32);
              if (v18)
              {
                v19 = *(_DWORD **)(v18 + 8);
                if (v19)
                {
                  ++v19[2];
                  this = (WebCore::BitmapImageDescriptor *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 56))(v19);
                  if (v19[2] == 1)
                    this = (WebCore::BitmapImageDescriptor *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
                  else
                    --v19[2];
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v4 = &v20;
    }
  }
  if (*(_QWORD *)(v2 + 168) && (v5 = *v4, *(_DWORD *)(v2 + 220) > *v4))
  {
    v6 = *v4;
    v7 = (uint64_t *)(*(_QWORD *)(v2 + 208) + 80 * v5);
    if (*(_DWORD *)v7 != 2)
    {
      v10 = *((unsigned int *)v7 + 6);
      v11 = WebCore::ImageFrame::clearImage(*(_QWORD *)(v2 + 208) + 80 * v5);
      if (v11)
      {
        *(_DWORD *)(v2 + 224) -= v11;
        WebCore::BitmapImageSource::decodedSizeChanged(v2, -(uint64_t)v11);
      }
      LOBYTE(v20) = 1;
      BYTE4(v20) = 0;
      v21 = 0;
      if (*(_DWORD *)(v2 + 220) > v5)
      {
        v12 = *(_QWORD *)(v2 + 208);
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v2 + 168) + 168))(*(_QWORD *)(v2 + 168), v6, v10, &v20, v12 + 80 * v6);
        v22 = 0;
        if (WebCore::BitmapImageDescriptor::imageMetadata<int>(v2 + 40, (unsigned int *)(v2 + 88), &v22, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1))*(double *)(v12 + 80 * v6 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 168) + 144))(*(_QWORD *)(v2 + 168), v6);
      }
    }
  }
  else
  {
    v7 = WebCore::ImageFrame::defaultFrame(this);
  }
  result = *((unsigned __int8 *)v7 + 44);
  if (*((int *)v7 + 1) >= 1 && *((_DWORD *)v7 + 2) >= 1)
  {
    *((_BYTE *)v1 + 28) = result;
    *(_WORD *)v1 |= 8u;
  }
  return result;
}

uint64_t WebCore::BitmapImageDescriptor::primaryFrameIndex(WebCore::BitmapImageDescriptor *this)
{
  unsigned int *v1;
  __int16 v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char *v13;
  uint64_t v14;

  v1 = (unsigned int *)((char *)this + 32);
  v2 = *(_WORD *)this;
  v14 = 0;
  if ((v2 & 0x10) == 0)
  {
    v13 = (char *)this + 32;
    v4 = *(_QWORD *)(*((_QWORD *)this + 15) + 168);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4))
    {
      *((_QWORD *)this + 4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
      *(_WORD *)this |= 0x10u;
      v5 = *((_QWORD *)this + 15);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*(_DWORD *)(v5 + 224))
      {
        v7 = *(_DWORD *)(v5 + 228);
        *(_DWORD *)(v5 + 228) = v6;
        if (v7 != v6)
        {
          v8 = *(_QWORD *)(v5 + 16);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 32);
              if (v10)
              {
                v11 = *(_DWORD **)(v10 + 8);
                if (v11)
                {
                  ++v11[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 56))(v11);
                  if (v11[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
                  else
                    --v11[2];
                }
              }
            }
          }
        }
      }
      v1 = (unsigned int *)v13;
    }
    else
    {
      v1 = (unsigned int *)&v14;
    }
  }
  return *v1;
}

uint64_t WebCore::BitmapImageDescriptor::frameCount(WebCore::BitmapImageDescriptor *this)
{
  unsigned int *v1;
  __int16 v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char *v13;
  uint64_t v14;

  v1 = (unsigned int *)((char *)this + 40);
  v2 = *(_WORD *)this;
  v14 = 0;
  if ((v2 & 0x20) == 0)
  {
    v13 = (char *)this + 40;
    v4 = *(_QWORD *)(*((_QWORD *)this + 15) + 168);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4))
    {
      *((_QWORD *)this + 5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      *(_WORD *)this |= 0x20u;
      v5 = *((_QWORD *)this + 15);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*(_DWORD *)(v5 + 224))
      {
        v7 = *(_DWORD *)(v5 + 228);
        *(_DWORD *)(v5 + 228) = v6;
        if (v7 != v6)
        {
          v8 = *(_QWORD *)(v5 + 16);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 32);
              if (v10)
              {
                v11 = *(_DWORD **)(v10 + 8);
                if (v11)
                {
                  ++v11[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 56))(v11);
                  if (v11[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
                  else
                    --v11[2];
                }
              }
            }
          }
        }
      }
      v1 = (unsigned int *)v13;
    }
    else
    {
      v1 = (unsigned int *)&v14;
    }
  }
  return *v1;
}

uint64_t WebCore::BitmapImageDescriptor::imageMetadata<int>(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned __int16 a4, uint64_t (*a5)(_QWORD *), uint64_t a6)
{
  unsigned int *v7;
  uint64_t v10;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;

  if ((*(_WORD *)a1 & a4) != 0)
  {
LABEL_2:
    v7 = a2;
    return *v7;
  }
  v7 = a3;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 168);
  if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10))
  {
    v14 = (_QWORD *)(v10 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(uint64_t (**)(_QWORD *))(*v14 + a5);
    *a2 = a5(v14);
    *(_WORD *)a1 |= a4;
    v15 = *(_QWORD *)(a1 + 120);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!*(_DWORD *)(v15 + 224))
    {
      v17 = *(_DWORD *)(v15 + 228);
      *(_DWORD *)(v15 + 228) = v16;
      if (v17 != v16)
      {
        v18 = *(_QWORD *)(v15 + 16);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 32);
            if (v20)
            {
              v21 = *(_DWORD **)(v20 + 8);
              if (v21)
              {
                ++v21[2];
                (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 56))(v21);
                if (v21[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
                else
                  --v21[2];
              }
            }
          }
        }
      }
    }
    goto LABEL_2;
  }
  return *v7;
}

uint64_t WebCore::BitmapImageDescriptor::imageMetadata<WTF::String>(uint64_t result, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4, unsigned __int16 a5, void (*a6)(WTF::StringImpl **__return_ptr, _QWORD *), uint64_t a7)
{
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v12;
  _QWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v8 = (_QWORD *)result;
  if ((*(_WORD *)a2 & a5) != 0)
    goto LABEL_2;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 168);
  if (!v12 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12), (result & 1) == 0))
  {
    v9 = *a4;
    if (!*a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v16 = (_QWORD *)(v12 + (a7 >> 1));
  if ((a7 & 1) != 0)
    a6 = *(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*v16 + a6);
  a6(&v28, v16);
  v18 = v28;
  v28 = 0;
  v19 = *a3;
  *a3 = v18;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v17);
      v19 = v28;
      v28 = 0;
      if (!v19)
        goto LABEL_12;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v27);
        goto LABEL_12;
      }
    }
    *(_DWORD *)v19 = v20;
  }
LABEL_12:
  *(_WORD *)a2 |= a5;
  v21 = *(_QWORD *)(a2 + 120);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  if (!*(_DWORD *)(v21 + 224))
  {
    v22 = *(_DWORD *)(v21 + 228);
    *(_DWORD *)(v21 + 228) = result;
    if (v22 != (_DWORD)result)
    {
      v23 = *(_QWORD *)(v21 + 16);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 32);
          if (v25)
          {
            v26 = *(_DWORD **)(v25 + 8);
            if (v26)
            {
              ++v26[2];
              result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v26 + 56))(v26);
              if (v26[2] == 1)
                result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
              else
                --v26[2];
            }
          }
        }
      }
    }
  }
LABEL_2:
  v9 = *a3;
  if (*a3)
LABEL_3:
    *(_DWORD *)v9 += 2;
LABEL_4:
  *v8 = v9;
  return result;
}

uint64_t WebCore::BitmapImageSource::BitmapImageSource(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  const void *v12;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  char **v19;
  char *v20;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)a1 = off_1E340ADA8;
  *(_QWORD *)(a1 + 8) = v8;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
    goto LABEL_16;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = a2;
  v15 = *(unsigned int **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v9;
  if (!v15)
    goto LABEL_16;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v14);
  }
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
LABEL_16:
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
  }
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = a4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 1;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 68) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  v11 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v11 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v12 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *(_QWORD *)(a1 + 96) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (v12)
    CFRetain(v12);
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 160) = a1;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 226) = 0u;
  return a1;
}

uint64_t WebCore::BitmapImageSource::decoder(WebCore::BitmapImageSource *this, WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  WTF::StringImpl *v33;
  unsigned int *v34;

  result = *((_QWORD *)this + 21);
  if (result)
    return result;
  if (!a2)
    return 0;
  v5 = *((_QWORD *)this + 2);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    WebCore::Image::mimeType(v6, &v33);
  }
  else
  {
    v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v7 += 2;
    v33 = v7;
  }
  WebCore::ImageDecoder::create(a2, &v33, *((unsigned int *)this + 6), *((unsigned int *)this + 7), &v34);
  v9 = v34;
  v34 = 0;
  v10 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v9;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
    v14 = v34;
    v34 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  v18 = v33;
  v33 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v8);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *((_QWORD *)this + 21);
  if (!v19)
    return 0;
  v20 = *((_QWORD *)this + 1);
  if (!v20)
  {
    v22 = 0;
    goto LABEL_33;
  }
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_26;
  }
  MEMORY[0x19AEA534C](v20);
LABEL_26:
  if (*(_QWORD *)(v20 + 24))
  {
    ++*(_QWORD *)(v20 + 16);
    v22 = v20;
  }
  else
  {
    v22 = 0;
  }
  v23 = __ldxr((unsigned __int8 *)v20);
  if (v23 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v20))
      goto LABEL_33;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
LABEL_33:
  v24 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v24 = &off_1E340AF30;
  *((_QWORD *)v24 + 1) = v22;
  *((_QWORD *)v24 + 2) = this;
  v34 = v24;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v19 + 32))(v19, &v34);
  v25 = v34;
  v34 = 0;
  if (v25)
    (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 2);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 8);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 32);
      if (v28)
      {
        v29 = *(_DWORD **)(v28 + 8);
        if (v29)
        {
          v29[2] += 2;
          v30 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 40))(v29);
          v31 = v29[2] - 1;
          if (v29[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
            v31 = v29[2];
          }
          else
          {
            v29[2] = v31;
          }
          v32 = v31 - 1;
          if (v32)
            v29[2] = v32;
          else
            (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
          if (v30)
            (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 21) + 184))(*((_QWORD *)this + 21), v30);
        }
      }
    }
  }
  return *((_QWORD *)this + 21);
}

uint64_t WebCore::BitmapImageSource::encodedDataStatus(WebCore::BitmapImageSource *this)
{
  int *v1;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;

  v1 = (int *)((char *)this + 44);
  v12 = 1;
  if ((*((_WORD *)this + 20) & 1) == 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 20) + 168);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4))
    {
      *((_DWORD *)this + 11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      *((_WORD *)this + 20) |= 1u;
      v5 = *((_QWORD *)this + 20);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*(_DWORD *)(v5 + 224))
      {
        v7 = *(_DWORD *)(v5 + 228);
        *(_DWORD *)(v5 + 228) = v6;
        if (v7 != v6)
        {
          v8 = *(_QWORD *)(v5 + 16);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 32);
              if (v10)
              {
                v11 = *(_DWORD **)(v10 + 8);
                if (v11)
                {
                  ++v11[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 56))(v11);
                  if (v11[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
                  else
                    --v11[2];
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v1 = &v12;
    }
  }
  return *v1;
}

BOOL WebCore::BitmapImageSource::isAnimated(WebCore::BitmapImageSource *this)
{
  char *v2;
  __int16 v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;

  v3 = *((_WORD *)this + 20);
  v2 = (char *)this + 40;
  v4 = v2 + 40;
  v16 = 0;
  if ((v3 & 0x20) == 0)
  {
    v14 = v2 + 40;
    v15 = v2;
    v6 = *(_QWORD *)(*((_QWORD *)this + 20) + 168);
    if (v6 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6))
    {
      *((_QWORD *)this + 10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
      *((_WORD *)this + 20) |= 0x20u;
      v7 = *((_QWORD *)this + 20);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      if (!*(_DWORD *)(v7 + 224))
      {
        v9 = *(_DWORD *)(v7 + 228);
        *(_DWORD *)(v7 + 228) = v8;
        if (v9 != v8)
        {
          v10 = *(_QWORD *)(v7 + 16);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 32);
              if (v12)
              {
                v13 = *(_DWORD **)(v12 + 8);
                if (v13)
                {
                  ++v13[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 56))(v13);
                  if (v13[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
                  else
                    --v13[2];
                }
              }
            }
          }
        }
      }
      v4 = v14;
      v2 = v15;
    }
    else
    {
      v4 = (char *)&v16;
      v2 = v15;
    }
  }
  if ((*(_QWORD *)v4 & 0xFFFFFFFELL) == 0)
    return 0;
  v17 = 0;
  return WebCore::BitmapImageDescriptor::imageMetadata<int>((uint64_t)v2, (unsigned int *)this + 22, &v17, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1) != 0;
}

WTF **std::unique_ptr<WebCore::ImageFrameAnimator>::operator=[abi:sn180100](WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 2) = 0;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF **std::unique_ptr<WebCore::ImageFrameAnimator>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = *((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

unsigned int *WebCore::BitmapImageSource::workQueue(WebCore::BitmapImageSource *this)
{
  unsigned int *result;
  unsigned int **v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  WebCore::ImageFrameWorkQueue *v9;

  v3 = (unsigned int **)((char *)this + 184);
  result = (unsigned int *)*((_QWORD *)this + 23);
  if (!result)
  {
    WebCore::ImageFrameWorkQueue::create(this, (WebCore::ImageFrameWorkQueue **)&v8);
    WTF::RefPtr<WebCore::ImageFrameWorkQueue,WTF::RawPtrTraits<WebCore::ImageFrameWorkQueue>,WTF::DefaultRefDerefTraits<WebCore::ImageFrameWorkQueue>>::operator=<WebCore::ImageFrameWorkQueue>(v3, &v8);
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        v9 = (WebCore::ImageFrameWorkQueue *)v5;
        WTF::ThreadSafeRefCounted<WebCore::ImageFrameWorkQueue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v9, v4);
      }
    }
    return *v3;
  }
  return result;
}

unsigned int **WTF::RefPtr<WebCore::ImageFrameWorkQueue,WTF::RawPtrTraits<WebCore::ImageFrameWorkQueue>,WTF::DefaultRefDerefTraits<WebCore::ImageFrameWorkQueue>>::operator=<WebCore::ImageFrameWorkQueue>(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::ImageFrameWorkQueue *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (WebCore::ImageFrameWorkQueue *)v4;
      WTF::ThreadSafeRefCounted<WebCore::ImageFrameWorkQueue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8, a2);
    }
  }
  return a1;
}

void WTF::Vector<WebCore::ImageFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resizeToFit(uint64_t a1, unint64_t a2)
{
  WTF *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  WTF *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  WebCore::NativeImage *v16;
  int v17;
  int v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  WebCore::ImageFrame *v23;
  uint64_t v24;
  const WebCore::ImageFrame *v25;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x19613B388);
    }
    v4 = *(WTF **)a1;
    v5 = *(unsigned int *)(a1 + 12);
    v6 = 80 * a2;
    v7 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v7;
    if ((_DWORD)v5)
    {
      v23 = (WebCore::ImageFrame *)v7;
      v24 = 80 * v5;
      v25 = v4;
      do
      {
        WebCore::ImageFrame::ImageFrame(v23, v25);
        WebCore::ImageFrame::~ImageFrame(v25);
        v23 = (WebCore::ImageFrame *)((char *)v23 + 80);
        v25 = (const WebCore::ImageFrame *)((char *)v25 + 80);
        v24 -= 80;
      }
      while (v24);
    }
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v8);
    }
  }
  v9 = *(unsigned int *)(a1 + 12);
  if (v9 >= a2)
  {
    if (v9 == a2)
      goto LABEL_15;
    v14 = 80 * v9 - 80 * a2;
    v15 = (_BYTE *)(*(_QWORD *)a1 + 80 * a2 + 28);
    while (1)
    {
      v16 = *(WebCore::NativeImage **)(v15 - 12);
      if (v16)
      {
        v18 = *((_DWORD *)v15 - 6);
        v17 = *((_DWORD *)v15 - 5);
        if (v18 < 0)
          v18 = -v18;
        if (v17 < 0)
          v17 = -v17;
        if (((v17 * (unint64_t)v18) & 0xFFFFFFFF00000000) != 0)
          goto LABEL_35;
        WebCore::NativeImage::clearSubimages(v16);
        v20 = *(_QWORD *)(v15 - 12);
        *(_QWORD *)(v15 - 12) = 0;
        if (v20)
        {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v20 + 8), v19);
          v22 = *(_QWORD *)(v15 - 12);
          *v15 = 1;
          v15[4] = 0;
          v15[12] = 0;
          *(_QWORD *)(v15 - 12) = 0;
          if (v22)
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v22 + 8), v21);
          goto LABEL_28;
        }
        *v15 = 1;
        v15[4] = 0;
        v15[12] = 0;
      }
      *(_QWORD *)(v15 - 12) = 0;
LABEL_28:
      v15 += 80;
      v14 -= 80;
      if (!v14)
        goto LABEL_15;
    }
  }
  if (*(unsigned int *)(a1 + 8) < a2)
    WTF::Vector<WebCore::ImageFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v11 != a2)
    {
      v12 = (char *)v10 + 80 * a2;
      v13 = (char *)v10 + 80 * v11;
      do
      {
        *(_QWORD *)v13 = 0;
        *((_DWORD *)v13 + 2) = 0;
        *((_QWORD *)v13 + 2) = 0;
        *((_DWORD *)v13 + 6) = 0;
        v13[28] = 0;
        v13[32] = 0;
        v13[40] = 0;
        v13[44] = 1;
        v13[48] = 0;
        v13[56] = 0;
        *((_QWORD *)v13 + 8) = 0;
        v13[72] = 1;
        v13 += 80;
      }
      while (v13 != v12);
    }
  }
LABEL_15:
  *(_DWORD *)(a1 + 12) = a2;
}

uint64_t WebCore::BitmapImageSource::dataChanged(WebCore::BitmapImageSource *this, WebCore::FragmentedSharedBuffer *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _DWORD *v18;

  *((_WORD *)this + 20) = 0;
  if (!a2)
    return 1;
  v6 = WebCore::BitmapImageSource::decoder(this, a2);
  if (!v6)
    return 1;
  v7 = (unsigned int *)v6;
  v8 = (unsigned int *)(v6 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  (*(void (**)(uint64_t, WebCore::FragmentedSharedBuffer *, uint64_t))(*(_QWORD *)v6 + 192))(v6, a2, a3);
  *((_BYTE *)this + 32) = a3;
  v10 = WebCore::BitmapImageSource::encodedDataStatus(this);
  do
  {
    v11 = __ldaxr(v8);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v8));
  if (!v12)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((int)v10 >= 2)
  {
    if ((_DWORD)v10 != 2)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 56))(*((_QWORD *)this + 21));
      WTF::Vector<WebCore::ImageFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resizeToFit((uint64_t)this + 208, v13);
    }
    v14 = *((_QWORD *)this + 2);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v17 = *(_QWORD *)(v15 + 32);
        if (v17)
        {
          v18 = *(_DWORD **)(v17 + 8);
          if (v18)
          {
            ++v18[2];
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 48))(v18);
            if (v18[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
            else
              --v18[2];
          }
        }
      }
    }
  }
  return v10;
}

WebCore::BitmapImageSource *WebCore::BitmapImageSource::setData(WebCore::BitmapImageSource *this, WebCore::FragmentedSharedBuffer *a2, uint64_t a3)
{
  WebCore::BitmapImageSource *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v5 = this;
    this = (WebCore::BitmapImageSource *)WebCore::BitmapImageSource::decoder(this, a2);
    if (this)
    {
      v6 = (unsigned int *)this;
      v7 = (unsigned int *)((char *)this + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      (*(void (**)(WebCore::BitmapImageSource *, WebCore::FragmentedSharedBuffer *, uint64_t))(*(_QWORD *)this + 192))(this, a2, a3);
      *((_BYTE *)v5 + 32) = a3;
      this = (WebCore::BitmapImageSource *)WebCore::BitmapImageSource::encodedDataStatus(v5);
      do
      {
        v9 = __ldaxr(v7);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v7));
      if (!v10)
      {
        atomic_store(1u, v6 + 2);
        return (WebCore::BitmapImageSource *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  return this;
}

uint64_t WebCore::BitmapImageSource::destroyDecodedData(WebCore::BitmapImageSource *this, int a2)
{
  char canDestroyDecodedData;
  int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
    canDestroyDecodedData = WebCore::BitmapImageSource::canDestroyDecodedData(this);
  else
    canDestroyDecodedData = 0;
  v5 = WebCore::BitmapImageSource::primaryFrameIndex(this);
  result = WebCore::BitmapImageSource::currentFrameIndex(this);
  v7 = *((unsigned int *)this + 55);
  if ((_DWORD)v7)
  {
    v11 = 0;
    v8 = 0;
    v12 = result;
    while (1)
    {
      if ((canDestroyDecodedData & 1) != 0 || v11 != v5 && v11 != v12)
      {
        if ((a2 & 1) == 0 && v11 > v12)
          goto LABEL_5;
        if (v11 >= *((unsigned int *)this + 55))
        {
          __break(0xC471u);
          return result;
        }
        result = WebCore::ImageFrame::clearImage(*((_QWORD *)this + 26) + 80 * v11);
        v8 += result;
      }
      if (++v11 == v7)
        goto LABEL_5;
    }
  }
  v8 = 0;
LABEL_5:
  v9 = (*((_DWORD *)this + 57) + v8);
  *((_QWORD *)this + 28) = (*((_DWORD *)this + 56) - v8);
  result = WebCore::BitmapImageSource::decodedSizeChanged((uint64_t)this, -v9);
  if (a2)
  {
    v10 = *((_QWORD *)this + 23);
    if (!v10 || *(_QWORD *)(v10 + 32) == *(_QWORD *)(v10 + 40))
      return (uint64_t)WebCore::BitmapImageSource::resetData(this);
  }
  v13 = *((_QWORD *)this + 21);
  if (v13)
  {
    v14 = WebCore::BitmapImageSource::currentFrameIndex(this);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 208))(v13, v14);
  }
  return result;
}

uint64_t WebCore::BitmapImageSource::canDestroyDecodedData(WebCore::BitmapImageSource *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;

  v2 = *((_QWORD *)this + 23);
  if (v2 && *(_QWORD *)(v2 + 32) != *(_QWORD *)(v2 + 40))
    return 0;
  WebCore::BitmapImageSource::isLargeForDecoding(this);
  if (!v3)
    return 1;
  v4 = *((_QWORD *)this + 2);
  if (!v4)
    return 1;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 1;
  v7 = *(_QWORD *)(v5 + 32);
  if (!v7)
    return 1;
  v8 = *(_DWORD **)(v7 + 8);
  if (!v8)
    return 1;
  ++v8[2];
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 72))(v8);
  if (v8[2] == 1)
  {
    v9 = result;
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    return v9;
  }
  else
  {
    --v8[2];
  }
  return result;
}

uint64_t WebCore::BitmapImageSource::primaryFrameIndex(WebCore::BitmapImageSource *this)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  char *v12;
  uint64_t v13;

  v1 = (unsigned int *)((char *)this + 72);
  v13 = 0;
  if ((*((_WORD *)this + 20) & 0x10) == 0)
  {
    v12 = (char *)this + 72;
    v3 = *(_QWORD *)(*((_QWORD *)this + 20) + 168);
    if (v3 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3))
    {
      *((_QWORD *)this + 9) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
      *((_WORD *)this + 20) |= 0x10u;
      v4 = *((_QWORD *)this + 20);
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      if (!*(_DWORD *)(v4 + 224))
      {
        v6 = *(_DWORD *)(v4 + 228);
        *(_DWORD *)(v4 + 228) = v5;
        if (v6 != v5)
        {
          v7 = *(_QWORD *)(v4 + 16);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 32);
              if (v9)
              {
                v10 = *(_DWORD **)(v9 + 8);
                if (v10)
                {
                  ++v10[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 56))(v10);
                  if (v10[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
                  else
                    --v10[2];
                }
              }
            }
          }
        }
      }
      v1 = (unsigned int *)v12;
    }
    else
    {
      v1 = (unsigned int *)&v13;
    }
  }
  return *v1;
}

uint64_t WebCore::BitmapImageSource::currentFrameIndex(WebCore::BitmapImageSource *this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char *v12;
  uint64_t v14;

  v1 = *((_QWORD *)this + 22);
  if (v1)
    return *(unsigned int *)(v1 + 44);
  v2 = (unsigned int *)((char *)this + 72);
  v14 = 0;
  if ((*((_WORD *)this + 20) & 0x10) == 0)
  {
    v12 = (char *)this + 72;
    v4 = *(_QWORD *)(*((_QWORD *)this + 20) + 168);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4))
    {
      *((_QWORD *)this + 9) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
      *((_WORD *)this + 20) |= 0x10u;
      v5 = *((_QWORD *)this + 20);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*(_DWORD *)(v5 + 224))
      {
        v7 = *(_DWORD *)(v5 + 228);
        *(_DWORD *)(v5 + 228) = v6;
        if (v7 != v6)
        {
          v8 = *(_QWORD *)(v5 + 16);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 32);
              if (v10)
              {
                v11 = *(_DWORD **)(v10 + 8);
                if (v11)
                {
                  ++v11[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 56))(v11);
                  if (v11[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
                  else
                    --v11[2];
                }
              }
            }
          }
        }
      }
      v2 = (unsigned int *)v12;
    }
    else
    {
      v2 = (unsigned int *)&v14;
    }
  }
  return *v2;
}

unsigned int *WebCore::BitmapImageSource::resetData(WebCore::BitmapImageSource *this)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  result = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      return (unsigned int *)WebCore::BitmapImageSource::setData(this, *(WebCore::FragmentedSharedBuffer **)(v7 + 24), *((unsigned __int8 *)this + 32));
  }
  return result;
}

uint64_t WebCore::BitmapImageSource::decodedSizeChanged(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  if (a2)
  {
    v2 = *(_QWORD *)(this + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 32);
        if (v4)
        {
          v5 = *(_DWORD **)(v4 + 8);
          if (v5)
          {
            ++v5[2];
            this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 56))(v5);
            if (v5[2] == 1)
              return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
            else
              --v5[2];
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::BitmapImageSource::destroyNativeImageAtIndex(uint64_t this, unsigned int a2)
{
  uint64_t v2;

  if (*(_DWORD *)(this + 220) > a2)
  {
    v2 = this;
    this = WebCore::ImageFrame::clearImage(*(_QWORD *)(this + 208) + 80 * a2);
    if ((_DWORD)this)
    {
      *(_DWORD *)(v2 + 224) -= this;
      return WebCore::BitmapImageSource::decodedSizeChanged(v2, -(uint64_t)this);
    }
  }
  return this;
}

void WebCore::BitmapImageSource::isLargeForDecoding(WebCore::BitmapImageSource *this)
{
  WebCore::BitmapImageSource *v1;
  char *v2;
  uint64_t v3;
  __int16 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::BitmapImageSource *v8;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v13;
  __int16 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  char v48;
  unsigned int v49;

  v1 = this;
  v2 = (char *)this + 40;
  if ((*((_WORD *)this + 20) & 4) != 0)
  {
    v10 = *((_QWORD *)this + 7);
    v11 = (_DWORD *)((char *)this + 64);
  }
  else
  {
    v3 = *((_QWORD *)this + 20);
    v4 = *(_WORD *)(v3 + 40);
    v5 = (uint64_t *)(v3 + 72);
    v47 = 0;
    if ((v4 & 0x10) == 0)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v3 + 160) + 168);
      if (v33
        && (this = (WebCore::BitmapImageSource *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33),
            (_DWORD)this))
      {
        *(_QWORD *)(v3 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 64))(v33);
        *(_WORD *)(v3 + 40) |= 0x10u;
        v34 = *(_QWORD *)(v3 + 160);
        this = (WebCore::BitmapImageSource *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        if (!*(_DWORD *)(v34 + 224))
        {
          v35 = *(_DWORD *)(v34 + 228);
          *(_DWORD *)(v34 + 228) = (_DWORD)this;
          if (v35 != (_DWORD)this)
          {
            v36 = *(_QWORD *)(v34 + 16);
            if (v36)
            {
              v37 = *(_QWORD *)(v36 + 8);
              if (v37)
              {
                v38 = *(_QWORD *)(v37 + 32);
                if (v38)
                {
                  v39 = *(_DWORD **)(v38 + 8);
                  if (v39)
                  {
                    ++v39[2];
                    this = (WebCore::BitmapImageSource *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v39 + 56))(v39);
                    if (v39[2] == 1)
                      this = (WebCore::BitmapImageSource *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
                    else
                      --v39[2];
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v5 = &v47;
      }
    }
    if (*(_QWORD *)(v3 + 168) && (v6 = *v5, *(_DWORD *)(v3 + 220) > *v5))
    {
      v7 = *v5;
      v8 = (WebCore::BitmapImageSource *)(*(_QWORD *)(v3 + 208) + 80 * v6);
      if (*(_DWORD *)v8 != 2 || *((_DWORD *)v8 + 6) != 0)
      {
        this = (WebCore::BitmapImageSource *)WebCore::ImageFrame::clearImage(*(_QWORD *)(v3 + 208) + 80 * v6);
        if ((_DWORD)this)
        {
          *(_DWORD *)(v3 + 224) -= (_DWORD)this;
          this = (WebCore::BitmapImageSource *)WebCore::BitmapImageSource::decodedSizeChanged(v3, -(uint64_t)this);
        }
        LOBYTE(v47) = 1;
        BYTE4(v47) = 0;
        v48 = 0;
        if (*(_DWORD *)(v3 + 220) > v6)
        {
          v22 = *(_QWORD *)(v3 + 208);
          (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v3 + 168) + 168))(*(_QWORD *)(v3 + 168), v7, 0, &v47, v22 + 80 * v7);
          v49 = 0;
          this = (WebCore::BitmapImageSource *)WebCore::BitmapImageDescriptor::imageMetadata<int>(v3 + 40, (unsigned int *)(v3 + 88), &v49, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
          if ((_DWORD)this)
            *(double *)(v22 + 80 * v7 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 168) + 144))(*(_QWORD *)(v3 + 168), v7);
        }
      }
    }
    else
    {
      this = (WebCore::BitmapImageSource *)WebCore::ImageFrame::defaultFrame(this);
      v8 = this;
    }
    v10 = *((_QWORD *)v8 + 6);
    v11 = (_DWORD *)((char *)v8 + 56);
    if (*((int *)v8 + 1) >= 1 && *((_DWORD *)v8 + 2) >= 1)
    {
      *((_BYTE *)v1 + 64) = *v11;
      v11 = (_DWORD *)((char *)v1 + 64);
      *((_QWORD *)v1 + 7) = v10;
      *((_WORD *)v1 + 20) |= 4u;
    }
  }
  if (!*(_BYTE *)v11)
  {
    if ((*((_WORD *)v1 + 20) & 2) != 0)
    {
      v10 = *((_QWORD *)v1 + 6);
    }
    else
    {
      v13 = *((_QWORD *)v1 + 20);
      v14 = *(_WORD *)(v13 + 40);
      v15 = (uint64_t *)(v13 + 72);
      v47 = 0;
      if ((v14 & 0x10) == 0)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(v13 + 160) + 168);
        if (v40
          && (this = (WebCore::BitmapImageSource *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40),
              (_DWORD)this))
        {
          *(_QWORD *)(v13 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 64))(v40);
          *(_WORD *)(v13 + 40) |= 0x10u;
          v41 = *(_QWORD *)(v13 + 160);
          this = (WebCore::BitmapImageSource *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
          if (!*(_DWORD *)(v41 + 224))
          {
            v42 = *(_DWORD *)(v41 + 228);
            *(_DWORD *)(v41 + 228) = (_DWORD)this;
            if (v42 != (_DWORD)this)
            {
              v43 = *(_QWORD *)(v41 + 16);
              if (v43)
              {
                v44 = *(_QWORD *)(v43 + 8);
                if (v44)
                {
                  v45 = *(_QWORD *)(v44 + 32);
                  if (v45)
                  {
                    v46 = *(_DWORD **)(v45 + 8);
                    if (v46)
                    {
                      ++v46[2];
                      this = (WebCore::BitmapImageSource *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 56))(v46);
                      if (v46[2] == 1)
                        this = (WebCore::BitmapImageSource *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
                      else
                        --v46[2];
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v15 = &v47;
        }
      }
      if (*(_QWORD *)(v13 + 168) && (v16 = *v15, *(_DWORD *)(v13 + 220) > *v15))
      {
        v17 = *v15;
        v18 = (uint64_t *)(*(_QWORD *)(v13 + 208) + 80 * v16);
        if (*(_DWORD *)v18 != 2 || *((_DWORD *)v18 + 6) != 0)
        {
          v23 = WebCore::ImageFrame::clearImage(*(_QWORD *)(v13 + 208) + 80 * v16);
          if (v23)
          {
            *(_DWORD *)(v13 + 224) -= v23;
            WebCore::BitmapImageSource::decodedSizeChanged(v13, -(uint64_t)v23);
          }
          LOBYTE(v47) = 1;
          BYTE4(v47) = 0;
          v48 = 0;
          if (*(_DWORD *)(v13 + 220) > v16)
          {
            v24 = *(_QWORD *)(v13 + 208);
            (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v13 + 168) + 168))(*(_QWORD *)(v13 + 168), v17, 0, &v47, v24 + 80 * v17);
            v49 = 0;
            if (WebCore::BitmapImageDescriptor::imageMetadata<int>(v13 + 40, (unsigned int *)(v13 + 88), &v49, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1))*(double *)(v24 + 80 * v17 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 168) + 144))(*(_QWORD *)(v13 + 168), v17);
          }
        }
      }
      else
      {
        v18 = WebCore::ImageFrame::defaultFrame(this);
      }
      v10 = *(uint64_t *)((char *)v18 + 4);
      if ((int)v10 >= 1 && SHIDWORD(v10) >= 1)
      {
        *((_QWORD *)v1 + 6) = v10;
        *((_WORD *)v1 + 20) |= 2u;
      }
    }
  }
  v20 = HIDWORD(v10);
  if ((v10 & 0x80000000) != 0)
    LODWORD(v10) = -(int)v10;
  if ((v20 & 0x80000000) != 0)
    LODWORD(v20) = -(int)v20;
  if (((v20 * (unint64_t)v10) & 0xFFFFFFFF00000000) != 0)
  {
    __break(0xC471u);
  }
  else
  {
    v21 = (uint64_t *)((char *)v1 + 80);
    v47 = 0;
    if ((*((_WORD *)v1 + 20) & 0x20) == 0)
    {
      v25 = *(_QWORD *)(*((_QWORD *)v1 + 20) + 168);
      if (v25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25))
      {
        *((_QWORD *)v1 + 10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 56))(v25);
        *((_WORD *)v1 + 20) |= 0x20u;
        v26 = *((_QWORD *)v1 + 20);
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        if (!*(_DWORD *)(v26 + 224))
        {
          v28 = *(_DWORD *)(v26 + 228);
          *(_DWORD *)(v26 + 228) = v27;
          if (v28 != v27)
          {
            v29 = *(_QWORD *)(v26 + 16);
            if (v29)
            {
              v30 = *(_QWORD *)(v29 + 8);
              if (v30)
              {
                v31 = *(_QWORD *)(v30 + 32);
                if (v31)
                {
                  v32 = *(_DWORD **)(v31 + 8);
                  if (v32)
                  {
                    ++v32[2];
                    (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 56))(v32);
                    if (v32[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
                    else
                      --v32[2];
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v21 = &v47;
      }
    }
    if ((*v21 & 0xFFFFFFFELL) != 0)
    {
      LODWORD(v47) = 0;
      WebCore::BitmapImageDescriptor::imageMetadata<int>((uint64_t)v2, (unsigned int *)v1 + 22, (unsigned int *)&v47, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
    }
  }
}

uint64_t WebCore::BitmapImageSource::startAnimation(WebCore::BitmapImageSource *this)
{
  _BYTE v2[16];

  v2[0] = 1;
  v2[4] = 0;
  v2[12] = 0;
  return WebCore::BitmapImageSource::startAnimation(this, (uint64_t)v2);
}

uint64_t WebCore::BitmapImageSource::startAnimation(WebCore::BitmapImageSource *this, uint64_t a2)
{
  WTF **v4;
  uint64_t v5;
  __int16 v6;
  char *v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  void *v26;
  int v27;
  uint64_t v28;
  int v29;
  __int128 *v30;
  uint64_t v31;
  _BYTE v32[12];
  int v33;

  v4 = (WTF **)((char *)this + 176);
  v5 = *((_QWORD *)this + 22);
  if (v5)
  {
LABEL_32:
    if (*(_BYTE *)a2 == 1 && (WebCore::BitmapImageSource::isLargeForDecoding(this), v27))
    {
      v28 = *(_QWORD *)(a2 + 4);
      v29 = *(_DWORD *)(a2 + 12);
      v32[0] = 2;
      *(_QWORD *)&v32[4] = v28;
      v33 = v29;
      v30 = (__int128 *)v32;
      v31 = v5;
    }
    else
    {
      v31 = v5;
      v30 = (__int128 *)a2;
    }
    return WebCore::ImageFrameAnimator::startAnimation(v31, 0, v30);
  }
  v6 = *((_WORD *)this + 20);
  v7 = (char *)this + 44;
  *(_DWORD *)v32 = 1;
  if ((v6 & 1) == 0)
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 20) + 168);
    if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10))
    {
      *((_DWORD *)this + 11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      *((_WORD *)this + 20) |= 1u;
      v11 = *((_QWORD *)this + 20);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      if (!*(_DWORD *)(v11 + 224))
      {
        v13 = *(_DWORD *)(v11 + 228);
        *(_DWORD *)(v11 + 228) = v12;
        if (v13 != v12)
        {
          v14 = *(_QWORD *)(v11 + 16);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 8);
            if (v15)
            {
              v16 = *(_QWORD *)(v15 + 32);
              if (v16)
              {
                v17 = *(_DWORD **)(v16 + 8);
                if (v17)
                {
                  ++v17[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 56))(v17);
                  if (v17[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
                  else
                    --v17[2];
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v7 = v32;
    }
  }
  if (*(_DWORD *)v7 != 4)
    return 0;
  v8 = (char *)this + 80;
  *(_QWORD *)v32 = 0;
  if ((*((_WORD *)this + 20) & 0x20) == 0)
  {
    v18 = *(_QWORD *)(*((_QWORD *)this + 20) + 168);
    if (v18 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18))
    {
      *((_QWORD *)this + 10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 56))(v18);
      *((_WORD *)this + 20) |= 0x20u;
      v19 = *((_QWORD *)this + 20);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      if (!*(_DWORD *)(v19 + 224))
      {
        v21 = *(_DWORD *)(v19 + 228);
        *(_DWORD *)(v19 + 228) = v20;
        if (v21 != v20)
        {
          v22 = *(_QWORD *)(v19 + 16);
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 8);
            if (v23)
            {
              v24 = *(_QWORD *)(v23 + 32);
              if (v24)
              {
                v25 = *(_DWORD **)(v24 + 8);
                if (v25)
                {
                  ++v25[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 56))(v25);
                  if (v25[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
                  else
                    --v25[2];
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v8 = v32;
    }
  }
  if ((*(_QWORD *)v8 & 0xFFFFFFFELL) == 0)
    return 0;
  *(_DWORD *)v32 = 0;
  result = WebCore::BitmapImageDescriptor::imageMetadata<int>((uint64_t)this + 40, (unsigned int *)this + 22, (unsigned int *)v32, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
  if ((_DWORD)result)
  {
    WebCore::ImageFrameAnimator::create(this, (uint64_t *)v32);
    std::unique_ptr<WebCore::ImageFrameAnimator>::operator=[abi:sn180100](v4, (WTF **)v32);
    std::unique_ptr<WebCore::ImageFrameAnimator>::~unique_ptr[abi:sn180100]((WTF **)v32, v26);
    v5 = *((_QWORD *)this + 22);
    if (!v5)
      return 0;
    goto LABEL_32;
  }
  return result;
}

uint64_t *WebCore::BitmapImageSource::stopAnimation(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = this[22];
  if (v1)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      v2 = this;
      WebCore::ImageFrameAnimator::stopAnimation((WebCore::ImageFrameAnimator *)this[22]);
      this = (uint64_t *)v2[23];
      if (this)
      {
        if (this[4] == this[5])
          return WebCore::ImageFrameWorkQueue::stop((WebCore::ImageFrameWorkQueue *)this);
      }
    }
  }
  return this;
}

uint64_t *WebCore::BitmapImageSource::stopDecodingWorkQueue(WebCore::BitmapImageSource *this)
{
  uint64_t *result;

  result = (uint64_t *)*((_QWORD *)this + 23);
  if (result)
  {
    if (result[4] == result[5])
      return WebCore::ImageFrameWorkQueue::stop((WebCore::ImageFrameWorkQueue *)result);
  }
  return result;
}

WebCore::BitmapImageSource *WebCore::BitmapImageSource::resetAnimation(WebCore::BitmapImageSource *this)
{
  WebCore::BitmapImageSource *result;

  result = (WebCore::BitmapImageSource *)*((_QWORD *)this + 22);
  if (result)
    return WebCore::ImageFrameAnimator::resetAnimation(result);
  return result;
}

uint64_t WebCore::BitmapImageSource::frameCount(WebCore::BitmapImageSource *this)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  char *v12;
  uint64_t v13;

  v1 = (unsigned int *)((char *)this + 80);
  v13 = 0;
  if ((*((_WORD *)this + 20) & 0x20) == 0)
  {
    v12 = (char *)this + 80;
    v3 = *(_QWORD *)(*((_QWORD *)this + 20) + 168);
    if (v3 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3))
    {
      *((_QWORD *)this + 10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      *((_WORD *)this + 20) |= 0x20u;
      v4 = *((_QWORD *)this + 20);
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      if (!*(_DWORD *)(v4 + 224))
      {
        v6 = *(_DWORD *)(v4 + 228);
        *(_DWORD *)(v4 + 228) = v5;
        if (v6 != v5)
        {
          v7 = *(_QWORD *)(v4 + 16);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 32);
              if (v9)
              {
                v10 = *(_DWORD **)(v9 + 8);
                if (v10)
                {
                  ++v10[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 56))(v10);
                  if (v10[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
                  else
                    --v10[2];
                }
              }
            }
          }
        }
      }
      v1 = (unsigned int *)v12;
    }
    else
    {
      v1 = (unsigned int *)&v13;
    }
  }
  return *v1;
}

BOOL WebCore::BitmapImageSource::isAnimating(WebCore::BitmapImageSource *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 22);
  return v1 && *(_QWORD *)(v1 + 16) != 0;
}

BOOL WebCore::BitmapImageSource::hasEverAnimated(WebCore::BitmapImageSource *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 22);
  return v1 && *(double *)(v1 + 56) != 0.0;
}

uint64_t WebCore::BitmapImageSource::size(uint64_t result, char a2)
{
  uint64_t v3;
  WebCore::BitmapImageDescriptor *v4;
  uint64_t v5;
  __int16 v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v16;
  __int16 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  WebCore::CGSubimageCacheWithTimer *v67;
  void *v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  unsigned int v74;

  v3 = result;
  v4 = (WebCore::BitmapImageDescriptor *)(result + 40);
  if ((*(_WORD *)(result + 40) & 4) != 0)
  {
    v13 = *(_QWORD *)(result + 56);
    v14 = (_DWORD *)(result + 64);
  }
  else
  {
    v5 = *(_QWORD *)(result + 160);
    v6 = *(_WORD *)(v5 + 40);
    v7 = (void **)(v5 + 72);
    v72 = 0;
    if ((v6 & 0x10) == 0)
    {
      v46 = *(_QWORD *)(*(_QWORD *)(v5 + 160) + 168);
      if (v46 && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46), (_DWORD)result))
      {
        *(_QWORD *)(v5 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 64))(v46);
        *(_WORD *)(v5 + 40) |= 0x10u;
        v47 = *(_QWORD *)(v5 + 160);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
        if (!*(_DWORD *)(v47 + 224))
        {
          v48 = *(_DWORD *)(v47 + 228);
          *(_DWORD *)(v47 + 228) = result;
          if (v48 != (_DWORD)result)
          {
            v49 = *(_QWORD *)(v47 + 16);
            if (v49)
            {
              v50 = *(_QWORD *)(v49 + 8);
              if (v50)
              {
                v51 = *(_QWORD *)(v50 + 32);
                if (v51)
                {
                  v52 = *(_DWORD **)(v51 + 8);
                  if (v52)
                  {
                    ++v52[2];
                    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v52 + 56))(v52);
                    if (v52[2] == 1)
                      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
                    else
                      --v52[2];
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v7 = (void **)&v72;
      }
    }
    if (*(_QWORD *)(v5 + 168) && (v8 = *v7, *(_DWORD *)(v5 + 220) > *v7))
    {
      v9 = *v7;
      v10 = *(_QWORD *)(v5 + 208);
      v11 = v10 + 80 * v8;
      if (*(_DWORD *)v11 != 2 || *(_DWORD *)(v11 + 24) != 0)
      {
        v31 = v10 + 80 * v8;
        v34 = *(_QWORD *)(v31 + 16);
        v33 = (uint64_t *)(v31 + 16);
        v32 = v34;
        if (v34)
        {
          v35 = *(_DWORD *)(v10 + 80 * v8 + 4);
          v36 = *(_DWORD *)(v10 + 80 * v8 + 8);
          if (v35 < 0)
            v35 = -v35;
          if (v36 < 0)
            v36 = -v36;
          v37 = v36 * (unint64_t)v35;
          if ((v37 & 0xFFFFFFFF00000000) != 0)
          {
            __break(0xC471u);
            return result;
          }
          v71 = 4 * v37;
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v32 + 48) + 16))(*(_QWORD *)(v32 + 48));
          if (WebCore::CGSubimageCacheWithTimer::s_cache)
          {
            v70 = (int)v8;
            v8 = *(void **)result;
            v67 = (WebCore::CGSubimageCacheWithTimer *)WebCore::CGSubimageCacheWithTimer::subimageCache((WebCore::CGSubimageCacheWithTimer *)result);
            v68 = v8;
            LODWORD(v8) = v70;
            WebCore::CGSubimageCacheWithTimer::clearImageAndSubimages(v67, v68);
          }
          v39 = *v33;
          *v33 = 0;
          if (v39)
            result = (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v39 + 8), v38);
          v40 = (_BYTE *)(v10 + 80 * v9);
          v40[28] = 1;
          v40[32] = 0;
          v40[40] = 0;
          if (v71)
          {
            *(_DWORD *)(v5 + 224) -= v71;
            result = WebCore::BitmapImageSource::decodedSizeChanged(v5, -(uint64_t)v71);
          }
        }
        LOBYTE(v72) = 1;
        BYTE4(v72) = 0;
        v73 = 0;
        if (*(_DWORD *)(v5 + 220) > v8)
        {
          v41 = *(_QWORD *)(v5 + 208);
          (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v5 + 168) + 168))(*(_QWORD *)(v5 + 168), v9, 0, &v72, v41 + 80 * v9);
          v74 = 0;
          result = WebCore::BitmapImageDescriptor::imageMetadata<int>(v5 + 40, (unsigned int *)(v5 + 88), &v74, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
          if ((_DWORD)result)
            *(double *)(v41 + 80 * v9 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 168) + 144))(*(_QWORD *)(v5 + 168), v9);
        }
      }
    }
    else
    {
      result = (uint64_t)WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)result);
      v11 = result;
    }
    v13 = *(_QWORD *)(v11 + 48);
    v14 = (_DWORD *)(v11 + 56);
    if (*(int *)(v11 + 4) >= 1 && *(_DWORD *)(v11 + 8) >= 1)
    {
      *(_BYTE *)(v3 + 64) = *v14;
      v14 = (_DWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 56) = v13;
      *(_WORD *)(v3 + 40) |= 4u;
    }
  }
  if (*(_BYTE *)v14)
  {
    if (!a2)
      a2 = WebCore::BitmapImageDescriptor::orientation(v4);
    v69 = __ROR8__(v13, 32);
    if (((a2 - 5) & 0xFC) != 0)
      return v13;
    else
      return v69;
  }
  else
  {
    if ((*(_WORD *)(v3 + 40) & 2) != 0)
    {
      v23 = *(_QWORD *)(v3 + 48);
    }
    else
    {
      v16 = *(_QWORD *)(v3 + 160);
      v17 = *(_WORD *)(v16 + 40);
      v18 = (uint64_t *)(v16 + 72);
      v72 = 0;
      if ((v17 & 0x10) == 0)
      {
        v53 = *(_QWORD *)(*(_QWORD *)(v16 + 160) + 168);
        if (v53 && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53), (_DWORD)result))
        {
          *(_QWORD *)(v16 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 64))(v53);
          *(_WORD *)(v16 + 40) |= 0x10u;
          v54 = *(_QWORD *)(v16 + 160);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
          if (!*(_DWORD *)(v54 + 224))
          {
            v55 = *(_DWORD *)(v54 + 228);
            *(_DWORD *)(v54 + 228) = result;
            if (v55 != (_DWORD)result)
            {
              v56 = *(_QWORD *)(v54 + 16);
              if (v56)
              {
                v57 = *(_QWORD *)(v56 + 8);
                if (v57)
                {
                  v58 = *(_QWORD *)(v57 + 32);
                  if (v58)
                  {
                    v59 = *(_DWORD **)(v58 + 8);
                    if (v59)
                    {
                      ++v59[2];
                      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v59 + 56))(v59);
                      if (v59[2] == 1)
                        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
                      else
                        --v59[2];
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v18 = &v72;
        }
      }
      if (*(_QWORD *)(v16 + 168) && (v19 = *v18, *(_DWORD *)(v16 + 220) > *v18))
      {
        v20 = *v18;
        v21 = *(_QWORD *)(v16 + 208) + 80 * v19;
        if (*(_DWORD *)v21 != 2 || *(_DWORD *)(v21 + 24) != 0)
        {
          result = WebCore::ImageFrame::clearImage(*(_QWORD *)(v16 + 208) + 80 * v19);
          if ((_DWORD)result)
          {
            *(_DWORD *)(v16 + 224) -= result;
            result = WebCore::BitmapImageSource::decodedSizeChanged(v16, -(uint64_t)result);
          }
          LOBYTE(v72) = 1;
          BYTE4(v72) = 0;
          v73 = 0;
          if (*(_DWORD *)(v16 + 220) > v19)
          {
            v42 = *(_QWORD *)(v16 + 208);
            (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v16 + 168) + 168))(*(_QWORD *)(v16 + 168), v20, 0, &v72, v42 + 80 * v20);
            v74 = 0;
            result = WebCore::BitmapImageDescriptor::imageMetadata<int>(v16 + 40, (unsigned int *)(v16 + 88), &v74, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
            if ((_DWORD)result)
              *(double *)(v42 + 80 * v20 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 168) + 144))(*(_QWORD *)(v16 + 168), v20);
          }
        }
      }
      else
      {
        result = (uint64_t)WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)result);
        v21 = result;
      }
      v23 = *(_QWORD *)(v21 + 4);
      if ((int)v23 >= 1 && SHIDWORD(v23) >= 1)
      {
        *(_QWORD *)(v3 + 48) = v23;
        *(_WORD *)(v3 + 40) |= 2u;
      }
    }
    if (!a2)
    {
      if ((*(_WORD *)(v3 + 40) & 8) != 0)
      {
        a2 = *(_BYTE *)(v3 + 68);
      }
      else
      {
        v24 = *(_QWORD *)(v3 + 160);
        v25 = *(_WORD *)(v24 + 40);
        v26 = (uint64_t *)(v24 + 72);
        v72 = 0;
        if ((v25 & 0x10) == 0)
        {
          v60 = *(_QWORD *)(*(_QWORD *)(v24 + 160) + 168);
          if (v60 && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60), (_DWORD)result))
          {
            *(_QWORD *)(v24 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 64))(v60);
            *(_WORD *)(v24 + 40) |= 0x10u;
            v61 = *(_QWORD *)(v24 + 160);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
            if (!*(_DWORD *)(v61 + 224))
            {
              v62 = *(_DWORD *)(v61 + 228);
              *(_DWORD *)(v61 + 228) = result;
              if (v62 != (_DWORD)result)
              {
                v63 = *(_QWORD *)(v61 + 16);
                if (v63)
                {
                  v64 = *(_QWORD *)(v63 + 8);
                  if (v64)
                  {
                    v65 = *(_QWORD *)(v64 + 32);
                    if (v65)
                    {
                      v66 = *(_DWORD **)(v65 + 8);
                      if (v66)
                      {
                        ++v66[2];
                        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v66 + 56))(v66);
                        if (v66[2] == 1)
                          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v66 + 8))(v66);
                        else
                          --v66[2];
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            v26 = &v72;
          }
        }
        if (*(_QWORD *)(v24 + 168) && (v27 = *v26, *(_DWORD *)(v24 + 220) > *v26))
        {
          v28 = *v26;
          v29 = (uint64_t *)(*(_QWORD *)(v24 + 208) + 80 * v27);
          if (*(_DWORD *)v29 != 2)
          {
            v43 = *((unsigned int *)v29 + 6);
            v44 = WebCore::ImageFrame::clearImage(*(_QWORD *)(v24 + 208) + 80 * v27);
            if (v44)
            {
              *(_DWORD *)(v24 + 224) -= v44;
              WebCore::BitmapImageSource::decodedSizeChanged(v24, -(uint64_t)v44);
            }
            LOBYTE(v72) = 1;
            BYTE4(v72) = 0;
            v73 = 0;
            if (*(_DWORD *)(v24 + 220) > v27)
            {
              v45 = *(_QWORD *)(v24 + 208);
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v24 + 168) + 168))(*(_QWORD *)(v24 + 168), v28, v43, &v72, v45 + 80 * v28);
              v74 = 0;
              if (WebCore::BitmapImageDescriptor::imageMetadata<int>(v24 + 40, (unsigned int *)(v24 + 88), &v74, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1))*(double *)(v45 + 80 * v28 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 168) + 144))(*(_QWORD *)(v24 + 168), v28);
            }
          }
        }
        else
        {
          v29 = WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)result);
        }
        a2 = *((_BYTE *)v29 + 44);
        if (*((int *)v29 + 1) >= 1 && *((int *)v29 + 2) >= 1)
        {
          *(_BYTE *)(v3 + 68) = a2;
          *(_WORD *)(v3 + 40) |= 8u;
        }
      }
    }
    v30 = __ROR8__(v23, 32);
    if ((a2 - 5) <= 3u)
      return v30;
    else
      return v23;
  }
}

uint64_t WebCore::BitmapImageSource::decode(uint64_t a1, unint64_t a2)
{
  unsigned int *v2;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  void *v37;
  __int128 v38;

  v2 = (unsigned int *)a2;
  v4 = (uint64_t **)(a1 + 192);
  v5 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 200))
  {
    v2 = WTF::Vector<WTF::Function<void ()(WebCore::DecodingStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 192), v5 + 1, a2);
    v5 = *(unsigned int *)(a1 + 204);
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 192) + 8 * v5);
  }
  else
  {
    v6 = &(*v4)[v5];
  }
  v7 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 204) = v5 + 1;
  v8 = WebCore::BitmapImageSource::currentFrameIndex((WebCore::BitmapImageSource *)a1);
  LOBYTE(v38) = 2;
  BYTE4(v38) = 0;
  BYTE12(v38) = 0;
  result = *(_QWORD *)(a1 + 184);
  if (!result
    || (result = WebCore::ImageFrameWorkQueue::isPendingDecodingAtIndex(result, v8, 0, (uint64_t)&v38), (result & 1) == 0))
  {
    result = *(_DWORD *)(a1 + 220) <= v8
           ? (uint64_t)WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)result)
           : *(_QWORD *)(a1 + 208) + 80 * v8;
    v10 = *(_DWORD *)result == 2
       && *(_QWORD *)(result + 16)
       && *(int *)(result + 24) <= 0
       && *(_BYTE *)(result + 28)
       && !*(_BYTE *)(result + 40);
    v11 = *(_QWORD *)(a1 + 176);
    if (!v11)
    {
      v12 = *(unsigned __int16 *)(a1 + 40);
      v13 = (__int128 *)(a1 + 44);
      LODWORD(v38) = 1;
      if ((v12 & 1) == 0)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 168);
        if (v23 && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23), (_DWORD)result))
        {
          *(_DWORD *)(a1 + 44) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          *(_WORD *)(a1 + 40) |= 1u;
          v24 = *(_QWORD *)(a1 + 160);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
          if (!*(_DWORD *)(v24 + 224))
          {
            v25 = *(_DWORD *)(v24 + 228);
            *(_DWORD *)(v24 + 228) = result;
            if (v25 != (_DWORD)result)
            {
              v26 = *(_QWORD *)(v24 + 16);
              if (v26)
              {
                v27 = *(_QWORD *)(v26 + 8);
                if (v27)
                {
                  v28 = *(_QWORD *)(v27 + 32);
                  if (v28)
                  {
                    v29 = *(_DWORD **)(v28 + 8);
                    if (v29)
                    {
                      ++v29[2];
                      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 56))(v29);
                      if (v29[2] == 1)
                        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
                      else
                        --v29[2];
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v13 = &v38;
        }
      }
      if (*(_DWORD *)v13 != 4)
        goto LABEL_17;
      v14 = (__int128 *)(a1 + 80);
      *(_QWORD *)&v38 = 0;
      if ((*(_WORD *)(a1 + 40) & 0x20) == 0)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 168);
        if (v30 && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30), (_DWORD)result))
        {
          *(_QWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 56))(v30);
          *(_WORD *)(a1 + 40) |= 0x20u;
          v31 = *(_QWORD *)(a1 + 160);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
          if (!*(_DWORD *)(v31 + 224))
          {
            v32 = *(_DWORD *)(v31 + 228);
            *(_DWORD *)(v31 + 228) = result;
            if (v32 != (_DWORD)result)
            {
              v33 = *(_QWORD *)(v31 + 16);
              if (v33)
              {
                v34 = *(_QWORD *)(v33 + 8);
                if (v34)
                {
                  v35 = *(_QWORD *)(v34 + 32);
                  if (v35)
                  {
                    v36 = *(_DWORD **)(v35 + 8);
                    if (v36)
                    {
                      ++v36[2];
                      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v36 + 56))(v36);
                      if (v36[2] == 1)
                        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
                      else
                        --v36[2];
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v14 = &v38;
        }
      }
      if ((*(_QWORD *)v14 & 0xFFFFFFFELL) == 0)
        goto LABEL_17;
      LODWORD(v38) = 0;
      result = WebCore::BitmapImageDescriptor::imageMetadata<int>(a1 + 40, (unsigned int *)(a1 + 88), (unsigned int *)&v38, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
      if (!(_DWORD)result)
        goto LABEL_17;
      WebCore::ImageFrameAnimator::create((WebCore::ImageFrameAnimator *)a1, (uint64_t *)&v38);
      std::unique_ptr<WebCore::ImageFrameAnimator>::operator=[abi:sn180100]((WTF **)(a1 + 176), (WTF **)&v38);
      result = (uint64_t)std::unique_ptr<WebCore::ImageFrameAnimator>::~unique_ptr[abi:sn180100]((WTF **)&v38, v37);
      v11 = *(_QWORD *)(a1 + 176);
      if (!v11)
        goto LABEL_17;
    }
    if (((*(double *)(v11 + 56) == 0.0) & ~v10) != 0
      || (LOBYTE(v38) = 2,
          BYTE4(v38) = 0,
          BYTE12(v38) = 0,
          result = WebCore::BitmapImageSource::startAnimation((WebCore::BitmapImageSource *)a1, (uint64_t)&v38),
          (result & 1) == 0))
    {
LABEL_17:
      if ((v10 & 1) != 0)
      {
        v15 = *(unsigned int *)(a1 + 204);
        if ((_DWORD)v15)
        {
          v16 = *v4;
          v17 = 8 * v15;
          do
          {
            v18 = *v16++;
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, 2);
            v17 -= 8;
          }
          while (v17);
          if (*(_DWORD *)(a1 + 200))
          {
            v20 = *(unsigned int *)(a1 + 204);
            v21 = *(WTF **)(a1 + 192);
            if ((_DWORD)v20)
            {
              v22 = 8 * v20;
              do
              {
                result = *(_QWORD *)v21;
                *(_QWORD *)v21 = 0;
                if (result)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                v21 = (WTF *)((char *)v21 + 8);
                v22 -= 8;
              }
              while (v22);
              *(_DWORD *)(a1 + 204) = 0;
              v21 = *(WTF **)(a1 + 192);
            }
            if (v21)
            {
              *(_QWORD *)(a1 + 192) = 0;
              *(_DWORD *)(a1 + 200) = 0;
              return WTF::fastFree(v21, v19);
            }
          }
        }
      }
      else
      {
        LOBYTE(v38) = 2;
        BYTE4(v38) = 0;
        BYTE12(v38) = 0;
        return WebCore::BitmapImageSource::requestNativeImageAtIndex(a1, v8, 0, 0, &v38);
      }
    }
  }
  return result;
}

uint64_t WebCore::BitmapImageSource::requestNativeImageAtIndex(uint64_t a1, unsigned int a2, int a3, char a4, __int128 *a5)
{
  unsigned int *v10;
  _DWORD v12[2];
  char v13;
  __int128 v14;

  if (*(_DWORD *)(a1 + 220) <= a2)
    return 0;
  v10 = WebCore::BitmapImageSource::workQueue((WebCore::BitmapImageSource *)a1);
  v12[0] = a2;
  v12[1] = a3;
  v13 = a4;
  v14 = *a5;
  WebCore::ImageFrameWorkQueue::dispatch((WebCore::ImageFrameWorkQueue *)v10, (__int128 *)v12);
  if (*(_BYTE *)(a1 + 241))
    WebCore::BitmapImageSource::resetData((WebCore::BitmapImageSource *)a1);
  return 3;
}

uint64_t WebCore::BitmapImageSource::callDecodeCallbacks(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 204);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(uint64_t **)(result + 192);
    v6 = 8 * v2;
    do
    {
      v7 = *v5++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      v6 -= 8;
    }
    while (v6);
    if (*(_DWORD *)(v4 + 200))
    {
      v9 = *(unsigned int *)(v4 + 204);
      v10 = *(WTF **)(v4 + 192);
      if ((_DWORD)v9)
      {
        v11 = 8 * v9;
        do
        {
          result = *(_QWORD *)v10;
          *(_QWORD *)v10 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v10 = (WTF *)((char *)v10 + 8);
          v11 -= 8;
        }
        while (v11);
        *(_DWORD *)(v4 + 204) = 0;
        v10 = *(WTF **)(v4 + 192);
      }
      if (v10)
      {
        *(_QWORD *)(v4 + 192) = 0;
        *(_DWORD *)(v4 + 200) = 0;
        return WTF::fastFree(v10, v8);
      }
    }
  }
  return result;
}

uint64_t WebCore::BitmapImageSource::imageFrameAtIndexAvailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v4 = a4;
  result = WebCore::BitmapImageSource::callDecodeCallbacks(a1, a4);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 32);
        if (v9)
        {
          v10 = *(_DWORD **)(v9 + 8);
          if (v10)
          {
            ++v10[2];
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 80))(v10);
            if (v10[2] == 1)
              return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            else
              --v10[2];
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::BitmapImageSource::imageFrameDecodeAtIndexHasFinished(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 176);
  if (!v7)
    return WebCore::BitmapImageSource::imageFrameAtIndexAvailable(a1, a2, a3, a4);
  result = WebCore::ImageFrameAnimator::imageFrameDecodeAtIndexHasFinished(v7, a2, a3, a4);
  if ((result & 1) == 0)
    return WebCore::BitmapImageSource::imageFrameAtIndexAvailable(a1, a2, a3, a4);
  return result;
}

uint64_t *WebCore::BitmapImageSource::imageFrameDecodeAtIndexHasFinished(uint64_t **this, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  void *v9;
  uint64_t v10;
  WebCore::BitmapImageSource *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *result;
  uint64_t v15;

  if (*a6)
  {
    v15 = *a6;
    *a6 = 0;
    WebCore::BitmapImageSource::cacheNativeImageAtIndex((uint64_t)this, a2, a3, a5, &v15);
    WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v15, v9);
    v10 = WebCore::BitmapImageSource::frameDecodingStatusAtIndex((WebCore::BitmapImageSource *)this, a2);
    v11 = (WebCore::BitmapImageSource *)this;
    v12 = a2;
    v13 = a4;
  }
  else
  {
    WebCore::BitmapImageSource::destroyNativeImageAtIndex((uint64_t)this, a2);
    v11 = (WebCore::BitmapImageSource *)this;
    v12 = a2;
    v13 = a4;
    v10 = 0;
  }
  result = (uint64_t *)WebCore::BitmapImageSource::imageFrameDecodeAtIndexHasFinished((uint64_t)v11, v12, v13, v10);
  if ((a4 & 1) == 0)
  {
    result = this[23];
    if (result)
    {
      if (result[4] == result[5])
        return WebCore::ImageFrameWorkQueue::stop((WebCore::ImageFrameWorkQueue *)result);
    }
  }
  return result;
}

uint64_t WebCore::BitmapImageSource::cacheNativeImageAtIndex(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  WebCore::CGSubimageCacheWithTimer *v20;
  void *v21;
  uint64_t v22;
  _BYTE *v23;
  void *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  void *v50;
  WebCore::CGSubimageCacheWithTimer *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;

  if (*(_DWORD *)(result + 220) <= a2)
    return result;
  v9 = result;
  v10 = a2;
  v11 = *(_QWORD *)(result + 208);
  v12 = v11 + 80 * a2;
  v15 = *(_QWORD *)(v12 + 16);
  v14 = (uint64_t *)(v12 + 16);
  v13 = v15;
  if (v15)
  {
    v16 = *(_DWORD *)(v11 + 80 * a2 + 4);
    v17 = *(_DWORD *)(v11 + 80 * a2 + 8);
    if (v16 < 0)
      v16 = -v16;
    if (v17 < 0)
      v17 = -v17;
    v18 = v17 * (unint64_t)v16;
    if ((v18 & 0xFFFFFFFF00000000) != 0)
    {
      __break(0xC471u);
      goto LABEL_66;
    }
    v19 = 4 * v18;
    v20 = (WebCore::CGSubimageCacheWithTimer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 48) + 16))(*(_QWORD *)(v13 + 48));
    if (WebCore::CGSubimageCacheWithTimer::s_cache)
    {
      v50 = *(void **)v20;
      v51 = (WebCore::CGSubimageCacheWithTimer *)WebCore::CGSubimageCacheWithTimer::subimageCache(v20);
      WebCore::CGSubimageCacheWithTimer::clearImageAndSubimages(v51, v50);
    }
    v22 = *v14;
    *v14 = 0;
    if (v22)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v22 + 8), v21);
    v23 = (_BYTE *)(v11 + 80 * v10);
    v23[28] = 1;
    v23[32] = 0;
    v23[40] = 0;
    if (v19)
    {
      *(_DWORD *)(v9 + 224) -= v19;
      WebCore::BitmapImageSource::decodedSizeChanged(v9, -(uint64_t)v19);
    }
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a5 + 48) + 24))(*(_QWORD *)(*a5 + 48));
  v25 = HIDWORD(result);
  if ((int)result >= 0)
    v26 = result;
  else
    v26 = -(int)result;
  if (result < 0)
    LODWORD(v25) = -HIDWORD(result);
  if (!((*(unsigned int *)(v9 + 224) + 4 * v26 * (unint64_t)v25) >> 32))
  {
    v53 = a3;
    if (*(_DWORD *)(v9 + 220) <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19613D9CCLL);
    }
    v27 = *(_QWORD *)(v9 + 208);
    v28 = v27 + 80 * v10;
    v29 = *a5;
    *a5 = 0;
    v32 = *(_QWORD *)(v28 + 16);
    v31 = (_QWORD *)(v28 + 16);
    v30 = v32;
    *v31 = v29;
    if (!v32)
      goto LABEL_30;
    v33 = *(_QWORD *)(v30 + 8);
    if (__ldaxr((unsigned __int8 *)v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v33))
    {
LABEL_25:
      v35 = *(_QWORD *)(v33 + 8);
      v36 = v35 - 1;
      *(_QWORD *)(v33 + 8) = v35 - 1;
      if (v35 == 1)
      {
        v52 = *(_QWORD *)(v33 + 16);
        v37 = *(_QWORD *)(v33 + 24);
        *(_QWORD *)(v33 + 24) = 0;
        v38 = v52 != 0;
      }
      else
      {
        v37 = 0;
        v38 = 1;
      }
      v39 = __ldxr((unsigned __int8 *)v33);
      if (v39 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v33))
          goto LABEL_29;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_29:
      if (!v36)
      {
        if (v37)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        if (!v38)
          result = WTF::fastFree((WTF *)v33, v24);
      }
LABEL_30:
      if (*(_DWORD *)(v9 + 220) > a2)
      {
        v40 = *(_QWORD *)(v9 + 208);
        (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 168) + 168))(*(_QWORD *)(v9 + 168), v10, v53, a4, v40 + 80 * v10);
        v54 = 0;
        result = WebCore::BitmapImageDescriptor::imageMetadata<int>(v9 + 40, (unsigned int *)(v9 + 88), &v54, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
        if ((_DWORD)result)
          *(double *)(v40 + 80 * v10 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 168) + 144))(*(_QWORD *)(v9 + 168), v10);
      }
      if (!*v31)
        goto LABEL_41;
      v41 = *(_DWORD *)(v27 + 80 * v10 + 4);
      v42 = *(_DWORD *)(v27 + 80 * v10 + 8);
      if (v41 < 0)
        v41 = -v41;
      if (v42 < 0)
        v42 = -v42;
      v43 = v42 * (unint64_t)v41;
      if ((v43 & 0xFFFFFFFF00000000) == 0)
      {
        v44 = 4 * v43;
        if (v44)
        {
          v45 = *(_DWORD *)(v9 + 228);
          *(_QWORD *)(v9 + 224) = (*(_DWORD *)(v9 + 224) + v44);
          if (v45 != v44)
          {
            v46 = *(_QWORD *)(v9 + 16);
            if (v46)
            {
              v47 = *(_QWORD *)(v46 + 8);
              if (v47)
              {
                v48 = *(_QWORD *)(v47 + 32);
                if (v48)
                {
                  v49 = *(_DWORD **)(v48 + 8);
                  if (v49)
                  {
                    ++v49[2];
                    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 56))(v49);
                    if (v49[2] == 1)
                      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
                    else
                      --v49[2];
                  }
                }
              }
            }
          }
        }
LABEL_41:
        if (*(_DWORD *)(v9 + 220) <= a2)
          result = (uint64_t)WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)result);
        else
          result = *(_QWORD *)(v9 + 208) + 80 * v10;
        if (*(_DWORD *)result == 2)
          ++*(_DWORD *)(v9 + 232);
        return result;
      }
      __break(0xC471u);
LABEL_66:
      JUMPOUT(0x19613D9C4);
    }
    result = MEMORY[0x19AEA534C](v33);
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::BitmapImageSource::frameDecodingStatusAtIndex(WebCore::BitmapImageSource *this, unsigned int a2)
{
  uint64_t *v2;
  unsigned int v4;
  char v5;

  LOBYTE(v4) = 0;
  v5 = 0;
  v2 = WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded((uint64_t)this, a2, &v4);
  return WebCore::ImageFrame::decodingStatus((WebCore::ImageFrame *)v2);
}

uint64_t *WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v11;
  uint64_t v12;
  _BYTE v13[16];
  unsigned int v14;

  if (!*(_QWORD *)(a1 + 168) || *(_DWORD *)(a1 + 220) <= a2)
    return WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)a1);
  v5 = a2;
  v6 = (_DWORD *)(*(_QWORD *)(a1 + 208) + 80 * a2);
  v7 = v6[6];
  if (*((_BYTE *)a3 + 4))
    v8 = *a3;
  else
    v8 = v7;
  if (*v6 != 2 || (_DWORD)v8 != v7)
  {
    v11 = WebCore::ImageFrame::clearImage(*(_QWORD *)(a1 + 208) + 80 * a2);
    if (v11)
    {
      *(_DWORD *)(a1 + 224) -= v11;
      WebCore::BitmapImageSource::decodedSizeChanged(a1, -(uint64_t)v11);
    }
    v13[0] = 1;
    v13[4] = 0;
    v13[12] = 0;
    if (*(_DWORD *)(a1 + 220) > a2)
    {
      v12 = *(_QWORD *)(a1 + 208);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 168) + 168))(*(_QWORD *)(a1 + 168), v5, v8, v13, v12 + 80 * v5);
      v14 = 0;
      if (WebCore::BitmapImageDescriptor::imageMetadata<int>(a1 + 40, (unsigned int *)(a1 + 88), &v14, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1))*(double *)(v12 + 80 * v5 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 144))(*(_QWORD *)(a1 + 168), v5);
    }
  }
  return (uint64_t *)v6;
}

uint64_t WebCore::BitmapImageSource::requestNativeImageAtIndexIfNeeded(uint64_t a1, unsigned int a2, int a3, char a4, __int128 *a5)
{
  unsigned int v5;
  WebCore::ImageFrame *isPendingDecodingAtIndex;
  uint64_t *v12;
  int v14;
  char v15;

  v5 = *(_DWORD *)(a1 + 220);
  if (v5 <= a2)
    return 0;
  isPendingDecodingAtIndex = *(WebCore::ImageFrame **)(a1 + 184);
  if (isPendingDecodingAtIndex)
  {
    isPendingDecodingAtIndex = (WebCore::ImageFrame *)WebCore::ImageFrameWorkQueue::isPendingDecodingAtIndex((_BOOL8)isPendingDecodingAtIndex, a2, a3, (uint64_t)a5);
    if ((isPendingDecodingAtIndex & 1) != 0)
    {
      ++*(_DWORD *)(a1 + 236);
      return 3;
    }
    v5 = *(_DWORD *)(a1 + 220);
  }
  if (v5 <= a2)
    v12 = WebCore::ImageFrame::defaultFrame(isPendingDecodingAtIndex);
  else
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 208) + 80 * a2);
  v14 = a3;
  v15 = 1;
  if ((WebCore::ImageFrame::hasDecodedNativeImageCompatibleWithOptions((uint64_t)v12, (uint64_t)&v14, (uint64_t)a5) & 1) != 0)
    return 2;
  else
    return WebCore::BitmapImageSource::requestNativeImageAtIndex(a1, a2, a3, a4, a5);
}

void WebCore::BitmapImageSource::nativeImageAtIndexCacheIfNeeded(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v7;
  WebCore::ImageFrame *isPendingDecodingAtIndex;
  uint64_t *v10;
  uint64_t hasDecodedNativeImageCompatibleWithOptions;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t IdentifierInternal;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  CFTypeRef cf;

  if (!*(_QWORD *)(a2 + 168) || (v7 = *(_DWORD *)(a2 + 220), v7 <= a3))
  {
LABEL_24:
    *a1 = 0;
LABEL_25:
    v17 = 1;
    goto LABEL_19;
  }
  isPendingDecodingAtIndex = *(WebCore::ImageFrame **)(a2 + 184);
  if (isPendingDecodingAtIndex)
  {
    isPendingDecodingAtIndex = (WebCore::ImageFrame *)WebCore::ImageFrameWorkQueue::isPendingDecodingAtIndex((_BOOL8)isPendingDecodingAtIndex, a3, 0, a4);
    if ((isPendingDecodingAtIndex & 1) != 0)
    {
      ++*(_DWORD *)(a2 + 236);
      *a1 = 3;
      goto LABEL_25;
    }
    v7 = *(_DWORD *)(a2 + 220);
  }
  if (v7 <= a3)
    v10 = WebCore::ImageFrame::defaultFrame(isPendingDecodingAtIndex);
  else
    v10 = (uint64_t *)(*(_QWORD *)(a2 + 208) + 80 * a3);
  v34 = 0;
  v35 = 1;
  hasDecodedNativeImageCompatibleWithOptions = WebCore::ImageFrame::hasDecodedNativeImageCompatibleWithOptions((uint64_t)v10, (uint64_t)&v34, a4);
  if ((hasDecodedNativeImageCompatibleWithOptions & 1) != 0)
  {
LABEL_7:
    if (*(_DWORD *)(a2 + 220) <= a3)
      v12 = WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)hasDecodedNativeImageCompatibleWithOptions);
    else
      v12 = (uint64_t *)(*(_QWORD *)(a2 + 208) + 80 * a3);
    v13 = v12[2];
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (__ldaxr((unsigned __int8 *)v14))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v14))
      {
LABEL_13:
        ++*(_QWORD *)(v14 + 8);
        v16 = __ldxr((unsigned __int8 *)v14);
        if (v16 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v14))
            goto LABEL_18;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_18:
        v17 = 0;
        *(_QWORD *)a1 = v13;
LABEL_19:
        a1[2] = v17;
        return;
      }
      MEMORY[0x19AEA534C](v14);
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  v18 = *(_QWORD *)(a2 + 168);
  LOBYTE(v34) = 1;
  v35 = 0;
  v36 = 0;
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)v18 + 176))(&cf, v18, a3, 0, &v34);
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x19613DF34);
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  WebCore::NativeImage::create((CGImageRef *)&cf, IdentifierInternal, &v33);
  v20 = v33;
  if (!v33)
  {
    *a1 = 0;
    a1[2] = 1;
    goto LABEL_30;
  }
  LOBYTE(v34) = 1;
  v35 = 0;
  v36 = 0;
  v32 = v33;
  v33 = 0;
  WebCore::BitmapImageSource::cacheNativeImageAtIndex(a2, a3, 0, (uint64_t)&v34, &v32);
  v22 = v32;
  v32 = 0;
  if (!v22)
    goto LABEL_30;
  v31 = v20;
  v23 = *(_QWORD *)(v22 + 8);
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
LABEL_36:
    MEMORY[0x19AEA534C](v23);
    goto LABEL_37;
  }
  if (__stxr(1u, (unsigned __int8 *)v23))
    goto LABEL_36;
LABEL_37:
  v25 = *(_QWORD *)(v23 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v23 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v30 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 24) = 0;
    v28 = v30 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v23);
  if (v29 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v23))
      goto LABEL_44;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_44:
  if (!v26)
  {
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (!v28)
      WTF::fastFree((WTF *)v23, v21);
  }
  v20 = v31;
  if (v33)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v33 + 8), v21);
LABEL_30:
  hasDecodedNativeImageCompatibleWithOptions = (uint64_t)cf;
  cf = 0;
  if (hasDecodedNativeImageCompatibleWithOptions)
    CFRelease((CFTypeRef)hasDecodedNativeImageCompatibleWithOptions);
  if (v20)
    goto LABEL_7;
}

void WebCore::BitmapImageSource::currentNativeImageForDrawing(WebCore::BitmapImageSource *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  _DWORD *v4;
  char *v5;
  WTF **v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  WebCore::ImageFrame *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  int v23;
  unsigned int v24;
  WebCore::ImageFrame *isPendingDecodingAtIndex;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t IdentifierInternal;
  _QWORD *v51;
  CGImageRef v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  void *v65;
  int v66;
  uint64_t v67;
  int v68;
  __int128 *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  _BYTE v74[12];
  int v75;
  CGImageRef image;

  v10 = (WTF **)((char *)this + 176);
  v11 = *((_QWORD *)this + 22);
  if (v11)
    goto LABEL_143;
  v13 = (uint64_t)this + 40;
  v12 = *((_WORD *)this + 20);
  v5 = (char *)this + 44;
  *(_DWORD *)v74 = 1;
  if ((v12 & 1) == 0)
  {
    v4 = *(_DWORD **)(*((_QWORD *)this + 20) + 168);
    if (v4 && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v4 + 40))(v4))
    {
      *((_DWORD *)this + 11) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4);
      *((_WORD *)this + 20) |= 1u;
      v28 = *((_QWORD *)this + 20);
      v29 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      if (!*(_DWORD *)(v28 + 224))
      {
        v30 = *(_DWORD *)(v28 + 228);
        *(_DWORD *)(v28 + 228) = v29;
        if (v30 != v29)
        {
          v31 = *(_QWORD *)(v28 + 16);
          if (v31)
          {
            v32 = *(_QWORD *)(v31 + 8);
            if (v32)
            {
              v33 = *(_QWORD *)(v32 + 32);
              if (v33)
              {
                v4 = *(_DWORD **)(v33 + 8);
                if (v4)
                {
                  ++v4[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 56))(v4);
                  if (v4[2] == 1)
                    goto LABEL_150;
                  --v4[2];
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v5 = v74;
    }
  }
  while (1)
  {
    if (*(_DWORD *)v5 == 4)
    {
      v5 = (char *)this + 80;
      *(_QWORD *)v74 = 0;
      if ((*((_WORD *)this + 20) & 0x20) == 0)
      {
        v4 = *(_DWORD **)(*((_QWORD *)this + 20) + 168);
        if (v4 && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v4 + 40))(v4))
        {
          *((_QWORD *)this + 10) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 56))(v4);
          *((_WORD *)this + 20) |= 0x20u;
          v41 = *((_QWORD *)this + 20);
          v42 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
          if (!*(_DWORD *)(v41 + 224))
          {
            v43 = *(_DWORD *)(v41 + 228);
            *(_DWORD *)(v41 + 228) = v42;
            if (v43 != v42)
            {
              v44 = *(_QWORD *)(v41 + 16);
              if (v44)
              {
                v45 = *(_QWORD *)(v44 + 8);
                if (v45)
                {
                  v46 = *(_QWORD *)(v45 + 32);
                  if (v46)
                  {
                    v4 = *(_DWORD **)(v46 + 8);
                    if (v4)
                    {
                      ++v4[2];
                      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 56))(v4);
                      if (v4[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
                      else
                        --v4[2];
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v5 = v74;
        }
      }
      if ((*(_QWORD *)v5 & 0xFFFFFFFELL) != 0)
      {
        *(_DWORD *)v74 = 0;
        if (WebCore::BitmapImageDescriptor::imageMetadata<int>(v13, (unsigned int *)this + 22, (unsigned int *)v74, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1))
        {
          WebCore::ImageFrameAnimator::create(this, (uint64_t *)v74);
          std::unique_ptr<WebCore::ImageFrameAnimator>::operator=[abi:sn180100](v10, (WTF **)v74);
          std::unique_ptr<WebCore::ImageFrameAnimator>::~unique_ptr[abi:sn180100]((WTF **)v74, v65);
          v11 = *((_QWORD *)this + 22);
          if (!v11)
            goto LABEL_7;
LABEL_143:
          if (*(_BYTE *)a3 == 1 && (WebCore::BitmapImageSource::isLargeForDecoding(this), v66))
          {
            v67 = *(_QWORD *)(a3 + 4);
            v68 = *(_DWORD *)(a3 + 12);
            v74[0] = 2;
            *(_QWORD *)&v74[4] = v67;
            v75 = v68;
            v69 = (__int128 *)v74;
            v70 = v11;
            v71 = a2;
          }
          else
          {
            v70 = v11;
            v71 = a2;
            v69 = (__int128 *)a3;
          }
          WebCore::ImageFrameAnimator::startAnimation(v70, v71, v69);
        }
      }
    }
    if (*v10)
    {
      v10 = (WTF **)*((unsigned int *)*v10 + 11);
      goto LABEL_9;
    }
LABEL_7:
    v14 = (char *)this + 72;
    *(_QWORD *)v74 = 0;
    if ((*((_WORD *)this + 20) & 0x10) == 0)
    {
      v34 = *(_QWORD *)(*((_QWORD *)this + 20) + 168);
      if (v34 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34))
      {
        *((_QWORD *)this + 9) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 64))(v34);
        *((_WORD *)this + 20) |= 0x10u;
        v4 = (_DWORD *)*((_QWORD *)this + 20);
        v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        if (!v4[56])
        {
          v36 = v4[57];
          v4[57] = v35;
          if (v36 != v35)
          {
            v37 = *((_QWORD *)v4 + 2);
            if (v37)
            {
              v38 = *(_QWORD *)(v37 + 8);
              if (v38)
              {
                v39 = *(_QWORD *)(v38 + 32);
                if (v39)
                {
                  v40 = *(_DWORD **)(v39 + 8);
                  if (v40)
                  {
                    ++v40[2];
                    (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 56))(v40);
                    if (v40[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
                    else
                      --v40[2];
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v14 = v74;
      }
    }
    v10 = (WTF **)*(unsigned int *)v14;
LABEL_9:
    if (*(_BYTE *)a3 != 2 || WebCore::BitmapImageSource::isAnimated(this))
      break;
    if (!*((_QWORD *)this + 21))
      goto LABEL_62;
    v24 = *((_DWORD *)this + 55);
    if (v24 <= v10)
    {
      LODWORD(v17) = 0;
      goto LABEL_134;
    }
    isPendingDecodingAtIndex = (WebCore::ImageFrame *)*((_QWORD *)this + 23);
    if (isPendingDecodingAtIndex)
    {
      isPendingDecodingAtIndex = (WebCore::ImageFrame *)WebCore::ImageFrameWorkQueue::isPendingDecodingAtIndex((_BOOL8)isPendingDecodingAtIndex, (int)v10, a2, a3);
      if ((isPendingDecodingAtIndex & 1) != 0)
      {
        ++*((_DWORD *)this + 59);
        LODWORD(v17) = 3;
        goto LABEL_134;
      }
      v24 = *((_DWORD *)this + 55);
    }
    v13 = v10;
    if (v24 <= v10)
      v17 = (uint64_t)WebCore::ImageFrame::defaultFrame(isPendingDecodingAtIndex);
    else
      v17 = *((_QWORD *)this + 26) + 80 * v10;
    if (*(_DWORD *)v17 != 2
      || !*(_QWORD *)(v17 + 16)
      || *(_DWORD *)(v17 + 24) > (int)a2
      || !*(_BYTE *)(v17 + 28)
      || !*(_BYTE *)a3)
    {
      goto LABEL_59;
    }
    if (!*(_BYTE *)(v17 + 40))
      goto LABEL_21;
    if (!*(_BYTE *)(a3 + 12))
      goto LABEL_59;
    if (*(_BYTE *)(v17 + 40) && *(_BYTE *)(a3 + 12))
    {
      v26 = *(_DWORD *)(a3 + 8);
      v27 = *(_DWORD *)(v17 + 36);
      if (*(_DWORD *)(v17 + 32) > v27)
        v27 = *(_DWORD *)(v17 + 32);
      if (*(_DWORD *)(a3 + 4) > v26)
        v26 = *(_DWORD *)(a3 + 4);
      if (v27 < v26)
      {
LABEL_59:
        v17 = WebCore::BitmapImageSource::requestNativeImageAtIndex((uint64_t)this, v10, a2, 0, (__int128 *)a3);
        if ((_DWORD)v17 != 3 && (_DWORD)v17)
          goto LABEL_21;
LABEL_134:
        *a4 = v17;
LABEL_63:
        v23 = 1;
LABEL_33:
        a4[2] = v23;
        return;
      }
LABEL_21:
      if (*((_DWORD *)this + 55) <= v10)
        v18 = WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)v17);
      else
        v18 = (uint64_t *)(*((_QWORD *)this + 26) + 80 * v13);
      v19 = v18[2];
      if (!v19)
      {
LABEL_62:
        *a4 = 0;
        goto LABEL_63;
      }
      v20 = *(_QWORD *)(v19 + 8);
      if (__ldaxr((unsigned __int8 *)v20))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v20))
      {
LABEL_27:
        ++*(_QWORD *)(v20 + 8);
        v22 = __ldxr((unsigned __int8 *)v20);
        if (v22 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v20))
            goto LABEL_32;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v20);
LABEL_32:
        v23 = 0;
        *(_QWORD *)a4 = v19;
        goto LABEL_33;
      }
      MEMORY[0x19AEA534C](v20);
      goto LABEL_27;
    }
LABEL_149:
    __break(1u);
LABEL_150:
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  if (!*((_QWORD *)this + 21))
    goto LABEL_62;
  v15 = *((_DWORD *)this + 55);
  if (v15 <= v10)
    goto LABEL_62;
  v16 = (WebCore::ImageFrame *)*((_QWORD *)this + 23);
  if (v16)
  {
    v16 = (WebCore::ImageFrame *)WebCore::ImageFrameWorkQueue::isPendingDecodingAtIndex((_BOOL8)v16, (int)v10, a2, a3);
    if ((v16 & 1) != 0)
    {
      ++*((_DWORD *)this + 59);
      *a4 = 3;
      goto LABEL_63;
    }
    v15 = *((_DWORD *)this + 55);
  }
  v13 = v10;
  if (v15 <= v10)
    v17 = (uint64_t)WebCore::ImageFrame::defaultFrame(v16);
  else
    v17 = *((_QWORD *)this + 26) + 80 * v10;
  if (*(_DWORD *)v17 != 2
    || !*(_QWORD *)(v17 + 16)
    || *(_DWORD *)(v17 + 24) > (int)a2
    || !*(_BYTE *)(v17 + 28)
    || !*(_BYTE *)a3)
  {
    goto LABEL_103;
  }
  if (!*(_BYTE *)(v17 + 40))
    goto LABEL_21;
  if (!*(_BYTE *)(a3 + 12))
    goto LABEL_103;
  if (!*(_BYTE *)(v17 + 40) || !*(_BYTE *)(a3 + 12))
    goto LABEL_149;
  v47 = *(_DWORD *)(a3 + 8);
  v48 = *(_DWORD *)(v17 + 36);
  if (*(_DWORD *)(v17 + 32) > v48)
    v48 = *(_DWORD *)(v17 + 32);
  if (*(_DWORD *)(a3 + 4) > v47)
    v47 = *(_DWORD *)(a3 + 4);
  if (v48 >= v47)
    goto LABEL_21;
LABEL_103:
  v49 = *((_QWORD *)this + 21);
  v74[0] = 1;
  v74[4] = 0;
  LOBYTE(v75) = 0;
  (*(void (**)(CGImageRef *__return_ptr, uint64_t, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)v49 + 176))(&image, v49, v10, a2, v74);
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x19613E6D4);
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  if (!image || CGImageGetWidth(image) >> 31 || CGImageGetHeight(image) >> 31)
  {
    *a4 = 0;
    v57 = 1;
    a4[2] = 1;
    goto LABEL_109;
  }
  v51 = (_QWORD *)operator new();
  v52 = image;
  image = 0;
  *v51 = &off_1E340E810;
  v51[1] = v52;
  v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v54 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v54 = 0;
  *(_OWORD *)(v54 + 8) = xmmword_19689B170;
  *(_QWORD *)(v54 + 24) = v53;
  v53[2] = 0;
  v53[3] = 0;
  v53[4] = IdentifierInternal;
  v53[5] = 1;
  *v53 = off_1E340E858;
  v53[1] = v54;
  v53[6] = v51;
  v74[0] = 1;
  v74[4] = 0;
  LOBYTE(v75) = 0;
  v73 = v53;
  WebCore::BitmapImageSource::cacheNativeImageAtIndex((uint64_t)this, v10, a2, (uint64_t)v74, (uint64_t *)&v73);
  v56 = (uint64_t)v73;
  v73 = 0;
  if (!v56)
    goto LABEL_108;
  v58 = *(_QWORD *)(v56 + 8);
  if (__ldaxr((unsigned __int8 *)v58))
  {
    __clrex();
    goto LABEL_115;
  }
  if (__stxr(1u, (unsigned __int8 *)v58))
LABEL_115:
    MEMORY[0x19AEA534C](v58);
  v60 = *(_QWORD *)(v58 + 8);
  v61 = v60 - 1;
  *(_QWORD *)(v58 + 8) = v60 - 1;
  if (v60 == 1)
  {
    v72 = *(_QWORD *)(v58 + 16);
    v62 = *(_QWORD *)(v58 + 24);
    *(_QWORD *)(v58 + 24) = 0;
    v63 = v72 != 0;
  }
  else
  {
    v62 = 0;
    v63 = 1;
  }
  v64 = __ldxr((unsigned __int8 *)v58);
  if (v64 != 1)
  {
    __clrex();
    goto LABEL_122;
  }
  if (__stlxr(0, (unsigned __int8 *)v58))
LABEL_122:
    WTF::Lock::unlockSlow((WTF::Lock *)v58);
  if (!v61)
  {
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    if (!v63)
      WTF::fastFree((WTF *)v58, v55);
  }
LABEL_108:
  v57 = 0;
LABEL_109:
  v17 = (uint64_t)image;
  image = 0;
  if (v17)
    CFRelease((CFTypeRef)v17);
  if ((v57 & 1) == 0)
    goto LABEL_21;
}

void WebCore::BitmapImageSource::nativeImageAtIndex(WebCore::BitmapImageSource *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _BYTE v9[16];
  uint64_t v10;
  int v11;

  v9[0] = 1;
  v9[4] = 0;
  v9[12] = 0;
  WebCore::BitmapImageSource::nativeImageAtIndexCacheIfNeeded(&v10, (uint64_t)this, a2, (uint64_t)v9);
  v4 = v11;
  if (v11)
  {
    *a3 = 0;
    goto LABEL_13;
  }
  v5 = v10;
  v6 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_7:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_12:
  *a3 = v5;
  v4 = v11;
LABEL_13:
  if (v4 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E340AF10[v4])(v9, &v10);
}

uint64_t WebCore::BitmapImageSource::sourceSize(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  WebCore::CGSubimageCacheWithTimer *v43;
  void *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  WebCore::CGSubimageCacheWithTimer *v62;
  void *v63;
  void *v64;
  WebCore::CGSubimageCacheWithTimer *v65;
  void *v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  char v71;
  unsigned int v72;

  v3 = a1;
  if ((*(_WORD *)(a1 + 40) & 2) != 0)
  {
    v12 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 160);
    v5 = *(_WORD *)(v4 + 40);
    v6 = (void **)(v4 + 72);
    v70 = 0;
    if ((v5 & 0x10) == 0)
    {
      v48 = *(_QWORD *)(*(_QWORD *)(v4 + 160) + 168);
      if (v48 && (a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48), (_DWORD)a1))
      {
        *(_QWORD *)(v4 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 64))(v48);
        *(_WORD *)(v4 + 40) |= 0x10u;
        v49 = *(_QWORD *)(v4 + 160);
        a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
        if (!*(_DWORD *)(v49 + 224))
        {
          v50 = *(_DWORD *)(v49 + 228);
          *(_DWORD *)(v49 + 228) = a1;
          if (v50 != (_DWORD)a1)
          {
            v51 = *(_QWORD *)(v49 + 16);
            if (v51)
            {
              v52 = *(_QWORD *)(v51 + 8);
              if (v52)
              {
                v53 = *(_QWORD *)(v52 + 32);
                if (v53)
                {
                  v54 = *(_DWORD **)(v53 + 8);
                  if (v54)
                  {
                    ++v54[2];
                    a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v54 + 56))(v54);
                    if (v54[2] == 1)
                      a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
                    else
                      --v54[2];
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v6 = (void **)&v70;
      }
    }
    if (*(_QWORD *)(v4 + 168) && (v7 = *v6, *(_DWORD *)(v4 + 220) > *v6))
    {
      v8 = *v6;
      v9 = *(_QWORD *)(v4 + 208);
      v10 = v9 + 80 * v7;
      if (*(_DWORD *)v10 != 2 || *(_DWORD *)(v10 + 24) != 0)
      {
        v23 = v9 + 80 * v7;
        v26 = *(_QWORD *)(v23 + 16);
        v25 = (uint64_t *)(v23 + 16);
        v24 = v26;
        if (v26)
        {
          v27 = *(_DWORD *)(v9 + 80 * v7 + 4);
          v28 = *(_DWORD *)(v9 + 80 * v7 + 8);
          if (v27 < 0)
            v27 = -v27;
          if (v28 < 0)
            v28 = -v28;
          v29 = v28 * (unint64_t)v27;
          if ((v29 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_85;
          v30 = 4 * v29;
          a1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 48) + 16))(*(_QWORD *)(v24 + 48));
          if (WebCore::CGSubimageCacheWithTimer::s_cache)
          {
            v69 = (int)v7;
            v7 = *(void **)a1;
            v62 = (WebCore::CGSubimageCacheWithTimer *)WebCore::CGSubimageCacheWithTimer::subimageCache((WebCore::CGSubimageCacheWithTimer *)a1);
            v63 = v7;
            LODWORD(v7) = v69;
            WebCore::CGSubimageCacheWithTimer::clearImageAndSubimages(v62, v63);
          }
          v32 = *v25;
          *v25 = 0;
          if (v32)
            a1 = (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v32 + 8), v31);
          v33 = (_BYTE *)(v9 + 80 * v8);
          v33[28] = 1;
          v33[32] = 0;
          v33[40] = 0;
          if (v30)
          {
            *(_DWORD *)(v4 + 224) -= v30;
            a1 = WebCore::BitmapImageSource::decodedSizeChanged(v4, -(uint64_t)v30);
          }
        }
        LOBYTE(v70) = 1;
        BYTE4(v70) = 0;
        v71 = 0;
        if (*(_DWORD *)(v4 + 220) > v7)
        {
          v34 = *(_QWORD *)(v4 + 208);
          (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v4 + 168) + 168))(*(_QWORD *)(v4 + 168), v8, 0, &v70, v34 + 80 * v8);
          v72 = 0;
          a1 = WebCore::BitmapImageDescriptor::imageMetadata<int>(v4 + 40, (unsigned int *)(v4 + 88), &v72, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
          if ((_DWORD)a1)
            *(double *)(v34 + 80 * v8 + 64) = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 168) + 144))(*(_QWORD *)(v4 + 168), v8);
        }
      }
    }
    else
    {
      a1 = (uint64_t)WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)a1);
      v10 = a1;
    }
    v12 = *(_QWORD *)(v10 + 4);
    v13 = (int)v12 < 1 || SHIDWORD(v12) < 1;
    if (!v13)
    {
      *(_QWORD *)(v3 + 48) = v12;
      *(_WORD *)(v3 + 40) |= 2u;
    }
  }
  v14 = a2;
  if (a2)
    goto LABEL_26;
  if ((*(_WORD *)(v3 + 40) & 8) != 0)
  {
    v14 = *(unsigned __int8 *)(v3 + 68);
    goto LABEL_26;
  }
  v15 = *(_QWORD *)(v3 + 160);
  v16 = *(_WORD *)(v15 + 40);
  v17 = (uint64_t *)(v15 + 72);
  v70 = 0;
  if ((v16 & 0x10) == 0)
  {
    v55 = *(_QWORD *)(*(_QWORD *)(v15 + 160) + 168);
    if (v55 && (a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55), (_DWORD)a1))
    {
      *(_QWORD *)(v15 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 64))(v55);
      *(_WORD *)(v15 + 40) |= 0x10u;
      v56 = *(_QWORD *)(v15 + 160);
      a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
      if (!*(_DWORD *)(v56 + 224))
      {
        v57 = *(_DWORD *)(v56 + 228);
        *(_DWORD *)(v56 + 228) = a1;
        if (v57 != (_DWORD)a1)
        {
          v58 = *(_QWORD *)(v56 + 16);
          if (v58)
          {
            v59 = *(_QWORD *)(v58 + 8);
            if (v59)
            {
              v60 = *(_QWORD *)(v59 + 32);
              if (v60)
              {
                v61 = *(_DWORD **)(v60 + 8);
                if (v61)
                {
                  ++v61[2];
                  a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v61 + 56))(v61);
                  if (v61[2] == 1)
                    a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v61 + 8))(v61);
                  else
                    --v61[2];
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v17 = &v70;
    }
  }
  if (!*(_QWORD *)(v15 + 168) || (v18 = *v17, *(_DWORD *)(v15 + 220) <= *v17))
  {
    v20 = WebCore::ImageFrame::defaultFrame((WebCore::ImageFrame *)a1);
    goto LABEL_22;
  }
  v19 = *(_QWORD *)(v15 + 208);
  v20 = (uint64_t *)(v19 + 80 * v18);
  if (*(_DWORD *)v20 != 2)
  {
    v68 = *((_DWORD *)v20 + 6);
    v35 = v19 + 80 * v18;
    v38 = *(_QWORD *)(v35 + 16);
    v37 = (uint64_t *)(v35 + 16);
    v36 = v38;
    if (!v38)
    {
LABEL_56:
      LOBYTE(v70) = 1;
      BYTE4(v70) = 0;
      v71 = 0;
      if (*(_DWORD *)(v15 + 220) > v18)
      {
        v47 = *(_QWORD *)(v15 + 208);
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v15 + 168) + 168))(*(_QWORD *)(v15 + 168), v18, v68, &v70, v47 + 80 * v18);
        v72 = 0;
        if (WebCore::BitmapImageDescriptor::imageMetadata<int>(v15 + 40, (unsigned int *)(v15 + 88), &v72, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1))*(double *)(v47 + 80 * v18 + 64) = (*(double (**)(_QWORD, _QWORD))(**(_QWORD **)(v15 + 168) + 144))(*(_QWORD *)(v15 + 168), v18);
      }
      goto LABEL_22;
    }
    v39 = *(_DWORD *)(v19 + 80 * v18 + 4);
    v40 = *(_DWORD *)(v19 + 80 * v18 + 8);
    if (v39 < 0)
      v39 = -v39;
    if (v40 < 0)
      v40 = -v40;
    v41 = v40 * (unint64_t)v39;
    if ((v41 & 0xFFFFFFFF00000000) == 0)
    {
      v42 = 4 * v41;
      v43 = (WebCore::CGSubimageCacheWithTimer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 + 48) + 16))(*(_QWORD *)(v36 + 48));
      if (WebCore::CGSubimageCacheWithTimer::s_cache)
      {
        v67 = v12;
        v64 = *(void **)v43;
        v65 = (WebCore::CGSubimageCacheWithTimer *)WebCore::CGSubimageCacheWithTimer::subimageCache(v43);
        v66 = v64;
        v12 = v67;
        WebCore::CGSubimageCacheWithTimer::clearImageAndSubimages(v65, v66);
      }
      v45 = *v37;
      *v37 = 0;
      if (v45)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v45 + 8), v44);
      v46 = (_BYTE *)(v19 + 80 * v18);
      v46[28] = 1;
      v46[32] = 0;
      v46[40] = 0;
      if (v42)
      {
        *(_DWORD *)(v15 + 224) -= v42;
        WebCore::BitmapImageSource::decodedSizeChanged(v15, -(uint64_t)v42);
      }
      goto LABEL_56;
    }
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x19613EEC4);
  }
LABEL_22:
  v14 = *((unsigned __int8 *)v20 + 44);
  if (*((int *)v20 + 1) >= 1 && *((int *)v20 + 2) >= 1)
  {
    *(_BYTE *)(v3 + 68) = v14;
    *(_WORD *)(v3 + 40) |= 8u;
  }
LABEL_26:
  v13 = (v14 - 5) > 3;
  v21 = __ROR8__(v12, 32);
  if (v13)
    return v12;
  else
    return v21;
}

uint64_t WebCore::BitmapImageSource::frameOrientationAtIndex(WebCore::BitmapImageSource *this, unsigned int a2)
{
  unsigned int v3;
  char v4;

  LOBYTE(v3) = 0;
  v4 = 0;
  return *((unsigned __int8 *)WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded((uint64_t)this, a2, &v3) + 44);
}

double WebCore::BitmapImageSource::frameDurationAtIndex(WebCore::BitmapImageSource *this, unsigned int a2)
{
  unsigned int v3;
  char v4;

  LOBYTE(v3) = 0;
  v4 = 0;
  return *((double *)WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded((uint64_t)this, a2, &v3) + 8);
}

const char *WebCore::BitmapImageSource::sourceUTF8(WebCore::BitmapImageSource *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  void *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11[5];
  WTF *v12;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return "";
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return "";
  v3 = *(_QWORD *)(v2 + 32);
  if (v3 && (v4 = *(_DWORD **)(v3 + 8)) != 0)
  {
    v4[2] += 2;
    (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v4 + 16))(v11, v4);
    v5 = v4[2] - 1;
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v5 = v4[2];
    }
    else
    {
      v4[2] = v5;
    }
    v6 = v5 - 1;
    if (v6)
      v4[2] = v6;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v11[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v11);
  }
  WTF::String::utf8();
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, v7);
    else
      --*(_DWORD *)v8;
  }
  v9 = v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (v8)
    return (char *)v8 + 16;
  else
    return 0;
}

unsigned int *WebCore::BitmapImageSource::setMinimumDecodingDurationForTesting(WebCore::BitmapImageSource *a1, double a2)
{
  unsigned int *result;

  result = WebCore::BitmapImageSource::workQueue(a1);
  *((double *)result + 37) = a2;
  return result;
}

uint64_t WebCore::BitmapImageSource::dump(WebCore::BitmapImageSource *this, WTF::TextStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  WebCore::BitmapImageSource::sourceUTF8(this);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v4 = *((_QWORD *)this + 23);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 40);
    if (v5 != v6)
    {
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a2);
    }
  }
  if (*((_QWORD *)this + 22))
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  WebCore::BitmapImageDescriptor::size((uint64_t)this + 40);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  WebCore::BitmapImageDescriptor::densityCorrectedSize((WebCore::BitmapImageSource *)((char *)this + 40));
  v8 = v7;
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (v8)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::endGroup(a2);
  WebCore::BitmapImageDescriptor::primaryFrameIndex((WebCore::BitmapImageSource *)((char *)this + 40));
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  WebCore::BitmapImageDescriptor::frameCount((WebCore::BitmapImageSource *)((char *)this + 40));
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  LODWORD(v17) = 0;
  WebCore::BitmapImageDescriptor::imageMetadata<int>((uint64_t)this + 40, (unsigned int *)this + 22, (unsigned int *)&v17, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v17 = 0;
  WebCore::BitmapImageDescriptor::imageMetadata<WTF::String>((uint64_t)&v16, (uint64_t)this + 40, (WTF::StringImpl **)this + 15, &v17, 0x200u, (void (*)(WTF::StringImpl **__return_ptr, _QWORD *))0x50, 1);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v17 = 0;
  WebCore::BitmapImageDescriptor::imageMetadata<WTF::String>((uint64_t)&v16, (uint64_t)this + 40, (WTF::StringImpl **)this + 16, &v17, 0x400u, (void (*)(WTF::StringImpl **__return_ptr, _QWORD *))0x58, 1);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v17 = 0;
  WebCore::BitmapImageDescriptor::imageMetadata<WTF::String>((uint64_t)&v16, (uint64_t)this + 40, (WTF::StringImpl **)this + 17, &v17, 0x800u, (void (*)(WTF::StringImpl **__return_ptr, _QWORD *))0x60, 1);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a2);
}

uint64_t WebCore::GraphicsContext::paintingDisabled(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::performingPaintInvalidation(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::invalidatingControlTints(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::invalidatingImagesWithAsyncDecodes(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::detectingContentfulPaint(WebCore::GraphicsContext *this)
{
  return 0;
}

void WebCore::BitmapImage::~BitmapImage(WebCore::BitmapImage *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  WebCore::Image::~Image(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v13 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v13 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  WebCore::Image::~Image(this, a2);
  WTF::fastFree(v11, v12);
}

uint64_t WebCore::Image::isGeneratedImage(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::Image::isCustomPaintImage(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::BitmapImage::frameCount(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 216))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::isAnimated(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8));
}

float WebCore::BitmapImage::sourceSize(uint64_t a1, unsigned __int8 a2)
{
  return (float)(*(int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 184))(*(_QWORD *)(a1 + 64), a2);
}

uint64_t WebCore::BitmapImage::hasDensityCorrectedSize(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 192))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::hotSpot(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 264))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::orientation(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 200))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::uti(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 240))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::filenameExtension(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 248))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::accessibilityDescription(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 256))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::colorSpace(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 224))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::resetAnimation(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::isAnimating(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::nativeImage(WebCore::BitmapImage *this, const WebCore::DestinationColorSpace *a2)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 128))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::nativeImageAtIndex(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 152))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::currentNativeImage(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 136))(*((_QWORD *)this + 8));
}

uint64_t WebCore::BitmapImage::currentPreTransformedNativeImage(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 144))(*(_QWORD *)(a1 + 64), a2);
}

void WebCore::BitmapImageSource::~BitmapImageSource(WebCore::BitmapImageSource *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::BitmapImageSource::~BitmapImageSource(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  _BYTE *v4;
  uint64_t i;
  WebCore::NativeImage *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  const void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WebCore::ImageFrameWorkQueue *v38;

  *(_QWORD *)this = off_1E340ADA8;
  v3 = *((unsigned int *)this + 55);
  if ((_DWORD)v3)
  {
    v4 = (_BYTE *)(*((_QWORD *)this + 26) + 28);
    for (i = 80 * v3; i; i -= 80)
    {
      v6 = *(WebCore::NativeImage **)(v4 - 12);
      if (v6)
      {
        v8 = *((_DWORD *)v4 - 6);
        v7 = *((_DWORD *)v4 - 5);
        if (v8 < 0)
          v8 = -v8;
        if (v7 < 0)
          v7 = -v7;
        if (((v7 * (unint64_t)v8) & 0xFFFFFFFF00000000) != 0)
        {
          __break(0xC471u);
          return;
        }
        WebCore::NativeImage::clearSubimages(v6);
        v9 = *(_QWORD *)(v4 - 12);
        *(_QWORD *)(v4 - 12) = 0;
        if (v9)
        {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v9 + 8), a2);
          v10 = *(_QWORD *)(v4 - 12);
          *v4 = 1;
          v4[4] = 0;
          v4[12] = 0;
          *(_QWORD *)(v4 - 12) = 0;
          if (v10)
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v10 + 8), a2);
          goto LABEL_12;
        }
        *v4 = 1;
        v4[4] = 0;
        v4[12] = 0;
      }
      *(_QWORD *)(v4 - 12) = 0;
LABEL_12:
      v4 += 80;
    }
  }
  v11 = (WTF *)*((_QWORD *)this + 26);
  if (v11)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((unsigned int *)this + 51);
  if ((_DWORD)v12)
  {
    v32 = (uint64_t *)*((_QWORD *)this + 24);
    v33 = 8 * v12;
    do
    {
      v34 = *v32;
      *v32 = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      ++v32;
      v33 -= 8;
    }
    while (v33);
  }
  v13 = (WTF *)*((_QWORD *)this + 24);
  if (v13)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      v38 = (WebCore::ImageFrameWorkQueue *)v14;
      WTF::ThreadSafeRefCounted<WebCore::ImageFrameWorkQueue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v38, a2);
    }
  }
  v17 = (WTF *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v17)
  {
    v18 = *((_QWORD *)v17 + 2);
    *((_QWORD *)v17 + 2) = 0;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = *((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    WTF::fastFree(v17, a2);
  }
  v20 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (*((_BYTE *)this + 112))
  {
    v27 = *((_QWORD *)this + 13);
    if ((v27 & 0x8000000000000) != 0)
    {
      v35 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, a2);
      }
    }
  }
  v28 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v28)
    CFRelease(v28);
  v29 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, a2);
    }
  }
}

uint64_t *WebCore::BitmapImageSource::primaryImageFrame(WebCore::BitmapImageSource *a1, unsigned int *a2)
{
  unsigned int v4;

  v4 = WebCore::BitmapImageSource::primaryFrameIndex(a1);
  return WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded((uint64_t)a1, v4, a2);
}

uint64_t *WebCore::BitmapImageSource::currentImageFrame(WebCore::BitmapImageSource *a1, unsigned int *a2)
{
  unsigned int v4;

  v4 = WebCore::BitmapImageSource::currentFrameIndex(a1);
  return WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded((uint64_t)a1, v4, a2);
}

void WebCore::BitmapImageSource::primaryNativeImage(WebCore::BitmapImageSource *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  _BYTE v10[16];
  uint64_t v11;
  int v12;

  v4 = WebCore::BitmapImageSource::primaryFrameIndex(this);
  v10[0] = 1;
  v10[4] = 0;
  v10[12] = 0;
  WebCore::BitmapImageSource::nativeImageAtIndexCacheIfNeeded(&v11, (uint64_t)this, v4, (uint64_t)v10);
  v5 = v12;
  if (v12)
  {
    *a2 = 0;
    goto LABEL_13;
  }
  v6 = v11;
  v7 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_7:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_12:
  *a2 = v6;
  v5 = v12;
LABEL_13:
  if (v5 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E340AF10[v5])(v10, &v11);
}

void WebCore::BitmapImageSource::currentNativeImage(WebCore::BitmapImageSource *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  _BYTE v10[16];
  uint64_t v11;
  int v12;

  v4 = WebCore::BitmapImageSource::currentFrameIndex(this);
  v10[0] = 1;
  v10[4] = 0;
  v10[12] = 0;
  WebCore::BitmapImageSource::nativeImageAtIndexCacheIfNeeded(&v11, (uint64_t)this, v4, (uint64_t)v10);
  v5 = v12;
  if (v12)
  {
    *a2 = 0;
    goto LABEL_13;
  }
  v6 = v11;
  v7 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_7:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_12:
  *a2 = v6;
  v5 = v12;
LABEL_13:
  if (v5 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E340AF10[v5])(v10, &v11);
}

void WebCore::BitmapImageSource::currentPreTransformedNativeImage(WebCore::BitmapImageSource *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  WebCore::GraphicsContext *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  float v40[2];
  _QWORD *v41;
  char **v42;
  float v43;
  float v44;
  char v45;
  char *v46;
  uint64_t v47;

  v6 = WebCore::BitmapImageSource::currentFrameIndex(a1);
  LOBYTE(v42) = 1;
  BYTE4(v42) = 0;
  LOBYTE(v44) = 0;
  WebCore::BitmapImageSource::nativeImageAtIndexCacheIfNeeded(&v46, (uint64_t)a1, v6, (uint64_t)&v42);
  v7 = v47;
  if ((_DWORD)v47)
  {
    v8 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t)v46;
  v9 = *((_QWORD *)v46 + 1);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_7:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_12:
  v7 = v47;
LABEL_13:
  if (v7 != -1)
    ((void (*)(char ***, char **))off_1E340AF10[v7])(&v42, &v46);
  if (!v8)
  {
    *a3 = 0;
    return;
  }
  v12 = a2;
  v13 = WebCore::BitmapImageSource::size((uint64_t)a1, 0);
  v14 = v13;
  v15 = HIDWORD(v13);
  v16 = WebCore::BitmapImageSource::sourceSize((uint64_t)a1, 0);
  v17 = v16;
  v18 = HIDWORD(v16);
  if (!v12)
  {
    LOBYTE(v46) = 0;
    BYTE4(v46) = 0;
    v12 = *((unsigned __int8 *)WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded((uint64_t)a1, v6, (unsigned int *)&v46)+ 44);
  }
  if (v12 == 1 && v14 == v17 && (_DWORD)v15 == (_DWORD)v18)
    goto LABEL_28;
  v40[0] = (float)v14;
  v40[1] = (float)(int)v15;
  v19 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v19 != -1)
  {
    v46 = &v45;
    v42 = &v46;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v42, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v46 = 0;
  v47 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v40, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v41, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v47 + 4));
  if (!v41)
  {
LABEL_28:
    *a3 = v8;
    return;
  }
  v46 = 0;
  *(float *)&v47 = (float)v14;
  *((float *)&v47 + 1) = (float)(int)v15;
  v42 = 0;
  v43 = (float)v17;
  v44 = (float)(int)v18;
  v20 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD *))(*v41 + 16))(v41);
  WebCore::GraphicsContext::drawNativeImage(v20, v8, (uint64_t)&v46, (float32x2_t *)&v42, ((v12 & 0xF) << 12) | 0x221);
  v22 = v41;
  v41 = 0;
  if (!v22)
  {
    *a3 = 0;
    goto LABEL_61;
  }
  (*(void (**)(_QWORD *))(*v22 + 136))(v22);
  v23 = v22[1];
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
    goto LABEL_32;
  }
  MEMORY[0x19AEA534C](v23);
LABEL_32:
  v25 = *(_QWORD *)(v23 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v23 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v38 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 24) = 0;
    v28 = v38 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v23);
  if (v29 != 1)
  {
    __clrex();
LABEL_39:
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (v26)
      goto LABEL_44;
    goto LABEL_40;
  }
  if (__stlxr(0, (unsigned __int8 *)v23))
    goto LABEL_39;
  if (v26)
    goto LABEL_44;
LABEL_40:
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (!v28)
    WTF::fastFree((WTF *)v23, v21);
LABEL_44:
  v30 = (uint64_t)v41;
  v41 = 0;
  if (!v30)
    goto LABEL_61;
  v31 = *(_QWORD *)(v30 + 8);
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v31))
  {
    goto LABEL_49;
  }
  MEMORY[0x19AEA534C](v31);
LABEL_49:
  v33 = *(_QWORD *)(v31 + 8);
  v34 = v33 - 1;
  *(_QWORD *)(v31 + 8) = v33 - 1;
  if (v33 == 1)
  {
    v39 = *(_QWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 24);
    *(_QWORD *)(v31 + 24) = 0;
    v36 = v39 != 0;
  }
  else
  {
    v35 = 0;
    v36 = 1;
  }
  v37 = __ldxr((unsigned __int8 *)v31);
  if (v37 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v31))
    {
      if (!v34)
        goto LABEL_57;
      goto LABEL_61;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v31);
  if (!v34)
  {
LABEL_57:
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (!v36)
      WTF::fastFree((WTF *)v31, v21);
  }
LABEL_61:
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v8 + 8), v21);
}

BOOL WebCore::BitmapImageSource::hasDensityCorrectedSize(WebCore::BitmapImageSource *this)
{
  char v1;

  WebCore::BitmapImageDescriptor::densityCorrectedSize((WebCore::BitmapImageSource *)((char *)this + 40));
  return v1 != 0;
}

uint64_t WebCore::BitmapImageSource::orientation(WebCore::BitmapImageSource *this)
{
  return WebCore::BitmapImageDescriptor::orientation((WebCore::BitmapImageSource *)((char *)this + 40));
}

unsigned __int8 **WebCore::BitmapImageSource::colorSpace@<X0>(WebCore::BitmapImageSource **this@<X0>, unsigned __int8 ***a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 **v5;
  void *v6;
  unsigned __int8 **result;
  WebCore::BitmapImageSource *v8;
  CFTypeRef v9;
  char v10;
  CFTypeRef cf;
  unsigned __int8 **v12;

  v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v4 != -1)
  {
    v12 = (unsigned __int8 **)&v10;
    cf = &v12;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  if (((_WORD)this[5] & 0x80) == 0)
  {
    WebCore::BitmapImageSource::primaryNativeImage(this[20], &v12);
    v5 = v12;
    if (v12)
    {
      (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)v12[6] + 40))(&cf);
      result = (unsigned __int8 **)cf;
      cf = 0;
      v8 = this[12];
      this[12] = (WebCore::BitmapImageSource *)result;
      if (v8)
      {
        CFRelease(v8);
        v9 = cf;
        cf = 0;
        if (v9)
          CFRelease(v9);
        result = (unsigned __int8 **)this[12];
      }
      *((_WORD *)this + 20) |= 0x80u;
      *a2 = result;
      if (!result)
      {
        v12 = 0;
        return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v5 + 1, v6);
      }
    }
    else
    {
      result = (unsigned __int8 **)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      *a2 = (unsigned __int8 **)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      if (!result)
        return result;
    }
    result = (unsigned __int8 **)CFRetain(result);
    v5 = v12;
    v12 = 0;
    if (!v5)
      return result;
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v5 + 1, v6);
  }
  result = (unsigned __int8 **)this[12];
  *a2 = result;
  if (result)
    return (unsigned __int8 **)CFRetain(result);
  return result;
}

void WebCore::BitmapImageSource::singlePixelSolidColor(WebCore::BitmapImageSource *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _BOOL4 v24;
  unint64_t v25;
  unsigned __int8 v26;
  WebCore::NativeImage *v27;
  __int128 v28;
  __int128 v29;

  v4 = *((_QWORD *)this + 20);
  if ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 176))(v4, 0) != 0x100000001
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 216))(v4) != 1)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if ((*((_WORD *)this + 20) & 0x100) == 0)
  {
    WebCore::BitmapImageSource::primaryNativeImage(*((WebCore::BitmapImageSource **)this + 20), &v27);
    if (!v27)
    {
      *a2 = 0;
      a2[8] = 0;
LABEL_29:
      if (v27)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v27 + 1, v5);
      return;
    }
    WebCore::NativeImage::singlePixelSolidColor(v27, (uint64_t)&v25);
    if (*((unsigned __int8 *)this + 112) != v26)
    {
      if (*((_BYTE *)this + 112))
      {
        v9 = *((_QWORD *)this + 13);
        if ((v9 & 0x8000000000000) != 0)
        {
          v21 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v5);
          }
        }
        *((_BYTE *)this + 112) = 0;
      }
      else
      {
        *((_QWORD *)this + 13) = 0;
        if (v25)
        {
          *((_QWORD *)this + 13) = v25;
          v25 = 0;
        }
        *((_BYTE *)this + 112) = 1;
      }
      goto LABEL_24;
    }
    if (!*((_BYTE *)this + 112))
    {
LABEL_26:
      *((_WORD *)this + 20) |= 0x100u;
      *a2 = 0;
      a2[8] = 0;
      if (*((_BYTE *)this + 112))
      {
        v10 = *((_QWORD *)this + 13);
        *(_QWORD *)a2 = v10;
        if ((v10 & 0x8000000000000) != 0)
        {
          v13 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
        }
        a2[8] = 1;
      }
      goto LABEL_29;
    }
    v6 = *((_QWORD *)this + 13);
    v7 = v25;
    if ((v6 & 0x8000000000000) != 0)
    {
      if ((v25 & 0x8000000000000) == 0)
        goto LABEL_10;
      v29 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v28 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
      v24 = WebCore::operator==<float,4ul>((float *)&v29, (float *)&v28);
      v6 = *((_QWORD *)this + 13);
      if (!v24 || HIBYTE(v6) != HIBYTE(v7) || BYTE6(v6) != BYTE6(v7))
        goto LABEL_10;
    }
    else if (v6 != v25 || (v25 & 0x8000000000000) != 0)
    {
LABEL_10:
      if ((v6 & 0x8000000000000) != 0)
      {
        v18 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, v5);
        }
      }
      *((_QWORD *)this + 13) = v25;
      v25 = 0;
    }
LABEL_24:
    if (v26)
    {
      if ((v25 & 0x8000000000000) != 0)
      {
        v15 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v5);
        }
      }
    }
    goto LABEL_26;
  }
  *a2 = 0;
  a2[8] = 0;
  if (*((_BYTE *)this + 112))
  {
    v8 = *((_QWORD *)this + 13);
    *(_QWORD *)a2 = v8;
    if ((v8 & 0x8000000000000) != 0)
    {
      v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    a2[8] = 1;
  }
}

uint64_t WebCore::BitmapImageSource::uti@<X0>(WTF::StringImpl **this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;

  v3 = 0;
  return WebCore::BitmapImageDescriptor::imageMetadata<WTF::String>(a2, (uint64_t)(this + 5), this + 15, &v3, 0x200u, (void (*)(WTF::StringImpl **__return_ptr, _QWORD *))0x50, 1);
}

uint64_t WebCore::BitmapImageSource::filenameExtension@<X0>(WTF::StringImpl **this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;

  v3 = 0;
  return WebCore::BitmapImageDescriptor::imageMetadata<WTF::String>(a2, (uint64_t)(this + 5), this + 16, &v3, 0x400u, (void (*)(WTF::StringImpl **__return_ptr, _QWORD *))0x58, 1);
}

uint64_t WebCore::BitmapImageSource::accessibilityDescription@<X0>(WTF::StringImpl **this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;

  v3 = 0;
  return WebCore::BitmapImageDescriptor::imageMetadata<WTF::String>(a2, (uint64_t)(this + 5), this + 17, &v3, 0x800u, (void (*)(WTF::StringImpl **__return_ptr, _QWORD *))0x60, 1);
}

uint64_t WebCore::BitmapImageSource::hotSpot(WebCore::BitmapImageSource *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  char v15;

  v2 = (char *)this + 144;
  v15 = 0;
  if ((*((_BYTE *)this + 41) & 0x10) == 0)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 20) + 168);
    if (v3 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3))
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
      *((_BYTE *)this + 152) = v5;
      v6 = (char *)this + 152;
      *((_QWORD *)v6 - 1) = v4;
      *((_WORD *)v6 - 56) |= 0x1000u;
      v7 = *((_QWORD *)v6 + 1);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      if (!*(_DWORD *)(v7 + 224))
      {
        v9 = *(_DWORD *)(v7 + 228);
        *(_DWORD *)(v7 + 228) = v8;
        if (v9 != v8)
        {
          v10 = *(_QWORD *)(v7 + 16);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 32);
              if (v12)
              {
                v13 = *(_DWORD **)(v12 + 8);
                if (v13)
                {
                  ++v13[2];
                  (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 56))(v13);
                  if (v13[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
                  else
                    --v13[2];
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v2 = &v15;
    }
  }
  return *(_QWORD *)v2;
}

uint64_t *WebCore::BitmapImageSource::subsamplingLevelForScaleFactor(uint64_t a1, uint64_t a2, float *a3, int a4)
{
  float v7;
  float v8;
  float v10;
  int v11;
  unsigned int v12;
  uint64_t *result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  char v28;

  if (!a4)
    return 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if (CGContextGetType() == 1)
      return 0;
  }
  v7 = a3[1];
  if (*a3 >= v7)
    v7 = *a3;
  v8 = fminf(v7, 1.0);
  if (v8 <= 0.0 || v8 > 1.0)
    return 0;
  v10 = log2f(1.0 / v8);
  if ((*(_WORD *)(a1 + 40) & 0x2000) != 0)
  {
    v11 = *(_DWORD *)(a1 + 156);
    goto LABEL_11;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 168);
  if (v14 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14))
  {
    v15 = *(_QWORD *)(a1 + 160);
    v27 = 0;
    v28 = 1;
    result = WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded(v15, 0, &v27);
    v17 = *((_DWORD *)result + 1);
    v16 = *((_DWORD *)result + 2);
    if (v17 < 0)
      v17 = -v17;
    if (v16 < 0)
      v16 = -v16;
    v18 = v16 * (unint64_t)v17;
    if ((v18 & 0xFFFFFFFF00000000) == 0)
    {
      if (v18 < 0x500000)
      {
        v11 = 0;
LABEL_23:
        *(_DWORD *)(a1 + 156) = v11;
        *(_WORD *)(a1 + 40) |= 0x2000u;
        goto LABEL_11;
      }
      v19 = *(_QWORD *)(a1 + 160);
      v27 = 1;
      v28 = 1;
      result = WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded(v19, 0, &v27);
      v21 = *((_DWORD *)result + 1);
      v20 = *((_DWORD *)result + 2);
      if (v21 < 0)
        v21 = -v21;
      if (v20 < 0)
        v20 = -v20;
      v22 = v20 * (unint64_t)v21;
      if ((v22 & 0xFFFFFFFF00000000) == 0)
      {
        v11 = 1;
        if (v22 < 0x500000)
          goto LABEL_23;
        v23 = *(_QWORD *)(a1 + 160);
        v27 = 2;
        v28 = 1;
        result = WebCore::BitmapImageSource::frameAtIndexCacheIfNeeded(v23, 0, &v27);
        v25 = *((_DWORD *)result + 1);
        v24 = *((_DWORD *)result + 2);
        if (v25 < 0)
          v25 = -v25;
        if (v24 < 0)
          v24 = -v24;
        v26 = v24 * (unint64_t)v25;
        if ((v26 & 0xFFFFFFFF00000000) == 0)
        {
          if (v26 >= 0x500000)
            v11 = 3;
          else
            v11 = 2;
          goto LABEL_23;
        }
      }
    }
    __break(0xC471u);
    return result;
  }
  v11 = 0;
LABEL_11:
  v12 = vcvtps_s32_f32(v10);
  if (v11 >= (int)v12)
    return (uint64_t *)v12;
  else
    return (uint64_t *)v11;
}

uint64_t WebCore::BitmapImageSource::decodeCountForTesting(WebCore::BitmapImageSource *this)
{
  return *((unsigned int *)this + 58);
}

uint64_t WebCore::BitmapImageSource::blankDrawCountForTesting(WebCore::BitmapImageSource *this)
{
  return *((unsigned int *)this + 59);
}

uint64_t WebCore::BitmapImageSource::setClearDecoderAfterAsyncFrameRequestForTesting(uint64_t this, char a2)
{
  *(_BYTE *)(this + 241) = a2;
  return this;
}

uint64_t WebCore::BitmapImageSource::setAsyncDecodingEnabledForTesting(uint64_t this, char a2)
{
  *(_BYTE *)(this + 240) = a2;
  return this;
}

uint64_t WebCore::BitmapImageSource::isAsyncDecodingEnabledForTesting(WebCore::BitmapImageSource *this)
{
  return *((unsigned __int8 *)this + 240);
}

unsigned __int8 *WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(unsigned __int8 *result, uint64_t *a2, _BYTE *a3, __int128 *a4)
{
  unsigned __int8 *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::AV1ConfigurationLevel,WTF::KeyValuePair<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints>>,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (unsigned __int8 *)(v8 + 40 * v14);
  v16 = *v15;
  if (v16 != 255)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(_DWORD *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 40 * v27;
        goto LABEL_33;
      }
      if (v16 == 254)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (unsigned __int8 *)(v8 + 40 * v14);
      v16 = *v15;
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      *v17 = -1;
      *(_OWORD *)(v17 + 8) = 0u;
      *(_OWORD *)(v17 + 24) = 0u;
      --*(_DWORD *)(*a2 - 16);
      LOBYTE(v11) = *a3;
      v15 = v17;
    }
  }
  *v15 = v11;
  v19 = *a4;
  *(_OWORD *)(v15 + 24) = a4[1];
  *(_OWORD *)(v15 + 8) = v19;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_21;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_26:
      result = WTF::HashTable<WebCore::AV1ConfigurationLevel,WTF::KeyValuePair<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints>>,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>>::rehash(a2, v26, v15);
      v15 = result;
      v22 = *a2;
      if (*a2)
        LODWORD(v25) = *(_DWORD *)(v22 - 4);
      else
        LODWORD(v25) = 0;
      goto LABEL_32;
    }
LABEL_21:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_26;
  }
LABEL_32:
  v29 = v22 + 40 * v25;
  v28 = 1;
LABEL_33:
  *(_QWORD *)v7 = v15;
  *((_QWORD *)v7 + 1) = v29;
  v7[16] = v28;
  return result;
}

unsigned __int8 *WTF::HashTable<WebCore::AV1ConfigurationLevel,WTF::KeyValuePair<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints>>,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_OWORD *)(v9 + 24);
    do
    {
      *((_BYTE *)v12 - 8) = -1;
      *v12 = 0uLL;
      v12[1] = 0uLL;
      v12 = (_OWORD *)((char *)v12 + 40);
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unsigned __int8 *)(v6 + 40 * v13);
      v16 = *v15;
      if (v16 <= 0xFD)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = 0;
        v20 = 9 * ((~(v16 << 15) + v16) ^ ((~(v16 << 15) + v16) >> 10));
        v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
        v22 = v21 ^ HIWORD(v21);
        do
        {
          v23 = v22 & v18;
          v24 = (unsigned __int8 *)(v17 + 40 * v23);
          v22 = ++v19 + v23;
        }
        while (*v24 != 255);
        v25 = *(_OWORD *)v15;
        v26 = *((_OWORD *)v15 + 1);
        *((_QWORD *)v24 + 4) = *((_QWORD *)v15 + 4);
        *(_OWORD *)v24 = v25;
        *((_OWORD *)v24 + 1) = v26;
        if (v15 == a3)
          v14 = v24;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_14DecodingStatusEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v7)
    return result;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    return WTF::fastFree((WTF *)v3, a2);
  return result;
}

BOOL WebCore::BitmapImage::currentFrameHasAlpha(WebCore::BitmapImage *this)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  BOOL v4;
  _BYTE v6[8];

  v6[0] = 0;
  v6[4] = 0;
  v1 = (*(uint64_t (**)(WebCore::BitmapImage *, _BYTE *))(*(_QWORD *)this + 120))(this, v6);
  v2 = *(_DWORD *)(v1 + 8);
  if (*(int *)(v1 + 4) >= 1)
  {
    v4 = __OFSUB__(v2, 1);
    v3 = v2 - 1 < 0;
  }
  else
  {
    v4 = 0;
    v3 = 1;
  }
  return v3 != v4 || *(_BYTE *)(v1 + 72) != 0;
}

WebCore::ImageFrameWorkQueue *WTF::ThreadSafeRefCounted<WebCore::ImageFrameWorkQueue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WebCore::ImageFrameWorkQueue **a1, void *a2)
{
  WebCore::ImageFrameWorkQueue *result;
  WTF *v3;
  void *v4;

  result = *a1;
  if (result)
  {
    WebCore::ImageFrameWorkQueue::~ImageFrameWorkQueue(result, a2);
    return (WebCore::ImageFrameWorkQueue *)WTF::fastFree(v3, v4);
  }
  return result;
}

void WebCore::ImageFrameWorkQueue::~ImageFrameWorkQueue(WebCore::ImageFrameWorkQueue *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int *v15;

  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = (WTF *)*((_QWORD *)this + 6);
  if ((WebCore::ImageFrameWorkQueue *)((char *)this + 64) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v15 = v6;
      WTF::ThreadSafeRefCounted<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v15, a2);
    }
  }
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_17:
    v11 = *(_QWORD *)(v9 + 16) - 1;
    *(_QWORD *)(v9 + 16) = v11;
    if (!v11)
    {
      v12 = *(_QWORD *)(v9 + 8);
      v13 = __ldxr((unsigned __int8 *)v9);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
          if (v12)
            return;
LABEL_24:
          WTF::fastFree((WTF *)v9, a2);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v12)
        return;
      goto LABEL_24;
    }
    v14 = __ldxr((unsigned __int8 *)v9);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
}

uint64_t *WTF::ThreadSafeRefCounted<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(uint64_t *result, void *a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = *result;
  if (*result)
  {
    v3 = *(WTF **)(v2 + 24);
    if ((WTF *)(v2 + 40) != v3 && v3 != 0)
    {
      *(_QWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      WTF::fastFree(v3, a2);
    }
    return (uint64_t *)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BitmapImageSource::decoder(WebCore::FragmentedSharedBuffer *)::$_0,void,WebCore::EncodedDataStatus>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E340AF30;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BitmapImageSource::decoder(WebCore::FragmentedSharedBuffer *)::$_0,void,WebCore::EncodedDataStatus>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E340AF30;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::BitmapImageSource::decoder(WebCore::FragmentedSharedBuffer *)::$_0,void,WebCore::EncodedDataStatus>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return;
  v3 = (int)a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return;
  if (v3 >= 3)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 168) + 56))(*(_QWORD *)(v4 + 168));
    WTF::Vector<WebCore::ImageFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resizeToFit(v4 + 208, v7);
  }
  v8 = *(_QWORD *)(v4 + 16);
  if (v8)
  {
    a2 = *(_QWORD **)(v8 + 8);
    if (a2)
    {
      v16 = a2[4];
      if (v16)
      {
        v17 = *(_DWORD **)(v16 + 8);
        if (v17)
        {
          ++v17[2];
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 48))(v17);
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
        }
      }
    }
  }
  v9 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_23:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v18 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v18 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (!v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (!v14)
      WTF::fastFree((WTF *)v9, a2);
  }
}

WebCore::ImageFrame *WebCore::ImageFrame::ImageFrame(WebCore::ImageFrame *this, const WebCore::ImageFrame *a2)
{
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 0;
  v3 = (_OWORD *)((char *)this + 28);
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 44) = 1;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 1;
  if (this == a2)
    return this;
  *(_DWORD *)this = *(_DWORD *)a2;
  *(_QWORD *)((char *)this + 4) = *(_QWORD *)((char *)a2 + 4);
  v5 = *((_QWORD *)a2 + 2);
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](v6);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_6;
LABEL_7:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_12:
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v5;
  if (v9)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v9 + 8), a2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *v3 = *(_OWORD *)((char *)a2 + 28);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  return this;
}

void WTF::Vector<WebCore::ImageFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  char *v20;
  WebCore::NativeImage *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x3333334)
    {
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x196141698);
    }
    v6 = *(WTF **)a1;
    v7 = *(unsigned int *)(a1 + 12);
    v8 = 80 * v4;
    v9 = WTF::fastMalloc((WTF *)(80 * v4));
    *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v9;
    if (!(_DWORD)v7)
    {
LABEL_9:
      if (v6)
      {
        if (*(WTF **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10);
      }
      return;
    }
    v11 = (WTF *)v9;
    v12 = 0;
    v13 = 80 * v7;
    while (1)
    {
      v14 = (char *)v11 + v12;
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *((_DWORD *)v14 + 6) = 0;
      *((_BYTE *)v11 + v12 + 28) = 0;
      v14[32] = 0;
      v14[40] = 0;
      v14[44] = 1;
      v14[48] = 0;
      v14[56] = 0;
      *((_QWORD *)v14 + 8) = 0;
      v14[72] = 1;
      if (v6 == v11)
        goto LABEL_29;
      *(_DWORD *)v14 = *(_DWORD *)((char *)v6 + v12);
      *(_QWORD *)(v14 + 4) = *(_QWORD *)((char *)v6 + v12 + 4);
      v15 = *(_QWORD *)((char *)v6 + v12 + 16);
      if (!v15)
        goto LABEL_26;
      v16 = *(_QWORD *)(v15 + 8);
      if (__ldaxr((unsigned __int8 *)v16))
        break;
      if (__stxr(1u, (unsigned __int8 *)v16))
        goto LABEL_20;
LABEL_21:
      ++*(_QWORD *)(v16 + 8);
      v18 = __ldxr((unsigned __int8 *)v16);
      if (v18 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
          goto LABEL_26;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_26:
      v19 = *((_QWORD *)v14 + 2);
      *((_QWORD *)v14 + 2) = v15;
      if (v19)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v19 + 8), v10);
      *((_DWORD *)v14 + 6) = *(_DWORD *)((char *)v6 + v12 + 24);
      *(_OWORD *)((char *)v11 + v12 + 28) = *(_OWORD *)((char *)v6 + v12 + 28);
      v14[44] = *((_BYTE *)v6 + v12 + 44);
      *((_QWORD *)v14 + 8) = *(_QWORD *)((char *)v6 + v12 + 64);
      v14[72] = *((_BYTE *)v6 + v12 + 72);
LABEL_29:
      v20 = (char *)v6 + v12;
      v21 = *(WebCore::NativeImage **)((char *)v6 + v12 + 16);
      if (v21)
      {
        v23 = *((_DWORD *)v20 + 1);
        v22 = *((_DWORD *)v20 + 2);
        if (v23 < 0)
          v23 = -v23;
        if (v22 < 0)
          v22 = -v22;
        if (((v22 * (unint64_t)v23) & 0xFFFFFFFF00000000) != 0)
          goto LABEL_42;
        WebCore::NativeImage::clearSubimages(v21);
        v24 = *((_QWORD *)v20 + 2);
        *((_QWORD *)v20 + 2) = 0;
        if (v24)
        {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v24 + 8), v10);
          v25 = *((_QWORD *)v20 + 2);
          v26 = (char *)v6 + v12;
          v26[28] = 1;
          v26[32] = 0;
          v26[40] = 0;
          *((_QWORD *)v20 + 2) = 0;
          if (v25)
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v25 + 8), v10);
          goto LABEL_38;
        }
        v27 = (char *)v6 + v12;
        v27[28] = 1;
        v27[32] = 0;
        v27[40] = 0;
      }
      *((_QWORD *)v20 + 2) = 0;
LABEL_38:
      v12 += 80;
      if (v13 == v12)
        goto LABEL_9;
    }
    __clrex();
LABEL_20:
    MEMORY[0x19AEA534C](v16);
    goto LABEL_21;
  }
}

unsigned int *WTF::Vector<WTF::Function<void ()(WebCore::DecodingStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * result[3] > a3)
  {
    WTF::Vector<WTF::Function<void ()(WebCore::DecodingStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return (unsigned int *)(*(_QWORD *)v4 + v3 - (_QWORD)v5);
  }
  v6 = result[2];
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return (unsigned int *)v3;
  if (!(v9 >> 29))
  {
    v10 = result[3];
    v11 = WTF::fastMalloc((WTF *)(8 * v9));
    v4[2] = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = (_QWORD *)v11;
      v14 = 8 * v10;
      v15 = v5;
      do
      {
        v16 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        *v13 = v16;
        v17 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        ++v13;
        v15 = (WTF *)((char *)v15 + 8);
        v14 -= 8;
      }
      while (v14);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        v4[2] = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return (unsigned int *)v3;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WTF::Function<void ()(WebCore::DecodingStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = 8 * v8;
        v12 = (unsigned int **)v7;
        do
        {
          v13 = *v12;
          *v12 = 0;
          *(_QWORD *)v10 = v13;
          result = *v12;
          *v12 = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          v10 += 2;
          ++v12;
          v11 -= 8;
        }
        while (v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

CFTypeRef WebCore::ByteArrayPixelBuffer::create@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  CFTypeRef result;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = WTF::fastMalloc((WTF *)0x40);
  v9 = (_QWORD *)v8;
  ++*(_DWORD *)a3;
  v10 = *(_QWORD *)(a3 + 32);
  if (!v10)
    goto LABEL_36;
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    goto LABEL_36;
  v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v12 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v14 = *(_QWORD *)(a3 + 24);
    goto LABEL_8;
  }
  if (!((v11 & 0x3FFFFFFFFLL) + v12))
  {
LABEL_36:
    v14 = 0;
    goto LABEL_37;
  }
  v13 = *(_QWORD *)(a3 + 24);
  if (v13)
    v14 = (v13 & 0x3FFFFFFFFLL) + v12;
  else
    v14 = 0;
LABEL_8:
  v15 = *(_BYTE *)(a3 + 6);
  if ((v15 & 3) == 0)
  {
    v16 = *(_QWORD *)(a3 + 16);
    goto LABEL_10;
  }
  if (*(_BYTE *)(v10 + 64) && (v27 = *(_QWORD *)(v10 + 32)) != 0)
  {
    v22 = atomic_load((unint64_t *)(v27 + 32));
    v15 = *(_BYTE *)(a3 + 6);
  }
  else
  {
    v22 = *(_QWORD *)(v10 + 48);
  }
  v23 = *(_QWORD *)(a3 + 8);
  if ((v15 & 4) == 0)
  {
    v24 = *(_QWORD *)(a3 + 16) + v23 <= v22 && v22 >= v23;
    if (v24)
      v16 = 0;
    else
      v16 = *(_QWORD *)(a3 + 16);
    goto LABEL_10;
  }
  v24 = v22 >= v23;
  v25 = v22 - v23;
  if (v24)
  {
LABEL_37:
    v16 = 0;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a3 + 4) - 4) > 7u)
    LOBYTE(v26) = 0;
  else
    v26 = qword_1969F72E0[(char)(*(_BYTE *)(a3 + 4) - 4)];
  v16 = (-1 << v26) & v25;
LABEL_10:
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E340EDA0;
  *(_WORD *)(v8 + 16) = *(_WORD *)a1;
  result = *(CFTypeRef *)(a1 + 8);
  v9[3] = result;
  if (result)
    result = CFRetain(result);
  v18 = *a2;
  v9[4] = *a2;
  v9[5] = v14;
  v9[6] = v16;
  if ((v18 & 0x80000000) == 0)
    v19 = v18;
  else
    v19 = -(int)v18;
  v20 = HIDWORD(v18);
  if ((v20 & 0x80000000) != 0)
    LODWORD(v20) = -(int)v20;
  v21 = v20 * (unint64_t)v19;
  if ((v21 & 0xFFFFFFFF00000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196141AB4);
  }
  if (v21 >> 30 || v16 < (4 * v21))
  {
    __break(0xC471u);
    JUMPOUT(0x1961419F8);
  }
  *v9 = off_1E340AF58;
  v9[7] = a3;
  *a4 = v9;
  return result;
}

uint64_t WebCore::ByteArrayPixelBuffer::create@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  BOOL v6;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;

  if (*(_BYTE *)(result + 1))
    v6 = *(_BYTE *)(result + 1) == 2;
  else
    v6 = 1;
  if (v6
    && (v8 = *(unsigned int *)a2, (v8 & 0x80000000) == 0)
    && ((v9 = *((int *)a2 + 1) * v8, !HIDWORD(v9)) ? (v10 = v9 >> 30 == 0) : (v10 = 0),
        v10
     && (v11 = 4 * v9, (v11 & 0x80000000) == 0)
     && a4 == v11
     && (v12 = result,
         result = JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::tryCreate(a3, a4, (uint64_t *)&v14),
         (v13 = v14) != 0)))
  {
    v14 = 0;
    WebCore::ByteArrayPixelBuffer::create(v12, a2, (uint64_t)v13, (_QWORD *)a5);
    *(_BYTE *)(a5 + 8) = 1;
    if (*v13 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v13;
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 0;
  }
  return result;
}

JSC::ArrayBuffer *WebCore::ByteArrayPixelBuffer::tryCreate@<X0>(JSC::ArrayBuffer *result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  JSC::ArrayBuffer *v9;
  JSC::ArrayBuffer *v10;

  v4 = *(unsigned int *)a2;
  if ((v4 & 0x80000000) != 0
    || ((v6 = *((int *)a2 + 1) * v4, !HIDWORD(v6)) ? (v7 = v6 >> 30 == 0) : (v7 = 0),
        !v7
     || (v8 = (uint64_t)result,
         result = (JSC::ArrayBuffer *)(4 * v6),
         (result & 0x80000000) != 0)
     || (result = JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::tryCreateUninitialized(result, (uint64_t *)&v10),
         (v9 = v10) == 0)))
  {
    *a3 = 0;
  }
  else
  {
    v10 = 0;
    WebCore::ByteArrayPixelBuffer::create(v8, a2, (uint64_t)v9, a3);
    if (*(_DWORD *)v9 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v9;
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (JSC::ArrayBuffer *)JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

CFTypeRef WebCore::ByteArrayPixelBuffer::tryCreate@<X0>(CFTypeRef result@<X0>, unint64_t *a2@<X1>, WTF::DeferrableRefCountedBase **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v9;
  uint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  _DWORD *v13;
  WTF::DeferrableRefCountedBase *v14;
  uint64_t v15;
  WTF::DeferrableRefCountedBase *v16;

  v5 = *(unsigned int *)a2;
  if ((v5 & 0x80000000) != 0)
    goto LABEL_19;
  v7 = *((int *)a2 + 1) * v5;
  if (HIDWORD(v7) || v7 >> 30 != 0)
    goto LABEL_19;
  v9 = (4 * v7);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_19;
  v11 = (uint64_t)result;
  v12 = *a3;
  if (*((_BYTE *)*a3 + 64))
  {
    v15 = *((_QWORD *)v12 + 4);
    if (v15)
    {
      if (*(_QWORD *)(v15 + 32) == v9)
        goto LABEL_10;
    }
    else if (*((_QWORD *)v12 + 6) == v9)
    {
      goto LABEL_10;
    }
LABEL_19:
    *a4 = 0;
    return result;
  }
  if (*((_QWORD *)v12 + 6) != v9)
    goto LABEL_19;
LABEL_10:
  v13 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
  v14 = *a3;
  *a3 = 0;
  v16 = v14;
  JSC::ArrayBufferView::ArrayBufferView();
  if (v16)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v16);
  result = WebCore::ByteArrayPixelBuffer::create(v11, a2, (uint64_t)v13, a4);
  if (*v13 == 1)
    return (CFTypeRef)JSC::ArrayBufferView::operator delete();
  --*v13;
  return result;
}

JSC::ArrayBuffer *WebCore::ByteArrayPixelBuffer::createScratchPixelBuffer@<X0>(WebCore::ByteArrayPixelBuffer *this@<X0>, const WebCore::IntSize *a2@<X1>, _QWORD *a3@<X8>)
{
  return WebCore::ByteArrayPixelBuffer::tryCreate((WebCore::ByteArrayPixelBuffer *)((char *)this + 16), (unint64_t *)a2, a3);
}

uint64_t WebCore::ByteArrayPixelBuffer::span(JSC::ArrayBufferView **this)
{
  return JSC::ArrayBufferView::span(this[7]);
}

void WebCore::CachedSubimage::create(WebCore::CachedSubimage *this@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, float32x4_t **a5@<X8>)
{
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  long double v13;
  float64x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  int8x8_t v24;
  unsigned int v25;
  int8x8_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float v29;
  uint64_t v30;
  float v31;
  unint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  unint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  unint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  unint64_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int8x8_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float v55;
  long double v56;
  unint64_t v57;
  uint64_t v58;
  float32_t v59;
  float32_t v60;
  float32x4_t *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  float32x2_t v72;
  long double v73;
  float32x2_t v74;
  float v75[2];
  float32x4_t v76;
  char v77;
  char **v78;
  char *v79;
  long double v80;
  long double v81;
  long double v82;

  v10 = *a2;
  v11 = *a2;
  v12 = vdiv_f32(a3[1], a4[1]);
  (*(void (**)(char **__return_ptr, WebCore::CachedSubimage *, _QWORD))(*(_QWORD *)this + 672))(&v79, this, 0);
  v73 = hypot(*(long double *)&v79, v80);
  v13 = hypot(v81, v82);
  v14.f64[0] = v73;
  v14.f64[1] = v13;
  v15 = vdiv_f32((float32x2_t)vdup_n_s32(0x45400000u), vmul_f32(v12, vcvt_f32_f64(v14)));
  v16 = *a4;
  v17 = a4[1];
  v18 = vsub_f32(vadd_f32(*a4, vmul_f32(v17, (float32x2_t)0x3F0000003F000000)), vmul_f32(v15, (float32x2_t)0x3F0000003F000000));
  v19 = (int8x8_t)vadd_f32(vminnm_f32(vsub_f32(v10, v15), (float32x2_t)0x8000000080000000), vadd_f32(v18, vmaxnm_f32(vneg_f32(v18), 0)));
  v20 = vbic_s8(v19, (int8x8_t)vcltz_f32((float32x2_t)v19));
  v21 = (int8x8_t)vadd_f32(v15, (float32x2_t)v19);
  v22 = (int8x8_t)vadd_f32(v11, 0);
  v23 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v21, (float32x2_t)v22), v22, v21);
  v24 = vmvn_s8((int8x8_t)vcge_f32((float32x2_t)v20, (float32x2_t)v23));
  if ((v24.i8[0] & v24.i8[4] & 1) != 0)
    v25 = -1;
  else
    v25 = 0;
  v26 = (int8x8_t)vdup_n_s32(v25);
  v27 = (float32x2_t)vand_s8(v20, v26);
  v28 = vsub_f32((float32x2_t)vand_s8(v23, v26), v27);
  v29 = roundf(v27.f32[0]);
  v30 = 0x80000000;
  if (v29 > -2147500000.0)
    v30 = (int)v29;
  if (v29 >= 2147500000.0)
    v30 = 0x7FFFFFFFLL;
  v31 = roundf(v27.f32[1]);
  v32 = 0x8000000000000000;
  if (v31 > -2147500000.0)
    v32 = (unint64_t)(int)v31 << 32;
  if (v31 < 2147500000.0)
    v33 = v32;
  else
    v33 = 0x7FFFFFFF00000000;
  v34 = roundf(v28.f32[0]);
  v35 = 0x7FFFFFFFLL;
  v36 = 0x80000000;
  if (v34 > -2147500000.0)
    v36 = (int)v34;
  if (v34 < 2147500000.0)
    v35 = v36;
  v37 = roundf(v28.f32[1]);
  if (v37 >= 2147500000.0)
  {
    v38 = 0x7FFFFFFF00000000;
  }
  else if (v37 <= -2147500000.0)
  {
    v38 = 0x8000000000000000;
  }
  else
  {
    v38 = (unint64_t)(int)v37 << 32;
  }
  v39 = roundf(v16.f32[0]);
  if (v39 >= 2147500000.0)
  {
    v40 = 0x7FFFFFFFLL;
  }
  else if (v39 <= -2147500000.0)
  {
    v40 = 0x80000000;
  }
  else
  {
    v40 = (int)v39;
  }
  v41 = roundf(v16.f32[1]);
  if (v41 >= 2147500000.0)
  {
    v42 = 0x7FFFFFFF00000000;
  }
  else if (v41 <= -2147500000.0)
  {
    v42 = 0x8000000000000000;
  }
  else
  {
    v42 = (unint64_t)(int)v41 << 32;
  }
  v43 = roundf(v17.f32[0]);
  if (v43 >= 2147500000.0)
  {
    v44 = 0x7FFFFFFFLL;
  }
  else if (v43 <= -2147500000.0)
  {
    v44 = 0x80000000;
  }
  else
  {
    v44 = (int)v43;
  }
  v45 = v33 | v30;
  v46 = roundf(v17.f32[1]);
  if (v46 >= 2147500000.0)
  {
    v47 = 0x7FFFFFFF00000000;
  }
  else if (v46 <= -2147500000.0)
  {
    v47 = 0x8000000000000000;
  }
  else
  {
    v47 = (unint64_t)(int)v46 << 32;
  }
  if (v45 != (v42 | v40) || (v38 | v35) != (v47 | v44))
  {
    if ((vmvn_s8((int8x8_t)vcge_f32(v16, v27)).u8[0] & 1) != 0)
      goto LABEL_46;
    v48.i32[0] = vadd_f32(v27, v28).u32[0];
    v49.i32[0] = vadd_f32(v16, v17).u32[0];
    v48.i32[1] = HIDWORD(*(unint64_t *)a4);
    v49.i32[1] = v27.i32[1];
    v50 = vmvn_s8((int8x8_t)vcge_f32(v48, v49));
    if (((v50.i32[0] | v50.i32[1]) & 1) != 0)
      goto LABEL_46;
    v51 = vadd_f32((float32x2_t)vzip2_s32((int32x2_t)v27, (int32x2_t)v17), (float32x2_t)vzip2_s32((int32x2_t)v28, (int32x2_t)v16));
    if ((vmvn_s8((int8x8_t)vcge_f32(v51, (float32x2_t)vdup_lane_s32((int32x2_t)v51, 1))).u8[0] & 1) != 0)
      goto LABEL_46;
  }
  v52 = 0;
  if (v17.f32[0] == 0.0)
  {
    v53 = 0;
  }
  else
  {
    v53 = 0;
    if (v17.f32[1] != 0.0)
    {
      v54 = vdiv_f32(a3[1], v17);
      v52 = vmla_f32(*a3, v54, vsub_f32(v27, v16));
      v53 = vmul_f32(v28, v54);
    }
  }
  v72 = v28;
  v74 = v27;
  *(float32x2_t *)v76.f32 = v52;
  *(float32x2_t *)&v76.u32[2] = v53;
  (*(void (**)(char **__return_ptr, WebCore::CachedSubimage *, _QWORD))(*(_QWORD *)this + 672))(&v79, this, 0);
  v55 = hypot(*(long double *)&v79, v80);
  v56 = hypot(v81, v82);
  *(float *)&v56 = v56;
  v75[0] = v55;
  v75[1] = *(float *)&v56;
  v57 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v57 != -1)
  {
    v78 = &v79;
    v79 = &v77;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v78, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  WebCore::GraphicsContext::createScaledImageBuffer(&v76, (uint64_t)this, v75, (uint64_t)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0x100u, 0x100u, (uint64_t *)&v78, v56);
  v58 = (uint64_t)v78;
  if (!v78)
  {
LABEL_46:
    *a5 = 0;
    return;
  }
  v78 = 0;
  (*(void (**)(char **__return_ptr, WebCore::CachedSubimage *, _QWORD))(*(_QWORD *)this + 672))(&v79, this, 0);
  v59 = hypot(*(long double *)&v79, v80);
  v60 = hypot(v81, v82);
  v61 = (float32x4_t *)WTF::fastMalloc((WTF *)0x30);
  v61->i64[0] = v58;
  v61->f32[2] = v59;
  v61->f32[3] = v60;
  v61[1] = v76;
  *(float32x2_t *)v61[2].f32 = v74;
  *(float32x2_t *)&v61[2].u32[2] = v72;
  *a5 = v61;
  v63 = (uint64_t)v78;
  v78 = 0;
  if (v63)
  {
    v64 = *(_QWORD *)(v63 + 8);
    if (__ldaxr((unsigned __int8 *)v64))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v64))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v64);
LABEL_49:
    v66 = *(_QWORD *)(v64 + 8);
    v67 = v66 - 1;
    *(_QWORD *)(v64 + 8) = v66 - 1;
    if (v66 == 1)
    {
      v71 = *(_QWORD *)(v64 + 16);
      v68 = *(_QWORD *)(v64 + 24);
      *(_QWORD *)(v64 + 24) = 0;
      v69 = v71 != 0;
    }
    else
    {
      v68 = 0;
      v69 = 1;
    }
    v70 = __ldxr((unsigned __int8 *)v64);
    if (v70 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
      {
        if (v67)
          return;
LABEL_57:
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
        if (!v69)
          WTF::fastFree((WTF *)v64, v62);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v64);
    if (v67)
      return;
    goto LABEL_57;
  }
}

uint64_t WebCore::CachedSubimage::createPixelated@<X0>(WebCore::CachedSubimage *this@<X0>, float32x4_t *a2@<X1>, const WebCore::FloatRect *a3@<X2>, const WebCore::FloatRect *a4@<X3>, _QWORD *a5@<X8>)
{
  float v9;
  long double v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  float v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  float v26[2];
  char v27;
  char **v28;
  char *v29;
  long double v30;
  long double v31;
  long double v32;

  (*(void (**)(char **__return_ptr, WebCore::CachedSubimage *, _QWORD, const WebCore::FloatRect *, const WebCore::FloatRect *))(*(_QWORD *)this + 672))(&v29, this, 0, a3, a4);
  v9 = hypot(*(long double *)&v29, v30);
  v10 = hypot(v31, v32);
  *(float *)&v10 = v10;
  v26[0] = v9;
  v26[1] = *(float *)&v10;
  v11 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v11 != -1)
  {
    v28 = &v29;
    v29 = &v27;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = WebCore::GraphicsContext::createScaledImageBuffer(a2, (uint64_t)this, v26, (uint64_t)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0x100u, 0x100u, (uint64_t *)&v28, v10);
  v13 = (uint64_t)v28;
  if (!v28)
  {
    *a5 = 0;
    return result;
  }
  v28 = 0;
  (*(void (**)(char **__return_ptr, WebCore::CachedSubimage *, _QWORD))(*(_QWORD *)this + 672))(&v29, this, 0);
  v14 = hypot(*(long double *)&v29, v30);
  v15 = hypot(v31, v32);
  result = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)result = v13;
  *(float *)(result + 8) = v14;
  *(float *)(result + 12) = v15;
  *(float32x4_t *)(result + 16) = *a2;
  *(_OWORD *)(result + 32) = *(_OWORD *)a3;
  *a5 = result;
  v17 = (uint64_t)v28;
  v28 = 0;
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
      goto LABEL_10;
    }
    result = MEMORY[0x19AEA534C](v18);
LABEL_10:
    v20 = *(_QWORD *)(v18 + 8);
    v21 = v20 - 1;
    *(_QWORD *)(v18 + 8) = v20 - 1;
    if (v20 == 1)
    {
      v25 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      v23 = v25 != 0;
    }
    else
    {
      v22 = 0;
      v23 = 1;
    }
    v24 = __ldxr((unsigned __int8 *)v18);
    if (v24 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v18))
      {
        if (v21)
          return result;
LABEL_18:
        if (v22)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        if (!v23)
          return WTF::fastFree((WTF *)v18, v16);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v18);
    if (v21)
      return result;
    goto LABEL_18;
  }
  return result;
}

BOOL WebCore::CachedSubimage::canBeUsed(WebCore::CachedSubimage *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3, const WebCore::FloatRect *a4)
{
  float v7;
  long double v8;
  _BOOL8 result;
  float v10;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  BOOL v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  BOOL v33;
  long double v34[6];

  (*(void (**)(long double *__return_ptr, WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)a2 + 672))(v34, a2, 0);
  v7 = hypot(v34[0], v34[1]);
  v8 = hypot(v34[2], v34[3]);
  result = 0;
  v10 = v8;
  if (*((float *)this + 2) == v7 && *((float *)this + 3) == v10)
  {
    v12 = *((float *)a3 + 3);
    v14 = *((float *)a4 + 2);
    v13 = *((float *)a4 + 3);
    v15 = *((float *)a3 + 2) / v14;
    v17 = *((float *)this + 10);
    v16 = *((float *)this + 11);
    v18 = *((float *)this + 6) / v17;
    if (v15 != v18)
    {
      v19 = vabds_f32(v15, v18);
      v20 = fabsf(v15);
      if (v20 < 1.0 && (float)(v20 * 3.4028e38) < v19)
        return 0;
      v21 = (float)(v20 * 1.1755e-38) <= v19 || v20 <= 1.0;
      if (v21 && (float)(v19 / v20) > 0.00000011921)
        return 0;
      v22 = fabsf(v18);
      if (v22 < 1.0 && (float)(v22 * 3.4028e38) < v19)
        return 0;
      v23 = (float)(v22 * 1.1755e-38) <= v19 || v22 <= 1.0;
      if (v23 && (float)(v19 / v22) > 0.00000011921)
        return 0;
    }
    v24 = v12 / v13;
    v25 = *((float *)this + 7) / v16;
    if ((float)(v12 / v13) != v25)
    {
      v29 = vabds_f32(v24, v25);
      v30 = fabsf(v24);
      if (v30 < 1.0 && (float)(v30 * 3.4028e38) < v29)
        return 0;
      v31 = (float)(v30 * 1.1755e-38) <= v29 || v30 <= 1.0;
      if (v31 && (float)(v29 / v30) > 0.00000011921)
        return 0;
      v32 = fabsf(v25);
      if (v32 < 1.0 && (float)(v32 * 3.4028e38) < v29)
        return 0;
      v33 = (float)(v32 * 1.1755e-38) <= v29 || v32 <= 1.0;
      if (v33 && (float)(v29 / v32) > 0.00000011921)
        return 0;
    }
    v26 = *((float *)this + 8);
    if (v26 > *(float *)a4)
      return 0;
    if ((float)(v26 + v17) < (float)(v14 + *(float *)a4))
      return 0;
    v27 = *((float *)this + 9);
    v28 = *((float *)a4 + 1);
    return v27 <= v28 && (float)(v27 + v16) >= (float)(v13 + v28);
  }
  return result;
}

void WebCore::humanReadableStringFromCodecString(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const __CFString *v21;
  WTF::StringImpl *v22;
  int8x16_t *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  char *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  const __CFString *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  const __CFString *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  const __CFString *v47;
  WTF::StringImpl *v48;
  int8x16_t *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF *v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  char v63;
  const __CFString *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  const __CFString *v77;
  char v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  char v84;
  int8x16_t *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int v100;
  const __CFString *v101;
  const __CFString *v102;
  const __CFString *v103;
  int16x8_t *v104;
  int16x8_t v105;
  int16x8_t *v106;
  int8x16_t v107;
  int16x8_t *v108;
  char *v109;
  int16x8_t v110;
  __int16 *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF *v115;
  int v116;
  uint64_t v117;
  char v118;
  WTF *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  unsigned int v123;
  char v124;
  char v125;
  int8x16_t *v126;
  int v127;
  WTF::StringImpl *v128;

  v5 = *this;
  if (*this)
  {
    v6 = *((unsigned int *)v5 + 4);
    v7 = *((_QWORD *)v5 + 1);
    LODWORD(v5) = *((_DWORD *)v5 + 1);
    v8 = (v6 >> 2) & 1;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  WebCore::parseVPCodecParameters(v7, v5 | (unint64_t)(v8 << 32), (uint64_t)&v113);
  if ((_BYTE)v115)
  {
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v124 = 1;
    if (MEMORY[0x19AEA53F4](v113, "vp08", 4))
    {
      v9 = CFSTR("VP8 (Codec String)");
      goto LABEL_22;
    }
    if ((_BYTE)v115)
    {
      if (!MEMORY[0x19AEA53F4](v113, "vp09", 4))
        goto LABEL_35;
      v9 = CFSTR("VP9 (Codec String)");
LABEL_22:
      WebCore::localizedString(v9, (uint64_t)&v126);
      v23 = v126;
      if (v123 || v122)
      {
        if (v126 && (v126[1].i8[0] & 4) == 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
LABEL_32:
        v25 = (WTF::StringImpl *)v126;
        v126 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v22);
          else
            *(_DWORD *)v25 -= 2;
        }
LABEL_35:
        WTF::StringBuilder::append();
        if ((_BYTE)v115)
        {
          if (BYTE1(v114) % 0xAu)
            WebCore::formatLocalizedString(CFSTR("%d.%d"), (uint64_t)&v128, BYTE1(v114) / 0xAu, BYTE1(v114) % 0xAu);
          else
            WTF::String::number((WTF::String *)(BYTE1(v114) / 0xAu));
          if ((_BYTE)v115)
          {
            v26 = v114;
            WTF::String::utf8();
            if (v119)
              v27 = (char *)v119 + 16;
            else
              v27 = 0;
            WebCore::formatLocalizedString(CFSTR("Profile %d, Level %s"), (uint64_t)&v120, v26, v27);
            v126 = (int8x16_t *)v120;
            v125 = 41;
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v121, (uint64_t *)&v126, &v125);
            v29 = v120;
            v120 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v28);
              else
                *(_DWORD *)v29 -= 2;
            }
            v30 = v119;
            v119 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
                WTF::fastFree(v30, v28);
              else
                --*(_DWORD *)v30;
            }
            v31 = v121;
            if (v121
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v121),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v121),
                  (v31 = v121) != 0))
            {
              *(_DWORD *)v31 += 2;
            }
            *a2 = v31;
            v32 = v128;
            v128 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v28);
              else
                *(_DWORD *)v32 -= 2;
            }
            v33 = v122;
            v122 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, v28);
              else
                *(_DWORD *)v33 -= 2;
            }
            v34 = v121;
            v121 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v28);
              else
                *(_DWORD *)v34 -= 2;
            }
            if (!(_BYTE)v115)
              return;
            goto LABEL_183;
          }
        }
        goto LABEL_317;
      }
      if (v126)
        v126->i32[0] += 2;
      v24 = v121;
      v121 = (WTF::StringImpl *)v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::destroy(v24, v22);
          v23 = v126;
          if (!v126)
            goto LABEL_31;
          goto LABEL_30;
        }
        *(_DWORD *)v24 -= 2;
      }
      if (!v23)
      {
LABEL_31:
        v123 = v23;
        goto LABEL_32;
      }
LABEL_30:
      LODWORD(v23) = v23->i32[1];
      goto LABEL_31;
    }
LABEL_317:
    __break(1u);
LABEL_318:
    WTF::StringBuilder::append();
    goto LABEL_116;
  }
  v10 = *this;
  if (*this)
  {
    v11 = *((unsigned int *)v10 + 4);
    v12 = *((_QWORD *)v10 + 1);
    LODWORD(v10) = *((_DWORD *)v10 + 1);
    v13 = (v11 >> 2) & 1;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = WebCore::parseAVCCodecParameters(v12, v10 | (unint64_t)(v13 << 32));
  if (HIBYTE(v14))
  {
    v35 = v14;
    v113 = 0;
    v114 = 0;
    LODWORD(v115) = 0;
    BYTE4(v115) = 1;
    WebCore::localizedString(CFSTR("AVC (Codec String)"), (uint64_t)&v128);
    v126 = (int8x16_t *)v128;
    v121 = (WTF::StringImpl *)" (";
    LODWORD(v122) = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v113, (uint64_t *)&v126, (int8x16_t **)&v121);
    v37 = v128;
    v128 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
    if (v35 <= 0x63u)
    {
      switch(v35)
      {
        case 'B':
          v38 = CFSTR("Baseline Profile (AVC Codec Profile)");
          break;
        case 'M':
          v38 = CFSTR("Main Profile (AVC Codec Profile)");
          break;
        case 'X':
          v38 = CFSTR("Extended Profile (AVC Codec Profile)");
          break;
        default:
          goto LABEL_153;
      }
    }
    else if (v35 > 0x79u)
    {
      if (v35 == 122)
      {
        v38 = CFSTR("High 422 Profile (AVC Codec Profile)");
      }
      else
      {
        if (v35 != 244)
          goto LABEL_153;
        v38 = CFSTR("High 444 Predictive Profile (AVC Codec Profile)");
      }
    }
    else if (v35 == 100)
    {
      v38 = CFSTR("High Profile (AVC Codec Profile)");
    }
    else
    {
      if (v35 != 110)
        goto LABEL_153;
      v38 = CFSTR("High 10 Profile (AVC Codec Profile)");
    }
    WebCore::localizedString(v38, (uint64_t)&v128);
    v126 = (int8x16_t *)v128;
    v121 = (WTF::StringImpl *)", ";
    LODWORD(v122) = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v113, (uint64_t *)&v126, (int8x16_t **)&v121);
    v66 = v128;
    v128 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v65);
      else
        *(_DWORD *)v66 -= 2;
    }
LABEL_153:
    if (BYTE2(v35) == 11)
    {
      WebCore::localizedString(CFSTR("Level 1b (AVC Codec Level)"), (uint64_t)&v121);
    }
    else if (BYTE2(v35) % 0xAu)
    {
      WebCore::formatLocalizedString(CFSTR("Level %d.%d"), (uint64_t)&v121, BYTE2(v35) / 0xAu, BYTE2(v35) % 0xAu);
    }
    else
    {
      WebCore::formatLocalizedString(CFSTR("Level %d"), (uint64_t)&v121, BYTE2(v35) / 0xAu);
    }
    v67 = v121;
    if ((_DWORD)v115 || v114)
    {
      if (v121 && (*((_BYTE *)v121 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
      goto LABEL_168;
    }
    if (v121)
      *(_DWORD *)v121 += 2;
    v68 = v113;
    v113 = v67;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::destroy(v68, v28);
        v67 = v121;
        if (!v121)
          goto LABEL_167;
        goto LABEL_166;
      }
      *(_DWORD *)v68 -= 2;
    }
    if (!v67)
    {
LABEL_167:
      LODWORD(v115) = (_DWORD)v67;
LABEL_168:
      v69 = v121;
      v121 = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v28);
        else
          *(_DWORD *)v69 -= 2;
      }
      LOBYTE(v121) = 41;
      if (!v114 || (v70 = v115, v115 >= *((_DWORD *)v114 + 1)) || v113)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v71 = *((_DWORD *)v114 + 4);
        v72 = *((_QWORD *)v114 + 1);
        LODWORD(v115) = (_DWORD)v115 + 1;
        if ((v71 & 4) != 0)
          *(_BYTE *)(v72 + v70) = 41;
        else
          *(_WORD *)(v72 + 2 * v70) = 41;
      }
      v73 = v113;
      if (v113
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v113),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v113),
            (v73 = v113) != 0))
      {
        *(_DWORD *)v73 += 2;
      }
      *a2 = v73;
      v74 = v114;
      v114 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, v28);
        else
          *(_DWORD *)v74 -= 2;
      }
LABEL_183:
      v75 = v113;
      v113 = 0;
      if (!v75)
        return;
      if (*(_DWORD *)v75 != 2)
      {
        *(_DWORD *)v75 -= 2;
        return;
      }
LABEL_336:
      WTF::StringImpl::destroy(v75, v28);
      return;
    }
LABEL_166:
    LODWORD(v67) = *((_DWORD *)v67 + 1);
    goto LABEL_167;
  }
  v15 = *this;
  if (*this)
  {
    v16 = *((unsigned int *)v15 + 4);
    v17 = *((_QWORD *)v15 + 1);
    LODWORD(v15) = *((_DWORD *)v15 + 1);
    v18 = (v16 >> 2) & 1;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  WebCore::parseHEVCCodecParameters(v17, v15 | (unint64_t)(v18 << 32), (uint64_t)&v113);
  if (v118)
  {
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v124 = 1;
    WebCore::localizedString(CFSTR("HEVC (Codec String)"), (uint64_t)&v120);
    v128 = v120;
    v126 = (int8x16_t *)" (";
    v127 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v121, (uint64_t *)&v128, &v126);
    v20 = v120;
    v120 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (!v118)
      goto LABEL_317;
    if (HIWORD(v113) == 2)
    {
      v21 = CFSTR("Main 10 Profile (HEVC Codec Profile)");
    }
    else
    {
      if (HIWORD(v113) != 1)
        goto LABEL_103;
      v21 = CFSTR("Main Profile (HEVC Codec Profile)");
    }
    WebCore::localizedString(v21, (uint64_t)&v120);
    v128 = v120;
    v126 = (int8x16_t *)", ";
    v127 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v121, (uint64_t *)&v128, &v126);
    v46 = v120;
    v120 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (!v118)
      goto LABEL_317;
LABEL_103:
    if (BYTE4(v114))
      v47 = CFSTR("High Tier (HEVC Codec Tier");
    else
      v47 = CFSTR("Main Tier (HEVC Codec Tier");
    WebCore::localizedString(v47, (uint64_t)&v126);
    v49 = v126;
    if (v123 || v122)
    {
      if (v126 && (v126[1].i8[0] & 4) == 0)
        goto LABEL_318;
      WTF::StringBuilder::append();
LABEL_116:
      v51 = (WTF::StringImpl *)v126;
      v126 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v48);
        else
          *(_DWORD *)v51 -= 2;
      }
      LOBYTE(v126) = 41;
      if (!v122 || (v52 = v123, v123 >= *((_DWORD *)v122 + 1)) || v121)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v53 = *((_DWORD *)v122 + 4);
        v54 = *((_QWORD *)v122 + 1);
        ++v123;
        if ((v53 & 4) != 0)
          *(_BYTE *)(v54 + v52) = 41;
        else
          *(_WORD *)(v54 + 2 * v52) = 41;
      }
      v55 = v121;
      if (v121
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v121),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v121),
            (v55 = v121) != 0))
      {
        *(_DWORD *)v55 += 2;
      }
      *a2 = v55;
      v56 = v122;
      v122 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v48);
        else
          *(_DWORD *)v56 -= 2;
      }
      v57 = v121;
      v121 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v48);
        else
          *(_DWORD *)v57 -= 2;
      }
      if (v118)
      {
        v58 = v115;
        if (&v117 != (uint64_t *)v115)
        {
          if (v115)
          {
            v115 = 0;
            v116 = 0;
            WTF::fastFree(v58, v48);
          }
        }
      }
      return;
    }
    if (v126)
      v126->i32[0] += 2;
    v50 = v121;
    v121 = (WTF::StringImpl *)v49;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::destroy(v50, v48);
        v49 = v126;
        if (!v126)
          goto LABEL_115;
        goto LABEL_114;
      }
      *(_DWORD *)v50 -= 2;
    }
    if (!v49)
    {
LABEL_115:
      v123 = v49;
      goto LABEL_116;
    }
LABEL_114:
    LODWORD(v49) = v49->i32[1];
    goto LABEL_115;
  }
  v39 = *this;
  if (*this)
  {
    v40 = *((unsigned int *)v39 + 4);
    v41 = *((_QWORD *)v39 + 1);
    LODWORD(v39) = *((_DWORD *)v39 + 1);
    v42 = (v40 >> 2) & 1;
  }
  else
  {
    v41 = 0;
    v42 = 1;
  }
  WebCore::parseAV1CodecParameters(v41, v39 | (unint64_t)(v42 << 32), (uint64_t)&v113);
  if ((_BYTE)v116)
  {
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v124 = 1;
    WebCore::localizedString(CFSTR("AV1 (Codec String)"), (uint64_t)&v120);
    v128 = v120;
    v126 = (int8x16_t *)" (";
    v127 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v121, (uint64_t *)&v128, &v126);
    v43 = v120;
    v120 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v28);
      else
        *(_DWORD *)v43 -= 2;
    }
    if (!(_BYTE)v116)
      goto LABEL_317;
    if (v114 == 2)
    {
      v44 = CFSTR("Professional Profile (AV1 Codec Profile)");
    }
    else if (v114 == 1)
    {
      v44 = CFSTR("High Profile (AV1 Codec Profile)");
    }
    else
    {
      if ((_BYTE)v114)
      {
LABEL_208:
        switch(BYTE1(v114))
        {
          case 0:
            v77 = CFSTR("Level 2.0 (AV1 Codec Level)");
            goto LABEL_260;
          case 1:
            v77 = CFSTR("Level 2.1 (AV1 Codec Level)");
            goto LABEL_260;
          case 2:
            v77 = CFSTR("Level 2.2 (AV1 Codec Level)");
            goto LABEL_260;
          case 3:
            v77 = CFSTR("Level 2.3 (AV1 Codec Level)");
            goto LABEL_260;
          case 4:
            v77 = CFSTR("Level 3.0 (AV1 Codec Level)");
            goto LABEL_260;
          case 5:
            v77 = CFSTR("Level 3.1 (AV1 Codec Level)");
            goto LABEL_260;
          case 6:
            v77 = CFSTR("Level 3.2 (AV1 Codec Level)");
            goto LABEL_260;
          case 7:
            v77 = CFSTR("Level 3.3 (AV1 Codec Level)");
            goto LABEL_260;
          case 8:
            v77 = CFSTR("Level 4.0 (AV1 Codec Level)");
            goto LABEL_260;
          case 9:
            v77 = CFSTR("Level 4.1 (AV1 Codec Level)");
            goto LABEL_260;
          case 0xA:
            v77 = CFSTR("Level 4.2 (AV1 Codec Level)");
            goto LABEL_260;
          case 0xB:
            v77 = CFSTR("Level 4.3 (AV1 Codec Level)");
            goto LABEL_260;
          case 0xC:
            v77 = CFSTR("Level 5.0 (AV1 Codec Level)");
            goto LABEL_260;
          case 0xD:
            v77 = CFSTR("Level 5.1 (AV1 Codec Level)");
            goto LABEL_260;
          case 0xE:
            v77 = CFSTR("Level 5.2 (AV1 Codec Level)");
            goto LABEL_260;
          case 0xF:
            v77 = CFSTR("Level 5.3 (AV1 Codec Level)");
            goto LABEL_260;
          case 0x10:
            v77 = CFSTR("Level 6.0 (AV1 Codec Level)");
            goto LABEL_260;
          case 0x11:
            v77 = CFSTR("Level 6.1 (AV1 Codec Level)");
            goto LABEL_260;
          case 0x12:
            v77 = CFSTR("Level 6.2 (AV1 Codec Level)");
            goto LABEL_260;
          case 0x13:
            v77 = CFSTR("Level 6.3 (AV1 Codec Level)");
            goto LABEL_260;
          case 0x14:
            v77 = CFSTR("Level 7.0 (AV1 Codec Level)");
            goto LABEL_260;
          case 0x15:
            v77 = CFSTR("Level 7.1 (AV1 Codec Level)");
            goto LABEL_260;
          case 0x16:
            v77 = CFSTR("Level 7.2 (AV1 Codec Level)");
            goto LABEL_260;
          case 0x17:
            v77 = CFSTR("Level 7.3 (AV1 Codec Level)");
LABEL_260:
            WebCore::localizedString(v77, (uint64_t)&v126);
            v85 = v126;
            if (!v123 && !v122)
            {
              if (v126)
                v126->i32[0] += 2;
              v86 = v121;
              v121 = (WTF::StringImpl *)v85;
              if (v86)
              {
                if (*(_DWORD *)v86 == 2)
                {
                  WTF::StringImpl::destroy(v86, v28);
                  v85 = v126;
                  if (!v126)
                    goto LABEL_269;
                  goto LABEL_268;
                }
                *(_DWORD *)v86 -= 2;
              }
              if (!v85)
              {
LABEL_269:
                v123 = v85;
                goto LABEL_270;
              }
LABEL_268:
              LODWORD(v85) = v85->i32[1];
              goto LABEL_269;
            }
            if (v126 && (v126[1].i8[0] & 4) == 0)
              WTF::StringBuilder::append();
            else
              WTF::StringBuilder::append();
LABEL_270:
            v87 = (WTF::StringImpl *)v126;
            v126 = 0;
            if (v87)
            {
              if (*(_DWORD *)v87 == 2)
                WTF::StringImpl::destroy(v87, v28);
              else
                *(_DWORD *)v87 -= 2;
            }
LABEL_273:
            LOBYTE(v126) = 41;
            if (!v122 || (v88 = v123, v123 >= *((_DWORD *)v122 + 1)) || v121)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v89 = *((_DWORD *)v122 + 4);
              v90 = *((_QWORD *)v122 + 1);
              ++v123;
              if ((v89 & 4) != 0)
                *(_BYTE *)(v90 + v88) = 41;
              else
                *(_WORD *)(v90 + 2 * v88) = 41;
            }
            v91 = v121;
            if (v121
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v121),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v121),
                  (v91 = v121) != 0))
            {
              *(_DWORD *)v91 += 2;
            }
            *a2 = v91;
            v92 = v122;
            v122 = 0;
            if (v92)
            {
              if (*(_DWORD *)v92 == 2)
                WTF::StringImpl::destroy(v92, v28);
              else
                *(_DWORD *)v92 -= 2;
            }
            v93 = v121;
            v121 = 0;
            if (v93)
            {
              if (*(_DWORD *)v93 == 2)
                WTF::StringImpl::destroy(v93, v28);
              else
                *(_DWORD *)v93 -= 2;
            }
            if (!(_BYTE)v116)
              return;
            goto LABEL_183;
          default:
            goto LABEL_273;
        }
      }
      v44 = CFSTR("Main Profile (AV1 Codec Profile)");
    }
    WebCore::localizedString(v44, (uint64_t)&v120);
    v128 = v120;
    v126 = (int8x16_t *)", ";
    v127 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v121, (uint64_t *)&v128, &v126);
    v76 = v120;
    v120 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v28);
      else
        *(_DWORD *)v76 -= 2;
    }
    if (!(_BYTE)v116)
      goto LABEL_317;
    goto LABEL_208;
  }
  v59 = *this;
  if (*this)
  {
    v60 = *((unsigned int *)v59 + 4);
    v61 = (unsigned __int16 *)*((_QWORD *)v59 + 1);
    LODWORD(v59) = *((_DWORD *)v59 + 1);
    v62 = (v60 >> 2) & 1;
  }
  else
  {
    v61 = 0;
    v62 = 1;
  }
  WebCore::parseDoViCodecParameters(v61, v59 | (unint64_t)(v62 << 32));
  if (v63)
  {
    v64 = CFSTR("Dolby Vision Codec String");
LABEL_225:
    WebCore::localizedString(v64, (uint64_t)a2);
    return;
  }
  if (!*this)
    goto LABEL_334;
  if (WTF::StringImpl::startsWith())
  {
    v64 = CFSTR("Opus Codec String");
    goto LABEL_225;
  }
  if (!*this)
    goto LABEL_334;
  if (WTF::StringImpl::startsWith())
  {
    v64 = CFSTR("Vorbis Codec String");
    goto LABEL_225;
  }
  if (!*this)
    goto LABEL_334;
  v78 = WTF::StringImpl::startsWith();
  v80 = *this;
  if ((v78 & 1) == 0)
  {
    if (v80)
    {
      v94 = *((_QWORD *)v80 + 1);
      v95 = *((unsigned int *)v80 + 1);
      if ((*((_BYTE *)v80 + 16) & 4) != 0)
      {
        if (!(_DWORD)v95)
          goto LABEL_316;
        v96 = 16;
        if (v95 < 0x10)
          v96 = *((unsigned int *)v80 + 1);
        v97 = v96;
        v98 = (_BYTE *)*((_QWORD *)v80 + 1);
        do
        {
          if (*v98 == 46)
            goto LABEL_311;
          ++v98;
          --v97;
        }
        while (v97);
        if (v95 < 0x11)
          goto LABEL_316;
        v98 = memchr((void *)(v94 + v96), 46, v95 - v96);
        if (v98)
        {
LABEL_311:
          v99 = (uint64_t)&v98[-v94];
          goto LABEL_312;
        }
      }
      else
      {
        if (!(_DWORD)v95)
          goto LABEL_316;
        v104 = (int16x8_t *)(v94 + 2 * v95);
        if (v95 <= 0x1F)
        {
          v112 = 2 * v95;
          v111 = (__int16 *)*((_QWORD *)v80 + 1);
          v100 = 0x7FFFFFFF;
          while (*v111 != 46)
          {
            ++v111;
            v112 -= 2;
            if (!v112)
              goto LABEL_315;
          }
LABEL_347:
          if (v111 != (__int16 *)v104)
          {
            v99 = ((uint64_t)v111 - v94) >> 1;
LABEL_312:
            if (v99 == -1)
              v100 = 0x7FFFFFFF;
            else
              v100 = v99;
LABEL_315:
            if (v95 > v100)
            {
              WTF::StringImpl::substring(v80);
              return;
            }
LABEL_316:
            *(_DWORD *)v80 += 2;
            *a2 = v80;
            return;
          }
        }
        else
        {
          v105.i64[0] = 0x2E002E002E002ELL;
          v105.i64[1] = 0x2E002E002E002ELL;
          v106 = (int16x8_t *)*((_QWORD *)v80 + 1);
          do
          {
            v107 = (int8x16_t)vceqq_s16(*v106, v105);
            LOWORD(v79) = vmaxvq_u16((uint16x8_t)v107);
            if (v79)
              goto LABEL_346;
            v108 = v106 + 1;
            v109 = &v106[1].i8[14];
            ++v106;
          }
          while (v109 < (char *)v104);
          if (v108 < v104)
          {
            v110.i64[0] = 0x2E002E002E002ELL;
            v110.i64[1] = 0x2E002E002E002ELL;
            v107 = (int8x16_t)vceqq_s16(v104[-1], v110);
            v110.i16[0] = vmaxvq_u16((uint16x8_t)v107);
            if (v110.i32[0])
            {
              v106 = v104 - 1;
LABEL_346:
              v111 = &v106->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v107))];
              goto LABEL_347;
            }
          }
        }
      }
      v100 = 0x7FFFFFFF;
      goto LABEL_315;
    }
LABEL_334:
    *a2 = 0;
    return;
  }
  if (v80 && (WTF::StringImpl::substring(*this), (v80 = v113) != 0))
  {
    v81 = *((_QWORD *)v113 + 1);
    v82 = *((unsigned int *)v113 + 1);
    if ((*((_BYTE *)v113 + 16) & 4) == 0)
    {
      v83 = WTF::parseInteger<unsigned char,char16_t>(v81, v82, 10, 0);
      v84 = 0;
      goto LABEL_321;
    }
    v84 = 0;
  }
  else
  {
    v81 = 0;
    v82 = 0;
    v84 = 1;
  }
  v83 = WTF::parseInteger<unsigned char,unsigned char>(v81, v82, 10, 0);
LABEL_321:
  v101 = CFSTR("AAC-LC Codec String");
  if (v83 != 2)
    v101 = CFSTR("MPEG-4 AAC Codec String");
  if (v83 == 34)
    v102 = CFSTR("MP3 Codec String");
  else
    v102 = v101;
  if (HIBYTE(v83))
    v103 = v102;
  else
    v103 = CFSTR("MPEG-4 AAC Codec String");
  WebCore::localizedString(v103, (uint64_t)a2);
  if ((v84 & 1) == 0)
  {
    if (*(_DWORD *)v80 != 2)
    {
      *(_DWORD *)v80 -= 2;
      return;
    }
    v75 = v80;
    goto LABEL_336;
  }
}

void WebCore::Color::lightened(WebCore::Color *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  unsigned int v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  __int128 v29;
  _QWORD v30[2];

  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v29 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    v30[0] = &v28;
    v30[1] = &v29;
    v6 = _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v4), (uint64_t)v30);
  }
  else
  {
    if ((_DWORD)v4 == 255)
    {
      v5 = 0x11040000545454FFLL;
      goto LABEL_28;
    }
    v10 = bswap32(v4);
    v6 = (float)v10 / 255.0;
    v7 = (float)BYTE1(v10) / 255.0;
    v8 = (float)BYTE2(v10) / 255.0;
    v9 = (float)HIBYTE(v10) / 255.0;
  }
  if (v6 >= v7)
    v11 = v6;
  else
    v11 = v7;
  if (v11 < v8)
    v11 = v8;
  if (v11 == 0.0)
  {
    v12 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 0x8000000000000) != 0)
    {
      v13 = llroundf(*(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0x10) * 255.0);
      if (v13 >= 255)
        v13 = 255;
      v12 = v13 & ~(v13 >> 63);
    }
    v14 = ((_DWORD)v12 << 24) | 0x545454;
  }
  else
  {
    v15 = fminf(v11 + 0.33, 1.0) / v11;
    v16 = v7 * v15;
    v17 = v8 * v15;
    v18 = v9 * 255.0;
    v19 = llroundf((float)(v6 * v15) * 255.0);
    v20 = 255;
    if (v19 >= 255)
      v19 = 255;
    v21 = v19 & ~(v19 >> 63);
    v22 = llroundf(v16 * 255.0);
    if (v22 >= 255)
      v22 = 255;
    v23 = llroundf(v17 * 255.0);
    v24 = v22 & ~(v22 >> 63);
    if (v23 >= 255)
      v25 = 255;
    else
      v25 = v23;
    v26 = llroundf(v18);
    v27 = v25 & ~(v25 >> 63);
    if (v26 < 255)
      v20 = v26;
    v14 = (v27 << 16) | ((v20 & ~(v20 >> 63)) << 24) | (v24 << 8) | v21;
  }
  v5 = bswap32(v14) | 0x1104000000000000;
LABEL_28:
  *a2 = v5;
}

void WebCore::Color::darkened(WebCore::Color *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  __int128 v23;
  _QWORD v24[2];

  v3 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v23 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    v24[0] = &v22;
    v24[1] = &v23;
    v5 = _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v3), (uint64_t)v24);
  }
  else
  {
    if ((_DWORD)v3 == -1)
    {
      v4 = 0x11040000ABABABFFLL;
      goto LABEL_21;
    }
    v9 = bswap32(v3);
    v5 = (float)v9 / 255.0;
    v6 = (float)BYTE1(v9) / 255.0;
    v7 = (float)BYTE2(v9) / 255.0;
    v8 = (float)HIBYTE(v9) / 255.0;
  }
  if (v5 >= v6)
    v10 = v5;
  else
    v10 = v6;
  if (v10 < v7)
    v10 = v7;
  v11 = fmaxf((float)(v10 + -0.33) / v10, 0.0);
  v12 = v8 * 255.0;
  v13 = llroundf((float)(v5 * v11) * 255.0);
  v14 = 255;
  if (v13 >= 255)
    v13 = 255;
  v15 = v13 & ~(v13 >> 63);
  v16 = llroundf((float)(v6 * v11) * 255.0);
  if (v16 >= 255)
    v16 = 255;
  v17 = llroundf((float)(v7 * v11) * 255.0);
  v18 = v16 & ~(v16 >> 63);
  if (v17 >= 255)
    v19 = 255;
  else
    v19 = v17;
  v20 = llroundf(v12);
  v21 = v19 & ~(v19 >> 63);
  if (v20 < 255)
    v14 = v20;
  v4 = bswap32((v21 << 16) | ((v14 & ~(v14 >> 63)) << 24) | (v18 << 8) | v15) | 0x1104000000000000;
LABEL_21:
  *a2 = v4;
}

double WebCore::Color::luminance(WebCore::Color *this)
{
  unint64_t v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  float v44;
  __float2 v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v51;
  int v52;
  float v53;
  float v54;
  float v55;
  __int128 v56;

  v1 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v9 = *(float *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
    v8 = *(float *)((v1 & 0xFFFFFFFFFFFFLL) + 8);
    v10 = *(float *)((v1 & 0xFFFFFFFFFFFFLL) + 0xC);
    v3 = *(float *)((v1 & 0xFFFFFFFFFFFFLL) + 0x10);
    switch(HIBYTE(v1))
    {
      case 0u:
        v23 = *(float *)((v1 & 0xFFFFFFFFFFFFLL) + 8);
        v24 = *(float *)((v1 & 0xFFFFFFFFFFFFLL) + 0xC);
        v25 = powf(fabsf(v9), 2.1992);
        if (v9 < 0.0)
          v25 = -v25;
        if (v25 > 0.0)
          v26 = v25;
        else
          v26 = 0.0;
        if (v25 >= 1.0)
          v27 = 1.0;
        else
          v27 = v26;
        v28 = powf(fabsf(v23), 2.1992);
        if (v23 < 0.0)
          v28 = -v28;
        if (v28 > 0.0)
          v29 = v28;
        else
          v29 = 0.0;
        if (v28 >= 1.0)
          v30 = 1.0;
        else
          v30 = v29;
        v31 = powf(fabsf(v24), 2.1992);
        if (v24 < 0.0)
          v31 = -v31;
        if (v31 > 0.0)
          v32 = v31;
        else
          v32 = 0.0;
        if (v31 >= 1.0)
          v33 = 1.0;
        else
          v33 = v32;
        v34 = v27;
        return (float)((float)((float)((float)(v34 * 0.29734) + 0.0) + (float)(v30 * 0.62736)) + (float)(v33 * 0.075291));
      case 1u:
        LODWORD(v56) = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v8));
        *((float *)&v56 + 3) = v3;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v56);
        goto LABEL_62;
      case 2u:
        v35 = *(float *)((v1 & 0xFFFFFFFFFFFFLL) + 8);
        v36 = *(float *)((v1 & 0xFFFFFFFFFFFFLL) + 0xC);
        v37 = powf(fabsf(v9), 2.1992);
        if (v9 >= 0.0)
          v38 = v37;
        else
          v38 = -v37;
        v39 = powf(fabsf(v35), 2.1992);
        if (v35 >= 0.0)
          v30 = v39;
        else
          v30 = -v39;
        v33 = powf(fabsf(v36), 2.1992);
        if (v36 < 0.0)
          v33 = -v33;
        v34 = v38;
        return (float)((float)((float)((float)(v34 * 0.29734) + 0.0) + (float)(v30 * 0.62736)) + (float)(v33 * 0.075291));
      case 3u:
        LODWORD(v56) = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v8));
        *((float *)&v56 + 3) = v3;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v56);
        goto LABEL_62;
      case 4u:
      case 0xCu:
        v11 = (float)((float)(v9 * 0.21264) + 0.0) + (float)(v8 * 0.71517);
        v12 = 0.072192;
        goto LABEL_64;
      case 5u:
        LODWORD(v56) = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v8));
        *((float *)&v56 + 3) = v3;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v56);
        goto LABEL_62;
      case 6u:
        LODWORD(v56) = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v8));
        *((float *)&v56 + 3) = v3;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v56);
        goto LABEL_62;
      case 7u:
        LODWORD(v56) = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v8));
        *((float *)&v56 + 3) = v3;
        goto LABEL_56;
      case 8u:
        v52 = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        v53 = v8;
        v54 = v10;
        v55 = v3;
        v40 = WebCore::convertColor<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>>((float *)&v52);
        goto LABEL_55;
      case 9u:
        v52 = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        v53 = v8;
        v54 = v10;
        v55 = v3;
        v40 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v52);
LABEL_55:
        *(_QWORD *)&v56 = __PAIR64__(v41, LODWORD(v40));
        *((_QWORD *)&v56 + 1) = __PAIR64__(v43, v42);
LABEL_56:
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v56);
        goto LABEL_62;
      case 0xAu:
        LODWORD(v56) = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v8));
        *((float *)&v56 + 3) = v3;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::LCHA<float>,void>::convert((float *)&v56);
        goto LABEL_62;
      case 0xBu:
        v13 = (float)(v9 + 16.0) / 116.0;
        v14 = (float)(v8 / 500.0) + v13;
        v15 = v10 / 200.0;
        v16 = v14 * (float)(v14 * v14);
        if (v16 <= 0.0088565)
          v16 = (float)((float)(v14 * 116.0) + -16.0) / 903.3;
        v17 = v13 - v15;
        if (v9 <= 8.0)
        {
          v19 = v9 / 903.3;
        }
        else
        {
          v18 = (v9 + 16.0) / 116.0;
          v19 = (float)(v18 * v18) * v18;
        }
        v51 = v17 * (float)(v17 * v17);
        if (v51 <= 0.0088565)
          v51 = (float)((float)(v17 * 116.0) + -16.0) / 903.3;
        return (float)((float)((float)((float)((float)(v16 * 0.9643) * -0.02837) + 0.0) + (float)(v19 * 1.01))
                     + (float)((float)(v51 * 0.8251) * 0.021041));
      case 0xDu:
        v44 = *(float *)((v1 & 0xFFFFFFFFFFFFLL) + 8);
        v45 = __sincosf_stret(v10 * 0.017453);
        v46 = v9 + 0.0;
        v47 = v44 * v45.__cosval;
        v48 = v44 * v45.__sinval;
        v49 = (float)(v9 + 0.0) + (float)((float)(v44 * v45.__cosval) * -0.089484);
        return (float)((float)((float)((float)((float)((float)((float)(v46 + (float)(v47 * 0.39634))
                                                             + (float)(v48 * 0.2158))
                                                     * (float)((float)((float)(v46 + (float)(v47 * 0.39634))
                                                                     + (float)(v48 * 0.2158))
                                                             * (float)((float)(v46 + (float)(v47 * 0.39634))
                                                                     + (float)(v48 * 0.2158))))
                                             * -0.040576)
                                     + 0.0)
                             + (float)((float)((float)((float)(v46 + (float)(v47 * -0.10556)) + (float)(v48 * -0.063854))
                                             * (float)((float)((float)(v46 + (float)(v47 * -0.10556))
                                                             + (float)(v48 * -0.063854))
                                                     * (float)((float)(v46 + (float)(v47 * -0.10556))
                                                             + (float)(v48 * -0.063854))))
                                     * 1.1123))
                     + (float)((float)((float)(v49 + (float)(v48 * -1.2915))
                                     * (float)((float)(v49 + (float)(v48 * -1.2915))
                                             * (float)(v49 + (float)(v48 * -1.2915))))
                             * -0.071711));
      case 0xEu:
        v20 = (float)(v9 + 0.0) + (float)(v8 * -0.089484);
        v21 = (float)((float)(v9 + 0.0) + (float)(v8 * -0.10556)) + (float)(v10 * -0.063854);
        v22 = (float)((float)(v9 + 0.0) + (float)(v8 * 0.39634)) + (float)(v10 * 0.2158);
        v10 = (float)(v20 + (float)(v10 * -1.2915))
            * (float)((float)(v20 + (float)(v10 * -1.2915)) * (float)(v20 + (float)(v10 * -1.2915)));
        v11 = (float)((float)((float)(v22 * (float)(v22 * v22)) * -0.040576) + 0.0)
            + (float)((float)(v21 * (float)(v21 * v21)) * 1.1123);
        v12 = -0.071711;
        goto LABEL_64;
      case 0xFu:
        LODWORD(v56) = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v8));
        *((float *)&v56 + 3) = v3;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v56);
        goto LABEL_62;
      case 0x10u:
        LODWORD(v56) = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v8));
        *((float *)&v56 + 3) = v3;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v56);
        goto LABEL_62;
      case 0x12u:
        v11 = (float)((float)(v9 * -0.02837) + 0.0) + (float)(v8 * 1.01);
        v12 = 0.021041;
LABEL_64:
        v7 = v11 + (float)(v10 * v12);
        break;
      case 0x13u:
LABEL_62:
        v7 = v8;
        break;
      default:
        LODWORD(v56) = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v56 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v8));
        goto LABEL_3;
    }
  }
  else
  {
    v2 = bswap32(v1);
    v3 = (float)HIBYTE(v2) / 255.0;
    *(float *)&v56 = (float)v2 / 255.0;
    *(float32x2_t *)((char *)&v56 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v2), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
LABEL_3:
    *((float *)&v56 + 3) = v3;
    v4 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v56);
    return (float)((float)((float)((float)(v4 * 0.21264) + 0.0) + (float)(v5 * 0.71517)) + (float)(v6 * 0.072192));
  }
  return v7;
}

uint64_t WebCore::Color::anyComponentIsNone(WebCore::Color *this)
{
  return 0;
}

uint64_t WebCore::Color::colorWithAlpha@<X0>(uint64_t this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v7 = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC);
    if (HIBYTE(v4) >= 0x14)
      v8 = 0x110C000000000000;
    else
      v8 = v4 & 0xFF00000000000000 | 0xC000000000000;
    v9 = 1.0;
    if (a2 <= 1.0)
      v9 = a2;
    if (a2 >= 0.0)
      v10 = v9;
    else
      v10 = 0.0;
    v11 = v4 & 0x1000000000000;
    v12 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    this = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)this = 1;
    *(_QWORD *)(this + 4) = v12;
    *(_DWORD *)(this + 12) = v7;
    *(float *)(this + 16) = v10;
    v6 = v8 | v11 | this;
  }
  else
  {
    v5 = llroundf(a2 * 255.0);
    if (v5 >= 255)
      v5 = 255;
    v6 = v5 & ~(v5 >> 63) | v4 & 0x10000FFFFFF00 | 0x1104000000000000;
  }
  *a3 = v6;
  return this;
}

uint64_t WebCore::Color::invertedColorWithAlpha@<X0>(uint64_t this@<X0>, float a2@<S0>, uint64_t *a3@<X8>, int32x2_t a4@<D1>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  __int32 v10;
  float v11;
  float v12;
  float v13;
  int8x8_t v19;
  int8x8_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float32x2_t v34;
  int8x8_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  float v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  __int32 v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v75;
  float v76;
  float v77;
  float v79;
  float v80;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int8x8_t v89;
  int8x8_t v91;
  int8x8_t v92;
  int8x8_t v95;
  float32x2_t v96;
  int8x8_t v97;
  float v98;
  float cosval;
  __float2 v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  unsigned int v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float32x2_t v137;
  float32x2_t v138;
  int8x8_t v139;
  float v140;
  int32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x2_t v145;
  int32x2_t v146;
  float v147;
  float v148;
  float v149;
  float v150;
  uint64_t v152;
  __int32 v153;
  __int32 v154;
  int8x16_t v155;

  v6 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v9 = *(int8x8_t *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
    a4.i32[0] = *(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC);
    v10 = *(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10);
    switch(HIBYTE(v6))
    {
      case 0u:
        v11 = 1.0;
        v12 = 1.0 - *(float *)a4.i32;
        if (a2 <= 1.0)
          v11 = a2;
        if (a2 >= 0.0)
          v13 = v11;
        else
          v13 = 0.0;
        v137 = *(float32x2_t *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        __asm { FMOV            V1.2S, #1.0 }
        *(int8x8_t *)(this + 4) = vbsl_s8(vorr_s8((int8x8_t)vcltz_f32(v137), (int8x8_t)vcgez_f32(v137)), (int8x8_t)vsub_f32((float32x2_t)_D1, v137), _D1);
        *(float *)(this + 12) = v12;
        *(float *)(this + 16) = v13;
        v8 = this | 0xC000000000000;
        goto LABEL_129;
      case 1u:
        v25 = 1.0;
        v26 = 1.0 - *(float *)a4.i32;
        if (a2 <= 1.0)
          v25 = a2;
        if (a2 >= 0.0)
          v27 = v25;
        else
          v27 = 0.0;
        v138 = *(float32x2_t *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        __asm { FMOV            V1.2S, #1.0 }
        *(int8x8_t *)(this + 4) = vbsl_s8(vorr_s8((int8x8_t)vcltz_f32(v138), (int8x8_t)vcgez_f32(v138)), (int8x8_t)vsub_f32((float32x2_t)_D1, v138), _D1);
        *(float *)(this + 12) = v26;
        *(float *)(this + 16) = v27;
        v29 = 0x10C000000000000;
        goto LABEL_128;
      case 2u:
        v30 = 0.0;
        v31 = *(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC);
        v139 = *(int8x8_t *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        v148 = a2;
        v32 = powf(fabsf(*(float *)a4.i32), 2.1992);
        if (v31 >= 0)
          v33 = v32;
        else
          v33 = -v32;
        v34 = (float32x2_t)vand_s8(v139, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v139), (int8x8_t)vcgez_f32((float32x2_t)v139)));
        v35 = (int8x8_t)vcltz_s32((int32x2_t)v34);
        v36 = vabs_f32(v34);
        v134 = v36.f32[0];
        v140 = powf(v36.f32[1], 2.1992);
        v37.f32[0] = powf(v134, 2.1992);
        v37.f32[1] = v140;
        *(int8x8_t *)v155.i8 = vbsl_s8(v35, (int8x8_t)vneg_f32(v37), (int8x8_t)v37);
        v155.i64[1] = __PAIR64__(v10, LODWORD(v33));
        v38 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v155);
        goto LABEL_112;
      case 3u:
        v41 = *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC);
        v141 = (int32x2_t)vand_s8(v9, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v9), (int8x8_t)vcgez_f32((float32x2_t)v9)));
        v42 = fabsf(*(float *)v141.i32);
        v148 = a2;
        if (v42 <= 0.04045)
          v135 = v42 / 12.92;
        else
          v135 = powf((float)(v42 + 0.055) / 1.055, 2.4);
        v114 = fabsf(*(float *)&v141.i32[1]);
        if (v114 <= 0.04045)
          v115 = v114 / 12.92;
        else
          v115 = powf((float)(v114 + 0.055) / 1.055, 2.4);
        v119 = fabsf(v41);
        if (v119 <= 0.04045)
        {
          v120 = v119 / 12.92;
        }
        else
        {
          v133 = v115;
          v120 = powf((float)(v119 + 0.055) / 1.055, 2.4);
          v115 = v133;
        }
        v30 = 0.0;
        *(int8x8_t *)v155.i8 = vbsl_s8((int8x8_t)vcltz_s32(v141), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v115), LODWORD(v135))), (int8x8_t)__PAIR64__(LODWORD(v115), LODWORD(v135)));
        if (v41 < 0.0)
          v120 = -v120;
        v155.i64[1] = __PAIR64__(v10, LODWORD(v120));
        v38 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v155);
LABEL_112:
        v122 = 1.0 - v38;
        v123 = 1.0 - v39;
        v124 = 1.0 - v40;
        if (v148 <= 1.0)
          v125 = v148;
        else
          v125 = 1.0;
        if (v148 >= 0.0)
          v30 = v125;
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        *(float *)(this + 4) = v122;
        *(float *)(this + 8) = v123;
        *(float *)(this + 12) = v124;
        goto LABEL_118;
      case 4u:
        v155.i64[0] = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        v155.i64[1] = __PAIR64__(v10, a4.u32[0]);
        v149 = a2;
        WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion((int8x8_t *)&v155);
        goto LABEL_81;
      case 5u:
        v150 = a2;
        LODWORD(v46) = HIDWORD(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4));
        v47 = *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC);
        if (fabsf(*(float *)v9.i32) <= 0.03125)
        {
          v50 = *(float *)v9.i32 * 0.0625;
        }
        else
        {
          v48 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
          v49 = powf(*(float *)v9.i32, 1.8);
          if (v48 >= 0)
            v50 = v49;
          else
            v50 = -v49;
        }
        if (fabsf(v46) <= 0.03125)
        {
          v117 = v46 * 0.0625;
        }
        else
        {
          v116 = powf(v46, 1.8);
          if (v46 >= 0.0)
            v117 = v116;
          else
            v117 = -v116;
        }
        if (fabsf(v47) <= 0.03125)
        {
          v121 = v47 * 0.0625;
        }
        else
        {
          v121 = powf(v47, 1.8);
          if (v47 < 0.0)
            v121 = -v121;
        }
        v65 = 0.0;
        v155.i64[0] = __PAIR64__(LODWORD(v117), LODWORD(v50));
        v155.i64[1] = __PAIR64__(v10, LODWORD(v121));
        v106 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v155);
        goto LABEL_121;
      case 6u:
        v155.i64[0] = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        v155.i64[1] = __PAIR64__(v10, a4.u32[0]);
        v149 = a2;
        WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v155);
        goto LABEL_81;
      case 7u:
        v155.i64[0] = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        v155.i64[1] = __PAIR64__(v10, a4.u32[0]);
        v149 = a2;
        goto LABEL_37;
      case 8u:
        v82 = *(float *)v9.i32 / 30.0;
        v83 = vmuls_lane_f32(0.01, (float32x2_t)v9, 1);
        *(float *)a4.i32 = *(float *)a4.i32 * 0.01;
        v146 = a4;
        if ((float)(1.0 - *(float *)a4.i32) >= *(float *)a4.i32)
          v84 = *(float *)a4.i32;
        else
          v84 = 1.0 - *(float *)a4.i32;
        v131 = fmodf(v82 + 0.0, 12.0);
        v136 = -(float)(v83 * v84);
        v130 = fmodf(v82 + 8.0, 12.0);
        v85 = fmodf(v82 + 4.0, 12.0);
        v86 = v85 + -3.0;
        v87 = 9.0 - v85;
        if (v87 >= v86)
          v87 = v86;
        if (v87 > 1.0)
          v87 = 1.0;
        *(float *)&v132 = *(float *)v146.i32 + (float)(v136 * fmaxf(v87, -1.0));
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        __asm { FMOV            V0.2S, #-3.0 }
        v89 = (int8x8_t)vadd_f32((float32x2_t)__PAIR64__(LODWORD(v130), LODWORD(v131)), _D0);
        __asm { FMOV            V1.2S, #9.0 }
        v91 = (int8x8_t)vsub_f32(_D1, (float32x2_t)__PAIR64__(LODWORD(v130), LODWORD(v131)));
        v92 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v89, (float32x2_t)v91), v91, v89);
        __asm
        {
          FMOV            V1.2S, #1.0
          FMOV            V2.2S, #-1.0
        }
        v95 = (int8x8_t)vmla_n_f32((float32x2_t)vdup_lane_s32(v146, 0), vmaxnm_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v92, (float32x2_t)_D1), _D1, v92), _D2), v136);
        v96 = (float32x2_t)vand_s8(v95, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v95), (int8x8_t)vcgez_f32((float32x2_t)v95)));
        *(int8x8_t *)(this + 4) = vbsl_s8((int8x8_t)vcltz_f32(v96), _D1, vbic_s8((int8x8_t)vsub_f32((float32x2_t)_D1, v96), (int8x8_t)vcgt_f32(v96, (float32x2_t)_D1)));
        v97 = (int8x8_t)__PAIR64__(LODWORD(a2), v132);
        *(float *)v97.i32 = 1.0 - *(float *)&v132;
        *(int8x8_t *)(this + 12) = vbsl_s8((int8x8_t)vcltz_f32((float32x2_t)__PAIR64__(LODWORD(a2), v132)), (int8x8_t)1065353216, vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(LODWORD(a2), v132), (float32x2_t)_D1), (int8x8_t)0x3F80000000000000, v97));
        break;
      case 9u:
        v152 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        v153 = a4.i32[0];
        v154 = v10;
        v149 = a2;
        v155.i32[0] = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v152);
        *(uint64_t *)((char *)v155.i64 + 4) = __PAIR64__(v52, v51);
        v155.i32[3] = v53;
LABEL_37:
        v43 = WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>((int8x8_t *)&v155);
        goto LABEL_81;
      case 0xAu:
        v155.i64[0] = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        v155.i64[1] = __PAIR64__(v10, a4.u32[0]);
        v149 = a2;
        WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::LCHA<float>,void>::convert((float *)v155.i32);
        goto LABEL_81;
      case 0xBu:
        v150 = a2;
        LODWORD(v54) = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        v55 = (float)(*(float *)v9.i32 + 16.0) / 116.0;
        v56 = (float)(*(float *)&v9.i32[1] / 500.0) + v55;
        v57 = v56 * (float)(v56 * v56);
        if (v57 <= 0.0088565)
          v57 = (float)((float)(v56 * 116.0) + -16.0) / 903.3;
        v58 = v55 - (float)(*(float *)a4.i32 / 200.0);
        if (v54 <= 8.0)
        {
          v60 = v54 / 903.3;
        }
        else
        {
          v59 = (v54 + 16.0) / 116.0;
          v60 = (float)(v59 * v59) * v59;
        }
        v118 = v58 * (float)(v58 * v58);
        if (v118 <= 0.0088565)
          v118 = (float)((float)(v58 * 116.0) + -16.0) / 903.3;
        v65 = 0.0;
        *(float *)v155.i32 = v57 * 0.9643;
        *(float *)&v155.i32[1] = v60;
        *(float *)&v155.i32[2] = v118 * 0.8251;
        v155.i32[3] = v10;
        v106 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v155);
        goto LABEL_121;
      case 0xCu:
        v61 = 1.0;
        v62 = 1.0 - *(float *)a4.i32;
        if (a2 <= 1.0)
          v61 = a2;
        if (a2 >= 0.0)
          v63 = v61;
        else
          v63 = 0.0;
        v142 = *(float32x2_t *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        __asm { FMOV            V1.2S, #1.0 }
        *(int8x8_t *)(this + 4) = vbsl_s8(vorr_s8((int8x8_t)vcltz_f32(v142), (int8x8_t)vcgez_f32(v142)), (int8x8_t)vsub_f32((float32x2_t)_D1, v142), _D1);
        *(float *)(this + 12) = v62;
        *(float *)(this + 16) = v63;
        v29 = 0xC0C000000000000;
        goto LABEL_128;
      case 0xDu:
        v150 = a2;
        v65 = 0.0;
        LODWORD(v98) = HIDWORD(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4));
        v147 = COERCE_FLOAT(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4));
        v100 = __sincosf_stret(*(float *)a4.i32 * 0.017453);
        cosval = v100.__cosval;
        v101 = v98 * v100.__sinval;
        v102 = (float)((float)(v147 + 0.0) + (float)((float)(v98 * v100.__cosval) * -0.10556))
             + (float)((float)(v98 * v100.__sinval) * -0.063854);
        v103 = (float)((float)((float)(v147 + 0.0) + (float)((float)(v98 * cosval) * 0.39634)) + (float)(v101 * 0.2158))
             * (float)((float)((float)((float)(v147 + 0.0) + (float)((float)(v98 * cosval) * 0.39634))
                             + (float)(v101 * 0.2158))
                     * (float)((float)((float)(v147 + 0.0) + (float)((float)(v98 * cosval) * 0.39634))
                             + (float)(v101 * 0.2158)));
        v104 = v102 * (float)(v102 * v102);
        v105 = (float)((float)((float)(v147 + 0.0) + (float)((float)(v98 * cosval) * -0.089484))
                     + (float)(v101 * -1.2915))
             * (float)((float)((float)((float)(v147 + 0.0) + (float)((float)(v98 * cosval) * -0.089484))
                             + (float)(v101 * -1.2915))
                     * (float)((float)((float)(v147 + 0.0) + (float)((float)(v98 * cosval) * -0.089484))
                             + (float)(v101 * -1.2915)));
        *(float32x2_t *)v155.i8 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBD2632C13F9D0A66, v103), (float32x2_t)0x3F8E5F6ABF0ECCF7, v104), (float32x2_t)0xBD92DD3F3E90127DLL, v105);
        *(float *)&v155.i32[2] = (float)((float)((float)(v103 * -0.076373) + 0.0) + (float)(v104 * -0.42149))
                               + (float)(v105 * 1.5869);
        v155.i32[3] = v10;
        goto LABEL_78;
      case 0xEu:
        v65 = 0.0;
        v66 = *(float *)v9.i32 + 0.0;
        v150 = a2;
        v67 = (float)(*(float *)v9.i32 + 0.0) + (float)(*(float *)&v9.i32[1] * -0.089484);
        *(float *)v9.i32 = (float)((float)(*(float *)v9.i32 + 0.0) + (float)(*(float *)&v9.i32[1] * -0.10556))
                         + (float)(*(float *)a4.i32 * -0.063854);
        v68 = (float)((float)(v66 + (float)(*(float *)&v9.i32[1] * 0.39634)) + (float)(*(float *)a4.i32 * 0.2158))
            * (float)((float)((float)(v66 + (float)(*(float *)&v9.i32[1] * 0.39634)) + (float)(*(float *)a4.i32 * 0.2158))
                    * (float)((float)(v66 + (float)(*(float *)&v9.i32[1] * 0.39634)) + (float)(*(float *)a4.i32 * 0.2158)));
        v69 = *(float *)v9.i32 * (float)(*(float *)v9.i32 * *(float *)v9.i32);
        v70 = (float)(v67 + (float)(*(float *)a4.i32 * -1.2915))
            * (float)((float)(v67 + (float)(*(float *)a4.i32 * -1.2915))
                    * (float)(v67 + (float)(*(float *)a4.i32 * -1.2915)));
        *(float32x2_t *)v155.i8 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBD2632C13F9D0A66, v68), (float32x2_t)0x3F8E5F6ABF0ECCF7, v69), (float32x2_t)0xBD92DD3F3E90127DLL, v70);
        *(float *)&v155.i32[2] = (float)((float)((float)(v68 * -0.076373) + 0.0) + (float)(v69 * -0.42149))
                               + (float)(v70 * 1.5869);
        v155.i32[3] = v10;
LABEL_78:
        v106 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)v155.i32);
LABEL_121:
        v126 = 1.0 - v106;
        v127 = 1.0 - v107;
        v128 = 1.0 - v108;
        if (v150 <= 1.0)
          v129 = v150;
        else
          v129 = 1.0;
        if (v150 >= 0.0)
          v65 = v129;
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        *(float *)(this + 4) = v126;
        *(float *)(this + 8) = v127;
        *(float *)(this + 12) = v128;
        *(float *)(this + 16) = v65;
        break;
      case 0xFu:
        v71 = 1.0;
        v72 = 1.0 - *(float *)a4.i32;
        if (a2 <= 1.0)
          v71 = a2;
        if (a2 >= 0.0)
          v73 = v71;
        else
          v73 = 0.0;
        v143 = *(float32x2_t *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        __asm { FMOV            V1.2S, #1.0 }
        *(int8x8_t *)(this + 4) = vbsl_s8(vorr_s8((int8x8_t)vcltz_f32(v143), (int8x8_t)vcgez_f32(v143)), (int8x8_t)vsub_f32((float32x2_t)_D1, v143), _D1);
        *(float *)(this + 12) = v72;
        *(float *)(this + 16) = v73;
        v29 = 0xF0C000000000000;
        goto LABEL_128;
      case 0x10u:
        v75 = 1.0;
        v76 = 1.0 - *(float *)a4.i32;
        if (a2 <= 1.0)
          v75 = a2;
        if (a2 >= 0.0)
          v77 = v75;
        else
          v77 = 0.0;
        v144 = *(float32x2_t *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        __asm { FMOV            V1.2S, #1.0 }
        *(int8x8_t *)(this + 4) = vbsl_s8(vorr_s8((int8x8_t)vcltz_f32(v144), (int8x8_t)vcgez_f32(v144)), (int8x8_t)vsub_f32((float32x2_t)_D1, v144), _D1);
        *(float *)(this + 12) = v76;
        *(float *)(this + 16) = v77;
        v29 = 0x100C000000000000;
        goto LABEL_128;
      case 0x11u:
        v79 = 1.0;
        v80 = 1.0 - *(float *)a4.i32;
        if (a2 <= 1.0)
          v79 = a2;
        if (a2 >= 0.0)
          v30 = v79;
        else
          v30 = 0.0;
        v145 = *(float32x2_t *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        __asm { FMOV            V1.2S, #1.0 }
        *(int8x8_t *)(this + 4) = vbsl_s8(vorr_s8((int8x8_t)vcltz_f32(v145), (int8x8_t)vcgez_f32(v145)), (int8x8_t)vsub_f32((float32x2_t)_D1, v145), _D1);
        *(float *)(this + 12) = v80;
LABEL_118:
        *(float *)(this + 16) = v30;
        break;
      case 0x12u:
        v155.i64[0] = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        v155.i64[1] = __PAIR64__(v10, a4.u32[0]);
        v149 = a2;
        v43 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v155);
        goto LABEL_81;
      case 0x13u:
        v155.i64[0] = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
        v155.i64[1] = __PAIR64__(v10, a4.u32[0]);
        v149 = a2;
        v43 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)v155.i32);
LABEL_81:
        v109 = 1.0 - v43;
        v110 = 1.0 - v44;
        v111 = 1.0 - v45;
        if (v149 <= 1.0)
          v112 = v149;
        else
          v112 = 1.0;
        if (v149 >= 0.0)
          v113 = v112;
        else
          v113 = 0.0;
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        *(float *)(this + 4) = v109;
        *(float *)(this + 8) = v110;
        *(float *)(this + 12) = v111;
        *(float *)(this + 16) = v113;
        break;
      default:
        v19 = vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v9), (int8x8_t)vcgez_f32((float32x2_t)v9));
        __asm { FMOV            V9.2S, #1.0 }
        v21 = (int8x8_t)vsub_f32((float32x2_t)_D9, (float32x2_t)v9);
        v22 = 1.0;
        v23 = 1.0 - *(float *)a4.i32;
        if (a2 <= 1.0)
          v22 = a2;
        if (a2 >= 0.0)
          v24 = v22;
        else
          v24 = 0.0;
        this = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)this = 1;
        *(int8x8_t *)(this + 4) = vbsl_s8(v19, v21, _D9);
        *(float *)(this + 12) = v23;
        *(float *)(this + 16) = v24;
        break;
    }
    v29 = 0x110C000000000000;
LABEL_128:
    v8 = this | v29;
  }
  else
  {
    v7 = llroundf(a2 * 255.0);
    if (v7 >= 255)
      v7 = 255;
    v8 = bswap32((bswap32(v6 & 0xFFFFFF00) | ((v7 & ~(v7 >> 63)) << 24)) ^ 0xFFFFFF) | 0x1104000000000000;
  }
LABEL_129:
  *a3 = v8;
  return this;
}

BOOL WebCore::Color::isBlackColor(WebCore::Color *this, const WebCore::Color *a2)
{
  return WebCore::Color::callOnUnderlyingType<WebCore::Color::isBlackColor(WebCore::Color const&)::$_0>(*(_QWORD *)this);
}

BOOL WebCore::Color::callOnUnderlyingType<WebCore::Color::isBlackColor(WebCore::Color const&)::$_0>(unint64_t a1)
{
  unsigned int v1;
  float v3;
  float v4;
  _BOOL4 v5;
  BOOL v6;

  if ((a1 & 0x8000000000000) != 0)
  {
    v3 = *(float *)((a1 & 0xFFFFFFFFFFFFLL) + 8);
    v4 = *(float *)((a1 & 0xFFFFFFFFFFFFLL) + 0xC);
    switch(HIBYTE(a1))
    {
      case 8u:
        v6 = v4 == 0.0;
        goto LABEL_13;
      case 9u:
        v6 = v4 == 100.0;
        goto LABEL_13;
      case 0xAu:
      case 0xBu:
      case 0xDu:
      case 0xEu:
        v3 = *(float *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        goto LABEL_12;
      case 0x12u:
      case 0x13u:
LABEL_12:
        v6 = v3 == 0.0;
LABEL_13:
        v5 = v6;
        break;
      default:
        v5 = *(float *)((a1 & 0xFFFFFFFFFFFFLL) + 4) == 0.0;
        if (v3 != 0.0)
          v5 = 0;
        if (v4 != 0.0)
          v5 = 0;
        break;
    }
    return *(float *)((a1 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0 && v5;
  }
  else
  {
    v1 = bswap32(a1);
    return (v1 & 0xFFFFFF) == 0 && HIBYTE(v1) == 255;
  }
}

BOOL WebCore::Color::isWhiteColor(WebCore::Color *this, const WebCore::Color *a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  float v7;
  float v8;
  float v9;
  _BOOL4 v10;
  float v11;
  BOOL v12;

  v2 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v7 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 8);
    v9 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0xC);
    v8 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0x10);
    switch(HIBYTE(v2))
    {
      case 8u:
        v12 = v9 == 100.0;
        goto LABEL_20;
      case 9u:
        goto LABEL_18;
      case 0xAu:
      case 0xBu:
        v7 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
LABEL_18:
        v11 = 100.0;
        goto LABEL_19;
      case 0xDu:
      case 0xEu:
        v7 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
        goto LABEL_16;
      case 0x12u:
      case 0x13u:
LABEL_16:
        v11 = 1.0;
LABEL_19:
        v12 = v7 == v11;
LABEL_20:
        v10 = v12;
        break;
      default:
        v10 = *(float *)((v2 & 0xFFFFFFFFFFFFLL) + 4) == 1.0;
        if (v7 != 1.0)
          v10 = 0;
        if (v9 != 1.0)
          v10 = 0;
        break;
    }
    return v8 == 1.0 && v10;
  }
  else
  {
    v3 = bswap32(v2);
    v12 = (~v3 & 0xFFFFFF) == 0;
    v4 = HIBYTE(v3);
    return v12 && v4 > 0xFE;
  }
}

uint64_t WebCore::operator<<(int a1, WebCore *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  WebCore::serializationForRenderTreeAsText(this, (uint64_t *)&v6);
  v3 = WTF::TextStream::operator<<();
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

void WebCore::blend(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D2>, double a6@<D5>, double a7@<D6>, double a8@<D7>)
{
  double v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  float v13;
  float v14;
  unsigned int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  float v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v50;
  float v51;
  int v52;
  int v53;
  int v54;
  int v55;
  float v56;
  float v57;
  float v58;
  double v59;
  double v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  double v65;
  float v66;
  int v67;
  int v68;
  int v69;
  int v70;
  float v72;
  int v73;
  int v74;
  float v75;
  int v76;
  int v77;
  float v78;
  unint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  char *v85;
  __int128 *v86;

  v9 = 1.0;
  if (*(double *)a3 == 1.0 && (*(_BYTE *)(a2 + 6) & 4) == 0)
  {
    v38 = 0;
    goto LABEL_35;
  }
  v10 = *a1;
  if ((v10 & 0x8000000000000) != 0
    && HIBYTE(v10) <= 0x13
    && (((1 << SHIBYTE(v10)) & 0xDFC7F) != 0 || HIBYTE(v10) == 7 && (v10 & 0x2000000000000) != 0)
    || (v11 = *(_QWORD *)a2, (*(_QWORD *)a2 & 0x8000000000000) != 0)
    && HIBYTE(v11) <= 0x13
    && (((1 << SHIBYTE(v11)) & 0xDFC7F) != 0 || HIBYTE(v11) == 7 && (v11 & 0x2000000000000) != 0))
  {
    v48 = a3;
    WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::OKLab<float>>(v10);
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v57 = v56;
    WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::OKLab<float>>(*(_QWORD *)a2);
    if (*(unsigned __int8 *)(v48 + 9) - 1 < 2)
    {
      v80 = 1.0;
      v79 = __PAIR64__(v61, LODWORD(v60));
      v65 = 1.0;
LABEL_50:
      v78 = *(float *)&v59;
      LODWORD(v59) = v53;
      LODWORD(v60) = v55;
      v66 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::OKLab>(v51, v59, v60, v57, v65, v62, v63, v64, v58, v78, *(float *)&v79, *((float *)&v79 + 1), v80);
      v68 = v67;
      v43 = v69;
      v45 = v70;
      v46 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v46 = 1;
      *(float *)(v46 + 4) = v66;
      *(_DWORD *)(v46 + 8) = v68;
      v47 = 0xE0C000000000000;
      goto LABEL_38;
    }
    if (!*(_BYTE *)(v48 + 9))
    {
      v62 = *(double *)v48;
      v65 = 1.0 - *(double *)v48;
      v80 = *(double *)v48;
      v79 = __PAIR64__(v61, LODWORD(v60));
      goto LABEL_50;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x196145754);
  }
  if ((v10 & 0x8000000000000) != 0)
  {
    v84 = *(_OWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 4);
    v85 = &v83;
    v86 = &v84;
    v81 = a3;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v10), (uint64_t)&v85);
    a3 = v81;
    v11 = *(_QWORD *)a2;
  }
  else
  {
    v12 = bswap32(v10);
    v13 = (float)v12 / 255.0;
    *(float *)&v9 = (float)BYTE1(v12) / 255.0;
    *(float *)&a5 = (float)BYTE2(v12) / 255.0;
    v14 = (float)HIBYTE(v12) / 255.0;
  }
  if ((v11 & 0x8000000000000) != 0)
  {
    v84 = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 4);
    v85 = &v83;
    v86 = &v84;
    v82 = a3;
    v72 = v13;
    v73 = LODWORD(v9);
    v74 = LODWORD(a5);
    v75 = v14;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v11), (uint64_t)&v85);
    a3 = v82;
    LODWORD(a6) = v76;
    v13 = v72;
    LODWORD(a7) = LODWORD(v9);
    LODWORD(v9) = v73;
    v16 = *(float *)&a5;
    LODWORD(a5) = v74;
    LODWORD(a8) = v77;
    v14 = v75;
  }
  else
  {
    v15 = bswap32(v11);
    *(float *)&a6 = (float)v15 / 255.0;
    *(float *)&a7 = (float)BYTE1(v15) / 255.0;
    v16 = (float)BYTE2(v15) / 255.0;
    *(float *)&a8 = (float)HIBYTE(v15) / 255.0;
  }
  if (*(_BYTE *)(a3 + 9))
  {
    if (*(unsigned __int8 *)(a3 + 9) - 1 < 2)
    {
      v39 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v13, v9, a5, v14, 1.0, a6, a7, a8, *(float *)&a6, *(float *)&a7, v16, *(float *)&a8, 1.0);
      v41 = v40;
      v43 = v42;
      v45 = v44;
      v46 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v46 = 1;
      *(float *)(v46 + 4) = v39;
      *(_DWORD *)(v46 + 8) = v41;
      v47 = 0x70C000000000000;
LABEL_38:
      v38 = v46 | v47;
      *(_DWORD *)(v46 + 12) = v43;
      *(_DWORD *)(v46 + 16) = v45;
      goto LABEL_35;
    }
    goto LABEL_53;
  }
  v17 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v13, v9, a5, v14, 1.0 - *(double *)a3, a6, a7, a8, *(float *)&a6, *(float *)&a7, v16, *(float *)&a8, *(double *)a3);
  v21 = 255.0;
  v22 = v17 * 255.0;
  if (v17 > 1.0)
    v22 = 255.0;
  v23 = v18 * 255.0;
  if (v18 > 1.0)
    v23 = 255.0;
  if (v19 <= 1.0)
    v21 = v19 * 255.0;
  if (v17 >= 0.0)
    v24 = v22;
  else
    v24 = 0.0;
  if (v18 >= 0.0)
    v25 = v23;
  else
    v25 = 0.0;
  if (v19 >= 0.0)
    v26 = v21;
  else
    v26 = 0.0;
  v27 = v20 * 255.0;
  v28 = llroundf(v24);
  v29 = 255;
  if (v28 >= 255)
    v28 = 255;
  v30 = llroundf(v25);
  v31 = v28 & ~(v28 >> 63);
  if (v30 >= 255)
    v32 = 255;
  else
    v32 = v30;
  v33 = llroundf(v26);
  v34 = v32 & ~(v32 >> 63);
  if (v33 >= 255)
    v35 = 255;
  else
    v35 = v33;
  v36 = llroundf(v27);
  v37 = v35 & ~(v35 >> 63);
  if (v36 < 255)
    v29 = v36;
  v38 = bswap32((v37 << 16) | ((v29 & ~(v29 >> 63)) << 24) | (v34 << 8) | v31) | 0x1104000000000000;
LABEL_35:
  *a4 = v38;
}

void WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  _QWORD v5[4];

  if ((a1 & 0x8000000000000) != 0)
  {
    v5[2] = v1;
    v5[3] = v2;
    v4 = *(_OWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
    v5[0] = &v3;
    v5[1] = &v4;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(a1), (uint64_t)v5);
  }
}

void WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::OKLab<float>>(unint64_t a1)
{
  char v1;
  __int128 v2;
  _QWORD v3[2];

  if ((a1 & 0x8000000000000) != 0)
  {
    v2 = *(_OWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
    v3[0] = &v1;
    v3[1] = &v2;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_5OKLabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(a1), (uint64_t)v3);
  }
  else
  {
    LODWORD(v3[0]) = bswap32(a1);
    WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(v3);
  }
}

float WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float v16;
  float result;

  v1 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  if (v2 >= v1)
    v4 = v1;
  else
    v4 = v2;
  if (v2 >= v1)
    v5 = v2;
  else
    v5 = v1;
  if (v3 >= v4)
  {
    if (v3 >= v5)
      v5 = v3;
  }
  else
  {
    v4 = v3;
  }
  v6 = v5 - v4;
  v7 = (float)(v4 + v5) * 0.5;
  if (v6 == 0.0)
    return NAN;
  v8 = v7 == 0.0 || v7 == 1.0;
  v9 = 0.0;
  if (!v8)
  {
    v10 = 1.0 - v7;
    if ((float)(1.0 - v7) >= v7)
      v10 = v7;
    v9 = (float)(v5 - v7) / v10;
  }
  v11 = NAN;
  if (v5 == v3)
    v11 = (float)((float)(v1 - v2) / v6) + 4.0;
  if (v5 == v2)
    v11 = (float)((float)(v3 - v1) / v6) + 2.0;
  v12 = (float)(v2 - v3) / v6;
  v13 = v2 < v3;
  v14 = 6.0;
  if (!v13)
    v14 = 0.0;
  v15 = v14 + v12;
  if (v5 == v1)
    v16 = v15;
  else
    v16 = v11;
  result = v16 * 60.0;
  if (v9 < 0.0)
    result = result + 180.0;
  if (result >= 360.0)
    return result + -360.0;
  return result;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v1 = *a1 / 30.0;
  v2 = a1[1] * 0.01;
  v3 = a1[2] * 0.01;
  if ((float)(1.0 - v3) >= v3)
    v4 = a1[2] * 0.01;
  else
    v4 = 1.0 - v3;
  v5 = fmodf(v1 + 0.0, 12.0);
  v6 = v5 + -3.0;
  v7 = 9.0 - v5;
  if (v7 >= v6)
    v7 = v6;
  if (v7 > 1.0)
    v7 = 1.0;
  v8 = v3 + (float)((float)-(float)(v2 * v4) * fmaxf(v7, -1.0));
  fmodf(v1 + 8.0, 12.0);
  fmodf(v1 + 4.0, 12.0);
  return v8;
}

float WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float v16;
  float result;

  v1 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  if (v2 >= v1)
    v4 = v1;
  else
    v4 = v2;
  if (v2 >= v1)
    v5 = v2;
  else
    v5 = v1;
  if (v3 >= v4)
  {
    if (v3 >= v5)
      v5 = v3;
  }
  else
  {
    v4 = v3;
  }
  v6 = v5 - v4;
  if ((float)(v5 - v4) == 0.0)
    return NAN;
  v7 = (float)(v4 + v5) * 0.5;
  v8 = 1.0 - v7;
  if ((float)(1.0 - v7) >= v7)
    v8 = (float)(v4 + v5) * 0.5;
  if (v7 == 0.0 || v7 == 1.0)
    v10 = 0.0;
  else
    v10 = (float)(v5 - v7) / v8;
  v11 = NAN;
  if (v5 == v3)
    v11 = (float)((float)(v1 - v2) / v6) + 4.0;
  if (v5 == v2)
    v11 = (float)((float)(v3 - v1) / v6) + 2.0;
  v12 = (float)(v2 - v3) / v6;
  v13 = v2 < v3;
  v14 = 6.0;
  if (!v13)
    v14 = 0.0;
  v15 = v14 + v12;
  if (v5 == v1)
    v16 = v15;
  else
    v16 = v11;
  result = v16 * 60.0;
  if (v10 < 0.0)
    result = result + 180.0;
  if (result >= 360.0)
    return result + -360.0;
  return result;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert(uint64_t a1)
{
  float32x2_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v11;

  v1 = (float32x2_t)vand_s8((int8x8_t)vdiv_f32(*(float32x2_t *)(a1 + 4), (float32x2_t)vdup_n_s32(0x42C80000u)), vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)(a1 + 4)), (int8x8_t)vcgez_f32(*(float32x2_t *)(a1 + 4))));
  v2 = vaddv_f32(v1);
  if (v2 >= 1.0)
    return v1.f32[0] / v2;
  v11 = v1.f32[0];
  v3 = *(float *)a1 / 30.0;
  v4 = (float)(1.0 - v1.f32[0]) - v1.f32[1];
  v5 = fmodf(v3 + 0.0, 12.0);
  v6 = v5 + -3.0;
  v7 = 9.0 - v5;
  if (v7 >= v6)
    v7 = v6;
  if (v7 > 1.0)
    v7 = 1.0;
  if (v7 <= -1.0)
    v8 = 1.0;
  else
    v8 = 0.5 - (float)(v7 * 0.5);
  v9 = v11 + (float)(v8 * v4);
  fmodf(v3 + 8.0, 12.0);
  fmodf(v3 + 4.0, 12.0);
  return v9;
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;

  v1 = (float)(*a1 + 16.0) / 116.0;
  v2 = (float)(a1[1] / 500.0) + v1;
  v3 = v2 * (float)(v2 * v2);
  if (v3 <= 0.0088565)
    v3 = (float)((float)(v2 * 116.0) + -16.0) / 903.3;
  return v3 * 0.9643;
}

void WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;

  v1 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v3 = v2;
  v5 = v4;
  v6 = v1 / 0.9643;
  if (v6 > 0.0088565)
    cbrtf(v6);
  v7 = v5 / 0.8251;
  if (v3 > 0.0088565)
    cbrtf(v3);
  if (v7 > 0.0088565)
    cbrtf(v7);
}

void WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;

  v1 = *(float *)(a1 + 4);
  v2 = *(float *)(a1 + 8);
  if (fabsf(v1) >= 0.02 || fabsf(v2) >= 0.02)
    atan2f(v2, v1);
  hypotf(v1, v2);
}

void WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert(uint64_t a1)
{
  __sincosf_stret(*(float *)(a1 + 8) * 0.017453);
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = a1[1];
  v2 = a1[2];
  v3 = *a1 + 0.0;
  v4 = v3 + (float)(v1 * -0.089484);
  return (float)((float)((float)((float)((float)((float)(v3 + (float)(v1 * 0.39634)) + (float)(v2 * 0.2158))
                                       * (float)((float)((float)(v3 + (float)(v1 * 0.39634)) + (float)(v2 * 0.2158))
                                               * (float)((float)(v3 + (float)(v1 * 0.39634)) + (float)(v2 * 0.2158))))
                               * 1.2269)
                       + 0.0)
               + (float)((float)((float)((float)(v3 + (float)(v1 * -0.10556)) + (float)(v2 * -0.063854))
                               * (float)((float)((float)(v3 + (float)(v1 * -0.10556)) + (float)(v2 * -0.063854))
                                       * (float)((float)(v3 + (float)(v1 * -0.10556)) + (float)(v2 * -0.063854))))
                       * -0.55782))
       + (float)((float)((float)(v4 + (float)(v2 * -1.2915))
                       * (float)((float)(v4 + (float)(v2 * -1.2915)) * (float)(v4 + (float)(v2 * -1.2915))))
               * 0.28139);
}

void WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = a1[1];
  v2 = a1[2];
  v3 = (float)((float)((float)(*a1 * 0.032984) + 0.0) + (float)(v1 * 0.92929)) + (float)(v2 * 0.036145);
  v4 = (float)((float)((float)(*a1 * 0.048177) + 0.0) + (float)(v1 * 0.26424)) + (float)(v2 * 0.63355);
  cbrtf((float)((float)((float)(*a1 * 0.81902) + 0.0) + (float)(v1 * 0.36191)) + (float)(v2 * -0.12887));
  cbrtf(v3);
  cbrtf(v4);
}

void WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;

  v1 = *(float *)(a1 + 4);
  v2 = *(float *)(a1 + 8);
  if (fabsf(v1) >= 0.02 || fabsf(v2) >= 0.02)
    atan2f(v2, v1);
  hypotf(v1, v2);
}

void WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert(uint64_t a1)
{
  __sincosf_stret(*(float *)(a1 + 8) * 0.017453);
}

float WebCore::fixupHueComponentsPriorToInterpolation(int a1, float a2, float a3)
{
  long double v4;
  float v5;
  long double v6;
  float v7;
  float v8;
  long double v9;
  long double v10;
  long double v11;
  long double v12;
  float v13;
  long double v15;
  float v16;
  long double v17;
  float v18;

  switch(a1)
  {
    case 0:
      v4 = fmod(a2, 360.0);
      v5 = fmod(v4 + 360.0, 360.0);
      v6 = fmod(a3, 360.0);
      v7 = fmod(v6 + 360.0, 360.0);
      if ((float)(v7 - v5) > 180.0)
        v8 = v5 + 360.0;
      else
        v8 = v5;
      break;
    case 1:
      v11 = fmod(a2, 360.0);
      v8 = fmod(v11 + 360.0, 360.0);
      v12 = fmod(a3, 360.0);
      v13 = fmod(v12 + 360.0, 360.0);
      if ((float)(v13 - v8) > 0.0 && (float)(v13 - v8) < 180.0)
        v8 = v8 + 360.0;
      break;
    case 2:
      v9 = fmod(a2, 360.0);
      v8 = fmod(v9 + 360.0, 360.0);
      v10 = fmod(a3, 360.0);
      fmod(v10 + 360.0, 360.0);
      break;
    case 3:
      v15 = fmod(a2, 360.0);
      v16 = fmod(v15 + 360.0, 360.0);
      v17 = fmod(a3, 360.0);
      v18 = fmod(v17 + 360.0, 360.0);
      if (v16 >= v18)
        v8 = v16;
      else
        v8 = v16 + 360.0;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x196146760);
  }
  return v8;
}

void WebCore::interpolateColors(unint64_t a1, int a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  WebCore::ByteArrayPixelBuffer *v6;
  double v7;
  double v8;
  unint64_t v9;
  int v10;
  _QWORD v11[5];
  _QWORD *v12;

  v9 = a1;
  v10 = a2;
  v7 = a6;
  v8 = a5;
  v11[0] = &v9;
  v11[1] = a3;
  v11[2] = &v8;
  v11[3] = a4;
  v11[4] = &v7;
  if (HIDWORD(a1) == 0xFFFFFFFF)
  {
    v6 = (WebCore::ByteArrayPixelBuffer *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ByteArrayPixelBuffer::~ByteArrayPixelBuffer(v6);
  }
  else
  {
    v12 = v11;
    ((void (*)(_QWORD **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore17interpolateColorsENS8_24ColorInterpolationMethodENS8_5ColorEdSA_dE3__0JEEEEEJRNS0_6__implIJNS9_3HSLENS9_3HWBENS9_3LCHENS9_3LabENS9_5OKLCHENS9_5OKLabENS9_4SRGBENS9_10SRGBLinearENS9_9DisplayP3ENS9_6A98RGBENS9_11ProPhotoRGBENS9_7Rec2020ENS9_6XYZD50ENS9_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[HIDWORD(a1)])(&v12, &v9);
  }
}

void WebCore::ByteArrayPixelBuffer::~ByteArrayPixelBuffer(WebCore::ByteArrayPixelBuffer *this)
{
  _DWORD *v2;
  const void *v3;

  *(_QWORD *)this = off_1E340AF58;
  v2 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
  {
    if (*v2 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v2;
  }
  *(_QWORD *)this = off_1E340EDA0;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
}

void WebCore::ByteArrayPixelBuffer::~ByteArrayPixelBuffer(WebCore::ByteArrayPixelBuffer *this, void *a2)
{
  _DWORD *v3;
  const void *v4;

  *(_QWORD *)this = off_1E340AF58;
  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*v3 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E340EDA0;
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ByteArrayPixelBuffer::isByteArrayPixelBuffer(WebCore::ByteArrayPixelBuffer *this)
{
  return 1;
}

float WebCore::convertColor<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>>(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v1 = *a1 / 30.0;
  v2 = a1[1] * 0.01;
  v3 = a1[2] * 0.01;
  if ((float)(1.0 - v3) >= v3)
    v4 = a1[2] * 0.01;
  else
    v4 = 1.0 - v3;
  v5 = fmodf(v1 + 0.0, 12.0);
  v6 = v5 + -3.0;
  v7 = 9.0 - v5;
  if (v7 >= v6)
    v7 = v6;
  if (v7 > 1.0)
    v7 = 1.0;
  v8 = v3 + (float)((float)-(float)(v2 * v4) * fmaxf(v7, -1.0));
  fmodf(v1 + 8.0, 12.0);
  fmodf(v1 + 4.0, 12.0);
  return v8;
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::LCHA<float>,void>::convert(float *a1)
{
  float v1;
  float v2;
  __float2 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v1 = *a1;
  v2 = a1[1];
  v3 = __sincosf_stret(a1[2] * 0.017453);
  v4 = (float)(v1 + 16.0) / 116.0;
  v5 = v4 + (float)((float)(v3.__cosval * v2) / 500.0);
  v6 = v5 * (float)(v5 * v5);
  if (v6 <= 0.0088565)
    v6 = (float)((float)(v5 * 116.0) + -16.0) / 903.3;
  v7 = v4 - (float)((float)(v3.__sinval * v2) / 200.0);
  if (v1 <= 8.0)
  {
    v9 = v1 / 903.3;
  }
  else
  {
    v8 = (v1 + 16.0) / 116.0;
    v9 = (float)(v8 * v8) * v8;
  }
  v10 = v7 * (float)(v7 * v7);
  if (v10 <= 0.0088565)
    v10 = (float)((float)(v7 * 116.0) + -16.0) / 903.3;
  return (float)((float)((float)((float)(v6 * 0.9643) * 0.95547) + 0.0) + (float)(v9 * -0.023098))
       + (float)((float)(v10 * 0.8251) * 0.063259);
}

void WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::LCHA<float>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  __float2 v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = a1[1];
  v4 = __sincosf_stret(a1[2] * 0.017453);
  v5 = (float)(v1 + 16.0) / 116.0;
  v6 = v5 + (float)((float)(v4.__cosval * v3) / 500.0);
  v7 = v6 * (float)(v6 * v6);
  if (v7 <= 0.0088565)
    v7 = (float)((float)(v6 * 116.0) + -16.0) / 903.3;
  v8 = v5 - (float)((float)(v4.__sinval * v3) / 200.0);
  if (v1 <= 8.0)
  {
    v10 = v1 / 903.3;
  }
  else
  {
    v9 = (v1 + 16.0) / 116.0;
    v10 = (float)(v9 * v9) * v9;
  }
  v11 = v8 * (float)(v8 * v8);
  if (v11 <= 0.0088565)
    v11 = (float)((float)(v8 * 116.0) + -16.0) / 903.3;
  v12[0] = v7 * 0.9643;
  v12[1] = v10;
  v12[2] = v11 * 0.8251;
  v12[3] = v2;
  WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v12);
}

void WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(__int128 *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  v1 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(a1);
  v3 = (float)((float)(v1 * 0.019331) + 0.0) + (float)(v2 * 0.11919);
  v5 = (float)((float)((float)(v1 * 0.21264) + 0.0) + (float)(v2 * 0.71517)) + (float)(v4 * 0.072192);
  v6 = (float)((float)((float)(v1 * 0.41239) + 0.0) + (float)(v2 * 0.35758)) + (float)(v4 * 0.18048);
  v7 = v3 + (float)(v4 * 0.95053);
  v8 = (float)((float)((float)(v6 * 0.032984) + 0.0) + (float)(v5 * 0.92929)) + (float)(v7 * 0.036145);
  v9 = (float)((float)((float)(v6 * 0.048177) + 0.0) + (float)(v5 * 0.26424)) + (float)(v7 * 0.63355);
  v10 = cbrtf((float)((float)((float)(v6 * 0.81902) + 0.0) + (float)(v5 * 0.36191)) + (float)(v7 * -0.12887));
  v11 = cbrtf(v8);
  v12 = cbrtf(v9);
  v13 = (float)((float)((float)(v10 * 1.978) + 0.0) + (float)(v11 * -2.4286)) + (float)(v12 * 0.45059);
  v14 = (float)((float)((float)(v10 * 0.025904) + 0.0) + (float)(v11 * 0.78277)) + (float)(v12 * -0.80868);
  if (fabsf(v13) >= 0.02 || fabsf(v14) >= 0.02)
    atan2f(v14, v13);
  hypotf(v13, v14);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Color::Color(std::optional<WebCore::ColorDataForIPC> &&)::$_0,WebCore::Color::(std::optional<WebCore::ColorDataForIPC> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> &>(uint64_t result, unsigned int *a2)
{
  ***(_QWORD ***)result = *a2 | ((unint64_t)**(unsigned __int8 **)(*(_QWORD *)result + 8) << 48) | 0x1104000000000000;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Color::Color(std::optional<WebCore::ColorDataForIPC> &&)::$_0,WebCore::Color::(std::optional<WebCore::ColorDataForIPC> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  v3 = *a1;
  v4 = *(unint64_t **)(*a1 + 16);
  v7 = *(__n128 *)(a2 + 4);
  v5 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)v5 = 1;
  result = v7;
  *(__n128 *)(v5 + 4) = v7;
  *v4 = v5 | ((unint64_t)*a2 << 56) | ((unint64_t)**(unsigned __int8 **)(v3 + 24) << 48) | 0xC000000000000;
  return result;
}

float _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float v18;
  float v19;
  int8x8_t *v20;
  __int32 v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v25;
  int8x8_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int8x8_t *v29;
  __int32 v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  __int32 v58;
  float v59;
  __float2 v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float v67;
  float v68;
  __int32 v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  uint64_t v78;
  float v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float *v92;
  float v93;
  unsigned int v94;
  unsigned int v95;
  __int32 v96;
  float v97;
  float v98;
  __int32 v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  int32x2_t v119;
  __int128 v120;
  int8x16_t v121;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v114 = v10.f32[0];
      v117 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v114, 2.1992);
      v11.f32[1] = v117;
      v12 = (float32x2_t)vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v121.i8 = vbsl_s8((int8x8_t)vcge_f32(v12, _D1), (int8x8_t)_D1, vbic_s8((int8x8_t)v12, (int8x8_t)vclez_f32(v12)));
      v121.i64[1] = __PAIR64__(v3, LODWORD(v7));
      v18 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v121);
      goto LABEL_121;
    case 1:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v121);
      goto LABEL_121;
    case 2:
      v20 = *(int8x8_t **)(a2 + 8);
      v21 = v20[1].i32[1];
      v22 = *(float *)v20[1].i32;
      v23 = powf(fabsf(v22), 2.1992);
      if (v22 >= 0.0)
        v24 = v23;
      else
        v24 = -v23;
      v25 = (float32x2_t)vand_s8(*v20, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v20), (int8x8_t)vcgez_f32((float32x2_t)*v20)));
      v26 = (int8x8_t)vcltz_s32((int32x2_t)v25);
      v27 = vabs_f32(v25);
      v115 = v27.f32[0];
      v118 = powf(v27.f32[1], 2.1992);
      v28.f32[0] = powf(v115, 2.1992);
      v28.f32[1] = v118;
      *(int8x8_t *)v121.i8 = vbsl_s8(v26, (int8x8_t)vneg_f32(v28), (int8x8_t)v28);
      v121.i64[1] = __PAIR64__(v21, LODWORD(v24));
      v18 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v121);
      goto LABEL_121;
    case 3:
      v29 = *(int8x8_t **)(a2 + 8);
      v30 = v29[1].i32[1];
      v31 = *(float *)v29[1].i32;
      v119 = (int32x2_t)vand_s8(*v29, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v29), (int8x8_t)vcgez_f32((float32x2_t)*v29)));
      v32 = fabsf(*(float *)v119.i32);
      if (v32 <= 0.04045)
        v116 = v32 / 12.92;
      else
        v116 = powf((float)(v32 + 0.055) / 1.055, 2.4);
      v97 = fabsf(*(float *)&v119.i32[1]);
      if (v97 <= 0.04045)
        v98 = v97 / 12.92;
      else
        v98 = powf((float)(v97 + 0.055) / 1.055, 2.4);
      v107 = fabsf(v31);
      if (v107 <= 0.04045)
      {
        v108 = v107 / 12.92;
      }
      else
      {
        v113 = v98;
        v108 = powf((float)(v107 + 0.055) / 1.055, 2.4);
        v98 = v113;
      }
      *(int8x8_t *)v121.i8 = vbsl_s8((int8x8_t)vcltz_s32(v119), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v98), LODWORD(v116))), (int8x8_t)__PAIR64__(LODWORD(v98), LODWORD(v116)));
      if (v31 < 0.0)
        v108 = -v108;
      v121.i64[1] = __PAIR64__(v30, LODWORD(v108));
      v18 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v121);
      goto LABEL_121;
    case 4:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion((int8x8_t *)&v121);
      goto LABEL_121;
    case 5:
      v86 = *(_QWORD *)(a2 + 8);
      v87 = *(float *)v86;
      v80 = *(_DWORD *)(v86 + 12);
      v88 = *(float *)(v86 + 4);
      v89 = *(float *)(v86 + 8);
      if (fabsf(*(float *)v86) <= 0.03125)
      {
        v85 = v87 * 0.0625;
      }
      else
      {
        v90 = *(float *)v86;
        v91 = powf(v87, 1.8);
        if (v90 >= 0.0)
          v85 = v91;
        else
          v85 = -v91;
      }
      if (fabsf(v88) <= 0.03125)
      {
        v105 = v88 * 0.0625;
      }
      else
      {
        v106 = powf(v88, 1.8);
        if (v88 >= 0.0)
          v105 = v106;
        else
          v105 = -v106;
      }
      if (fabsf(v89) <= 0.03125)
      {
        v111 = v89 * 0.0625;
      }
      else
      {
        v111 = powf(v89, 1.8);
        if (v89 < 0.0)
          v111 = -v111;
      }
      goto LABEL_120;
    case 6:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v121);
      goto LABEL_121;
    case 7:
      v92 = *(float **)(a2 + 8);
      if (*v92 <= 1.0)
        v93 = *v92;
      else
        v93 = 1.0;
      if (*v92 >= 0.0)
        return v93;
      else
        return 0.0;
    case 8:
      v33 = *(float **)(a2 + 8);
      v34 = *v33 / 30.0;
      v35 = v33[1] * 0.01;
      v36 = v33[2] * 0.01;
      if ((float)(1.0 - v36) >= v36)
        v37 = v33[2] * 0.01;
      else
        v37 = 1.0 - v36;
      v38 = fmodf(v34 + 0.0, 12.0);
      v39 = v38 + -3.0;
      v40 = 9.0 - v38;
      if (v40 >= v39)
        v40 = v39;
      if (v40 > 1.0)
        v40 = 1.0;
      v41 = v36 + (float)((float)-(float)(v35 * v37) * fmaxf(v40, -1.0));
      fmodf(v34 + 8.0, 12.0);
      fmodf(v34 + 4.0, 12.0);
      if (v41 <= 1.0)
        v42 = v41;
      else
        v42 = 1.0;
      if (v41 >= 0.0)
        return v42;
      else
        return 0.0;
    case 9:
      v120 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v121.i32[0] = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v120);
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v95, v94);
      v121.i32[3] = v96;
      v18 = WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>((int8x8_t *)&v121);
      goto LABEL_121;
    case 10:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::LCHA<float>,void>::convert((float *)v121.i32);
      goto LABEL_121;
    case 11:
      v43 = *(_QWORD *)(a2 + 8);
      v44 = *(float *)v43;
      v45 = (float)(*(float *)v43 + 16.0) / 116.0;
      v46 = (float)(*(float *)(v43 + 4) / 500.0) + v45;
      v47 = v46 * (float)(v46 * v46);
      if (v47 <= 0.0088565)
        v47 = (float)((float)(v46 * 116.0) + -16.0) / 903.3;
      v48 = v45 - (float)(*(float *)(v43 + 8) / 200.0);
      if (v44 <= 8.0)
      {
        v50 = v44 / 903.3;
      }
      else
      {
        v49 = (v44 + 16.0) / 116.0;
        v50 = (float)(v49 * v49) * v49;
      }
      v99 = *(_DWORD *)(v43 + 12);
      v100 = v48 * (float)(v48 * v48);
      if (v100 <= 0.0088565)
        v100 = (float)((float)(v48 * 116.0) + -16.0) / 903.3;
      *(float *)v121.i32 = v47 * 0.9643;
      *(float *)&v121.i32[1] = v50;
      *(float *)&v121.i32[2] = v100 * 0.8251;
      v121.i32[3] = v99;
      goto LABEL_74;
    case 12:
      v51 = *(float **)(a2 + 8);
      v52 = *v51;
      v19 = 0.0;
      v53 = v51[1];
      v54 = v51[2];
      if (*v51 >= 0.0031308)
      {
        v101 = (float)(powf(v52, 0.41667) * 1.055) + -0.055;
        if (v101 > 0.0)
          v102 = v101;
        else
          v102 = 0.0;
        if (v101 >= 1.0)
          v19 = 1.0;
        else
          v19 = v102;
      }
      else
      {
        v55 = v52 * 12.92;
        if (v55 >= 0.0)
          v19 = v55;
      }
      if (v53 >= 0.0031308)
        powf(v53, 0.41667);
      if (v54 >= 0.0031308)
        powf(v54, 0.41667);
      return v19;
    case 13:
      v56 = *(_QWORD *)(a2 + 8);
      v57 = *(float *)v56;
      v58 = *(_DWORD *)(v56 + 12);
      v59 = *(float *)(v56 + 4);
      v60 = __sincosf_stret(*(float *)(v56 + 8) * 0.017453);
      v61 = v60.__sinval * v59;
      v62 = (float)((float)(v57 + 0.0) + (float)((float)(v60.__cosval * v59) * -0.10556))
          + (float)((float)(v60.__sinval * v59) * -0.063854);
      v63 = (float)((float)((float)(v57 + 0.0) + (float)((float)(v60.__cosval * v59) * 0.39634)) + (float)(v61 * 0.2158))
          * (float)((float)((float)((float)(v57 + 0.0) + (float)((float)(v60.__cosval * v59) * 0.39634))
                          + (float)(v61 * 0.2158))
                  * (float)((float)((float)(v57 + 0.0) + (float)((float)(v60.__cosval * v59) * 0.39634))
                          + (float)(v61 * 0.2158)));
      v64 = v62 * (float)(v62 * v62);
      v65 = (float)((float)((float)(v57 + 0.0) + (float)((float)(v60.__cosval * v59) * -0.089484))
                  + (float)(v61 * -1.2915))
          * (float)((float)((float)((float)(v57 + 0.0) + (float)((float)(v60.__cosval * v59) * -0.089484))
                          + (float)(v61 * -1.2915))
                  * (float)((float)((float)(v57 + 0.0) + (float)((float)(v60.__cosval * v59) * -0.089484))
                          + (float)(v61 * -1.2915)));
      *(float32x2_t *)v121.i8 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBD2632C13F9D0A66, v63), (float32x2_t)0x3F8E5F6ABF0ECCF7, v64), (float32x2_t)0xBD92DD3F3E90127DLL, v65);
      *(float *)&v121.i32[2] = (float)((float)((float)(v63 * -0.076373) + 0.0) + (float)(v64 * -0.42149))
                             + (float)(v65 * 1.5869);
      v121.i32[3] = v58;
      goto LABEL_66;
    case 14:
      v66 = *(_QWORD *)(a2 + 8);
      v67 = *(float *)(v66 + 4);
      v68 = *(float *)(v66 + 8);
      v69 = *(_DWORD *)(v66 + 12);
      v70 = *(float *)v66 + 0.0;
      v71 = v70 + (float)(v67 * -0.089484);
      v72 = (float)(v70 + (float)(v67 * -0.10556)) + (float)(v68 * -0.063854);
      v73 = (float)(v70 + (float)(v67 * 0.39634)) + (float)(v68 * 0.2158);
      v74 = v71 + (float)(v68 * -1.2915);
      v75 = v73 * (float)(v73 * v73);
      v76 = v72 * (float)(v72 * v72);
      v77 = v74 * (float)(v74 * v74);
      *(float32x2_t *)v121.i8 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBD2632C13F9D0A66, v75), (float32x2_t)0x3F8E5F6ABF0ECCF7, v76), (float32x2_t)0xBD92DD3F3E90127DLL, v77);
      *(float *)&v121.i32[2] = (float)((float)((float)(v75 * -0.076373) + 0.0) + (float)(v76 * -0.42149))
                             + (float)(v77 * 1.5869);
      v121.i32[3] = v69;
      goto LABEL_66;
    case 15:
      v78 = *(_QWORD *)(a2 + 8);
      v79 = *(float *)v78;
      v80 = *(_DWORD *)(v78 + 12);
      v81 = *(float *)(v78 + 4);
      v82 = *(float *)(v78 + 8);
      if (*(float *)v78 <= 0.03125)
      {
        v85 = v79 * 0.0625;
      }
      else
      {
        v83 = powf(v79, 1.8);
        if (v83 > 0.0)
          v84 = v83;
        else
          v84 = 0.0;
        if (v83 >= 1.0)
          v85 = 1.0;
        else
          v85 = v84;
      }
      if (v81 <= 0.03125)
      {
        v105 = v81 * 0.0625;
      }
      else
      {
        v103 = powf(v81, 1.8);
        v104 = 0.0;
        if (v103 > 0.0)
          v104 = v103;
        if (v103 >= 1.0)
          v105 = 1.0;
        else
          v105 = v104;
      }
      if (v82 <= 0.03125)
      {
        v111 = v82 * 0.0625;
      }
      else
      {
        v109 = powf(v82, 1.8);
        v110 = 0.0;
        if (v109 > 0.0)
          v110 = v109;
        if (v109 >= 1.0)
          v111 = 1.0;
        else
          v111 = v110;
      }
LABEL_120:
      v121.i64[0] = __PAIR64__(LODWORD(v105), LODWORD(v85));
      v121.i64[1] = __PAIR64__(v80, LODWORD(v111));
      v18 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v121);
      goto LABEL_121;
    case 16:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v121);
      goto LABEL_121;
    case 18:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_74:
      v18 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v121);
      goto LABEL_121;
    case 19:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_66:
      v18 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)v121.i32);
LABEL_121:
      v19 = v18;
      break;
    default:
      v19 = **(float **)(a2 + 8);
      break;
  }
  return v19;
}

void WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  __int128 v13;

  LODWORD(v13) = WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(a1);
  *(_QWORD *)((char *)&v13 + 4) = __PAIR64__(v2, v1);
  HIDWORD(v13) = v3;
  v4 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v13);
  v6 = (float)((float)(v4 * 0.019331) + 0.0) + (float)(v5 * 0.11919);
  v8 = (float)((float)((float)(v4 * 0.21264) + 0.0) + (float)(v5 * 0.71517)) + (float)(v7 * 0.072192);
  v9 = (float)((float)((float)(v4 * 0.41239) + 0.0) + (float)(v5 * 0.35758)) + (float)(v7 * 0.18048);
  v10 = v6 + (float)(v7 * 0.95053);
  v11 = (float)((float)((float)(v9 * 0.032984) + 0.0) + (float)(v8 * 0.92929)) + (float)(v10 * 0.036145);
  v12 = (float)((float)((float)(v9 * 0.048177) + 0.0) + (float)(v8 * 0.26424)) + (float)(v10 * 0.63355);
  cbrtf((float)((float)((float)(v9 * 0.81902) + 0.0) + (float)(v8 * 0.36191)) + (float)(v10 * -0.12887));
  cbrtf(v11);
  cbrtf(v12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  float v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;
  double v22;
  unint64_t v23;
  unsigned int v24;
  float v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float v32;
  float v33;
  float v34;
  double v35;
  unint64_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  double v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  long double v58;
  float v59;
  uint64_t result;
  double v61;
  float v62;
  char v63;
  __int128 v64;
  __int128 v65;

  v4 = *a1;
  v5 = *a2;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    v12 = **(_QWORD **)(v4 + 8);
    if ((v12 & 0x8000000000000) != 0)
    {
      v64 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v65 = &v63;
      *((_QWORD *)&v65 + 1) = &v64;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v12), (uint64_t)&v65);
    }
    else
    {
      v13 = bswap32(v12);
      *(float *)&v65 = (float)v13 / 255.0;
      *(float32x2_t *)((char *)&v65 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v13), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v65 + 3) = (float)HIBYTE(v13) / 255.0;
      v14 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v65);
    }
    v32 = v14;
    v33 = v15;
    v34 = v17;
    v62 = v16;
    v35 = **(double **)(v4 + 16);
    v36 = **(_QWORD **)(v4 + 24);
    if ((v36 & 0x8000000000000) != 0)
    {
      v64 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v65 = &v63;
      *((_QWORD *)&v65 + 1) = &v64;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v36), (uint64_t)&v65);
    }
    else
    {
      v37 = bswap32(v36);
      *(float *)&v65 = (float)v37 / 255.0;
      *(float32x2_t *)((char *)&v65 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v37), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v65 + 3) = (float)HIBYTE(v37) / 255.0;
      v38 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v65);
    }
    v50 = v39;
    v51 = v40;
    v52 = **(double **)(v4 + 32);
    v53 = v52 * v41 + v34 * v35;
    v54 = WebCore::fixupHueComponentsPriorToInterpolation(v5, v32, v38);
    v56 = v52 * v55 + v54 * v35;
    v57 = v52 * v50 + v33 * v35;
    v47 = v52 * v51 + v62 * v35;
    v58 = fmod(v56, 360.0);
    v43 = fmod(v58 + 360.0, 360.0);
    if (v57 >= 0.0)
      v45 = v57;
    else
      v45 = 0.0;
    v59 = 1.0;
    if (v53 <= 1.0)
      v59 = v53;
    if (v53 >= 0.0)
      v49 = v59;
    else
      v49 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x196148314);
    }
    v6 = **(_QWORD **)(v4 + 8);
    if ((v6 & 0x8000000000000) != 0)
    {
      v64 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v65 = &v63;
      *((_QWORD *)&v65 + 1) = &v64;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v6), (uint64_t)&v65);
    }
    else
    {
      v7 = bswap32(v6);
      *(float *)&v65 = (float)v7 / 255.0;
      *(float32x2_t *)((char *)&v65 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v7), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v65 + 3) = (float)HIBYTE(v7) / 255.0;
      v8 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v65);
    }
    v18 = v8;
    v19 = v9;
    v20 = v10;
    v21 = v11;
    v22 = **(double **)(v4 + 16);
    v23 = **(_QWORD **)(v4 + 24);
    if ((v23 & 0x8000000000000) != 0)
    {
      v64 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v65 = &v63;
      *((_QWORD *)&v65 + 1) = &v64;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v23), (uint64_t)&v65);
    }
    else
    {
      v24 = bswap32(v23);
      *(float *)&v65 = (float)v24 / 255.0;
      *(float32x2_t *)((char *)&v65 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v65 + 3) = (float)HIBYTE(v24) / 255.0;
      v25 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v65);
    }
    v61 = COERCE_DOUBLE(__PAIR64__(LODWORD(v28), LODWORD(v27)));
    LODWORD(v26) = v19;
    LODWORD(v27) = v20;
    LODWORD(v28) = v21;
    WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::HSL>(v5, v18, v26, v27, v28, v22, v29, v30, v31, v25, v61, **(double **)(v4 + 32));
    v43 = v42;
    v45 = v44;
    v47 = v46;
    v49 = v48;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v43;
  *(float *)(result + 8) = v45;
  *(float *)(result + 12) = v47;
  *(float *)(result + 16) = v49;
  *a3 = result | 0x80C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  float v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;
  double v22;
  unint64_t v23;
  unsigned int v24;
  float v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float v32;
  float v33;
  float v34;
  double v35;
  unint64_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  double v52;
  float v53;
  float v54;
  float v55;
  float v56;
  long double v57;
  float v58;
  uint64_t result;
  double v60;
  float v61;
  char v62;
  __int128 v63;
  __int128 v64;

  v4 = *a1;
  v5 = *a2;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    v12 = **(_QWORD **)(v4 + 8);
    if ((v12 & 0x8000000000000) != 0)
    {
      v63 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v64 = &v62;
      *((_QWORD *)&v64 + 1) = &v63;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v12), (uint64_t)&v64);
    }
    else
    {
      v13 = bswap32(v12);
      *(float *)&v64 = (float)v13 / 255.0;
      *(float32x2_t *)((char *)&v64 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v13), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v64 + 3) = (float)HIBYTE(v13) / 255.0;
      v14 = WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v64);
    }
    v32 = v14;
    v33 = v15;
    v34 = v17;
    v61 = v16;
    v35 = **(double **)(v4 + 16);
    v36 = **(_QWORD **)(v4 + 24);
    if ((v36 & 0x8000000000000) != 0)
    {
      v63 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v64 = &v62;
      *((_QWORD *)&v64 + 1) = &v63;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v36), (uint64_t)&v64);
    }
    else
    {
      v37 = bswap32(v36);
      *(float *)&v64 = (float)v37 / 255.0;
      *(float32x2_t *)((char *)&v64 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v37), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v64 + 3) = (float)HIBYTE(v37) / 255.0;
      v38 = WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v64);
    }
    v50 = v39;
    v51 = v40;
    v52 = **(double **)(v4 + 32);
    v53 = v52 * v41 + v34 * v35;
    v54 = WebCore::fixupHueComponentsPriorToInterpolation(v5, v32, v38);
    v56 = v52 * v55 + v54 * v35;
    v45 = v52 * v50 + v33 * v35;
    v47 = v52 * v51 + v61 * v35;
    v57 = fmod(v56, 360.0);
    v43 = fmod(v57 + 360.0, 360.0);
    v58 = 1.0;
    if (v53 <= 1.0)
      v58 = v53;
    if (v53 >= 0.0)
      v49 = v58;
    else
      v49 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x196148780);
    }
    v6 = **(_QWORD **)(v4 + 8);
    if ((v6 & 0x8000000000000) != 0)
    {
      v63 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v64 = &v62;
      *((_QWORD *)&v64 + 1) = &v63;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v6), (uint64_t)&v64);
    }
    else
    {
      v7 = bswap32(v6);
      *(float *)&v64 = (float)v7 / 255.0;
      *(float32x2_t *)((char *)&v64 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v7), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v64 + 3) = (float)HIBYTE(v7) / 255.0;
      v8 = WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v64);
    }
    v18 = v8;
    v19 = v9;
    v20 = v10;
    v21 = v11;
    v22 = **(double **)(v4 + 16);
    v23 = **(_QWORD **)(v4 + 24);
    if ((v23 & 0x8000000000000) != 0)
    {
      v63 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v64 = &v62;
      *((_QWORD *)&v64 + 1) = &v63;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v23), (uint64_t)&v64);
    }
    else
    {
      v24 = bswap32(v23);
      *(float *)&v64 = (float)v24 / 255.0;
      *(float32x2_t *)((char *)&v64 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v64 + 3) = (float)HIBYTE(v24) / 255.0;
      v25 = WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v64);
    }
    v60 = COERCE_DOUBLE(__PAIR64__(LODWORD(v28), LODWORD(v27)));
    LODWORD(v26) = v19;
    LODWORD(v27) = v20;
    LODWORD(v28) = v21;
    WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::HWB>(v5, v18, v26, v27, v28, v22, v29, v30, v31, v25, v60, **(double **)(v4 + 32));
    v43 = v42;
    v45 = v44;
    v47 = v46;
    v49 = v48;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v43;
  *(float *)(result + 8) = v45;
  *(float *)(result + 12) = v47;
  *(float *)(result + 16) = v49;
  *a3 = result | 0x90C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  float v7;
  int v8;
  float v9;
  float v10;
  unint64_t v11;
  float v12;
  int v13;
  float v14;
  int v15;
  float v16;
  int v17;
  float v18;
  float v19;
  double v20;
  unint64_t v21;
  float v22;
  double v23;
  float v24;
  float v25;
  double v26;
  double v27;
  double v28;
  float v29;
  int v30;
  float v31;
  int v32;
  double v33;
  unint64_t v34;
  float v35;
  double v36;
  float v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float v42;
  int v43;
  int v44;
  int v45;
  float v46;
  int v47;
  int v48;
  int v49;
  uint64_t result;
  float v51;
  float v52;
  char v53;
  __int128 v54;
  char *v55;
  __int128 *v56;

  v4 = *a1;
  v5 = *a2;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    v11 = **(_QWORD **)(v4 + 8);
    if ((v11 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4LCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v11), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v11);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v29 = v12;
    v30 = v13;
    v31 = v14;
    v32 = v15;
    v33 = **(double **)(v4 + 16);
    v34 = **(_QWORD **)(v4 + 24);
    if ((v34 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v34 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4LCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v34), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v34);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v52 = *(float *)&v36;
    LODWORD(v36) = v30;
    LODWORD(v38) = v32;
    v42 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)1,WebCore::ColorInterpolationMethod::LCH>(v5, v29, v36, v31, v38, v33, v39, v40, v41, v35, v52, v37, **(double **)(v4 + 32));
    goto LABEL_17;
  }
  if (!*(_BYTE *)(*(_QWORD *)*a1 + 8))
  {
    v6 = **(_QWORD **)(v4 + 8);
    if ((v6 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4LCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v6), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v6);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v16 = v7;
    v17 = v8;
    v18 = v9;
    v19 = v10;
    v20 = **(double **)(v4 + 16);
    v21 = **(_QWORD **)(v4 + 24);
    if ((v21 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4LCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v21), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v21);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v51 = *(float *)&v23;
    LODWORD(v23) = v17;
    v42 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::LCH>(v5, v16, v23, v18, v19, v20, v26, v27, v28, v22, v51, v24, v25, **(double **)(v4 + 32));
LABEL_17:
    v46 = v42;
    v47 = v43;
    v48 = v44;
    v49 = v45;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v46;
    *(_DWORD *)(result + 8) = v47;
    *(_DWORD *)(result + 12) = v48;
    *(_DWORD *)(result + 16) = v49;
    *a3 = result | 0xA0C000000000000;
    return result;
  }
  result = 106;
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  float v5;
  int v6;
  int v7;
  float v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  double v18;
  unint64_t v19;
  float v20;
  double v21;
  double v22;
  float v23;
  double v24;
  double v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float v30;
  double v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t result;
  float v51;
  float v52;
  char v53;
  __int128 v54;
  char *v55;
  __int128 *v56;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    v9 = **(_QWORD **)(v3 + 8);
    if ((v9 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v9), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v9);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v27 = v10;
    v28 = v11;
    v29 = v12;
    v30 = v13;
    v31 = **(double **)(v3 + 16);
    v32 = **(_QWORD **)(v3 + 24);
    if ((v32 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v32), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v32);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v44 = v34;
    v45 = **(double **)(v3 + 32);
    v46 = v45 * v36 + v30 * v31;
    v47 = v45 * v33 + v27 * v31;
    v39 = v45 * v44 + v28 * v31;
    v41 = v45 * v35 + v29 * v31;
    v48 = 100.0;
    if (v47 <= 100.0)
      v48 = v47;
    if (v47 >= 0.0)
      v37 = v48;
    else
      v37 = 0.0;
    v49 = 1.0;
    if (v46 <= 1.0)
      v49 = v46;
    if (v46 >= 0.0)
      v43 = v49;
    else
      v43 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x196148CD8);
    }
    v4 = **(_QWORD **)(v3 + 8);
    if ((v4 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v4), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v4);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v14 = v5;
    v15 = v6;
    v16 = v7;
    v17 = v8;
    v18 = **(double **)(v3 + 16);
    v19 = **(_QWORD **)(v3 + 24);
    if ((v19 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v19), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v19);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v52 = *(float *)&v22;
    v51 = *(float *)&v21;
    LODWORD(v21) = v15;
    LODWORD(v22) = v16;
    v37 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::Lab>(v14, v21, v22, v17, v18, v24, v25, v26, v20, v51, v52, v23, **(double **)(v3 + 32));
    v39 = v38;
    v41 = v40;
    v43 = v42;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v37;
  *(float *)(result + 8) = v39;
  *(float *)(result + 12) = v41;
  *(float *)(result + 16) = v43;
  *a2 = result | 0xB0C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  unsigned int v7;
  float v8;
  int v9;
  float v10;
  float v11;
  unint64_t v12;
  unsigned int v13;
  float v14;
  int v15;
  float v16;
  int v17;
  float v18;
  int v19;
  float v20;
  float v21;
  double v22;
  unint64_t v23;
  unsigned int v24;
  float v25;
  double v26;
  float v27;
  float v28;
  double v29;
  double v30;
  double v31;
  float v32;
  int v33;
  float v34;
  int v35;
  double v36;
  unint64_t v37;
  unsigned int v38;
  float v39;
  double v40;
  float v41;
  double v42;
  double v43;
  double v44;
  double v45;
  float v46;
  int v47;
  int v48;
  int v49;
  float v50;
  int v51;
  int v52;
  int v53;
  uint64_t result;
  float v55;
  float v56;
  char v57;
  __int128 v58;
  __int128 v59;

  v4 = *a1;
  v5 = *a2;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    v12 = **(_QWORD **)(v4 + 8);
    if ((v12 & 0x8000000000000) != 0)
    {
      v58 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v59 = &v57;
      *((_QWORD *)&v59 + 1) = &v58;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_6OKLCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v12), (uint64_t)&v59);
    }
    else
    {
      v13 = bswap32(v12);
      *(float *)&v59 = (float)v13 / 255.0;
      *(float32x2_t *)((char *)&v59 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v13), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v59 + 3) = (float)HIBYTE(v13) / 255.0;
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v59);
    }
    v32 = v14;
    v33 = v15;
    v34 = v16;
    v35 = v17;
    v36 = **(double **)(v4 + 16);
    v37 = **(_QWORD **)(v4 + 24);
    if ((v37 & 0x8000000000000) != 0)
    {
      v58 = *(_OWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v59 = &v57;
      *((_QWORD *)&v59 + 1) = &v58;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_6OKLCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v37), (uint64_t)&v59);
    }
    else
    {
      v38 = bswap32(v37);
      *(float *)&v59 = (float)v38 / 255.0;
      *(float32x2_t *)((char *)&v59 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v38), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v59 + 3) = (float)HIBYTE(v38) / 255.0;
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v59);
    }
    v56 = *(float *)&v40;
    LODWORD(v40) = v33;
    LODWORD(v42) = v35;
    v46 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)1,WebCore::ColorInterpolationMethod::OKLCH>(v5, v32, v40, v34, v42, v36, v43, v44, v45, v39, v56, v41, **(double **)(v4 + 32));
    goto LABEL_17;
  }
  if (!*(_BYTE *)(*(_QWORD *)*a1 + 8))
  {
    v6 = **(_QWORD **)(v4 + 8);
    if ((v6 & 0x8000000000000) != 0)
    {
      v58 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v59 = &v57;
      *((_QWORD *)&v59 + 1) = &v58;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_6OKLCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v6), (uint64_t)&v59);
    }
    else
    {
      v7 = bswap32(v6);
      *(float *)&v59 = (float)v7 / 255.0;
      *(float32x2_t *)((char *)&v59 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v7), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v59 + 3) = (float)HIBYTE(v7) / 255.0;
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v59);
    }
    v18 = v8;
    v19 = v9;
    v20 = v10;
    v21 = v11;
    v22 = **(double **)(v4 + 16);
    v23 = **(_QWORD **)(v4 + 24);
    if ((v23 & 0x8000000000000) != 0)
    {
      v58 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v59 = &v57;
      *((_QWORD *)&v59 + 1) = &v58;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_6OKLCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v23), (uint64_t)&v59);
    }
    else
    {
      v24 = bswap32(v23);
      *(float *)&v59 = (float)v24 / 255.0;
      *(float32x2_t *)((char *)&v59 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v59 + 3) = (float)HIBYTE(v24) / 255.0;
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v59);
    }
    v55 = *(float *)&v26;
    LODWORD(v26) = v19;
    v46 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::OKLCH>(v5, v18, v26, v20, v21, v22, v29, v30, v31, v25, v55, v27, v28, **(double **)(v4 + 32));
LABEL_17:
    v50 = v46;
    v51 = v47;
    v52 = v48;
    v53 = v49;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v50;
    *(_DWORD *)(result + 8) = v51;
    *(_DWORD *)(result + 12) = v52;
    *(_DWORD *)(result + 16) = v53;
    *a3 = result | 0xD0C000000000000;
    return result;
  }
  result = 106;
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  float v5;
  int v6;
  int v7;
  float v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  double v18;
  unint64_t v19;
  float v20;
  double v21;
  double v22;
  float v23;
  double v24;
  double v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float v30;
  double v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t result;
  float v51;
  float v52;
  char v53;
  __int128 v54;
  char *v55;
  __int128 *v56;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    v9 = **(_QWORD **)(v3 + 8);
    if ((v9 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_5OKLabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v9), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v9);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v27 = v10;
    v28 = v11;
    v29 = v12;
    v30 = v13;
    v31 = **(double **)(v3 + 16);
    v32 = **(_QWORD **)(v3 + 24);
    if ((v32 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_5OKLabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v32), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v32);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v44 = v34;
    v45 = **(double **)(v3 + 32);
    v46 = v45 * v36 + v30 * v31;
    v47 = v45 * v33 + v27 * v31;
    v39 = v45 * v44 + v28 * v31;
    v41 = v45 * v35 + v29 * v31;
    v48 = 1.0;
    if (v47 <= 1.0)
      v49 = v47;
    else
      v49 = 1.0;
    if (v47 >= 0.0)
      v37 = v49;
    else
      v37 = 0.0;
    if (v46 <= 1.0)
      v48 = v46;
    if (v46 >= 0.0)
      v43 = v48;
    else
      v43 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x196149354);
    }
    v4 = **(_QWORD **)(v3 + 8);
    if ((v4 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_5OKLabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v4), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v4);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v14 = v5;
    v15 = v6;
    v16 = v7;
    v17 = v8;
    v18 = **(double **)(v3 + 16);
    v19 = **(_QWORD **)(v3 + 24);
    if ((v19 & 0x8000000000000) != 0)
    {
      v54 = *(_OWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 4);
      v55 = &v53;
      v56 = &v54;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_5OKLabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v19), (uint64_t)&v55);
    }
    else
    {
      LODWORD(v55) = bswap32(v19);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v55);
    }
    v52 = *(float *)&v22;
    v51 = *(float *)&v21;
    LODWORD(v21) = v15;
    LODWORD(v22) = v16;
    v37 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::OKLab>(v14, v21, v22, v17, v18, v24, v25, v26, v20, v51, v52, v23, **(double **)(v3 + 32));
    v39 = v38;
    v41 = v40;
    v43 = v42;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v37;
  *(float *)(result + 8) = v39;
  *(float *)(result + 12) = v41;
  *(float *)(result + 16) = v43;
  *a2 = result | 0xE0C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  float v4;
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float v10;
  float v11;
  double v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  float v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  float v38;
  float v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t result;
  float v47;
  float v48;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(**(_QWORD **)(v3 + 8));
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v37 = **(double **)(v3 + 16);
    WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(**(_QWORD **)(v3 + 24));
    v39 = v38;
    v40 = **(double **)(v3 + 32);
    v42 = v40 * v41 + v36 * v37;
    v22 = v40 * v39 + v30 * v37;
    v24 = v40 * v43 + v32 * v37;
    v26 = v40 * v44 + v34 * v37;
    v45 = 1.0;
    if (v42 <= 1.0)
      v45 = v42;
    if (v42 >= 0.0)
      v28 = v45;
    else
      v28 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x196149568);
    }
    WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(**(_QWORD **)(v3 + 8));
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = **(double **)(v3 + 16);
    WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(**(_QWORD **)(v3 + 24));
    v48 = v13;
    v47 = v14;
    LODWORD(v15) = v7;
    LODWORD(v16) = v9;
    v22 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v5, v15, v16, v11, v12, v19, v20, v21, v17, v47, v48, v18, **(double **)(v3 + 32));
    v24 = v23;
    v26 = v25;
    v28 = v27;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v22;
  *(float *)(result + 8) = v24;
  *(float *)(result + 12) = v26;
  *(float *)(result + 16) = v28;
  *a2 = result | 0x70C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  float v5;
  int v6;
  int v7;
  float v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  double v18;
  unint64_t v19;
  float v20;
  double v21;
  double v22;
  float v23;
  double v24;
  double v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float v30;
  double v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double v45;
  float v46;
  float v47;
  uint64_t result;
  float v49;
  float v50;
  char v51;
  __int128 v52;
  char *v53;
  __int128 *v54;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    v9 = **(_QWORD **)(v3 + 8);
    if ((v9 & 0x8000000000000) != 0)
    {
      v52 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      v53 = &v51;
      v54 = &v52;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_21ExtendedLinearEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v9), (uint64_t)&v53);
    }
    else
    {
      LODWORD(v53) = bswap32(v9);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v53);
    }
    v27 = v10;
    v28 = v11;
    v29 = v12;
    v30 = v13;
    v31 = **(double **)(v3 + 16);
    v32 = **(_QWORD **)(v3 + 24);
    if ((v32 & 0x8000000000000) != 0)
    {
      v52 = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 4);
      v53 = &v51;
      v54 = &v52;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_21ExtendedLinearEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v32), (uint64_t)&v53);
    }
    else
    {
      LODWORD(v53) = bswap32(v32);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v53);
    }
    v44 = v33;
    v45 = **(double **)(v3 + 32);
    v46 = v45 * v36 + v30 * v31;
    v37 = v45 * v44 + v27 * v31;
    v39 = v45 * v34 + v28 * v31;
    v41 = v45 * v35 + v29 * v31;
    v47 = 1.0;
    if (v46 <= 1.0)
      v47 = v46;
    if (v46 >= 0.0)
      v43 = v47;
    else
      v43 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19614985CLL);
    }
    v4 = **(_QWORD **)(v3 + 8);
    if ((v4 & 0x8000000000000) != 0)
    {
      v52 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      v53 = &v51;
      v54 = &v52;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_21ExtendedLinearEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v4), (uint64_t)&v53);
    }
    else
    {
      LODWORD(v53) = bswap32(v4);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v53);
    }
    v14 = v5;
    v15 = v6;
    v16 = v7;
    v17 = v8;
    v18 = **(double **)(v3 + 16);
    v19 = **(_QWORD **)(v3 + 24);
    if ((v19 & 0x8000000000000) != 0)
    {
      v52 = *(_OWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 4);
      v53 = &v51;
      v54 = &v52;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_21ExtendedLinearEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v19), (uint64_t)&v53);
    }
    else
    {
      LODWORD(v53) = bswap32(v19);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v53);
    }
    v50 = *(float *)&v22;
    v49 = *(float *)&v21;
    LODWORD(v21) = v15;
    LODWORD(v22) = v16;
    v37 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v14, v21, v22, v17, v18, v24, v25, v26, v20, v49, v50, v23, **(double **)(v3 + 32));
    v39 = v38;
    v41 = v40;
    v43 = v42;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v37;
  *(float *)(result + 8) = v39;
  *(float *)(result + 12) = v41;
  *(float *)(result + 16) = v43;
  *a2 = result | 0x40C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  float v4;
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float v10;
  float v11;
  double v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  float v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  float v38;
  float v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t result;
  float v47;
  float v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v51);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v37 = **(double **)(v3 + 16);
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v52);
    v39 = v38;
    v40 = **(double **)(v3 + 32);
    v42 = v40 * v41 + v36 * v37;
    v22 = v40 * v39 + v30 * v37;
    v24 = v40 * v43 + v32 * v37;
    v26 = v40 * v44 + v34 * v37;
    v45 = 1.0;
    if (v42 <= 1.0)
      v45 = v42;
    if (v42 >= 0.0)
      v28 = v45;
    else
      v28 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x196149A70);
    }
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v49);
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = **(double **)(v3 + 16);
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v50);
    v48 = v13;
    v47 = v14;
    LODWORD(v15) = v7;
    LODWORD(v16) = v9;
    v22 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v5, v15, v16, v11, v12, v19, v20, v21, v17, v47, v48, v18, **(double **)(v3 + 32));
    v24 = v23;
    v26 = v25;
    v28 = v27;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v22;
  *(float *)(result + 8) = v24;
  *(float *)(result + 12) = v26;
  *(float *)(result + 16) = v28;
  *a2 = result | 0x30C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  float v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  double v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  double v18;
  double v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  double v35;
  float v36;
  double v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t result;
  float v44;
  float v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    v28 = WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v48);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v35 = **(double **)(v3 + 16);
    v36 = WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v49);
    v37 = **(double **)(v3 + 32);
    v39 = v37 * v38 + v34 * v35;
    v21 = v37 * v36 + v28 * v35;
    v23 = v37 * v40 + v30 * v35;
    v25 = v37 * v41 + v32 * v35;
    v42 = 1.0;
    if (v39 <= 1.0)
      v42 = v39;
    if (v39 >= 0.0)
      v27 = v42;
    else
      v27 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x196149C84);
    }
    v4 = WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v46);
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v11 = **(double **)(v3 + 16);
    v12 = WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v47);
    v45 = v13;
    v44 = v14;
    LODWORD(v15) = v6;
    LODWORD(v16) = v8;
    v21 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v4, v15, v16, v10, v11, v18, v19, v20, v12, v44, v45, v17, **(double **)(v3 + 32));
    v23 = v22;
    v25 = v24;
    v27 = v26;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v21;
  *(float *)(result + 8) = v23;
  *(float *)(result + 12) = v25;
  *(float *)(result + 16) = v27;
  *a2 = result | 0x20C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  float v4;
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float v10;
  float v11;
  double v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  float v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  float v38;
  float v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t result;
  float v47;
  float v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v51);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v37 = **(double **)(v3 + 16);
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v52);
    v39 = v38;
    v40 = **(double **)(v3 + 32);
    v42 = v40 * v41 + v36 * v37;
    v22 = v40 * v39 + v30 * v37;
    v24 = v40 * v43 + v32 * v37;
    v26 = v40 * v44 + v34 * v37;
    v45 = 1.0;
    if (v42 <= 1.0)
      v45 = v42;
    if (v42 >= 0.0)
      v28 = v45;
    else
      v28 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x196149E98);
    }
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v49);
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = **(double **)(v3 + 16);
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v50);
    v48 = v13;
    v47 = v14;
    LODWORD(v15) = v7;
    LODWORD(v16) = v9;
    v22 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v5, v15, v16, v11, v12, v19, v20, v21, v17, v47, v48, v18, **(double **)(v3 + 32));
    v24 = v23;
    v26 = v25;
    v28 = v27;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v22;
  *(float *)(result + 8) = v24;
  *(float *)(result + 12) = v26;
  *(float *)(result + 16) = v28;
  *a2 = result | 0x50C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  float v4;
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float v10;
  float v11;
  double v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  float v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  float v38;
  float v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t result;
  float v47;
  float v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v51);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v37 = **(double **)(v3 + 16);
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v52);
    v39 = v38;
    v40 = **(double **)(v3 + 32);
    v42 = v40 * v41 + v36 * v37;
    v22 = v40 * v39 + v30 * v37;
    v24 = v40 * v43 + v32 * v37;
    v26 = v40 * v44 + v34 * v37;
    v45 = 1.0;
    if (v42 <= 1.0)
      v45 = v42;
    if (v42 >= 0.0)
      v28 = v45;
    else
      v28 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19614A0ACLL);
    }
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v49);
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = **(double **)(v3 + 16);
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v50);
    v48 = v13;
    v47 = v14;
    LODWORD(v15) = v7;
    LODWORD(v16) = v9;
    v22 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v5, v15, v16, v11, v12, v19, v20, v21, v17, v47, v48, v18, **(double **)(v3 + 32));
    v24 = v23;
    v26 = v25;
    v28 = v27;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v22;
  *(float *)(result + 8) = v24;
  *(float *)(result + 12) = v26;
  *(float *)(result + 16) = v28;
  *a2 = result | 0x60C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  float v6;
  int v7;
  int v8;
  float v9;
  unint64_t v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  int v18;
  float v19;
  double v20;
  unint64_t v21;
  unsigned int v22;
  float v23;
  double v24;
  double v25;
  float v26;
  double v27;
  double v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  unint64_t v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  double v49;
  float v50;
  float v51;
  uint64_t result;
  float v53;
  float v54;
  char v55;
  __int128 v56;
  __int128 v57;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    v10 = **(_QWORD **)(v3 + 8);
    if ((v10 & 0x8000000000000) != 0)
    {
      v56 = *(_OWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v57 = &v55;
      *((_QWORD *)&v57 + 1) = &v56;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v10), (uint64_t)&v57);
    }
    else
    {
      v11 = bswap32(v10);
      *(float *)&v57 = (float)v11 / 255.0;
      *(float32x2_t *)((char *)&v57 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v11), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v57 + 3) = (float)HIBYTE(v11) / 255.0;
      v12 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v57);
    }
    v30 = v12;
    v31 = v13;
    v32 = v14;
    v33 = v15;
    v34 = **(double **)(v3 + 16);
    v35 = **(_QWORD **)(v3 + 24);
    if ((v35 & 0x8000000000000) != 0)
    {
      v56 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v57 = &v55;
      *((_QWORD *)&v57 + 1) = &v56;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v35), (uint64_t)&v57);
    }
    else
    {
      v36 = bswap32(v35);
      *(float *)&v57 = (float)v36 / 255.0;
      *(float32x2_t *)((char *)&v57 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v36), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v57 + 3) = (float)HIBYTE(v36) / 255.0;
      v37 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v57);
    }
    v48 = v37;
    v49 = **(double **)(v3 + 32);
    v50 = v49 * v40 + v33 * v34;
    v41 = v49 * v48 + v30 * v34;
    v43 = v49 * v38 + v31 * v34;
    v45 = v49 * v39 + v32 * v34;
    v51 = 1.0;
    if (v50 <= 1.0)
      v51 = v50;
    if (v50 >= 0.0)
      v47 = v51;
    else
      v47 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19614A4D4);
    }
    v4 = **(_QWORD **)(v3 + 8);
    if ((v4 & 0x8000000000000) != 0)
    {
      v56 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v57 = &v55;
      *((_QWORD *)&v57 + 1) = &v56;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v4), (uint64_t)&v57);
    }
    else
    {
      v5 = bswap32(v4);
      *(float *)&v57 = (float)v5 / 255.0;
      *(float32x2_t *)((char *)&v57 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v5), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v57 + 3) = (float)HIBYTE(v5) / 255.0;
      v6 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v57);
    }
    v16 = v6;
    v17 = v7;
    v18 = v8;
    v19 = v9;
    v20 = **(double **)(v3 + 16);
    v21 = **(_QWORD **)(v3 + 24);
    if ((v21 & 0x8000000000000) != 0)
    {
      v56 = *(_OWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v57 = &v55;
      *((_QWORD *)&v57 + 1) = &v56;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v21), (uint64_t)&v57);
    }
    else
    {
      v22 = bswap32(v21);
      *(float *)&v57 = (float)v22 / 255.0;
      *(float32x2_t *)((char *)&v57 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v57 + 3) = (float)HIBYTE(v22) / 255.0;
      v23 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v57);
    }
    v54 = *(float *)&v25;
    v53 = *(float *)&v24;
    LODWORD(v24) = v17;
    LODWORD(v25) = v18;
    v41 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v16, v24, v25, v19, v20, v27, v28, v29, v23, v53, v54, v26, **(double **)(v3 + 32));
    v43 = v42;
    v45 = v44;
    v47 = v46;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v41;
  *(float *)(result + 8) = v43;
  *(float *)(result + 12) = v45;
  *(float *)(result + 16) = v47;
  *a2 = result | 0x120C000000000000;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::interpolateColors(WebCore::ColorInterpolationMethod,WebCore::Color,double,WebCore::Color,double)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  float v4;
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float v10;
  float v11;
  double v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  float v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  float v38;
  float v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t result;
  float v47;
  float v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v3 = *a1;
  if (*(_BYTE *)(*(_QWORD *)*a1 + 8) == 1)
  {
    WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v51);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v37 = **(double **)(v3 + 16);
    WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v52);
    v39 = v38;
    v40 = **(double **)(v3 + 32);
    v42 = v40 * v41 + v36 * v37;
    v22 = v40 * v39 + v30 * v37;
    v24 = v40 * v43 + v32 * v37;
    v26 = v40 * v44 + v34 * v37;
    v45 = 1.0;
    if (v42 <= 1.0)
      v45 = v42;
    if (v42 >= 0.0)
      v28 = v45;
    else
      v28 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)*a1 + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x19614A6E8);
    }
    WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>(*(unint64_t **)(v3 + 8), (uint64_t)&v49);
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = **(double **)(v3 + 16);
    WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>(*(unint64_t **)(v3 + 24), (uint64_t)&v50);
    v48 = v13;
    v47 = v14;
    LODWORD(v15) = v7;
    LODWORD(v16) = v9;
    v22 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v5, v15, v16, v11, v12, v19, v20, v21, v17, v47, v48, v18, **(double **)(v3 + 32));
    v24 = v23;
    v26 = v25;
    v28 = v27;
  }
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v22;
  *(float *)(result + 8) = v24;
  *(float *)(result + 12) = v26;
  *(float *)(result + 16) = v28;
  *a2 = result | 0x130C000000000000;
  return result;
}

float WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)1,WebCore::ColorInterpolationMethod::LCH>(unsigned __int8 a1, float a2, double a3, float a4, double a5, double a6, double a7, double a8, double a9, float a10, float a11, float a12, double a13)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  long double v24;

  v18 = a10 * a13 + a2 * a6;
  v19 = WebCore::fixupHueComponentsPriorToInterpolation(a1, a4, a12);
  v21 = v20 * a13 + v19 * a6;
  v22 = 100.0;
  if (v18 <= 100.0)
    v22 = v18;
  if (v18 >= 0.0)
    v23 = v22;
  else
    v23 = 0.0;
  v24 = fmod(v21, 360.0);
  fmod(v24 + 360.0, 360.0);
  return v23;
}

void WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  __int128 v8;

  LODWORD(v8) = WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(a1);
  *(_QWORD *)((char *)&v8 + 4) = __PAIR64__(v2, v1);
  HIDWORD(v8) = v3;
  WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v8);
  v6 = v4;
  v7 = v5;
  if (fabsf(v4) >= 0.02 || fabsf(v5) >= 0.02)
    atan2f(v5, v4);
  hypotf(v6, v7);
}

float WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)1,WebCore::ColorInterpolationMethod::OKLCH>(unsigned __int8 a1, float a2, double a3, float a4, double a5, double a6, double a7, double a8, double a9, float a10, float a11, float a12, double a13)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  long double v24;

  v18 = a10 * a13 + a2 * a6;
  v19 = WebCore::fixupHueComponentsPriorToInterpolation(a1, a4, a12);
  v21 = v20 * a13 + v19 * a6;
  if (v18 <= 1.0)
    v22 = v18;
  else
    v22 = 1.0;
  if (v18 >= 0.0)
    v23 = v22;
  else
    v23 = 0.0;
  v24 = fmod(v21, 360.0);
  fmod(v24 + 360.0, 360.0);
  return v23;
}

void WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(_DWORD *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;

  v1 = WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(a1);
  v3 = v2;
  v5 = v4;
  if (v1 > 0.04045)
    powf((float)(v1 + 0.055) / 1.055, 2.4);
  if (v3 > 0.04045)
    powf((float)(v3 + 0.055) / 1.055, 2.4);
  if (v5 > 0.04045)
    powf((float)(v5 + 0.055) / 1.055, 2.4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t result;
  int v5;

  v3 = *a1;
  WTF::StringBuilder::append();
  result = *v3;
  v5 = *a2;
  if (v5 == 1 || v5 == 3 || v5 == 2)
    return WTF::StringBuilder::append();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t result;
  int v5;

  v3 = *a1;
  WTF::StringBuilder::append();
  result = *v3;
  v5 = *a2;
  if (v5 == 1 || v5 == 3 || v5 == 2)
    return WTF::StringBuilder::append();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t result;
  int v5;

  v3 = *a1;
  WTF::StringBuilder::append();
  result = *v3;
  v5 = *a2;
  if (v5 == 1 || v5 == 3 || v5 == 2)
    return WTF::StringBuilder::append();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t result;
  int v5;

  v3 = *a1;
  WTF::StringBuilder::append();
  result = *v3;
  v5 = *a2;
  if (v5 == 1 || v5 == 3 || v5 == 2)
    return WTF::StringBuilder::append();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::serializationForCSS(WTF::StringBuilder &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*a2 <= 3)
    WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v3 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v3 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*a2 <= 3)
    WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v3 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v3 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*a2 <= 3)
    WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v3 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v3 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*a2 <= 3)
    WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v3 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v3 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::ColorInterpolationMethod const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) || *(_BYTE *)(*(_QWORD *)(v1 + 8) + 8) == 1)
    return WTF::TextStream::operator<<();
  return result;
}

void WebCore::contrastRatio(WebCore *this, const WebCore::Color *a2, const WebCore::Color *a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  float32x2_t v7;
  float v8;
  float v9;
  int v10;
  float v11;
  __int128 *v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  __int128 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;

  v3 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v28 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNS_13contrastRatioERKNS_5ColorES4_E3__0EEDcRKNS_15ColorComponentsIT_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EES6_SC_SE_(HIBYTE(v3), (unint64_t *)a2, (float *)&v28);
  }
  else
  {
    v4 = bswap32(v3);
    v5 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
    {
      v9 = *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
      v8 = *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8);
      v11 = *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC);
      v10 = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10);
      switch(HIBYTE(v5))
      {
        case 0u:
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          powf(fabsf(v9), 2.1992);
          powf(fabsf(v8), 2.1992);
          powf(fabsf(v11), 2.1992);
          return;
        case 1u:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v27);
          return;
        case 2u:
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          powf(fabsf(v9), 2.1992);
          powf(fabsf(v8), 2.1992);
          powf(fabsf(v11), 2.1992);
          return;
        case 3u:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v27);
          return;
        case 4u:
        case 0xCu:
        case 0x12u:
        case 0x13u:
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          return;
        case 5u:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v27);
          return;
        case 6u:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v27);
          return;
        case 7u:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          v12 = &v27;
          goto LABEL_18;
        case 8u:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          v13 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v27);
          goto LABEL_17;
        case 9u:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          v13 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v27);
LABEL_17:
          *(_QWORD *)&v28 = __PAIR64__(v14, LODWORD(v13));
          *((_QWORD *)&v28 + 1) = __PAIR64__(v16, v15);
          v12 = &v28;
LABEL_18:
          WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)v12);
          return;
        case 0xAu:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v27);
          *(_QWORD *)&v28 = __PAIR64__(v18, v17);
          *((_QWORD *)&v28 + 1) = __PAIR64__(v20, v19);
          v21 = &v28;
          goto LABEL_21;
        case 0xBu:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          v21 = &v27;
LABEL_21:
          WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)v21);
          return;
        case 0xDu:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v27);
          *(_QWORD *)&v28 = __PAIR64__(v23, v22);
          *((_QWORD *)&v28 + 1) = __PAIR64__(v25, v24);
          v26 = &v28;
          goto LABEL_24;
        case 0xEu:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          v26 = &v27;
LABEL_24:
          WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v26);
          break;
        case 0xFu:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v27);
          break;
        case 0x10u:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v27);
          break;
        default:
          LODWORD(v27) = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
          *(_QWORD *)((char *)&v27 + 4) = __PAIR64__(LODWORD(v11), LODWORD(v8));
          HIDWORD(v27) = v10;
          *(float *)&v28 = (float)v4 / 255.0;
          *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
          *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
          WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v27);
          break;
      }
    }
    else
    {
      v6 = bswap32(v5);
      v7 = (float32x2_t)vdup_n_s32(0x437F0000u);
      *(float *)&v28 = (float)v4 / 255.0;
      *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), v7);
      *((float *)&v28 + 3) = (float)HIBYTE(v4) / 255.0;
      WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
      *(float *)&v28 = (float)v6 / 255.0;
      *(float32x2_t *)((char *)&v28 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v6), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), v7);
      *((float *)&v28 + 3) = (float)HIBYTE(v6) / 255.0;
      WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v28);
    }
  }
}

uint64_t WebCore::serializationForCSS@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  return WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(a2, *(_QWORD *)this, (uint64_t *)this);
}

uint64_t WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t result;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int32 v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  unsigned int v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float v54;
  unint64_t v55;
  float v56;
  float v57;

  if ((a2 & 0x8000000000000) == 0)
    return WebCore::serializationForCSS(a1, bswap32(a2), ((unint64_t)*a3 >> 49) & 1);
  v6 = *(float *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
  v5 = *(float *)((a2 & 0xFFFFFFFFFFFFLL) + 8);
  v7 = *(float *)((a2 & 0xFFFFFFFFFFFFLL) + 0xC);
  v8 = *(float *)((a2 & 0xFFFFFFFFFFFFLL) + 0x10);
  switch(HIBYTE(a2))
  {
    case 0u:
    case 2u:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationUsingColorFunction<WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>>(a1, (float *)&v55);
    case 1u:
    case 3u:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationUsingColorFunction<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(a1, (float *)&v55);
    case 4u:
    case 0xCu:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationUsingColorFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(a1, (float *)&v55);
    case 5u:
    case 0xFu:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(a1, (float *)&v55);
    case 6u:
    case 0x10u:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(a1, (float *)&v55);
    case 7u:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a1, (float *)&v55);
    case 8u:
      v19 = *a3;
      v51 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      v52 = v5;
      v53 = v7;
      v54 = v8;
      if ((v19 & 0x2000000000000) != 0)
      {
        v47 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v51);
        goto LABEL_64;
      }
      v20 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v51);
      v24 = 255.0;
      v25 = v20 * 255.0;
      if (v20 > 1.0)
        v25 = 255.0;
      v26 = v21 * 255.0;
      if (v21 > 1.0)
        v26 = 255.0;
      if (v22 <= 1.0)
        v24 = v22 * 255.0;
      if (v20 >= 0.0)
        v27 = v25;
      else
        v27 = 0.0;
      if (v21 >= 0.0)
        v28 = v26;
      else
        v28 = 0.0;
      if (v22 >= 0.0)
        v29 = v24;
      else
        v29 = 0.0;
      v30 = llroundf(v27);
      v31 = v23 * 255.0;
      v32 = 255;
      if (v30 >= 255)
        v30 = 255;
      v33 = llroundf(v28);
      v12 = v30 & ~(v30 >> 63);
      if (v33 >= 255)
        v33 = 255;
      v14 = v33 & ~(v33 >> 63);
      v34 = llroundf(v29);
      if (v34 >= 255)
        v34 = 255;
      v35 = v34 & ~(v34 >> 63);
      goto LABEL_50;
    case 9u:
      v36 = *a3;
      v51 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      v52 = v5;
      v53 = v7;
      v54 = v8;
      if ((v36 & 0x2000000000000) != 0)
      {
        v47 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v51);
LABEL_64:
        v55 = __PAIR64__(v48, LODWORD(v47));
        v56 = v49;
        v57 = v50;
        return WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a1, (float *)&v55);
      }
      LODWORD(v55) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v51);
      HIDWORD(v55) = v37;
      v56 = v38;
      v57 = v39;
      v40 = llroundf(WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>((int8x8_t *)&v55)* 255.0);
      v32 = 255;
      if (v40 >= 255)
        v40 = 255;
      v12 = v40 & ~(v40 >> 63);
      v44 = llroundf(v41 * 255.0);
      if (v44 >= 255)
        v44 = 255;
      v14 = v44 & ~(v44 >> 63);
      v45 = llroundf(v42 * 255.0);
      if (v45 >= 255)
        v45 = 255;
      v35 = v45 & ~(v45 >> 63);
      v31 = v43 * 255.0;
LABEL_50:
      v46 = llroundf(v31);
      if (v46 < 255)
        v32 = v46;
      v18 = (v35 << 16) | ((v32 & ~(v32 >> 63)) << 24);
      goto LABEL_53;
    case 0xAu:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationForCSS(a1, (float *)&v55);
    case 0xBu:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationForCSS(a1, (float *)&v55);
    case 0xDu:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationForCSS(a1, (float *)&v55);
    case 0xEu:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationForCSS(a1, (float *)&v55);
    case 0x12u:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationUsingColorFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>(a1, (float *)&v55);
    case 0x13u:
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      return WebCore::serializationUsingColorFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(a1, (float *)&v55);
    default:
      v9 = *a3;
      LODWORD(v55) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
      *((float *)&v55 + 1) = v5;
      v56 = v7;
      v57 = v8;
      if ((v9 & 0x2000000000000) != 0)
      {
        result = WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a1, (float *)&v55);
      }
      else
      {
        v10 = llroundf(v6 * 255.0);
        v11 = 255;
        if (v10 >= 255)
          v10 = 255;
        v12 = v10 & ~(v10 >> 63);
        v13 = llroundf(v5 * 255.0);
        if (v13 >= 255)
          v13 = 255;
        v14 = v13 & ~(v13 >> 63);
        v15 = llroundf(v7 * 255.0);
        if (v15 >= 255)
          v15 = 255;
        v16 = v15 & ~(v15 >> 63);
        v17 = llroundf(v8 * 255.0);
        if (v17 < 255)
          v11 = v17;
        v18 = ((v11 & ~(v11 >> 63)) << 24) | (v16 << 16);
LABEL_53:
        result = WebCore::serializationForCSS(a1, v18 | (v14 << 8) | v12, 0);
      }
      break;
  }
  return result;
}

_BYTE *WebCore::serializationForHTML@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  _BYTE *result;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int32 v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD v47[4];
  int8x8_t v48;
  float v49;
  float v50;

  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) == 0)
    return WebCore::serializationForHTML(a2, bswap32(v4), (v4 >> 49) & 1);
  v7 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
  v6 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8);
  v9 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC);
  v8 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10);
  switch(HIBYTE(v4))
  {
    case 0u:
    case 2u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>>(a2, (float *)&v48);
      break;
    case 1u:
    case 3u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(a2, (float *)&v48);
      break;
    case 4u:
    case 0xCu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(a2, (float *)&v48);
      break;
    case 5u:
    case 0xFu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(a2, (float *)&v48);
      break;
    case 6u:
    case 0x10u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(a2, (float *)&v48);
      break;
    case 7u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a2, (float *)&v48);
      break;
    case 8u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v18 = (v4 >> 49) & 1;
      v49 = v9;
      v50 = v8;
      v19 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v48);
      v23 = 255.0;
      v24 = v19 * 255.0;
      if (v19 > 1.0)
        v24 = 255.0;
      v25 = v20 * 255.0;
      if (v20 > 1.0)
        v25 = 255.0;
      if (v21 <= 1.0)
        v23 = v21 * 255.0;
      if (v19 >= 0.0)
        v26 = v24;
      else
        v26 = 0.0;
      if (v20 >= 0.0)
        v27 = v25;
      else
        v27 = 0.0;
      if (v21 >= 0.0)
        v28 = v23;
      else
        v28 = 0.0;
      v29 = llroundf(v26);
      v30 = v22 * 255.0;
      v31 = 255;
      if (v29 >= 255)
        v29 = 255;
      v32 = llroundf(v27);
      v33 = v29 & ~(v29 >> 63);
      if (v32 >= 255)
        v32 = 255;
      v34 = v32 & ~(v32 >> 63);
      v35 = llroundf(v28);
      if (v35 >= 255)
        v35 = 255;
      v36 = v35 & ~(v35 >> 63);
      goto LABEL_49;
    case 9u:
      v47[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v47[1] = v6;
      v18 = (v4 >> 49) & 1;
      *(float *)&v47[2] = v9;
      *(float *)&v47[3] = v8;
      v48.i32[0] = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)v47);
      v48.i32[1] = v37;
      v49 = v38;
      v50 = v39;
      v40 = llroundf(WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(&v48)* 255.0);
      v31 = 255;
      if (v40 >= 255)
        v40 = 255;
      v33 = v40 & ~(v40 >> 63);
      v44 = llroundf(v41 * 255.0);
      if (v44 >= 255)
        v44 = 255;
      v34 = v44 & ~(v44 >> 63);
      v45 = llroundf(v42 * 255.0);
      if (v45 >= 255)
        v45 = 255;
      v36 = v45 & ~(v45 >> 63);
      v30 = v43 * 255.0;
LABEL_49:
      v46 = llroundf(v30);
      if (v46 < 255)
        v31 = v46;
      result = WebCore::serializationForHTML(a2, (v36 << 16) | ((v31 & ~(v31 >> 63)) << 24) | (v34 << 8) | v33, v18);
      break;
    case 0xAu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationForCSS(a2, (float *)&v48);
      break;
    case 0xBu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationForCSS(a2, (float *)&v48);
      break;
    case 0xDu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationForCSS(a2, (float *)&v48);
      break;
    case 0xEu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationForCSS(a2, (float *)&v48);
      break;
    case 0x12u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>(a2, (float *)&v48);
      break;
    case 0x13u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(a2, (float *)&v48);
      break;
    default:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      if ((v4 & 0x2000000000000) != 0)
      {
        result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a2, (float *)&v48);
      }
      else
      {
        v10 = llroundf(v7 * 255.0);
        v11 = 255;
        if (v10 >= 255)
          v10 = 255;
        v12 = v10 & ~(v10 >> 63);
        v13 = llroundf(v6 * 255.0);
        if (v13 >= 255)
          v13 = 255;
        v14 = v13 & ~(v13 >> 63);
        v15 = llroundf(v9 * 255.0);
        if (v15 >= 255)
          v15 = 255;
        v16 = v15 & ~(v15 >> 63);
        v17 = llroundf(v8 * 255.0);
        if (v17 < 255)
          v11 = v17;
        result = (_BYTE *)WebCore::serializationForCSS(a2, ((v11 & ~(v11 >> 63)) << 24) | (v16 << 16) | (v14 << 8) | v12, 0);
      }
      break;
  }
  return result;
}

_BYTE *WebCore::serializationForRenderTreeAsText@<X0>(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  _BYTE *result;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int32 v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD v47[4];
  int8x8_t v48;
  float v49;
  float v50;

  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) == 0)
    return WebCore::serializationForRenderTreeAsText(a2, bswap32(v4), (v4 >> 49) & 1);
  v7 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
  v6 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8);
  v9 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC);
  v8 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10);
  switch(HIBYTE(v4))
  {
    case 0u:
    case 2u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>>(a2, (float *)&v48);
      break;
    case 1u:
    case 3u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(a2, (float *)&v48);
      break;
    case 4u:
    case 0xCu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(a2, (float *)&v48);
      break;
    case 5u:
    case 0xFu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(a2, (float *)&v48);
      break;
    case 6u:
    case 0x10u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(a2, (float *)&v48);
      break;
    case 7u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a2, (float *)&v48);
      break;
    case 8u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v18 = (v4 >> 49) & 1;
      v49 = v9;
      v50 = v8;
      v19 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v48);
      v23 = 255.0;
      v24 = v19 * 255.0;
      if (v19 > 1.0)
        v24 = 255.0;
      v25 = v20 * 255.0;
      if (v20 > 1.0)
        v25 = 255.0;
      if (v21 <= 1.0)
        v23 = v21 * 255.0;
      if (v19 >= 0.0)
        v26 = v24;
      else
        v26 = 0.0;
      if (v20 >= 0.0)
        v27 = v25;
      else
        v27 = 0.0;
      if (v21 >= 0.0)
        v28 = v23;
      else
        v28 = 0.0;
      v29 = llroundf(v26);
      v30 = v22 * 255.0;
      v31 = 255;
      if (v29 >= 255)
        v29 = 255;
      v32 = llroundf(v27);
      v33 = v29 & ~(v29 >> 63);
      if (v32 >= 255)
        v32 = 255;
      v34 = v32 & ~(v32 >> 63);
      v35 = llroundf(v28);
      if (v35 >= 255)
        v35 = 255;
      v36 = v35 & ~(v35 >> 63);
      goto LABEL_49;
    case 9u:
      v47[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v47[1] = v6;
      v18 = (v4 >> 49) & 1;
      *(float *)&v47[2] = v9;
      *(float *)&v47[3] = v8;
      v48.i32[0] = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)v47);
      v48.i32[1] = v37;
      v49 = v38;
      v50 = v39;
      v40 = llroundf(WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(&v48)* 255.0);
      v31 = 255;
      if (v40 >= 255)
        v40 = 255;
      v33 = v40 & ~(v40 >> 63);
      v44 = llroundf(v41 * 255.0);
      if (v44 >= 255)
        v44 = 255;
      v34 = v44 & ~(v44 >> 63);
      v45 = llroundf(v42 * 255.0);
      if (v45 >= 255)
        v45 = 255;
      v36 = v45 & ~(v45 >> 63);
      v30 = v43 * 255.0;
LABEL_49:
      v46 = llroundf(v30);
      if (v46 < 255)
        v31 = v46;
      result = WebCore::serializationForRenderTreeAsText(a2, (v36 << 16) | ((v31 & ~(v31 >> 63)) << 24) | (v34 << 8) | v33, v18);
      break;
    case 0xAu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationForCSS(a2, (float *)&v48);
      break;
    case 0xBu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationForCSS(a2, (float *)&v48);
      break;
    case 0xDu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationForCSS(a2, (float *)&v48);
      break;
    case 0xEu:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationForCSS(a2, (float *)&v48);
      break;
    case 0x12u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>(a2, (float *)&v48);
      break;
    case 0x13u:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(a2, (float *)&v48);
      break;
    default:
      v48.i32[0] = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      *(float *)&v48.i32[1] = v6;
      v49 = v9;
      v50 = v8;
      if ((v4 & 0x2000000000000) != 0)
      {
        result = (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a2, (float *)&v48);
      }
      else
      {
        v10 = llroundf(v7 * 255.0);
        v11 = 255;
        if (v10 >= 255)
          v10 = 255;
        v12 = v10 & ~(v10 >> 63);
        v13 = llroundf(v6 * 255.0);
        if (v13 >= 255)
          v13 = 255;
        v14 = v13 & ~(v13 >> 63);
        v15 = llroundf(v9 * 255.0);
        if (v15 >= 255)
          v15 = 255;
        v16 = v15 & ~(v15 >> 63);
        v17 = llroundf(v8 * 255.0);
        if (v17 < 255)
          v11 = v17;
        result = (_BYTE *)WebCore::serializationForCSS(a2, ((v11 & ~(v11 >> 63)) << 24) | (v16 << 16) | (v14 << 8) | v12, 0);
      }
      break;
  }
  return result;
}

void WebCore::TextLayoutDeleter::operator()(int a1, WebCore::FontCascade *this)
{
  WebCore::ComplexTextController *v3;
  WTF *v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  void *v8;

  if (this)
  {
    v3 = (WebCore::ComplexTextController *)*((_QWORD *)this + 42);
    *((_QWORD *)this + 42) = 0;
    if (v3)
    {
      WebCore::ComplexTextController::~ComplexTextController(v3, this);
      WTF::fastFree(v4, v5);
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, this);
      else
        *(_DWORD *)v6 -= 2;
    }
    WebCore::FontCascade::~FontCascade(this, this);
    WTF::fastFree(v7, v8);
  }
}

WebCore::TextLayout *WebCore::FontCascade::createLayout@<X0>(WebCore::FontCascade *this@<X0>, WebCore::RenderText *a2@<X1>, float a3@<S0>, int a4@<W2>, WebCore::TextLayout **a5@<X8>)
{
  WebCore::TextLayout *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WebCore::TextLayout *v17;
  _BYTE v18[8];
  WTF::StringImpl *v19;
  char v20;

  if (!a4)
    goto LABEL_2;
  v10 = *((_QWORD *)a2 + 4);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  v11 = v10 + 80;
  v12 = *((_QWORD *)a2 + 13);
  if (v12 && (v13 = *(unsigned int *)(v12 + 4), (_DWORD)v13))
    v14 = v13 | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
  else
    v14 = 0x100000000;
  WebCore::RenderBlock::constructTextRun(v14, v11, 4, 0, (uint64_t)v18);
  v16 = WebCore::FontCascade::s_codePath;
  if (!WebCore::FontCascade::s_codePath)
  {
    if ((v20 & 8) != 0 && v19 && (*((_BYTE *)v19 + 16) & 4) == 0)
      v16 = WebCore::FontCascade::characterRangeCodePath(*((_QWORD *)v19 + 1), *((unsigned int *)v19 + 1));
    else
      v16 = 1;
  }
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v16 == 2)
  {
    v17 = (WebCore::TextLayout *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::TextLayout::TextLayout(v17, a2, this, a3);
  }
  else
  {
LABEL_2:
    result = 0;
  }
  *a5 = result;
  return result;
}

WebCore::TextLayout *WebCore::TextLayout::TextLayout(WebCore::TextLayout *this, WebCore::RenderText *a2, const WebCore::FontCascade *a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WebCore::ComplexTextController *v11;

  WebCore::FontCascade::FontCascade(this, a3);
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  v8 = *((_QWORD *)a2 + 13);
  if (v8 && (v9 = *(unsigned int *)(v8 + 4), (_DWORD)v9))
    v10 = v9 | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
  else
    v10 = 0x100000000;
  WebCore::RenderBlock::constructTextRun(v10, v7 + 80, 4, 0, (uint64_t)this + 296);
  *((float *)this + 80) = a4;
  v11 = (WebCore::ComplexTextController *)WTF::fastMalloc((WTF *)0x15E8);
  *((_QWORD *)this + 42) = WebCore::ComplexTextController::ComplexTextController(v11, (uint64_t)this, (uint64_t)this + 296, 1, 0, 0);
  return this;
}

uint64_t WebCore::ComplexTextController::computeExpansionOpportunity(uint64_t this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;

  v1 = this;
  v2 = 0.0;
  if (*(float *)(this + 5580) != 0.0)
  {
    v3 = *(_QWORD *)(this + 5536);
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(unsigned __int8 **)(v4 + 8);
      v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v5 = 0;
      v6 = 0x100000000;
    }
    this = WebCore::FontCascade::expansionOpportunityCount(v5, v6, (*(_BYTE *)(v3 + 37) & 2) != 0, *(_BYTE *)(v3 + 36));
    if ((_DWORD)this)
      v2 = *(float *)(v1 + 5580) / (float)this;
  }
  *(float *)(v1 + 5584) = v2;
  return this;
}

WebCore::ComplexTextController *WebCore::ComplexTextController::ComplexTextController(WebCore::ComplexTextController *this, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  char *v7;
  __n128 v8;
  uint64_t v9;
  int v10;
  int32x4_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  int v22;
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  WebCore::Font *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::BitVector *v41;
  int v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  char v46;
  int v47;
  WebCore::Font *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  WebCore::Font *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int8_t v56;
  uint64_t v57;
  WTF::BitVector *v58;
  BOOL v59;
  char v60;
  unint64_t v61;
  unsigned __int16 *v62;
  WebCore::ComplexTextController *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  WebCore::Font *v73;
  unsigned __int8 *v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  _WORD *v83;
  unsigned __int16 *v84;
  unint64_t v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned __int16 *v97;
  WebCore::ComplexTextController *v98;
  int v99;
  uint64_t v100;
  _BOOL4 v101;
  _BOOL4 v102;
  __int16 v103;
  unsigned int v104;
  _WORD *v105;
  unsigned int v106;
  int v107;
  _WORD *v108;
  uint64_t v109;
  unsigned __int16 *v110;
  uint64_t v111;
  __int16 v112;
  _BOOL4 v113;
  int v114;
  WebCore::Font *v115;
  char v116;
  unsigned __int16 *v117;
  unint64_t v118;
  UChar32 c;
  unsigned int v120;
  WTF::StringImpl *v121[13];

  v121[11] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 256;
  *((_QWORD *)this + 258) = (char *)this + 2080;
  *((_QWORD *)this + 259) = 256;
  *((_QWORD *)this + 516) = (char *)this + 4144;
  *((_QWORD *)this + 517) = 256;
  v7 = (char *)this + 4672;
  *((_QWORD *)this + 582) = (char *)this + 4672;
  *((_QWORD *)this + 583) = 256;
  *((_QWORD *)this + 648) = (char *)this + 5200;
  *((_QWORD *)this + 649) = 16;
  *((_QWORD *)this + 666) = (char *)this + 5344;
  *((_QWORD *)this + 667) = 16;
  *((_QWORD *)this + 676) = (char *)this + 5424;
  *((_QWORD *)this + 677) = 16;
  v8.n128_u32[1] = 0;
  v8.n128_u64[1] = 0;
  *((_OWORD *)this + 343) = 0u;
  *((_OWORD *)this + 344) = 0u;
  *((_QWORD *)this + 690) = a5;
  *((_QWORD *)this + 691) = a2;
  *((_QWORD *)this + 692) = a3;
  *((_DWORD *)this + 1386) = 0;
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
    v10 = *(_DWORD *)(v9 + 4);
  else
    v10 = 0;
  *((_DWORD *)this + 1387) = v10;
  *((_QWORD *)this + 694) = 0;
  *((_QWORD *)this + 696) = 0;
  *((_QWORD *)this + 695) = 0;
  *((_DWORD *)this + 1394) = 0;
  v8.n128_u32[0] = *(_DWORD *)(a3 + 32);
  *((_DWORD *)this + 1395) = v8.n128_u32[0];
  v11 = (int32x4_t)xmmword_1969F7750;
  *((_OWORD *)this + 349) = xmmword_1969F7750;
  *((_DWORD *)this + 1400) = 0x800000;
  *((_BYTE *)this + 5604) = 1;
  *((_BYTE *)this + 5605) = a4;
  v12 = 0.0;
  *((_BYTE *)this + 5606) = a6;
  if (v8.n128_f32[0] != 0.0)
  {
    if (v9)
    {
      v74 = *(unsigned __int8 **)(v9 + 8);
      v75 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v74 = 0;
      v75 = 0x100000000;
    }
    v76 = WebCore::FontCascade::expansionOpportunityCount(v74, v75, (*(_BYTE *)(a3 + 37) & 2) != 0, *(_BYTE *)(a3 + 36));
    if (v76)
    {
      v8.n128_u32[0] = *((_DWORD *)this + 1395);
      *(float *)v11.i32 = (float)v76;
      v12 = v8.n128_f32[0] / (float)v76;
    }
  }
  *((float *)this + 1396) = v12;
  if (*((_DWORD *)this + 1387))
  {
    v13 = *((_QWORD *)this + 691);
    v8.n128_u32[0] = *(_DWORD *)(v13 + 172);
    if (v8.n128_f32[0] != 0.0)
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 692) + 8);
      if (v14)
      {
        if ((*(_BYTE *)(v14 + 16) & 4) == 0)
        {
          v117 = *(unsigned __int16 **)(v14 + 8);
          v118 = *(unsigned int *)(v14 + 4);
          goto LABEL_18;
        }
        *(_DWORD *)v14 += 2;
      }
      v121[0] = (WTF::StringImpl *)v14;
      WTF::String::convertTo16Bit((WTF::String *)v121);
      v16 = v121[0];
      if (v121[0])
      {
        v117 = (unsigned __int16 *)*((_QWORD *)v121[0] + 1);
        v118 = *((unsigned int *)v121[0] + 1);
      }
      else
      {
        v117 = 0;
        v118 = 0;
      }
      v17 = (uint64_t *)((char *)this + 5504);
      v18 = *((unsigned int *)this + 1379);
      if ((_DWORD)v18 == *((_DWORD *)this + 1378))
      {
        v68 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v18 + 1, (unint64_t)v121);
        v18 = *((unsigned int *)this + 1379);
        v69 = *((_QWORD *)this + 688);
        v70 = *v68;
        *v68 = 0;
        *(_QWORD *)(v69 + 8 * v18) = v70;
      }
      else
      {
        v19 = *v17;
        v121[0] = 0;
        *(_QWORD *)(v19 + 8 * v18) = v16;
      }
      *((_DWORD *)this + 1379) = v18 + 1;
      v20 = v121[0];
      v121[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v15);
        else
          *(_DWORD *)v20 -= 2;
      }
      v13 = *((_QWORD *)this + 691);
LABEL_18:
      v21 = *(_DWORD *)(v13 + 176);
      v22 = (v21 >> 26) & 7;
      v23 = v22 == 4 || v22 == 2;
      if (v22 == 2 || v22 == 4 || (v22 - 1) <= 3)
      {
        v24 = *((unsigned int *)this + 1387);
        v25 = *((unsigned int *)this + 1167);
        if (v25 < v24)
        {
          v26 = *((unsigned int *)this + 1166);
          if (v26 < v24)
          {
            v27 = v26 + (v26 >> 2);
            if (v27 >= 0x10)
              v28 = v27 + 1;
            else
              v28 = 16;
            if (v28 <= v24)
              v29 = *((unsigned int *)this + 1387);
            else
              v29 = v28;
            v30 = (char *)*((_QWORD *)this + 582);
            if (v29 < 0x101)
            {
              *((_QWORD *)this + 582) = v7;
              *((_DWORD *)this + 1166) = 256;
              v31 = v7;
            }
            else
            {
              if (v29 >> 31)
              {
                __break(0xC471u);
                goto LABEL_194;
              }
              v31 = (void *)WTF::fastMalloc((WTF *)(2 * v29));
              *((_DWORD *)this + 1166) = v29;
              *((_QWORD *)this + 582) = v31;
            }
            memcpy(v31, v30, 2 * v25);
            if (v7 != v30 && v30)
            {
              if (*((char **)this + 582) == v30)
              {
                *((_QWORD *)this + 582) = 0;
                *((_DWORD *)this + 1166) = 0;
              }
              WTF::fastFree((WTF *)v30, v32);
            }
          }
        }
        *((_DWORD *)this + 1167) = v24;
        v22 = (v21 >> 26) & 7;
      }
      v120 = 0;
      v33 = *(_QWORD *)(*((_QWORD *)this + 692) + 8);
      if (v33)
      {
        v34 = *(WTF::StringImpl **)(v33 + 8);
        v35 = *(unsigned int *)(v33 + 4) | ((unint64_t)((*(_DWORD *)(v33 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v34 = 0;
        v35 = 0x100000000;
      }
      v36 = 1;
      WTF::CachedTextBreakIterator::CachedTextBreakIterator((uint64_t)v121, v34, v35, 0, 0, 0x300000000, (_QWORD *)(*((_QWORD *)this + 691) + 144), 1);
      c = 0;
      WebCore::ComplexTextController::advanceByCombiningCharacterSequence(*(_QWORD *)(*((_QWORD *)this + 692) + 8), *((_DWORD *)this + 1387), (uint64_t)v121, &v120, (unsigned int *)&c);
      v37 = v120;
      if (v118 < v120)
      {
LABEL_194:
        __break(1u);
        goto LABEL_195;
      }
      v38 = (WebCore::Font *)WebCore::FontCascade::fontForCombiningCharacterSequence(*((_QWORD *)this + 691), v117, v120);
      v39 = c;
      v113 = v23;
      if (((1 << u_charType(c)) & 0x1C0) != 0 || (v42 = MEMORY[0x19AEA861C](v39), v42 == (_DWORD)v39))
      {
        v44 = 0;
        v43 = 0;
      }
      else
      {
        v36 = 0;
        v43 = v42 & 0xFFFFFF00;
        v44 = v42;
      }
      v114 = v22;
      v45 = (v21 & 0x8000) == 0 || v22 == 0;
      v46 = v45;
      v116 = v46;
      if (v45 || (unint64_t)v38 + 1 < 2)
        goto LABEL_50;
      if (v22 == 4 || v22 == 2)
      {
        v115 = 0;
        v47 = 0;
        if ((v39 - 9) < 5)
        {
          v48 = 0;
          goto LABEL_51;
        }
        v48 = 0;
        if ((_DWORD)v39 == 32)
          goto LABEL_51;
      }
      else if ((v36 & 1) != 0)
      {
        goto LABEL_50;
      }
      v101 = WebCore::Font::variantCapsSupportedForSynthesis((uint64_t)v38, v114, v40, v41);
      if (!v101)
      {
        v102 = v101;
        v48 = (WebCore::Font *)WebCore::Font::noSynthesizableFeaturesFont(v38);
        v115 = WebCore::Font::smallCapsFont(v48, (const WebCore::FontDescription *)(*((_QWORD *)this + 691) + 16));
        if (v36)
        {
          if (!v118)
            goto LABEL_194;
          v103 = *v117;
        }
        else
        {
          v103 = v43 | v44;
          if ((v43 | v44) >> 16)
          {
            v104 = *((_DWORD *)this + 1167);
            if (!v104)
            {
              __break(0xC471u);
              JUMPOUT(0x19614E2C0);
            }
            v105 = (_WORD *)*((_QWORD *)this + 582);
            *v105 = (v43 >> 10) - 10304;
            if (v104 == 1)
            {
LABEL_200:
              __break(0xC471u);
              JUMPOUT(0x19614E270);
            }
            v105[1] = v103 & 0x3FF | 0xDC00;
            v106 = 2;
            goto LABEL_175;
          }
        }
        v104 = *((_DWORD *)this + 1167);
        if (!v104)
        {
          __break(0xC471u);
          JUMPOUT(0x19614E2B8);
        }
        v105 = (_WORD *)*((_QWORD *)this + 582);
        *v105 = v103;
        v106 = 1;
LABEL_175:
        v107 = v37 - v106;
        if (v37 <= v106)
        {
          v47 = 1;
        }
        else
        {
          v47 = !v102;
          v108 = &v105[v106];
          if (v106 <= v104)
            v109 = v104;
          else
            v109 = v106;
          v110 = &v117[v106];
          v111 = v109 - v106;
          do
          {
            if (!v111)
            {
              __break(0xC471u);
              JUMPOUT(0x19614E2B0);
            }
            v112 = *v110++;
            *v108++ = v112;
            --v111;
            --v107;
          }
          while (v107);
        }
        goto LABEL_51;
      }
LABEL_50:
      v47 = 0;
      v115 = 0;
      v48 = 0;
LABEL_51:
      v49 = *((_DWORD *)this + 1387);
      if (v37 < v49)
      {
        v50 = 0;
        v51 = v47;
        while (1)
        {
          v52 = v38;
          WebCore::ComplexTextController::advanceByCombiningCharacterSequence(*(_QWORD *)(*((_QWORD *)this + 692) + 8), v49, (uint64_t)v121, &v120, (unsigned int *)&c);
          if (v48)
          {
            v77 = WebCore::capitalized(c);
            if ((v77 & 0xFF00000000) != 0)
            {
              v78 = *((_DWORD *)this + 1167);
              if ((v77 & 0xFFFF0000) != 0)
              {
                if (v78 <= v37)
                  goto LABEL_200;
                v79 = *((_QWORD *)this + 582);
                *(_WORD *)(v79 + 2 * v37) = (v77 >> 10) - 10304;
                if (v78 <= (int)v37 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19614E278);
                }
                v80 = v37 + 2;
                *(_WORD *)(v79 + 2 * (v37 + 1)) = v77 & 0x3FF | 0xDC00;
              }
              else
              {
                if (v78 <= v37)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19614E280);
                }
                v80 = v37 + 1;
                v79 = *((_QWORD *)this + 582);
                *(_WORD *)(v79 + 2 * v37) = v77;
              }
              if (v80 < v120)
              {
                v81 = v120 - (unint64_t)v80;
                if (v80 <= v78)
                  v82 = v78;
                else
                  v82 = v80;
                v83 = (_WORD *)(v79 + 2 * v80);
                v84 = &v117[v80];
                v85 = v118 - v80;
                if (v118 < v80)
                  v85 = 0;
                v86 = v82 - v80;
                while (v85)
                {
                  if (!v86)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19614E288);
                  }
                  v87 = *v84++;
                  *v83++ = v87;
                  --v86;
                  --v85;
                  v47 = 1;
                  if (!--v81)
                    goto LABEL_54;
                }
                goto LABEL_194;
              }
              v47 = 1;
            }
            else if (v114 == 4 || (v47 = v113, v114 == 2))
            {
              v94 = v120;
              v47 = v113;
              if (v37 < v120)
              {
                v95 = v37;
                v96 = v118;
                if (v118 <= v37)
                  v96 = v37;
                do
                {
                  if (v96 == v95)
                    goto LABEL_194;
                  if (v95 >= *((unsigned int *)this + 1167))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19614E290);
                  }
                  *(_WORD *)(*((_QWORD *)this + 582) + 2 * v95) = v117[v95];
                  ++v95;
                }
                while (v94 != v95);
                v47 = v113;
              }
            }
          }
LABEL_54:
          if (v118 < v37)
            goto LABEL_194;
          v53 = v120;
          v54 = v120 - v37;
          if (v118 - v37 < v54)
            goto LABEL_194;
          v38 = (WebCore::Font *)WebCore::FontCascade::fontForCombiningCharacterSequence(*((_QWORD *)this + 691), &v117[v37], v54);
          v55 = c;
          v56 = u_charType(c);
          v59 = 1;
          if (((1 << v56) & 0x1C0) == 0)
            v59 = MEMORY[0x19AEA861C](v55) == (_DWORD)v55;
          v60 = v116;
          if (v48)
            v60 = 1;
          if ((v60 & 1) == 0 && (unint64_t)v38 + 1 >= 2)
          {
            if (v114 == 4 || v114 == 2)
            {
              if ((v55 - 9) < 5 || (_DWORD)v55 == 32)
                goto LABEL_61;
            }
            else if (v59)
            {
              goto LABEL_61;
            }
            if (!WebCore::Font::variantCapsSupportedForSynthesis((uint64_t)v38, v114, v57, v58))
            {
              v48 = (WebCore::Font *)WebCore::Font::noSynthesizableFeaturesFont(v38);
              v115 = WebCore::Font::smallCapsFont(v48, (const WebCore::FontDescription *)(*((_QWORD *)this + 691) + 16));
              v120 = v50;
              v47 = 1;
              v53 = v50;
LABEL_63:
              v37 = v50;
              goto LABEL_64;
            }
          }
LABEL_61:
          if (v38 == v52 && ((v51 ^ v47) & 1) == 0)
            goto LABEL_63;
          v71 = (v37 - v50);
          if ((_DWORD)v37 != (_DWORD)v50)
          {
            if (v48)
            {
              if ((v51 & 1) != 0)
              {
                v72 = *((unsigned int *)this + 1167);
                if (v72 < v50 || v72 - (unint64_t)v50 < v71)
                  goto LABEL_194;
                v73 = v115;
                WebCore::ComplexTextController::collectComplexTextRunsForCharacters((uint64_t)this, (unsigned __int16 *)(*((_QWORD *)this + 582) + 2 * v50), v71, v50, (uint64_t)v115);
                goto LABEL_138;
              }
              if (v118 < v50 || v118 - v50 < v71)
                goto LABEL_194;
              v97 = &v117[v50];
              v98 = this;
              v99 = v50;
              v100 = (uint64_t)v48;
            }
            else
            {
              if (v118 < v50 || v118 - v50 < v71)
                goto LABEL_194;
              v97 = &v117[v50];
              v98 = this;
              v99 = v50;
              v100 = (uint64_t)v52;
            }
            WebCore::ComplexTextController::collectComplexTextRunsForCharacters((uint64_t)v98, v97, v71, v99, v100);
            v73 = v115;
LABEL_138:
            v47 = (v38 == v52) & v47;
            if (v38 != v52)
              v73 = 0;
            v115 = v73;
            if (v38 != v52)
              v48 = 0;
            v53 = v120;
          }
LABEL_64:
          v50 = v37;
          v49 = *((_DWORD *)this + 1387);
          v37 = v53;
          v51 = v47;
          if (v53 >= v49)
            goto LABEL_65;
        }
      }
      LODWORD(v50) = 0;
LABEL_65:
      v61 = v49 - v50;
      if (v49 != (_DWORD)v50)
      {
        if (v48)
        {
          if ((v47 & 1) != 0)
          {
            v88 = *((unsigned int *)this + 1167);
            if (v88 < v50 || v88 - (unint64_t)v50 < v61)
              goto LABEL_194;
            v62 = (unsigned __int16 *)(*((_QWORD *)this + 582) + 2 * v50);
            v63 = this;
            v64 = v50;
            v65 = (uint64_t)v115;
          }
          else
          {
            if (v118 < v50 || v118 - v50 < v61)
              goto LABEL_194;
            v62 = &v117[v50];
            v63 = this;
            v64 = v50;
            v65 = (uint64_t)v48;
          }
        }
        else
        {
          if (v118 < v50 || v118 - v50 < v61)
            goto LABEL_194;
          v62 = &v117[v50];
          v63 = this;
          v64 = v50;
          v65 = (uint64_t)v38;
        }
        WebCore::ComplexTextController::collectComplexTextRunsForCharacters((uint64_t)v63, v62, v61, v64, v65);
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 2) == 0
        || (LODWORD(v66) = *((_DWORD *)this + 1299), v66 < 2))
      {
LABEL_73:
        WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v121);
        goto LABEL_74;
      }
      v89 = 0;
      v90 = 0;
      v91 = 0;
      while (v91 < v66)
      {
        v92 = v66;
        v93 = v89 + (v66 - 1);
        if (v93 >= v92)
        {
          __break(0xC471u);
          JUMPOUT(0x19614E2A8);
        }
        std::swap[abi:sn180100]<WTF::RefPtr<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>>((uint64_t *)(*((_QWORD *)this + 648) + v90), (uint64_t *)(*((_QWORD *)this + 648) + 8 * v93));
        ++v91;
        v66 = *((unsigned int *)this + 1299);
        v90 += 8;
        --v89;
        if (v91 >= v66 >> 1)
          goto LABEL_73;
      }
LABEL_195:
      __break(0xC471u);
      JUMPOUT(0x19614E2A0);
    }
  }
LABEL_74:
  WebCore::ComplexTextController::finishConstruction(this, a2, v8, v11);
  return this;
}

void WebCore::ComplexTextController::finishConstruction(WebCore::ComplexTextController *this, uint64_t a2, __n128 Page, int32x4_t a4)
{
  int32x4_t *v5;
  uint64_t v6;
  uint64_t v7;
  CGFloat v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  CGFloat v13;
  unsigned int v14;
  unint64_t v15;
  WTF *v16;
  int v17;
  int y_low;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  CGFloat v22;
  int v23;
  unint64_t i;
  int v25;
  WTF *v26;
  int v27;
  int v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  float v33;
  uint64_t v34;
  _DWORD *v35;
  float32x2_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  int v42;
  int v43;
  int v44;
  unsigned __int16 *v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  int v50;
  BOOL v51;
  BOOL v52;
  float32x2_t v53;
  float32x2_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  WTF *v58;
  int v59;
  unint64_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v67;
  unint64_t v68;
  size_t y_high;
  void *p_size;
  unint64_t v71;
  unsigned int v72;
  CGFloat x;
  uint64_t v74;
  float v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _BOOL4 v81;
  int v82;
  _BOOL4 v83;
  UChar32 v84;
  int v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  float v91;
  int v92;
  int v93;
  _BOOL4 v94;
  float v95;
  uint64_t v96;
  float *v97;
  uint64_t v98;
  float *v99;
  float *v100;
  float v101;
  _BOOL4 v102;
  _BOOL4 v103;
  _BOOL4 v104;
  float v105;
  int v106;
  UChar32 v107;
  float32x2_t *v108;
  const __CTFont *v109;
  CTFontOrientation v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  float v117;
  WTF *v118;
  int v119;
  float v120;
  float v121;
  float v122;
  float v123;
  uint64_t v124;
  _OWORD *v125;
  void *v126;
  float v127;
  float v128;
  _BOOL4 v129;
  _BOOL4 v130;
  _BOOL4 v131;
  _BOOL4 v132;
  int v133;
  int v134;
  _BOOL4 v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF **v140;
  _BOOL4 v141;
  int32x4_t *v142;
  WebCore::Font *v143;
  uint64_t v144;
  float32x2_t v145;
  unsigned __int16 v146;
  CGGlyph glyphs;
  CGRect boundingRects;

  v5 = (int32x4_t *)((char *)this + 5588);
  v135 = (*(_BYTE *)(*((_QWORD *)this + 692) + 36) & 3) == 0;
  v6 = *((unsigned int *)this + 1299);
  v7 = *((_QWORD *)this + 691);
  *(_QWORD *)&v8 = v7 + 200;
  v9 = *(unsigned __int8 *)(v7 + 204);
  v142 = v5;
  switch(v9)
  {
    case 4:
      if (*(_BYTE *)(v7 + 206))
        Page.n128_u32[0] = **(_DWORD **)&v8;
      else
        Page.n128_f32[0] = (float)(int)**(_DWORD **)&v8;
      break;
    case 3:
      if (*(_BYTE *)(v7 + 206))
        v128 = **(float **)&v8;
      else
        v128 = (float)(int)**(_DWORD **)&v8;
      Page.n128_f32[0] = (float)(v128 / 100.0) * *(float *)(v7 + 172);
      break;
    case 11:
      v8 = COERCE_DOUBLE(WebCore::Length::nonNanCalculatedValue(*(WebCore::Length **)&v8, *(float *)(v7 + 172)));
      break;
    default:
      goto LABEL_6;
  }
  if (Page.n128_f32[0] != 0.0)
    goto LABEL_142;
  v7 = *((_QWORD *)this + 691);
LABEL_6:
  *(_QWORD *)&v8 = v7 + 208;
  v10 = *(unsigned __int8 *)(v7 + 212);
  switch(v10)
  {
    case 4:
      if (*(_BYTE *)(v7 + 214))
        Page.n128_u32[0] = **(_DWORD **)&v8;
      else
        Page.n128_f32[0] = (float)(int)**(_DWORD **)&v8;
      goto LABEL_9;
    case 3:
      if (*(_BYTE *)(v7 + 214))
        v127 = **(float **)&v8;
      else
        v127 = (float)(int)**(_DWORD **)&v8;
      Page.n128_f32[0] = (float)(v127 / 100.0) * *(float *)(v7 + 172);
LABEL_9:
      if (Page.n128_f32[0] == 0.0)
        break;
LABEL_142:
      v11 = *((_QWORD *)this + 692);
      v141 = (*(_BYTE *)(v11 + 37) & 0x10) == 0;
      goto LABEL_12;
    case 11:
      v8 = COERCE_DOUBLE(WebCore::Length::nonNanCalculatedValue(*(WebCore::Length **)&v8, *(float *)(v7 + 172)));
      goto LABEL_9;
  }
  if (*((float *)this + 1395) != 0.0)
    goto LABEL_142;
  v141 = 0;
  v11 = *((_QWORD *)this + 692);
LABEL_12:
  if (!(_DWORD)v6)
    goto LABEL_13;
  v29 = 0;
  v30 = *(_BYTE *)(v11 + 36);
  v133 = v30 & 0xC;
  v134 = v30 & 3;
  v136 = v6;
  do
  {
    if (v29 >= *((unsigned int *)this + 1299))
    {
      __break(0xC471u);
      JUMPOUT(0x19614F1F0);
    }
    v31 = *(_QWORD *)(*((_QWORD *)this + 648) + 8 * v29);
    v144 = *(unsigned int *)(v31 + 1788);
    a2 = *(_QWORD *)(v31 + 1760);
    if (!*(_BYTE *)(v31 + 1796))
      v5[1].i8[0] = 0;
    if (!(_DWORD)v144)
      goto LABEL_103;
    v137 = v29;
    v32 = 0;
    v33 = *(float *)(a2 + 336) + 0.0;
    v138 = *(_QWORD *)(v31 + 1064);
    v139 = *(_QWORD *)(v31 + 1768);
    LODWORD(v34) = *(unsigned __int8 *)(*((_QWORD *)this + 692) + 37) << 30 >> 31;
    v140 = (WTF **)(a2 + 208);
    v35 = (_DWORD *)(*(_QWORD *)(v31 + 8) + 4);
    v36 = 0;
    v37 = 1;
    v143 = (WebCore::Font *)a2;
    do
    {
      if (v32 >= *(unsigned int *)(v31 + 1492))
        goto LABEL_288;
      v38 = v34;
      v34 = *(unsigned int *)(*(_QWORD *)(v31 + 1480) + 4 * v32);
      v39 = *((_QWORD *)this + 692);
      v40 = *(_BYTE *)(v39 + 37);
      v41 = v34 >= v38;
      if (v34 > v38)
        v42 = 0;
      else
        v42 = v37;
      v43 = v41;
      v44 = v43 & v37;
      if ((*(_BYTE *)(v39 + 37) & 2) != 0)
        v37 = v42;
      else
        v37 = v44;
      v45 = (unsigned __int16 *)(v139 + 2 * v34);
      v46 = *v45;
      v47 = v46 > 0x20 || ((1 << v46) & 0x100000600) == 0;
      if (!v47 || v46 == 160)
      {
        v146 = 0;
        v146 = *(_WORD *)(v138 + 2 * v32);
        v145 = (float32x2_t)__PAIR64__(*v35, LODWORD(v33));
        if (v46 == 9)
        {
          if ((v40 & 1) != 0)
          {
            v48 = 1;
            Page.n128_f32[0] = WebCore::FontCascade::tabWidth(*((_QWORD *)this + 691), a2, v39 + 16, 1, *(float *)(v39 + 24) + *((float *)this + 1388));
            a2 = (uint64_t)v143;
            v51 = 0;
            v145.i32[0] = Page.n128_u32[0];
            v146 = -1;
          }
          else
          {
            v51 = 0;
            v48 = 1;
          }
          goto LABEL_72;
        }
        v48 = 1;
      }
      else
      {
        v48 = 0;
        v146 = 0;
        v146 = *(_WORD *)(v138 + 2 * v32);
        v145 = *(float32x2_t *)(v35 - 1);
      }
      *(_QWORD *)&v8 = 1;
      if (v46 >= 0x20 && v46 - 127 >= 0x21 && v46 != 173 && v46 != 8203)
      {
        if (v46 >= 0x200E)
        {
          if (v46 >> 4 < 0x201)
            goto LABEL_64;
          if (v46 >= 0x202A)
          {
            if (v46 < 0x202F || v46 == 65279)
              goto LABEL_64;
            if (v46 == 65532)
            {
              *(_QWORD *)&v8 = WebCore::CocoaApplication::isIBooks((WebCore::CocoaApplication *)1);
              a2 = (uint64_t)v143;
              goto LABEL_64;
            }
          }
        }
        v8 = 0.0;
      }
LABEL_64:
      v50 = LODWORD(v8) ^ 1;
      if ((v46 & 0xFFFE) == 0x200C)
        v50 = 0;
      if (((v48 | v50) & 1) == 0)
      {
        v145.i32[0] = 0;
        v146 = *(_WORD *)(a2 + 332);
      }
      v51 = v46 != 9;
      v52 = v46 > 0xD || ((1 << v46) & 0x2601) == 0;
      if (v52 && v46 != 160)
      {
        *(_QWORD *)&v8 = u_charType(v46);
        if (LODWORD(v8) == 15)
        {
          v146 = 0;
          v105 = WebCore::GlyphMetricsMap<float>::metricsForGlyph((uint64_t)v143 + 128, 0);
          if (v105 == -1.0)
          {
            v105 = WebCore::Font::platformWidthForGlyph(v143, 0);
            Page = WebCore::GlyphMetricsMap<float>::locatePage((uint64_t)v143 + 128, 0);
            **(float **)&v8 = v105;
          }
          a2 = (uint64_t)v143;
          v145.f32[0] = v105 + *((float *)v143 + 85);
        }
        else
        {
          a2 = (uint64_t)v143;
        }
      }
LABEL_72:
      v53 = v145;
      if (!v32)
      {
        a4.i64[0] = *(_QWORD *)(v31 + 1752);
        v53 = vadd_f32(v145, *(float32x2_t *)a4.i8);
        if (*(_DWORD *)(v31 + 548) == *(_DWORD *)(v31 + 1788))
        {
          v108 = *(float32x2_t **)(v31 + 536);
          if (v108)
          {
            *(float32x2_t *)a4.i8 = *v108;
            v53 = vsub_f32(v53, *v108);
          }
          a2 = (uint64_t)v143;
        }
      }
      a4.i32[0] = *(_DWORD *)(a2 + 340);
      v54 = vadd_f32(v53, *(float32x2_t *)a4.i8);
      v145 = v54;
      if (!v141)
        goto LABEL_74;
      if (v54.f32[0] != 0.0)
      {
        v76 = WebCore::FontCascade::letterSpacing(*((WebCore::FontCascade **)this + 691));
        v145 = vadd_f32((float32x2_t)LODWORD(v76), v145);
      }
      v77 = *(_DWORD *)(v31 + 1792);
      v78 = *((_QWORD *)this + 692);
      v79 = *(_QWORD *)(v78 + 8);
      if (v79)
        v80 = *(_DWORD *)(v79 + 4);
      else
        v80 = 0;
      if (v77 + (_DWORD)v34 + 1 == v80)
      {
        v81 = 1;
      }
      else if ((v46 & 0xFC00) == 0xD800)
      {
        if (v79)
          LODWORD(v79) = *(_DWORD *)(v79 + 4);
        v81 = v77 + (_DWORD)v34 + 2 == (_DWORD)v79 && (v45[1] & 0xFC00) == 56320;
      }
      else
      {
        v81 = 0;
      }
      v82 = -v77;
      if (v134 == 2)
      {
        v83 = v34 == v82;
        if ((*(_BYTE *)(v78 + 37) & 2) != 0)
          v83 = v81;
        v131 = v83;
      }
      else
      {
        v131 = 0;
      }
      if (v133 == 8)
      {
        v90 = v34 == v82;
        if ((*(_BYTE *)(v78 + 37) & 2) == 0)
          v90 = v81;
        v132 = v90;
      }
      else
      {
        v132 = 0;
      }
      if (v134)
      {
        v129 = 0;
      }
      else
      {
        v102 = v34 == v82;
        if ((*(_BYTE *)(v78 + 37) & 2) != 0)
          v102 = v81;
        v129 = v102;
      }
      if (v133)
      {
        v130 = 0;
      }
      else
      {
        v103 = v34 == v82;
        if ((*(_BYTE *)(v78 + 37) & 2) != 0)
          v104 = v103;
        else
          v104 = v81;
        v130 = v104;
      }
      v8 = COERCE_DOUBLE(WebCore::ScrollbarsController::scrollbarsCanBeActive(*(WebCore::ScrollbarsController **)&v8));
      if (LODWORD(v8))
        *(_QWORD *)&v8 = WebCore::FontCascade::isCJKIdeographOrSymbol(v46);
      a2 = (uint64_t)v143;
      if ((v48 | v132 | LODWORD(v8) | v131) != 1)
      {
        v135 = 0;
LABEL_74:
        v5 = v142;
        goto LABEL_75;
      }
      v91 = *((float *)this + 1395);
      if (v91 == 0.0)
      {
        v135 = 0;
      }
      else
      {
        if ((*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 2) != 0)
          v92 = 1;
        else
          v92 = LODWORD(v8);
        if ((*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 2) != 0)
          v93 = 0;
        else
          v93 = v48;
        if (!v48)
          v92 = LODWORD(v8);
        v94 = v92 == 0;
        if (v131 || !v135 && !v129 && !v94)
        {
          v95 = *((float *)this + 1396);
          v91 = v91 - v95;
          *((float *)this + 1395) = v91;
          v96 = *((unsigned int *)this + 3);
          if ((_DWORD)v96)
          {
            v97 = (float *)((char *)this + 5556);
            v98 = *(_QWORD *)this + 8 * v96;
            *(float *)(v98 - 8) = v95 + *(float *)(v98 - 8);
            v99 = (float *)(v98 - 4);
            v100 = (float *)((char *)this + 5552);
          }
          else
          {
            v97 = (float *)(v31 + 1756);
            v145.f32[0] = v95 + v145.f32[0];
            v99 = (float *)&v145 + 1;
            v100 = (float *)(v31 + 1752);
          }
          *v99 = *v99 + 0.0;
          *v100 = v95 + *v100;
          *v97 = *v97 + 0.0;
        }
        if (v132 | (LODWORD(v8) | v93) & !v130)
        {
          v101 = *((float *)this + 1396);
          *((float *)this + 1395) = v91 - v101;
          v145 = vadd_f32(v145, (float32x2_t)LODWORD(v101));
          v135 = 1;
        }
      }
      if (v48
        && (v51 || (*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 1) == 0)
        && (v137 || (_DWORD)v34 || v46 == 160)
        && WebCore::FontCascade::wordSpacing(*((WebCore::FontCascade **)this + 691)) != 0.0)
      {
        Page.n128_f32[0] = WebCore::FontCascade::wordSpacing(*((WebCore::FontCascade **)this + 691));
        v145 = vadd_f32((float32x2_t)Page.n128_u32[0], v145);
      }
      v5 = v142;
      a2 = (uint64_t)v143;
LABEL_75:
      *((float32x2_t *)this + 694) = vadd_f32(*(float32x2_t *)((char *)this + 5552), v145);
      if (!v5[1].i8[2])
        goto LABEL_76;
      v84 = v46;
      if ((v46 & 0xF800) == 0xD800)
      {
        v84 = *v45;
        if ((v84 & 0xF800) == 0xD800)
        {
          if ((v84 & 0x400) != 0)
          {
            if ((_DWORD)v34)
            {
              v106 = *(unsigned __int16 *)(v139 + 2 * (v34 - 1));
              v86 = (v106 & 0xFC00) == 55296;
              v87 = v84 + (v106 << 10);
LABEL_237:
              v107 = v87 - 56613888;
              if (v86)
                v84 = v107;
            }
          }
          else if ((_DWORD)v34 + 1 != *(_DWORD *)(v31 + 1776))
          {
            v85 = *(unsigned __int16 *)(v139 + 2 * (v34 + 1));
            v86 = (v85 & 0xFC00) == 56320;
            v87 = v85 + (v84 << 10);
            goto LABEL_237;
          }
        }
      }
      v8 = COERCE_DOUBLE(WebCore::FontCascade::canReceiveTextEmphasis(v84));
      a2 = (uint64_t)v143;
      if (!LODWORD(v8) || (*(_QWORD *)&v8 = u_charType(v46), a2 = (uint64_t)v143, ((1 << SLOBYTE(v8)) & 0x1C0) != 0))
        v146 = -1;
LABEL_76:
      v55 = *((unsigned int *)this + 3);
      if ((_DWORD)v55 == *((_DWORD *)this + 2))
      {
        v8 = COERCE_DOUBLE(WTF::Vector<WebCore::FloatSize,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatSize&>((uint64_t)this, (unint64_t)&v145));
        a2 = (uint64_t)v143;
      }
      else
      {
        *(float32x2_t *)(*(_QWORD *)this + 8 * v55) = v145;
        ++*((_DWORD *)this + 3);
      }
      if (*(_DWORD *)(v31 + 548) == *(_DWORD *)(v31 + 1788))
      {
        v88 = *(_QWORD *)(v31 + 536);
        if (v88)
        {
          WTF::Vector<WebCore::FloatPoint,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)this + 2064, *((unsigned int *)this + 3));
          v89 = *((unsigned int *)this + 519);
          if (!(_DWORD)v89)
          {
            __break(0xC471u);
            JUMPOUT(0x19614F1E8);
          }
          *(_QWORD *)(*((_QWORD *)this + 258) + 8 * v89 - 8) = *(_QWORD *)(v88 + 8 * v32);
          a2 = (uint64_t)v143;
        }
      }
      v56 = *((unsigned int *)this + 1035);
      if ((_DWORD)v56 == *((_DWORD *)this + 1034))
      {
        v8 = COERCE_DOUBLE(WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)this + 4128, (unint64_t)&v146));
        a2 = (uint64_t)v143;
      }
      else
      {
        *(_WORD *)(*((_QWORD *)this + 516) + 2 * v56) = v146;
        *((_DWORD *)this + 1035) = v56 + 1;
      }
      v57 = v146;
      if (*(unsigned __int16 *)(a2 + 334) != v146)
      {
        v58 = *v140;
        if (!*v140)
          goto LABEL_250;
        if (v146 < 0x10u)
        {
LABEL_97:
          if (*(_BYTE *)v58)
          {
            *(_QWORD *)&v8 = (char *)v58 + 4;
LABEL_86:
            v60 = (unint64_t *)(*(_QWORD *)&v8 + 16 * (v57 & 0xF));
            Page.n128_u64[0] = v60[1];
            if (Page.n128_f32[0] != -1.0)
            {
              a4.i64[0] = *v60;
              goto LABEL_88;
            }
            goto LABEL_250;
          }
          v59 = 0;
        }
        else
        {
          v59 = v146 >> 4;
        }
        v8 = COERCE_DOUBLE(WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v58, v59));
        a2 = (uint64_t)v143;
        goto LABEL_86;
      }
      Page.n128_u64[0] = 0;
      a4.i64[0] = 0;
      if (v146)
        goto LABEL_88;
      v58 = *v140;
      if (*v140)
        goto LABEL_97;
LABEL_250:
      glyphs = v57;
      memset(&boundingRects, 0, sizeof(boundingRects));
      v109 = *(const __CTFont **)(a2 + 88);
      if (*(_BYTE *)(a2 + 100))
        v110 = kCTFontOrientationVertical;
      else
        v110 = kCTFontOrientationHorizontal;
      *(CGRect *)Page.n128_u64 = CTFontGetBoundingRectsForGlyphs(v109, v110, &glyphs, &boundingRects, 1);
      a2 = (uint64_t)v143;
      v111 = Page.n128_f64[0];
      v112 = *(double *)a4.i64;
      v114 = v113;
      v116 = v115;
      v117 = *((float *)v143 + 85);
      v118 = (WTF *)*((_QWORD *)v143 + 26);
      if (!v118)
      {
        v125 = (_OWORD *)WTF::fastMalloc((WTF *)0x110);
        *v125 = 0u;
        v125[1] = 0u;
        v125[2] = 0u;
        v125[3] = 0u;
        v125[4] = 0u;
        v125[5] = 0u;
        v125[6] = 0u;
        v125[7] = 0u;
        v125[8] = 0u;
        v125[9] = 0u;
        v125[10] = 0u;
        v125[11] = 0u;
        v125[12] = 0u;
        v125[13] = 0u;
        v125[14] = 0u;
        v125[15] = 0u;
        v125[16] = 0u;
        *(_QWORD *)&boundingRects.origin.x = v125;
        std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::operator=[abi:sn180100](v140, (WTF **)&boundingRects);
        std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::~unique_ptr[abi:sn180100]((WTF **)&boundingRects, v126);
        a2 = (uint64_t)v143;
        v118 = *v140;
      }
      if (v57 < 0x10)
      {
        if (*(_BYTE *)v118)
        {
          *(_QWORD *)&v8 = (char *)v118 + 4;
          goto LABEL_258;
        }
        v119 = 0;
      }
      else
      {
        v119 = v57 >> 4;
      }
      v8 = COERCE_DOUBLE(WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v118, v119));
      a2 = (uint64_t)v143;
LABEL_258:
      *(float *)a4.i32 = v111;
      v120 = v112;
      v121 = v114;
      v122 = v116;
      v123 = -(float)(v120 + v122);
      Page.n128_f32[0] = v117 + v121;
      v124 = *(_QWORD *)&v8 + 16 * (v57 & 0xF);
      *(_DWORD *)v124 = a4.i32[0];
      *(float *)(v124 + 4) = v123;
      *(float *)(v124 + 8) = v117 + v121;
      *(float *)(v124 + 12) = v122;
      Page.n128_f32[1] = v122;
      *(float *)&a4.i32[1] = v123;
LABEL_88:
      *(float32x2_t *)a4.i8 = vadd_f32(v36, *(float32x2_t *)a4.i8);
      v61 = (float32x4_t)vtrn2q_s32(vzip1q_s32(*v5, a4), *v5);
      Page.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)Page.n128_u64[0], *(float32x2_t *)a4.i8);
      v62 = (float32x4_t)vtrn1q_s32(*v5, vzip1q_s32((int32x4_t)Page, (int32x4_t)Page));
      a4 = vcgtq_f32(v62, v61);
      Page = (__n128)vbslq_s8((int8x16_t)a4, (int8x16_t)vtrn2q_s32(vrev64q_s32((int32x4_t)v61), (int32x4_t)v62), *(int8x16_t *)v5);
      *v5 = (int32x4_t)Page;
      v36 = vadd_f32(v36, v145);
      ++v32;
      v35 += 2;
    }
    while (v144 != v32);
    if ((v37 & 1) != 0)
    {
      v6 = v136;
      v29 = v137;
    }
    else
    {
      *(_BYTE *)(v31 + 1797) = 0;
      y_high = *(unsigned int *)(v31 + 1776);
      *(_QWORD *)&boundingRects.origin.x = &boundingRects.size;
      LODWORD(boundingRects.origin.y) = 64;
      HIDWORD(boundingRects.origin.y) = y_high;
      if (y_high >= 0x41)
      {
        p_size = (void *)WTF::fastMalloc((WTF *)y_high);
        LODWORD(boundingRects.origin.y) = y_high;
        *(_QWORD *)&boundingRects.origin.x = p_size;
        y_high = HIDWORD(boundingRects.origin.y);
      }
      else
      {
        p_size = &boundingRects.size;
      }
      bzero(p_size, y_high);
      v71 = *(unsigned int *)(v31 + 1788);
      v29 = v137;
      if ((_DWORD)v71)
      {
        v64 = 0;
        v72 = HIDWORD(boundingRects.origin.y);
        x = boundingRects.origin.x;
        v74 = 4 * *(unsigned int *)(v31 + 1492);
        do
        {
          if (v74 == v64)
          {
            __break(0xC471u);
            JUMPOUT(0x19614F1F8);
          }
          v63 = *(unsigned int *)(*(_QWORD *)(v31 + 1480) + v64);
          if (v72 <= v63)
          {
            __break(0xC471u);
            JUMPOUT(0x19614F200);
          }
          *(_BYTE *)(*(_QWORD *)&x + v63) = 1;
          v64 += 4;
        }
        while (4 * v71 != v64);
      }
      v65 = v71;
      if (*(_DWORD *)(v31 + 1216) < v71)
      {
        WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)(v31 + 1208), v71);
        v65 = *(_DWORD *)(v31 + 1788);
      }
      *(_DWORD *)(v31 + 1220) = v71;
      if (v65)
      {
        v68 = 0;
        do
        {
          if (v68 >= *(unsigned int *)(v31 + 1492))
          {
            __break(0xC471u);
            JUMPOUT(0x19614F208);
          }
          v67 = *(_DWORD *)(*(_QWORD *)(v31 + 1480) + 4 * v68);
          while (++v67 < *(_DWORD *)(v31 + 1776))
          {
            if (HIDWORD(boundingRects.origin.y) <= v67)
            {
              __break(0xC471u);
              JUMPOUT(0x19614F210);
            }
            if (*(_BYTE *)(*(_QWORD *)&boundingRects.origin.x + v67))
              goto LABEL_122;
          }
          v67 = *(_DWORD *)(v31 + 1784);
LABEL_122:
          if (v68 >= *(unsigned int *)(v31 + 1220))
          {
            __break(0xC471u);
            JUMPOUT(0x19614F218);
          }
          *(_DWORD *)(*(_QWORD *)(v31 + 1208) + 4 * v68++) = v67;
        }
        while (v68 < *(unsigned int *)(v31 + 1788));
      }
      v8 = boundingRects.origin.x;
      if (&boundingRects.size != (CGSize *)*(CGRect **)&boundingRects.origin.x
        && *(_QWORD *)&boundingRects.origin.x != 0)
      {
        boundingRects.origin.x = 0.0;
        LODWORD(boundingRects.origin.y) = 0;
        v8 = COERCE_DOUBLE(WTF::fastFree(*(WTF **)&v8, (void *)a2));
      }
      v6 = v136;
    }
LABEL_103:
    ++v29;
  }
  while (v29 != v6);
LABEL_13:
  if (!v5[1].i8[0])
  {
    v12 = *((unsigned int *)this + 1299);
    *(_QWORD *)&boundingRects.origin.x = &boundingRects.size;
    *(_QWORD *)&boundingRects.origin.y = 16;
    if (v12 >= 0x11)
    {
      if (v12 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x19614F220);
      }
      v13 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)(4 * v12)));
      LODWORD(boundingRects.origin.y) = v12;
      boundingRects.origin.x = v13;
      v14 = HIDWORD(boundingRects.origin.y);
LABEL_17:
      v15 = v12;
      do
      {
        *(_DWORD *)(*(_QWORD *)&v13 + 4 * v14) = --v15;
        v14 = ++HIDWORD(boundingRects.origin.y);
      }
      while (v15);
    }
    else
    {
      v13 = COERCE_DOUBLE((CGRect *)&boundingRects.size);
      if ((_DWORD)v12)
      {
        v14 = 0;
        v13 = COERCE_DOUBLE((CGRect *)&boundingRects.size);
        goto LABEL_17;
      }
    }
    v16 = (WTF *)*((_QWORD *)this + 666);
    if (v16 != (WebCore::ComplexTextController *)((char *)this + 5344))
    {
      if (v16)
      {
        *((_QWORD *)this + 666) = 0;
        *((_DWORD *)this + 1334) = 0;
        WTF::fastFree(v16, (void *)a2);
        v13 = boundingRects.origin.x;
      }
      *((_QWORD *)this + 666) = (char *)this + 5344;
      v16 = (WebCore::ComplexTextController *)((char *)this + 5344);
    }
    if (*(CGRect **)&v13 == (CGRect *)&boundingRects.size)
    {
      v17 = HIDWORD(boundingRects.origin.y);
      memcpy((char *)this + 5344, &boundingRects.size, 4 * HIDWORD(boundingRects.origin.y));
      y_low = LODWORD(boundingRects.origin.y);
    }
    else
    {
      *((CGFloat *)this + 666) = v13;
      v16 = *(WTF **)&v13;
      y_low = LODWORD(boundingRects.origin.y);
      v17 = HIDWORD(boundingRects.origin.y);
    }
    *((_DWORD *)this + 1334) = y_low;
    *((_DWORD *)this + 1335) = v17;
    *(_QWORD *)&boundingRects.origin.x = this;
    v19 = 126 - 2 * __clz(v12);
    if ((_DWORD)v12)
      v20 = v19;
    else
      v20 = 0;
    std::__introsort<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *,false>((uint64_t)v16, (unsigned int *)v16 + v12, (uint64_t *)&boundingRects, v20, 1);
    *(_QWORD *)&boundingRects.origin.x = &boundingRects.size;
    *(_QWORD *)&boundingRects.origin.y = 16;
    if (v12 >= 0x11)
    {
      if (v12 >> 30)
      {
LABEL_288:
        __break(0xC471u);
        JUMPOUT(0x19614F1D8);
      }
      v22 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)(4 * v12)));
      LODWORD(boundingRects.origin.y) = v12;
      boundingRects.origin.x = v22;
LABEL_27:
      v23 = 0;
      for (i = 0; i != v12; ++i)
      {
        if (i >= *((unsigned int *)this + 1299))
        {
          __break(0xC471u);
          JUMPOUT(0x19614F1E0);
        }
        v25 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 648) + 8 * i) + 1788);
        *(_DWORD *)(*(_QWORD *)&v22 + 4 * HIDWORD(boundingRects.origin.y)) = v23;
        v23 += v25;
        ++HIDWORD(boundingRects.origin.y);
      }
    }
    else
    {
      v22 = COERCE_DOUBLE((CGRect *)&boundingRects.size);
      if ((_DWORD)v12)
        goto LABEL_27;
    }
    v26 = (WTF *)*((_QWORD *)this + 676);
    if (v26 != (WebCore::ComplexTextController *)((char *)this + 5424))
    {
      if (v26)
      {
        *((_QWORD *)this + 676) = 0;
        *((_DWORD *)this + 1354) = 0;
        WTF::fastFree(v26, v21);
        v22 = boundingRects.origin.x;
      }
      *((_QWORD *)this + 676) = (char *)this + 5424;
    }
    if (*(CGRect **)&v22 == (CGRect *)&boundingRects.size)
    {
      v27 = HIDWORD(boundingRects.origin.y);
      memcpy((char *)this + 5424, &boundingRects.size, 4 * HIDWORD(boundingRects.origin.y));
      v28 = LODWORD(boundingRects.origin.y);
    }
    else
    {
      *((CGFloat *)this + 676) = v22;
      v28 = LODWORD(boundingRects.origin.y);
      v27 = HIDWORD(boundingRects.origin.y);
    }
    *((_DWORD *)this + 1354) = v28;
    *((_DWORD *)this + 1355) = v27;
  }
}

WebCore::ComplexTextController *WebCore::ComplexTextController::ComplexTextController(WebCore::ComplexTextController *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  uint64_t v7;
  WebCore::ComplexTextController *result;
  void *v9;
  __n128 v10;
  int32x4_t v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;

  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 256;
  *((_QWORD *)this + 258) = (char *)this + 2080;
  *((_QWORD *)this + 259) = 256;
  *((_QWORD *)this + 516) = (char *)this + 4144;
  *((_QWORD *)this + 517) = 256;
  *((_QWORD *)this + 582) = (char *)this + 4672;
  *((_QWORD *)this + 583) = 256;
  v6 = (char *)this + 5200;
  *((_QWORD *)this + 648) = (char *)this + 5200;
  *((_QWORD *)this + 649) = 16;
  *((_QWORD *)this + 666) = (char *)this + 5344;
  *((_QWORD *)this + 667) = 16;
  *((_QWORD *)this + 676) = (char *)this + 5424;
  *((_QWORD *)this + 677) = 16;
  *((_OWORD *)this + 343) = 0u;
  *((_OWORD *)this + 344) = 0u;
  *((_QWORD *)this + 690) = 0;
  *((_QWORD *)this + 691) = a2;
  *((_QWORD *)this + 692) = a3;
  *((_DWORD *)this + 1386) = 0;
  v7 = *(_QWORD *)(a3 + 8);
  if (v7)
    LODWORD(v7) = *(_DWORD *)(v7 + 4);
  *((_DWORD *)this + 1387) = v7;
  *((_QWORD *)this + 694) = 0;
  *((_QWORD *)this + 696) = 0;
  *((_QWORD *)this + 695) = 0;
  *((_DWORD *)this + 1394) = 0;
  *((_DWORD *)this + 1395) = *(_DWORD *)(a3 + 32);
  *((_OWORD *)this + 349) = xmmword_1969F7750;
  *((_DWORD *)this + 1400) = 0x800000;
  *((_WORD *)this + 2802) = 1;
  *((_BYTE *)this + 5606) = 0;
  result = (WebCore::ComplexTextController *)WebCore::ComplexTextController::computeExpansionOpportunity((uint64_t)this);
  v12 = *(unsigned int *)(a4 + 12);
  if (!(_DWORD)v12)
  {
LABEL_28:
    WebCore::ComplexTextController::finishConstruction(this, (uint64_t)v9, v10, v11);
    return this;
  }
  v13 = *(_DWORD ***)a4;
  LODWORD(v14) = *((_DWORD *)this + 1299);
  v15 = 8 * v12;
  while (1)
  {
    v16 = *v13;
    v17 = v14;
    if ((_DWORD)v14 != *((_DWORD *)this + 1298))
    {
      v24 = (_QWORD *)(*((_QWORD *)this + 648) + 8 * v14);
      if (v16)
        ++*v16;
      goto LABEL_22;
    }
    v18 = v14 + 1;
    v19 = v17 + (v17 >> 2);
    v20 = v19 >= 0x10 ? v19 + 1 : 16;
    v21 = v20 <= v18 ? v17 + 1 : v20;
    v22 = (char *)*((_QWORD *)this + 648);
    if (v21 >= 0x11)
      break;
    *((_QWORD *)this + 648) = v6;
    *((_DWORD *)this + 1298) = 16;
    v23 = v6;
LABEL_18:
    result = (WebCore::ComplexTextController *)memcpy(v23, v22, 8 * v17);
    if (v6 != v22 && v22)
    {
      if (*((char **)this + 648) == v22)
      {
        *((_QWORD *)this + 648) = 0;
        *((_DWORD *)this + 1298) = 0;
      }
      result = (WebCore::ComplexTextController *)WTF::fastFree((WTF *)v22, v9);
    }
    v14 = *((unsigned int *)this + 1299);
    v25 = *((_QWORD *)this + 648);
    if (v16)
      ++*v16;
    v24 = (_QWORD *)(v25 + 8 * v14);
LABEL_22:
    *v24 = v16;
    LODWORD(v14) = v14 + 1;
    *((_DWORD *)this + 1299) = v14;
    ++v13;
    v15 -= 8;
    if (!v15)
      goto LABEL_28;
  }
  if (!(v21 >> 29))
  {
    v23 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
    *((_DWORD *)this + 1298) = v21;
    *((_QWORD *)this + 648) = v23;
    goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ComplexTextController::offsetForPosition(WebCore::ComplexTextController *this, float a2, char a3)
{
  float v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  _QWORD *v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  float v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v52;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int **v59;
  char v60[8];
  _BYTE v61[40];
  int v62;
  char v63;
  uint64_t v64;

  v3 = a2;
  v64 = *MEMORY[0x1E0C80C00];
  if (*((float *)this + 1388) <= a2)
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 2) == 0)
      return *((unsigned int *)this + 1387);
    return 0;
  }
  if (a2 < 0.0)
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 2) == 0)
      return 0;
    return *((unsigned int *)this + 1387);
  }
  v6 = *((unsigned int *)this + 1299);
  if (!(_DWORD)v6)
    return 0;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 648) + 8 * v9);
    v11 = *(unsigned int *)(v10 + 1788);
    if ((_DWORD)v11)
      break;
LABEL_21:
    v5 = 0;
    v8 += v11;
    if (++v9 == v6)
      return v5;
  }
  v12 = 0;
  v13 = *((_DWORD *)this + 3);
  v44 = v13 >= v8;
  v14 = v13 - v8;
  if (v44)
    v15 = v14;
  else
    v15 = 0;
  v16 = 8 * v8;
  v17 = -4;
  while (1)
  {
    if (v15 == v12)
      goto LABEL_95;
    v18 = *(float *)(*(_QWORD *)this + v16);
    if ((*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 2) != 0)
      break;
    if (v3 < v18)
    {
      v19 = *(_DWORD *)(v10 + 1492);
      if (v19 > v12)
      {
        v20 = (_QWORD *)(v10 + 1480);
        v21 = *(_QWORD *)(v10 + 1480);
        v22 = *(_DWORD *)(v21 + 4 * v12);
        if ((int)v12 + 1 >= v11)
        {
          v23 = (unsigned int *)(v10 + 1784);
        }
        else
        {
          if (v19 <= (int)v12 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19614F980);
          }
          v23 = (unsigned int *)(v21 - v17);
        }
        v24 = (unsigned int *)(v10 + 1788);
        v56 = (unsigned int *)(v10 + 1492);
        v32 = *v23;
        if (v22 > v32)
          v32 = *(_DWORD *)(v21 + 4 * v12);
        v55 = v32;
        v31 = (float)((float)v22 + (float)((float)(v32 - v22) * (float)(v3 / v18)));
        goto LABEL_43;
      }
LABEL_100:
      __break(0xC471u);
      JUMPOUT(0x19614F978);
    }
LABEL_20:
    v3 = v3 - v18;
    ++v12;
    v17 -= 4;
    v16 += 8;
    if (v11 == v12)
      goto LABEL_21;
  }
  if (v3 > v18 || v18 == 0.0)
    goto LABEL_20;
  if (*(_DWORD *)(v10 + 1492) <= v12)
    goto LABEL_100;
  v24 = (unsigned int *)(v10 + 1788);
  v20 = (_QWORD *)(v10 + 1480);
  v25 = *(_QWORD *)(v10 + 1480);
  v22 = *(_DWORD *)(v25 + 4 * v12);
  v26 = (unsigned int *)(v25 + 4 * (v12 - 1));
  if (!(_DWORD)v12)
    v26 = (unsigned int *)(v10 + 1784);
  v27 = *v26;
  if (v22 <= v27)
    v28 = v27;
  else
    v28 = v22;
  v56 = (unsigned int *)(v10 + 1492);
  v55 = v28;
  if (v22 >= v27)
  {
    v31 = v22;
  }
  else
  {
    v29 = v28 - 1;
    v30 = (float)((float)v28 - (float)((float)(v28 - v22) * (float)(v3 / v18)));
    if (v3 == 0.0)
      v31 = v29;
    else
      v31 = v30;
  }
LABEL_43:
  v33 = *(_DWORD *)(v10 + 1776);
  WTF::CachedTextBreakIterator::CachedTextBreakIterator((uint64_t)v60, *(WTF::StringImpl **)(v10 + 1768), v33, 0, 0, 0x100000000, MEMORY[0x1E0CBF2F8], 1);
  if (!v63)
    goto LABEL_96;
  v54 = v24;
  v57 = v31;
  v58 = &v57;
  if (v62 == -1)
    goto LABEL_94;
  v59 = &v58;
  v34 = v31;
  if ((((uint64_t (*)(unsigned int ***, _BYTE *))off_1E340B2B8[v62])(&v59, v61) & 1) != 0)
    goto LABEL_51;
  if (!v63)
    goto LABEL_96;
  v57 = v31;
  v58 = &v57;
  if (v62 == -1)
    goto LABEL_94;
  v59 = &v58;
  v35 = ((uint64_t (*)(unsigned int ***, _BYTE *))off_1E340B2D8[v62])(&v59, v61);
  if ((v35 & 0xFF00000000) != 0)
    v34 = v35;
  else
    v34 = 0;
LABEL_51:
  if ((a3 & 1) == 0)
  {
    v5 = *(_DWORD *)(v10 + 1792) + v34;
    goto LABEL_92;
  }
  if (!v63)
    goto LABEL_96;
  v57 = v31;
  v58 = &v57;
  if (v62 == -1)
  {
LABEL_94:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_95:
    __break(0xC471u);
LABEL_96:
    __break(1u);
    goto LABEL_102;
  }
  v59 = &v58;
  v36 = ((uint64_t (*)(unsigned int ***, _BYTE *))off_1E340B2F8[v62])(&v59, v61);
  if ((v36 & 0xFF00000000) != 0)
    v37 = v36;
  else
    v37 = v33;
  if (v37 - v34 < 2)
  {
    v18 = v18 / (float)(v55 - v22);
    if ((*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 2) != 0)
      v46 = v55 + ~v31;
    else
      v46 = v31 - v22;
    v3 = v3 - (float)(v18 * (float)v46);
    goto LABEL_84;
  }
  if (!(_DWORD)v12)
  {
    v39 = v20;
    v38 = v56;
    goto LABEL_75;
  }
  v38 = v56;
  v39 = v20;
  if ((int)v12 - 1 >= *v56)
  {
LABEL_102:
    __break(0xC471u);
    JUMPOUT(0x19614F960);
  }
  v40 = v12;
  v41 = -(int)v12;
  v42 = v8 - 1;
  do
  {
    v43 = *(_DWORD *)(*v20 + 4 * (v40 - 1));
    v44 = v43 < v34 || v43 >= v37;
    if (v44)
      break;
    if (*((_DWORD *)this + 3) <= v42 + v40)
      goto LABEL_102;
    v45 = *(float *)(*(_QWORD *)this + 8 * (v42 + v40));
    v18 = v18 + v45;
    v3 = v3 + v45;
    --v40;
    v44 = __CFADD__(v41++, 1);
  }
  while (!v44);
LABEL_75:
  v47 = *v54;
  if ((int)v12 + 1 < v47)
  {
    v48 = v12 + 1;
    v49 = 8 * (v12 + v8 + 1);
    do
    {
      if (v48 >= *v38)
      {
        __break(0xC471u);
        JUMPOUT(0x19614F968);
      }
      v50 = *(_DWORD *)(*v39 + 4 * v48);
      if (v50 < v34 || v50 >= v37)
        break;
      if (*((_DWORD *)this + 3) <= v8 + v48)
      {
        __break(0xC471u);
        JUMPOUT(0x19614F970);
      }
      v18 = v18 + *(float *)(*(_QWORD *)this + v49);
      ++v48;
      v49 += 8;
    }
    while (v47 != v48);
  }
LABEL_84:
  if ((*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 2) != 0)
    v52 = v34;
  else
    v52 = v37;
  if ((*(_BYTE *)(*((_QWORD *)this + 692) + 37) & 2) == 0)
    v37 = v34;
  if (v3 > (float)(v18 * 0.5))
    v37 = v52;
  v5 = v37 + *(_DWORD *)(v10 + 1792);
LABEL_92:
  WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v60);
  return v5;
}

uint64_t WebCore::ComplexTextController::advanceByCombiningCharacterSequence(uint64_t result, int a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int *v19;
  int **v20;

  if (!result || (v6 = *a4, v7 = *(_DWORD *)(result + 4), v7 <= v6))
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  v8 = a2 - v6;
  v9 = *(_DWORD *)(result + 16);
  v10 = *(_QWORD *)(result + 8);
  if ((v9 & 4) != 0)
    v11 = *(unsigned __int8 *)(v10 + v6);
  else
    v11 = *(unsigned __int16 *)(v10 + 2 * v6);
  if (v8 <= 1)
  {
    v14 = 1;
  }
  else
  {
    v12 = v6 + 1;
    if (v7 <= (int)v6 + 1)
    {
LABEL_27:
      __break(0xC471u);
LABEL_28:
      __break(1u);
LABEL_29:
      JUMPOUT(0x19614FAA8);
    }
    if ((v9 & 4) != 0)
      v13 = *(unsigned __int8 *)(v10 + v12);
    else
      v13 = *(unsigned __int16 *)(v10 + 2 * v12);
    *a5 = v11;
    if ((v11 & 0xFC00) != 0xD800 || (v13 & 0xFC00) != 0xDC00)
    {
      v14 = 1;
      goto LABEL_11;
    }
    v11 = v13 + (v11 << 10) - 56613888;
    v14 = 2;
  }
  *a5 = v11;
LABEL_11:
  if (v11 >> 11 == 27)
  {
    v17 = v14 + v6;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(a3 + 80))
    goto LABEL_28;
  v18 = v6;
  v19 = &v18;
  v15 = *(unsigned int *)(a3 + 48);
  if ((_DWORD)v15 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_27;
  }
  v20 = &v19;
  result = ((uint64_t (*)(int ***, uint64_t))off_1E340B2F8[v15])(&v20, a3 + 8);
  v16 = result - *a4;
  if ((result & 0xFF00000000) == 0)
    v16 = v8;
  v17 = v16 + *a4;
LABEL_17:
  *a4 = v17;
  return result;
}

uint64_t WebCore::ComplexTextController::advance(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  float32x2_t *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  float32x2_t v32;
  unsigned int v33;
  unsigned int v34;
  float32x2_t *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  __int32 v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  float32x2_t v43;
  float32x2_t v44;
  unsigned int v45;
  float32x2_t v46;
  float32x2_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  float v58;
  float32x2_t *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  BOOL v67;
  float32x2_t v68;
  float v69;
  uint64_t v70;
  float32x2_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  float32x2_t v139;
  __int128 v140;
  _QWORD v141[2];
  uint64_t v142;
  __int16 v143[5];

  v12 = result;
  v13 = *(_DWORD *)(result + 5548);
  if (v13 >= a2)
    v13 = a2;
  if (v13 < *(_DWORD *)(result + 5544))
  {
    LODWORD(v14) = 0;
    *(_OWORD *)(result + 5560) = 0u;
    *(_DWORD *)(result + 5576) = 0;
  }
  else
  {
    LODWORD(v14) = *(_DWORD *)(result + 5568);
  }
  *(_DWORD *)(result + 5544) = v13;
  v15 = *(unsigned int *)(result + 5196);
  if (v15 > v14)
  {
    v16 = v14;
    v17 = (unsigned __int8 *)(result + 5604);
    if (*(_BYTE *)(result + 5604))
    {
      if ((_DWORD)v14)
      {
        if ((unint64_t)v14 - 1 >= v15)
        {
          __break(0xC471u);
LABEL_122:
          JUMPOUT(0x1961502A0);
        }
        LODWORD(v18) = 0;
        v72 = *(uint64_t **)(result + 5184);
        do
        {
          v73 = *v72++;
          v18 = (*(_DWORD *)(v73 + 1788) + v18);
          --v16;
        }
        while (v16);
      }
      else
      {
        v18 = 0;
      }
    }
    else
    {
      if (*(_DWORD *)(result + 5340) <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x196150314);
      }
      v14 = *(unsigned int *)(*(_QWORD *)(result + 5328) + 4 * v14);
      if (*(_DWORD *)(result + 5420) <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x19615031CLL);
      }
      v18 = *(unsigned int *)(*(_QWORD *)(result + 5408) + 4 * v14);
    }
    v19 = (_QWORD *)(a3 + 43072);
    v20 = (_DWORD *)(a3 + 26680);
    result = a3 + 8208;
    v21 = a3 + 10272;
    v22 = (_QWORD *)(a3 + 26672);
    v23 = *(_DWORD *)(v12 + 5196);
    while (1)
    {
      if (v23 <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1961502F4);
      }
      v24 = *(float32x2_t **)(*(_QWORD *)(v12 + 5184) + 8 * v14);
      v25 = v24[224].u8[4];
      v26 = v24[223].u32[1];
      if (v24[224].i8[4])
        v27 = *(_DWORD *)(v12 + 5572);
      else
        v27 = v26 + ~*(_DWORD *)(v12 + 5572);
      if (a5)
      {
        v139 = v24[220];
        v99 = v15;
        v102 = result;
        v63 = a5;
        v64 = a4;
        v65 = v17;
        v107 = v18;
        v112 = v24[223].u32[1];
        v124 = v22;
        v130 = v21;
        v118 = v24[224].u8[4];
        v66 = WebCore::FontCascade::primaryFont(*(WebCore::FontCascade **)(v12 + 5528), (void *)0xFFFFFFFFLL);
        v26 = v112;
        v25 = v118;
        v22 = v124;
        v21 = v130;
        v18 = v107;
        v17 = v65;
        a4 = v64;
        a5 = v63;
        v67 = *(_QWORD *)&v139 == v66;
        v15 = v99;
        result = v102;
        if (!v67)
        {
          WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Font>(v63, *(_QWORD **)&v24[220], (uint64_t)&v140);
          v26 = v112;
          v25 = v118;
          v22 = v124;
          v21 = v130;
          v15 = v99;
          result = v102;
          v18 = v107;
          v17 = v65;
          a4 = v64;
          a5 = v63;
        }
      }
      if (a3 && !(_DWORD)v18)
        *(float64x2_t *)(a3 + 51280) = vcvtq_f64_f32(v24[219]);
      v28 = *(_DWORD *)(v12 + 5572);
      if (v28 < v26)
        break;
LABEL_69:
      v60 = *v17;
      v61 = *(unsigned int *)(v12 + 5568);
      v62 = (v61 + 1);
      *(_DWORD *)(v12 + 5568) = v62;
      v23 = *(_DWORD *)(v12 + 5196);
      if (v60)
      {
        if (v23 <= v61)
        {
          __break(0xC471u);
          JUMPOUT(0x19615030CLL);
        }
        v18 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 5184) + 8 * v61) + 1788) + v18);
        LODWORD(v14) = v61 + 1;
      }
      else if (v23 <= v62)
      {
        v18 = 0;
        LODWORD(v14) = *(_DWORD *)(v12 + 5196);
      }
      else
      {
        if (*(_DWORD *)(v12 + 5340) <= v62)
        {
          __break(0xC471u);
          JUMPOUT(0x1961502FCLL);
        }
        v14 = *(unsigned int *)(*(_QWORD *)(v12 + 5328) + 4 * v62);
        if (*(_DWORD *)(v12 + 5420) <= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x196150304);
        }
        v18 = *(unsigned int *)(*(_QWORD *)(v12 + 5408) + 4 * v14);
      }
      *(_DWORD *)(v12 + 5572) = 0;
      if (v15 <= v62)
        return result;
    }
    v136 = v26 - 1;
    v137 = v14 + 1;
    if (v25)
      v29 = 1;
    else
      v29 = -1;
    v138 = v29;
    while (1)
    {
      v30 = v24[186].u32[1];
      if (v30 <= v27)
      {
        __break(0xC471u);
        goto LABEL_122;
      }
      v31 = v27;
      v32 = v24[185];
      v33 = *(_DWORD *)(*(_QWORD *)&v32 + 4 * v27);
      if (v24[224].i8[5])
      {
        if (v25)
        {
          v34 = v27 + 1;
          v35 = v24 + 223;
          if (v27 + 1 < v26)
          {
            if (v30 <= v34)
            {
              __break(0xC471u);
              JUMPOUT(0x1961502C0);
            }
            v35 = (float32x2_t *)(*(_QWORD *)&v32 + 4 * v34);
          }
          v36 = v35->i32[0];
        }
        else
        {
          v59 = (float32x2_t *)(*(_QWORD *)&v32 + 4 * (v27 - 1));
          if (!v27)
            v59 = v24 + 223;
          v36 = v59->i32[0];
        }
        if (v33 <= v36)
          v37 = v36;
        else
          v37 = *(_DWORD *)(*(_QWORD *)&v32 + 4 * v27);
      }
      else
      {
        if (v24[152].i32[1] <= v27)
        {
          __break(0xC471u);
          JUMPOUT(0x1961502E4);
        }
        v37 = *(_DWORD *)(*(_QWORD *)&v24[151] + 4 * v27);
      }
      v38 = v18 + v27;
      if (*(_DWORD *)(v12 + 12) <= v38)
      {
        __break(0xC471u);
        JUMPOUT(0x1961502A8);
      }
      v39 = v24[224].i32[0];
      v40 = *(_DWORD *)(v12 + 5544);
      if (v39 + v33 >= v40)
        return result;
      a11.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v12 + 8 * v38);
      v41 = *(_DWORD *)(v12 + 5576);
      if (a3)
      {
        if (!v41)
          break;
      }
LABEL_58:
      v56 = v40 - v39;
      if (v37 < v40 - v39)
        v56 = v37;
      v57 = v56 - v33;
      *(_DWORD *)(v12 + 5576) = v57;
      if (v37 == v33)
      {
        v58 = 1.0;
      }
      else if ((_DWORD)a4)
      {
        v58 = 0.0;
        if (!v41)
          v58 = 1.0;
      }
      else
      {
        v58 = (float)(v57 - v41) / (float)(v37 - v33);
      }
      *(float *)(v12 + 5560) = vmlas_n_f32(*(float *)(v12 + 5560), v58, a11.n128_f32[0]);
      if (v39 + v37 > v40)
        return result;
      ++*(_DWORD *)(v12 + 5564);
      v28 = *(_DWORD *)(v12 + 5572) + 1;
      *(_QWORD *)(v12 + 5572) = v28;
      v27 = v31 + v138;
      if (v28 >= v26)
        goto LABEL_69;
    }
    v42 = *(_DWORD *)(v12 + 2076);
    v43 = 0;
    if (v42 > v38)
      v43 = *(float32x2_t *)(*(_QWORD *)(v12 + 2064) + 8 * v38);
    v44 = *(float32x2_t *)(*(_QWORD *)v12 + 8 * v38);
    if (!v27)
      v44 = vsub_f32((float32x2_t)a11.n128_u64[0], vsub_f32(v24[219], v43));
    v45 = v18 + v27 + 1;
    if (v42 > v45)
    {
      v68 = *(float32x2_t *)(*(_QWORD *)(v12 + 2064) + 8 * v45);
      v46 = vsub_f32(vadd_f32(v44, v68), v43);
      if (v15 <= v137 || v136 != v27)
        goto LABEL_45;
    }
    else
    {
      v46 = vsub_f32(vadd_f32(v44, 0), v43);
      if (v15 <= v137 || v136 != v27)
      {
LABEL_45:
        if (*(_DWORD *)(v12 + 4140) <= v38)
        {
          __break(0xC471u);
          JUMPOUT(0x1961502B0);
        }
        if (v30 <= v28)
        {
          __break(0xC471u);
          JUMPOUT(0x1961502B8);
        }
        v47 = v24[220];
        v48 = *(_WORD *)(*(_QWORD *)(v12 + 4128) + 2 * v38);
        v49 = *(unsigned int *)(*(_QWORD *)&v32 + 4 * v28);
        *(double *)&v140 = v46.f32[0];
        *((double *)&v140 + 1) = (float)-v46.f32[1];
        v143[0] = v48;
        v142 = v49;
        v141[0] = v47;
        v50 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v50 == *(_DWORD *)(a3 + 8))
        {
          v100 = v15;
          v103 = result;
          v94 = a5;
          v89 = a4;
          v84 = v17;
          v108 = v18;
          v113 = v26;
          v125 = v22;
          v131 = v21;
          v119 = v25;
          v79 = a11;
          WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>(a3, (unint64_t)v141);
          a11 = v79;
          v17 = v84;
          v26 = v113;
          v25 = v119;
          v22 = v125;
          v21 = v131;
          v15 = v100;
          result = v103;
          v18 = v108;
          a4 = v89;
          a5 = v94;
        }
        else
        {
          *(float32x2_t *)(*(_QWORD *)a3 + 8 * v50) = v47;
          *(_DWORD *)(a3 + 12) = v50 + 1;
        }
        v51 = *(unsigned int *)(a3 + 8220);
        if ((_DWORD)v51 == *(_DWORD *)(a3 + 8216))
        {
          v74 = result;
          v95 = a5;
          v101 = v15;
          v90 = a4;
          v85 = v17;
          v109 = v18;
          v114 = v26;
          v126 = v22;
          v132 = v21;
          v120 = v25;
          v80 = a11;
          WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(result, (unint64_t)v143);
          a11 = v80;
          v17 = v85;
          v26 = v114;
          v25 = v120;
          v22 = v126;
          v21 = v132;
          result = v74;
          v18 = v109;
          a5 = v95;
          v15 = v101;
          a4 = v90;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(a3 + 8208) + 2 * v51) = v48;
          *(_DWORD *)(a3 + 8220) = v51 + 1;
        }
        v52 = *(unsigned int *)(a3 + 10284);
        if ((_DWORD)v52 == *(_DWORD *)(a3 + 10280))
        {
          v104 = result;
          v96 = a5;
          v91 = a4;
          v75 = v15;
          v86 = v17;
          v110 = v18;
          v115 = v26;
          v127 = v22;
          v133 = v21;
          v121 = v25;
          v81 = a11;
          WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>(v21, (unint64_t)&v140);
          a11 = v81;
          v17 = v86;
          v26 = v115;
          v25 = v121;
          v22 = v127;
          v21 = v133;
          result = v104;
          v18 = v110;
          v15 = v75;
          a4 = v91;
          a5 = v96;
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(a3 + 10272) + 16 * v52) = v140;
          ++*(_DWORD *)(a3 + 10284);
        }
        v141[0] = 0;
        v141[1] = 0;
        v53 = *(unsigned int *)(a3 + 26684);
        if ((_DWORD)v53 == *v20)
        {
          v105 = result;
          v97 = a5;
          v92 = a4;
          v76 = v15;
          v87 = v17;
          v111 = v18;
          v116 = v26;
          v128 = v22;
          v134 = v21;
          v122 = v25;
          v82 = a11;
          WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)v22, (unint64_t)v141);
          a11 = v82;
          v17 = v87;
          v26 = v116;
          v25 = v122;
          v22 = v128;
          v21 = v134;
          result = v105;
          v18 = v111;
          v15 = v76;
          a4 = v92;
          a5 = v97;
        }
        else
        {
          v54 = (_QWORD *)(*v22 + 16 * v53);
          *v54 = 0;
          v54[1] = 0;
          ++*(_DWORD *)(a3 + 26684);
        }
        v55 = *(unsigned int *)(a3 + 43084);
        if ((_DWORD)v55 == *(_DWORD *)(a3 + 43080))
        {
          v106 = result;
          v98 = a5;
          v93 = a4;
          v77 = v15;
          v88 = v17;
          v78 = v18;
          v129 = v22;
          v135 = v21;
          v117 = v26;
          v123 = v25;
          v83 = a11;
          WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>(a3 + 43072, (unint64_t)&v142);
          a11 = v83;
          v17 = v88;
          v26 = v117;
          v25 = v123;
          v22 = v129;
          v21 = v135;
          result = v106;
          v18 = v78;
          v15 = v77;
          a4 = v93;
          a5 = v98;
        }
        else
        {
          *(_QWORD *)(*v19 + 8 * v55) = v49;
          *(_DWORD *)(a3 + 43084) = v55 + 1;
        }
        v41 = *(_DWORD *)(v12 + 5576);
        v40 = *(_DWORD *)(v12 + 5544);
        v39 = v24[224].i32[0];
        goto LABEL_58;
      }
      v68.i32[0] = 0;
    }
    if (*(_DWORD *)(v12 + 5196) <= v137)
    {
      __break(0xC471u);
      JUMPOUT(0x1961502ECLL);
    }
    v69 = 0.0;
    if (v42 > v45)
      v69 = *(float *)(*(_QWORD *)(v12 + 2064) + 8 * v45 + 4);
    v70 = *(_QWORD *)(*(_QWORD *)(v12 + 5184) + 8 * v137);
    v71.f32[0] = (float)(v46.f32[0] - v68.f32[0]) + *(float *)(v70 + 1752);
    v71.f32[1] = *(float *)(v70 + 1756) + (float)(v46.f32[1] - v69);
    v46 = v71;
    goto LABEL_45;
  }
  return result;
}

float WebCore::FontCascade::tabWidth(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  int v13;
  float v14;
  float v16;

  v6 = *(float *)(a2 + 340);
  v7 = *(float *)(a2 + 336) + v6;
  v8 = *(float *)a3;
  v9 = 1.0;
  if (*(_BYTE *)(a3 + 4))
    v9 = *(float *)(a2 + 336) + v6;
  v10 = v8 * v9;
  if ((float)(v8 * v9) == 0.0)
  {
    v12 = (float *)(a1 + 200);
    v13 = *(unsigned __int8 *)(a1 + 204);
    if (v13 == 4)
    {
      if (*(_BYTE *)(a1 + 206))
        v11 = *v12;
      else
        v11 = (float)*(int *)v12;
    }
    else if (v13 == 3)
    {
      if (*(_BYTE *)(a1 + 206))
        v16 = *v12;
      else
        v16 = (float)*(int *)v12;
      v11 = (float)(v16 / 100.0) * *(float *)(a1 + 172);
    }
    else
    {
      v11 = 0.0;
      if (v13 == 11)
      {
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(a1 + 200), *(float *)(a1 + 172));
        v6 = *(float *)(a2 + 340);
      }
    }
  }
  else
  {
    v11 = v10 - fmodf(a5, v8 * v9);
    if (v11 < (float)(v7 * 0.5))
      v11 = v10 + v11;
  }
  v14 = 0.0;
  if (a4 == 1)
    v14 = v6;
  return v11 - v14;
}

uint64_t WebCore::ComplexTextController::ComplexTextRun::ComplexTextRun(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, unsigned int a6, unsigned int a7, char a8)
{
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v17;
  WebCore::CocoaApplication *hasBinaryProperty;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int width_low;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  WTF *v34;
  unint64_t v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  WTF *v47;
  unint64_t v48;
  WTF *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CTFontOrientation v66;
  double width;
  WTF *v69;
  WTF *v70;
  CGSize advances;
  CGGlyph glyphs;

  v9 = a6;
  *(_DWORD *)a1 = 1;
  v70 = (WTF *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 64;
  *(_QWORD *)(a1 + 536) = a1 + 552;
  *(_QWORD *)(a1 + 544) = 64;
  v69 = (WTF *)(a1 + 1080);
  *(_QWORD *)(a1 + 1064) = a1 + 1080;
  *(_QWORD *)(a1 + 1072) = 64;
  *(_QWORD *)(a1 + 1208) = a1 + 1224;
  *(_QWORD *)(a1 + 1216) = 64;
  *(_QWORD *)(a1 + 1480) = a1 + 1496;
  *(_QWORD *)(a1 + 1488) = 64;
  *(_QWORD *)(a1 + 1752) = 0;
  *(_QWORD *)(a1 + 1760) = a2;
  *(_QWORD *)(a1 + 1768) = a3;
  *(_DWORD *)(a1 + 1776) = a5;
  *(_DWORD *)(a1 + 1780) = a6;
  *(_DWORD *)(a1 + 1784) = a7;
  *(_DWORD *)(a1 + 1792) = a4;
  *(_BYTE *)(a1 + 1796) = a8;
  v11 = a7 - a6;
  *(_BYTE *)(a1 + 1797) = 1;
  if (v11 >= 0x41)
  {
    if (v11 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x196150A40);
    }
    v36 = WTF::fastMalloc((WTF *)(4 * v11));
    *(_DWORD *)(a1 + 1488) = v11;
    *(_QWORD *)(a1 + 1480) = v36;
    v9 = *(_DWORD *)(a1 + 1780);
    a7 = *(_DWORD *)(a1 + 1784);
  }
  if (v9 < a7)
  {
    do
    {
      LODWORD(advances.width) = v9;
      v12 = *(_QWORD *)(a1 + 1768);
      v13 = v9 + 1;
      v14 = *(unsigned __int16 *)(v12 + 2 * v9);
      if ((v14 & 0xFC00) == 0xD800 && v13 != *(_DWORD *)(a1 + 1776))
      {
        v15 = *(unsigned __int16 *)(v12 + 2 * v13);
        _ZF = (v15 & 0xFC00) == 56320;
        v17 = v15 + (v14 << 10) - 56613888;
        if (_ZF)
          v9 += 2;
        else
          ++v9;
        if (_ZF)
          v14 = v17;
      }
      else
      {
        ++v9;
      }
      if (v14 > 0xD || ((1 << v14) & 0x2601) == 0)
      {
        if (u_charType(v14) == 15
          || (hasBinaryProperty = (WebCore::CocoaApplication *)u_hasBinaryProperty(v14, UCHAR_DEFAULT_IGNORABLE_CODE_POINT), !(_DWORD)hasBinaryProperty)&& (v14 != 65532 || !WebCore::CocoaApplication::isIBooks(hasBinaryProperty)))
        {
          v20 = *(unsigned int *)(a1 + 1492);
          if ((_DWORD)v20 == *(_DWORD *)(a1 + 1488))
          {
            v21 = WTF::Vector<unsigned int,64ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 1480), v20 + 1, (unint64_t)&advances);
            v20 = *(unsigned int *)(a1 + 1492);
            v22 = *(_QWORD *)(a1 + 1480);
            width_low = *(_DWORD *)v21;
          }
          else
          {
            v22 = *(_QWORD *)(a1 + 1480);
            width_low = LODWORD(advances.width);
          }
          *(_DWORD *)(v22 + 4 * v20) = width_low;
          ++*(_DWORD *)(a1 + 1492);
        }
      }
    }
    while (v9 < *(_DWORD *)(a1 + 1784));
  }
  LODWORD(v24) = *(_DWORD *)(a1 + 1492);
  *(_DWORD *)(a1 + 1788) = v24;
  if ((a8 & 1) == 0 && v24 >= 2)
  {
    v25 = 0;
    v26 = v24 - 1;
    while (1)
    {
      v27 = *(unsigned int *)(a1 + 1492);
      if (v25 >= v27)
        break;
      if (v27 <= v26)
      {
        __break(0xC471u);
        JUMPOUT(0x196150A38);
      }
      v28 = *(_QWORD *)(a1 + 1480);
      v29 = *(_DWORD *)(v28 + 4 * v25);
      *(_DWORD *)(v28 + 4 * v25) = *(_DWORD *)(v28 + 4 * v26);
      *(_DWORD *)(v28 + 4 * v26) = v29;
      ++v25;
      v24 = *(unsigned int *)(a1 + 1788);
      --v26;
      if (v25 >= v24 >> 1)
        goto LABEL_34;
    }
LABEL_114:
    __break(0xC471u);
    JUMPOUT(0x196150A30);
  }
LABEL_34:
  v30 = *(_DWORD *)(a1 + 1076);
  v31 = v24;
  v32 = v24;
  if (v30 <= v24)
  {
    v33 = *(_DWORD *)(a1 + 1072);
    if (v33 >= v24)
    {
LABEL_54:
      v31 = *(unsigned int *)(a1 + 1076);
      v32 = *(_DWORD *)(a1 + 1076);
      goto LABEL_55;
    }
    if (v33)
    {
      if (v30)
        *(_DWORD *)(a1 + 1076) = 0;
      v34 = *(WTF **)(a1 + 1064);
      if (v69 != v34 && v34)
      {
        *(_QWORD *)(a1 + 1064) = 0;
        *(_DWORD *)(a1 + 1072) = 0;
        WTF::fastFree(v34, a2);
        if (*(_QWORD *)(a1 + 1064))
          goto LABEL_42;
      }
      else if (v34)
      {
LABEL_42:
        v35 = *(unsigned int *)(a1 + 1072);
        goto LABEL_48;
      }
      *(_QWORD *)(a1 + 1064) = v69;
      v35 = 64;
      *(_DWORD *)(a1 + 1072) = 64;
    }
    else
    {
      v35 = 0;
    }
LABEL_48:
    if (v35 < v24)
    {
      v37 = *(WTF **)(a1 + 1064);
      v38 = *(unsigned int *)(a1 + 1076);
      if (v24 < 0x41)
      {
        v39 = v69;
        *(_QWORD *)(a1 + 1064) = v69;
        *(_DWORD *)(a1 + 1072) = 64;
      }
      else
      {
        if ((v24 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196150A48);
        }
        v39 = (void *)WTF::fastMalloc((WTF *)(2 * v24));
        *(_DWORD *)(a1 + 1072) = v24;
        *(_QWORD *)(a1 + 1064) = v39;
      }
      memcpy(v39, v37, 2 * v38);
      if (v69 != v37 && v37)
      {
        if (*(WTF **)(a1 + 1064) == v37)
        {
          *(_QWORD *)(a1 + 1064) = 0;
          *(_DWORD *)(a1 + 1072) = 0;
        }
        WTF::fastFree(v37, a2);
      }
    }
    goto LABEL_54;
  }
LABEL_55:
  v40 = *(_QWORD *)(a1 + 1064);
  if (v32)
    bzero(*(void **)(a1 + 1064), 2 * v31);
  if (v32 != (_DWORD)v24)
    bzero((void *)(v40 + 2 * v31), 2 * v24 - 2 * v31);
  *(_DWORD *)(a1 + 1076) = v24;
  v41 = *(_QWORD *)(a1 + 1760);
  if (*(_BYTE *)(v41 + 128))
  {
    v42 = *(float *)(v41 + 132);
    if (v42 != -1.0)
      goto LABEL_61;
  }
  else
  {
    __asm { FMOV            V0.4S, #-1.0 }
    *(_OWORD *)(v41 + 132) = _Q0;
    *(_OWORD *)(v41 + 148) = _Q0;
    *(_OWORD *)(v41 + 164) = _Q0;
    *(_OWORD *)(v41 + 180) = _Q0;
    *(_BYTE *)(v41 + 128) = 1;
  }
  glyphs = 0;
  advances = (CGSize)*MEMORY[0x1E0C9D820];
  if (*(float *)(v41 + 96) == 0.0)
  {
    width = advances.width;
  }
  else
  {
    v66 = kCTFontOrientationHorizontal;
    if (*(_BYTE *)(v41 + 100))
    {
      if ((*(_BYTE *)(v41 + 344) & 4) != 0)
        v66 = kCTFontOrientationHorizontal;
      else
        v66 = kCTFontOrientationVertical;
    }
    CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v41 + 88), v66, &glyphs, &advances, 1);
    width = advances.width;
    if (!*(_BYTE *)(v41 + 128))
    {
      __asm { FMOV            V1.4S, #-1.0 }
      *(_OWORD *)(v41 + 132) = _Q1;
      *(_OWORD *)(v41 + 148) = _Q1;
      *(_OWORD *)(v41 + 164) = _Q1;
      *(_OWORD *)(v41 + 180) = _Q1;
      *(_BYTE *)(v41 + 128) = 1;
    }
  }
  v42 = width;
  *(float *)(v41 + 132) = v42;
LABEL_61:
  v43 = *(unsigned int *)(a1 + 1788);
  v44 = *(_DWORD *)(a1 + 20);
  LODWORD(v45) = v43;
  if (v44 > v43)
    goto LABEL_85;
  v46 = *(_DWORD *)(a1 + 16);
  if (v46 >= v43)
    goto LABEL_84;
  if (v46)
  {
    if (v44)
      *(_DWORD *)(a1 + 20) = 0;
    v47 = *(WTF **)(a1 + 8);
    if (v70 != v47 && v47)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v47, a2);
      if (*(_QWORD *)(a1 + 8))
        goto LABEL_69;
    }
    else if (v47)
    {
LABEL_69:
      v48 = *(unsigned int *)(a1 + 16);
      goto LABEL_76;
    }
    *(_QWORD *)(a1 + 8) = v70;
    v48 = 64;
    *(_DWORD *)(a1 + 16) = 64;
  }
  else
  {
    v48 = 0;
  }
LABEL_76:
  if (v48 < v43)
  {
    v49 = *(WTF **)(a1 + 8);
    v50 = *(unsigned int *)(a1 + 20);
    if (v43 < 0x41)
    {
      v51 = v70;
      *(_QWORD *)(a1 + 8) = v70;
      *(_DWORD *)(a1 + 16) = 64;
      if (!(_DWORD)v50)
        goto LABEL_82;
    }
    else
    {
      if (v43 >> 29)
        goto LABEL_114;
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v43));
      *(_DWORD *)(a1 + 16) = v43;
      *(_QWORD *)(a1 + 8) = v51;
      if (!(_DWORD)v50)
        goto LABEL_82;
    }
    v52 = 8 * v50;
    v53 = v49;
    do
    {
      v54 = *(_QWORD *)v53;
      v53 = (WTF *)((char *)v53 + 8);
      *v51++ = v54;
      v52 -= 8;
    }
    while (v52);
LABEL_82:
    if (v70 != v49 && v49)
    {
      if (*(WTF **)(a1 + 8) == v49)
      {
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
      }
      WTF::fastFree(v49, a2);
    }
  }
LABEL_84:
  LODWORD(v45) = *(_DWORD *)(a1 + 20);
LABEL_85:
  v55 = v42 + 0.0;
  v56 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v45)
  {
    v45 = v45;
    v57 = v45 + 1;
    v58 = *(_QWORD *)(a1 + 8);
    do
    {
      *(float *)v58 = v55;
      *(_DWORD *)(v58 + 4) = 0;
      --v57;
      v58 += 8;
    }
    while (v57 > 1);
  }
  else
  {
    v45 = 0;
  }
  if (v45 != v43)
  {
    v59 = v56 + 8 * v43;
    v60 = v56 + 8 * v45;
    do
    {
      *(float *)v60 = v55;
      *(_DWORD *)(v60 + 4) = 0;
      v60 += 8;
    }
    while (v60 != v59);
  }
  *(_DWORD *)(a1 + 20) = v43;
  return a1;
}

uint64_t WebCore::ComplexTextController::ComplexTextRun::ComplexTextRun(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, float a9, float a10, int a11, int a12, int a13, char a14)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;

  *(_DWORD *)a1 = 1;
  v24 = (_QWORD *)(a1 + 24);
  v25 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 8) = v24;
  *(_DWORD *)(a1 + 16) = 64;
  *(_DWORD *)(a1 + 20) = v25;
  if (v25 >= 0x41)
  {
    if (v25 >> 29)
      goto LABEL_23;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 8) = v24;
  }
  v26 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v26)
  {
    v27 = *(uint64_t **)a2;
    v28 = 8 * v26;
    do
    {
      v29 = *v27++;
      *v24++ = v29;
      v28 -= 8;
    }
    while (v28);
  }
  v30 = *(unsigned int *)(a3 + 12);
  v31 = (_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 536) = a1 + 552;
  *(_DWORD *)(a1 + 544) = 64;
  *(_DWORD *)(a1 + 548) = v30;
  if (v30 >= 0x41)
  {
    if (v30 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x196150C58);
    }
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v30));
    *(_DWORD *)(a1 + 544) = v30;
    *(_QWORD *)(a1 + 536) = v31;
  }
  v32 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v32)
  {
    v33 = *(uint64_t **)a3;
    v34 = 8 * v32;
    do
    {
      v35 = *v33++;
      *v31++ = v35;
      v34 -= 8;
    }
    while (v34);
  }
  v36 = *(unsigned int *)(a4 + 12);
  v37 = (void *)(a1 + 1080);
  *(_QWORD *)(a1 + 1064) = a1 + 1080;
  *(_DWORD *)(a1 + 1072) = 64;
  *(_DWORD *)(a1 + 1076) = v36;
  if (v36 >= 0x41)
  {
    if ((v36 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196150C60);
    }
    v37 = (void *)WTF::fastMalloc((WTF *)(2 * v36));
    *(_DWORD *)(a1 + 1072) = v36;
    *(_QWORD *)(a1 + 1064) = v37;
  }
  memcpy(v37, *(const void **)a4, 2 * *(unsigned int *)(a4 + 12));
  *(_QWORD *)(a1 + 1208) = a1 + 1224;
  *(_QWORD *)(a1 + 1216) = 64;
  v38 = *(unsigned int *)(a5 + 12);
  v39 = (void *)(a1 + 1496);
  *(_QWORD *)(a1 + 1480) = a1 + 1496;
  *(_DWORD *)(a1 + 1488) = 64;
  *(_DWORD *)(a1 + 1492) = v38;
  if (v38 >= 0x41)
  {
    if (!(v38 >> 30))
    {
      v39 = (void *)WTF::fastMalloc((WTF *)(4 * v38));
      *(_DWORD *)(a1 + 1488) = v38;
      *(_QWORD *)(a1 + 1480) = v39;
      goto LABEL_19;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x196150C50);
  }
LABEL_19:
  memcpy(v39, *(const void **)a5, 4 * *(unsigned int *)(a5 + 12));
  *(float *)(a1 + 1752) = a9;
  *(float *)(a1 + 1756) = a10;
  *(_QWORD *)(a1 + 1760) = a6;
  *(_QWORD *)(a1 + 1768) = a7;
  *(_DWORD *)(a1 + 1776) = a11;
  *(_DWORD *)(a1 + 1780) = a12;
  *(_DWORD *)(a1 + 1784) = a13;
  *(_DWORD *)(a1 + 1788) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a1 + 1792) = a8;
  *(_BYTE *)(a1 + 1796) = a14;
  *(_BYTE *)(a1 + 1797) = 1;
  return a1;
}

{
  return WebCore::ComplexTextController::ComplexTextRun::ComplexTextRun(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t WebCore::contentTypeMeetsContainerAndCodecTypeRequirements(WebCore::ContentType *this, uint64_t a2, uint64_t a3, double a4, double a5, float a6)
{
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  unint64_t v11;
  char v12;
  char v13;
  WTF::StringImpl *v14;
  _BOOL8 v15;
  uint64_t result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  unsigned int v29;

  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_14;
  WebCore::ContentType::containerType(this, a4, a5, a6);
  if (*(_DWORD *)(a2 + 12))
  {
    v11 = 0;
    do
    {
      v12 = WTF::equal(*(WTF **)(*(_QWORD *)a2 + 8 * v11), v27, v10);
      if ((v12 & 1) != 0)
        break;
      ++v11;
    }
    while (v11 < *(unsigned int *)(a2 + 12));
    v13 = v12 ^ 1;
  }
  else
  {
    v13 = 1;
  }
  v14 = v27;
  v27 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v9);
      if ((v13 & 1) != 0)
        return 0;
      goto LABEL_14;
    }
    *(_DWORD *)v14 -= 2;
  }
  if ((v13 & 1) != 0)
    return 0;
LABEL_14:
  if (!*(_BYTE *)(a3 + 16))
    return 1;
  result = (uint64_t)WebCore::ContentType::codecs(this, (uint64_t)&v27, a6);
  v18 = v27;
  if (!v29)
  {
    v15 = 1;
    goto LABEL_41;
  }
  v19 = (WTF::StringImpl *)((char *)v27 + 8 * v29);
  do
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      __break(1u);
      return result;
    }
    v20 = *(unsigned int *)(a3 + 12);
    v15 = *(_DWORD *)(a3 + 12) != 0;
    if (!(_DWORD)v20)
    {
LABEL_30:
      v15 = 0;
      break;
    }
    v21 = *(uint64_t **)a3;
    v22 = 8 * v20;
    while (1)
    {
      v23 = *v21;
      if (*v21)
      {
        v17 = *(WTF::StringImpl **)(v23 + 8);
        v24 = *(_DWORD *)(v23 + 4);
      }
      else
      {
        v17 = 0;
        v24 = 0;
      }
      result = *(_QWORD *)v18;
      if (!*(_QWORD *)v18)
        break;
      result = WTF::StringImpl::startsWith();
      if ((result & 1) != 0)
        goto LABEL_28;
LABEL_24:
      ++v21;
      v22 -= 8;
      if (!v22)
        goto LABEL_30;
    }
    if (v24)
      goto LABEL_24;
LABEL_28:
    v18 = (WTF::StringImpl *)((char *)v18 + 8);
  }
  while (v18 != v19);
  v18 = v27;
  if (!v29)
  {
LABEL_41:
    if (v18)
      goto LABEL_44;
    return v15;
  }
  v25 = 8 * v29;
  do
  {
    v26 = *(WTF::StringImpl **)v18;
    *(_QWORD *)v18 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v17);
      else
        *(_DWORD *)v26 -= 2;
    }
    v18 = (WTF::StringImpl *)((char *)v18 + 8);
    v25 -= 8;
  }
  while (v25);
  v18 = v27;
  if (v27)
  {
LABEL_44:
    v27 = 0;
    v28 = 0;
    WTF::fastFree(v18, v17);
  }
  return v15;
}

uint64_t WebCore::CrossfadeGeneratedImage::drawCrossfade(uint64_t this, WebCore::GraphicsContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];

  v3 = this;
  v4 = *(_QWORD *)(this + 72);
  {
    v5 = WebCore::Image::nullImage(void)::nullImage;
  }
  else
  {
    v8 = *(_QWORD *)(this + 72);
    this = WebCore::BitmapImage::create(0, 0, 0, v9);
    v4 = v8;
    v5 = v9[0];
    WebCore::Image::nullImage(void)::nullImage = v9[0];
  }
  if (v4 != v5 && *(_QWORD *)(v3 + 80) != v5)
  {
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
    v7 = *(_QWORD *)(v3 + 92);
    v6 = (float *)(v3 + 92);
    v9[0] = 0;
    v9[1] = v7;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t *))(*(_QWORD *)a2 + 456))(a2, v9);
    (*(void (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a2 + 592))(a2, 1.0);
    WebCore::drawCrossfadeSubimage((uint64_t)a2, *(_QWORD *)(v6 - 5), 2, v6, 1.0 - *(v6 - 1));
    WebCore::drawCrossfadeSubimage((uint64_t)a2, *(_QWORD *)(v6 - 3), 12, v6, *(v6 - 1));
    (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 608))(a2);
    return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  }
  return this;
}

uint64_t WebCore::drawCrossfadeSubimage(uint64_t a1, uint64_t a2, int a3, float *a4, float a5)
{
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  unint64_t v15;
  float v16;
  float v18;
  int v19;
  float v20;
  int v21;
  uint64_t v23;
  float v24;
  int v25;
  uint64_t v26;
  float v27;
  int v28;

  v10 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  v12 = v11;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 1);
LABEL_3:
    if (*(unsigned __int8 *)(a1 + 194) != a3 || *(_BYTE *)(a1 + 195) != 1)
    {
      *(_WORD *)(a1 + 194) = a3 | 0x100;
      *(_DWORD *)(a1 + 184) |= 0x20u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
    (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 592))(a1, a5);
    v14 = 1;
    v15 = 4641;
    goto LABEL_9;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 1);
  if (v13)
    goto LABEL_3;
  if (*(float *)(a1 + 336) != a5)
  {
    *(float *)(a1 + 336) = a5;
    *(_DWORD *)(a1 + 184) |= 0x100u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  v14 = 0;
  v15 = ((unint64_t)(a3 & 0xF) << 8) | 0x1021;
LABEL_9:
  v16 = a4[1];
  if (*a4 != v10 || v16 != v12)
  {
    *(float *)&v26 = *a4 / v10;
    *((float *)&v26 + 1) = v16 / v12;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 632))(a1, &v26);
  }
  v18 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  v26 = 0;
  v27 = v18;
  v28 = v19;
  v20 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  v23 = 0;
  v24 = v20;
  v25 = v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, unint64_t))(*(_QWORD *)a1 + 360))(a1, a2, &v26, &v23, v15);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 608))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, 1);
}

uint64_t WebCore::CrossfadeGeneratedImage::draw(uint64_t a1, WebCore::GraphicsContext *a2, float *a3, float *a4, unsigned int a5)
{
  int v10;
  int v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v19[2];

  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v10 = (a5 >> 8) & 0xF;
  v11 = a5 & 0x1F;
  if (*((unsigned __int8 *)a2 + 194) != v10 || *((unsigned __int8 *)a2 + 195) != v11)
  {
    *((_WORD *)a2 + 97) = v10 | ((_WORD)v11 << 8);
    *((_DWORD *)a2 + 46) |= 0x20u;
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 88))(a2, (uint64_t)a2 + 8);
  (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a2 + 456))(a2, a3);
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, *a3, a3[1]);
  v13 = a3[2];
  v14 = a3[3];
  v15 = a4[2];
  v16 = a4[3];
  if (v13 != v15 || v14 != v16)
  {
    v19[0] = v13 / v15;
    v19[1] = v14 / v16;
    (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a2 + 632))(a2, v19);
  }
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, -*a4, -a4[1]);
  WebCore::CrossfadeGeneratedImage::drawCrossfade(a1, a2);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  return 3;
}

uint64_t WebCore::CrossfadeGeneratedImage::drawPattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t v16;
  uint64_t result;
  WebCore::GraphicsContext *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char **v31;
  char *v32;

  v29 = *(_QWORD *)(a1 + 92);
  v16 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v16 != -1)
  {
    v32 = &v30;
    v31 = &v32;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t *, uint64_t *, _QWORD, _QWORD, float))(*(_QWORD *)a2 + 328))(&v32, a2, &v29, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0, 0, 1.0);
  result = (uint64_t)v32;
  if (v32)
  {
    v18 = (WebCore::GraphicsContext *)(*(uint64_t (**)(char *))(*(_QWORD *)v32 + 16))(v32);
    WebCore::CrossfadeGeneratedImage::drawCrossfade(a1, v18);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 416))(a2, v32, a3, a4, a5, a6, a7, *(_QWORD *)&a8 & 0xFFFFFFLL, v29);
    v20 = v32;
    v32 = 0;
    if (v20)
    {
      v21 = *((_QWORD *)v20 + 1);
      if (__ldaxr((unsigned __int8 *)v21))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v21))
      {
        goto LABEL_9;
      }
      result = MEMORY[0x19AEA534C](v21);
LABEL_9:
      v23 = *(_QWORD *)(v21 + 8);
      v24 = v23 - 1;
      *(_QWORD *)(v21 + 8) = v23 - 1;
      if (v23 == 1)
      {
        v28 = *(_QWORD *)(v21 + 16);
        v25 = *(_QWORD *)(v21 + 24);
        *(_QWORD *)(v21 + 24) = 0;
        v26 = v28 != 0;
      }
      else
      {
        v25 = 0;
        v26 = 1;
      }
      v27 = __ldxr((unsigned __int8 *)v21);
      if (v27 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v21))
        {
          if (v24)
            return result;
LABEL_17:
          if (v25)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          if (!v26)
            return WTF::fastFree((WTF *)v21, v19);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v21);
      if (v24)
        return result;
      goto LABEL_17;
    }
  }
  return result;
}

float WebCore::CrossfadeGeneratedImage::size(uint64_t a1)
{
  return *(float *)(a1 + 92);
}

uint64_t WebCore::CrossfadeGeneratedImage::dump(WebCore::CrossfadeGeneratedImage *this, WTF::TextStream *a2)
{
  uint64_t v4;
  WTF::TextStream *v5;
  uint64_t v6;
  WTF::TextStream *v7;

  WebCore::Image::dump(this, a2);
  v4 = *((_QWORD *)this + 9);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v5 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v5, v4);
  WTF::TextStream::endGroup(a2);
  v6 = *((_QWORD *)this + 10);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v7 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v7, v6);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a2);
}

double WebCore::DecomposedGlyphs::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;

  v13 = WTF::fastMalloc((WTF *)0x60);
  if (a3)
  {
    if ((a3 & 0x80000000) != 0)
      goto LABEL_10;
    v14 = WTF::fastMalloc((WTF *)(2 * a3));
    v15 = v14;
    v16 = 0;
    do
    {
      *(_WORD *)(v14 + v16) = *(_WORD *)(a1 + v16);
      v16 += 2;
    }
    while (2 * a3 != v16);
    if (a3 >> 28)
    {
LABEL_10:
      __break(0xC471u);
      JUMPOUT(0x1961516C8);
    }
    v17 = WTF::fastMalloc((WTF *)(16 * a3));
    v18 = v17;
    v19 = 0;
    do
    {
      *(_OWORD *)(v17 + v19) = *(_OWORD *)(a2 + v19);
      v19 += 16;
    }
    while (16 * a3 != v19);
  }
  else
  {
    v15 = 0;
    v18 = 0;
  }
  v20 = *a4;
  v21 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v21 = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v21 + 8) = xmmword_19689B170;
  *(_QWORD *)(v21 + 24) = v13;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = a6;
  *(_QWORD *)(v13 + 40) = 1;
  *(_QWORD *)v13 = off_1E340B288;
  *(_QWORD *)(v13 + 8) = v21;
  *(_QWORD *)(v13 + 48) = v15;
  *(_DWORD *)(v13 + 56) = a3;
  *(_DWORD *)(v13 + 60) = a3;
  *(_QWORD *)(v13 + 64) = v18;
  *(_DWORD *)(v13 + 72) = a3;
  *(_DWORD *)(v13 + 76) = a3;
  *(_QWORD *)(v13 + 80) = v20;
  *(_BYTE *)(v13 + 88) = a5;
  *a7 = v13;
  return result;
}

double WebCore::DecomposedGlyphs::create@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = WTF::fastMalloc((WTF *)0x60);
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v7 = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v7 + 8) = xmmword_19689B170;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = 1;
  *(_QWORD *)v6 = off_1E340B288;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  v9 = *a1;
  *a1 = 0;
  *(_QWORD *)(v6 + 48) = v9;
  LODWORD(v9) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  *(_DWORD *)(v6 + 56) = v9;
  LODWORD(v9) = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = 0;
  *(_DWORD *)(v6 + 60) = v9;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  v10 = a1[2];
  a1[2] = 0;
  *(_QWORD *)(v6 + 64) = v10;
  LODWORD(v10) = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = 0;
  *(_DWORD *)(v6 + 72) = v10;
  LODWORD(v10) = *((_DWORD *)a1 + 7);
  *((_DWORD *)a1 + 7) = 0;
  *(_DWORD *)(v6 + 76) = v10;
  v11 = a1[4];
  *(_BYTE *)(v6 + 88) = *((_BYTE *)a1 + 40);
  *(_QWORD *)(v6 + 80) = v11;
  *a3 = v6;
  return result;
}

void WebCore::CrossfadeGeneratedImage::~CrossfadeGeneratedImage(WebCore::CrossfadeGeneratedImage *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  WebCore::Image::~Image(this, a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  WTF *v5;
  void *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  WebCore::Image::~Image(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::CrossfadeGeneratedImage::isCrossfadeGeneratedImage(WebCore::CrossfadeGeneratedImage *this)
{
  return 1;
}

uint64_t WebCore::CrossfadeGeneratedImage::usesContainerSize(WebCore::CrossfadeGeneratedImage *this)
{
  return 0;
}

uint64_t WebCore::CrossfadeGeneratedImage::hasRelativeWidth(WebCore::CrossfadeGeneratedImage *this)
{
  return 0;
}

uint64_t WebCore::CrossfadeGeneratedImage::hasRelativeHeight(WebCore::CrossfadeGeneratedImage *this)
{
  return 0;
}

void WebCore::DecomposedGlyphs::~DecomposedGlyphs(WebCore::DecomposedGlyphs *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::RenderingResource::~RenderingResource(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  v3 = (WTF *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::RenderingResource::~RenderingResource(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::RenderingResource::isNativeImage(WebCore::RenderingResource *this)
{
  return 0;
}

uint64_t WebCore::RenderingResource::isGradient(WebCore::RenderingResource *this)
{
  return 0;
}

uint64_t WebCore::DecomposedGlyphs::isDecomposedGlyphs(WebCore::DecomposedGlyphs *this)
{
  return 1;
}

uint64_t WebCore::RenderingResource::isFilter(WebCore::RenderingResource *this)
{
  return 0;
}

double _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNS_13contrastRatioERKNS_5ColorES4_E3__0EEDcRKNS_15ColorComponentsIT_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EES6_SC_SE_(int a1, unint64_t *a2, float *a3)
{
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unint64_t v22;
  unsigned int v23;
  float v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  double v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  unint64_t v43;
  unint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  float *v55;
  unint64_t v56;
  float v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  float *v67;
  unint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  float v74;
  float v75;
  float v76;
  float v77;
  double v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  float *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  float32x2_t v92;
  float v93;
  uint32x2_t v94;
  __int128 *v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  unint64_t v102;
  float v103;
  float v104;
  unsigned int v105;
  float v106;
  unint64_t v107;
  float v108;
  float v109;
  unsigned int v110;
  float v111;
  float v112;
  int v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  unsigned int v126;
  float v127;
  float v128;
  unsigned int v129;
  float v130;
  float v131;
  int v132;
  float v133;
  float v134;
  float v135;
  float v136;
  double v137;
  float v138;
  float v139;
  float v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  float v145;
  float v146;
  unsigned int v147;
  float v148;
  float v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  float *v159;
  unsigned int v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  double v174;
  float v175;
  float v176;
  float v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  float v181;
  float v182;
  unsigned int v183;
  float v184;
  float v185;
  float v186;
  float v187;
  unsigned int v188;
  double v189;
  float v190;
  float v191;
  float v192;
  float v193;
  int v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  int v208;
  float v209;
  float v210;
  float v211;
  float v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  float v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  float v259;
  int v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  int v271;
  double v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  int v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  int v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  int v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  int v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  int v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  int v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  int v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  int v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  int v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  int v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  int v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  int v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  int v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  int v453;
  float v454;
  float v455;
  float v456;
  float v457;
  float v458;
  float v459;
  float v460;
  float v461;
  float v462;
  float v463;
  float v464;
  int v465;
  float v466;
  float v467;
  float v468;
  float v469;
  float v470;
  float v471;
  float v472;
  float v473;
  float v474;
  float v475;
  float v476;
  float v477;
  int v478;
  float v479;
  float v480;
  float v481;
  float v482;
  float v483;
  float v484;
  float v485;
  float v486;
  float v487;
  float v488;
  float v489;
  float v490;
  float v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  float v497;
  float v498;
  float v499;
  float v500;
  float v501;
  float v502;
  float v503;
  float v504;
  float v505;
  int v506;
  float v507;
  float v508;
  float v509;
  float v510;
  float v511;
  float v512;
  int v513;
  float v514;
  float v515;
  float v516;
  float v517;
  float v518;
  float v519;
  float v520;
  float v521;
  float v522;
  BOOL v523;
  float v524;
  float v525;
  int v526;
  float v527;
  float v528;
  float v529;
  float v530;
  float v531;
  float v532;
  int v533;
  float v534;
  float v535;
  float v536;
  float v537;
  float v538;
  int v539;
  float v540;
  float v541;
  float v542;
  float v543;
  float v544;
  float v545;
  float v546;
  float v547;
  int v548;
  float v549;
  float v550;
  float v551;
  float v552;
  float v553;
  int v554;
  float v555;
  float v556;
  float v557;
  float v558;
  float v559;
  int v560;
  float v561;
  float v562;
  float v563;
  float v564;
  float v565;
  int v566;
  float v567;
  float v568;
  float v569;
  float v570;
  float v571;
  int v572;
  float v573;
  float v574;
  float v575;
  float v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int v579;
  float v580;
  float v581;
  int v582;
  float v583;
  float v584;
  float v585;
  float v586;
  float v587;
  int v588;
  float v589;
  float v590;
  float v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int v594;
  unsigned int v595;
  float v596;
  float v597;
  int v598;
  float v599;
  float v600;
  float v601;
  float v602;
  float v603;
  float v604;
  float v605;
  int v606;
  float v607;
  float v608;
  float v609;
  unsigned int v610;
  unsigned int v611;
  unsigned int v612;
  unsigned int v613;
  float v614;
  float v615;
  int v616;
  float v617;
  float v618;
  float v619;
  float v620;
  float v621;
  int v622;
  float v623;
  float v624;
  float v625;
  float v626;
  float v627;
  int v628;
  float v629;
  float v630;
  float v631;
  BOOL v632;
  float v633;
  float v634;
  int v635;
  float v636;
  float v637;
  float v638;
  float v639;
  float v640;
  int v641;
  float v642;
  float v643;
  float v644;
  float *v645;
  float *v646;
  float *v647;
  float *v648;
  float v649;
  unsigned int v650;
  unsigned int v651;
  unsigned int v652;
  float v653;
  unsigned int v654;
  unsigned int v655;
  unsigned int v656;
  float v657;
  unsigned int v658;
  unsigned int v659;
  unsigned int v660;
  float v661;
  unsigned int v662;
  unsigned int v663;
  unsigned int v664;
  float v665;
  unsigned int v666;
  unsigned int v667;
  unsigned int v668;
  float v669;
  unsigned int v670;
  unsigned int v671;
  unsigned int v672;
  float v673;
  unsigned int v674;
  unsigned int v675;
  unsigned int v676;
  float v677;
  unsigned int v678;
  unsigned int v679;
  unsigned int v680;
  float v681;
  unsigned int v682;
  unsigned int v683;
  unsigned int v684;
  float v685;
  unsigned int v686;
  unsigned int v687;
  unsigned int v688;
  float v689;
  unsigned int v690;
  unsigned int v691;
  unsigned int v692;
  float v693;
  unsigned int v694;
  unsigned int v695;
  unsigned int v696;
  float v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int v700;
  float v701;
  unsigned int v702;
  unsigned int v703;
  unsigned int v704;
  float v705;
  unsigned int v706;
  unsigned int v707;
  unsigned int v708;
  float v709;
  unsigned int v710;
  unsigned int v711;
  unsigned int v712;
  float v713;
  unsigned int v714;
  unsigned int v715;
  unsigned int v716;
  float v717;
  float v718;
  float v719;
  float v720;
  float v721;
  float v722;
  float v723;
  float v724;
  float v725;
  float v726;
  float v727;
  unsigned int v728;
  unsigned int v729;
  unsigned int v730;
  unsigned int v731;
  float *v732;
  unsigned int v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int v736;
  float v737;
  float v738;
  float v739;
  unsigned int v740;
  unsigned int v741;
  unsigned int v742;
  unsigned int v743;
  float *v744;
  unsigned int v745;
  unsigned int v746;
  unsigned int v747;
  unsigned int v748;
  float v749;
  float v750;
  float v751;
  unsigned int v752;
  unsigned int v753;
  unsigned int v754;
  unsigned int v755;
  float v756;
  float v757;
  float v758;
  unsigned int v759;
  unsigned int v760;
  unsigned int v761;
  unsigned int v762;
  float v763;
  float v764;
  float v765;
  unsigned int v766;
  unsigned int v767;
  unsigned int v768;
  unsigned int v769;
  float v770;
  float v771;
  float v772;
  unsigned int v773;
  unsigned int v774;
  unsigned int v775;
  unsigned int v776;
  float *v777;
  unsigned int v778;
  unsigned int v779;
  unsigned int v780;
  unsigned int v781;
  float *v782;
  unsigned int v783;
  unsigned int v784;
  unsigned int v785;
  unsigned int v786;
  float *v787;
  unsigned int v788;
  unsigned int v789;
  unsigned int v790;
  unsigned int v791;
  float v792;
  float v793;
  float v794;
  float *v795;
  unsigned int v796;
  unsigned int v797;
  unsigned int v798;
  unsigned int v799;
  float *v800;
  unsigned int v801;
  unsigned int v802;
  unsigned int v803;
  unsigned int v804;
  float v805;
  float v806;
  float v807;
  unsigned int v808;
  unsigned int v809;
  unsigned int v810;
  unsigned int v811;
  float v812;
  float v813;
  float v814;
  unsigned int v815;
  unsigned int v816;
  unsigned int v817;
  unsigned int v818;
  float v819;
  float v820;
  float v821;
  unsigned int v822;
  unsigned int v823;
  unsigned int v824;
  unsigned int v825;
  float *v826;
  unsigned int v827;
  unsigned int v828;
  unsigned int v829;
  unsigned int v830;
  float *v831;
  float v832;
  float v833;
  float v834;
  float v835;
  float v836;
  float v837;
  float v838;
  float v839;
  float v840;
  float v841;
  float v842;
  float v843;
  float v844;
  float v845;
  BOOL v846;
  double v847;
  float v848;
  float v849;
  float v850;
  float v851;
  float v852;
  float v853;
  float v854;
  float v855;
  float v856;
  float v857;
  float v858;
  float v859;
  float v860;
  float v861;
  float v862;
  float v863;
  float v864;
  float v865;
  float v866;
  float v867;
  float v868;
  float v869;
  float v870;
  float v871;
  float v872;
  float v873;
  float v874;
  float v875;
  float v876;
  float v877;
  float v878;
  float v879;
  float v880;
  float v881;
  float v882;
  float v883;
  float v884;
  float v885;
  float v886;
  float v887;
  float v888;
  float v889;
  float v890;
  float v891;
  float v892;
  float v893;
  float v894;
  float v895;
  float v896;
  double v897;
  BOOL v898;
  float v899;
  float v900;
  float v901;
  unsigned int v902;
  unsigned int v903;
  unsigned int v904;
  unsigned int v905;
  float v906;
  float v907;
  float v908;
  float v909;
  float v910;
  float v911;
  float v912;
  float v913;
  float v914;
  float v915;
  float v916;
  float v917;
  unsigned int v918;
  unsigned int v919;
  unsigned int v920;
  unsigned int v921;
  float *v922;
  unsigned int v923;
  unsigned int v924;
  unsigned int v925;
  unsigned int v926;
  float v927;
  float v928;
  float v929;
  float v930;
  float v931;
  float v932;
  float v933;
  unsigned int v934;
  unsigned int v935;
  unsigned int v936;
  unsigned int v937;
  float *v938;
  unsigned int v939;
  unsigned int v940;
  unsigned int v941;
  unsigned int v942;
  float *v943;
  unsigned int v944;
  unsigned int v945;
  unsigned int v946;
  unsigned int v947;
  float *v948;
  unsigned int v949;
  unsigned int v950;
  unsigned int v951;
  unsigned int v952;
  float *v953;
  unsigned int v954;
  unsigned int v955;
  unsigned int v956;
  unsigned int v957;
  float *v958;
  unsigned int v959;
  unsigned int v960;
  unsigned int v961;
  unsigned int v962;
  float *v963;
  unsigned int v964;
  unsigned int v965;
  unsigned int v966;
  unsigned int v967;
  float *v968;
  unsigned int v969;
  unsigned int v970;
  unsigned int v971;
  unsigned int v972;
  float *v973;
  unsigned int v974;
  unsigned int v975;
  unsigned int v976;
  unsigned int v977;
  float *v978;
  unsigned int v979;
  unsigned int v980;
  unsigned int v981;
  unsigned int v982;
  float *v983;
  unsigned int v984;
  unsigned int v985;
  unsigned int v986;
  unsigned int v987;
  float *v988;
  unsigned int v989;
  unsigned int v990;
  unsigned int v991;
  unsigned int v992;
  float *v993;
  unsigned int v994;
  unsigned int v995;
  unsigned int v996;
  unsigned int v997;
  float v998;
  float v999;
  unsigned int v1000;
  unsigned int v1001;
  unsigned int v1002;
  unsigned int v1003;
  float v1004;
  float v1005;
  float v1006;
  float v1007;
  float v1008;
  float v1009;
  float v1010;
  float v1011;
  float v1012;
  float v1013;
  float v1014;
  float v1015;
  float v1016;
  float v1017;
  BOOL v1018;
  float v1019;
  float v1020;
  float v1021;
  int v1022;
  float v1023;
  float v1024;
  float v1025;
  float v1026;
  float v1027;
  float v1028;
  float v1029;
  float v1030;
  float v1031;
  float v1032;
  float v1033;
  float v1034;
  float v1035;
  float v1036;
  int v1037;
  float v1038;
  unsigned int v1039;
  unsigned int v1040;
  unsigned int v1041;
  unsigned int v1042;
  unsigned int v1043;
  unsigned int v1044;
  unsigned int v1045;
  unsigned int v1046;
  unsigned int v1047;
  unsigned int v1048;
  unsigned int v1049;
  BOOL v1050;
  float v1051;
  float v1052;
  float v1053;
  int v1054;
  float v1055;
  float v1056;
  float v1057;
  float v1058;
  float v1059;
  float v1060;
  float v1061;
  float v1062;
  float v1063;
  float v1064;
  BOOL v1065;
  float v1066;
  float v1067;
  float v1068;
  float v1069;
  float v1070;
  float v1071;
  float v1072;
  unsigned int v1073;
  unsigned int v1074;
  unsigned int v1075;
  unsigned int v1076;
  float v1077;
  float v1078;
  float v1079;
  BOOL v1080;
  double v1081;
  BOOL v1082;
  float v1083;
  float v1084;
  float v1085;
  float v1086;
  float v1087;
  __int128 v1088;
  float v1089;
  float v1090;
  float v1091;
  unsigned int v1092;
  __int128 v1093;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      v5 = *a3;
      v4 = a3[1];
      v6 = a3[2];
      if ((*a2 & 0x8000000000000) != 0)
      {
        v109 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
        v108 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8);
        v111 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC);
        v110 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v3))
        {
          case 0u:
            v259 = a3[1];
            v1085 = a3[2];
            v260 = *(_DWORD *)a3;
            v261 = powf(fabsf(v5), 2.1992);
            if (v260 < 0)
              v261 = -v261;
            if (v261 > 0.0)
              v262 = v261;
            else
              v262 = 0.0;
            if (v261 >= 1.0)
              v263 = 1.0;
            else
              v263 = v262;
            v264 = powf(fabsf(v259), 2.1992);
            if (v259 < 0.0)
              v264 = -v264;
            if (v264 > 0.0)
              v265 = v264;
            else
              v265 = 0.0;
            if (v264 >= 1.0)
              v266 = 1.0;
            else
              v266 = v265;
            v267 = powf(fabsf(v1085), 2.1992);
            if (v1085 < 0.0)
              v267 = -v267;
            if (v267 > 0.0)
              v268 = v267;
            else
              v268 = 0.0;
            if (v267 >= 1.0)
              v269 = 1.0;
            else
              v269 = v268;
            v1083 = (float)((float)((float)(v263 * 0.29734) + 0.0) + (float)(v266 * 0.62736)) + (float)(v269 * 0.075291);
            v270 = fabsf(v109);
            v271 = LODWORD(v109);
            v272 = v1083;
            v273 = powf(v270, 2.1992);
            if (v271 < 0)
              v273 = -v273;
            if (v273 > 0.0)
              v274 = v273;
            else
              v274 = 0.0;
            if (v273 >= 1.0)
              v275 = 1.0;
            else
              v275 = v274;
            v276 = powf(fabsf(v108), 2.1992);
            if (v108 < 0.0)
              v276 = -v276;
            if (v276 > 0.0)
              v277 = v276;
            else
              v277 = 0.0;
            if (v276 >= 1.0)
              v278 = 1.0;
            else
              v278 = v277;
            v279 = powf(fabsf(v111), 2.1992);
            if (v111 < 0.0)
              v279 = -v279;
            if (v279 > 0.0)
              v280 = v279;
            else
              v280 = 0.0;
            if (v279 >= 1.0)
              v281 = 1.0;
            else
              v281 = v280;
            v282 = (float)((float)((float)(v275 * 0.29734) + 0.0) + (float)(v278 * 0.62736)) + (float)(v281 * 0.075291);
            goto LABEL_737;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v283 = v4;
            v284 = v6;
            v285 = LODWORD(v5);
            v286 = powf(fabsf(v5), 2.1992);
            if (v285 < 0)
              v286 = -v286;
            if (v286 > 0.0)
              v287 = v286;
            else
              v287 = 0.0;
            if (v286 >= 1.0)
              v288 = 1.0;
            else
              v288 = v287;
            v289 = powf(fabsf(v283), 2.1992);
            if (v283 < 0.0)
              v289 = -v289;
            if (v289 > 0.0)
              v290 = v289;
            else
              v290 = 0.0;
            if (v289 >= 1.0)
              v291 = 1.0;
            else
              v291 = v290;
            v292 = powf(fabsf(v284), 2.1992);
            if (v284 < 0.0)
              v292 = -v292;
            if (v292 > 0.0)
              v293 = v292;
            else
              v293 = 0.0;
            if (v292 >= 1.0)
              v294 = 1.0;
            else
              v294 = v293;
            v295 = v288;
            goto LABEL_747;
          case 2u:
            v296 = a3[1];
            v1086 = a3[2];
            v297 = *(_DWORD *)a3;
            v298 = powf(fabsf(v5), 2.1992);
            if (v297 < 0)
              v298 = -v298;
            if (v298 > 0.0)
              v299 = v298;
            else
              v299 = 0.0;
            if (v298 >= 1.0)
              v300 = 1.0;
            else
              v300 = v299;
            v301 = powf(fabsf(v296), 2.1992);
            if (v296 < 0.0)
              v301 = -v301;
            if (v301 > 0.0)
              v302 = v301;
            else
              v302 = 0.0;
            if (v301 >= 1.0)
              v303 = 1.0;
            else
              v303 = v302;
            v304 = powf(fabsf(v1086), 2.1992);
            if (v1086 < 0.0)
              v304 = -v304;
            if (v304 > 0.0)
              v305 = v304;
            else
              v305 = 0.0;
            if (v304 >= 1.0)
              v306 = 1.0;
            else
              v306 = v305;
            v307 = v300;
            goto LABEL_757;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v308 = v4;
            v309 = v6;
            v310 = LODWORD(v5);
            v311 = powf(fabsf(v5), 2.1992);
            if (v310 < 0)
              v311 = -v311;
            if (v311 > 0.0)
              v312 = v311;
            else
              v312 = 0.0;
            if (v311 >= 1.0)
              v313 = 1.0;
            else
              v313 = v312;
            v314 = powf(fabsf(v308), 2.1992);
            if (v308 < 0.0)
              v314 = -v314;
            if (v314 > 0.0)
              v315 = v314;
            else
              v315 = 0.0;
            if (v314 >= 1.0)
              v316 = 1.0;
            else
              v316 = v315;
            v317 = powf(fabsf(v309), 2.1992);
            if (v309 < 0.0)
              v317 = -v317;
            if (v317 > 0.0)
              v318 = v317;
            else
              v318 = 0.0;
            if (v317 >= 1.0)
              v319 = 1.0;
            else
              v319 = v318;
            v320 = v313;
            goto LABEL_775;
          case 4u:
          case 0xCu:
            v112 = a3[1];
            v1084 = a3[2];
            v113 = *(_DWORD *)a3;
            v114 = powf(fabsf(v5), 2.1992);
            if (v113 < 0)
              v114 = -v114;
            if (v114 > 0.0)
              v115 = v114;
            else
              v115 = 0.0;
            if (v114 >= 1.0)
              v116 = 1.0;
            else
              v116 = v115;
            v117 = powf(fabsf(v112), 2.1992);
            if (v112 < 0.0)
              v117 = -v117;
            if (v117 > 0.0)
              v118 = v117;
            else
              v118 = 0.0;
            if (v117 >= 1.0)
              v119 = 1.0;
            else
              v119 = v118;
            v120 = powf(fabsf(v1084), 2.1992);
            if (v1084 < 0.0)
              v120 = -v120;
            if (v120 > 0.0)
              v121 = v120;
            else
              v121 = 0.0;
            if (v120 >= 1.0)
              v122 = 1.0;
            else
              v122 = v121;
            v123 = v116;
            goto LABEL_127;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v321 = v4;
            v322 = v6;
            v323 = LODWORD(v5);
            v324 = powf(fabsf(v5), 2.1992);
            if (v323 < 0)
              v324 = -v324;
            if (v324 > 0.0)
              v325 = v324;
            else
              v325 = 0.0;
            if (v324 >= 1.0)
              v326 = 1.0;
            else
              v326 = v325;
            v327 = powf(fabsf(v321), 2.1992);
            if (v321 < 0.0)
              v327 = -v327;
            if (v327 > 0.0)
              v328 = v327;
            else
              v328 = 0.0;
            if (v327 >= 1.0)
              v329 = 1.0;
            else
              v329 = v328;
            v330 = powf(fabsf(v322), 2.1992);
            if (v322 < 0.0)
              v330 = -v330;
            if (v330 > 0.0)
              v331 = v330;
            else
              v331 = 0.0;
            if (v330 >= 1.0)
              v332 = 1.0;
            else
              v332 = v331;
            v333 = v326;
            goto LABEL_785;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v334 = v4;
            v335 = v6;
            v336 = LODWORD(v5);
            v337 = powf(fabsf(v5), 2.1992);
            if (v336 < 0)
              v337 = -v337;
            if (v337 > 0.0)
              v338 = v337;
            else
              v338 = 0.0;
            if (v337 >= 1.0)
              v339 = 1.0;
            else
              v339 = v338;
            v340 = powf(fabsf(v334), 2.1992);
            if (v334 < 0.0)
              v340 = -v340;
            if (v340 > 0.0)
              v341 = v340;
            else
              v341 = 0.0;
            if (v340 >= 1.0)
              v342 = 1.0;
            else
              v342 = v341;
            v343 = powf(fabsf(v335), 2.1992);
            if (v335 < 0.0)
              v343 = -v343;
            if (v343 > 0.0)
              v344 = v343;
            else
              v344 = 0.0;
            if (v343 >= 1.0)
              v345 = 1.0;
            else
              v345 = v344;
            v346 = v339;
            goto LABEL_795;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v347 = v4;
            v348 = v6;
            v349 = LODWORD(v5);
            v350 = powf(fabsf(v5), 2.1992);
            if (v349 < 0)
              v350 = -v350;
            if (v350 > 0.0)
              v351 = v350;
            else
              v351 = 0.0;
            if (v350 >= 1.0)
              v352 = 1.0;
            else
              v352 = v351;
            v353 = powf(fabsf(v347), 2.1992);
            if (v347 < 0.0)
              v353 = -v353;
            if (v353 > 0.0)
              v354 = v353;
            else
              v354 = 0.0;
            if (v353 >= 1.0)
              v355 = 1.0;
            else
              v355 = v354;
            v356 = powf(fabsf(v348), 2.1992);
            if (v348 < 0.0)
              v356 = -v356;
            if (v356 > 0.0)
              v357 = v356;
            else
              v357 = 0.0;
            if (v356 >= 1.0)
              v358 = 1.0;
            else
              v358 = v357;
            v359 = v352;
            goto LABEL_805;
          case 8u:
            v1089 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v108;
            v1091 = v111;
            v1092 = v110;
            v360 = v4;
            v361 = v6;
            v362 = LODWORD(v5);
            v363 = powf(fabsf(v5), 2.1992);
            if (v362 < 0)
              v363 = -v363;
            if (v363 > 0.0)
              v364 = v363;
            else
              v364 = 0.0;
            if (v363 >= 1.0)
              v365 = 1.0;
            else
              v365 = v364;
            v366 = powf(fabsf(v360), 2.1992);
            if (v360 < 0.0)
              v366 = -v366;
            if (v366 > 0.0)
              v367 = v366;
            else
              v367 = 0.0;
            if (v366 >= 1.0)
              v368 = 1.0;
            else
              v368 = v367;
            v369 = powf(fabsf(v361), 2.1992);
            if (v361 < 0.0)
              v369 = -v369;
            if (v369 > 0.0)
              v370 = v369;
            else
              v370 = 0.0;
            if (v369 >= 1.0)
              v371 = 1.0;
            else
              v371 = v370;
            v372 = v365;
            goto LABEL_815;
          case 9u:
            v1089 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v108;
            v1091 = v111;
            v1092 = v110;
            v373 = v4;
            v374 = v6;
            v375 = LODWORD(v5);
            v376 = powf(fabsf(v5), 2.1992);
            if (v375 < 0)
              v376 = -v376;
            if (v376 > 0.0)
              v377 = v376;
            else
              v377 = 0.0;
            if (v376 >= 1.0)
              v378 = 1.0;
            else
              v378 = v377;
            v379 = powf(fabsf(v373), 2.1992);
            if (v373 < 0.0)
              v379 = -v379;
            if (v379 > 0.0)
              v380 = v379;
            else
              v380 = 0.0;
            if (v379 >= 1.0)
              v381 = 1.0;
            else
              v381 = v380;
            v382 = powf(fabsf(v374), 2.1992);
            if (v374 < 0.0)
              v382 = -v382;
            if (v382 > 0.0)
              v383 = v382;
            else
              v383 = 0.0;
            if (v382 >= 1.0)
              v384 = 1.0;
            else
              v384 = v383;
            v385 = v378;
            goto LABEL_825;
          case 0xAu:
            v1089 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v108;
            v1091 = v111;
            v1092 = v110;
            v386 = v4;
            v387 = v6;
            v388 = LODWORD(v5);
            v389 = powf(fabsf(v5), 2.1992);
            if (v388 < 0)
              v389 = -v389;
            if (v389 > 0.0)
              v390 = v389;
            else
              v390 = 0.0;
            if (v389 >= 1.0)
              v391 = 1.0;
            else
              v391 = v390;
            v392 = powf(fabsf(v386), 2.1992);
            if (v386 < 0.0)
              v392 = -v392;
            if (v392 > 0.0)
              v393 = v392;
            else
              v393 = 0.0;
            if (v392 >= 1.0)
              v394 = 1.0;
            else
              v394 = v393;
            v395 = powf(fabsf(v387), 2.1992);
            if (v387 < 0.0)
              v395 = -v395;
            if (v395 > 0.0)
              v396 = v395;
            else
              v396 = 0.0;
            if (v395 >= 1.0)
              v397 = 1.0;
            else
              v397 = v396;
            v398 = v391;
            goto LABEL_837;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v399 = v4;
            v400 = v6;
            v401 = LODWORD(v5);
            v402 = powf(fabsf(v5), 2.1992);
            if (v401 < 0)
              v402 = -v402;
            if (v402 > 0.0)
              v403 = v402;
            else
              v403 = 0.0;
            if (v402 >= 1.0)
              v404 = 1.0;
            else
              v404 = v403;
            v405 = powf(fabsf(v399), 2.1992);
            if (v399 < 0.0)
              v405 = -v405;
            if (v405 > 0.0)
              v406 = v405;
            else
              v406 = 0.0;
            if (v405 >= 1.0)
              v407 = 1.0;
            else
              v407 = v406;
            v408 = powf(fabsf(v400), 2.1992);
            if (v400 < 0.0)
              v408 = -v408;
            if (v408 > 0.0)
              v409 = v408;
            else
              v409 = 0.0;
            if (v408 >= 1.0)
              v410 = 1.0;
            else
              v410 = v409;
            v411 = v404;
            goto LABEL_847;
          case 0xDu:
            v1089 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v108;
            v1091 = v111;
            v1092 = v110;
            v412 = v4;
            v413 = v6;
            v414 = LODWORD(v5);
            v415 = powf(fabsf(v5), 2.1992);
            if (v414 < 0)
              v415 = -v415;
            if (v415 > 0.0)
              v416 = v415;
            else
              v416 = 0.0;
            if (v415 >= 1.0)
              v417 = 1.0;
            else
              v417 = v416;
            v418 = powf(fabsf(v412), 2.1992);
            if (v412 < 0.0)
              v418 = -v418;
            if (v418 > 0.0)
              v419 = v418;
            else
              v419 = 0.0;
            if (v418 >= 1.0)
              v420 = 1.0;
            else
              v420 = v419;
            v421 = powf(fabsf(v413), 2.1992);
            if (v413 < 0.0)
              v421 = -v421;
            if (v421 > 0.0)
              v422 = v421;
            else
              v422 = 0.0;
            if (v421 >= 1.0)
              v423 = 1.0;
            else
              v423 = v422;
            v424 = v417;
            goto LABEL_858;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v425 = v4;
            v426 = v6;
            v427 = LODWORD(v5);
            v428 = powf(fabsf(v5), 2.1992);
            if (v427 < 0)
              v428 = -v428;
            if (v428 > 0.0)
              v429 = v428;
            else
              v429 = 0.0;
            if (v428 >= 1.0)
              v430 = 1.0;
            else
              v430 = v429;
            v431 = powf(fabsf(v425), 2.1992);
            if (v425 < 0.0)
              v431 = -v431;
            if (v431 > 0.0)
              v432 = v431;
            else
              v432 = 0.0;
            if (v431 >= 1.0)
              v433 = 1.0;
            else
              v433 = v432;
            v434 = powf(fabsf(v426), 2.1992);
            if (v426 < 0.0)
              v434 = -v434;
            if (v434 > 0.0)
              v435 = v434;
            else
              v435 = 0.0;
            if (v434 >= 1.0)
              v436 = 1.0;
            else
              v436 = v435;
            v437 = v430;
            goto LABEL_868;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v438 = v4;
            v439 = v6;
            v440 = LODWORD(v5);
            v441 = powf(fabsf(v5), 2.1992);
            if (v440 < 0)
              v441 = -v441;
            if (v441 > 0.0)
              v442 = v441;
            else
              v442 = 0.0;
            if (v441 >= 1.0)
              v443 = 1.0;
            else
              v443 = v442;
            v444 = powf(fabsf(v438), 2.1992);
            if (v438 < 0.0)
              v444 = -v444;
            if (v444 > 0.0)
              v445 = v444;
            else
              v445 = 0.0;
            if (v444 >= 1.0)
              v446 = 1.0;
            else
              v446 = v445;
            v447 = powf(fabsf(v439), 2.1992);
            if (v439 < 0.0)
              v447 = -v447;
            if (v447 > 0.0)
              v448 = v447;
            else
              v448 = 0.0;
            if (v447 >= 1.0)
              v449 = 1.0;
            else
              v449 = v448;
            v450 = v443;
            goto LABEL_879;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v451 = v4;
            v452 = v6;
            v453 = LODWORD(v5);
            v454 = powf(fabsf(v5), 2.1992);
            if (v453 < 0)
              v454 = -v454;
            if (v454 > 0.0)
              v455 = v454;
            else
              v455 = 0.0;
            if (v454 >= 1.0)
              v456 = 1.0;
            else
              v456 = v455;
            v457 = powf(fabsf(v451), 2.1992);
            if (v451 < 0.0)
              v457 = -v457;
            if (v457 > 0.0)
              v458 = v457;
            else
              v458 = 0.0;
            if (v457 >= 1.0)
              v459 = 1.0;
            else
              v459 = v458;
            v460 = powf(fabsf(v452), 2.1992);
            if (v452 < 0.0)
              v460 = -v460;
            if (v460 > 0.0)
              v461 = v460;
            else
              v461 = 0.0;
            if (v460 >= 1.0)
              v462 = 1.0;
            else
              v462 = v461;
            v463 = v456;
            goto LABEL_889;
          case 0x12u:
            v464 = a3[1];
            v1087 = a3[2];
            v465 = *(_DWORD *)a3;
            v466 = powf(fabsf(v5), 2.1992);
            if (v465 < 0)
              v466 = -v466;
            if (v466 > 0.0)
              v467 = v466;
            else
              v467 = 0.0;
            if (v466 >= 1.0)
              v468 = 1.0;
            else
              v468 = v467;
            v469 = powf(fabsf(v464), 2.1992);
            if (v464 < 0.0)
              v469 = -v469;
            if (v469 > 0.0)
              v470 = v469;
            else
              v470 = 0.0;
            if (v469 >= 1.0)
              v471 = 1.0;
            else
              v471 = v470;
            v472 = powf(fabsf(v1087), 2.1992);
            if (v1087 < 0.0)
              v472 = -v472;
            if (v472 > 0.0)
              v473 = v472;
            else
              v473 = 0.0;
            if (v472 >= 1.0)
              v474 = 1.0;
            else
              v474 = v473;
            v475 = v468;
            goto LABEL_901;
          case 0x13u:
            v476 = a3[1];
            v477 = a3[2];
            v478 = *(_DWORD *)a3;
            v479 = powf(fabsf(v5), 2.1992);
            if (v478 < 0)
              v479 = -v479;
            if (v479 > 0.0)
              v480 = v479;
            else
              v480 = 0.0;
            if (v479 >= 1.0)
              v481 = 1.0;
            else
              v481 = v480;
            v482 = powf(fabsf(v476), 2.1992);
            if (v476 < 0.0)
              v482 = -v482;
            if (v482 > 0.0)
              v483 = v482;
            else
              v483 = 0.0;
            if (v482 >= 1.0)
              v484 = 1.0;
            else
              v484 = v483;
            v485 = powf(fabsf(v477), 2.1992);
            if (v477 < 0.0)
              v485 = -v485;
            if (v485 > 0.0)
              v486 = v485;
            else
              v486 = 0.0;
            if (v485 >= 1.0)
              v487 = 1.0;
            else
              v487 = v486;
            v488 = v481;
            goto LABEL_912;
          default:
            LODWORD(v1093) = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v110;
            v192 = v4;
            v193 = v6;
            v194 = LODWORD(v5);
            v195 = powf(fabsf(v5), 2.1992);
            if (v194 < 0)
              v195 = -v195;
            if (v195 > 0.0)
              v196 = v195;
            else
              v196 = 0.0;
            if (v195 >= 1.0)
              v197 = 1.0;
            else
              v197 = v196;
            v198 = powf(fabsf(v192), 2.1992);
            if (v192 < 0.0)
              v198 = -v198;
            if (v198 > 0.0)
              v199 = v198;
            else
              v199 = 0.0;
            if (v198 >= 1.0)
              v200 = 1.0;
            else
              v200 = v199;
            v201 = powf(fabsf(v193), 2.1992);
            if (v193 < 0.0)
              v201 = -v201;
            if (v201 > 0.0)
              v202 = v201;
            else
              v202 = 0.0;
            if (v201 >= 1.0)
              v203 = 1.0;
            else
              v203 = v202;
            v204 = v197;
            goto LABEL_199;
        }
      }
      v7 = bswap32(v3);
      v8 = a3[1];
      v9 = a3[2];
      v10 = *(_DWORD *)a3;
      v11 = powf(fabsf(v5), 2.1992);
      if (v10 < 0)
        v11 = -v11;
      if (v11 > 0.0)
        v12 = v11;
      else
        v12 = 0.0;
      if (v11 >= 1.0)
        v13 = 1.0;
      else
        v13 = v12;
      v14 = powf(fabsf(v8), 2.1992);
      if (v8 < 0.0)
        v14 = -v14;
      if (v14 > 0.0)
        v15 = v14;
      else
        v15 = 0.0;
      if (v14 >= 1.0)
        v16 = 1.0;
      else
        v16 = v15;
      v17 = powf(fabsf(v9), 2.1992);
      if (v9 < 0.0)
        v17 = -v17;
      if (v17 > 0.0)
        v18 = v17;
      else
        v18 = 0.0;
      if (v17 >= 1.0)
        v19 = 1.0;
      else
        v19 = v18;
      v20 = v13;
      goto LABEL_41;
    case 1:
      v22 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v22 & 0x8000000000000) != 0)
      {
        v125 = *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
        v124 = *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8);
        v127 = *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC);
        v126 = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v22))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1217;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1244;
          case 2u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1246;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1263;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_157;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1265;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1267;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1269;
          case 8u:
            v1089 = *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1271;
          case 9u:
            v1089 = *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1273;
          case 0xAu:
            v1089 = *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1275;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1277;
          case 0xDu:
            v1089 = *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1279;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1281;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1283;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1285;
          case 0x12u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1287;
          case 0x13u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1298;
          default:
            LODWORD(v1093) = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v126;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_232;
        }
      }
      v23 = bswap32(v22);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
      goto LABEL_78;
    case 2:
      v25 = *a2;
      v27 = *a3;
      v26 = a3[1];
      v28 = a3[2];
      if ((*a2 & 0x8000000000000) != 0)
      {
        v109 = *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
        v108 = *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8);
        v111 = *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC);
        v129 = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v25))
        {
          case 0u:
            v504 = a3[1];
            v505 = a3[2];
            v506 = *(_DWORD *)a3;
            v507 = powf(fabsf(v27), 2.1992);
            if (v506 >= 0)
              v508 = v507;
            else
              v508 = -v507;
            v509 = powf(fabsf(v504), 2.1992);
            if (v504 >= 0.0)
              v510 = v509;
            else
              v510 = -v509;
            v511 = powf(fabsf(v505), 2.1992);
            if (v505 < 0.0)
              v511 = -v511;
            v1083 = (float)((float)((float)(v508 * 0.29734) + 0.0) + (float)(v510 * 0.62736)) + (float)(v511 * 0.075291);
            v512 = fabsf(v109);
            v513 = LODWORD(v109);
            v272 = v1083;
            v514 = powf(v512, 2.1992);
            if (v513 < 0)
              v514 = -v514;
            if (v514 > 0.0)
              v515 = v514;
            else
              v515 = 0.0;
            if (v514 >= 1.0)
              v516 = 1.0;
            else
              v516 = v515;
            v517 = powf(fabsf(v108), 2.1992);
            if (v108 < 0.0)
              v517 = -v517;
            if (v517 > 0.0)
              v518 = v517;
            else
              v518 = 0.0;
            if (v517 >= 1.0)
              v519 = 1.0;
            else
              v519 = v518;
            v520 = powf(fabsf(v111), 2.1992);
            if (v111 < 0.0)
              v520 = -v520;
            if (v520 > 0.0)
              v521 = v520;
            else
              v521 = 0.0;
            if (v520 >= 1.0)
              v522 = 1.0;
            else
              v522 = v521;
            v282 = (float)((float)((float)(v516 * 0.29734) + 0.0) + (float)(v519 * 0.62736)) + (float)(v522 * 0.075291);
LABEL_737:
            v137 = v282;
            v523 = v1083 < v282;
            goto LABEL_1425;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v524 = v26;
            v525 = v28;
            v526 = LODWORD(v27);
            v527 = powf(fabsf(v27), 2.1992);
            if (v526 >= 0)
              v528 = v527;
            else
              v528 = -v527;
            v529 = powf(fabsf(v524), 2.1992);
            if (v524 >= 0.0)
              v291 = v529;
            else
              v291 = -v529;
            v294 = powf(fabsf(v525), 2.1992);
            if (v525 < 0.0)
              v294 = -v294;
            v295 = v528;
LABEL_747:
            v35 = (float)((float)((float)(v295 * 0.29734) + 0.0) + (float)(v291 * 0.62736)) + (float)(v294 * 0.075291);
            v36 = v35;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1093);
            goto LABEL_890;
          case 2u:
            v531 = a3[1];
            v532 = a3[2];
            v533 = *(_DWORD *)a3;
            v534 = powf(fabsf(v27), 2.1992);
            if (v533 >= 0)
              v535 = v534;
            else
              v535 = -v534;
            v536 = powf(fabsf(v531), 2.1992);
            if (v531 >= 0.0)
              v303 = v536;
            else
              v303 = -v536;
            v306 = powf(fabsf(v532), 2.1992);
            if (v532 < 0.0)
              v306 = -v306;
            v307 = v535;
LABEL_757:
            v537 = (float)((float)((float)(v307 * 0.29734) + 0.0) + (float)(v303 * 0.62736)) + (float)(v306 * 0.075291);
            v538 = fabsf(v109);
            v539 = LODWORD(v109);
            v272 = v537;
            v540 = powf(v538, 2.1992);
            if (v539 >= 0)
              v541 = v540;
            else
              v541 = -v540;
            v542 = powf(fabsf(v108), 2.1992);
            if (v108 >= 0.0)
              v543 = v542;
            else
              v543 = -v542;
            v544 = powf(fabsf(v111), 2.1992);
            if (v111 < 0.0)
              v544 = -v544;
            v545 = (float)((float)((float)(v541 * 0.29734) + 0.0) + (float)(v543 * 0.62736)) + (float)(v544 * 0.075291);
            v137 = v545;
            v523 = v537 < v545;
            goto LABEL_1425;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v546 = v26;
            v547 = v28;
            v548 = LODWORD(v27);
            v549 = powf(fabsf(v27), 2.1992);
            if (v548 >= 0)
              v550 = v549;
            else
              v550 = -v549;
            v551 = powf(fabsf(v546), 2.1992);
            if (v546 >= 0.0)
              v316 = v551;
            else
              v316 = -v551;
            v319 = powf(fabsf(v547), 2.1992);
            if (v547 < 0.0)
              v319 = -v319;
            v320 = v550;
LABEL_775:
            v35 = (float)((float)((float)(v320 * 0.29734) + 0.0) + (float)(v316 * 0.62736)) + (float)(v319 * 0.075291);
            v36 = v35;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1093);
            goto LABEL_890;
          case 4u:
          case 0xCu:
            v130 = a3[1];
            v131 = a3[2];
            v132 = *(_DWORD *)a3;
            v133 = powf(fabsf(v27), 2.1992);
            if (v132 >= 0)
              v134 = v133;
            else
              v134 = -v133;
            v135 = powf(fabsf(v130), 2.1992);
            if (v130 >= 0.0)
              v119 = v135;
            else
              v119 = -v135;
            v122 = powf(fabsf(v131), 2.1992);
            if (v131 < 0.0)
              v122 = -v122;
            v123 = v134;
LABEL_127:
            v136 = (float)((float)((float)(v123 * 0.29734) + 0.0) + (float)(v119 * 0.62736)) + (float)(v122 * 0.075291);
            v137 = v136;
            v138 = v111;
            v139 = (float)((float)(v109 * 0.21264) + 0.0) + (float)(v108 * 0.71517);
            v140 = 0.072192;
            goto LABEL_902;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v552 = v26;
            v553 = v28;
            v554 = LODWORD(v27);
            v555 = powf(fabsf(v27), 2.1992);
            if (v554 >= 0)
              v556 = v555;
            else
              v556 = -v555;
            v557 = powf(fabsf(v552), 2.1992);
            if (v552 >= 0.0)
              v329 = v557;
            else
              v329 = -v557;
            v332 = powf(fabsf(v553), 2.1992);
            if (v553 < 0.0)
              v332 = -v332;
            v333 = v556;
LABEL_785:
            v35 = (float)((float)((float)(v333 * 0.29734) + 0.0) + (float)(v329 * 0.62736)) + (float)(v332 * 0.075291);
            v36 = v35;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1093);
            goto LABEL_890;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v558 = v26;
            v559 = v28;
            v560 = LODWORD(v27);
            v561 = powf(fabsf(v27), 2.1992);
            if (v560 >= 0)
              v562 = v561;
            else
              v562 = -v561;
            v563 = powf(fabsf(v558), 2.1992);
            if (v558 >= 0.0)
              v342 = v563;
            else
              v342 = -v563;
            v345 = powf(fabsf(v559), 2.1992);
            if (v559 < 0.0)
              v345 = -v345;
            v346 = v562;
LABEL_795:
            v35 = (float)((float)((float)(v346 * 0.29734) + 0.0) + (float)(v342 * 0.62736)) + (float)(v345 * 0.075291);
            v36 = v35;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1093);
            goto LABEL_890;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v564 = v26;
            v565 = v28;
            v566 = LODWORD(v27);
            v567 = powf(fabsf(v27), 2.1992);
            if (v566 >= 0)
              v568 = v567;
            else
              v568 = -v567;
            v569 = powf(fabsf(v564), 2.1992);
            if (v564 >= 0.0)
              v355 = v569;
            else
              v355 = -v569;
            v358 = powf(fabsf(v565), 2.1992);
            if (v565 < 0.0)
              v358 = -v358;
            v359 = v568;
LABEL_805:
            v35 = (float)((float)((float)(v359 * 0.29734) + 0.0) + (float)(v355 * 0.62736)) + (float)(v358 * 0.075291);
            v36 = v35;
            goto LABEL_827;
          case 8u:
            v1089 = *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v108;
            v1091 = v111;
            v1092 = v129;
            v570 = v26;
            v571 = v28;
            v572 = LODWORD(v27);
            v573 = powf(fabsf(v27), 2.1992);
            if (v572 >= 0)
              v574 = v573;
            else
              v574 = -v573;
            v575 = powf(fabsf(v570), 2.1992);
            if (v570 >= 0.0)
              v368 = v575;
            else
              v368 = -v575;
            v371 = powf(fabsf(v571), 2.1992);
            if (v571 < 0.0)
              v371 = -v371;
            v372 = v574;
LABEL_815:
            v35 = (float)((float)((float)(v372 * 0.29734) + 0.0) + (float)(v368 * 0.62736)) + (float)(v371 * 0.075291);
            v36 = v35;
            v576 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert(&v1089);
            goto LABEL_826;
          case 9u:
            v1089 = *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v108;
            v1091 = v111;
            v1092 = v129;
            v580 = v26;
            v581 = v28;
            v582 = LODWORD(v27);
            v583 = powf(fabsf(v27), 2.1992);
            if (v582 >= 0)
              v584 = v583;
            else
              v584 = -v583;
            v585 = powf(fabsf(v580), 2.1992);
            if (v580 >= 0.0)
              v381 = v585;
            else
              v381 = -v585;
            v384 = powf(fabsf(v581), 2.1992);
            if (v581 < 0.0)
              v384 = -v384;
            v385 = v584;
LABEL_825:
            v35 = (float)((float)((float)(v385 * 0.29734) + 0.0) + (float)(v381 * 0.62736)) + (float)(v384 * 0.075291);
            v36 = v35;
            v576 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1089);
LABEL_826:
            *(_QWORD *)&v1093 = __PAIR64__(v577, LODWORD(v576));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v579, v578);
LABEL_827:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_890;
          case 0xAu:
            v1089 = *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v108;
            v1091 = v111;
            v1092 = v129;
            v586 = v26;
            v587 = v28;
            v588 = LODWORD(v27);
            v589 = powf(fabsf(v27), 2.1992);
            if (v588 >= 0)
              v590 = v589;
            else
              v590 = -v589;
            v591 = powf(fabsf(v586), 2.1992);
            if (v586 >= 0.0)
              v394 = v591;
            else
              v394 = -v591;
            v397 = powf(fabsf(v587), 2.1992);
            if (v587 < 0.0)
              v397 = -v397;
            v398 = v590;
LABEL_837:
            v35 = (float)((float)((float)(v398 * 0.29734) + 0.0) + (float)(v394 * 0.62736)) + (float)(v397 * 0.075291);
            v36 = v35;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1089);
            *(_QWORD *)&v1093 = __PAIR64__(v593, v592);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v595, v594);
            goto LABEL_848;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v596 = v26;
            v597 = v28;
            v598 = LODWORD(v27);
            v599 = powf(fabsf(v27), 2.1992);
            if (v598 >= 0)
              v600 = v599;
            else
              v600 = -v599;
            v601 = powf(fabsf(v596), 2.1992);
            if (v596 >= 0.0)
              v407 = v601;
            else
              v407 = -v601;
            v410 = powf(fabsf(v597), 2.1992);
            if (v597 < 0.0)
              v410 = -v410;
            v411 = v600;
LABEL_847:
            v35 = (float)((float)((float)(v411 * 0.29734) + 0.0) + (float)(v407 * 0.62736)) + (float)(v410 * 0.075291);
            v36 = v35;
LABEL_848:
            v602 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v40 = (float)((float)(v602 * -0.02837) + 0.0) + (float)(v603 * 1.01);
            v41 = 0.021041;
            goto LABEL_43;
          case 0xDu:
            v1089 = *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v108;
            v1091 = v111;
            v1092 = v129;
            v604 = v26;
            v605 = v28;
            v606 = LODWORD(v27);
            v607 = powf(fabsf(v27), 2.1992);
            if (v606 >= 0)
              v608 = v607;
            else
              v608 = -v607;
            v609 = powf(fabsf(v604), 2.1992);
            if (v604 >= 0.0)
              v420 = v609;
            else
              v420 = -v609;
            v423 = powf(fabsf(v605), 2.1992);
            if (v605 < 0.0)
              v423 = -v423;
            v424 = v608;
LABEL_858:
            v35 = (float)((float)((float)(v424 * 0.29734) + 0.0) + (float)(v420 * 0.62736)) + (float)(v423 * 0.075291);
            v36 = v35;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1089);
            *(_QWORD *)&v1093 = __PAIR64__(v611, v610);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v613, v612);
            goto LABEL_869;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v614 = v26;
            v615 = v28;
            v616 = LODWORD(v27);
            v617 = powf(fabsf(v27), 2.1992);
            if (v616 >= 0)
              v618 = v617;
            else
              v618 = -v617;
            v619 = powf(fabsf(v614), 2.1992);
            if (v614 >= 0.0)
              v433 = v619;
            else
              v433 = -v619;
            v436 = powf(fabsf(v615), 2.1992);
            if (v615 < 0.0)
              v436 = -v436;
            v437 = v618;
LABEL_868:
            v35 = (float)((float)((float)(v437 * 0.29734) + 0.0) + (float)(v433 * 0.62736)) + (float)(v436 * 0.075291);
            v36 = v35;
LABEL_869:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
            goto LABEL_890;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v620 = v26;
            v621 = v28;
            v622 = LODWORD(v27);
            v623 = powf(fabsf(v27), 2.1992);
            if (v622 >= 0)
              v624 = v623;
            else
              v624 = -v623;
            v625 = powf(fabsf(v620), 2.1992);
            if (v620 >= 0.0)
              v446 = v625;
            else
              v446 = -v625;
            v449 = powf(fabsf(v621), 2.1992);
            if (v621 < 0.0)
              v449 = -v449;
            v450 = v624;
LABEL_879:
            v35 = (float)((float)((float)(v450 * 0.29734) + 0.0) + (float)(v446 * 0.62736)) + (float)(v449 * 0.075291);
            v36 = v35;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1093);
            goto LABEL_890;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v626 = v26;
            v627 = v28;
            v628 = LODWORD(v27);
            v629 = powf(fabsf(v27), 2.1992);
            if (v628 >= 0)
              v630 = v629;
            else
              v630 = -v629;
            v631 = powf(fabsf(v626), 2.1992);
            if (v626 >= 0.0)
              v459 = v631;
            else
              v459 = -v631;
            v462 = powf(fabsf(v627), 2.1992);
            if (v627 < 0.0)
              v462 = -v462;
            v463 = v630;
LABEL_889:
            v35 = (float)((float)((float)(v463 * 0.29734) + 0.0) + (float)(v459 * 0.62736)) + (float)(v462 * 0.075291);
            v36 = v35;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1093);
LABEL_890:
            v42 = v530;
            goto LABEL_891;
          case 0x12u:
            v633 = a3[1];
            v634 = a3[2];
            v635 = *(_DWORD *)a3;
            v636 = powf(fabsf(v27), 2.1992);
            if (v635 >= 0)
              v637 = v636;
            else
              v637 = -v636;
            v638 = powf(fabsf(v633), 2.1992);
            if (v633 >= 0.0)
              v471 = v638;
            else
              v471 = -v638;
            v474 = powf(fabsf(v634), 2.1992);
            if (v634 < 0.0)
              v474 = -v474;
            v475 = v637;
LABEL_901:
            v136 = (float)((float)((float)(v475 * 0.29734) + 0.0) + (float)(v471 * 0.62736)) + (float)(v474 * 0.075291);
            v137 = v136;
            v138 = v111;
            v139 = (float)((float)(v109 * -0.02837) + 0.0) + (float)(v108 * 1.01);
            v140 = 0.021041;
LABEL_902:
            v164 = v139 + (float)(v138 * v140);
            goto LABEL_1375;
          case 0x13u:
            v639 = a3[1];
            v640 = a3[2];
            v641 = *(_DWORD *)a3;
            v642 = powf(fabsf(v27), 2.1992);
            if (v641 >= 0)
              v643 = v642;
            else
              v643 = -v642;
            v644 = powf(fabsf(v639), 2.1992);
            if (v639 >= 0.0)
              v484 = v644;
            else
              v484 = -v644;
            v487 = powf(fabsf(v640), 2.1992);
            if (v640 < 0.0)
              v487 = -v487;
            v488 = v643;
LABEL_912:
            v136 = (float)((float)((float)(v488 * 0.29734) + 0.0) + (float)(v484 * 0.62736)) + (float)(v487 * 0.075291);
            v137 = v136;
            v164 = v108;
            goto LABEL_1375;
          default:
            LODWORD(v1093) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v111), LODWORD(v108));
            HIDWORD(v1093) = v129;
            v206 = v26;
            v207 = v28;
            v208 = LODWORD(v27);
            v209 = powf(fabsf(v27), 2.1992);
            if (v208 >= 0)
              v210 = v209;
            else
              v210 = -v209;
            v211 = powf(fabsf(v206), 2.1992);
            if (v206 >= 0.0)
              v200 = v211;
            else
              v200 = -v211;
            v203 = powf(fabsf(v207), 2.1992);
            if (v207 < 0.0)
              v203 = -v203;
            v204 = v210;
LABEL_199:
            v35 = (float)((float)((float)(v204 * 0.29734) + 0.0) + (float)(v200 * 0.62736)) + (float)(v203 * 0.075291);
            v36 = v35;
            goto LABEL_42;
        }
      }
      v7 = bswap32(v25);
      v29 = a3[1];
      v30 = a3[2];
      v31 = *(_DWORD *)a3;
      v32 = powf(fabsf(v27), 2.1992);
      if (v31 >= 0)
        v33 = v32;
      else
        v33 = -v32;
      v34 = powf(fabsf(v29), 2.1992);
      if (v29 >= 0.0)
        v16 = v34;
      else
        v16 = -v34;
      v19 = powf(fabsf(v30), 2.1992);
      if (v30 < 0.0)
        v19 = -v19;
      v20 = v33;
LABEL_41:
      v35 = (float)((float)((float)(v20 * 0.29734) + 0.0) + (float)(v16 * 0.62736)) + (float)(v19 * 0.075291);
      *(float *)&v1093 = (float)v7 / 255.0;
      v36 = v35;
      *(float32x2_t *)((char *)&v1093 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v7), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v1093 + 3) = (float)HIBYTE(v7) / 255.0;
LABEL_42:
      v37 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v1093);
      v40 = (float)((float)(v37 * 0.21264) + 0.0) + (float)(v39 * 0.71517);
      v41 = 0.072192;
LABEL_43:
      v42 = v40 + (float)(v38 * v41);
LABEL_891:
      v137 = v42;
      v632 = v35 < v42;
      goto LABEL_1474;
    case 3:
      v43 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v43 & 0x8000000000000) != 0)
      {
        v125 = *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
        v124 = *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 8);
        v127 = *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0xC);
        v141 = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v43))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1217;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1244;
          case 2u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1246;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1263;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_157;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1265;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1267;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1269;
          case 8u:
            v1089 = *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1271;
          case 9u:
            v1089 = *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1273;
          case 0xAu:
            v1089 = *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1275;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1277;
          case 0xDu:
            v1089 = *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1279;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1281;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1283;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1285;
          case 0x12u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1287;
          case 0x13u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1298;
          default:
            LODWORD(v1093) = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v141;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_232;
        }
      }
      v23 = bswap32(v43);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v1088);
      goto LABEL_78;
    case 4:
      v44 = *a2;
      v46 = *a3;
      v45 = a3[1];
      v47 = a3[2];
      if ((*a2 & 0x8000000000000) != 0)
      {
        v49 = *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 4);
        v48 = *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 8);
        v50 = *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 0xC);
        v51 = *(_DWORD *)((v44 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v44))
        {
          case 0u:
            goto LABEL_209;
          case 1u:
            goto LABEL_210;
          case 2u:
            goto LABEL_211;
          case 3u:
            goto LABEL_212;
          case 4u:
          case 0xCu:
            goto LABEL_147;
          case 5u:
            goto LABEL_213;
          case 6u:
            goto LABEL_214;
          case 7u:
            goto LABEL_215;
          case 8u:
            goto LABEL_216;
          case 9u:
            goto LABEL_217;
          case 0xAu:
            goto LABEL_218;
          case 0xBu:
            goto LABEL_219;
          case 0xDu:
            goto LABEL_220;
          case 0xEu:
            goto LABEL_221;
          case 0xFu:
            goto LABEL_222;
          case 0x10u:
            goto LABEL_223;
          case 0x12u:
            goto LABEL_224;
          case 0x13u:
            goto LABEL_225;
          default:
            goto LABEL_163;
        }
      }
      goto LABEL_66;
    case 5:
      v52 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v52 & 0x8000000000000) != 0)
      {
        v125 = *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
        v124 = *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 8);
        v127 = *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 0xC);
        v142 = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v52))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1217;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1244;
          case 2u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1246;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1263;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_157;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1265;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1267;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1269;
          case 8u:
            v1089 = *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1271;
          case 9u:
            v1089 = *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1273;
          case 0xAu:
            v1089 = *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1275;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1277;
          case 0xDu:
            v1089 = *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1279;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1281;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1283;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1285;
          case 0x12u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1287;
          case 0x13u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1298;
          default:
            LODWORD(v1093) = *(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v142;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_232;
        }
      }
      v23 = bswap32(v52);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
      goto LABEL_78;
    case 6:
      v53 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v53 & 0x8000000000000) != 0)
      {
        v125 = *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
        v124 = *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 8);
        v127 = *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 0xC);
        v143 = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v53))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1217;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1244;
          case 2u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1246;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1263;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_157;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1265;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1267;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1269;
          case 8u:
            v1089 = *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1271;
          case 9u:
            v1089 = *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1273;
          case 0xAu:
            v1089 = *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1275;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1277;
          case 0xDu:
            v1089 = *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1279;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1281;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1283;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1285;
          case 0x12u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1287;
          case 0x13u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_1298;
          default:
            LODWORD(v1093) = *(_DWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v143;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
            goto LABEL_232;
        }
      }
      v23 = bswap32(v53);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
      goto LABEL_78;
    case 7:
      v54 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v54 & 0x8000000000000) != 0)
      {
        v125 = *(float *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
        v124 = *(float *)((v54 & 0xFFFFFFFFFFFFLL) + 8);
        v127 = *(float *)((v54 & 0xFFFFFFFFFFFFLL) + 0xC);
        v144 = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v54))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1217;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1244;
          case 2u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1246;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1263;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_157;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1265;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1267;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1269;
          case 8u:
            v1089 = *(float *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v144;
            v645 = (float *)&v1088;
            goto LABEL_1014;
          case 9u:
            v1089 = *(float *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v144;
            v646 = (float *)&v1088;
            goto LABEL_1017;
          case 0xAu:
            v1089 = *(float *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v144;
            v647 = (float *)&v1088;
            goto LABEL_1020;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1277;
          case 0xDu:
            v1089 = *(float *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v144;
            v648 = (float *)&v1088;
            goto LABEL_1025;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1281;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1283;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1285;
          case 0x12u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1287;
          case 0x13u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1298;
          default:
            LODWORD(v1093) = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v144;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1088);
            goto LABEL_232;
        }
      }
      v23 = bswap32(v54);
      v55 = (float *)&v1088;
      goto LABEL_59;
    case 8:
      v56 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v56 & 0x8000000000000) != 0)
      {
        v146 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
        v145 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 8);
        v148 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 0xC);
        v147 = *(_DWORD *)((v56 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v56))
        {
          case 0u:
            v649 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_999;
          case 1u:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v653 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1001;
          case 2u:
            v657 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1003;
          case 3u:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v661 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1005;
          case 4u:
          case 0xCu:
            v149 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_140;
          case 5u:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v665 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1007;
          case 6u:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v669 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1009;
          case 7u:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v673 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1011;
          case 8u:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v677 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1013;
          case 9u:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v681 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1016;
          case 0xAu:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v685 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1019;
          case 0xBu:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v689 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1022;
          case 0xDu:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v693 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1024;
          case 0xEu:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v697 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1027;
          case 0xFu:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v701 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1029;
          case 0x10u:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v705 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1031;
          case 0x12u:
            v709 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1033;
          case 0x13u:
            v713 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_1035;
          default:
            v1089 = *(float *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v147;
            v212 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
            goto LABEL_206;
        }
      }
      v23 = bswap32(v56);
      v57 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v1088);
      goto LABEL_58;
    case 9:
      v61 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v61 & 0x8000000000000) != 0)
      {
        v146 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
        v145 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 8);
        v148 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 0xC);
        v153 = *(_DWORD *)((v61 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v61))
        {
          case 0u:
            v649 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_999:
            *(_QWORD *)&v1093 = __PAIR64__(v650, LODWORD(v649));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v652, v651);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1108;
          case 1u:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v653 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1001:
            *(_QWORD *)&v1093 = __PAIR64__(v654, LODWORD(v653));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v656, v655);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1134;
          case 2u:
            v657 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1003:
            *(_QWORD *)&v1093 = __PAIR64__(v658, LODWORD(v657));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v660, v659);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1137;
          case 3u:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v661 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1005:
            *(_QWORD *)&v1093 = __PAIR64__(v662, LODWORD(v661));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v664, v663);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1148;
          case 4u:
          case 0xCu:
            v149 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_140:
            *(_QWORD *)&v1093 = __PAIR64__(v150, LODWORD(v149));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v152, v151);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_150;
          case 5u:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v665 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1007:
            *(_QWORD *)&v1093 = __PAIR64__(v666, LODWORD(v665));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v668, v667);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1151;
          case 6u:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v669 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1009:
            *(_QWORD *)&v1093 = __PAIR64__(v670, LODWORD(v669));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v672, v671);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1154;
          case 7u:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v673 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1011:
            *(_QWORD *)&v1093 = __PAIR64__(v674, LODWORD(v673));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v676, v675);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1157;
          case 8u:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v677 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1013:
            *(_QWORD *)&v1093 = __PAIR64__(v678, LODWORD(v677));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v680, v679);
            v645 = (float *)&v1093;
LABEL_1014:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v645);
            goto LABEL_1271;
          case 9u:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v681 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1016:
            *(_QWORD *)&v1093 = __PAIR64__(v682, LODWORD(v681));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v684, v683);
            v646 = (float *)&v1093;
LABEL_1017:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v646);
            goto LABEL_1273;
          case 0xAu:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v685 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1019:
            *(_QWORD *)&v1093 = __PAIR64__(v686, LODWORD(v685));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v688, v687);
            v647 = (float *)&v1093;
LABEL_1020:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v647);
            goto LABEL_1275;
          case 0xBu:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v689 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1022:
            *(_QWORD *)&v1093 = __PAIR64__(v690, LODWORD(v689));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v692, v691);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1163;
          case 0xDu:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v693 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1024:
            *(_QWORD *)&v1093 = __PAIR64__(v694, LODWORD(v693));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v696, v695);
            v648 = (float *)&v1093;
LABEL_1025:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v648);
            goto LABEL_1279;
          case 0xEu:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v697 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1027:
            *(_QWORD *)&v1093 = __PAIR64__(v698, LODWORD(v697));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v700, v699);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1166;
          case 0xFu:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v701 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1029:
            *(_QWORD *)&v1093 = __PAIR64__(v702, LODWORD(v701));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v704, v703);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1169;
          case 0x10u:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v705 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1031:
            *(_QWORD *)&v1093 = __PAIR64__(v706, LODWORD(v705));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v708, v707);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1172;
          case 0x12u:
            v709 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1033:
            *(_QWORD *)&v1093 = __PAIR64__(v710, LODWORD(v709));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v712, v711);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1175;
          case 0x13u:
            v713 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_1035:
            *(_QWORD *)&v1093 = __PAIR64__(v714, LODWORD(v713));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v716, v715);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_1177;
          default:
            v1089 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v153;
            v212 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_206:
            *(_QWORD *)&v1093 = __PAIR64__(v213, LODWORD(v212));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v215, v214);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v1093);
            goto LABEL_227;
        }
      }
      v23 = bswap32(v61);
      v57 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1088);
LABEL_58:
      *(_QWORD *)&v1093 = __PAIR64__(v58, LODWORD(v57));
      *((_QWORD *)&v1093 + 1) = __PAIR64__(v60, v59);
      v55 = (float *)&v1093;
LABEL_59:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v55);
      goto LABEL_78;
    case 10:
      v62 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v62 & 0x8000000000000) != 0)
      {
        v146 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
        v145 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 8);
        v148 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 0xC);
        v154 = *(_DWORD *)((v62 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v62))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v729, v728);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v731, v730);
            v732 = (float *)&v1093;
            goto LABEL_1054;
          case 1u:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v734, v733);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v736, v735);
            v737 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v72 = (float)((float)((float)(v737 * -0.02837) + 0.0) + (float)(v738 * 1.01)) + (float)(v739 * 0.021041);
            goto LABEL_1135;
          case 2u:
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v741, v740);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v743, v742);
            v744 = (float *)&v1093;
            goto LABEL_1086;
          case 3u:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v746, v745);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v748, v747);
            v749 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v72 = (float)((float)((float)(v749 * -0.02837) + 0.0) + (float)(v750 * 1.01)) + (float)(v751 * 0.021041);
            goto LABEL_1149;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v156, v155);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v158, v157);
            v159 = (float *)&v1093;
            goto LABEL_145;
          case 5u:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v753, v752);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v755, v754);
            v756 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v72 = (float)((float)((float)(v756 * -0.02837) + 0.0) + (float)(v757 * 1.01)) + (float)(v758 * 0.021041);
            goto LABEL_1152;
          case 6u:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v760, v759);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v762, v761);
            v763 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v72 = (float)((float)((float)(v763 * -0.02837) + 0.0) + (float)(v764 * 1.01)) + (float)(v765 * 0.021041);
            goto LABEL_1155;
          case 7u:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v767, v766);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v769, v768);
            v770 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v72 = (float)((float)((float)(v770 * -0.02837) + 0.0) + (float)(v771 * 1.01)) + (float)(v772 * 0.021041);
            goto LABEL_1158;
          case 8u:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v774, v773);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v776, v775);
            v777 = (float *)&v1093;
            goto LABEL_1092;
          case 9u:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v779, v778);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v781, v780);
            v782 = (float *)&v1093;
            goto LABEL_1094;
          case 0xAu:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v784, v783);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v786, v785);
            v787 = (float *)&v1093;
            goto LABEL_1096;
          case 0xBu:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v789, v788);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v791, v790);
            v792 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v74 = -0.02837;
            v75 = 1.01;
            v76 = 0.021041;
            v77 = (float)((float)((float)(v792 * -0.02837) + 0.0) + (float)(v793 * 1.01)) + (float)(v794 * 0.021041);
            v78 = v77;
            v795 = &v1089;
            goto LABEL_1356;
          case 0xDu:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v797, v796);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v799, v798);
            v800 = (float *)&v1093;
            goto LABEL_1099;
          case 0xEu:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v802, v801);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v804, v803);
            v805 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v72 = (float)((float)((float)(v805 * -0.02837) + 0.0) + (float)(v806 * 1.01)) + (float)(v807 * 0.021041);
            goto LABEL_1167;
          case 0xFu:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v809, v808);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v811, v810);
            v812 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v72 = (float)((float)((float)(v812 * -0.02837) + 0.0) + (float)(v813 * 1.01)) + (float)(v814 * 0.021041);
            goto LABEL_1170;
          case 0x10u:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v816, v815);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v818, v817);
            v819 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v72 = (float)((float)((float)(v819 * -0.02837) + 0.0) + (float)(v820 * 1.01)) + (float)(v821 * 0.021041);
            goto LABEL_1173;
          case 0x12u:
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v823, v822);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v825, v824);
            v826 = (float *)&v1093;
            goto LABEL_1104;
          case 0x13u:
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v828, v827);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v830, v829);
            v831 = (float *)&v1093;
            goto LABEL_1106;
          default:
            v1089 = *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v154;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v218, v217);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v220, v219);
            v221 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1093);
            v72 = (float)((float)((float)(v221 * -0.02837) + 0.0) + (float)(v222 * 1.01)) + (float)(v223 * 0.021041);
            goto LABEL_228;
        }
      }
      v23 = bswap32(v62);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1088);
      *(_QWORD *)&v1093 = __PAIR64__(v64, v63);
      *((_QWORD *)&v1093 + 1) = __PAIR64__(v66, v65);
      v67 = (float *)&v1093;
      goto LABEL_64;
    case 11:
      v68 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v68 & 0x8000000000000) != 0)
      {
        v146 = *(float *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
        v145 = *(float *)((v68 & 0xFFFFFFFFFFFFLL) + 8);
        v148 = *(float *)((v68 & 0xFFFFFFFFFFFFLL) + 0xC);
        v160 = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v68))
        {
          case 0u:
            v732 = (float *)&v1088;
LABEL_1054:
            v832 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v732);
            v835 = (float)((float)((float)(v832 * -0.02837) + 0.0) + (float)(v833 * 1.01)) + (float)(v834 * 0.021041);
            v836 = powf(fabsf(v146), 2.1992);
            if (v146 < 0.0)
              v836 = -v836;
            if (v836 > 0.0)
              v837 = v836;
            else
              v837 = 0.0;
            if (v836 >= 1.0)
              v838 = 1.0;
            else
              v838 = v837;
            v839 = powf(fabsf(v145), 2.1992);
            if (v145 < 0.0)
              v839 = -v839;
            if (v839 > 0.0)
              v840 = v839;
            else
              v840 = 0.0;
            if (v839 >= 1.0)
              v841 = 1.0;
            else
              v841 = v840;
            v842 = powf(fabsf(v148), 2.1992);
            if (v148 < 0.0)
              v842 = -v842;
            if (v842 > 0.0)
              v843 = v842;
            else
              v843 = 0.0;
            if (v842 >= 1.0)
              v844 = 1.0;
            else
              v844 = v843;
            v845 = (float)((float)((float)(v838 * 0.29734) + 0.0) + (float)(v841 * 0.62736)) + (float)(v844 * 0.075291);
            v137 = v845;
            v846 = v835 < v845;
            if (v835 >= v845)
              v847 = v835;
            else
              v847 = v845;
            if (v846)
              v137 = v835;
            break;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v848 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v106 = (float)((float)((float)(v848 * -0.02837) + 0.0) + (float)(v849 * 1.01)) + (float)(v850 * 0.021041);
            goto LABEL_1412;
          case 2u:
            v744 = (float *)&v1088;
LABEL_1086:
            v851 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v744);
            v77 = (float)((float)((float)(v851 * -0.02837) + 0.0) + (float)(v852 * 1.01)) + (float)(v853 * 0.021041);
            goto LABEL_1138;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v854 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v106 = (float)((float)((float)(v854 * -0.02837) + 0.0) + (float)(v855 * 1.01)) + (float)(v856 * 0.021041);
            goto LABEL_1432;
          case 4u:
          case 0xCu:
            v159 = (float *)&v1088;
LABEL_145:
            v161 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v159);
            v136 = (float)((float)((float)(v161 * -0.02837) + 0.0) + (float)(v162 * 1.01)) + (float)(v163 * 0.021041);
            v137 = v136;
            v164 = (float)((float)((float)(v146 * 0.21264) + 0.0) + (float)(v145 * 0.71517)) + (float)(v148 * 0.072192);
            goto LABEL_1375;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v857 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v106 = (float)((float)((float)(v857 * -0.02837) + 0.0) + (float)(v858 * 1.01)) + (float)(v859 * 0.021041);
            goto LABEL_1436;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v860 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v106 = (float)((float)((float)(v860 * -0.02837) + 0.0) + (float)(v861 * 1.01)) + (float)(v862 * 0.021041);
            goto LABEL_1440;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v863 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v106 = (float)((float)((float)(v863 * -0.02837) + 0.0) + (float)(v864 * 1.01)) + (float)(v865 * 0.021041);
            goto LABEL_1444;
          case 8u:
            v1089 = *(float *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v160;
            v777 = (float *)&v1088;
LABEL_1092:
            v866 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v777);
            v106 = (float)((float)((float)(v866 * -0.02837) + 0.0) + (float)(v867 * 1.01)) + (float)(v868 * 0.021041);
            goto LABEL_1344;
          case 9u:
            v1089 = *(float *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v160;
            v782 = (float *)&v1088;
LABEL_1094:
            v869 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v782);
            v106 = (float)((float)((float)(v869 * -0.02837) + 0.0) + (float)(v870 * 1.01)) + (float)(v871 * 0.021041);
            goto LABEL_1348;
          case 0xAu:
            v1089 = *(float *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v160;
            v787 = (float *)&v1088;
LABEL_1096:
            v872 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v787);
            v74 = -0.02837;
            v75 = 1.01;
            v76 = 0.021041;
            v875 = (float)((float)((float)(v872 * -0.02837) + 0.0) + (float)(v873 * 1.01)) + (float)(v874 * 0.021041);
            goto LABEL_1352;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v876 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v74 = -0.02837;
            v75 = 1.01;
            v76 = 0.021041;
            v879 = (float)((float)((float)(v876 * -0.02837) + 0.0) + (float)(v877 * 1.01)) + (float)(v878 * 0.021041);
            goto LABEL_1354;
          case 0xDu:
            v1089 = *(float *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v160;
            v800 = (float *)&v1088;
LABEL_1099:
            v880 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v800);
            v106 = (float)((float)((float)(v880 * -0.02837) + 0.0) + (float)(v881 * 1.01)) + (float)(v882 * 0.021041);
            goto LABEL_1359;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v883 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v106 = (float)((float)((float)(v883 * -0.02837) + 0.0) + (float)(v884 * 1.01)) + (float)(v885 * 0.021041);
            goto LABEL_1460;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v886 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v106 = (float)((float)((float)(v886 * -0.02837) + 0.0) + (float)(v887 * 1.01)) + (float)(v888 * 0.021041);
            goto LABEL_1465;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v889 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v106 = (float)((float)((float)(v889 * -0.02837) + 0.0) + (float)(v890 * 1.01)) + (float)(v891 * 0.021041);
            goto LABEL_1469;
          case 0x12u:
            v826 = (float *)&v1088;
LABEL_1104:
            v892 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v826);
            v895 = (float)((float)((float)(v892 * -0.02837) + 0.0) + (float)(v893 * 1.01)) + (float)(v894 * 0.021041);
            v174 = v895;
            v896 = (float)((float)((float)(v146 * -0.02837) + 0.0) + (float)(v145 * 1.01)) + (float)(v148 * 0.021041);
            v897 = v896;
            v898 = v895 < v896;
            goto LABEL_1291;
          case 0x13u:
            v831 = (float *)&v1088;
LABEL_1106:
            v899 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v831);
            v136 = (float)((float)((float)(v899 * -0.02837) + 0.0) + (float)(v900 * 1.01)) + (float)(v901 * 0.021041);
            v137 = v136;
            v164 = v145;
            goto LABEL_1375;
          default:
            LODWORD(v1093) = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v148), LODWORD(v145));
            HIDWORD(v1093) = v160;
            v224 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v1088);
            v106 = (float)((float)((float)(v224 * -0.02837) + 0.0) + (float)(v225 * 1.01)) + (float)(v226 * 0.021041);
            goto LABEL_236;
        }
        return (v847 + 0.05) / (v137 + 0.05);
      }
      v23 = bswap32(v68);
      v67 = (float *)&v1088;
LABEL_64:
      v69 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v67);
      v72 = (float)((float)((float)(v69 * -0.02837) + 0.0) + (float)(v70 * 1.01)) + (float)(v71 * 0.021041);
      goto LABEL_79;
    case 12:
      v44 = *a2;
      v46 = *a3;
      v45 = a3[1];
      v47 = a3[2];
      if ((*a2 & 0x8000000000000) != 0)
      {
        v49 = *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 4);
        v48 = *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 8);
        v50 = *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 0xC);
        v51 = *(_DWORD *)((v44 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v44))
        {
          case 0u:
LABEL_209:
            v227 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v228 = 0.072192;
            goto LABEL_1300;
          case 1u:
LABEL_210:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v229 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v230 = 0.072192;
            goto LABEL_1326;
          case 2u:
LABEL_211:
            v231 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v232 = 0.072192;
            goto LABEL_1329;
          case 3u:
LABEL_212:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v233 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v234 = 0.072192;
            goto LABEL_1331;
          case 4u:
          case 0xCu:
LABEL_147:
            v165 = 0.21264;
            v166 = 0.71517;
            v167 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v168 = 0.072192;
            goto LABEL_1371;
          case 5u:
LABEL_213:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v235 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v236 = 0.072192;
            goto LABEL_1334;
          case 6u:
LABEL_214:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v237 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v238 = 0.072192;
            goto LABEL_1337;
          case 7u:
LABEL_215:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v239 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v240 = 0.072192;
            goto LABEL_1340;
          case 8u:
LABEL_216:
            v1089 = v49;
            v1090 = v48;
            v1091 = v50;
            v1092 = v51;
            v241 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v242 = 0.072192;
            goto LABEL_1343;
          case 9u:
LABEL_217:
            v1089 = v49;
            v1090 = v48;
            v1091 = v50;
            v1092 = v51;
            v243 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v244 = 0.072192;
            goto LABEL_1347;
          case 0xAu:
LABEL_218:
            v1089 = v49;
            v1090 = v48;
            v1091 = v50;
            v1092 = v51;
            v106 = (float)((float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517)) + (float)(v47 * 0.072192);
            goto LABEL_1451;
          case 0xBu:
LABEL_219:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v106 = (float)((float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517)) + (float)(v47 * 0.072192);
            goto LABEL_1454;
          case 0xDu:
LABEL_220:
            v1089 = v49;
            v1090 = v48;
            v1091 = v50;
            v1092 = v51;
            v245 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v246 = 0.072192;
            goto LABEL_1358;
          case 0xEu:
LABEL_221:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v247 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v248 = 0.072192;
            goto LABEL_1362;
          case 0xFu:
LABEL_222:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v249 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v250 = 0.072192;
            goto LABEL_1365;
          case 0x10u:
LABEL_223:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v251 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v252 = 0.072192;
            goto LABEL_1368;
          case 0x12u:
LABEL_224:
            v136 = (float)((float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517)) + (float)(v47 * 0.072192);
            v137 = v136;
            v184 = (float)((float)(v49 * -0.02837) + 0.0) + (float)(v48 * 1.01);
            v168 = 0.021041;
            goto LABEL_1372;
          case 0x13u:
LABEL_225:
            v253 = (float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517);
            v254 = 0.072192;
            goto LABEL_1374;
          default:
LABEL_163:
            *(_QWORD *)&v1093 = __PAIR64__(LODWORD(v48), LODWORD(v49));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v51, LODWORD(v50));
            v74 = 0.21264;
            v75 = 0.71517;
            v76 = 0.072192;
            v77 = (float)((float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517)) + (float)(v47 * 0.072192);
            v78 = v77;
            goto LABEL_67;
        }
      }
LABEL_66:
      v73 = bswap32(v44);
      v74 = 0.21264;
      v75 = 0.71517;
      v76 = 0.072192;
      v77 = (float)((float)((float)(v46 * 0.21264) + 0.0) + (float)(v45 * 0.71517)) + (float)(v47 * 0.072192);
      *(float *)&v1093 = (float)v73 / 255.0;
      v78 = v77;
      *(float32x2_t *)((char *)&v1093 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v73), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v1093 + 3) = (float)HIBYTE(v73) / 255.0;
LABEL_67:
      v79 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v1093);
LABEL_68:
      v82 = (float)((float)((float)(v79 * v74) + 0.0) + (float)(v80 * v75)) + (float)(v81 * v76);
LABEL_1256:
      v137 = v82;
      v1018 = v77 < v82;
      if (v77 >= v82)
        v847 = v78;
      else
        v847 = v82;
      if (v1018)
        v137 = v78;
      return (v847 + 0.05) / (v137 + 0.05);
    case 13:
      v83 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v83 & 0x8000000000000) != 0)
      {
        v146 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
        v145 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 8);
        v148 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 0xC);
        v169 = *(_DWORD *)((v83 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v83))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v903, v902);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v905, v904);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1108:
            v906 = v717;
            v272 = v717;
            v907 = powf(fabsf(v146), 2.1992);
            if (v146 < 0.0)
              v907 = -v907;
            if (v907 > 0.0)
              v908 = v907;
            else
              v908 = 0.0;
            if (v907 >= 1.0)
              v909 = 1.0;
            else
              v909 = v908;
            v910 = powf(fabsf(v145), 2.1992);
            if (v145 < 0.0)
              v910 = -v910;
            if (v910 > 0.0)
              v911 = v910;
            else
              v911 = 0.0;
            if (v910 >= 1.0)
              v912 = 1.0;
            else
              v912 = v911;
            v913 = powf(fabsf(v148), 2.1992);
            if (v148 < 0.0)
              v913 = -v913;
            if (v913 > 0.0)
              v914 = v913;
            else
              v914 = 0.0;
            if (v913 >= 1.0)
              v915 = 1.0;
            else
              v915 = v914;
            v916 = v909;
            v917 = v912;
            goto LABEL_1242;
          case 1u:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v919, v918);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v921, v920);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1134:
            v72 = v718;
LABEL_1135:
            v36 = v72;
            v922 = &v1089;
            goto LABEL_1414;
          case 2u:
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v924, v923);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v926, v925);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1137:
            v77 = v719;
LABEL_1138:
            v78 = v77;
            v927 = powf(fabsf(v146), 2.1992);
            if (v146 >= 0.0)
              v928 = v927;
            else
              v928 = -v927;
            v929 = powf(fabsf(v145), 2.1992);
            if (v145 >= 0.0)
              v930 = v929;
            else
              v930 = -v929;
            v931 = powf(fabsf(v148), 2.1992);
            if (v148 < 0.0)
              v931 = -v931;
            v932 = v928;
            v933 = v930;
            goto LABEL_1255;
          case 3u:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v935, v934);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v937, v936);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1148:
            v72 = v720;
LABEL_1149:
            v36 = v72;
            v938 = &v1089;
            goto LABEL_1434;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v171, v170);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v173, v172);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_150:
            v174 = v128;
            v175 = v146;
            v176 = v145;
            v177 = v148;
            goto LABEL_158;
          case 5u:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v940, v939);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v942, v941);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1151:
            v72 = v721;
LABEL_1152:
            v36 = v72;
            v943 = &v1089;
            goto LABEL_1438;
          case 6u:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v945, v944);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v947, v946);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1154:
            v72 = v722;
LABEL_1155:
            v36 = v72;
            v948 = &v1089;
            goto LABEL_1442;
          case 7u:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v950, v949);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v952, v951);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1157:
            v72 = v723;
LABEL_1158:
            v36 = v72;
            v953 = &v1089;
            goto LABEL_1447;
          case 8u:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v955, v954);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v957, v956);
            v958 = (float *)&v1093;
            goto LABEL_1186;
          case 9u:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v960, v959);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v962, v961);
            v963 = (float *)&v1093;
            goto LABEL_1188;
          case 0xAu:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v965, v964);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v967, v966);
            v968 = (float *)&v1093;
            goto LABEL_1190;
          case 0xBu:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v970, v969);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v972, v971);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1163:
            v72 = v724;
            v36 = v724;
            v973 = &v1089;
            goto LABEL_1457;
          case 0xDu:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v975, v974);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v977, v976);
            v978 = (float *)&v1093;
            goto LABEL_1193;
          case 0xEu:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v980, v979);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v982, v981);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1166:
            v72 = v725;
LABEL_1167:
            v36 = v72;
            v983 = &v1089;
            goto LABEL_1463;
          case 0xFu:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v985, v984);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v987, v986);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1169:
            v72 = v726;
LABEL_1170:
            v36 = v72;
            v988 = &v1089;
            goto LABEL_1467;
          case 0x10u:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v990, v989);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v992, v991);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1172:
            v72 = v727;
LABEL_1173:
            v36 = v72;
            v993 = &v1089;
            goto LABEL_1471;
          case 0x12u:
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v995, v994);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v997, v996);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1175:
            v174 = v128;
            v998 = v146;
            v999 = v145;
            v177 = v148;
            goto LABEL_1288;
          case 0x13u:
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v1001, v1000);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v1003, v1002);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_1177:
            v174 = v128;
            v1004 = v145;
            goto LABEL_1290;
          default:
            v1089 = *(float *)((v83 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v145;
            v1091 = v148;
            v1092 = v169;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
            *(_QWORD *)&v1093 = __PAIR64__(v256, v255);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v258, v257);
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1093);
LABEL_227:
            v72 = v216;
LABEL_228:
            v36 = v72;
            v95 = (__int128 *)&v1089;
            goto LABEL_82;
        }
      }
      v23 = bswap32(v83);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1088);
      *(_QWORD *)&v1093 = __PAIR64__(v85, v84);
      *((_QWORD *)&v1093 + 1) = __PAIR64__(v87, v86);
      v88 = (float *)&v1093;
      goto LABEL_73;
    case 14:
      v89 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v89 & 0x8000000000000) != 0)
      {
        v125 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
        v124 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 8);
        v127 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 0xC);
        v178 = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v89))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1217;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1244;
          case 2u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1246;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1263;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_157;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1265;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1267;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1269;
          case 8u:
            v1089 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v178;
            v958 = (float *)&v1088;
LABEL_1186:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(v958);
            goto LABEL_1271;
          case 9u:
            v1089 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v178;
            v963 = (float *)&v1088;
LABEL_1188:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(v963);
            goto LABEL_1273;
          case 0xAu:
            v1089 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v178;
            v968 = (float *)&v1088;
LABEL_1190:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(v968);
            goto LABEL_1275;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1277;
          case 0xDu:
            v1089 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v178;
            v978 = (float *)&v1088;
LABEL_1193:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(v978);
            goto LABEL_1279;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1281;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1283;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1285;
          case 0x12u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1287;
          case 0x13u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_1298;
          default:
            LODWORD(v1093) = *(_DWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v178;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v1088);
            goto LABEL_232;
        }
      }
      v23 = bswap32(v89);
      v88 = (float *)&v1088;
LABEL_73:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(v88);
      goto LABEL_78;
    case 15:
      v90 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v90 & 0x8000000000000) != 0)
      {
        v125 = *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
        v124 = *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 8);
        v127 = *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 0xC);
        v179 = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v90))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1217;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1244;
          case 2u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1246;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1263;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_157;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1265;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1267;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1269;
          case 8u:
            v1089 = *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1271;
          case 9u:
            v1089 = *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1273;
          case 0xAu:
            v1089 = *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1275;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1277;
          case 0xDu:
            v1089 = *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1279;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1281;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1283;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1285;
          case 0x12u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1287;
          case 0x13u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_1298;
          default:
            LODWORD(v1093) = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v179;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
            goto LABEL_232;
        }
      }
      v23 = bswap32(v90);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v1088);
      goto LABEL_78;
    case 16:
      v91 = *a2;
      v1088 = *(_OWORD *)a3;
      if ((v91 & 0x8000000000000) != 0)
      {
        v125 = *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
        v124 = *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 8);
        v127 = *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 0xC);
        v180 = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v91))
        {
          case 0u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1217:
            v906 = v489;
            v272 = v489;
            v1005 = powf(fabsf(v125), 2.1992);
            if (v125 < 0.0)
              v1005 = -v1005;
            if (v1005 > 0.0)
              v1006 = v1005;
            else
              v1006 = 0.0;
            if (v1005 >= 1.0)
              v1007 = 1.0;
            else
              v1007 = v1006;
            v1008 = powf(fabsf(v124), 2.1992);
            if (v124 < 0.0)
              v1008 = -v1008;
            if (v1008 > 0.0)
              v1009 = v1008;
            else
              v1009 = 0.0;
            if (v1008 >= 1.0)
              v1010 = 1.0;
            else
              v1010 = v1009;
            v1011 = powf(fabsf(v127), 2.1992);
            if (v127 < 0.0)
              v1011 = -v1011;
            if (v1011 > 0.0)
              v1012 = v1011;
            else
              v1012 = 0.0;
            if (v1011 >= 1.0)
              v915 = 1.0;
            else
              v915 = v1012;
            v916 = v1007;
            v917 = v1010;
LABEL_1242:
            v1013 = (float)((float)((float)(v916 * 0.29734) + 0.0) + (float)(v917 * 0.62736)) + (float)(v915 * 0.075291);
            v137 = v1013;
            v523 = v906 < v1013;
            goto LABEL_1425;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1244:
            v72 = v490;
            goto LABEL_1413;
          case 2u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1246:
            v77 = v491;
            v78 = v491;
            v1014 = powf(fabsf(v125), 2.1992);
            if (v125 >= 0.0)
              v1015 = v1014;
            else
              v1015 = -v1014;
            v1016 = powf(fabsf(v124), 2.1992);
            if (v124 >= 0.0)
              v1017 = v1016;
            else
              v1017 = -v1016;
            v931 = powf(fabsf(v127), 2.1992);
            if (v127 < 0.0)
              v931 = -v931;
            v932 = v1015;
            v933 = v1017;
LABEL_1255:
            v82 = (float)((float)((float)(v932 * 0.29734) + 0.0) + (float)(v933 * 0.62736)) + (float)(v931 * 0.075291);
            goto LABEL_1256;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1263:
            v72 = v492;
            goto LABEL_1433;
          case 4u:
          case 0xCu:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_157:
            v174 = v128;
            v175 = v125;
            v176 = v124;
            v177 = v127;
LABEL_158:
            v181 = (float)((float)(v175 * 0.21264) + 0.0) + (float)(v176 * 0.71517);
            v182 = 0.072192;
            goto LABEL_1289;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1265:
            v72 = v493;
            goto LABEL_1437;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1267:
            v72 = v494;
            goto LABEL_1441;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1269:
            v72 = v495;
            goto LABEL_1445;
          case 8u:
            v1089 = *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1271:
            v72 = v496;
            goto LABEL_1345;
          case 9u:
            v1089 = *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1273:
            v72 = v497;
            goto LABEL_1349;
          case 0xAu:
            v1089 = *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1275:
            v72 = v498;
            goto LABEL_1452;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1277:
            v72 = v499;
            goto LABEL_1455;
          case 0xDu:
            v1089 = *(float *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v124;
            v1091 = v127;
            v1092 = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1279:
            v72 = v500;
            goto LABEL_1360;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1281:
            v72 = v501;
            goto LABEL_1461;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1283:
            v72 = v502;
            goto LABEL_1466;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1285:
            v72 = v503;
            goto LABEL_1470;
          case 0x12u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1287:
            v174 = v128;
            v998 = v125;
            v999 = v124;
            v177 = v127;
LABEL_1288:
            v181 = (float)((float)(v998 * -0.02837) + 0.0) + (float)(v999 * 1.01);
            v182 = 0.021041;
LABEL_1289:
            v1004 = v181 + (float)(v177 * v182);
            break;
          case 0x13u:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_1298:
            v174 = v128;
            v1004 = v124;
            break;
          default:
            LODWORD(v1093) = *(_DWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v127), LODWORD(v124));
            HIDWORD(v1093) = v180;
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_232:
            v72 = v205;
            goto LABEL_237;
        }
LABEL_1290:
        v897 = v1004;
        v898 = v128 < v1004;
LABEL_1291:
        if (v898)
          v847 = v897;
        else
          v847 = v174;
        if (v898)
          v137 = v174;
        else
          v137 = v897;
        return (v847 + 0.05) / (v137 + 0.05);
      }
      v23 = bswap32(v91);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v1088);
LABEL_78:
      v72 = v24;
LABEL_79:
      v92 = (float32x2_t)vdup_n_s32(0x437F0000u);
      v93 = (float)HIBYTE(v23) / 255.0;
      *(float *)&v1093 = (float)v23 / 255.0;
      v94 = (uint32x2_t)vdup_n_s32(v23);
      goto LABEL_80;
    case 18:
      v102 = *a2;
      v104 = *a3;
      v103 = a3[1];
      v47 = a3[2];
      if ((*a2 & 0x8000000000000) != 0)
      {
        v49 = *(float *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
        v48 = *(float *)((v102 & 0xFFFFFFFFFFFFLL) + 8);
        v50 = *(float *)((v102 & 0xFFFFFFFFFFFFLL) + 0xC);
        v183 = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v102))
        {
          case 0u:
            v227 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v228 = 0.021041;
LABEL_1300:
            v1019 = v227 + (float)(v47 * v228);
            v36 = v1019;
            v1020 = v48;
            v1021 = v50;
            v1022 = LODWORD(v49);
            v1023 = powf(fabsf(v49), 2.1992);
            if (v1022 < 0)
              v1023 = -v1023;
            if (v1023 > 0.0)
              v1024 = v1023;
            else
              v1024 = 0.0;
            if (v1023 >= 1.0)
              v1025 = 1.0;
            else
              v1025 = v1024;
            v1026 = powf(fabsf(v1020), 2.1992);
            if (v1020 < 0.0)
              v1026 = -v1026;
            if (v1026 > 0.0)
              v1027 = v1026;
            else
              v1027 = 0.0;
            if (v1026 >= 1.0)
              v1028 = 1.0;
            else
              v1028 = v1027;
            v1029 = powf(fabsf(v1021), 2.1992);
            if (v1021 < 0.0)
              v1029 = -v1029;
            if (v1029 > 0.0)
              v1030 = v1029;
            else
              v1030 = 0.0;
            if (v1029 >= 1.0)
              v1031 = 1.0;
            else
              v1031 = v1030;
            v1032 = (float)((float)((float)(v1025 * 0.29734) + 0.0) + (float)(v1028 * 0.62736))
                  + (float)(v1031 * 0.075291);
            v137 = v1032;
            v632 = v1019 < v1032;
            goto LABEL_1474;
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v229 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v230 = 0.021041;
LABEL_1326:
            v106 = v229 + (float)(v47 * v230);
            goto LABEL_1412;
          case 2u:
            v231 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v232 = 0.021041;
LABEL_1329:
            v1033 = v231 + (float)(v47 * v232);
            v272 = v1033;
            v1034 = v48;
            v1035 = v50;
            v1036 = fabsf(v49);
            v1037 = LODWORD(v49);
            goto LABEL_1416;
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v233 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v234 = 0.021041;
LABEL_1331:
            v106 = v233 + (float)(v47 * v234);
            goto LABEL_1432;
          case 4u:
          case 0xCu:
            v136 = (float)((float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01)) + (float)(v47 * 0.021041);
            v137 = v136;
            v184 = (float)((float)(v49 * 0.21264) + 0.0) + (float)(v48 * 0.71517);
            v168 = 0.072192;
            goto LABEL_1372;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v235 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v236 = 0.021041;
LABEL_1334:
            v106 = v235 + (float)(v47 * v236);
            goto LABEL_1436;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v237 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v238 = 0.021041;
LABEL_1337:
            v106 = v237 + (float)(v47 * v238);
            goto LABEL_1440;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v239 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v240 = 0.021041;
LABEL_1340:
            v106 = v239 + (float)(v47 * v240);
            goto LABEL_1444;
          case 8u:
            v1089 = *(float *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v48;
            v1091 = v50;
            v1092 = v183;
            v241 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v242 = 0.021041;
LABEL_1343:
            v106 = v241 + (float)(v47 * v242);
            goto LABEL_1344;
          case 9u:
            v1089 = *(float *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v48;
            v1091 = v50;
            v1092 = v183;
            v243 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v244 = 0.021041;
LABEL_1347:
            v106 = v243 + (float)(v47 * v244);
            goto LABEL_1348;
          case 0xAu:
            v1089 = *(float *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v48;
            v1091 = v50;
            v1092 = v183;
            v74 = -0.02837;
            v75 = 1.01;
            v76 = 0.021041;
            v875 = (float)((float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01)) + (float)(v47 * 0.021041);
LABEL_1352:
            v77 = v875;
            v78 = v875;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1089);
            *(_QWORD *)&v1093 = __PAIR64__(v1043, v1042);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v1045, v1044);
            goto LABEL_1355;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v74 = -0.02837;
            v75 = 1.01;
            v76 = 0.021041;
            v879 = (float)((float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01)) + (float)(v47 * 0.021041);
LABEL_1354:
            v77 = v879;
            v78 = v879;
LABEL_1355:
            v795 = (float *)&v1093;
LABEL_1356:
            v79 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v795);
            goto LABEL_68;
          case 0xDu:
            v1089 = *(float *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v48;
            v1091 = v50;
            v1092 = v183;
            v245 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v246 = 0.021041;
LABEL_1358:
            v106 = v245 + (float)(v47 * v246);
            goto LABEL_1359;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v247 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v248 = 0.021041;
LABEL_1362:
            v106 = v247 + (float)(v47 * v248);
            goto LABEL_1460;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v249 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v250 = 0.021041;
LABEL_1365:
            v106 = v249 + (float)(v47 * v250);
            goto LABEL_1465;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v251 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v252 = 0.021041;
LABEL_1368:
            v106 = v251 + (float)(v47 * v252);
            goto LABEL_1469;
          case 0x12u:
            v165 = -0.02837;
            v166 = 1.01;
            v167 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v168 = 0.021041;
LABEL_1371:
            v136 = v167 + (float)(v47 * v168);
            v137 = v136;
            v184 = (float)((float)(v49 * v165) + 0.0) + (float)(v48 * v166);
LABEL_1372:
            v164 = v184 + (float)(v50 * v168);
            goto LABEL_1375;
          case 0x13u:
            v253 = (float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01);
            v254 = 0.021041;
LABEL_1374:
            v136 = v253 + (float)(v47 * v254);
            v137 = v136;
            v164 = v48;
LABEL_1375:
            v1050 = v136 < v164;
            if (v136 >= v164)
              v847 = v137;
            else
              v847 = v164;
            if (!v1050)
              v137 = v164;
            break;
          default:
            LODWORD(v1093) = *(_DWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v50), LODWORD(v48));
            HIDWORD(v1093) = v183;
            v106 = (float)((float)((float)(v104 * -0.02837) + 0.0) + (float)(v103 * 1.01)) + (float)(v47 * 0.021041);
            goto LABEL_236;
        }
      }
      else
      {
        v105 = bswap32(v102);
        v106 = (float)((float)((float)(*a3 * -0.02837) + 0.0) + (float)(v103 * 1.01)) + (float)(v47 * 0.021041);
LABEL_88:
        v72 = v106;
        v92 = (float32x2_t)vdup_n_s32(0x437F0000u);
        v93 = (float)HIBYTE(v105) / 255.0;
        *(float *)&v1093 = (float)v105 / 255.0;
        v94 = (uint32x2_t)vdup_n_s32(v105);
LABEL_80:
        v36 = v72;
        *(float32x2_t *)((char *)&v1093 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32(v94, (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), v92);
        *((float *)&v1093 + 3) = v93;
LABEL_81:
        v95 = &v1093;
LABEL_82:
        v96 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(v95);
        v99 = (float)((float)(v96 * 0.21264) + 0.0) + (float)(v98 * 0.71517);
        v100 = 0.072192;
LABEL_83:
        v101 = v99 + (float)(v97 * v100);
LABEL_1473:
        v137 = v101;
        v632 = v72 < v101;
LABEL_1474:
        if (v632)
          v847 = v137;
        else
          v847 = v36;
        if (v632)
          v137 = v36;
      }
      return (v847 + 0.05) / (v137 + 0.05);
    case 19:
      v107 = *a2;
      v106 = a3[1];
      if ((*a2 & 0x8000000000000) != 0)
      {
        v186 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
        v185 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 8);
        v187 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 0xC);
        v188 = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 0x10);
        switch(HIBYTE(v107))
        {
          case 0u:
            v1051 = a3[1];
            v1052 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 8);
            v1053 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 0xC);
            v1054 = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            v1055 = powf(fabsf(v186), 2.1992);
            if (v1054 < 0)
              v1055 = -v1055;
            if (v1055 > 0.0)
              v1056 = v1055;
            else
              v1056 = 0.0;
            if (v1055 >= 1.0)
              v1057 = 1.0;
            else
              v1057 = v1056;
            v1058 = powf(fabsf(v1052), 2.1992);
            if (v1052 < 0.0)
              v1058 = -v1058;
            if (v1058 > 0.0)
              v1059 = v1058;
            else
              v1059 = 0.0;
            if (v1058 >= 1.0)
              v1060 = 1.0;
            else
              v1060 = v1059;
            v1061 = powf(fabsf(v1053), 2.1992);
            if (v1053 < 0.0)
              v1061 = -v1061;
            if (v1061 > 0.0)
              v1062 = v1061;
            else
              v1062 = 0.0;
            if (v1061 >= 1.0)
              v1063 = 1.0;
            else
              v1063 = v1062;
            v1064 = (float)((float)((float)(v1057 * 0.29734) + 0.0) + (float)(v1060 * 0.62736))
                  + (float)(v1063 * 0.075291);
            v137 = v1064;
            v1065 = v1051 < v1064;
            if (v1051 >= v1064)
              v847 = v1051;
            else
              v847 = v1064;
            if (v1065)
              v137 = v1051;
            return (v847 + 0.05) / (v137 + 0.05);
          case 1u:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_1412:
            v72 = v106;
LABEL_1413:
            v36 = v72;
            v922 = (float *)&v1093;
LABEL_1414:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(v922);
            goto LABEL_1472;
          case 2u:
            v1033 = a3[1];
            v272 = v1033;
            v1034 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 8);
            v1035 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 0xC);
            v1036 = fabsf(v186);
            v1037 = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
LABEL_1416:
            v1067 = powf(v1036, 2.1992);
            if (v1037 >= 0)
              v1068 = v1067;
            else
              v1068 = -v1067;
            v1069 = powf(fabsf(v1034), 2.1992);
            if (v1034 >= 0.0)
              v1070 = v1069;
            else
              v1070 = -v1069;
            v1071 = powf(fabsf(v1035), 2.1992);
            if (v1035 < 0.0)
              v1071 = -v1071;
            v1072 = (float)((float)((float)(v1068 * 0.29734) + 0.0) + (float)(v1070 * 0.62736))
                  + (float)(v1071 * 0.075291);
            v137 = v1072;
            v523 = v1033 < v1072;
LABEL_1425:
            if (v523)
              v847 = v137;
            else
              v847 = v272;
            if (v523)
              v137 = v272;
            return (v847 + 0.05) / (v137 + 0.05);
          case 3u:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_1432:
            v72 = v106;
LABEL_1433:
            v36 = v72;
            v938 = (float *)&v1093;
LABEL_1434:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(v938);
            goto LABEL_1472;
          case 4u:
          case 0xCu:
            v189 = v106;
            v190 = (float)((float)(v186 * 0.21264) + 0.0) + (float)(v185 * 0.71517);
            v191 = 0.072192;
            goto LABEL_1481;
          case 5u:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_1436:
            v72 = v106;
LABEL_1437:
            v36 = v72;
            v943 = (float *)&v1093;
LABEL_1438:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(v943);
            goto LABEL_1472;
          case 6u:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_1440:
            v72 = v106;
LABEL_1441:
            v36 = v72;
            v948 = (float *)&v1093;
LABEL_1442:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(v948);
            goto LABEL_1472;
          case 7u:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_1444:
            v72 = v106;
LABEL_1445:
            v36 = v72;
            goto LABEL_1446;
          case 8u:
            v1089 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v185;
            v1091 = v187;
            v1092 = v188;
LABEL_1344:
            v72 = v106;
LABEL_1345:
            v36 = v72;
            v1038 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert(&v1089);
            goto LABEL_1350;
          case 9u:
            v1089 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v185;
            v1091 = v187;
            v1092 = v188;
LABEL_1348:
            v72 = v106;
LABEL_1349:
            v36 = v72;
            v1038 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v1089);
LABEL_1350:
            *(_QWORD *)&v1093 = __PAIR64__(v1039, LODWORD(v1038));
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v1041, v1040);
LABEL_1446:
            v953 = (float *)&v1093;
LABEL_1447:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v953);
            goto LABEL_1472;
          case 0xAu:
            v1089 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v185;
            v1091 = v187;
            v1092 = v188;
LABEL_1451:
            v72 = v106;
LABEL_1452:
            v36 = v72;
            WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v1089);
            *(_QWORD *)&v1093 = __PAIR64__(v1074, v1073);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v1076, v1075);
            goto LABEL_1456;
          case 0xBu:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_1454:
            v72 = v106;
LABEL_1455:
            v36 = v72;
LABEL_1456:
            v973 = (float *)&v1093;
LABEL_1457:
            v1077 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert(v973);
            v99 = (float)((float)(v1077 * -0.02837) + 0.0) + (float)(v1078 * 1.01);
            v100 = 0.021041;
            goto LABEL_83;
          case 0xDu:
            v1089 = *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            v1090 = v185;
            v1091 = v187;
            v1092 = v188;
LABEL_1359:
            v72 = v106;
LABEL_1360:
            v36 = v72;
            WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v1089);
            *(_QWORD *)&v1093 = __PAIR64__(v1047, v1046);
            *((_QWORD *)&v1093 + 1) = __PAIR64__(v1049, v1048);
            goto LABEL_1462;
          case 0xEu:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_1460:
            v72 = v106;
LABEL_1461:
            v36 = v72;
LABEL_1462:
            v983 = (float *)&v1093;
LABEL_1463:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(v983);
            goto LABEL_1472;
          case 0xFu:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_1465:
            v72 = v106;
LABEL_1466:
            v36 = v72;
            v988 = (float *)&v1093;
LABEL_1467:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(v988);
            goto LABEL_1472;
          case 0x10u:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_1469:
            v72 = v106;
LABEL_1470:
            v36 = v72;
            v993 = (float *)&v1093;
LABEL_1471:
            WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(v993);
LABEL_1472:
            v101 = v1066;
            goto LABEL_1473;
          case 0x12u:
            v189 = v106;
            v190 = (float)((float)(v186 * -0.02837) + 0.0) + (float)(v185 * 1.01);
            v191 = 0.021041;
LABEL_1481:
            v1079 = v190 + (float)(v187 * v191);
            v1080 = v106 < v1079;
            if (v106 >= v1079)
              v847 = v189;
            else
              v847 = v1079;
            if (v1080)
              v137 = v189;
            else
              v137 = v1079;
            return (v847 + 0.05) / (v137 + 0.05);
          case 0x13u:
            v1081 = v106;
            v1082 = v106 < v185;
            if (v106 >= v185)
              v847 = v106;
            else
              v847 = v185;
            if (v1082)
              v137 = v1081;
            else
              v137 = v185;
            return (v847 + 0.05) / (v137 + 0.05);
          default:
            LODWORD(v1093) = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
            *(_QWORD *)((char *)&v1093 + 4) = __PAIR64__(LODWORD(v187), LODWORD(v185));
            HIDWORD(v1093) = v188;
LABEL_236:
            v72 = v106;
LABEL_237:
            v36 = v72;
            goto LABEL_81;
        }
      }
      v105 = bswap32(v107);
      goto LABEL_88;
    default:
      return _ZZN7WebCore17callWithColorTypeIfZNS_13contrastRatioERKNS_5ColorES3_E3__0EEDcRKNS_15ColorComponentsIT_Lm4EEENS_10ColorSpaceEOT0_ENKUlTyvE_clINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEEDav(*a2, (__int128 *)a3);
  }
}

double _ZZN7WebCore17callWithColorTypeIfZNS_13contrastRatioERKNS_5ColorES3_E3__0EEDcRKNS_15ColorComponentsIT_Lm4EEENS_10ColorSpaceEOT0_ENKUlTyvE_clINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEEDav(unint64_t a1, __int128 *a2)
{
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double v12;
  BOOL v13;
  double v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  float v45;
  float v46;
  float v47;
  double v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  BOOL v110;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  BOOL v120;
  __int128 v121;
  int v122;
  float v123;
  float v124;
  int v125;
  __int128 v126;

  v121 = *a2;
  if ((a1 & 0x8000000000000) != 0)
  {
    v16 = *(float *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
    v15 = *(float *)((a1 & 0xFFFFFFFFFFFFLL) + 8);
    v18 = *(float *)((a1 & 0xFFFFFFFFFFFFLL) + 0xC);
    v17 = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 0x10);
    switch(HIBYTE(a1))
    {
      case 0u:
        v29 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v32 = (float)((float)((float)(v29 * 0.21264) + 0.0) + (float)(v30 * 0.71517)) + (float)(v31 * 0.072192);
        v33 = powf(fabsf(v16), 2.1992);
        if (v16 < 0.0)
          v33 = -v33;
        if (v33 > 0.0)
          v34 = v33;
        else
          v34 = 0.0;
        if (v33 >= 1.0)
          v35 = 1.0;
        else
          v35 = v34;
        v36 = powf(fabsf(v15), 2.1992);
        if (v15 < 0.0)
          v36 = -v36;
        if (v36 > 0.0)
          v37 = v36;
        else
          v37 = 0.0;
        if (v36 >= 1.0)
          v38 = 1.0;
        else
          v38 = v37;
        v39 = powf(fabsf(v18), 2.1992);
        if (v18 < 0.0)
          v39 = -v39;
        if (v39 > 0.0)
          v40 = v39;
        else
          v40 = 0.0;
        if (v39 >= 1.0)
          v41 = 1.0;
        else
          v41 = v40;
        v42 = (float)((float)((float)(v35 * 0.29734) + 0.0) + (float)(v38 * 0.62736)) + (float)(v41 * 0.075291);
        v12 = v42;
        v43 = v32 < v42;
        if (v32 >= v42)
          v14 = v32;
        else
          v14 = v42;
        if (v43)
          v12 = v32;
        return (v14 + 0.05) / (v12 + 0.05);
      case 1u:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v44 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v44 * 0.21264) + 0.0) + (float)(v45 * 0.71517)) + (float)(v46 * 0.072192);
        v48 = v47;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v126);
        goto LABEL_74;
      case 2u:
        v50 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v6 = (float)((float)((float)(v50 * 0.21264) + 0.0) + (float)(v51 * 0.71517)) + (float)(v52 * 0.072192);
        v7 = v6;
        v53 = powf(fabsf(v16), 2.1992);
        if (v16 >= 0.0)
          v54 = v53;
        else
          v54 = -v53;
        v55 = powf(fabsf(v15), 2.1992);
        if (v15 >= 0.0)
          v56 = v55;
        else
          v56 = -v55;
        v57 = powf(fabsf(v18), 2.1992);
        if (v18 < 0.0)
          v57 = -v57;
        v11 = (float)((float)((float)(v54 * 0.29734) + 0.0) + (float)(v56 * 0.62736)) + (float)(v57 * 0.075291);
        goto LABEL_4;
      case 3u:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v58 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v58 * 0.21264) + 0.0) + (float)(v59 * 0.71517)) + (float)(v60 * 0.072192);
        v48 = v47;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v126);
        goto LABEL_74;
      case 4u:
      case 0xCu:
        v19 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v22 = (float)((float)((float)(v19 * 0.21264) + 0.0) + (float)(v20 * 0.71517)) + (float)(v21 * 0.072192);
        v23 = v22;
        v24 = (float)((float)((float)(v16 * 0.21264) + 0.0) + (float)(v15 * 0.71517)) + (float)(v18 * 0.072192);
        v25 = v22 < v24;
        if (v22 >= v24)
          v14 = v22;
        else
          v14 = v24;
        if (v25)
          v12 = v23;
        else
          v12 = v24;
        return (v14 + 0.05) / (v12 + 0.05);
      case 5u:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v61 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v61 * 0.21264) + 0.0) + (float)(v62 * 0.71517)) + (float)(v63 * 0.072192);
        v48 = v47;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v126);
        goto LABEL_74;
      case 6u:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v64 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v64 * 0.21264) + 0.0) + (float)(v65 * 0.71517)) + (float)(v66 * 0.072192);
        v48 = v47;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v126);
        goto LABEL_74;
      case 7u:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v67 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v67 * 0.21264) + 0.0) + (float)(v68 * 0.71517)) + (float)(v69 * 0.072192);
        v48 = v47;
        goto LABEL_65;
      case 8u:
        v122 = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        v123 = v15;
        v124 = v18;
        v125 = v17;
        v70 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v70 * 0.21264) + 0.0) + (float)(v71 * 0.71517)) + (float)(v72 * 0.072192);
        v48 = v47;
        v73 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v122);
        goto LABEL_64;
      case 9u:
        v122 = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        v123 = v15;
        v124 = v18;
        v125 = v17;
        v77 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v77 * 0.21264) + 0.0) + (float)(v78 * 0.71517)) + (float)(v79 * 0.072192);
        v48 = v47;
        v73 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v122);
LABEL_64:
        *(_QWORD *)&v126 = __PAIR64__(v74, LODWORD(v73));
        *((_QWORD *)&v126 + 1) = __PAIR64__(v76, v75);
LABEL_65:
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v126);
        goto LABEL_74;
      case 0xAu:
        v122 = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        v123 = v15;
        v124 = v18;
        v125 = v17;
        v80 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v80 * 0.21264) + 0.0) + (float)(v81 * 0.71517)) + (float)(v82 * 0.072192);
        v48 = v47;
        WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v122);
        *(_QWORD *)&v126 = __PAIR64__(v84, v83);
        *((_QWORD *)&v126 + 1) = __PAIR64__(v86, v85);
        goto LABEL_68;
      case 0xBu:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v87 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v87 * 0.21264) + 0.0) + (float)(v88 * 0.71517)) + (float)(v89 * 0.072192);
        v48 = v47;
LABEL_68:
        v90 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v126);
        v93 = (float)((float)((float)(v90 * -0.02837) + 0.0) + (float)(v91 * 1.01)) + (float)(v92 * 0.021041);
        goto LABEL_75;
      case 0xDu:
        v122 = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        v123 = v15;
        v124 = v18;
        v125 = v17;
        v94 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v94 * 0.21264) + 0.0) + (float)(v95 * 0.71517)) + (float)(v96 * 0.072192);
        v48 = v47;
        WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v122);
        *(_QWORD *)&v126 = __PAIR64__(v98, v97);
        *((_QWORD *)&v126 + 1) = __PAIR64__(v100, v99);
        goto LABEL_71;
      case 0xEu:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v101 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v101 * 0.21264) + 0.0) + (float)(v102 * 0.71517)) + (float)(v103 * 0.072192);
        v48 = v47;
LABEL_71:
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v126);
        goto LABEL_74;
      case 0xFu:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v104 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v104 * 0.21264) + 0.0) + (float)(v105 * 0.71517)) + (float)(v106 * 0.072192);
        v48 = v47;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v126);
        goto LABEL_74;
      case 0x10u:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v107 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v47 = (float)((float)((float)(v107 * 0.21264) + 0.0) + (float)(v108 * 0.71517)) + (float)(v109 * 0.072192);
        v48 = v47;
        WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v126);
LABEL_74:
        v93 = v49;
LABEL_75:
        v12 = v93;
        v110 = v47 < v93;
        if (v47 >= v93)
          v14 = v48;
        else
          v14 = v93;
        if (v110)
          v12 = v48;
        return (v14 + 0.05) / (v12 + 0.05);
      case 0x12u:
        v112 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v115 = (float)((float)((float)(v112 * 0.21264) + 0.0) + (float)(v113 * 0.71517)) + (float)(v114 * 0.072192);
        v12 = v115;
        v116 = (float)((float)((float)(v16 * -0.02837) + 0.0) + (float)(v15 * 1.01)) + (float)(v18 * 0.021041);
        goto LABEL_83;
      case 0x13u:
        v117 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v115 = (float)((float)((float)(v117 * 0.21264) + 0.0) + (float)(v118 * 0.71517)) + (float)(v119 * 0.072192);
        v12 = v115;
        v116 = v15;
LABEL_83:
        v120 = v115 < v116;
        if (v115 >= v116)
          v14 = v12;
        else
          v14 = v116;
        if (!v120)
          v12 = v116;
        break;
      default:
        LODWORD(v126) = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(LODWORD(v18), LODWORD(v15));
        HIDWORD(v126) = v17;
        v26 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
        v6 = (float)((float)((float)(v26 * 0.21264) + 0.0) + (float)(v27 * 0.71517)) + (float)(v28 * 0.072192);
        v7 = v6;
        goto LABEL_3;
    }
  }
  else
  {
    v2 = bswap32(a1);
    v3 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v121);
    v6 = (float)((float)((float)(v3 * 0.21264) + 0.0) + (float)(v4 * 0.71517)) + (float)(v5 * 0.072192);
    *(float *)&v126 = (float)v2 / 255.0;
    v7 = v6;
    *(float32x2_t *)((char *)&v126 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v2), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v126 + 3) = (float)HIBYTE(v2) / 255.0;
LABEL_3:
    v8 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v126);
    v11 = (float)((float)((float)(v8 * 0.21264) + 0.0) + (float)(v9 * 0.71517)) + (float)(v10 * 0.072192);
LABEL_4:
    v12 = v11;
    v13 = v6 < v11;
    if (v6 >= v11)
      v14 = v7;
    else
      v14 = v11;
    if (v13)
      v12 = v7;
  }
  return (v14 + 0.05) / (v12 + 0.05);
}

uint64_t WebCore::serializationUsingColorFunction<WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>>(_QWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String,char,WTF::String,WTF::ASCIILiteral,WTF::String,char>(a1, "color(", 7, "a98-rgb", 8, 32, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (int8x16_t *)" / ", 4, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x1961587E4);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v23, v3);
    WebCore::numericComponent((WebCore *)&v22, v4);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v26 = (int8x16_t *)"color(";
    v27 = 6;
    v24 = (int8x16_t *)"a98-rgb";
    v25 = 7;
    v8 = v22;
    v7 = v23;
    v9 = v21;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v26, &v24, 32, (uint64_t)v23, 32, (uint64_t)v22, 32, (uint64_t)v21, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::numericComponent(WebCore *this, float a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char __src[332];
  unsigned int v11;
  char v12[332];
  _DWORD __n[3];

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  if ((LODWORD(a2) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    WTF::numberToCSSString();
    result = strlen(v12);
    v4 = result;
    __n[0] = result;
    if ((result & 0x80000000) == 0)
    {
      if (!(_DWORD)result)
      {
        v5 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_16;
      }
      WTF::tryFastCompactMalloc((WTF *)(result + 20));
      v5 = v9;
      if (v9)
      {
        result = v9 + 20;
        *(_DWORD *)v9 = 2;
        *(_DWORD *)(v9 + 4) = v4;
        *(_QWORD *)(v9 + 8) = v9 + 20;
        *(_DWORD *)(v9 + 16) = 4;
        if (__n[0])
        {
          if (__n[0] == 1)
            *(_BYTE *)result = v12[0];
          else
            result = (uint64_t)memcpy((void *)result, v12, __n[0]);
        }
        goto LABEL_16;
      }
    }
    *(_QWORD *)this = 0;
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x196158B70);
  }
  WTF::numberToCSSString();
  v6 = strlen(__src);
  v11 = v6;
  if ((v6 & 0x80000000) != 0
    || __OFADD__(v6, 1)
    || (v7 = v6 + 6, __OFADD__(v6 + 1, 5))
    || (result = WTF::tryFastCompactMalloc((WTF *)(v7 + 20)), (v5 = v9) == 0))
  {
    *(_QWORD *)this = 0;
    __break(0xC471u);
    goto LABEL_22;
  }
  *(_DWORD *)v9 = 2;
  *(_DWORD *)(v9 + 4) = v7;
  *(_QWORD *)(v9 + 8) = v9 + 20;
  *(_QWORD *)(v9 + 16) = 0x636C616300000004;
  *(_BYTE *)(v9 + 24) = 40;
  v8 = (_BYTE *)(v9 + 25);
  if (v11)
  {
    if (v11 == 1)
      *v8 = __src[0];
    else
      result = (uint64_t)memcpy((void *)(v9 + 25), __src, v11);
  }
  v8[v11] = 41;
LABEL_16:
  *(_QWORD *)this = v5;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, int8x16_t **a2, int8x16_t **a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  int v26;
  char v27;
  int v28;
  int v29;
  char v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  int8x16_t *v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  char *v51;
  __int16 v52;
  size_t v53;
  size_t v54;
  char v55;
  _BYTE *v56;
  _BYTE *v57;
  char *v58;
  __int128 v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  char *v63;
  char *v64;
  char *v65;
  _BYTE *__src;
  _BYTE *v68;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;

  v14 = (_QWORD *)result;
  if (a5)
  {
    v15 = *(_DWORD *)(a5 + 4);
    if (a7)
    {
LABEL_3:
      v16 = *(_DWORD *)(a7 + 4);
      goto LABEL_4;
    }
  }
  else
  {
    v15 = 0;
    if (a7)
      goto LABEL_3;
  }
  v16 = 0;
LABEL_4:
  v17 = *((_DWORD *)a2 + 2);
  v18 = *((_DWORD *)a3 + 2);
  if (a9)
  {
    v19 = *(_DWORD *)(a9 + 4);
    if (v19 < 0)
      goto LABEL_68;
  }
  else
  {
    v19 = 0;
  }
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    goto LABEL_68;
  v22 = 0;
  v20 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  v24 = v20;
  if (v16 < 0 || (v24 & 1) != 0)
    goto LABEL_50;
  v20 = __OFADD__(v16, v23);
  v25 = v16 + v23;
  if (v20)
    goto LABEL_68;
  v22 = 0;
  v20 = __OFADD__(v25, 1);
  v26 = v25 + 1;
  v27 = v20;
  if (v15 < 0 || (v27 & 1) != 0)
    goto LABEL_50;
  v20 = __OFADD__(v15, v26);
  v28 = v15 + v26;
  if (v20)
    goto LABEL_68;
  v22 = 0;
  v20 = __OFADD__(v28, 1);
  v29 = v28 + 1;
  v30 = v20;
  if (v18 < 0 || (v30 & 1) != 0)
    goto LABEL_50;
  v22 = 0;
  v20 = __OFADD__(v18, v29);
  v31 = v18 + v29;
  v32 = v20;
  if (v17 < 0 || v32)
    goto LABEL_50;
  v33 = (v17 + v31);
  if (__OFADD__(v17, v31))
  {
LABEL_68:
    v22 = 0;
    goto LABEL_50;
  }
  v71 = (_QWORD *)result;
  if ((!a5 || (*(_BYTE *)(a5 + 16) & 4) != 0)
    && (!a7 || (*(_BYTE *)(a7 + 16) & 4) != 0)
    && (!a9 || (*(_BYTE *)(a9 + 16) & 4) != 0))
  {
    if (!(_DWORD)v33)
      goto LABEL_71;
    if ((v33 & 0x80000000) == 0)
    {
      v53 = *((unsigned int *)a2 + 2);
      __src = *a2;
      v68 = *a3;
      v54 = *((unsigned int *)a3 + 2);
      result = WTF::tryFastCompactMalloc((WTF *)(v33 + 20));
      v22 = v72;
      if (v72)
      {
        v55 = a6;
        v70 = a8;
        v56 = (_BYTE *)(v72 + 20);
        *(_DWORD *)v72 = 2;
        *(_DWORD *)(v72 + 4) = v33;
        *(_QWORD *)(v72 + 8) = v72 + 20;
        *(_DWORD *)(v72 + 16) = 4;
        if ((_DWORD)v53)
        {
          if ((_DWORD)v53 == 1)
            *v56 = *__src;
          else
            memcpy((void *)(v72 + 20), __src, v53);
        }
        v57 = &v56[v53];
        if ((_DWORD)v54)
        {
          if ((_DWORD)v54 == 1)
            *v57 = *v68;
          else
            memcpy(v57, v68, v54);
        }
        v57[v54] = a4;
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v57[v54 + 1], a5, v55, a7, v70, a9, a10);
      }
      goto LABEL_61;
    }
    goto LABEL_68;
  }
  if (!(_DWORD)v33)
  {
LABEL_71:
    v22 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_50;
  }
  if (v33 > 0x7FFFFFEF)
    goto LABEL_68;
  v36 = *a2;
  v37 = *((unsigned int *)a2 + 2);
  v38 = *a3;
  v39 = *((unsigned int *)a3 + 2);
  result = WTF::tryFastCompactMalloc((WTF *)(2 * v33 + 20));
  v22 = v72;
  if (!v72)
  {
LABEL_61:
    v14 = v71;
    goto LABEL_50;
  }
  v40 = (char *)(v72 + 20);
  *(_DWORD *)v72 = 2;
  *(_DWORD *)(v72 + 4) = v33;
  *(_QWORD *)(v72 + 8) = v72 + 20;
  *(_DWORD *)(v72 + 16) = 0;
  v41 = (char *)(v72 + 20 + 2 * v37);
  if ((v37 & 0xFFFFFFC0) != 0)
  {
    v42 = &v40[2 * (v37 & 0xFFFFFFC0)];
    v43 = 0uLL;
    do
    {
      v73.val[0] = *v36;
      v44 = v36[1];
      v75.val[0] = v36[2];
      v45 = v36[3];
      v36 += 4;
      v46 = v45;
      v75.val[1] = 0uLL;
      v77.val[0] = v44;
      v73.val[1] = 0uLL;
      v47 = v40;
      vst2q_s8(v47, v73);
      v47 += 32;
      v77.val[1] = 0uLL;
      vst2q_s8(v47, v77);
      v48 = v40 + 64;
      vst2q_s8(v48, v75);
      v49 = v40 + 96;
      vst2q_s8(v49, *(int8x16x2_t *)(&v43 - 1));
      v40 += 128;
    }
    while (v40 != v42);
    v40 = v42;
  }
  while (v40 != v41)
  {
    v50 = v36->u8[0];
    v36 = (int8x16_t *)((char *)v36 + 1);
    *(_WORD *)v40 = v50;
    v40 += 2;
  }
  v51 = &v41[2 * v39];
  if ((v39 & 0xFFFFFFC0) != 0)
  {
    v58 = &v41[2 * (v39 & 0xFFFFFFC0)];
    v59 = 0uLL;
    v14 = v71;
    do
    {
      v74.val[0] = *v38;
      v60 = v38[1];
      v76.val[0] = v38[2];
      v61 = v38[3];
      v38 += 4;
      v62 = v61;
      v76.val[1] = 0uLL;
      v78.val[0] = v60;
      v74.val[1] = 0uLL;
      v63 = v41;
      vst2q_s8(v63, v74);
      v63 += 32;
      v78.val[1] = 0uLL;
      vst2q_s8(v63, v78);
      v64 = v41 + 64;
      vst2q_s8(v64, v76);
      v65 = v41 + 96;
      vst2q_s8(v65, *(int8x16x2_t *)(&v59 - 1));
      v41 += 128;
    }
    while (v41 != v58);
    v41 = v58;
  }
  else
  {
    v14 = v71;
  }
  while (v41 != v51)
  {
    v52 = v38->u8[0];
    v38 = (int8x16_t *)((char *)v38 + 1);
    *(_WORD *)v41 = v52;
    v41 += 2;
  }
  *(_WORD *)v51 = a4;
  result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((_WORD *)v51 + 1, a5, a6, a7, a8, a9, a10);
LABEL_50:
  *v14 = v22;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  _BYTE *v12;
  _BYTE *v14;
  size_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  size_t v24;
  uint64_t v25;
  unsigned __int128 *v26;
  unsigned __int128 *v27;
  unsigned __int128 v28;
  unsigned __int128 *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  unsigned __int128 *v32;
  unsigned __int128 *v33;
  unsigned __int128 v34;
  char v35;
  char v36;
  char v37;

  v12 = __dst;
  if (a2)
  {
    v14 = *(_BYTE **)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v15)
      {
        if ((_DWORD)v15 == 1)
          *__dst = *v14;
        else
          __dst = memcpy(__dst, v14, v15);
      }
    }
    else
    {
      if (v15 < 0x10)
      {
        v26 = (unsigned __int128 *)__dst;
      }
      else
      {
        v26 = (unsigned __int128 *)&__dst[v15 & 0xFFFFFFF0];
        v27 = (unsigned __int128 *)__dst;
        do
        {
          v28 = (unsigned __int128)vld2q_s8(v14);
          v14 += 32;
          *v27++ = v28;
        }
        while (v27 != v26);
      }
      while (v26 != (unsigned __int128 *)&__dst[v15])
      {
        v35 = *v14;
        v14 += 2;
        *(_BYTE *)v26 = v35;
        v26 = (unsigned __int128 *)((char *)v26 + 1);
      }
    }
    v16 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v12[v16];
  *v17 = a3;
  v18 = v17 + 1;
  if (a4)
  {
    v19 = *(_BYTE **)(a4 + 8);
    v20 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v20)
      {
        if ((_DWORD)v20 == 1)
          *v18 = *v19;
        else
          __dst = memcpy(v18, v19, v20);
      }
    }
    else
    {
      if (v20 < 0x10)
      {
        v29 = (unsigned __int128 *)v18;
      }
      else
      {
        v29 = (unsigned __int128 *)&v18[v20 & 0xFFFFFFF0];
        v30 = (unsigned __int128 *)v18;
        do
        {
          v31 = (unsigned __int128)vld2q_s8(v19);
          v19 += 32;
          *v30++ = v31;
        }
        while (v30 != v29);
      }
      while (v29 != (unsigned __int128 *)&v18[v20])
      {
        v36 = *v19;
        v19 += 2;
        *(_BYTE *)v29 = v36;
        v29 = (unsigned __int128 *)((char *)v29 + 1);
      }
    }
    v21 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v21 = 0;
  }
  v18[v21] = a5;
  v22 = &v18[v21 + 1];
  if (a6)
  {
    v23 = *(_BYTE **)(a6 + 8);
    v24 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      if ((_DWORD)v24)
      {
        if ((_DWORD)v24 == 1)
          *v22 = *v23;
        else
          __dst = memcpy(v22, v23, v24);
      }
    }
    else
    {
      if (v24 < 0x10)
      {
        v32 = (unsigned __int128 *)&v18[v21 + 1];
      }
      else
      {
        v32 = (unsigned __int128 *)&v22[v24 & 0xFFFFFFF0];
        v33 = (unsigned __int128 *)&v18[v21 + 1];
        do
        {
          v34 = (unsigned __int128)vld2q_s8(v23);
          v23 += 32;
          *v33++ = v34;
        }
        while (v33 != v32);
      }
      while (v32 != (unsigned __int128 *)&v22[v24])
      {
        v37 = *v23;
        v23 += 2;
        *(_BYTE *)v32 = v37;
        v32 = (unsigned __int128 *)((char *)v32 + 1);
      }
    }
    v25 = *(unsigned int *)(a6 + 4);
  }
  else
  {
    v25 = 0;
  }
  v22[v25] = a7;
  return __dst;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_WORD *__dst, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  _WORD *v12;
  int8x16_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  _WORD *v28;
  char *v29;
  int8x16_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  char *v44;
  char *v45;
  int8x16_t *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  char *v56;
  char *v57;
  char *v58;
  __int16 v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;

  v12 = __dst;
  if (a2)
  {
    v14 = *(int8x16_t **)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v16 = (char *)&__dst[v15];
      if (v15 >= 0x40)
      {
        v17 = (char *)&__dst[v15 & 0xFFFFFFC0];
        v19 = 0uLL;
        v20 = (char *)__dst;
        do
        {
          v60.val[0] = *v14;
          v21 = v14[1];
          v63.val[0] = v14[2];
          v22 = v14[3];
          v14 += 4;
          v23 = v22;
          v63.val[1] = 0uLL;
          v66.val[0] = v21;
          v60.val[1] = 0uLL;
          v24 = v20;
          vst2q_s8(v24, v60);
          v24 += 32;
          v66.val[1] = 0uLL;
          vst2q_s8(v24, v66);
          v25 = v20 + 64;
          vst2q_s8(v25, v63);
          v26 = v20 + 96;
          vst2q_s8(v26, *(int8x16x2_t *)(&v19 - 1));
          v20 += 128;
        }
        while (v20 != v17);
      }
      else
      {
        v17 = (char *)__dst;
      }
      while (v17 != v16)
      {
        v27 = v14->u8[0];
        v14 = (int8x16_t *)((char *)v14 + 1);
        *(_WORD *)v17 = v27;
        v17 += 2;
      }
    }
    else if ((_DWORD)v15 == 1)
    {
      *__dst = v14->i16[0];
    }
    else if ((_DWORD)v15)
    {
      __dst = memcpy(__dst, v14, 2 * v15);
    }
    v18 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v18 = 0;
  }
  v28 = &v12[v18];
  *v28 = a3;
  v29 = (char *)(v28 + 1);
  if (a4)
  {
    v30 = *(int8x16_t **)(a4 + 8);
    v31 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v32 = &v29[2 * v31];
      if (v31 >= 0x40)
      {
        v33 = &v29[2 * (v31 & 0xFFFFFFC0)];
        v35 = 0uLL;
        v36 = v29;
        do
        {
          v61.val[0] = *v30;
          v37 = v30[1];
          v64.val[0] = v30[2];
          v38 = v30[3];
          v30 += 4;
          v39 = v38;
          v64.val[1] = 0uLL;
          v67.val[0] = v37;
          v61.val[1] = 0uLL;
          v40 = v36;
          vst2q_s8(v40, v61);
          v40 += 32;
          v67.val[1] = 0uLL;
          vst2q_s8(v40, v67);
          v41 = v36 + 64;
          vst2q_s8(v41, v64);
          v42 = v36 + 96;
          vst2q_s8(v42, *(int8x16x2_t *)(&v35 - 1));
          v36 += 128;
        }
        while (v36 != v33);
      }
      else
      {
        v33 = v29;
      }
      while (v33 != v32)
      {
        v43 = v30->u8[0];
        v30 = (int8x16_t *)((char *)v30 + 1);
        *(_WORD *)v33 = v43;
        v33 += 2;
      }
    }
    else if ((_DWORD)v31 == 1)
    {
      *(_WORD *)v29 = v30->i16[0];
    }
    else if ((_DWORD)v31)
    {
      __dst = memcpy(v29, v30, 2 * v31);
    }
    v34 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v34 = 0;
  }
  v44 = &v29[2 * v34];
  *(_WORD *)v44 = a5;
  v45 = v44 + 2;
  if (a6)
  {
    v46 = *(int8x16_t **)(a6 + 8);
    v47 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      v48 = &v45[2 * v47];
      if (v47 >= 0x40)
      {
        v49 = &v45[2 * (v47 & 0xFFFFFFC0)];
        v51 = 0uLL;
        v52 = v45;
        do
        {
          v62.val[0] = *v46;
          v53 = v46[1];
          v65.val[0] = v46[2];
          v54 = v46[3];
          v46 += 4;
          v55 = v54;
          v65.val[1] = 0uLL;
          v68.val[0] = v53;
          v62.val[1] = 0uLL;
          v56 = v52;
          vst2q_s8(v56, v62);
          v56 += 32;
          v68.val[1] = 0uLL;
          vst2q_s8(v56, v68);
          v57 = v52 + 64;
          vst2q_s8(v57, v65);
          v58 = v52 + 96;
          vst2q_s8(v58, *(int8x16x2_t *)(&v51 - 1));
          v52 += 128;
        }
        while (v52 != v49);
      }
      else
      {
        v49 = v45;
      }
      while (v49 != v48)
      {
        v59 = v46->u8[0];
        v46 = (int8x16_t *)((char *)v46 + 1);
        *(_WORD *)v49 = v59;
        v49 += 2;
      }
    }
    else if ((_DWORD)v47 == 1)
    {
      *(_WORD *)v45 = v46->i16[0];
    }
    else if ((_DWORD)v47)
    {
      __dst = memcpy(v45, v46, 2 * v47);
    }
    v50 = *(unsigned int *)(a6 + 4);
  }
  else
  {
    v50 = 0;
  }
  *(_WORD *)&v45[2 * v50] = a7;
  return __dst;
}

_QWORD *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String,char,WTF::String,WTF::ASCIILiteral,WTF::String,char>(_QWORD *result, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, int8x16_t *a12, uint64_t a13, uint64_t a14, unsigned __int8 a15)
{
  size_t v18;
  size_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  char *v41;
  char *v42;
  uint64_t v43;
  __int16 v44;
  char *v45;
  char v46;
  _BYTE *v47;
  _BYTE *v48;
  char v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  size_t v54;
  char i;
  char v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  int8x16_t v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  int8x16_t v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  char *v73;
  __int16 v74;
  unsigned __int128 *v75;
  unsigned __int128 *v76;
  unsigned __int128 *v77;
  unsigned __int128 v78;
  char v79;
  size_t v80;
  unsigned int v81;
  size_t __n;
  _QWORD *v85;
  uint64_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;

  if (a3)
  {
    v18 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_103;
  }
  else
  {
    v18 = 0;
  }
  if (a5)
  {
    v19 = a5 - 1;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1961598D4);
    }
  }
  else
  {
    v19 = 0;
  }
  if (!a13)
  {
    v20 = 0;
    goto LABEL_7;
  }
  v20 = a13 - 1;
  if ((unint64_t)(a13 - 1) >> 31)
  {
LABEL_103:
    __break(0xC471u);
    JUMPOUT(0x1961598A4);
  }
LABEL_7:
  if (a7)
    v21 = *(_DWORD *)(a7 + 4);
  else
    v21 = 0;
  if (a9)
  {
    v22 = *(_DWORD *)(a9 + 4);
    if (a11)
      goto LABEL_11;
  }
  else
  {
    v22 = 0;
    if (a11)
    {
LABEL_11:
      v23 = *(_DWORD *)(a11 + 4);
      if (a14)
        goto LABEL_12;
LABEL_71:
      v24 = 0;
      goto LABEL_13;
    }
  }
  v23 = 0;
  if (!a14)
    goto LABEL_71;
LABEL_12:
  v24 = *(_DWORD *)(a14 + 4);
  if (v24 < 0)
    goto LABEL_83;
LABEL_13:
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    goto LABEL_83;
  v27 = 0;
  v25 = __OFADD__(v20, v26);
  v28 = v20 + v26;
  v29 = v25;
  if ((v23 & 0x80000000) == 0 && (v29 & 1) == 0)
  {
    v25 = __OFADD__(v23, v28);
    v30 = v23 + v28;
    if (v25)
      goto LABEL_83;
    v27 = 0;
    v25 = __OFADD__(v30, 1);
    v31 = v30 + 1;
    v32 = v25;
    if ((v22 & 0x80000000) == 0 && !v32)
    {
      v25 = __OFADD__(v22, v31);
      v33 = v22 + v31;
      if (v25)
        goto LABEL_83;
      v27 = 0;
      v25 = __OFADD__(v33, 1);
      v34 = v33 + 1;
      v35 = v25;
      if ((v21 & 0x80000000) == 0 && !v35)
      {
        v25 = __OFADD__(v21, v34);
        v36 = v21 + v34;
        if (v25)
          goto LABEL_83;
        v25 = __OFADD__(v36, 1);
        v37 = v36 + 1;
        if (v25)
          goto LABEL_83;
        v25 = __OFADD__((_DWORD)v19, v37);
        v38 = v19 + v37;
        if (v25)
          goto LABEL_83;
        __n = v18;
        v39 = (v18 + v38);
        if (__OFADD__((_DWORD)v18, v38))
          goto LABEL_83;
        v85 = result;
        v81 = v20;
        if ((!a7 || (*(_BYTE *)(a7 + 16) & 4) != 0)
          && (!a9 || (*(_BYTE *)(a9 + 16) & 4) != 0)
          && (!a11 || (*(_BYTE *)(a11 + 16) & 4) != 0)
          && (!a14 || (*(_BYTE *)(a14 + 16) & 4) != 0))
        {
          if ((_DWORD)v39)
          {
            if ((v39 & 0x80000000) != 0)
            {
              v27 = 0;
            }
            else
            {
              WTF::tryFastCompactMalloc((WTF *)(v39 + 20));
              v27 = v86;
              if (v86)
              {
                v47 = (_BYTE *)(v86 + 20);
                *(_DWORD *)v86 = 2;
                *(_DWORD *)(v86 + 4) = v39;
                *(_QWORD *)(v86 + 8) = v86 + 20;
                *(_DWORD *)(v86 + 16) = 4;
                if ((_DWORD)__n)
                {
                  if ((_DWORD)__n == 1)
                    *v47 = *(_BYTE *)a2;
                  else
                    memcpy((void *)(v86 + 20), a2, __n);
                }
                v48 = &v47[__n];
                v49 = a8;
                if ((_DWORD)v19)
                {
                  if ((_DWORD)v19 == 1)
                    *v48 = *(_BYTE *)a4;
                  else
                    memcpy(v48, a4, v19);
                }
                v50 = &v48[v19];
                *v50 = a6;
                v51 = v50 + 1;
                if (a7)
                {
                  v52 = a7;
                  v53 = *(_BYTE **)(a7 + 8);
                  v54 = *(unsigned int *)(a7 + 4);
                  if ((*(_BYTE *)(a7 + 16) & 4) != 0)
                  {
                    v56 = a10;
                    i = a15;
                    if ((_DWORD)v54)
                    {
                      if ((_DWORD)v54 == 1)
                        *v51 = *v53;
                      else
                        memcpy(v51, v53, v54);
                    }
                  }
                  else
                  {
                    v75 = (unsigned __int128 *)&v51[v54];
                    if (v54 < 0x10)
                    {
                      v76 = (unsigned __int128 *)v51;
                    }
                    else
                    {
                      v76 = (unsigned __int128 *)&v51[v54 & 0xFFFFFFF0];
                      v77 = (unsigned __int128 *)v51;
                      do
                      {
                        v78 = (unsigned __int128)vld2q_s8(v53);
                        v53 += 32;
                        *v77++ = v78;
                      }
                      while (v77 != v76);
                    }
                    v49 = a8;
                    v52 = a7;
                    v56 = a10;
                    for (i = a15; v76 != v75; v76 = (unsigned __int128 *)((char *)v76 + 1))
                    {
                      v79 = *v53;
                      v53 += 2;
                      *(_BYTE *)v76 = v79;
                    }
                  }
                  v57 = *(unsigned int *)(v52 + 4);
                }
                else
                {
                  v57 = 0;
                  v56 = a10;
                  i = a15;
                }
                v51[v57] = v49;
                WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v51[v57 + 1], a9, v56, a11, a12, v81, a14, i);
              }
            }
            goto LABEL_81;
          }
        }
        else
        {
          v80 = v19;
          if ((_DWORD)v39)
          {
            if (v39 <= 0x7FFFFFEF)
            {
              WTF::tryFastCompactMalloc((WTF *)(2 * v39 + 20));
              v27 = v86;
              if (v86)
              {
                v41 = (char *)(v86 + 20);
                *(_DWORD *)v86 = 2;
                *(_DWORD *)(v86 + 4) = v39;
                *(_QWORD *)(v86 + 8) = v86 + 20;
                *(_DWORD *)(v86 + 16) = 0;
                v42 = (char *)(v86 + 20 + 2 * __n);
                if ((__n & 0x7FFFFFC0) != 0)
                {
                  v58 = &v41[2 * (__n & 0x7FFFFFC0)];
                  v59 = 0uLL;
                  v43 = a9;
                  do
                  {
                    v87.val[0] = (int8x16_t)*a2;
                    v60 = *((int8x16_t *)a2 + 1);
                    v89.val[0] = (int8x16_t)a2[2];
                    v61 = a2[3];
                    a2 += 4;
                    v62 = v61;
                    v89.val[1] = 0uLL;
                    v91.val[0] = v60;
                    v87.val[1] = 0uLL;
                    v63 = v41;
                    vst2q_s8(v63, v87);
                    v63 += 32;
                    v91.val[1] = 0uLL;
                    vst2q_s8(v63, v91);
                    v64 = v41 + 64;
                    vst2q_s8(v64, v89);
                    v65 = v41 + 96;
                    vst2q_s8(v65, *(int8x16x2_t *)(&v59 - 1));
                    v41 += 128;
                  }
                  while (v41 != v58);
                  v41 = v58;
                }
                else
                {
                  v43 = a9;
                }
                while (v41 != v42)
                {
                  v44 = *(unsigned __int8 *)a2;
                  a2 = (_OWORD *)((char *)a2 + 1);
                  *(_WORD *)v41 = v44;
                  v41 += 2;
                }
                v45 = &v42[2 * v80];
                if ((v80 & 0x7FFFFFC0) != 0)
                {
                  v66 = &v42[2 * (v80 & 0x7FFFFFC0)];
                  v67 = 0uLL;
                  v46 = a6;
                  do
                  {
                    v88.val[0] = (int8x16_t)*a4;
                    v68 = *((int8x16_t *)a4 + 1);
                    v90.val[0] = (int8x16_t)a4[2];
                    v69 = a4[3];
                    a4 += 4;
                    v70 = v69;
                    v90.val[1] = 0uLL;
                    v92.val[0] = v68;
                    v88.val[1] = 0uLL;
                    v71 = v42;
                    vst2q_s8(v71, v88);
                    v71 += 32;
                    v92.val[1] = 0uLL;
                    vst2q_s8(v71, v92);
                    v72 = v42 + 64;
                    vst2q_s8(v72, v90);
                    v73 = v42 + 96;
                    vst2q_s8(v73, *(int8x16x2_t *)(&v67 - 1));
                    v42 += 128;
                  }
                  while (v42 != v66);
                  v42 = v66;
                }
                else
                {
                  v46 = a6;
                }
                while (v42 != v45)
                {
                  v74 = *(unsigned __int8 *)a4;
                  a4 = (_OWORD *)((char *)a4 + 1);
                  *(_WORD *)v42 = v74;
                  v42 += 2;
                }
                *(_WORD *)v45 = v46;
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v45 + 2, a7, a8, v43, a10, a11, a12, v81, a14, a15);
              }
LABEL_81:
              result = v85;
              goto LABEL_82;
            }
LABEL_83:
            v27 = 0;
            goto LABEL_82;
          }
        }
        v27 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
    }
  }
LABEL_82:
  *result = v27;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, uint64_t a2, char a3, uint64_t a4, _BYTE *__src, unsigned int a6, uint64_t a7, char a8)
{
  _BYTE *v14;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  uint64_t v28;
  unsigned __int128 *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  unsigned __int128 *v32;
  unsigned __int128 *v33;
  unsigned __int128 v34;
  unsigned __int128 *v35;
  unsigned __int128 *v36;
  unsigned __int128 v37;
  char v38;
  char v39;
  char v40;

  v14 = __dst;
  if (a2)
  {
    v16 = *(_BYTE **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        if ((_DWORD)v17 == 1)
          *__dst = *v16;
        else
          __dst = memcpy(__dst, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v29 = (unsigned __int128 *)__dst;
      }
      else
      {
        v29 = (unsigned __int128 *)&__dst[v17 & 0xFFFFFFF0];
        v30 = (unsigned __int128 *)__dst;
        do
        {
          v31 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v30++ = v31;
        }
        while (v30 != v29);
      }
      while (v29 != (unsigned __int128 *)&__dst[v17])
      {
        v38 = *v16;
        v16 += 2;
        *(_BYTE *)v29 = v38;
        v29 = (unsigned __int128 *)((char *)v29 + 1);
      }
    }
    v18 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v14[v18];
  *v19 = a3;
  v20 = v19 + 1;
  if (a4)
  {
    v21 = *(_BYTE **)(a4 + 8);
    v22 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v22)
      {
        if ((_DWORD)v22 == 1)
          *v20 = *v21;
        else
          __dst = memcpy(v20, v21, v22);
      }
    }
    else
    {
      if (v22 < 0x10)
      {
        v32 = (unsigned __int128 *)v20;
      }
      else
      {
        v32 = (unsigned __int128 *)&v20[v22 & 0xFFFFFFF0];
        v33 = (unsigned __int128 *)v20;
        do
        {
          v34 = (unsigned __int128)vld2q_s8(v21);
          v21 += 32;
          *v33++ = v34;
        }
        while (v33 != v32);
      }
      while (v32 != (unsigned __int128 *)&v20[v22])
      {
        v39 = *v21;
        v21 += 2;
        *(_BYTE *)v32 = v39;
        v32 = (unsigned __int128 *)((char *)v32 + 1);
      }
    }
    v23 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v23 = 0;
  }
  v24 = &v20[v23];
  if (a6)
  {
    if (a6 == 1)
      *v24 = *__src;
    else
      __dst = memcpy(&v20[v23], __src, a6);
  }
  v25 = &v24[a6];
  if (a7)
  {
    v26 = *(_BYTE **)(a7 + 8);
    v27 = *(unsigned int *)(a7 + 4);
    if ((*(_BYTE *)(a7 + 16) & 4) != 0)
    {
      if ((_DWORD)v27)
      {
        if ((_DWORD)v27 == 1)
          *v25 = *v26;
        else
          __dst = memcpy(v25, v26, v27);
      }
    }
    else
    {
      if (v27 < 0x10)
      {
        v35 = (unsigned __int128 *)v25;
      }
      else
      {
        v35 = (unsigned __int128 *)&v25[v27 & 0xFFFFFFF0];
        v36 = (unsigned __int128 *)v25;
        do
        {
          v37 = (unsigned __int128)vld2q_s8(v26);
          v26 += 32;
          *v36++ = v37;
        }
        while (v36 != v35);
      }
      while (v35 != (unsigned __int128 *)&v25[v27])
      {
        v40 = *v26;
        v26 += 2;
        *(_BYTE *)v35 = v40;
        v35 = (unsigned __int128 *)((char *)v35 + 1);
      }
    }
    v28 = *(unsigned int *)(a7 + 4);
  }
  else
  {
    v28 = 0;
  }
  v25[v28] = a8;
  return __dst;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, int8x16_t *a7, int a8, uint64_t a9, uint64_t a10)
{
  int8x16_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char *v32;
  char *v33;
  int8x16_t *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  char *v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;
  char *v48;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;

  if (a2)
  {
    v18 = *(int8x16_t **)(a2 + 8);
    v19 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v20 = &__dst[2 * v19];
      if (v19 >= 0x40)
      {
        v21 = &__dst[2 * (v19 & 0xFFFFFFC0)];
        v23 = 0uLL;
        v24 = __dst;
        do
        {
          v50.val[0] = *v18;
          v25 = v18[1];
          v52.val[0] = v18[2];
          v26 = v18[3];
          v18 += 4;
          v27 = v26;
          v52.val[1] = 0uLL;
          v54.val[0] = v25;
          v50.val[1] = 0uLL;
          v28 = v24;
          vst2q_s8(v28, v50);
          v28 += 32;
          v54.val[1] = 0uLL;
          vst2q_s8(v28, v54);
          v29 = v24 + 64;
          vst2q_s8(v29, v52);
          v30 = v24 + 96;
          vst2q_s8(v30, *(int8x16x2_t *)(&v23 - 1));
          v24 += 128;
        }
        while (v24 != v21);
      }
      else
      {
        v21 = __dst;
      }
      while (v21 != v20)
      {
        v31 = v18->u8[0];
        v18 = (int8x16_t *)((char *)v18 + 1);
        *(_WORD *)v21 = v31;
        v21 += 2;
      }
    }
    else if ((_DWORD)v19 == 1)
    {
      *(_WORD *)__dst = v18->i16[0];
    }
    else if ((_DWORD)v19)
    {
      memcpy(__dst, v18, 2 * v19);
    }
    v22 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v22 = 0;
  }
  v32 = &__dst[2 * v22];
  *(_WORD *)v32 = a3;
  v33 = v32 + 2;
  if (a4)
  {
    v34 = *(int8x16_t **)(a4 + 8);
    v35 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v36 = &v33[2 * v35];
      if (v35 >= 0x40)
      {
        v37 = &v33[2 * (v35 & 0xFFFFFFC0)];
        v39 = 0uLL;
        v40 = v33;
        do
        {
          v51.val[0] = *v34;
          v41 = v34[1];
          v53.val[0] = v34[2];
          v42 = v34[3];
          v34 += 4;
          v43 = v42;
          v53.val[1] = 0uLL;
          v55.val[0] = v41;
          v51.val[1] = 0uLL;
          v44 = v40;
          vst2q_s8(v44, v51);
          v44 += 32;
          v55.val[1] = 0uLL;
          vst2q_s8(v44, v55);
          v45 = v40 + 64;
          vst2q_s8(v45, v53);
          v46 = v40 + 96;
          vst2q_s8(v46, *(int8x16x2_t *)(&v39 - 1));
          v40 += 128;
        }
        while (v40 != v37);
      }
      else
      {
        v37 = v33;
      }
      while (v37 != v36)
      {
        v47 = v34->u8[0];
        v34 = (int8x16_t *)((char *)v34 + 1);
        *(_WORD *)v37 = v47;
        v37 += 2;
      }
    }
    else if ((_DWORD)v35 == 1)
    {
      *(_WORD *)v33 = v34->i16[0];
    }
    else if ((_DWORD)v35)
    {
      memcpy(v33, v34, 2 * v35);
    }
    v38 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v38 = 0;
  }
  v48 = &v33[2 * v38];
  *(_WORD *)v48 = a5;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((_WORD *)v48 + 1, a6, a7, a8, a9, a10);
}

uint64_t WebCore::serializationUsingColorFunction<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(_QWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String,char,WTF::String,WTF::ASCIILiteral,WTF::String,char>(a1, "color(", 7, "display-p3", 11, 32, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (int8x16_t *)" / ", 4, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x196159DF8);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v23, v3);
    WebCore::numericComponent((WebCore *)&v22, v4);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v26 = (int8x16_t *)"color(";
    v27 = 6;
    v24 = (int8x16_t *)"display-p3";
    v25 = 10;
    v8 = v22;
    v7 = v23;
    v9 = v21;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v26, &v24, 32, (uint64_t)v23, 32, (uint64_t)v22, 32, (uint64_t)v21, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::serializationUsingColorFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(_QWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String,char,WTF::String,WTF::ASCIILiteral,WTF::String,char>(a1, "color(", 7, "srgb-linear", 12, 32, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (int8x16_t *)" / ", 4, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615A07CLL);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v23, v3);
    WebCore::numericComponent((WebCore *)&v22, v4);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v26 = (int8x16_t *)"color(";
    v27 = 6;
    v24 = (int8x16_t *)"srgb-linear";
    v25 = 11;
    v8 = v22;
    v7 = v23;
    v9 = v21;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v26, &v24, 32, (uint64_t)v23, 32, (uint64_t)v22, 32, (uint64_t)v21, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(_QWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String,char,WTF::String,WTF::ASCIILiteral,WTF::String,char>(a1, "color(", 7, "prophoto-rgb", 13, 32, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (int8x16_t *)" / ", 4, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615A300);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v23, v3);
    WebCore::numericComponent((WebCore *)&v22, v4);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v26 = (int8x16_t *)"color(";
    v27 = 6;
    v24 = (int8x16_t *)"prophoto-rgb";
    v25 = 12;
    v8 = v22;
    v7 = v23;
    v9 = v21;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v26, &v24, 32, (uint64_t)v23, 32, (uint64_t)v22, 32, (uint64_t)v21, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(_QWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String,char,WTF::String,WTF::ASCIILiteral,WTF::String,char>(a1, "color(", 7, "rec2020", 8, 32, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (int8x16_t *)" / ", 4, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615A584);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v23, v3);
    WebCore::numericComponent((WebCore *)&v22, v4);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v26 = (int8x16_t *)"color(";
    v27 = 6;
    v24 = (int8x16_t *)"rec2020";
    v25 = 7;
    v8 = v22;
    v7 = v23;
    v9 = v21;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v26, &v24, 32, (uint64_t)v23, 32, (uint64_t)v22, 32, (uint64_t)v21, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(_QWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String,char,WTF::String,WTF::ASCIILiteral,WTF::String,char>(a1, "color(", 7, "srgb", 5, 32, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (int8x16_t *)" / ", 4, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615A808);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v23, v3);
    WebCore::numericComponent((WebCore *)&v22, v4);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v26 = (int8x16_t *)"color(";
    v27 = 6;
    v24 = (int8x16_t *)"srgb";
    v25 = 4;
    v8 = v22;
    v7 = v23;
    v9 = v21;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v26, &v24, 32, (uint64_t)v23, 32, (uint64_t)v22, 32, (uint64_t)v21, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::serializationForCSS(_QWORD *a1, unint64_t a2, int a3)
{
  unsigned __int8 v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  size_t v8;
  char __s[4];

  v3 = a2;
  if (a3)
    return WebCore::serializationUsingColorFunction(a1, a2);
  v5 = a2 >> 8;
  v6 = a2 >> 16;
  if (BYTE3(a2) == 255)
  {
    result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,char>(a1, (uint64_t)"rgb(", 5, a2, (uint64_t)", ", 3, BYTE1(a2), (uint64_t)", ", 3, BYTE2(a2), 0x29u);
    if (!*a1)
      __break(0xC471u);
  }
  else if (BYTE3(a2))
  {
    *(_DWORD *)__s = WebCore::fractionDigitsForFractionalAlphaValue((WebCore *)BYTE3(a2));
    v8 = strlen(__s);
    return WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char>((uint64_t)a1, v3, v5, v6, __s, v8);
  }
  else
  {
    return WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(a1, a2, BYTE1(a2), BYTE2(a2));
  }
  return result;
}

uint64_t WebCore::serializationUsingColorFunction(_QWORD *a1, unsigned int a2)
{
  float v3;
  float32x2_t v4;
  float v5;

  v3 = (float)a2 / 255.0;
  v4 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a2), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
  v5 = (float)HIBYTE(a2) / 255.0;
  return WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a1, &v3);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(_QWORD *a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4)
{
  unsigned __int8 v5;
  int v8;
  unsigned __int8 v9;
  unsigned int v10;
  int v11;
  unsigned __int8 v12;
  unsigned int v13;
  int v14;
  unsigned __int8 v15;
  unsigned int v16;
  uint64_t result;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _WORD *v26;
  unsigned __int8 v27;
  unsigned int v28;
  char *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  unsigned __int8 v34;
  unsigned int v35;
  char *v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  char v40[4];
  unsigned int v41;
  _DWORD *v42;

  v5 = a3;
  v8 = 0;
  v9 = a2;
  do
  {
    ++v8;
    v10 = v9;
    v9 /= 0xAu;
  }
  while (v10 > 9);
  v11 = 0;
  v12 = a3;
  do
  {
    ++v11;
    v13 = v12;
    v12 /= 0xAu;
  }
  while (v13 > 9);
  v14 = 0;
  v15 = a4;
  do
  {
    ++v14;
    v16 = v15;
    v15 /= 0xAu;
  }
  while (v16 > 9);
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(5, v8, 2, v11, 2, v14, 4, (uint64_t)v40);
  if (v40[0])
    goto LABEL_32;
  v18 = v41;
  if (!v41)
  {
    v39 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    *a1 = v39;
    return result;
  }
  if ((v41 & 0x80000000) != 0 || (result = WTF::tryFastCompactMalloc((WTF *)(v41 + 20)), (v19 = v42) == 0))
  {
LABEL_32:
    *a1 = 0;
    __break(0xC471u);
  }
  else
  {
    v20 = 0;
    *v42 = 2;
    v19[1] = v18;
    *((_QWORD *)v19 + 1) = v19 + 5;
    *((_QWORD *)v19 + 2) = 0x6162677200000004;
    v21 = a2;
    *((_BYTE *)v19 + 24) = 40;
    do
    {
      v22 = v21;
      *((_BYTE *)&v42 + v20-- + 3) = (v21 % 0xAu) | 0x30;
      v21 /= 0xAu;
    }
    while (v22 > 9);
    if (v20 + 5 <= 4)
      result = (uint64_t)memcpy((char *)v19 + 25, (char *)&v42 + v20 + 4, -v20);
    v23 = 0;
    do
    {
      ++v23;
      v24 = a2;
      a2 /= 0xAu;
    }
    while (v24 > 9);
    v25 = 0;
    v26 = (_WORD *)((char *)v19 + v23 + 25);
    *v26 = 8236;
    v27 = v5;
    do
    {
      v28 = v27;
      *((_BYTE *)&v42 + v25-- + 3) = (v27 % 0xAu) | 0x30;
      v27 /= 0xAu;
    }
    while (v28 > 9);
    v29 = (char *)(v26 + 1);
    if (v25 + 5 <= 4)
      result = (uint64_t)memcpy(v29, (char *)&v42 + v25 + 4, -v25);
    v30 = 0;
    do
    {
      ++v30;
      v31 = v5;
      v5 /= 0xAu;
    }
    while (v31 > 9);
    v32 = 0;
    v33 = &v29[v30];
    *(_WORD *)v33 = 8236;
    v34 = a4;
    do
    {
      v35 = v34;
      *((_BYTE *)&v42 + v32-- + 3) = (v34 % 0xAu) | 0x30;
      v34 /= 0xAu;
    }
    while (v35 > 9);
    v36 = v33 + 2;
    if (v32 + 5 <= 4)
      result = (uint64_t)memcpy(v36, (char *)&v42 + v32 + 4, -v32);
    v37 = 0;
    do
    {
      ++v37;
      v38 = a4;
      a4 /= 0xAu;
    }
    while (v38 >= 0xA);
    *(_DWORD *)&v36[v37] = 691019820;
    *a1 = v19;
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char>(uint64_t result, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, _BYTE *a5, unint64_t a6)
{
  unint64_t v6;
  unsigned int v7;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  _QWORD *v12;
  unsigned __int8 v13;
  unsigned int v14;
  int v15;
  unsigned __int8 v16;
  unsigned int v17;
  int v18;
  unsigned __int8 v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _WORD *v38;
  unsigned __int8 v39;
  unsigned int v40;
  char *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 v46;
  unsigned int v47;
  char *v48;
  int v49;
  unsigned int v50;
  char *v51;
  _BYTE *v52;
  _DWORD *v53;

  v6 = a6 >> 31;
  if (a6 >> 31)
  {
    __break(0xC471u);
    goto LABEL_56;
  }
  v7 = a6;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v12 = (_QWORD *)result;
  v13 = a2;
  do
  {
    LODWORD(v6) = v6 + 1;
    v14 = v13;
    v13 /= 0xAu;
  }
  while (v14 > 9);
  v15 = 0;
  v16 = a3;
  do
  {
    ++v15;
    v17 = v16;
    v16 /= 0xAu;
  }
  while (v17 > 9);
  v18 = 0;
  v19 = a4;
  do
  {
    ++v18;
    v20 = v19;
    v19 /= 0xAu;
  }
  while (v20 > 9);
  if ((a6 & 0x80000000) != 0)
    goto LABEL_55;
  if (__OFADD__((_DWORD)a6, 1))
    goto LABEL_55;
  v21 = a6 + 5;
  if (__OFADD__(a6 + 1, 4))
    goto LABEL_55;
  if (v18 < 0)
    goto LABEL_55;
  v22 = __OFADD__(v18, v21);
  v23 = v18 + v21;
  if (v22)
    goto LABEL_55;
  v22 = __OFADD__(v23, 2);
  v24 = v23 + 2;
  v25 = v22;
  if (v15 < 0)
    goto LABEL_55;
  if (v25)
    goto LABEL_55;
  v22 = __OFADD__(v15, v24);
  v26 = v15 + v24;
  if (v22)
    goto LABEL_55;
  v22 = __OFADD__(v26, 2);
  v27 = v26 + 2;
  v28 = v22;
  if ((v6 & 0x80000000) != 0)
    goto LABEL_55;
  if (v28)
    goto LABEL_55;
  v22 = __OFADD__((_DWORD)v6, v27);
  v29 = v6 + v27;
  if (v22)
    goto LABEL_55;
  v30 = (v29 + 5);
  if (__OFADD__(v29, 5))
    goto LABEL_55;
  if (v29 == -5)
  {
    v31 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_51;
  }
  if ((v30 & 0x80000000) != 0 || (result = WTF::tryFastCompactMalloc((WTF *)(v30 + 20)), (v31 = v53) == 0))
  {
LABEL_55:
    *v12 = 0;
    __break(0xC471u);
LABEL_56:
    JUMPOUT(0x19615B1C0);
  }
  v32 = 0;
  *v53 = 2;
  v31[1] = v30;
  *((_QWORD *)v31 + 1) = v31 + 5;
  *((_QWORD *)v31 + 2) = 0x6162677200000004;
  v33 = v11;
  *((_BYTE *)v31 + 24) = 40;
  do
  {
    v34 = v33;
    *((_BYTE *)&v53 + v32-- + 3) = (v33 % 0xAu) | 0x30;
    v33 /= 0xAu;
  }
  while (v34 > 9);
  if (v32 + 5 <= 4)
    result = (uint64_t)memcpy((char *)v31 + 25, (char *)&v53 + v32 + 4, -v32);
  v35 = 0;
  do
  {
    ++v35;
    v36 = v11;
    v11 /= 0xAu;
  }
  while (v36 > 9);
  v37 = 0;
  v38 = (_WORD *)((char *)v31 + v35 + 25);
  *v38 = 8236;
  v39 = v10;
  do
  {
    v40 = v39;
    *((_BYTE *)&v53 + v37-- + 3) = (v39 % 0xAu) | 0x30;
    v39 /= 0xAu;
  }
  while (v40 > 9);
  v41 = (char *)(v38 + 1);
  if (v37 + 5 <= 4)
    result = (uint64_t)memcpy(v41, (char *)&v53 + v37 + 4, -v37);
  v42 = 0;
  do
  {
    ++v42;
    v43 = v10;
    v10 /= 0xAu;
  }
  while (v43 > 9);
  v44 = 0;
  v45 = &v41[v42];
  *(_WORD *)v45 = 8236;
  v46 = v9;
  do
  {
    v47 = v46;
    *((_BYTE *)&v53 + v44-- + 3) = (v46 % 0xAu) | 0x30;
    v46 /= 0xAu;
  }
  while (v47 > 9);
  v48 = v45 + 2;
  if (v44 + 5 <= 4)
    result = (uint64_t)memcpy(v48, (char *)&v53 + v44 + 4, -v44);
  v49 = 0;
  do
  {
    ++v49;
    v50 = v9;
    v9 /= 0xAu;
  }
  while (v50 > 9);
  v51 = &v48[v49];
  *(_DWORD *)v51 = 774905900;
  v52 = v51 + 4;
  if (v7)
  {
    if (v7 == 1)
      *v52 = *a5;
    else
      result = (uint64_t)memcpy(v52, a5, v7);
  }
  v52[v7] = 41;
LABEL_51:
  *v12 = v31;
  return result;
}

uint64_t WebCore::fractionDigitsForFractionalAlphaValue(WebCore *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;

  if ((_DWORD)this == (unsigned __int16)(255 * ((unsigned __int16)(100 * (_WORD)this + 127) / 0xFFu) + 50) / 0x64u)
  {
    v1 = 0;
    if (((32897 * (100 * (_DWORD)this + 127)) >> 23) % 0xAu)
      LOBYTE(v2) = (((32897 * (100 * (_DWORD)this + 127)) >> 23) % 0xAu) | 0x30;
    else
      LOBYTE(v2) = 0;
    if (((32897 * (100 * (_DWORD)this + 127)) >> 23) % 0xAu)
      LOBYTE(v3) = (41130 * (_DWORD)this) >> 20;
    else
      LOBYTE(v3) = (8225 * (10 * (_DWORD)this + 127)) >> 21;
  }
  else
  {
    v3 = (41130 * (_DWORD)this) >> 20;
    if ((_DWORD)this == 255)
      LOBYTE(v3) = v3 - 10;
    v2 = (((3289700 * (_DWORD)this) >> 23)
        - 10 * ((205 * ((3289700 * (_DWORD)this) >> 23)) >> 11)) | 0x30;
    v4 = (16843010 * (unint64_t)(1000 * (_DWORD)this + 127)) >> 32;
    v1 = (((_DWORD)v4 - 10 * ((6554 * v4) >> 16)) << 16) | 0x300000;
  }
  return v1 | (v2 << 8) | (v3 + 48);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,char>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11)
{
  int v11;
  int v12;
  int v13;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  int v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;

  if (a3)
  {
    v11 = a3 - 1;
    v23 = a2;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_13;
  }
  else
  {
    v11 = 0;
    v23 = a2;
  }
  v24 = v11;
  v22 = a4;
  if (a6)
  {
    v12 = a6 - 1;
    v20 = a5;
    if ((unint64_t)(a6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19615B3D8);
    }
  }
  else
  {
    v12 = 0;
    v20 = a5;
  }
  v21 = v12;
  v19 = a7;
  if (a9)
  {
    v13 = a9 - 1;
    v17 = a8;
    if (!((unint64_t)(a9 - 1) >> 31))
      goto LABEL_7;
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x19615B3A8);
  }
  v13 = 0;
  v17 = a8;
LABEL_7:
  v18 = v13;
  v16 = a10;
  v15 = a11;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(a1, (uint64_t)&v23, &v22, (uint64_t)&v20, &v19, (uint64_t)&v17, &v16, &v15);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[4];
  unsigned int v27;

  v16 = 0;
  v17 = *a3;
  do
  {
    ++v16;
    v18 = v17 > 9;
    v17 /= 0xAu;
  }
  while (v18);
  v19 = 0;
  v20 = *a5;
  do
  {
    ++v19;
    v18 = v20 > 9;
    v20 /= 0xAu;
  }
  while (v18);
  v21 = 0;
  v22 = *a7;
  do
  {
    ++v21;
    v18 = v22 > 9;
    v22 /= 0xAu;
  }
  while (v18);
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(*(unsigned int *)(a2 + 8), v16, *(_DWORD *)(a4 + 8), v19, *(_DWORD *)(a6 + 8), v21, 1, (uint64_t)v26);
  if (v26[0])
  {
    v24 = 0;
  }
  else
  {
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v25, v27, *(char **)a2, *(_QWORD *)(a2 + 8), *a3, *(char **)a4, *(_QWORD *)(a4 + 8), *a5, *(_BYTE **)a6, *(_QWORD *)(a6 + 8), *a7, 0, *a8);
    v24 = v25;
  }
  *a1 = v24;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, char *a3, unsigned int a4, unsigned __int8 a5, char *a6, unsigned int a7, unsigned __int8 a8, _BYTE *a9, uint64_t a10, unsigned __int8 a11, int a12, unsigned __int8 a13)
{
  _QWORD *v13;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v13 = (_QWORD *)result;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0)
    {
      v22 = 0;
    }
    else
    {
      result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
      v22 = v23;
      if (v23)
      {
        *(_DWORD *)v23 = 2;
        *(_DWORD *)(v23 + 4) = a2;
        *(_QWORD *)(v23 + 8) = v23 + 20;
        *(_DWORD *)(v23 + 16) = 4;
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>((char *)(v23 + 20), a3, a4, a5, a6, a7, a8, v21, a9, a10, a11, a13);
      }
    }
  }
  else
  {
    v22 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  *v13 = v22;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, char *a2, unsigned int a3, unsigned __int8 a4, char *a5, unsigned int a6, unsigned __int8 a7, int a8, _BYTE *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(&__dst[a3], a4, a5, a6, a7, a9, a10, a11, a12);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(void *__dst, unsigned __int8 a2, char *a3, unsigned int a4, unsigned __int8 a5, _BYTE *a6, unsigned int a7, unsigned __int8 a8, uint64_t a9)
{
  unsigned __int8 v15;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE v23[4];

  v15 = a2;
  v17 = 0;
  v18 = a2;
  do
  {
    v19 = v18;
    v23[v17-- + 3] = (v18 % 0xAu) | 0x30;
    v18 /= 0xAu;
  }
  while (v19 > 9);
  if (v17 + 5 <= 4)
    memcpy(__dst, &v23[v17 + 4], -v17);
  v20 = 0;
  do
  {
    ++v20;
    v21 = v15;
    v15 /= 0xAu;
  }
  while (v21 > 9);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>((char *)__dst + v20, a3, a4, a5, a6, a7, a8, a9);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, char *a2, unsigned int a3, unsigned __int8 a4, _BYTE *a5, unsigned int a6, unsigned __int8 a7, char a8)
{
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(&__dst[a3], a4, a5, a6, a7, a8);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(void *__dst, unsigned __int8 a2, _BYTE *a3, unsigned int a4, unsigned __int8 a5, char a6)
{
  unsigned __int8 v10;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _BYTE v18[4];

  v10 = a2;
  v12 = 0;
  v13 = a2;
  do
  {
    v14 = v13;
    v18[v12-- + 3] = (v13 % 0xAu) | 0x30;
    v13 /= 0xAu;
  }
  while (v14 > 9);
  if (v12 + 5 <= 4)
    memcpy(__dst, &v18[v12 + 4], -v12);
  v15 = 0;
  do
  {
    ++v15;
    v16 = v10;
    v10 /= 0xAu;
  }
  while (v16 > 9);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>((_BYTE *)__dst + v15, a3, a4, a5, a6);
}

uint64_t WebCore::serializationForCSS(_QWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  long double v7;
  float v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  WTF::StringImpl *v13;
  float v14;
  float v15;
  long double v17;
  float v18;
  WTF::StringImpl *v19;
  BOOL v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const char *v25;
  int v26;
  int8x16_t *v27;
  int v28;

  v3 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  if (v5 == 1.0)
    goto LABEL_2;
  v14 = fabsf(v5 + -1.0);
  v15 = fabsf(v5);
  if (v15 < 1.0 && (float)(v15 * 3.4028e38) < v14)
    goto LABEL_9;
  v20 = v15 <= 1.0;
  if ((float)(v15 * 1.1755e-38) <= v14)
    v20 = 1;
  if ((float)(v14 / v15) <= 0.00000011921)
    v20 = 0;
  if (v14 > 0.00000011921 || v20)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v24, v3);
    WebCore::numericComponent((WebCore *)&v23, v4);
    v17 = fmod(v6, 360.0);
    v18 = fmod(v17 + 360.0, 360.0);
    WebCore::numericComponent((WebCore *)&v22, v18);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v27 = (int8x16_t *)"lch";
    v28 = 3;
    v10 = v23;
    v9 = v24;
    v19 = v21;
    v11 = v22;
    v25 = " / ";
    v26 = 3;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v27, 40, (uint64_t)v24, 32, (uint64_t)v23, 32, (uint64_t)v22, (uint64_t)&v25, (uint64_t)v21, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615BA0CLL);
    }
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        result = WTF::StringImpl::destroy(v19, v13);
        if (!v11)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v19 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v25, v3);
    WebCore::numericComponent((WebCore *)&v24, v4);
    v7 = fmod(v6, 360.0);
    v8 = fmod(v7 + 360.0, 360.0);
    WebCore::numericComponent((WebCore *)&v23, v8);
    v27 = (int8x16_t *)"lch";
    v28 = 3;
    v10 = v24;
    v9 = (WTF::StringImpl *)v25;
    v11 = v23;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v27, 40, (uint64_t)v25, 32, (uint64_t)v24, 32, (uint64_t)v23, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v11)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v11 == 2)
    result = WTF::StringImpl::destroy(v11, v13);
  else
    *(_DWORD *)v11 -= 2;
LABEL_16:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      result = WTF::StringImpl::destroy(v10, v13);
      if (!v9)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v9)
    return result;
LABEL_20:
  if (*(_DWORD *)v9 == 2)
    return WTF::StringImpl::destroy(v9, v13);
  *(_DWORD *)v9 -= 2;
  return result;
}

{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const char *v21;
  int v22;
  int8x16_t *v23;
  int v24;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v23 = (int8x16_t *)"lab";
    v24 = 3;
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    v21 = " / ";
    v22 = 3;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v23, 40, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (uint64_t)&v21, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615C358);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v21, v3);
    WebCore::numericComponent((WebCore *)&v20, v4);
    WebCore::numericComponent((WebCore *)&v19, v5);
    v23 = (int8x16_t *)"lab";
    v24 = 3;
    v8 = v20;
    v7 = (WTF::StringImpl *)v21;
    v9 = v19;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v23, 40, (uint64_t)v21, 32, (uint64_t)v20, 32, (uint64_t)v19, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

{
  float v3;
  float v4;
  float v5;
  float v6;
  long double v7;
  float v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  WTF::StringImpl *v13;
  float v14;
  float v15;
  long double v17;
  float v18;
  WTF::StringImpl *v19;
  BOOL v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const char *v25;
  int v26;
  int8x16_t *v27;
  int v28;

  v3 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  if (v5 == 1.0)
    goto LABEL_2;
  v14 = fabsf(v5 + -1.0);
  v15 = fabsf(v5);
  if (v15 < 1.0 && (float)(v15 * 3.4028e38) < v14)
    goto LABEL_9;
  v20 = v15 <= 1.0;
  if ((float)(v15 * 1.1755e-38) <= v14)
    v20 = 1;
  if ((float)(v14 / v15) <= 0.00000011921)
    v20 = 0;
  if (v14 > 0.00000011921 || v20)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v24, v3);
    WebCore::numericComponent((WebCore *)&v23, v4);
    v17 = fmod(v6, 360.0);
    v18 = fmod(v17 + 360.0, 360.0);
    WebCore::numericComponent((WebCore *)&v22, v18);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v27 = (int8x16_t *)"oklch";
    v28 = 5;
    v10 = v23;
    v9 = v24;
    v19 = v21;
    v11 = v22;
    v25 = " / ";
    v26 = 3;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v27, 40, (uint64_t)v24, 32, (uint64_t)v23, 32, (uint64_t)v22, (uint64_t)&v25, (uint64_t)v21, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615C5E8);
    }
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        result = WTF::StringImpl::destroy(v19, v13);
        if (!v11)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v19 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v25, v3);
    WebCore::numericComponent((WebCore *)&v24, v4);
    v7 = fmod(v6, 360.0);
    v8 = fmod(v7 + 360.0, 360.0);
    WebCore::numericComponent((WebCore *)&v23, v8);
    v27 = (int8x16_t *)"oklch";
    v28 = 5;
    v10 = v24;
    v9 = (WTF::StringImpl *)v25;
    v11 = v23;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v27, 40, (uint64_t)v25, 32, (uint64_t)v24, 32, (uint64_t)v23, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v11)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v11 == 2)
    result = WTF::StringImpl::destroy(v11, v13);
  else
    *(_DWORD *)v11 -= 2;
LABEL_16:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      result = WTF::StringImpl::destroy(v10, v13);
      if (!v9)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v9)
    return result;
LABEL_20:
  if (*(_DWORD *)v9 == 2)
    return WTF::StringImpl::destroy(v9, v13);
  *(_DWORD *)v9 -= 2;
  return result;
}

{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const char *v21;
  int v22;
  int8x16_t *v23;
  int v24;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v23 = (int8x16_t *)"oklab";
    v24 = 5;
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    v21 = " / ";
    v22 = 3;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v23, 40, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (uint64_t)&v21, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615C87CLL);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v21, v3);
    WebCore::numericComponent((WebCore *)&v20, v4);
    WebCore::numericComponent((WebCore *)&v19, v5);
    v23 = (int8x16_t *)"oklab";
    v24 = 5;
    v8 = v20;
    v7 = (WTF::StringImpl *)v21;
    v9 = v19;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v23, 40, (uint64_t)v21, 32, (uint64_t)v20, 32, (uint64_t)v19, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, int8x16_t **a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v32;
  int8x16_t *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int16 v37;
  size_t v38;
  char v39;
  _BYTE *v40;
  char *v41;
  __int128 v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  _BYTE *__srca;
  uint64_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;

  v14 = (_QWORD *)result;
  if (a4)
  {
    v15 = *(_DWORD *)(a4 + 4);
    if (a6)
    {
LABEL_3:
      v16 = *(_DWORD *)(a6 + 4);
      goto LABEL_4;
    }
  }
  else
  {
    v15 = 0;
    if (a6)
      goto LABEL_3;
  }
  v16 = 0;
LABEL_4:
  v17 = *((_DWORD *)a2 + 2);
  if (a8)
  {
    v18 = *(_DWORD *)(a8 + 4);
    if (v18 < 0)
      goto LABEL_53;
  }
  else
  {
    v18 = 0;
  }
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    goto LABEL_53;
  v21 = 0;
  v19 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  v23 = v19;
  if ((v16 & 0x80000000) == 0 && (v23 & 1) == 0)
  {
    v19 = __OFADD__(v16, v22);
    v24 = v16 + v22;
    if (v19)
      goto LABEL_53;
    v21 = 0;
    v19 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    v26 = v19;
    if ((v15 & 0x80000000) == 0 && !v26)
    {
      v19 = __OFADD__(v15, v25);
      v27 = v15 + v25;
      if (v19)
        goto LABEL_53;
      v21 = 0;
      v19 = __OFADD__(v27, 1);
      v28 = v27 + 1;
      v29 = v19;
      if ((v17 & 0x80000000) == 0 && !v29)
      {
        v30 = (v17 + v28);
        if (__OFADD__(v17, v28))
          goto LABEL_53;
        if (a4 && (*(_BYTE *)(a4 + 16) & 4) == 0
          || a6 && (*(_BYTE *)(a6 + 16) & 4) == 0
          || a8 && (*(_BYTE *)(a8 + 16) & 4) == 0)
        {
          if ((_DWORD)v30)
          {
            if (v30 <= 0x7FFFFFEF)
            {
              v32 = (_QWORD *)result;
              v33 = *a2;
              v34 = *((unsigned int *)a2 + 2);
              result = WTF::tryFastCompactMalloc((WTF *)(2 * v30 + 20));
              v21 = v52;
              if (v52)
              {
                v35 = (char *)(v52 + 20);
                *(_DWORD *)v52 = 2;
                *(_DWORD *)(v52 + 4) = v30;
                *(_QWORD *)(v52 + 8) = v52 + 20;
                *(_DWORD *)(v52 + 16) = 0;
                v36 = (char *)(v52 + 20 + 2 * v34);
                if ((v34 & 0xFFFFFFC0) != 0)
                {
                  v41 = &v35[2 * (v34 & 0xFFFFFFC0)];
                  v42 = 0uLL;
                  v14 = v32;
                  do
                  {
                    v53.val[0] = *v33;
                    v43 = v33[1];
                    v54.val[0] = v33[2];
                    v44 = v33[3];
                    v33 += 4;
                    v45 = v44;
                    v54.val[1] = 0uLL;
                    v55.val[0] = v43;
                    v53.val[1] = 0uLL;
                    v46 = v35;
                    vst2q_s8(v46, v53);
                    v46 += 32;
                    v55.val[1] = 0uLL;
                    vst2q_s8(v46, v55);
                    v47 = v35 + 64;
                    vst2q_s8(v47, v54);
                    v48 = v35 + 96;
                    vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
                    v35 += 128;
                  }
                  while (v35 != v41);
                  v35 = v41;
                }
                else
                {
                  v14 = v32;
                }
                for (; v35 != v36; v35 += 2)
                {
                  v37 = v33->u8[0];
                  v33 = (int8x16_t *)((char *)v33 + 1);
                  *(_WORD *)v35 = v37;
                }
                *(_WORD *)v36 = a3;
                result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((_WORD *)v36 + 1, a4, a5, a6, a7, a8, a9);
              }
              else
              {
                v14 = v32;
              }
              goto LABEL_39;
            }
LABEL_53:
            v21 = 0;
            goto LABEL_39;
          }
LABEL_56:
          v21 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_39;
        }
        if (!(_DWORD)v30)
          goto LABEL_56;
        if ((v30 & 0x80000000) != 0)
          goto LABEL_53;
        __srca = *a2;
        v38 = *((unsigned int *)a2 + 2);
        result = WTF::tryFastCompactMalloc((WTF *)(v30 + 20));
        v21 = v52;
        if (v52)
        {
          v39 = a5;
          v40 = (_BYTE *)(v52 + 20);
          *(_DWORD *)v52 = 2;
          *(_DWORD *)(v52 + 4) = v30;
          *(_QWORD *)(v52 + 8) = v52 + 20;
          *(_DWORD *)(v52 + 16) = 4;
          if ((_DWORD)v38)
          {
            if ((_DWORD)v38 == 1)
            {
              *v40 = *__srca;
            }
            else
            {
              memcpy((void *)(v52 + 20), __srca, v38);
              v39 = a5;
            }
          }
          v40[v38] = a3;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v40[v38 + 1], a4, v39, a6, a7, a8, a9);
        }
      }
    }
  }
LABEL_39:
  *v14 = v21;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, int8x16_t **a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  _QWORD *i;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  char v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  char v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  int v39;
  int8x16_t *v40;
  size_t v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  size_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int16 v57;
  unsigned __int128 *v58;
  unsigned __int128 *v59;
  unsigned __int128 *v60;
  unsigned __int128 v61;
  char v62;
  int8x16_t *v63;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;

  i = (_QWORD *)result;
  if (a4)
    v16 = *(_DWORD *)(a4 + 4);
  else
    v16 = 0;
  if (a6)
  {
    v17 = *(_DWORD *)(a6 + 4);
    if (a8)
    {
LABEL_5:
      v18 = *(_DWORD *)(a8 + 4);
      goto LABEL_6;
    }
  }
  else
  {
    v17 = 0;
    if (a8)
      goto LABEL_5;
  }
  v18 = 0;
LABEL_6:
  v19 = *((_DWORD *)a2 + 2);
  v20 = *(_DWORD *)(a9 + 8);
  if (a10)
  {
    v21 = *(_DWORD *)(a10 + 4);
    if (v21 < 0)
      goto LABEL_79;
  }
  else
  {
    v21 = 0;
  }
  v22 = 0;
  v23 = __OFADD__(v21, 1);
  v24 = v21 + 1;
  v25 = v23;
  if (v20 < 0 || (v25 & 1) != 0)
    goto LABEL_71;
  v22 = 0;
  v23 = __OFADD__(v20, v24);
  v26 = v20 + v24;
  v27 = v23;
  if (v18 < 0 || v27)
    goto LABEL_71;
  v23 = __OFADD__(v18, v26);
  v28 = v18 + v26;
  if (v23)
    goto LABEL_79;
  v22 = 0;
  v23 = __OFADD__(v28, 1);
  v29 = v28 + 1;
  v30 = v23;
  if (v17 < 0 || (v30 & 1) != 0)
    goto LABEL_71;
  v23 = __OFADD__(v17, v29);
  v31 = v17 + v29;
  if (v23)
    goto LABEL_79;
  v22 = 0;
  v23 = __OFADD__(v31, 1);
  v32 = v31 + 1;
  v33 = v23;
  if (v16 < 0 || (v33 & 1) != 0)
    goto LABEL_71;
  v23 = __OFADD__(v16, v32);
  v34 = v16 + v32;
  if (v23)
    goto LABEL_79;
  v22 = 0;
  v23 = __OFADD__(v34, 1);
  v35 = v34 + 1;
  v36 = v23;
  if (v19 < 0 || (v36 & 1) != 0)
    goto LABEL_71;
  v37 = (v19 + v35);
  if (__OFADD__(v19, v35))
    goto LABEL_79;
  if ((!a4 || (*(_BYTE *)(a4 + 16) & 4) != 0)
    && (!a6 || (*(_BYTE *)(a6 + 16) & 4) != 0)
    && (!a8 || (*(_BYTE *)(a8 + 16) & 4) != 0)
    && (!a10 || (*(_BYTE *)(a10 + 16) & 4) != 0))
  {
    v38 = a3;
    v39 = 1;
  }
  else
  {
    v38 = a3;
    v39 = 0;
  }
  v40 = *a2;
  v41 = *((unsigned int *)a2 + 2);
  v66 = (_QWORD *)result;
  v65 = *(_QWORD *)(a9 + 8);
  v63 = *(int8x16_t **)a9;
  if (!v39)
  {
    if ((_DWORD)v37)
    {
      if (v37 > 0x7FFFFFEF)
      {
        v22 = 0;
      }
      else
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * v37 + 20));
        v22 = v67;
        if (v67)
        {
          v47 = (char *)(v67 + 20);
          *(_DWORD *)v67 = 2;
          *(_DWORD *)(v67 + 4) = v37;
          *(_QWORD *)(v67 + 8) = v67 + 20;
          *(_DWORD *)(v67 + 16) = 0;
          v48 = v67 + 20 + 2 * v41;
          if ((v41 & 0xFFFFFFC0) != 0)
          {
            v49 = &v47[2 * (v41 & 0xFFFFFFC0)];
            v50 = 0uLL;
            do
            {
              v68.val[0] = *v40;
              v51 = v40[1];
              v69.val[0] = v40[2];
              v52 = v40[3];
              v40 += 4;
              v53 = v52;
              v69.val[1] = 0uLL;
              v70.val[0] = v51;
              v68.val[1] = 0uLL;
              v54 = v47;
              vst2q_s8(v54, v68);
              v54 += 32;
              v70.val[1] = 0uLL;
              vst2q_s8(v54, v70);
              v55 = v47 + 64;
              vst2q_s8(v55, v69);
              v56 = v47 + 96;
              vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
              v47 += 128;
            }
            while (v47 != v49);
            v47 = v49;
          }
          while (v47 != (char *)v48)
          {
            v57 = v40->u8[0];
            v40 = (int8x16_t *)((char *)v40 + 1);
            *(_WORD *)v47 = v57;
            v47 += 2;
          }
          *(_WORD *)v48 = v38;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((char *)(v48 + 2), a4, a5, a6, a7, a8, v63, v65, a10, a11);
        }
      }
    }
    else
    {
      v22 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    goto LABEL_70;
  }
  if (!(_DWORD)v37)
  {
    v22 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_71;
  }
  if ((v37 & 0x80000000) != 0)
  {
LABEL_79:
    v22 = 0;
    goto LABEL_71;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(v37 + 20));
  v22 = v67;
  if (!v67)
  {
LABEL_70:
    i = v66;
    goto LABEL_71;
  }
  v42 = (_BYTE *)(v67 + 20);
  *(_DWORD *)v67 = 2;
  *(_DWORD *)(v67 + 4) = v37;
  *(_QWORD *)(v67 + 8) = v67 + 20;
  *(_DWORD *)(v67 + 16) = 4;
  if ((_DWORD)v41)
  {
    if ((_DWORD)v41 == 1)
      *v42 = v40->i8[0];
    else
      memcpy((void *)(v67 + 20), v40, v41);
  }
  v42[v41] = v38;
  v43 = &v42[v41 + 1];
  if (a4)
  {
    v44 = *(_BYTE **)(a4 + 8);
    v45 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      i = v66;
      if ((_DWORD)v45)
      {
        if ((_DWORD)v45 == 1)
          *v43 = *v44;
        else
          memcpy(v43, v44, v45);
      }
    }
    else
    {
      v58 = (unsigned __int128 *)&v43[v45];
      if (v45 < 0x10)
      {
        v59 = (unsigned __int128 *)&v42[v41 + 1];
      }
      else
      {
        v59 = (unsigned __int128 *)&v43[v45 & 0xFFFFFFF0];
        v60 = (unsigned __int128 *)&v42[v41 + 1];
        do
        {
          v61 = (unsigned __int128)vld2q_s8(v44);
          v44 += 32;
          *v60++ = v61;
        }
        while (v60 != v59);
      }
      for (i = v66; v59 != v58; v59 = (unsigned __int128 *)((char *)v59 + 1))
      {
        v62 = *v44;
        v44 += 2;
        *(_BYTE *)v59 = v62;
      }
    }
    v46 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v46 = 0;
    i = v66;
  }
  v43[v46] = a5;
  result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v43[v46 + 1], a6, a7, a8, v63, v65, a10, a11);
LABEL_71:
  *i = v22;
  return result;
}

uint64_t WebCore::serializationUsingColorFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>(_QWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String,char,WTF::String,WTF::ASCIILiteral,WTF::String,char>(a1, "color(", 7, "xyz-d50", 8, 32, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (int8x16_t *)" / ", 4, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615CB08);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v23, v3);
    WebCore::numericComponent((WebCore *)&v22, v4);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v26 = (int8x16_t *)"color(";
    v27 = 6;
    v24 = (int8x16_t *)"xyz-d50";
    v25 = 7;
    v8 = v22;
    v7 = v23;
    v9 = v21;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v26, &v24, 32, (uint64_t)v23, 32, (uint64_t)v22, 32, (uint64_t)v21, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::serializationUsingColorFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(_QWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  if (v6 == 1.0)
    goto LABEL_2;
  v12 = fabsf(v6 + -1.0);
  v13 = fabsf(v6);
  if (v13 < 1.0 && (float)(v13 * 3.4028e38) < v12)
    goto LABEL_9;
  v16 = v13 <= 1.0;
  if ((float)(v13 * 1.1755e-38) <= v12)
    v16 = 1;
  if ((float)(v12 / v13) <= 0.00000011921)
    v16 = 0;
  if (v12 > 0.00000011921 || v16)
  {
LABEL_9:
    WebCore::numericComponent((WebCore *)&v20, v3);
    WebCore::numericComponent((WebCore *)&v19, v4);
    WebCore::numericComponent((WebCore *)&v18, v5);
    WebCore::numericComponent((WebCore *)&v17, v6);
    v8 = v19;
    v7 = v20;
    v15 = v17;
    v9 = v18;
    result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String,char,WTF::String,WTF::ASCIILiteral,WTF::String,char>(a1, "color(", 7, "xyz-d65", 8, 32, (uint64_t)v20, 32, (uint64_t)v19, 32, (uint64_t)v18, (int8x16_t *)" / ", 4, (uint64_t)v17, 0x29u);
    if (!*a1)
    {
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x19615CD8CLL);
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        result = WTF::StringImpl::destroy(v15, v11);
        if (!v9)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
LABEL_2:
    WebCore::numericComponent((WebCore *)&v23, v3);
    WebCore::numericComponent((WebCore *)&v22, v4);
    WebCore::numericComponent((WebCore *)&v21, v5);
    v26 = (int8x16_t *)"color(";
    v27 = 6;
    v24 = (int8x16_t *)"xyz-d65";
    v25 = 7;
    v8 = v22;
    v7 = v23;
    v9 = v21;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a1, &v26, &v24, 32, (uint64_t)v23, 32, (uint64_t)v22, 32, (uint64_t)v21, 41);
    if (!*a1)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy(v9, v11);
  else
    *(_DWORD *)v9 -= 2;
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v11);
  *(_DWORD *)v7 -= 2;
  return result;
}

_BYTE *WebCore::serializationForHTML(_QWORD *a1, unint64_t a2, int a3)
{
  int16x4_t v4;
  _BYTE *result;
  int v6;
  int v7;
  int v8;
  float32x4_t v9;
  _BYTE v10[16];
  int v11;
  _BYTE v12[16];
  int v13;
  _BYTE v14[16];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4.i32[0] = a2;
    v4.i32[1] = a2 >> 8;
    v9 = vdivq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vuzp1_s16(v4, (int16x4_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(a2), (uint64x2_t)xmmword_1969F7760))) & 0xFF00FF00FF00FFLL))), (float32x4_t)vdupq_n_s32(0x437F0000u));
    return (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a1, v9.f32);
  }
  else if ((~(_DWORD)a2 & 0xFF000000) != 0)
  {
    v9.i64[0] = bswap32(a2) | 0x1104000000000000;
    return (_BYTE *)WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(a1, v9.u64[0], (uint64_t *)&v9);
  }
  else
  {
    WTF::Internal::appendHex();
    v15 = v6;
    WTF::Internal::appendHex();
    v13 = v7;
    WTF::Internal::appendHex();
    v11 = v8;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(a1, 35, (uint64_t)v14, (uint64_t)v12, (uint64_t)v10);
    if (!*a1)
    {
      __break(0xC471u);
      JUMPOUT(0x19615D04CLL);
    }
  }
  return result;
}

_BYTE *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(_BYTE *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  _BYTE *v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  size_t v24;
  _BYTE *v25;
  size_t v26;
  _BYTE *v27;
  uint64_t v28;

  v5 = result;
  v7 = (unsigned int *)(a4 + 16);
  v6 = *(_DWORD *)(a4 + 16);
  v9 = (unsigned int *)(a5 + 16);
  v8 = *(_DWORD *)(a5 + 16);
  if ((v8 | v6) < 0)
    goto LABEL_25;
  v10 = 0;
  v12 = (unsigned int *)(a3 + 16);
  v11 = *(_DWORD *)(a3 + 16);
  v13 = __OFADD__(v6, v8);
  v14 = v6 + v8;
  v15 = v13;
  if (v11 < 0 || (v15 & 1) != 0)
    goto LABEL_21;
  v13 = __OFADD__(v11, v14);
  v16 = v11 + v14;
  if (v13)
    goto LABEL_25;
  v17 = (v16 + 1);
  if (__OFADD__(v16, 1))
    goto LABEL_25;
  if (v16 == -1)
  {
    v10 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_21;
  }
  if ((v17 & 0x80000000) != 0)
  {
LABEL_25:
    v10 = 0;
    goto LABEL_21;
  }
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v17 + 20));
  v10 = v28;
  if (v28)
  {
    *(_BYTE *)(v28 + 20) = a2;
    *(_DWORD *)v28 = 2;
    *(_DWORD *)(v28 + 4) = v17;
    *(_QWORD *)(v28 + 8) = v28 + 20;
    *(_DWORD *)(v28 + 16) = 4;
    v19 = (_BYTE *)(v28 + 21);
    v20 = *v12;
    if ((_DWORD)v20)
    {
      v21 = (char *)v12 - v20;
      if ((_DWORD)v20 == 1)
        *v19 = *v21;
      else
        result = memcpy((void *)(v28 + 21), v21, v20);
    }
    v22 = *v12;
    v23 = &v19[v22];
    v24 = *v7;
    if ((_DWORD)v24)
    {
      v25 = (char *)v7 - v24;
      if ((_DWORD)v24 == 1)
        *v23 = *v25;
      else
        result = memcpy(&v19[v22], v25, v24);
    }
    v26 = *v9;
    if ((_DWORD)v26)
    {
      result = &v23[*v7];
      v27 = (char *)v9 - v26;
      if ((_DWORD)v26 == 1)
        *result = *v27;
      else
        result = memcpy(result, v27, v26);
    }
  }
LABEL_21:
  *v5 = v10;
  return result;
}

_BYTE *WebCore::serializationForRenderTreeAsText(uint64_t *a1, unint64_t a2, int a3)
{
  int16x4_t v4;
  _BYTE *result;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  float32x4_t v29;
  char v30[16];
  int v31;
  char v32[16];
  int v33;
  char v34[16];
  int v35;
  size_t v36;
  size_t v37;
  size_t __n;
  unsigned int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4.i32[0] = a2;
    v4.i32[1] = a2 >> 8;
    v29 = vdivq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vuzp1_s16(v4, (int16x4_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(a2), (uint64x2_t)xmmword_1969F7760))) & 0xFF00FF00FF00FFLL))), (float32x4_t)vdupq_n_s32(0x437F0000u));
    return (_BYTE *)WebCore::serializationUsingColorFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(a1, v29.f32);
  }
  if ((~(_DWORD)a2 & 0xFF000000) != 0)
  {
    WTF::Internal::appendHex();
    v39 = v9;
    WTF::Internal::appendHex();
    LODWORD(__n) = v10;
    WTF::Internal::appendHex();
    LODWORD(v37) = v11;
    result = (_BYTE *)WTF::Internal::appendHex();
    LODWORD(v36) = v12;
    if (((v37 | v12) & 0x80000000) == 0)
    {
      v13 = v37 + v12;
      v14 = __OFADD__((_DWORD)v37, v12);
      if ((__n & 0x80000000) == 0 && !v14)
      {
        v15 = __n + v13;
        v16 = __OFADD__((_DWORD)__n, v13);
        if ((v39 & 0x80000000) == 0 && !v16)
        {
          v17 = __OFADD__(v39, v15);
          v18 = v39 + v15;
          if (!v17)
          {
            v19 = (v18 + 1);
            if (!__OFADD__(v18, 1))
            {
              if (v18 == -1)
              {
                v20 = MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
LABEL_34:
                *a1 = v20;
                return result;
              }
              if ((v19 & 0x80000000) == 0)
              {
                result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v19 + 20));
                v20 = v29.i64[0];
                if (v29.i64[0])
                {
                  *(_BYTE *)(v29.i64[0] + 20) = 35;
                  *(_DWORD *)v20 = 2;
                  *(_DWORD *)(v20 + 4) = v19;
                  *(_QWORD *)(v20 + 8) = v20 + 20;
                  *(_DWORD *)(v20 + 16) = 4;
                  v21 = (_BYTE *)(v20 + 21);
                  v22 = v39;
                  if (v39)
                  {
                    v23 = (char *)&v39 - v39;
                    if (v39 == 1)
                      *v21 = *v23;
                    else
                      result = memcpy((void *)(v20 + 21), v23, v39);
                  }
                  v24 = &v21[v22];
                  if ((_DWORD)__n)
                  {
                    v25 = (char *)&__n - __n;
                    if ((_DWORD)__n == 1)
                      *v24 = *v25;
                    else
                      result = memcpy(v24, v25, __n);
                  }
                  v26 = &v24[__n];
                  if ((_DWORD)v37)
                  {
                    v27 = (char *)&v37 - v37;
                    if ((_DWORD)v37 == 1)
                      *v26 = *v27;
                    else
                      result = memcpy(v26, v27, v37);
                  }
                  if ((_DWORD)v36)
                  {
                    result = &v26[v37];
                    v28 = (char *)&v36 - v36;
                    if ((_DWORD)v36 == 1)
                      *result = *v28;
                    else
                      result = memcpy(result, v28, v36);
                  }
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
    }
    *a1 = 0;
    __break(0xC471u);
LABEL_42:
    JUMPOUT(0x19615D310);
  }
  WTF::Internal::appendHex();
  v35 = v6;
  WTF::Internal::appendHex();
  v33 = v7;
  WTF::Internal::appendHex();
  v31 = v8;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(a1, 35, (uint64_t)v34, (uint64_t)v32, (uint64_t)v30);
  if (!*a1)
  {
    __break(0xC471u);
    goto LABEL_42;
  }
  return result;
}

void WebCore::ComplexTextController::~ComplexTextController(WebCore::ComplexTextController *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  WTF *v9;
  WTF *v10;
  WTF *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v19;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  v3 = *((unsigned int *)this + 1379);
  if ((_DWORD)v3)
  {
    v24 = (WTF::StringImpl **)*((_QWORD *)this + 688);
    v25 = 8 * v3;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  v4 = (WTF *)*((_QWORD *)this + 688);
  if (v4)
  {
    *((_QWORD *)this + 688) = 0;
    *((_DWORD *)this + 1378) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 1375);
  if ((_DWORD)v5)
  {
    v6 = (const void **)*((_QWORD *)this + 686);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        CFRelease(v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v9 = (WTF *)*((_QWORD *)this + 686);
  if (v9)
  {
    *((_QWORD *)this + 686) = 0;
    *((_DWORD *)this + 1374) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = (WTF *)*((_QWORD *)this + 676);
  if ((WebCore::ComplexTextController *)((char *)this + 5424) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 676) = 0;
    *((_DWORD *)this + 1354) = 0;
    WTF::fastFree(v10, a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 666);
  if ((WebCore::ComplexTextController *)((char *)this + 5344) != v12 && v12)
  {
    *((_QWORD *)this + 666) = 0;
    *((_DWORD *)this + 1334) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *((unsigned int *)this + 1299);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)*((_QWORD *)this + 648);
    v15 = 8 * v13;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
        WTF::RefCounted<WebCore::ComplexTextController::ComplexTextRun>::deref(v16, a2);
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v17 = (WTF *)*((_QWORD *)this + 648);
  if ((WebCore::ComplexTextController *)((char *)this + 5200) != v17 && v17 != 0)
  {
    *((_QWORD *)this + 648) = 0;
    *((_DWORD *)this + 1298) = 0;
    WTF::fastFree(v17, a2);
  }
  v19 = (WTF *)*((_QWORD *)this + 582);
  if ((WebCore::ComplexTextController *)((char *)this + 4672) != v19 && v19 != 0)
  {
    *((_QWORD *)this + 582) = 0;
    *((_DWORD *)this + 1166) = 0;
    WTF::fastFree(v19, a2);
  }
  v21 = (WTF *)*((_QWORD *)this + 516);
  if ((WebCore::ComplexTextController *)((char *)this + 4144) != v21 && v21)
  {
    *((_QWORD *)this + 516) = 0;
    *((_DWORD *)this + 1034) = 0;
    WTF::fastFree(v21, a2);
  }
  v22 = (WTF *)*((_QWORD *)this + 258);
  if ((WebCore::ComplexTextController *)((char *)this + 2080) != v22 && v22)
  {
    *((_QWORD *)this + 258) = 0;
    *((_DWORD *)this + 518) = 0;
    WTF::fastFree(v22, a2);
  }
  v23 = *(WTF **)this;
  if ((WebCore::ComplexTextController *)((char *)this + 16) != *(WebCore::ComplexTextController **)this)
  {
    if (v23)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v23, a2);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int *v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  int v141;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v70 = *(a2 - 1);
        v71 = *(_DWORD *)(*a3 + 5196);
        if (v71 <= v70)
        {
          __break(0xC471u);
          JUMPOUT(0x19615E424);
        }
        v72 = *v10;
        if (v71 <= v72)
        {
          __break(0xC471u);
          JUMPOUT(0x19615E42CLL);
        }
        v73 = *(_QWORD *)(*a3 + 5184);
        if (*(_DWORD *)(*(_QWORD *)(v73 + 8 * v70) + 1792) + *(_DWORD *)(*(_QWORD *)(v73 + 8 * v70) + 1780) < (*(_DWORD *)(*(_QWORD *)(v73 + 8 * v72) + 1780) + *(_DWORD *)(*(_QWORD *)(v73 + 8 * v72) + 1792)))
        {
          *v10 = v70;
          *(a2 - 1) = v72;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(v10, v10 + 1, a2 - 1, *a3);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *,0>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v89 = (v12 - 2) >> 1;
              v90 = v89;
              do
              {
                v91 = v90;
                if (v89 >= v90)
                {
                  v92 = *a3;
                  v93 = (2 * v91) | 1;
                  v94 = &v10[v93];
                  v95 = *v94;
                  if (2 * v91 + 2 >= (uint64_t)v12)
                  {
                    v96 = *(_DWORD *)(v92 + 5196);
                  }
                  else
                  {
                    v96 = *(_DWORD *)(v92 + 5196);
                    if (v96 <= v95)
                      goto LABEL_217;
                    v97 = v94[1];
                    if (v96 <= v97)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19615E41CLL);
                    }
                    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 5184) + 8 * v95) + 1792)
                       + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 5184) + 8 * v95) + 1780) < (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 5184) + 8 * v97) + 1780) + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 5184) + 8 * v97) + 1792)))
                    {
                      LODWORD(v95) = v94[1];
                      ++v94;
                      v93 = 2 * v91 + 2;
                    }
                  }
                  if (v96 <= v95)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19615E3D4);
                  }
                  v98 = &v10[v91];
                  v99 = *v98;
                  if (v96 <= v99)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19615E3DCLL);
                  }
                  v100 = *(_QWORD *)(v92 + 5184);
                  result = *(_QWORD *)(v100 + 8 * v99);
                  if (*(_DWORD *)(*(_QWORD *)(v100 + 8 * v95) + 1792)
                     + *(_DWORD *)(*(_QWORD *)(v100 + 8 * v95) + 1780) >= (*(_DWORD *)(result + 1780) + *(_DWORD *)(result + 1792)))
                  {
                    do
                    {
                      v101 = v94;
                      *v98 = v95;
                      if (v89 < v93)
                        break;
                      v102 = (2 * v93) | 1;
                      v94 = &v10[v102];
                      v93 = 2 * v93 + 2;
                      v95 = *v94;
                      if (v93 >= (uint64_t)v12)
                      {
                        v103 = *(_DWORD *)(v92 + 5196);
                        v93 = v102;
                      }
                      else
                      {
                        v103 = *(_DWORD *)(v92 + 5196);
                        if (v103 <= v95)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19615E384);
                        }
                        v104 = v94[1];
                        if (v103 <= v104)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19615E38CLL);
                        }
                        if (*(_DWORD *)(*(_QWORD *)(v100 + 8 * v95) + 1792)
                           + *(_DWORD *)(*(_QWORD *)(v100 + 8 * v95) + 1780) >= (*(_DWORD *)(*(_QWORD *)(v100 + 8 * v104) + 1780)
                                                                                               + *(_DWORD *)(*(_QWORD *)(v100 + 8 * v104) + 1792)))
                        {
                          v93 = v102;
                        }
                        else
                        {
                          LODWORD(v95) = v94[1];
                          ++v94;
                        }
                      }
                      if (v103 <= v95)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19615E354);
                      }
                      if (v103 <= v99)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19615E35CLL);
                      }
                      v98 = v101;
                    }
                    while (*(_DWORD *)(*(_QWORD *)(v100 + 8 * v95) + 1792)
                          + *(_DWORD *)(*(_QWORD *)(v100 + 8 * v95) + 1780) >= (*(_DWORD *)(result + 1780) + *(_DWORD *)(result + 1792)));
                    *v101 = v99;
                  }
                }
                v90 = v91 - 1;
              }
              while (v91);
              v105 = (unint64_t)v11 >> 2;
              do
              {
                v106 = 0;
                v107 = *v10;
                v108 = *a3;
                v109 = v10;
                do
                {
                  v110 = &v109[v106];
                  v113 = v110[1];
                  v111 = v110 + 1;
                  v112 = v113;
                  v114 = (2 * v106) | 1;
                  v106 = 2 * v106 + 2;
                  if (v106 >= v105)
                  {
                    v106 = v114;
                  }
                  else
                  {
                    v115 = *(_DWORD *)(v108 + 5196);
                    if (v115 <= v112)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19615E30CLL);
                    }
                    result = v111[1];
                    if (v115 <= result)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19615E314);
                    }
                    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 5184) + 8 * v112) + 1792)
                       + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 5184) + 8 * v112) + 1780) >= (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 5184) + 8 * result) + 1780) + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 5184) + 8 * result) + 1792)))
                    {
                      v106 = v114;
                    }
                    else
                    {
                      LODWORD(v112) = v111[1];
                      ++v111;
                    }
                  }
                  *v109 = v112;
                  v109 = v111;
                }
                while (v106 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
                if (v111 == --a2)
                {
                  *v111 = v107;
                }
                else
                {
                  *v111 = *a2;
                  *a2 = v107;
                  v116 = (char *)v111 - (char *)v10 + 4;
                  if (v116 >= 5)
                  {
                    v117 = *a3;
                    v118 = (((unint64_t)v116 >> 2) - 2) >> 1;
                    v119 = &v10[v118];
                    v120 = *v119;
                    v121 = *(_DWORD *)(*a3 + 5196);
                    if (v121 <= v120)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19615E3F4);
                    }
                    v122 = *v111;
                    if (v121 <= v122)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19615E3FCLL);
                    }
                    v123 = *(_QWORD *)(v117 + 5184);
                    v124 = *(_QWORD *)(v123 + 8 * v122);
                    result = (*(_DWORD *)(v124 + 1780) + *(_DWORD *)(v124 + 1792));
                    if (*(_DWORD *)(*(_QWORD *)(v123 + 8 * v120) + 1792)
                       + *(_DWORD *)(*(_QWORD *)(v123 + 8 * v120) + 1780) < result)
                    {
                      do
                      {
                        v125 = v119;
                        *v111 = v120;
                        if (!v118)
                          break;
                        v118 = (v118 - 1) >> 1;
                        v119 = &v10[v118];
                        v120 = *v119;
                        v126 = *(_DWORD *)(v117 + 5196);
                        if (v126 <= v120)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19615E374);
                        }
                        if (v126 <= v122)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19615E37CLL);
                        }
                        result = (*(_DWORD *)(*(_QWORD *)(v123 + 8 * v120) + 1792)
                                              + *(_DWORD *)(*(_QWORD *)(v123 + 8 * v120) + 1780));
                        v111 = v125;
                      }
                      while (result < *(_DWORD *)(v124 + 1780) + *(_DWORD *)(v124 + 1792));
                      *v125 = v122;
                    }
                  }
                }
              }
              while (v105-- > 2);
            }
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *a3;
          if ((unint64_t)v11 < 0x201)
          {
            result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(&v10[v12 >> 1], v10, a2 - 1, v15);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(v10, &v10[v12 >> 1], a2 - 1, v15);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(v10 + 1, v14 - 1, a2 - 2, *a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(v10 + 2, &v10[v13 + 1], a2 - 3, *a3);
            result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(v14 - 1, v14, &v10[v13 + 1], *a3);
            v16 = *v10;
            *v10 = *v14;
            *v14 = v16;
          }
          --a4;
          v17 = *a3;
          v18 = *v10;
          if ((a5 & 1) == 0)
          {
            v19 = *(v10 - 1);
            v20 = *(_DWORD *)(v17 + 5196);
            if (v20 <= v19)
            {
              __break(0xC471u);
              JUMPOUT(0x19615E39CLL);
            }
            if (v20 <= v18)
            {
              __break(0xC471u);
              JUMPOUT(0x19615E3A4);
            }
            v21 = *(_QWORD *)(v17 + 5184);
            v22 = *(_DWORD *)(*(_QWORD *)(v21 + 8 * v19) + 1792) + *(_DWORD *)(*(_QWORD *)(v21 + 8 * v19) + 1780);
            v23 = *(_QWORD *)(v21 + 8 * v18);
            v24 = *(_DWORD *)(v23 + 1780) + *(_DWORD *)(v23 + 1792);
            if (v22 >= v24)
            {
              v52 = *(a2 - 1);
              if (v20 <= v52)
              {
                __break(0xC471u);
                JUMPOUT(0x19615E3ACLL);
              }
              if (v24 >= *(_DWORD *)(*(_QWORD *)(v21 + 8 * v52) + 1780)
                        + *(_DWORD *)(*(_QWORD *)(v21 + 8 * v52) + 1792))
              {
                v56 = v10 + 1;
                do
                {
                  v55 = v56;
                  if (v56 >= a2)
                    break;
                  v57 = *v56;
                  if (v20 <= v57)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19615E3BCLL);
                  }
                  v58 = *(_DWORD *)(*(_QWORD *)(v21 + 8 * v57) + 1780)
                      + *(_DWORD *)(*(_QWORD *)(v21 + 8 * v57) + 1792);
                  v56 = v55 + 1;
                }
                while (v24 >= v58);
              }
              else
              {
                v53 = v10 + 1;
                do
                {
                  if (v53 == a2)
                    goto LABEL_216;
                  v54 = *v53;
                  if (v20 <= v54)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19615E3B4);
                  }
                  ++v53;
                }
                while (v24 >= *(_DWORD *)(*(_QWORD *)(v21 + 8 * v54) + 1780)
                             + *(_DWORD *)(*(_QWORD *)(v21 + 8 * v54) + 1792));
                v55 = v53 - 1;
              }
              v59 = a2;
              if (v55 < a2)
              {
                v59 = a2;
                while (v59 != v10)
                {
                  v61 = *--v59;
                  v60 = v61;
                  if (v20 <= v61)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19615E3C4);
                  }
                  if (v24 >= *(_DWORD *)(*(_QWORD *)(v21 + 8 * v60) + 1780)
                            + *(_DWORD *)(*(_QWORD *)(v21 + 8 * v60) + 1792))
                    goto LABEL_69;
                }
                goto LABEL_216;
              }
LABEL_69:
              if (v55 < v59)
              {
                LODWORD(v62) = *v55;
                LODWORD(v63) = *v59;
                v10 = v55;
                while (1)
                {
                  *v10++ = v63;
                  *v59 = v62;
                  if (v10 == a2)
                    goto LABEL_216;
                  v64 = *(_DWORD *)(v17 + 5196);
                  if (v64 <= v18)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19615E3CCLL);
                  }
                  v62 = *v10;
                  if (v64 <= v62)
                  {
LABEL_191:
                    __break(0xC471u);
                    JUMPOUT(0x19615E34CLL);
                  }
                  v65 = *(_DWORD *)(v23 + 1792) + *(_DWORD *)(v23 + 1780);
                  if (v65 < *(_DWORD *)(*(_QWORD *)(v21 + 8 * v62) + 1780)
                           + *(_DWORD *)(*(_QWORD *)(v21 + 8 * v62) + 1792))
                    goto LABEL_80;
                  v66 = v55 + 2;
                  do
                  {
                    if (v66 == a2)
                      goto LABEL_216;
                    v62 = *v66;
                    if (v64 <= v62)
                      goto LABEL_191;
                    ++v66;
                  }
                  while (v65 >= *(_DWORD *)(*(_QWORD *)(v21 + 8 * v62) + 1780)
                               + *(_DWORD *)(*(_QWORD *)(v21 + 8 * v62) + 1792));
                  v10 = v66 - 1;
                  do
                  {
LABEL_80:
                    if (v59 == v9)
                      goto LABEL_216;
                    v67 = *--v59;
                    v63 = v67;
                    if (v64 <= v67)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19615E334);
                    }
                    v68 = *(_QWORD *)(v21 + 8 * v63);
                    result = *(unsigned int *)(v68 + 1792);
                  }
                  while (v65 < *(_DWORD *)(v68 + 1780) + (int)result);
                  v55 = v10;
                  if (v10 >= v59)
                    goto LABEL_86;
                }
              }
              v10 = v55;
LABEL_86:
              v69 = v10 - 1;
              if (v10 - 1 != v9)
                *v9 = *v69;
              a5 = 0;
              *v69 = v18;
              continue;
            }
          }
          v25 = v10 + 1;
          if (v10 + 1 == a2)
            goto LABEL_216;
          v26 = *v25;
          v27 = *(_DWORD *)(v17 + 5196);
          if (v27 <= v26)
          {
LABEL_182:
            __break(0xC471u);
            JUMPOUT(0x19615E304);
          }
          if (v27 <= v18)
          {
            __break(0xC471u);
            JUMPOUT(0x19615E394);
          }
          v28 = *(_QWORD *)(v17 + 5184);
          v29 = *(_QWORD *)(v28 + 8 * v26);
          v30 = *(_DWORD *)(v29 + 1780);
          v31 = *(_DWORD *)(v29 + 1792);
          v32 = *(_QWORD *)(v28 + 8 * v18);
          v33 = v31 + v30;
          v34 = *(_DWORD *)(v32 + 1780) + *(_DWORD *)(v32 + 1792);
          if (v33 < v34)
          {
            v35 = 0;
            do
            {
              v36 = &v10[v35 + 2];
              if (v36 == a2)
                goto LABEL_216;
              v26 = *v36;
              if (v27 <= v26)
                goto LABEL_182;
              ++v35;
            }
            while (*(_DWORD *)(*(_QWORD *)(v28 + 8 * v26) + 1792) + *(_DWORD *)(*(_QWORD *)(v28 + 8 * v26) + 1780) < v34);
            v37 = &v10[v35];
            v25 = &v10[v35 + 1];
            v38 = a2;
            if (v35 * 4)
            {
              while (v38 != v10)
              {
                v40 = *--v38;
                v39 = v40;
                if (v27 <= v40)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19615E324);
                }
                if (*(_DWORD *)(*(_QWORD *)(v28 + 8 * v39) + 1792) + *(_DWORD *)(*(_QWORD *)(v28 + 8 * v39) + 1780) < v34)
                  goto LABEL_31;
              }
              goto LABEL_216;
            }
          }
          v38 = a2;
          do
          {
            if (v25 >= v38)
              break;
            v42 = *--v38;
            v41 = v42;
            if (v27 <= v42)
            {
              __break(0xC471u);
              JUMPOUT(0x19615E31CLL);
            }
          }
          while (*(_DWORD *)(*(_QWORD *)(v28 + 8 * v41) + 1792) + *(_DWORD *)(*(_QWORD *)(v28 + 8 * v41) + 1780) >= v34);
          v37 = v10;
LABEL_31:
          LODWORD(v43) = v26;
          if (v25 < v38)
          {
            LODWORD(v44) = *v38;
            v45 = v25;
            v46 = v38;
            while (1)
            {
              *v45 = v44;
              *v46 = v43;
              if (v45 + 1 == a2)
                goto LABEL_216;
              v43 = (unsigned int *)v45[1];
              v47 = *(_DWORD *)(v17 + 5196);
              if (v47 <= v43)
              {
LABEL_181:
                __break(0xC471u);
                JUMPOUT(0x19615E2FCLL);
              }
              if (v47 <= v18)
              {
                __break(0xC471u);
                JUMPOUT(0x19615E32CLL);
              }
              v48 = *(_DWORD *)(v32 + 1780) + *(_DWORD *)(v32 + 1792);
              if (*(_DWORD *)(*(_QWORD *)(v28 + 8 * (_QWORD)v43) + 1792)
                 + *(_DWORD *)(*(_QWORD *)(v28 + 8 * (_QWORD)v43) + 1780) < v48)
                break;
              v37 = v45++;
              do
              {
LABEL_43:
                if (v46 == v10)
                  goto LABEL_216;
                v50 = *--v46;
                v44 = v50;
                if (v47 <= v50)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19615E2F4);
                }
              }
              while (*(_DWORD *)(*(_QWORD *)(v28 + 8 * v44) + 1792)
                    + *(_DWORD *)(*(_QWORD *)(v28 + 8 * v44) + 1780) >= v48);
              if (v45 >= v46)
                goto LABEL_47;
            }
            v43 = v45 + 2;
            while (v43 != a2)
            {
              v49 = *v43;
              if (v47 <= v49)
                goto LABEL_181;
              ++v43;
              if (*(_DWORD *)(*(_QWORD *)(v28 + 8 * v49) + 1792) + *(_DWORD *)(*(_QWORD *)(v28 + 8 * v49) + 1780) >= v48)
              {
                v37 = v43 - 2;
                v45 = v43 - 1;
                LODWORD(v43) = v49;
                goto LABEL_43;
              }
            }
            goto LABEL_216;
          }
LABEL_47:
          if (v37 != v10)
            *v10 = *v37;
          *v37 = v18;
          if (v25 < v38)
          {
LABEL_52:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *,false>(v9, v37, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v37 + 1;
            continue;
          }
          v51 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(v10, v37, a3);
          v10 = v37 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(v37 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (!v51)
              goto LABEL_52;
            continue;
          }
          a2 = v37;
          if (v51)
            return result;
          goto LABEL_2;
        }
        v74 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v75 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v76 = 4;
              v77 = v10;
              do
              {
                v78 = v75;
                v79 = v77[1];
                v80 = *(_DWORD *)(v74 + 5196);
                if (v80 <= v79)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19615E3E4);
                }
                v81 = *v77;
                if (v80 <= v81)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19615E3ECLL);
                }
                v82 = *(_QWORD *)(v74 + 5184);
                v83 = *(_QWORD *)(v82 + 8 * v79);
                if (*(_DWORD *)(v83 + 1792) + *(_DWORD *)(v83 + 1780) < (*(_DWORD *)(*(_QWORD *)(v82 + 8 * v81)
                                                                                                  + 1780)
                                                                                      + *(_DWORD *)(*(_QWORD *)(v82 + 8 * v81)
                                                                                                  + 1792)))
                {
                  v84 = v76;
                  LODWORD(v85) = v81;
                  while (1)
                  {
                    *(unsigned int *)((char *)v10 + v84) = v85;
                    v86 = v84 - 4;
                    if (v84 == 4)
                      break;
                    v87 = *(_DWORD *)(v74 + 5196);
                    if (v87 <= v79)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19615E364);
                    }
                    v85 = *(unsigned int *)((char *)v10 + v84 - 8);
                    if (v87 <= v85)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19615E36CLL);
                    }
                    result = (*(_DWORD *)(*(_QWORD *)(v82 + 8 * v85) + 1780)
                                          + *(_DWORD *)(*(_QWORD *)(v82 + 8 * v85) + 1792));
                    v84 -= 4;
                    if (*(_DWORD *)(v83 + 1792) + *(_DWORD *)(v83 + 1780) >= result)
                    {
                      v88 = (unsigned int *)((char *)v10 + v86);
                      goto LABEL_113;
                    }
                  }
                  v88 = v10;
LABEL_113:
                  *v88 = v79;
                }
                v75 = v78 + 1;
                v76 += 4;
                v77 = v78;
              }
              while (v78 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v128 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v129 = 0;
            v130 = 1;
            while (1)
            {
              v131 = v130;
              v132 = *v128;
              v133 = *(_DWORD *)(v74 + 5196);
              if (v133 <= v132)
              {
                __break(0xC471u);
                JUMPOUT(0x19615E404);
              }
              v134 = v10[v129];
              if (v133 <= v134)
                break;
              v135 = *(_QWORD *)(v74 + 5184);
              v136 = *(_QWORD *)(v135 + 8 * v132);
              if (*(_DWORD *)(v136 + 1792) + *(_DWORD *)(v136 + 1780) < (*(_DWORD *)(*(_QWORD *)(v135 + 8 * v134)
                                                                                                  + 1780)
                                                                                      + *(_DWORD *)(*(_QWORD *)(v135 + 8 * v134)
                                                                                                  + 1792)))
              {
                v137 = 0;
                do
                {
                  v138 = &v128[v137];
                  *v138 = v134;
                  if (!(v131 + v137))
                    goto LABEL_216;
                  v139 = *(_DWORD *)(v74 + 5196);
                  if (v139 <= v132)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19615E33CLL);
                  }
                  v134 = *(v138 - 2);
                  if (v139 <= v134)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19615E344);
                  }
                  v140 = *(_QWORD *)(v135 + 8 * v134);
                  v141 = *(_DWORD *)(v140 + 1792);
                  result = *(unsigned int *)(v140 + 1780);
                  --v137;
                }
                while (*(_DWORD *)(v136 + 1792) + *(_DWORD *)(v136 + 1780) < (result + v141));
                v128[v137] = v132;
              }
              v130 = v131 + 1;
              ++v128;
              v129 = v131;
              if (v128 == a2)
                return result;
            }
            __break(0xC471u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(0xC471u);
            JUMPOUT(0x19615E414);
          }
        }
        return result;
    }
  }
}

_DWORD *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t *a6)
{
  _DWORD *result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a6;
  v15 = *(_DWORD *)(*a6 + 5196);
  if (v15 <= v13)
    goto LABEL_22;
  v16 = *a4;
  if (v15 <= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x19615E5D4);
  }
  v17 = *(_QWORD *)(v14 + 5184);
  if (*(_DWORD *)(*(_QWORD *)(v17 + 8 * v13) + 1792) + *(_DWORD *)(*(_QWORD *)(v17 + 8 * v13) + 1780) < (*(_DWORD *)(*(_QWORD *)(v17 + 8 * v16) + 1780) + *(_DWORD *)(*(_QWORD *)(v17 + 8 * v16) + 1792)))
  {
    *a4 = v13;
    *a5 = v16;
    v18 = *a4;
    v19 = *(_DWORD *)(v14 + 5196);
    if (v19 <= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x19615E5DCLL);
    }
    v20 = *a3;
    if (v19 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x19615E5E4);
    }
    if (*(_DWORD *)(*(_QWORD *)(v17 + 8 * v18) + 1792) + *(_DWORD *)(*(_QWORD *)(v17 + 8 * v18) + 1780) < (*(_DWORD *)(*(_QWORD *)(v17 + 8 * v20) + 1780) + *(_DWORD *)(*(_QWORD *)(v17 + 8 * v20) + 1792)))
    {
      *a3 = v18;
      *a4 = v20;
      v21 = *a3;
      v22 = *(_DWORD *)(v14 + 5196);
      if (v22 <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x19615E5ECLL);
      }
      v23 = *a2;
      if (v22 <= v23)
      {
        __break(0xC471u);
        JUMPOUT(0x19615E5F4);
      }
      if (*(_DWORD *)(*(_QWORD *)(v17 + 8 * v21) + 1792) + *(_DWORD *)(*(_QWORD *)(v17 + 8 * v21) + 1780) < (*(_DWORD *)(*(_QWORD *)(v17 + 8 * v23) + 1780) + *(_DWORD *)(*(_QWORD *)(v17 + 8 * v23) + 1792)))
      {
        *a2 = v21;
        *a3 = v23;
        v24 = *a2;
        v25 = *(_DWORD *)(v14 + 5196);
        if (v25 <= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x19615E5FCLL);
        }
        v26 = *a1;
        if (v25 > v26)
        {
          if (*(_DWORD *)(*(_QWORD *)(v17 + 8 * v24) + 1792) + *(_DWORD *)(*(_QWORD *)(v17 + 8 * v24) + 1780) < (*(_DWORD *)(*(_QWORD *)(v17 + 8 * v26) + 1780) + *(_DWORD *)(*(_QWORD *)(v17 + 8 * v26) + 1792)))
          {
            *a1 = v24;
            *a2 = v26;
          }
          return result;
        }
LABEL_22:
        __break(0xC471u);
        JUMPOUT(0x19615E5CCLL);
      }
    }
  }
  return result;
}

_DWORD *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v4 = *a2;
  v5 = *(_DWORD *)(a4 + 5196);
  if (v5 <= v4)
    goto LABEL_26;
  v6 = *result;
  if (v5 <= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19615E750);
  }
  v7 = *(_QWORD *)(a4 + 5184);
  v8 = *(_QWORD *)(v7 + 8 * v4);
  v9 = *(_DWORD *)(v8 + 1780);
  v10 = *(_DWORD *)(v8 + 1792);
  v11 = *(_QWORD *)(v7 + 8 * v6);
  v12 = v10 + v9;
  v13 = *a3;
  if (v12 < *(_DWORD *)(v11 + 1780) + *(_DWORD *)(v11 + 1792))
  {
    if (v5 <= v13)
    {
      __break(0xC471u);
      JUMPOUT(0x19615E758);
    }
    if (*(_DWORD *)(*(_QWORD *)(v7 + 8 * v13) + 1792) + *(_DWORD *)(*(_QWORD *)(v7 + 8 * v13) + 1780) < v12)
    {
      *result = v13;
LABEL_17:
      *a3 = v6;
      return result;
    }
    *result = v4;
    *a2 = v6;
    v17 = *a3;
    v18 = *(_DWORD *)(a4 + 5196);
    if (v18 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x19615E778);
    }
    if (v18 > v6)
    {
      if (*(_DWORD *)(*(_QWORD *)(v7 + 8 * v17) + 1792) + *(_DWORD *)(*(_QWORD *)(v7 + 8 * v17) + 1780) >= (*(_DWORD *)(v11 + 1780) + *(_DWORD *)(v11 + 1792)))
        return result;
      *a2 = v17;
      goto LABEL_17;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x19615E748);
  }
  if (v5 <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x19615E760);
  }
  if (*(_DWORD *)(*(_QWORD *)(v7 + 8 * v13) + 1792) + *(_DWORD *)(*(_QWORD *)(v7 + 8 * v13) + 1780) < v12)
  {
    *a2 = v13;
    *a3 = v4;
    v14 = *a2;
    v15 = *(_DWORD *)(a4 + 5196);
    if (v15 <= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x19615E768);
    }
    v16 = *result;
    if (v15 <= v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19615E770);
    }
    if (*(_DWORD *)(*(_QWORD *)(v7 + 8 * v14) + 1792) + *(_DWORD *)(*(_QWORD *)(v7 + 8 * v14) + 1780) < (*(_DWORD *)(*(_QWORD *)(v7 + 8 * v16) + 1780) + *(_DWORD *)(*(_QWORD *)(v7 + 8 * v16) + 1792)))
    {
      *result = v14;
      *a2 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _DWORD *v26;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_DWORD *)(*a3 + 5196);
      if (v9 <= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x19615E9C4);
      }
      v10 = *a1;
      if (v9 <= v10)
      {
        __break(0xC471u);
        JUMPOUT(0x19615E9CCLL);
      }
      v11 = *(_QWORD *)(*a3 + 5184);
      if (*(_DWORD *)(*(_QWORD *)(v11 + 8 * v8) + 1792) + *(_DWORD *)(*(_QWORD *)(v11 + 8 * v8) + 1780) < (*(_DWORD *)(*(_QWORD *)(v11 + 8 * v10) + 1780) + *(_DWORD *)(*(_QWORD *)(v11 + 8 * v10) + 1792)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v12 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(a1, a1 + 1, a1 + 2, *a3);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = *a3;
      v16 = 12;
      break;
  }
  while (1)
  {
    v17 = *v13;
    v18 = *(_DWORD *)(v15 + 5196);
    if (v18 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x19615E9B4);
    }
    v19 = *v12;
    if (v18 <= v19)
    {
      __break(0xC471u);
      JUMPOUT(0x19615E9BCLL);
    }
    v20 = *(_QWORD *)(v15 + 5184);
    v21 = *(_QWORD *)(v20 + 8 * v17);
    if (*(_DWORD *)(v21 + 1792) + *(_DWORD *)(v21 + 1780) < (*(_DWORD *)(*(_QWORD *)(v20 + 8 * v19)
                                                                                      + 1780)
                                                                          + *(_DWORD *)(*(_QWORD *)(v20 + 8 * v19)
                                                                                      + 1792)))
    {
      v22 = v16;
      LODWORD(v23) = *v12;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v22) = v23;
        v24 = v22 - 4;
        if (v22 == 4)
          break;
        v25 = *(_DWORD *)(v15 + 5196);
        if (v25 <= v17)
        {
          __break(0xC471u);
          JUMPOUT(0x19615E9A4);
        }
        v23 = *(unsigned int *)((char *)a1 + v22 - 8);
        if (v25 <= v23)
        {
          __break(0xC471u);
          JUMPOUT(0x19615E9ACLL);
        }
        v22 -= 4;
        if (*(_DWORD *)(v21 + 1792) + *(_DWORD *)(v21 + 1780) >= (*(_DWORD *)(*(_QWORD *)(v20 + 8 * v23)
                                                                                           + 1780)
                                                                               + *(_DWORD *)(*(_QWORD *)(v20 + 8 * v23)
                                                                                           + 1792)))
        {
          v26 = (unsigned int *)((char *)a1 + v24);
          goto LABEL_20;
        }
      }
      v26 = a1;
LABEL_20:
      *v26 = v17;
      if (++v14 == 8)
        return v13 + 1 == a2;
    }
    v12 = v13;
    v16 += 4;
    if (++v13 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComplexTextController::finishConstruction(void)::$_1 &,unsigned int *>(a1, a2, a3, *a5);
  v11 = *a4;
  v12 = *a5;
  v13 = *(_DWORD *)(*a5 + 5196);
  if (v13 <= v11)
    goto LABEL_17;
  v14 = *a3;
  if (v13 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19615EB24);
  }
  v15 = *(_QWORD *)(v12 + 5184);
  if (*(_DWORD *)(*(_QWORD *)(v15 + 8 * v11) + 1792) + *(_DWORD *)(*(_QWORD *)(v15 + 8 * v11) + 1780) < (*(_DWORD *)(*(_QWORD *)(v15 + 8 * v14) + 1780) + *(_DWORD *)(*(_QWORD *)(v15 + 8 * v14) + 1792)))
  {
    *a3 = v11;
    *a4 = v14;
    v16 = *a3;
    v17 = *(_DWORD *)(v12 + 5196);
    if (v17 <= v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19615EB2CLL);
    }
    v18 = *a2;
    if (v17 <= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x19615EB34);
    }
    if (*(_DWORD *)(*(_QWORD *)(v15 + 8 * v16) + 1792) + *(_DWORD *)(*(_QWORD *)(v15 + 8 * v16) + 1780) < (*(_DWORD *)(*(_QWORD *)(v15 + 8 * v18) + 1780) + *(_DWORD *)(*(_QWORD *)(v15 + 8 * v18) + 1792)))
    {
      *a2 = v16;
      *a3 = v18;
      v19 = *a2;
      v20 = *(_DWORD *)(v12 + 5196);
      if (v20 <= v19)
      {
        __break(0xC471u);
        JUMPOUT(0x19615EB3CLL);
      }
      v21 = *a1;
      if (v20 > v21)
      {
        if (*(_DWORD *)(*(_QWORD *)(v15 + 8 * v19) + 1792) + *(_DWORD *)(*(_QWORD *)(v15 + 8 * v19) + 1780) < (*(_DWORD *)(*(_QWORD *)(v15 + 8 * v21) + 1780) + *(_DWORD *)(*(_QWORD *)(v15 + 8 * v21) + 1792)))
        {
          *a1 = v19;
          *a2 = v21;
        }
        return result;
      }
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x19615EB1CLL);
    }
  }
  return result;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_()
{
  return ubrk_isBoundary() != 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_(int ***a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int *v6;
  int **v7;

  v5 = ***a1;
  v6 = &v5;
  v2 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(v4);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(int ***))off_1E340B2C8[v2])(&v7);
  }
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2;

  v2 = ***a1;
  return *(_QWORD *)(a2 + 16) == v2 || CFStringGetRangeOfCharacterClusterAtIndex() == *(_QWORD *)(a2 + 24) + v2;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2;
  CFIndex location;

  v2 = ***a1;
  if (*(_QWORD *)(a2 + 8) == v2)
    return 1;
  CFStringTokenizerGoToTokenAtIndex(*(CFStringTokenizerRef *)a2, *(_QWORD *)(a2 + 16) + v2);
  location = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)a2).location;
  return location == -1 || location == *(_QWORD *)(a2 + 16) + v2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator9precedingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_(_DWORD ***a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;

  if (!***a1 || (v3 = ubrk_preceding(), v3 == -1))
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 8);
    v5 = v3 >= v4;
    v6 = v3 - v4;
    if (!v5)
      v6 = 0;
    v7 = v6 & 0xFFFFFF00;
    v8 = v6;
    v9 = 0x100000000;
  }
  return v9 | v7 | v8;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator9precedingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_(int ***a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int *v6;
  int **v7;

  v5 = ***a1;
  v6 = &v5;
  v2 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF9precedingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(v4);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(int ***))off_1E340B2E8[v2])(&v7);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF9precedingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t RangeOfCharacterClusterAtIndex;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v2 = ***a1;
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4 >= v2)
    {
      RangeOfCharacterClusterAtIndex = CFStringGetRangeOfCharacterClusterAtIndex();
      v4 = *(_QWORD *)(a2 + 24);
      v6 = RangeOfCharacterClusterAtIndex >= v4;
      LODWORD(v4) = RangeOfCharacterClusterAtIndex - v4;
      if (!v6)
        LODWORD(v4) = 0;
    }
    v7 = v4 & 0xFFFFFF00;
    v8 = 0x100000000;
  }
  else
  {
    v8 = 0;
    LOBYTE(v4) = 0;
    v7 = 0;
  }
  return v4 | v8 | v7;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF9precedingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t location;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v2 = ***a1;
  if (!(_DWORD)v2)
    goto LABEL_7;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= v2)
  {
    CFStringTokenizerGoToTokenAtIndex(*(CFStringTokenizerRef *)a2, *(_QWORD *)(a2 + 16) + (v2 - 1));
    location = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)a2).location;
    if (location != -1)
    {
      v4 = *(_QWORD *)(a2 + 16);
      v6 = location >= v4;
      LODWORD(v4) = location - v4;
      if (!v6)
        LODWORD(v4) = 0;
      goto LABEL_6;
    }
LABEL_7:
    v8 = 0;
    LOBYTE(v4) = 0;
    v7 = 0;
    return v4 | v8 | v7;
  }
LABEL_6:
  v7 = v4 & 0xFFFFFF00;
  v8 = 0x100000000;
  return v4 | v8 | v7;
}

uint64_t WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0x401)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1024;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19615F050);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x401)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1024;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(uint64_t a1, unint64_t a2)
{
  _WORD *v3;
  uint64_t v4;

  v3 = (_WORD *)WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 2 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      if (v10 < 0x401)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1024;
        goto LABEL_30;
      }
      if (!(v10 >> 31))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(2 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 2 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19615F234);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x401)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1024;
    }
    else
    {
      if (v15 >> 31)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(2 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 2 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      if (v10 < 0x401)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1024;
        goto LABEL_30;
      }
      if (!(v10 >> 28))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 16 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19615F41CLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x401)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1024;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 16 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WebCore::RenderingResource::isDecomposedGlyphs(WebCore::RenderingResource *this)
{
  return 0;
}

uint64_t std::swap[abi:sn180100]<WTF::RefPtr<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  *a1 = 0;
  v5 = *a2;
  *a2 = 0;
  v6 = *a1;
  *a1 = v5;
  if (v6)
    WTF::RefCounted<WebCore::ComplexTextController::ComplexTextRun>::deref(v6, a2);
  result = *a2;
  *a2 = v4;
  if (result)
    return WTF::RefCounted<WebCore::ComplexTextController::ComplexTextRun>::deref(result, a2);
  return result;
}

void **WTF::Vector<unsigned int,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 0x41)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 64;
    }
    else
    {
      if (v5 >> 30)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 4 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

_QWORD *WTF::Vector<WebCore::FloatSize,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatSize&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)WTF::Vector<WebCore::FloatSize,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<WebCore::FloatSize,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0x101)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 256;
        goto LABEL_33;
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_33:
        v21 = 0;
        do
        {
          *(_QWORD *)(v11 + v21) = *(_QWORD *)((char *)v5 + v21);
          v21 += 8;
        }
        while (8 * v6 != v21);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x19615F768);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x101)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 256;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_42;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    if ((_DWORD)v16)
    {
      v18 = 8 * v16;
      v19 = v5;
      do
      {
        v20 = *(_QWORD *)v19;
        v19 = (WTF *)((char *)v19 + 8);
        *v17++ = v20;
        v18 -= 8;
      }
      while (v18);
    }
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

void WTF::Vector<WebCore::FloatPoint,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 < a2)
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 <= a2)
      v7 = a2;
    else
      v7 = v6;
    v8 = *(WTF **)a1;
    v9 = *(unsigned int *)(a1 + 12);
    if (v7 < 0x101)
    {
      v10 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 256;
      if (!(_DWORD)v9)
        goto LABEL_15;
    }
    else
    {
      if (v7 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
      *(_DWORD *)(a1 + 8) = v7;
      *(_QWORD *)a1 = v10;
      if (!(_DWORD)v9)
        goto LABEL_15;
    }
    v11 = 8 * v9;
    v12 = v8;
    do
    {
      v13 = *(_QWORD *)v12;
      v12 = (WTF *)((char *)v12 + 8);
      *v10++ = v13;
      v11 -= 8;
    }
    while (v11);
LABEL_15:
    if ((WTF *)(a1 + 16) != v8 && v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)a2);
    }
  }
  if (*(_QWORD *)a1)
  {
    v14 = *(unsigned int *)(a1 + 12);
    if (v14 != a2)
      bzero((void *)(*(_QWORD *)a1 + 8 * v14), ((8 * a2 - 8 * v14 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  *(_DWORD *)(a1 + 12) = a2;
}

_WORD *WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>(uint64_t a1, unint64_t a2)
{
  _WORD *result;
  uint64_t v4;

  result = (_WORD *)WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 2 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      if (v10 < 0x101)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 256;
        goto LABEL_30;
      }
      if (!(v10 >> 31))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(2 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 2 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19615FA64);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x101)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 256;
    }
    else
    {
      if (v15 >> 31)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(2 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 2 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t *WebCore::DestinationColorSpace::LinearSRGB(WebCore::DestinationColorSpace *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  return &WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::colorSpace;
}

uint64_t *WebCore::DestinationColorSpace::DisplayP3(WebCore::DestinationColorSpace *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  return &WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
}

uint64_t WebCore::DestinationColorSpace::asRGB@<X0>(CGColorSpaceRef *this@<X0>, _BYTE *a2@<X8>)
{
  CGColorSpace *BaseColorSpace;
  uint64_t result;
  char v5;

  BaseColorSpace = *this;
  if (CGColorSpaceGetModel(*this) == kCGColorSpaceModelIndexed)
    BaseColorSpace = CGColorSpaceGetBaseColorSpace(BaseColorSpace);
  result = CGColorSpaceGetModel(BaseColorSpace);
  if ((_DWORD)result != 1 || (result = CGColorSpaceUsesExtendedRange(BaseColorSpace), (_DWORD)result))
  {
    v5 = 0;
    *a2 = 0;
  }
  else
  {
    if (BaseColorSpace)
      result = (uint64_t)CFRetain(BaseColorSpace);
    *(_QWORD *)a2 = BaseColorSpace;
    v5 = 1;
  }
  a2[8] = v5;
  return result;
}

BOOL WebCore::DestinationColorSpace::supportsOutput(CGColorSpaceRef *this)
{
  return CGColorSpaceSupportsOutput(*this);
}

uint64_t WebCore::DisplayRefreshMonitor::DisplayRefreshMonitor(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E340B3F8;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = a2;
  *(_BYTE *)(this + 36) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_WORD *)(this + 44) = 0;
  *(_BYTE *)(this + 46) = 1;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

void WebCore::DisplayRefreshMonitor::~DisplayRefreshMonitor(WebCore::DisplayRefreshMonitor *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)this = off_1E340B3F8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (uint64_t *)*((_QWORD *)this + 2);
      do
      {
        v5 = *v4;
        if ((unint64_t)(*v4 + 1) >= 2)
        {
          v6 = *(_DWORD *)(v5 + 8);
          if (!v6)
          {
            __break(0xC471u);
            return;
          }
          *(_DWORD *)(v5 + 8) = v6 - 1;
        }
        ++v4;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

uint64_t WebCore::DisplayRefreshMonitor::stop(WebCore::DisplayRefreshMonitor *this)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = (unsigned __int8 *)this + 44;
  result = (*(uint64_t (**)(WebCore::DisplayRefreshMonitor *))(*(_QWORD *)this + 64))(this);
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_5:
  *((_BYTE *)this + 45) = 0;
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebCore::DisplayRefreshMonitor::computeMaxPreferredFramesPerSecond(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;

  v1 = *(uint64_t **)(this + 16);
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = &v1[v2];
    goto LABEL_11;
  }
  v2 = *((unsigned int *)v1 - 1);
  v3 = &v1[v2];
  if (!*((_DWORD *)v1 - 3))
  {
    v4 = &v1[v2];
    goto LABEL_10;
  }
  v4 = *(uint64_t **)(this + 16);
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    v4 = *(uint64_t **)(this + 16);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      ++v4;
      v5 -= 8;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v1 += *((unsigned int *)v1 - 1);
  if (v1 == v4)
  {
    if (*(_BYTE *)(this + 40))
    {
      *(_DWORD *)(this + 36) = 0;
      *(_BYTE *)(this + 40) = 0;
    }
  }
  else
  {
    v6 = 0;
    LOBYTE(v7) = 0;
    v8 = 1;
    do
    {
      v9 = v7 | v6;
      v10 = (v8 & 1) == 0;
      v12 = v4 + 1;
      v11 = *v4;
      if (!v10)
        v9 = 0;
      v13 = *(_DWORD *)(v11 + 20);
      if (v9 <= v13)
        v7 = v13;
      else
        v7 = v9;
      v4 = v3;
      if (v12 != v3)
      {
        v4 = v12;
        while ((unint64_t)(*v4 + 1) <= 1)
        {
          if (++v4 == v3)
          {
            v4 = v3;
            break;
          }
        }
      }
      v8 = 0;
      v6 = v7 & 0xFFFFFF00;
    }
    while (v4 != v1);
    if (!*(_BYTE *)(this + 40) || *(_DWORD *)(this + 36) != v7)
    {
      *(_DWORD *)(this + 36) = v7;
      *(_BYTE *)(this + 40) = 1;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 72))(this);
    }
  }
  return this;
}

uint64_t WTF::HashSet<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 8 * v7);
  if (v8 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 8 * v7);
      ++v9;
      if (v8 == a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  *(_QWORD *)(v2 + 8 * v7) = -1;
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 8);
    if (!v12)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(v11 + 8) = v12 - 1;
  }
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>>::rehash(a1, v17 >> 1, 0);
  }
  return 1;
}

uint64_t WebCore::DisplayRefreshMonitor::requestRefreshCallback(WebCore::DisplayRefreshMonitor *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v2 = (unsigned __int8 *)this + 44;
  if (__ldaxr((unsigned __int8 *)this + 44))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 44);
LABEL_5:
  if (*((_BYTE *)this + 45))
  {
    v4 = 1;
  }
  else if ((*(unsigned int (**)(WebCore::DisplayRefreshMonitor *))(*(_QWORD *)this + 56))(this))
  {
    v4 = 1;
    *((_BYTE *)this + 45) = 1;
  }
  else
  {
    v4 = 0;
  }
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4;
}

void WebCore::DisplayRefreshMonitor::displayLinkFired(WebCore::DisplayRefreshMonitor *this, const WebCore::DisplayUpdate *a2)
{
  unsigned __int8 *v4;
  NSObject *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)this + 44;
  if (__ldaxr((unsigned __int8 *)this + 44))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 44);
LABEL_5:
  if (!*((_BYTE *)this + 46))
  {
    v6 = qword_1ECE7C018;
    v7 = 0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C018, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    v8 = *((_DWORD *)this + 8);
    v12[0] = 67109120;
    v12[1] = v8;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "[Web] DisplayRefreshMonitor::displayLinkFired for display %u - previous frame is not complete", (uint8_t *)v12, 8u);
    goto LABEL_12;
  }
  if (!*((_BYTE *)this + 45))
  {
    v9 = *((_DWORD *)this + 13);
    v10 = *((_DWORD *)this + 12) + 1;
    *((_DWORD *)this + 12) = v10;
    if (v10 <= v9)
      goto LABEL_13;
    (*(void (**)(WebCore::DisplayRefreshMonitor *))(*(_QWORD *)this + 64))(this);
LABEL_12:
    v7 = 0;
    goto LABEL_14;
  }
  *((_DWORD *)this + 12) = 0;
LABEL_13:
  *(_WORD *)((char *)this + 45) = 0;
  v7 = 1;
LABEL_14:
  v11 = __ldxr(v4);
  if (v11 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (!v7)
        return;
      goto LABEL_17;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
    return;
LABEL_17:
  (*(void (**)(WebCore::DisplayRefreshMonitor *, const WebCore::DisplayUpdate *))(*(_QWORD *)this + 48))(this, a2);
}

uint64_t WebCore::DisplayRefreshMonitor::displayDidRefresh(uint64_t this, const WebCore::DisplayUpdate *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned __int8 *v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD *v52;

  v3 = this;
  v4 = (unsigned int *)(this + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v52 = 0;
  v6 = *(_QWORD *)(this + 16);
  if (!v6)
    goto LABEL_42;
  v7 = *(unsigned int *)(v6 - 12);
  if (!(_DWORD)v7)
    goto LABEL_42;
  v8 = (v7 - 1) | ((v7 - 1) >> 1) | ((((_DWORD)v7 - 1) | ((v7 - 1) >> 1)) >> 2);
  v9 = v8 | (v8 >> 4) | ((v8 | (v8 >> 4)) >> 8);
  v10 = (v9 | HIWORD(v9)) + 1;
  if (v10 > 0x400)
  {
    if (v10 > 2 * v7)
      goto LABEL_10;
  }
  else if (3 * v10 > 4 * v7)
  {
LABEL_8:
    v11 = (double)v7;
    v12 = (double)v10;
    v13 = 0.604166667;
    goto LABEL_11;
  }
  LODWORD(v10) = 2 * v10;
  if (v10 <= 0x400)
    goto LABEL_8;
LABEL_10:
  v11 = (double)v7;
  v12 = (double)v10;
  v13 = 0.416666667;
LABEL_11:
  if (v12 * v13 <= v11)
    LODWORD(v10) = 2 * v10;
  if (v10 <= 8)
    v14 = 8;
  else
    v14 = v10;
  this = WTF::fastZeroedMalloc((WTF *)(8 * v14 + 16));
  v52 = (_QWORD *)(this + 16);
  *(_DWORD *)(this + 8) = v14 - 1;
  *(_DWORD *)(this + 12) = v14;
  *(_DWORD *)(this + 4) = v7;
  *((_DWORD *)v52 - 4) = 0;
  v15 = *(uint64_t **)(v3 + 16);
  if (v15)
  {
    v16 = *((unsigned int *)v15 - 1);
    v17 = &v15[v16];
    if (*((_DWORD *)v15 - 3))
    {
      v18 = *(uint64_t **)(v3 + 16);
      if ((_DWORD)v16)
      {
        v19 = 8 * v16;
        v18 = *(uint64_t **)(v3 + 16);
        while ((unint64_t)(*v18 + 1) <= 1)
        {
          ++v18;
          v19 -= 8;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_26;
          }
        }
      }
      goto LABEL_26;
    }
    v18 = &v15[v16];
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = &v15[v16];
LABEL_26:
  if (v15)
    v15 += *((unsigned int *)v15 - 1);
  while (v18 != v15)
  {
    v20 = (uint64_t)v52;
    if (v52)
      v21 = *((_DWORD *)v52 - 2);
    else
      v21 = 0;
    v22 = *v18;
    v23 = ~(*v18 << 32) + *v18;
    v24 = (v23 ^ (v23 >> 22)) + ~((v23 ^ (v23 >> 22)) << 13);
    v25 = (9 * (v24 ^ (v24 >> 8))) ^ ((9 * (v24 ^ (v24 >> 8))) >> 15);
    v26 = v21 & (((v25 + ~(v25 << 27)) >> 31) ^ (v25 + ~((_DWORD)v25 << 27)));
    v27 = 1;
    do
    {
      v28 = v26;
      this = v52[v26];
      v26 = (v26 + v27++) & v21;
    }
    while (this);
    if (v22)
      ++*(_DWORD *)(v22 + 8);
    *(_QWORD *)(v20 + 8 * v28) = v22;
    v29 = v18 + 1;
    v18 = v17;
    if (v29 != v17)
    {
      v18 = v29;
      while ((unint64_t)(*v18 + 1) <= 1)
      {
        if (++v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
LABEL_42:
  *(_QWORD *)(v3 + 24) = &v52;
  while (v52 && *((_DWORD *)v52 - 3))
  {
    v30 = *((unsigned int *)v52 - 1);
    if ((_DWORD)v30)
    {
      v31 = 8 * v30;
      v32 = v52;
      while ((unint64_t)(*v32 + 1) <= 1)
      {
        ++v32;
        v31 -= 8;
        if (!v31)
          goto LABEL_57;
      }
    }
    else
    {
      v32 = v52;
    }
    if (&v52[v30] == v32)
    {
LABEL_57:
      v33 = 0;
    }
    else
    {
      v33 = *v32;
      *v32 = 0;
      v34 = (uint64_t)v52;
      if (!v52 || (v34 = (uint64_t)&v52[*((unsigned int *)v52 - 1)], (uint64_t *)v34 != v32))
      {
        if ((uint64_t *)v34 != v32)
        {
          *v32 = -1;
          ++*((_DWORD *)v52 - 4);
          v35 = v52 ? *((_DWORD *)v52 - 3) - 1 : -1;
          *((_DWORD *)v52 - 3) = v35;
          if (v52)
          {
            v40 = *((_DWORD *)v52 - 1);
            if (6 * *((_DWORD *)v52 - 3) < v40 && v40 >= 9)
              this = WTF::HashTable<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>>::rehash((uint64_t *)&v52, v40 >> 1, 0);
          }
        }
      }
    }
    if (*(_BYTE *)(v33 + 24))
    {
      v36 = *(_DWORD *)(v33 + 20);
      if (!v36
        || (v37 = *((_DWORD *)a2 + 1), v37 < v36)
        || (float)((float)v37 / (float)v36) != (float)(int)(float)((float)v37 / (float)v36)
        || !(*(_DWORD *)a2 % (v37 / v36)))
      {
        *(_BYTE *)(v33 + 24) = 0;
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      }
    }
    v38 = *(_DWORD *)(v33 + 8);
    if (!v38)
    {
      __break(0xC471u);
      JUMPOUT(0x1961607C4);
    }
    v39 = *(uint64_t **)(v3 + 24);
    *(_DWORD *)(v33 + 8) = v38 - 1;
    if (v39 != (uint64_t *)&v52)
      goto LABEL_76;
  }
  *(_QWORD *)(v3 + 24) = 0;
LABEL_76:
  v42 = (unsigned __int8 *)(v3 + 44);
  if (__ldaxr((unsigned __int8 *)(v3 + 44)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v42))
  {
    goto LABEL_80;
  }
  this = MEMORY[0x19AEA534C](v3 + 44);
LABEL_80:
  *(_BYTE *)(v3 + 46) = 1;
  v44 = __ldxr(v42);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_84;
  }
  if (__stlxr(0, v42))
LABEL_84:
    this = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 44));
  {
    qword_1ECE90E50 = 0;
    unk_1ECE90E58 = 0;
    WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager = (uint64_t)&off_1E340B488;
  }
  v45 = (uint64_t)v52;
  if (!v52)
    goto LABEL_97;
  v46 = *((unsigned int *)v52 - 1);
  if (!(_DWORD)v46)
  {
    this = WTF::fastFree((WTF *)(v52 - 2), a2);
    do
    {
LABEL_97:
      v50 = __ldaxr(v4);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v4));
    if (!v51)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    return this;
  }
  v47 = v52;
  do
  {
    v48 = *v47;
    if ((unint64_t)(*v47 + 1) >= 2)
    {
      v49 = *(_DWORD *)(v48 + 8);
      if (!v49)
      {
        __break(0xC471u);
        JUMPOUT(0x1961607E4);
      }
      *(_DWORD *)(v48 + 8) = v49 - 1;
    }
    ++v47;
    --v46;
  }
  while (v46);
  this = WTF::fastFree((WTF *)(v45 - 16), a2);
  if (v3)
    goto LABEL_97;
  return this;
}

uint64_t *WebCore::DisplayRefreshMonitorManager::sharedManager(WebCore::DisplayRefreshMonitorManager *this)
{
  {
    qword_1ECE90E50 = 0;
    unk_1ECE90E58 = 0;
    WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager = (uint64_t)&off_1E340B488;
  }
  return &WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager;
}

void WebCore::DisplayRefreshMonitorClient::~DisplayRefreshMonitorClient(WebCore::DisplayRefreshMonitorClient *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E340B458;
  {
    qword_1ECE90E50 = 0;
    unk_1ECE90E58 = 0;
    WebCore::DisplayRefreshMonitorManager::sharedManager(void)::manager = (uint64_t)&off_1E340B488;
  }
  if (*((_BYTE *)this + 16) && dword_1ECE90E5C)
  {
    v2 = 0;
    while (1)
    {
      v3 = *(_QWORD *)(qword_1ECE90E50 + 8 * v2);
      if (*(_DWORD *)(v3 + 32) == *((_DWORD *)this + 3))
        break;
      if (dword_1ECE90E5C == ++v2)
        return;
    }
    if (v2 >= dword_1ECE90E5C)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(uint64_t **)(v3 + 24);
      if (v6)
        WTF::HashSet<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>(v6, (uint64_t)this);
      if (WTF::HashSet<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>((uint64_t *)(v3 + 16), (uint64_t)this))WebCore::DisplayRefreshMonitor::computeMaxPreferredFramesPerSecond(v3);
      do
      {
        v7 = __ldaxr(v4);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v4));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)(v3 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
}

BOOL WebCore::DisplayUpdate::relevantForUpdateFrequency(WebCore::DisplayUpdate *this, unsigned int a2)
{
  unsigned int v3;
  _BOOL8 result;

  if (!a2)
    return 1;
  v3 = *((_DWORD *)this + 1);
  result = 1;
  if (v3 >= a2 && (float)((float)v3 / (float)a2) == (float)(int)(float)((float)v3 / (float)a2))
    return *(_DWORD *)this % (v3 / a2) == 0;
  return result;
}

void WebCore::DisplayRefreshMonitorManager::~DisplayRefreshMonitorManager(WebCore::DisplayRefreshMonitorManager *this, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E340B488;
  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int **)*((_QWORD *)this + 1);
    v5 = &v4[v3];
    do
    {
      if (*v4)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)*v4 + 16))(*v4);
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v10 = (WTF *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v10, a2);
  }
}

{
  uint64_t v3;
  unsigned int **v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E340B488;
  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int **)*((_QWORD *)this + 1);
    v5 = &v4[v3];
    do
    {
      if (*v4)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)*v4 + 16))(*v4);
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v10 = (WTF *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v10, a2);
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::DisplayRefreshMonitorManager::ensureMonitorForDisplayID(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;

  v3 = a2;
  v4 = (unsigned int *)result;
  v5 = *(unsigned int *)(result + 20);
  if (!(_DWORD)v5)
  {
LABEL_5:
    if (a3)
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v29, a3, a2);
      v7 = (uint64_t)v29;
      if (v29)
      {
LABEL_9:
        v8 = v4 + 2;
        v28 = (unsigned int *)v7;
        v29 = 0;
        v9 = v4[5];
        if ((_DWORD)v9 == v4[4])
        {
          v10 = (uint64_t *)WTF::Vector<WebCore::DisplayRefreshMonitorManager::DisplayRefreshMonitorWrapper,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v28);
          v11 = v4[5];
          v12 = *((_QWORD *)v4 + 1);
          v13 = *v10;
          if (*v10)
          {
            v14 = (unsigned int *)(v13 + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
            v16 = v4[5];
          }
          else
          {
            v16 = v4[5];
          }
          *(_QWORD *)(v12 + 8 * v11) = v13;
        }
        else
        {
          v17 = *(_QWORD *)v8;
          v18 = (unsigned int *)(v7 + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
          *(_QWORD *)(v17 + 8 * v9) = v7;
          v16 = v4[5];
        }
        v4[5] = v16 + 1;
        if (v28)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
          v20 = v28;
          v28 = 0;
          if (v20)
          {
            v21 = v20 + 2;
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v20 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
            }
          }
        }
        v24 = v29;
        v29 = 0;
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            atomic_store(1u, v24 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
          }
        }
        return v7;
      }
      v29 = 0;
    }
    v7 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_DWORD *)(v7 + 32) = v3;
    *(_BYTE *)(v7 + 36) = 0;
    *(_BYTE *)(v7 + 40) = 0;
    *(_WORD *)(v7 + 44) = 0;
    *(_BYTE *)(v7 + 46) = 1;
    *(_QWORD *)v7 = off_1E3350B18;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 64) = 0;
    *(_BYTE *)(v7 + 72) = 0;
    *(_QWORD *)(v7 + 48) = 0x100000000;
    goto LABEL_9;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v6);
    if (*(_DWORD *)(v7 + 32) == (_DWORD)a2)
      break;
    if (v5 == ++v6)
      goto LABEL_5;
  }
  if (v6 < v5)
    return v7;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::DisplayRefreshMonitorManager::monitorForClient(WebCore::DisplayRefreshMonitorManager *this, WebCore::DisplayRefreshMonitorClient *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  WebCore::DisplayRefreshMonitorClient *v14;
  _BYTE v15[24];

  if (!*((_BYTE *)a2 + 16))
    return 0;
  v4 = *((unsigned int *)a2 + 3);
  v5 = (*(uint64_t (**)(WebCore::DisplayRefreshMonitorClient *))(*(_QWORD *)a2 + 24))(a2);
  v6 = WebCore::DisplayRefreshMonitorManager::ensureMonitorForDisplayID((uint64_t)this, v4, v5);
  v7 = (unsigned int *)v6;
  if (!v6)
    return (uint64_t)v7;
  v8 = (unsigned int *)(v6 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v14 = a2;
  ++*((_DWORD *)a2 + 2);
  WTF::HashTable<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>>::add(v6 + 16, (uint64_t *)&v14, (uint64_t)v15);
  if (!v14)
    goto LABEL_8;
  v10 = *((_DWORD *)v14 + 2);
  if (v10)
  {
    *((_DWORD *)v14 + 2) = v10 - 1;
LABEL_8:
    if (v15[16])
      WebCore::DisplayRefreshMonitor::computeMaxPreferredFramesPerSecond((uint64_t)v7);
    do
    {
      v11 = __ldaxr(v8);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v8));
    if (!v12)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
    return (uint64_t)v7;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::DisplayRefreshMonitorManager::windowScreenDidChange(unsigned int *this, int a2, WebCore::DisplayRefreshMonitorClient *a3)
{
  WebCore::DisplayRefreshMonitorManager *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v5 = (WebCore::DisplayRefreshMonitorManager *)this;
  if (*((_BYTE *)a3 + 16))
  {
    v6 = *((_DWORD *)a3 + 3);
    if (v6 == a2)
      return this;
    v7 = this[5];
    if ((_DWORD)v7)
    {
      v8 = 0;
      while (1)
      {
        v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v8);
        if (*(_DWORD *)(v9 + 32) == v6)
          break;
        if (v7 == ++v8)
          goto LABEL_18;
      }
      if (v8 >= v7)
      {
        __break(0xC471u);
        return this;
      }
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *(uint64_t **)(v9 + 24);
      if (v12)
        WTF::HashSet<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>(v12, (uint64_t)a3);
      this = (unsigned int *)WTF::HashSet<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>((uint64_t *)(v9 + 16), (uint64_t)a3);
      if ((_DWORD)this)
        this = (unsigned int *)WebCore::DisplayRefreshMonitor::computeMaxPreferredFramesPerSecond(v9);
      do
      {
        v13 = __ldaxr(v10);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v10));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)(v9 + 8));
        this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
    }
  }
LABEL_18:
  *((_DWORD *)a3 + 3) = a2;
  *((_BYTE *)a3 + 16) = 1;
  if (*((_BYTE *)a3 + 24))
  {
    this = (unsigned int *)WebCore::DisplayRefreshMonitorManager::monitorForClient(v5, a3);
    if (this)
    {
      v15 = this;
      v16 = this + 2;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      *((_BYTE *)a3 + 24) = 1;
      this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 24))(this);
      do
      {
        v18 = __ldaxr(v16);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v16));
      if (!v19)
      {
        atomic_store(1u, v15 + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
      }
    }
  }
  return this;
}

unint64_t WebCore::DisplayRefreshMonitorManager::nominalFramesPerSecondForDisplay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v3 = WebCore::DisplayRefreshMonitorManager::ensureMonitorForDisplayID(a1, a2, a3);
  if (v3)
  {
    v4 = (unsigned int *)v3;
    v5 = (unsigned int *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v8 = v7;
    v9 = v7 >> 8;
    v10 = HIDWORD(v7);
    v11 = v7 >> 40;
    do
    {
      v12 = __ldaxr(v5);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v5));
    if (!v13)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  else
  {
    LODWORD(v9) = 0;
    v11 = 0;
    LOBYTE(v10) = 0;
    v8 = 0;
  }
  return (v11 << 40) | ((unint64_t)v10 << 32) | ((_DWORD)v9 << 8) | v8;
}

uint64_t WebCore::DisplayRefreshMonitorManager::displayDidRefresh(uint64_t this, int a2, const WebCore::DisplayUpdate *a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int *)(this + 20);
  if ((_DWORD)v3)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(unsigned int **)(*(_QWORD *)(this + 8) + 8 * v4);
      if (v5[8] == a2)
        break;
      if (v3 == ++v4)
        return this;
    }
    if (v4 >= v3)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = v5 + 2;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      this = (*(uint64_t (**)(unsigned int *, const WebCore::DisplayUpdate *))(*(_QWORD *)v5 + 40))(v5, a3);
      do
      {
        v8 = __ldaxr(v6);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v6));
      if (!v9)
      {
        atomic_store(1u, v5 + 2);
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  return this;
}

float WebCore::FloatLine::pointAtAbsoluteDistance(WebCore::FloatLine *this, float a2)
{
  float v3;
  float result;

  v3 = *((float *)this + 4);
  result = *(float *)this;
  if (v3 != 0.0)
    return result + (float)((float)((float)-a2 / v3) * (float)(result - *((float *)this + 2)));
  return result;
}

int8x8_t WebCore::FloatPoint::constrainedBetween(float32x2_t *this, float32x2_t *a2, float32x2_t *a3)
{
  float32x2_t v3;

  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a3, *this), (int8x8_t)*this, (int8x8_t)*a3);
  return vbsl_s8((int8x8_t)vcgt_f32(v3, *a2), (int8x8_t)v3, (int8x8_t)*a2);
}

int8x8_t WebCore::FloatPoint::constrainedWithin(float32x2_t *this, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t v3;

  v2 = vadd_f32(*a2, a2[1]);
  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v2, *this), (int8x8_t)*this, (int8x8_t)v2);
  return vbsl_s8((int8x8_t)vcgt_f32(v3, *a2), (int8x8_t)v3, (int8x8_t)*a2);
}

void WebCore::FloatPoint::normalize(WebCore::FloatPoint *this)
{
  float v2;
  float v3;
  float v4;

  v3 = *(float *)this;
  v2 = *((float *)this + 1);
  v4 = hypotf(*(float *)this, v2);
  if (v4 != 0.0)
  {
    *(float *)this = v3 / v4;
    *((float *)this + 1) = v2 / v4;
  }
}

float32x2_t WebCore::FloatPoint::matrixTransform(WebCore::FloatPoint *this, float64x2_t *a2)
{
  return vcvt_f32_f64(vaddq_f64(a2[2], vmlaq_n_f64(vmulq_n_f64(a2[1], *((float *)this + 1)), *a2, *(float *)this)));
}

float WebCore::FloatPoint::narrowPrecision(WebCore::FloatPoint *this, double a2, double a3)
{
  return a2;
}

float WebCore::FloatPoint::matrixTransform(WebCore::FloatPoint *this, const WebCore::TransformationMatrix *a2)
{
  uint64_t v3;
  double v4;

  v3 = 0;
  v4 = 0.0;
  WebCore::TransformationMatrix::multVecMatrix(a2, *(float *)this, *((float *)this + 1), &v4, (double *)&v3);
  return v4;
}

WTF::StringImpl *WebCore::FloatPoint::toJSONObject@<X0>(WebCore::FloatPoint *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::JSONImpl::Value *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  _BYTE v30[16];
  char v31;

  WTF::JSONImpl::Object::create(this);
  v4 = *a2;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, *(float *)this);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v28, (const WTF::StringImpl *)&v29, (uint64_t)v30);
  if (v31)
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v22 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v28);
      v8 = *(unsigned int *)(v4 + 36);
      v23 = *(_QWORD *)(v4 + 24);
      v24 = *v22;
      if (*v22)
        *v24 += 2;
      *(_QWORD *)(v23 + 8 * v8) = v24;
    }
    else
    {
      v9 = *v7;
      v10 = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v29;
  v29 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *a2;
  v14 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v14, *((float *)this + 1));
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v13 + 16), &v28, (const WTF::StringImpl *)&v29, (uint64_t)v30);
  if (v31)
  {
    v16 = (uint64_t *)(v13 + 24);
    v17 = *(unsigned int *)(v13 + 36);
    if ((_DWORD)v17 == *(_DWORD *)(v13 + 32))
    {
      v25 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v28);
      v17 = *(unsigned int *)(v13 + 36);
      v26 = *(_QWORD *)(v13 + 24);
      v27 = *v25;
      if (*v25)
        *v27 += 2;
      *(_QWORD *)(v26 + 8 * v17) = v27;
    }
    else
    {
      v18 = *v16;
      v19 = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
    }
    *(_DWORD *)(v13 + 36) = v17 + 1;
  }
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v20;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::JSONImpl::Value *WebCore::FloatPoint::toJSONString(WebCore::FloatPoint *this)
{
  WTF::JSONImpl::Value *result;
  WTF::JSONImpl::Value *v2;

  WebCore::FloatPoint::toJSONObject(this, (uint64_t *)&v2);
  WTF::JSONImpl::Value::toJSONString(v2);
  result = v2;
  v2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

CFTypeRef WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1}::operator()(WebCore *a1)
{
  CFTypeRef result;
  uint64_t v2;

  result = (CFTypeRef)WebCore::linearSRGBColorSpaceRef(a1);
  v2 = (uint64_t)result;
  if (result)
    result = CFRetain(result);
  WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::colorSpace = v2;
  return result;
}

CFTypeRef std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>(WebCore *a1)
{
  CFTypeRef result;
  uint64_t v2;

  result = (CFTypeRef)WebCore::displayP3ColorSpaceRef(a1);
  v2 = (uint64_t)result;
  if (result)
    result = CFRetain(result);
  WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace = v2;
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>>::add@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v4 = (uint64_t *)result;
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (result = WTF::HashTable<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>>::rehash((uint64_t *)result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v6 - 4);
        v28 = 0;
        v29 = v6 + 8 * v22;
        goto LABEL_36;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  v18 = *v14;
  *v14 = v9;
  if (v18)
  {
    v19 = *(_DWORD *)(v18 + 8);
    if (!v19)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(v18 + 8) = v19 - 1;
  }
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v4;
  if (*v4)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_35;
    goto LABEL_26;
  }
  if (3 * v26 > 4 * v25)
    goto LABEL_35;
  if ((_DWORD)v26)
  {
LABEL_26:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_31;
  }
  v27 = 8;
LABEL_31:
  result = WTF::HashTable<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>>::rehash(v4, v27, v14);
  v14 = (uint64_t *)result;
  v23 = *v4;
  if (*v4)
    v26 = *(unsigned int *)(v23 - 4);
  else
    v26 = 0;
LABEL_35:
  v29 = v23 + 8 * v26;
  v28 = 1;
LABEL_36:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v29;
  *(_BYTE *)(a3 + 16) = v28;
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::DisplayRefreshMonitorClient,WTF::RawPtrTraits<WebCore::DisplayRefreshMonitorClient>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v13 = 0;
        *v24 = v14;
        v25 = *v13;
        if (*v13)
        {
          v26 = *(_DWORD *)(v25 + 8);
          if (!v26)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          *(_DWORD *)(v25 + 8) = v26 - 1;
        }
        if (v13 == a3)
          v12 = v24;
      }
      if (++v11 == v7)
        goto LABEL_20;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return (uint64_t)v12;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::DisplayRefreshMonitorManager::DisplayRefreshMonitorWrapper,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::DisplayRefreshMonitorManager::DisplayRefreshMonitorWrapper,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::DisplayRefreshMonitorManager::DisplayRefreshMonitorWrapper,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::DisplayRefreshMonitorManager::DisplayRefreshMonitorWrapper,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)v4;
        do
        {
          v9 = *v8;
          if (*v8)
          {
            v10 = v9 + 2;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 + 1, v10));
          }
          *(_QWORD *)v7 = v9;
          result = *v8;
          if (*v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
            result = *v8;
            *v8 = 0;
            if (result)
            {
              v12 = result + 2;
              do
              {
                v13 = __ldaxr(v12);
                v14 = v13 - 1;
              }
              while (__stlxr(v14, v12));
              if (!v14)
              {
                atomic_store(1u, result + 2);
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
              }
            }
          }
          else
          {
            *v8 = 0;
          }
          v7 += 2;
          ++v8;
        }
        while (v8 != (unsigned int **)((char *)v4 + 8 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t *WebCore::FloatPolygon::FloatPolygon(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t v14;
  unsigned int v15;
  float *v16;
  uint64_t i;
  float *v18;
  float v19;
  unint64_t v20;
  unsigned int v21;
  int8x8_t v22;
  int v23;
  float *v24;
  float v25;
  float v26;
  unsigned int v27;
  float v28;
  int v29;
  unint64_t v30;
  int8x8_t v31;
  float32x2_t v32;
  int8x8_t v33;
  int8x8_t *v34;
  unsigned int v35;
  float *v36;
  float v37;
  float v38;
  float *v39;
  unsigned int v41;
  BOOL v43;
  float *v44;
  float *v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  void (***v56)(void);
  uint64_t v57;
  void (***v58)(void);
  void (**v59)(void);
  unint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  float *v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  float *v76;
  float v77;
  uint64_t v78;
  float *v79;
  float v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  float *v92;
  uint64_t v93;
  float *v94;
  float v95;
  uint64_t v96;
  float *v97;
  float v98;
  float v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  float *v105;
  uint64_t v106;
  float *v107;
  float v108;
  uint64_t v109;
  float *v110;
  float v111;
  float v112;
  float *v113;
  float v114;
  uint64_t v115;
  float *v116;
  float v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  float *v123;
  uint64_t v124;
  float *v125;
  float v126;
  uint64_t v127;
  float *v128;
  float v129;
  float v130;
  float *v131;
  float v132;
  float v133;
  float *v134;
  float *v135;
  float v136;
  uint64_t v137;
  float *v138;
  float v139;
  float v140;
  float v141;
  float *v142;
  uint64_t v143;
  float *v144;
  float v145;
  float *v146;
  float *v147;
  float v148;
  uint64_t v149;
  float *v150;
  float v151;
  float v152;
  float v153;
  float *v154;
  uint64_t v155;
  float *v156;
  float v157;
  uint64_t *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  float *v162;
  uint64_t v163;
  float *v164;
  float v165;
  uint64_t v166;
  float *v167;
  float v168;
  float v169;
  float *v170;
  float v171;
  float v172;
  uint64_t v173;
  float *v174;
  float v175;
  uint64_t v176;
  float *v177;
  uint64_t v178;
  float *v179;
  float v180;
  uint64_t v181;
  float *v182;
  float v183;

  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  *a2 = 0;
  *a1 = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *((_DWORD *)a1 + 2) = v4;
  v5 = *((unsigned int *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *((_DWORD *)a1 + 3) = v5;
  *((_BYTE *)a1 + 16) = a3;
  *(uint64_t *)((char *)a1 + 28) = 0;
  *(uint64_t *)((char *)a1 + 20) = 0;
  *((_BYTE *)a1 + 36) = v5 < 3;
  a1[5] = 0;
  v6 = (unint64_t *)(a1 + 5);
  a1[6] = 0;
  *((_DWORD *)a1 + 13) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1961627B8);
    }
    v7 = WTF::fastMalloc((WTF *)(32 * v5));
    *((_DWORD *)a1 + 12) = v5;
    a1[5] = v7;
    v8 = *((unsigned int *)a1 + 13);
    if ((_DWORD)v8)
    {
      v9 = 32 * v8;
      v10 = (_QWORD *)(v7 + 8);
      do
      {
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        *(v10 - 1) = &off_1E340B700;
        v10 += 4;
        v9 -= 32;
      }
      while (v9);
    }
  }
  a1[7] = 0;
  v11 = a1 + 7;
  v12 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v12)
  {
    if (!*((_BYTE *)a1 + 36))
      goto LABEL_249;
    return a1;
  }
  v13 = *a1;
  v14 = *(int8x8_t *)*a1;
  *(uint64_t *)((char *)a1 + 20) = (uint64_t)v14;
  if (!*((_BYTE *)a1 + 36))
  {
    if (v12 < 2)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      v16 = (float *)(v13 + 12);
      for (i = 1; i != v12; ++i)
      {
        if (v12 <= v15)
        {
          __break(0xC471u);
          JUMPOUT(0x1961627B0);
        }
        v18 = (float *)(v13 + 8 * v15);
        v19 = v18[1];
        if (*v16 < v19 || *v16 == v19 && *(v16 - 1) < *v18)
          v15 = i;
        v16 += 2;
      }
      if (v12 <= v15)
      {
LABEL_249:
        __break(0xC471u);
        JUMPOUT(0x196161D70);
      }
    }
    v20 = 0;
    v21 = 0;
    v22 = v14;
    v23 = v12 - 1;
    v24 = (float *)(v13 + 8 * ((v15 + (_DWORD)v12 - 1) % v12));
    v26 = *v24;
    v25 = v24[1];
    if (v15 + 1 == (_DWORD)v12)
      v27 = 0;
    else
      v27 = v15 + 1;
    v28 = (float)((float)(*(float *)(v13 + 8 * v15) - v26) * (float)(*(float *)(v13 + 8 * v27 + 4) - v25))
        - (float)((float)(*(float *)(v13 + 8 * v15 + 4) - v25) * (float)(*(float *)(v13 + 8 * v27) - v26));
    if (v28 > 0.0)
      v29 = 1;
    else
      v29 = v12 - 1;
    do
    {
      if (v12 <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1961627A0);
      }
      v30 = v20;
      v31 = *(int8x8_t *)(v13 + 8 * v21);
      v32 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v22, (float32x2_t)v31), v31, v22);
      v33 = (int8x8_t)vadd_f32((float32x2_t)v22, *(float32x2_t *)((char *)a1 + 28));
      *(uint64_t *)((char *)a1 + 20) = (uint64_t)v32;
      *(uint64_t *)((char *)a1 + 28) = (uint64_t)vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v31, (float32x2_t)v33), v31, v33), v32);
      v34 = (int8x8_t *)*a1;
      v35 = (v21 + v29) % v12;
      if (v35)
      {
        v36 = (float *)&v34[v21];
        v37 = *v36;
        v38 = v36[1];
        if (v28 <= 0.0)
        {
          while (1)
          {
            v44 = (float *)&v34[v35];
            if (v37 != *v44 || v38 != v44[1])
              break;
            v35 = (v35 + v23) % v12;
            if (!v35)
              goto LABEL_47;
          }
        }
        else
        {
          while (1)
          {
            v39 = (float *)&v34[v35];
            if (v37 != *v39 || v38 != v39[1])
              break;
            v41 = 0;
            v43 = __CFADD__(v35++, 1);
            if (v35 == (_DWORD)v12 || v43)
              goto LABEL_49;
          }
        }
        v41 = v35;
      }
      else
      {
LABEL_47:
        v41 = 0;
      }
LABEL_49:
      v46 = (float *)&v34[v21];
      if (v28 <= 0.0)
      {
        do
        {
          v47 = v41;
          if (!v41)
            break;
          v41 = (v41 + v23) % v12;
        }
        while ((float)((float)((float)(*(float *)v34[v47].i32 - *v46) * (float)(*(float *)&v34[v41].i32[1] - v46[1]))
                      - (float)((float)(*(float *)&v34[v47].i32[1] - v46[1]) * (float)(*(float *)v34[v41].i32 - *v46))) == 0.0);
      }
      else
      {
        do
        {
          v47 = v41;
          if (!v41)
            break;
          if (v41 + 1 == (_DWORD)v12)
            v41 = 0;
          else
            ++v41;
        }
        while ((float)((float)((float)(*(float *)v34[v47].i32 - *v46) * (float)(*(float *)&v34[v41].i32[1] - v46[1]))
                      - (float)((float)(*(float *)&v34[v47].i32[1] - v46[1]) * (float)(*(float *)v34[v41].i32 - *v46))) == 0.0);
      }
      v48 = *((unsigned int *)a1 + 13);
      if (v20 >= v48)
      {
        __break(0xC471u);
        JUMPOUT(0x1961627A8);
      }
      v49 = a1[5];
      v50 = v49 + 32 * v20;
      *(_DWORD *)(v50 + 8) = v21;
      v51 = v50 + 8;
      *(_QWORD *)(v51 + 16) = a1;
      *(_DWORD *)(v51 + 4) = v47;
      *(_DWORD *)(v51 + 8) = v20++;
      v21 = v47;
      v22 = (int8x8_t)v32;
    }
    while (v47);
    if (v30 >= 3)
    {
      v52 = v49 + 32 * v30;
      v53 = (float *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v52 + 16))(v52);
      v54 = (float *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v52 + 24))(v52);
      v55 = (float *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v49 + 24))(v49);
      if ((float)((float)((float)(*v54 - *v53) * (float)(v55[1] - v53[1]))
                 - (float)((float)(v54[1] - v53[1]) * (float)(*v55 - *v53))) == 0.0)
      {
        LODWORD(v48) = *((_DWORD *)a1 + 13);
        if (!(_DWORD)v48)
          goto LABEL_249;
        v49 = *v6;
        *(_DWORD *)(*v6 + 8) = *(_DWORD *)v51;
        LODWORD(v20) = v30;
      }
      else
      {
        v49 = a1[5];
        LODWORD(v48) = *((_DWORD *)a1 + 13);
      }
    }
    if ((_DWORD)v48 != (_DWORD)v20)
    {
      v56 = (void (***)(void))(v49 + 32 * v20);
      v57 = 32 * v48 - 32 * v20;
      v58 = v56;
      do
      {
        v59 = *v58;
        v58 += 4;
        (*v59)();
        v57 -= 32;
      }
      while (v57);
    }
    *((_DWORD *)a1 + 13) = v20;
    *((_BYTE *)a1 + 36) = v20 < 3;
    if (v20 >= 3)
    {
      v61 = *v6;
      v62 = *v6 + 32 * v20;
      do
      {
        v63 = *(float *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v61 + 16))(v61) + 4);
        v64 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v61 + 24))(v61);
        if (*(float *)(v64 + 4) >= v63)
          v65 = v63;
        else
          v65 = *(float *)(v64 + 4);
        v66 = *(float *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v61 + 16))(v61) + 4);
        v67 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v61 + 24))(v61);
        if (v66 < *(float *)(v67 + 4))
          v66 = *(float *)(v67 + 4);
        v68 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)(v68 + 8) = 0;
        *(_QWORD *)(v68 + 16) = 0;
        *(_QWORD *)v68 = 0;
        *(_DWORD *)(v68 + 24) = 0;
        *(float *)(v68 + 32) = v65;
        *(float *)(v68 + 36) = v66;
        v69 = (float *)(v68 + 36);
        *(_QWORD *)(v68 + 40) = v61;
        *(float *)(v68 + 48) = v66;
        v70 = (uint64_t)(a1 + 7);
        v71 = *v11;
        if (*v11)
        {
          do
          {
            while (1)
            {
              v70 = v71;
              v72 = *(float *)(v71 + 32);
              if (v65 >= v72)
                break;
              v71 = *(_QWORD *)v71;
              if (!*(_QWORD *)v70)
              {
                *(_QWORD *)(v68 + 16) = v70;
                goto LABEL_91;
              }
            }
            if (v72 < v65 || (v73 = *(float *)(v71 + 36), v66 >= v73) && (v73 < v66 || v61 >= *(_QWORD *)(v71 + 40)))
              v71 += 8;
            v71 = *(_QWORD *)v71;
          }
          while (v71);
          *(_QWORD *)(v68 + 16) = v70;
          if (v72 < v65 || (v74 = *(float *)(v70 + 36), v66 >= v74) && (v74 < v66 || v61 >= *(_QWORD *)(v70 + 40)))
            v70 += 8;
        }
LABEL_91:
        *(_QWORD *)v70 = v68;
        *(_DWORD *)(v68 + 24) = 0;
        v75 = *(_QWORD *)v68;
        if (*(_QWORD *)v68)
        {
          v77 = *(float *)(v75 + 48);
          v76 = (float *)(v75 + 48);
          if (v66 < v77)
            v69 = v76;
        }
        v78 = *(_QWORD *)(v68 + 8);
        if (v78)
        {
          v80 = *(float *)(v78 + 48);
          v79 = (float *)(v78 + 48);
          if (*v69 < v80)
            v69 = v79;
        }
        if (*v69 != v66)
          *(float *)(v68 + 48) = *v69;
        v82 = (uint64_t *)(v68 + 16);
        v81 = *(_QWORD *)(v68 + 16);
        v83 = *v11;
        if (*v11 == v68)
        {
          v176 = *(_QWORD *)(v68 + 16);
LABEL_231:
          v83 = v68;
          v81 = v176;
          if (!v176)
            goto LABEL_240;
        }
        else
        {
          v84 = (_DWORD *)(v81 + 24);
          if (!*(_DWORD *)(v81 + 24))
          {
            while (1)
            {
              v85 = *(_QWORD *)(v81 + 16);
              v86 = *(_QWORD *)v85;
              if (v81 == *(_QWORD *)v85)
              {
                v88 = *(_QWORD *)(v85 + 8);
                if (v88 && !*(_DWORD *)(v88 + 24))
                {
                  *v84 = 1;
                  *(_DWORD *)(v88 + 24) = 1;
                  *(_DWORD *)(v85 + 24) = 0;
                  v123 = (float *)(v81 + 36);
                  v124 = *(_QWORD *)v81;
                  if (*(_QWORD *)v81)
                  {
                    v126 = *(float *)(v124 + 48);
                    v125 = (float *)(v124 + 48);
                    if (*v123 < v126)
                      v123 = v125;
                  }
                  v127 = *(_QWORD *)(v81 + 8);
                  if (v127)
                  {
                    v129 = *(float *)(v127 + 48);
                    v128 = (float *)(v127 + 48);
                    if (*v123 < v129)
                      v123 = v128;
                  }
                  v130 = *v123;
                  v132 = *(float *)(v81 + 48);
                  v131 = (float *)(v81 + 48);
                  v133 = v132;
                  if (*v123 != v132)
                  {
                    *v131 = v130;
                    v133 = v130;
                  }
                  if (*(float *)(v85 + 36) >= v133)
                    v131 = (float *)(v85 + 36);
                  v99 = *v131;
                  if (*v131 < *(float *)(v88 + 48))
                    v99 = *(float *)(v88 + 48);
                  v101 = *(float *)(v85 + 48);
                  goto LABEL_169;
                }
                if (v68 == *(_QWORD *)(v81 + 8))
                {
                  v102 = *(_QWORD *)v68;
                  *(_QWORD *)(v81 + 8) = *(_QWORD *)v68;
                  if (v102)
                  {
                    *(_QWORD *)(v102 + 16) = v81;
                    v85 = *(_QWORD *)(v81 + 16);
                  }
                  *v82 = v85;
                  v103 = *(_QWORD **)(v81 + 16);
                  v104 = a1 + 7;
                  if (v103)
                  {
                    v104 = v103 + 1;
                    if (*v103 == v81)
                      v104 = *(uint64_t **)(v81 + 16);
                  }
                  *v104 = v68;
                  *(_QWORD *)v68 = v81;
                  *(_QWORD *)(v81 + 16) = v68;
                  v105 = (float *)(v81 + 36);
                  v106 = *(_QWORD *)v81;
                  if (*(_QWORD *)v81)
                  {
                    v108 = *(float *)(v106 + 48);
                    v107 = (float *)(v106 + 48);
                    if (*v105 < v108)
                      v105 = v107;
                  }
                  v109 = *(_QWORD *)(v81 + 8);
                  if (v109)
                  {
                    v111 = *(float *)(v109 + 48);
                    v110 = (float *)(v109 + 48);
                    if (*v105 < v111)
                      v105 = v110;
                  }
                  v112 = *v105;
                  v113 = (float *)(v81 + 48);
                  v114 = *(float *)(v81 + 48);
                  if (v112 != v114)
                  {
                    *v113 = v112;
                    v114 = v112;
                  }
                  if (*(float *)(v68 + 36) >= v114)
                    v113 = (float *)(v68 + 36);
                  v115 = *(_QWORD *)(v68 + 8);
                  if (v115)
                  {
                    v117 = *(float *)(v115 + 48);
                    v116 = (float *)(v115 + 48);
                    if (*v113 < v117)
                      v113 = v116;
                  }
                  if (*v113 != *(float *)(v68 + 48))
                    *(float *)(v68 + 48) = *v113;
                  v89 = v68;
                }
                else
                {
                  v89 = v81;
                  v81 = v68;
                }
                *(_DWORD *)(v89 + 24) = 1;
                v118 = *(uint64_t **)(v89 + 16);
                *((_DWORD *)v118 + 6) = 0;
                v119 = *v118;
                v120 = *(_QWORD *)(*v118 + 8);
                *v118 = v120;
                if (v120)
                  *(_QWORD *)(v120 + 16) = v118;
                *(_QWORD *)(v119 + 16) = v118[2];
                v121 = (uint64_t *)(v119 + 16);
                v122 = (uint64_t *)v118[2];
                if (v122)
                {
                  if ((uint64_t *)*v122 == v118)
                  {
                    *v122 = v119;
                    v120 = *v118;
                  }
                  else
                  {
                    v122[1] = v119;
                  }
                }
                else
                {
                  *v11 = v119;
                }
                *(_QWORD *)(v119 + 8) = v118;
                v118[2] = v119;
                v134 = (float *)v118 + 9;
                if (v120)
                {
                  v136 = *(float *)(v120 + 48);
                  v135 = (float *)(v120 + 48);
                  if (*v134 < v136)
                    v134 = v135;
                }
                v137 = v118[1];
                if (v137)
                {
                  v139 = *(float *)(v137 + 48);
                  v138 = (float *)(v137 + 48);
                  if (*v134 < v139)
                    v134 = v138;
                }
                v140 = *v134;
                v141 = *((float *)v118 + 12);
                if (*v134 != v141)
                {
                  *((float *)v118 + 12) = v140;
                  v141 = v140;
                }
                v142 = (float *)(v119 + 36);
                v143 = *(_QWORD *)v119;
                if (*(_QWORD *)v119)
                {
                  v145 = *(float *)(v143 + 48);
                  v144 = (float *)(v143 + 48);
                  if (*v142 < v145)
                    v142 = v144;
                }
                if (*v142 >= v141)
                  v141 = *v142;
              }
              else
              {
                if (v86 && !*(_DWORD *)(v86 + 24))
                {
                  *v84 = 1;
                  *(_DWORD *)(v86 + 24) = 1;
                  *(_DWORD *)(v85 + 24) = 0;
                  v92 = (float *)(v81 + 36);
                  v93 = *(_QWORD *)v81;
                  if (*(_QWORD *)v81)
                  {
                    v95 = *(float *)(v93 + 48);
                    v94 = (float *)(v93 + 48);
                    if (*v92 < v95)
                      v92 = v94;
                  }
                  v96 = *(_QWORD *)(v81 + 8);
                  if (v96)
                  {
                    v98 = *(float *)(v96 + 48);
                    v97 = (float *)(v96 + 48);
                    if (*v92 < v98)
                      v92 = v97;
                  }
                  if (*v92 != *(float *)(v81 + 48))
                    *(float *)(v81 + 48) = *v92;
                  v99 = *(float *)(v85 + 36);
                  if (v99 < *(float *)(v86 + 48))
                    v99 = *(float *)(v86 + 48);
                  v100 = *(_QWORD *)(v85 + 8);
                  if (v100 && v99 < *(float *)(v100 + 48))
                    v99 = *(float *)(v100 + 48);
                  v101 = *(float *)(v85 + 48);
LABEL_169:
                  if (v99 != v101)
                    *(float *)(v85 + 48) = v99;
                  v121 = (uint64_t *)(v85 + 16);
                  v68 = v85;
                  goto LABEL_227;
                }
                if (v68 == *(_QWORD *)v81)
                {
                  v90 = *(_QWORD *)(v68 + 8);
                  *(_QWORD *)v81 = v90;
                  if (v90)
                  {
                    *(_QWORD *)(v90 + 16) = v81;
                    v85 = *(_QWORD *)(v81 + 16);
                  }
                  *v82 = v85;
                  v91 = *(uint64_t **)(v81 + 16);
                  if (v91)
                  {
                    if (*v91 == v81)
                    {
                      *v91 = v68;
                      v90 = *(_QWORD *)v81;
                    }
                    else
                    {
                      v91[1] = v68;
                    }
                  }
                  else
                  {
                    *v11 = v68;
                  }
                  *(_QWORD *)(v68 + 8) = v81;
                  *(_QWORD *)(v81 + 16) = v68;
                  v146 = (float *)(v81 + 36);
                  if (v90)
                  {
                    v148 = *(float *)(v90 + 48);
                    v147 = (float *)(v90 + 48);
                    if (*v146 < v148)
                      v146 = v147;
                  }
                  v149 = *(_QWORD *)(v81 + 8);
                  if (v149)
                  {
                    v151 = *(float *)(v149 + 48);
                    v150 = (float *)(v149 + 48);
                    if (*v146 < v151)
                      v146 = v150;
                  }
                  v152 = *v146;
                  v153 = *(float *)(v81 + 48);
                  if (*v146 != v153)
                  {
                    *(float *)(v81 + 48) = v152;
                    v153 = v152;
                  }
                  v154 = (float *)(v68 + 36);
                  v155 = *(_QWORD *)v68;
                  if (*(_QWORD *)v68)
                  {
                    v157 = *(float *)(v155 + 48);
                    v156 = (float *)(v155 + 48);
                    if (*v154 < v157)
                      v154 = v156;
                  }
                  if (*v154 >= v153)
                    v153 = *v154;
                  if (v153 != *(float *)(v68 + 48))
                    *(float *)(v68 + 48) = v153;
                  v87 = v68;
                }
                else
                {
                  v87 = v81;
                  v81 = v68;
                }
                *(_DWORD *)(v87 + 24) = 1;
                v158 = *(uint64_t **)(v87 + 16);
                *((_DWORD *)v158 + 6) = 0;
                v119 = v158[1];
                v159 = *(_QWORD *)v119;
                v158[1] = *(_QWORD *)v119;
                if (v159)
                  *(_QWORD *)(v159 + 16) = v158;
                *(_QWORD *)(v119 + 16) = v158[2];
                v121 = (uint64_t *)(v119 + 16);
                v160 = (_QWORD *)v158[2];
                v161 = a1 + 7;
                if (v160)
                {
                  v161 = v160 + 1;
                  if ((uint64_t *)*v160 == v158)
                    v161 = (uint64_t *)v158[2];
                }
                *v161 = v119;
                *(_QWORD *)v119 = v158;
                v158[2] = v119;
                v162 = (float *)v158 + 9;
                v163 = *v158;
                if (*v158)
                {
                  v165 = *(float *)(v163 + 48);
                  v164 = (float *)(v163 + 48);
                  if (*v162 < v165)
                    v162 = v164;
                }
                v166 = v158[1];
                if (v166)
                {
                  v168 = *(float *)(v166 + 48);
                  v167 = (float *)(v166 + 48);
                  if (*v162 < v168)
                    v162 = v167;
                }
                v169 = *v162;
                v171 = *((float *)v158 + 12);
                v170 = (float *)(v158 + 6);
                v172 = v171;
                if (*v162 != v171)
                {
                  *v170 = v169;
                  v172 = v169;
                }
                if (*(float *)(v119 + 36) >= v172)
                  v170 = (float *)(v119 + 36);
                v173 = *(_QWORD *)(v119 + 8);
                if (v173)
                {
                  v175 = *(float *)(v173 + 48);
                  v174 = (float *)(v173 + 48);
                  if (*v170 < v175)
                    v170 = v174;
                }
                v141 = *v170;
              }
              if (v141 != *(float *)(v119 + 48))
                *(float *)(v119 + 48) = v141;
              v68 = v81;
LABEL_227:
              v176 = *v121;
              if (v68 == *v11)
                goto LABEL_231;
              v82 = (uint64_t *)(v68 + 16);
              v81 = *(_QWORD *)(v68 + 16);
              v84 = (_DWORD *)(v81 + 24);
              if (*(_DWORD *)(v81 + 24))
              {
                v68 = *v11;
                goto LABEL_231;
              }
            }
          }
        }
        do
        {
          v177 = (float *)(v81 + 36);
          v178 = *(_QWORD *)v81;
          if (*(_QWORD *)v81)
          {
            v180 = *(float *)(v178 + 48);
            v179 = (float *)(v178 + 48);
            if (*v177 < v180)
              v177 = v179;
          }
          v181 = *(_QWORD *)(v81 + 8);
          if (v181)
          {
            v183 = *(float *)(v181 + 48);
            v182 = (float *)(v181 + 48);
            if (*v177 < v183)
              v177 = v182;
          }
          if (*v177 == *(float *)(v81 + 48))
            break;
          *(float *)(v81 + 48) = *v177;
          v81 = *(_QWORD *)(v81 + 16);
        }
        while (v81);
LABEL_240:
        *(_DWORD *)(v83 + 24) = 1;
        v61 += 32;
      }
      while (v61 != v62);
    }
  }
  return a1;
}

float32x2_t WebCore::FloatRect::extend(float32x2_t *this, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t result;

  v2 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*this, *a2), (int8x8_t)*a2, (int8x8_t)*this);
  v3 = vadd_f32(*this, this[1]);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, v3), (int8x8_t)*a2, (int8x8_t)v3), v2);
  *this = v2;
  this[1] = result;
  return result;
}

BOOL WebCore::FloatRect::contains(float *a1, float *a2, int a3)
{
  float v3;
  float v4;
  float v6;
  float v7;

  if (a3)
  {
    if (*a1 < *a2 && (float)(*a1 + a1[2]) > *a2)
    {
      v3 = a1[1];
      v4 = a2[1];
      if (v3 < v4)
        return (float)(v3 + a1[3]) > v4;
    }
    return 0;
  }
  if (*a1 > *a2)
    return 0;
  if ((float)(*a1 + a1[2]) < *a2)
    return 0;
  v6 = a2[1];
  v7 = a1[1];
  if (v7 > v6)
    return 0;
  return (float)(v7 + a1[3]) >= v6;
}

float WebCore::FloatQuad::boundingBox(WebCore::FloatQuad *this)
{
  float v1;
  float v2;
  float result;
  float v4;
  float v5;
  float v6;

  v1 = *((float *)this + 4);
  v2 = *((float *)this + 6);
  if (v2 >= v1)
    result = *((float *)this + 4);
  else
    result = *((float *)this + 6);
  v4 = *((float *)this + 2);
  if (v4 >= *(float *)this)
    v5 = *(float *)this;
  else
    v5 = *((float *)this + 2);
  if (result >= v5)
    result = v5;
  v6 = fabsf(result);
  if (v6 == INFINITY || v6 > 2147500000.0)
    return (float)((SLODWORD(result) >> 31) ^ 0x7FFFFFFF);
  return result;
}

BOOL WebCore::FloatQuad::isRectilinear(WebCore::FloatQuad *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v12;
  float v13;
  float v15;
  BOOL v16;
  float v17;
  float v19;
  float v20;
  BOOL v22;
  float v23;
  float v25;
  BOOL v27;
  float v28;
  float v30;
  float v31;
  BOOL v33;
  float v34;
  float v36;
  BOOL v38;
  float v39;
  float v41;
  float v42;
  BOOL v44;
  float v45;
  float v47;
  BOOL v49;
  float v50;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v59;
  float v60;
  BOOL v62;
  float v63;
  float v65;
  BOOL v66;
  float v67;
  float v69;
  float v70;
  BOOL v72;
  float v73;
  float v75;
  BOOL v76;
  float v77;
  float v79;
  float v80;
  BOOL v82;
  float v83;
  float v85;
  BOOL v86;
  float v87;
  float v89;
  float v90;
  BOOL v92;
  float v93;
  float v95;

  v1 = *(float *)this;
  v2 = *((float *)this + 2);
  if (*(float *)this == v2)
    goto LABEL_24;
  v19 = vabds_f32(v1, v2);
  v20 = fabsf(v1);
  if (v20 >= 1.0 || (float)(v20 * 3.4028e38) >= v19)
  {
    v22 = (float)(v20 * 1.1755e-38) <= v19 || v20 <= 1.0;
    v23 = v19 / v20;
    if (!v22 || v23 <= 0.00000011921)
    {
      v25 = fabsf(v2);
      if (v25 >= 1.0 || (float)(v25 * 3.4028e38) >= v19)
      {
        v27 = (float)(v25 * 1.1755e-38) <= v19 || v25 <= 1.0;
        v28 = v19 / v25;
        if (!v27 || v28 <= 0.00000011921)
        {
LABEL_24:
          v3 = *((float *)this + 3);
          v4 = *((float *)this + 5);
          if (v3 == v4)
            goto LABEL_188;
          v30 = vabds_f32(v3, v4);
          v31 = fabsf(v3);
          if (v31 >= 1.0 || (float)(v31 * 3.4028e38) >= v30)
          {
            v33 = (float)(v31 * 1.1755e-38) <= v30 || v31 <= 1.0;
            v34 = v30 / v31;
            if (!v33 || v34 <= 0.00000011921)
            {
              v36 = fabsf(v4);
              if (v36 >= 1.0 || (float)(v36 * 3.4028e38) >= v30)
              {
                v38 = (float)(v36 * 1.1755e-38) <= v30 || v36 <= 1.0;
                v39 = v30 / v36;
                if (!v38 || v39 <= 0.00000011921)
                {
LABEL_188:
                  v5 = *((float *)this + 4);
                  v6 = *((float *)this + 6);
                  if (v5 == v6)
                    goto LABEL_189;
                  v41 = vabds_f32(v5, v6);
                  v42 = fabsf(v5);
                  if (v42 >= 1.0 || (float)(v42 * 3.4028e38) >= v41)
                  {
                    v44 = (float)(v42 * 1.1755e-38) <= v41 || v42 <= 1.0;
                    v45 = v41 / v42;
                    if (!v44 || v45 <= 0.00000011921)
                    {
                      v47 = fabsf(v6);
                      if (v47 >= 1.0 || (float)(v47 * 3.4028e38) >= v41)
                      {
                        v49 = (float)(v47 * 1.1755e-38) <= v41 || v47 <= 1.0;
                        v50 = v41 / v47;
                        if (!v49 || v50 <= 0.00000011921)
                        {
LABEL_189:
                          v7 = *((float *)this + 7);
                          v8 = *((float *)this + 1);
                          if (v7 == v8)
                            return 1;
                          v9 = vabds_f32(v7, v8);
                          v10 = fabsf(v7);
                          if (v10 >= 1.0 || (float)(v10 * 3.4028e38) >= v9)
                          {
                            v12 = (float)(v10 * 1.1755e-38) <= v9 || v10 <= 1.0;
                            v13 = v9 / v10;
                            if (!v12 || v13 <= 0.00000011921)
                            {
                              v15 = fabsf(v8);
                              if (v15 >= 1.0 || (float)(v15 * 3.4028e38) >= v9)
                              {
                                v16 = (float)(v15 * 1.1755e-38) <= v9 || v15 <= 1.0;
                                v17 = v9 / v15;
                                if (!v16 || v17 <= 0.00000011921)
                                  return 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v52 = *((float *)this + 1);
  v53 = *((float *)this + 3);
  if (v52 != v53)
  {
    v59 = vabds_f32(v52, v53);
    v60 = fabsf(v52);
    if (v60 < 1.0 && (float)(v60 * 3.4028e38) < v59)
      return 0;
    v62 = (float)(v60 * 1.1755e-38) <= v59 || v60 <= 1.0;
    v63 = v59 / v60;
    if (v62 && v63 > 0.00000011921)
      return 0;
    v65 = fabsf(v53);
    if (v65 < 1.0 && (float)(v65 * 3.4028e38) < v59)
      return 0;
    v66 = (float)(v65 * 1.1755e-38) <= v59 || v65 <= 1.0;
    v67 = v59 / v65;
    if (v66 && v67 > 0.00000011921)
      return 0;
  }
  v54 = *((float *)this + 4);
  if (v2 != v54)
  {
    v69 = vabds_f32(v2, v54);
    v70 = fabsf(v2);
    if (v70 < 1.0 && (float)(v70 * 3.4028e38) < v69)
      return 0;
    v72 = (float)(v70 * 1.1755e-38) <= v69 || v70 <= 1.0;
    v73 = v69 / v70;
    if (v72 && v73 > 0.00000011921)
      return 0;
    v75 = fabsf(v54);
    if (v75 < 1.0 && (float)(v75 * 3.4028e38) < v69)
      return 0;
    v76 = (float)(v75 * 1.1755e-38) <= v69 || v75 <= 1.0;
    v77 = v69 / v75;
    if (v76 && v77 > 0.00000011921)
      return 0;
  }
  v55 = *((float *)this + 5);
  v56 = *((float *)this + 7);
  if (v55 != v56)
  {
    v79 = vabds_f32(v55, v56);
    v80 = fabsf(v55);
    if (v80 < 1.0 && (float)(v80 * 3.4028e38) < v79)
      return 0;
    v82 = (float)(v80 * 1.1755e-38) <= v79 || v80 <= 1.0;
    v83 = v79 / v80;
    if (v82 && v83 > 0.00000011921)
      return 0;
    v85 = fabsf(v56);
    if (v85 < 1.0 && (float)(v85 * 3.4028e38) < v79)
      return 0;
    v86 = (float)(v85 * 1.1755e-38) <= v79 || v85 <= 1.0;
    v87 = v79 / v85;
    if (v86 && v87 > 0.00000011921)
      return 0;
  }
  v57 = *((float *)this + 6);
  if (v57 == v1)
    return 1;
  v89 = vabds_f32(v57, v1);
  v90 = fabsf(v57);
  if (v90 < 1.0 && (float)(v90 * 3.4028e38) < v89)
    return 0;
  v92 = (float)(v90 * 1.1755e-38) <= v89 || v90 <= 1.0;
  v93 = v89 / v90;
  if (v92 && v93 > 0.00000011921)
    return 0;
  v95 = fabsf(v1);
  if (v95 < 1.0 && (float)(v95 * 3.4028e38) < v89)
    return 0;
  if (v95 > 1.0 && (float)(v95 * 1.1755e-38) > v89)
    return 1;
  return (float)(v89 / v95) <= 0.00000011921;
}

BOOL WebCore::FloatQuad::containsPoint(WebCore::FloatQuad *this, const WebCore::FloatPoint *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v18;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;

  v2 = *((float *)this + 1);
  v3 = *((float *)this + 4) - *(float *)this;
  v4 = *((float *)this + 5) - v2;
  v5 = *((float *)this + 2) - *(float *)this;
  v6 = *((float *)this + 3) - v2;
  v7 = *(float *)a2 - *(float *)this;
  v8 = *((float *)a2 + 1) - v2;
  v9 = (float)(v4 * v4) + (float)(v3 * v3);
  v10 = (float)(v4 * v6) + (float)(v3 * v5);
  v11 = (float)(v4 * v8) + (float)(v3 * v7);
  v12 = (float)(v6 * v6) + (float)(v5 * v5);
  v13 = (float)(v6 * v8) + (float)(v5 * v7);
  v14 = 1.0 / (float)((float)(v9 * v12) - (float)(v10 * v10));
  v15 = v14 * (float)((float)(v12 * v11) - (float)(v10 * v13));
  if (v15 >= 0.0)
  {
    v16 = v14 * (float)((float)(v9 * v13) - (float)(v10 * v11));
    if (v16 >= 0.0 && (float)(v15 + v16) <= 1.0)
      return 1;
  }
  v18 = 0;
  v20 = *((float *)this + 6) - *(float *)this;
  v21 = *((float *)this + 7) - v2;
  v22 = (float)(v21 * v21) + (float)(v20 * v20);
  v23 = (float)(v4 * v21) + (float)(v20 * v3);
  v24 = (float)(v8 * v21) + (float)(v20 * v7);
  v25 = 1.0 / (float)((float)(v22 * v9) - (float)(v23 * v23));
  v26 = (float)((float)(v9 * v24) - (float)(v23 * v11)) * v25;
  if (v26 >= 0.0)
  {
    v27 = (float)((float)(v22 * v11) - (float)(v23 * v24)) * v25;
    if (v27 >= 0.0)
      return (float)(v26 + v27) <= 1.0;
  }
  return v18;
}

BOOL WebCore::FloatQuad::containsQuad(WebCore::FloatQuad *this, const WebCore::FloatQuad *a2)
{
  return WebCore::FloatQuad::containsPoint(this, a2)
      && WebCore::FloatQuad::containsPoint(this, (const WebCore::FloatQuad *)((char *)a2 + 8))
      && WebCore::FloatQuad::containsPoint(this, (const WebCore::FloatQuad *)((char *)a2 + 16))
      && WebCore::FloatQuad::containsPoint(this, (const WebCore::FloatQuad *)((char *)a2 + 24));
}

BOOL WebCore::FloatQuad::intersectsRect(WebCore::FloatQuad *this, const WebCore::FloatRect *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v32;
  float v33;
  float v34;

  v2 = *((float *)this + 2);
  v3 = *((float *)this + 3);
  v5 = *(float *)this;
  v4 = *((float *)this + 1);
  v6 = v2 - *(float *)this;
  v7 = v3 - v4;
  v8 = *((float *)this + 4);
  v9 = *((float *)this + 5);
  v10 = v8 - v2;
  v11 = v9 - v3;
  v12 = *((float *)this + 6);
  if ((float)((float)(v6 * (float)(v9 - v3)) - (float)((float)(v3 - v4) * (float)(v8 - v2))) >= 0.0)
  {
    v15 = -v7;
    v13 = *((float *)this + 7);
    v14 = v4 - v13;
    v16 = *(float *)this;
    v17 = *((float *)this + 6);
    v18 = v13;
  }
  else
  {
    v6 = v12 - v5;
    v13 = *((float *)this + 7);
    v10 = v5 - v2;
    v11 = v4 - v3;
    v14 = v9 - v13;
    v7 = v13 - v4;
    v15 = -(float)(v13 - v4);
    v16 = *((float *)this + 4);
    v17 = *((float *)this + 2);
    v18 = *((float *)this + 3);
  }
  if (v6 >= 0.0)
    v19 = *((float *)a2 + 3);
  else
    v19 = -0.0;
  v20 = *(float *)a2;
  v21 = *((float *)a2 + 1);
  v22 = v21 + v19;
  if (v7 >= 0.0)
    v23 = -0.0;
  else
    v23 = *((float *)a2 + 2);
  if ((float)((float)(v15 * (float)((float)(v20 + v23) - v5)) + (float)(v6 * (float)(v22 - v4))) < 0.0)
    return 0;
  v24 = -0.0;
  if (v10 >= 0.0)
    v25 = *((float *)a2 + 3);
  else
    v25 = -0.0;
  v26 = v21 + v25;
  if (v11 < 0.0)
    v24 = *((float *)a2 + 2);
  if ((float)((float)(v10 * (float)(v26 - v3)) - (float)(v11 * (float)((float)(v20 + v24) - v2))) < 0.0)
    return 0;
  v27 = v18 - v9;
  v28 = -0.0;
  if ((float)(v17 - v8) >= 0.0)
    v29 = *((float *)a2 + 3);
  else
    v29 = -0.0;
  v30 = v21 + v29;
  if (v27 < 0.0)
    v28 = *((float *)a2 + 2);
  if ((float)((float)((float)(v17 - v8) * (float)(v30 - v9)) - (float)(v27 * (float)((float)(v20 + v28) - v8))) < 0.0)
    return 0;
  v32 = -0.0;
  if ((float)(v16 - v12) >= 0.0)
    v33 = *((float *)a2 + 3);
  else
    v33 = -0.0;
  v34 = v21 + v33;
  if (v14 < 0.0)
    v32 = *((float *)a2 + 2);
  return (float)((float)((float)(v16 - v12) * (float)(v34 - v13)) - (float)(v14 * (float)((float)(v20 + v32) - v12))) >= 0.0;
}

BOOL WebCore::FloatQuad::intersectsCircle(WebCore::FloatQuad *this, const WebCore::FloatPoint *a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  BOOL v24;
  float v25;
  float v28;
  float v29;
  float v30;
  float v31;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  BOOL v38;
  BOOL v39;
  float v40;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  BOOL v52;
  BOOL v53;
  float v54;
  float v57;
  float v58;
  float v59;
  float v60;
  float v62;
  float v65;

  if (WebCore::FloatQuad::containsPoint(this, a2))
    return 1;
  v6 = *(float *)a2;
  v7 = *((float *)a2 + 1);
  v9 = *(float *)this;
  v8 = *((float *)this + 1);
  v10 = *(float *)this - *(float *)a2;
  v11 = v8 - v7;
  v12 = a3 * a3;
  if ((float)((float)(v11 * v11) + (float)(v10 * v10)) <= (float)(a3 * a3))
    return 1;
  v13 = *((float *)this + 2);
  v14 = *((float *)this + 3);
  v15 = v13 - v6;
  v16 = v14 - v7;
  if ((float)((float)(v16 * v16) + (float)(v15 * v15)) <= v12)
    return 1;
  if (v9 != v13 || v8 != v14)
  {
    v18 = v11 - v16;
    v19 = v15 - v10;
    v20 = (float)(v10 * v16) - (float)(v15 * v11);
    v21 = (float)(v19 * v19) + (float)(v18 * v18);
    if ((float)((float)(v20 * v20) / v21) <= v12)
    {
      v22 = (float)-(float)(v18 * v20) / v21;
      v23 = v10 > v22 || v22 > v15;
      if (!v23 || (v10 >= v22 ? (v24 = v22 < v15) : (v24 = 1), !v24))
      {
        v25 = (float)-(float)(v19 * v20) / v21;
        if (v11 <= v25 && v25 <= v16)
          return 1;
        if (v16 <= v25 && v25 <= v11)
          return 1;
      }
    }
  }
  v29 = *((float *)this + 4);
  v28 = *((float *)this + 5);
  v30 = v29 - v6;
  v31 = v28 - v7;
  if ((float)((float)(v31 * v31) + (float)(v30 * v30)) <= v12)
    return 1;
  if (v13 != v29 || v14 != v28)
  {
    v33 = v16 - v31;
    v34 = v30 - v15;
    v35 = (float)(v15 * v31) - (float)(v30 * v16);
    v36 = (float)(v34 * v34) + (float)(v33 * v33);
    if ((float)((float)(v35 * v35) / v36) <= v12)
    {
      v37 = (float)-(float)(v33 * v35) / v36;
      v38 = v15 > v37 || v37 > v30;
      if (!v38 || (v15 >= v37 ? (v39 = v37 < v30) : (v39 = 1), !v39))
      {
        v40 = (float)-(float)(v34 * v35) / v36;
        if (v16 <= v40 && v40 <= v31)
          return 1;
        if (v31 <= v40 && v40 <= v16)
          return 1;
      }
    }
  }
  v44 = *((float *)this + 6);
  v43 = *((float *)this + 7);
  v45 = v44 - v6;
  v46 = v43 - v7;
  if ((float)((float)(v46 * v46) + (float)(v45 * v45)) <= v12)
    return 1;
  if (v29 != v44 || v28 != v43)
  {
    v47 = v31 - v46;
    v48 = v45 - v30;
    v49 = (float)(v30 * v46) - (float)(v45 * v31);
    v50 = (float)(v48 * v48) + (float)(v47 * v47);
    if ((float)((float)(v49 * v49) / v50) <= v12)
    {
      v51 = (float)-(float)(v47 * v49) / v50;
      v52 = v30 > v51 || v51 > v45;
      if (!v52 || (v30 >= v51 ? (v53 = v51 < v45) : (v53 = 1), !v53))
      {
        v54 = (float)-(float)(v48 * v49) / v50;
        if (v31 <= v54 && v54 <= v46)
          return 1;
        if (v46 <= v54 && v54 <= v31)
          return 1;
      }
    }
  }
  if (v44 == v9 && v43 == v8)
    return 0;
  v57 = v46 - v11;
  v58 = v10 - v45;
  v59 = (float)(v45 * v11) - (float)(v10 * v46);
  v60 = (float)(v58 * v58) + (float)(v57 * v57);
  if ((float)((float)(v59 * v59) / v60) > v12)
    return 0;
  v62 = (float)-(float)(v57 * v59) / v60;
  if ((v45 > v62 || v62 > v10) && (v45 < v62 || v62 < v10))
    return 0;
  v65 = (float)-(float)(v58 * v59) / v60;
  if (v46 <= v65 && v65 <= v11)
    return 1;
  if (v65 <= v46)
    return v11 <= v65;
  return 0;
}

uint64_t WebCore::FloatQuad::isEmpty(WebCore::FloatQuad *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  BOOL v8;
  float v9;
  float v11;
  BOOL v13;
  float v14;
  float v16;
  float v17;
  BOOL v19;
  float v20;
  float v22;
  BOOL v24;
  float v25;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v33;
  float v34;
  BOOL v36;
  float v37;
  float v39;
  BOOL v40;
  float v41;
  float v43;
  float v44;
  BOOL v46;
  float v47;
  float v49;
  BOOL v50;
  float v51;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  BOOL v59;
  float v60;
  float v62;
  BOOL v63;
  float v64;
  float v65;
  BOOL v66;
  float v67;
  float v69;
  BOOL v70;
  float v71;
  float v73;
  float v74;
  BOOL v75;
  float v76;
  float v78;
  BOOL v79;
  float v80;
  float v82;
  float v83;
  BOOL v84;
  float v85;
  BOOL v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  BOOL v95;
  float v96;
  BOOL v97;
  float v98;
  float v99;
  BOOL v100;
  float v101;
  BOOL v102;
  float v103;
  BOOL v104;
  float v105;
  float v106;
  BOOL v107;
  float v108;
  BOOL v109;
  float v110;
  BOOL v111;
  float v112;
  float v113;
  BOOL v114;
  float v115;
  BOOL v116;
  float v117;
  BOOL v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;

  v1 = *(float *)this;
  v2 = *((float *)this + 4);
  if (*(float *)this == v2)
    goto LABEL_24;
  v16 = vabds_f32(v1, v2);
  v17 = fabsf(v1);
  if (v17 >= 1.0 || (float)(v17 * 3.4028e38) >= v16)
  {
    v19 = (float)(v17 * 1.1755e-38) <= v16 || v17 <= 1.0;
    v20 = v16 / v17;
    if (!v19 || v20 <= 0.00000011921)
    {
      v22 = fabsf(v2);
      if (v22 >= 1.0 || (float)(v22 * 3.4028e38) >= v16)
      {
        v24 = (float)(v22 * 1.1755e-38) <= v16 || v22 <= 1.0;
        v25 = v16 / v22;
        if (!v24 || v25 <= 0.00000011921)
        {
LABEL_24:
          v3 = *((float *)this + 1);
          v4 = *((float *)this + 5);
          if (v3 == v4)
            return 1;
          v5 = vabds_f32(v3, v4);
          v6 = fabsf(v3);
          if (v6 >= 1.0 || (float)(v6 * 3.4028e38) >= v5)
          {
            v8 = (float)(v6 * 1.1755e-38) <= v5 || v6 <= 1.0;
            v9 = v5 / v6;
            if (!v8 || v9 <= 0.00000011921)
            {
              v11 = fabsf(v4);
              if (v11 >= 1.0 || (float)(v11 * 3.4028e38) >= v5)
              {
                v13 = (float)(v11 * 1.1755e-38) <= v5 || v11 <= 1.0;
                v14 = v5 / v11;
                if (!v13 || v14 <= 0.00000011921)
                  return 1;
              }
            }
          }
        }
      }
    }
  }
  v27 = *((float *)this + 2);
  v28 = *((float *)this + 6);
  if (v27 == v28)
    goto LABEL_95;
  v33 = vabds_f32(v27, v28);
  v34 = fabsf(v27);
  if (v34 >= 1.0 || (float)(v34 * 3.4028e38) >= v33)
  {
    v36 = (float)(v34 * 1.1755e-38) <= v33 || v34 <= 1.0;
    v37 = v33 / v34;
    if (!v36 || v37 <= 0.00000011921)
    {
      v39 = fabsf(v28);
      if (v39 >= 1.0 || (float)(v39 * 3.4028e38) >= v33)
      {
        v40 = (float)(v39 * 1.1755e-38) <= v33 || v39 <= 1.0;
        v41 = v33 / v39;
        if (!v40 || v41 <= 0.00000011921)
        {
LABEL_95:
          v29 = *((float *)this + 3);
          v30 = *((float *)this + 7);
          if (v29 == v30)
            return 1;
          v43 = vabds_f32(v29, v30);
          v44 = fabsf(v29);
          if (v44 >= 1.0 || (float)(v44 * 3.4028e38) >= v43)
          {
            v46 = (float)(v44 * 1.1755e-38) <= v43 || v44 <= 1.0;
            v47 = v43 / v44;
            if (!v46 || v47 <= 0.00000011921)
            {
              v49 = fabsf(v30);
              if (v49 >= 1.0 || (float)(v49 * 3.4028e38) >= v43)
              {
                v50 = (float)(v49 * 1.1755e-38) <= v43 || v49 <= 1.0;
                v51 = v43 / v49;
                if (!v50 || v51 <= 0.00000011921)
                  return 1;
              }
            }
          }
        }
      }
    }
  }
  if (v1 == v27)
    goto LABEL_175;
  v64 = vabds_f32(v1, v27);
  v65 = fabsf(v1);
  if (v65 >= 1.0 || (float)(v65 * 3.4028e38) >= v64)
  {
    v66 = (float)(v65 * 1.1755e-38) <= v64 || v65 <= 1.0;
    v67 = v64 / v65;
    if (!v66 || v67 <= 0.00000011921)
    {
      v69 = fabsf(v27);
      if (v69 >= 1.0 || (float)(v69 * 3.4028e38) >= v64)
      {
        v70 = (float)(v69 * 1.1755e-38) <= v64 || v69 <= 1.0;
        v71 = v64 / v69;
        if (!v70 || v71 <= 0.00000011921)
        {
LABEL_175:
          v53 = *((float *)this + 1);
          v54 = *((float *)this + 3);
          if (v53 == v54)
            goto LABEL_286;
          v73 = vabds_f32(v53, v54);
          v74 = fabsf(v53);
          if (v74 >= 1.0 || (float)(v74 * 3.4028e38) >= v73)
          {
            v75 = (float)(v74 * 1.1755e-38) <= v73 || v74 <= 1.0;
            v76 = v73 / v74;
            if (!v75 || v76 <= 0.00000011921)
            {
              v78 = fabsf(v54);
              if (v78 >= 1.0 || (float)(v78 * 3.4028e38) >= v73)
              {
                v79 = (float)(v78 * 1.1755e-38) <= v73 || v78 <= 1.0;
                v80 = v73 / v78;
                if (!v79 || v80 <= 0.00000011921)
                {
LABEL_286:
                  if (v2 == v28
                    || ((v82 = vabds_f32(v2, v28), v83 = fabsf(v2), v83 >= 1.0) || (float)(v83 * 3.4028e38) >= v82)
                    && ((float)(v83 * 1.1755e-38) > v82 ? (v84 = v83 <= 1.0) : (v84 = 1),
                        (v85 = v82 / v83, v84) ? (v86 = v85 > 0.00000011921) : (v86 = 0),
                        !v86
                     && ((v87 = fabsf(v28), v87 >= 1.0) || (float)(v87 * 3.4028e38) >= v82)
                     && ((float)(v87 * 1.1755e-38) > v82 ? (v88 = v87 <= 1.0) : (v88 = 1),
                         !v88 || (float)(v82 / v87) <= 0.00000011921)))
                  {
                    v55 = *((float *)this + 5);
                    v56 = *((float *)this + 7);
                    if (v55 == v56)
                      return 1;
                    v57 = vabds_f32(v55, v56);
                    v58 = fabsf(v55);
                    if (v58 >= 1.0 || (float)(v58 * 3.4028e38) >= v57)
                    {
                      v59 = (float)(v58 * 1.1755e-38) <= v57 || v58 <= 1.0;
                      v60 = v57 / v58;
                      if (!v59 || v60 <= 0.00000011921)
                      {
                        v62 = fabsf(v56);
                        if (v62 >= 1.0 || (float)(v62 * 3.4028e38) >= v57)
                        {
                          v63 = (float)(v62 * 1.1755e-38) <= v57 || v62 <= 1.0;
                          v31 = 1;
                          if (!v63 || (float)(v57 / v62) <= 0.00000011921)
                            return v31;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v1 == v28
    || ((v98 = vabds_f32(v1, v28), v99 = fabsf(v1), v99 >= 1.0) || (float)(v99 * 3.4028e38) >= v98)
    && ((float)(v99 * 1.1755e-38) > v98 ? (v100 = v99 <= 1.0) : (v100 = 1),
        (v101 = v98 / v99, v100) ? (v102 = v101 > 0.00000011921) : (v102 = 0),
        !v102
     && ((v103 = fabsf(v28), v103 >= 1.0) || (float)(v103 * 3.4028e38) >= v98)
     && ((float)(v103 * 1.1755e-38) > v98 ? (v104 = v103 <= 1.0) : (v104 = 1),
         !v104 || (float)(v98 / v103) <= 0.00000011921)))
  {
    v89 = *((float *)this + 1);
    v90 = *((float *)this + 7);
    if (v89 == v90
      || ((v105 = vabds_f32(v89, v90), v106 = fabsf(v89), v106 >= 1.0) || (float)(v106 * 3.4028e38) >= v105)
      && ((float)(v106 * 1.1755e-38) > v105 ? (v107 = v106 <= 1.0) : (v107 = 1),
          (v108 = v105 / v106, v107) ? (v109 = v108 > 0.00000011921) : (v109 = 0),
          !v109
       && ((v110 = fabsf(v90), v110 >= 1.0) || (float)(v110 * 3.4028e38) >= v105)
       && ((float)(v110 * 1.1755e-38) > v105 ? (v111 = v110 <= 1.0) : (v111 = 1),
           !v111 || (float)(v105 / v110) <= 0.00000011921)))
    {
      if (v27 == v2
        || ((v112 = vabds_f32(v27, v2), v113 = fabsf(v27), v113 >= 1.0) || (float)(v113 * 3.4028e38) >= v112)
        && ((float)(v113 * 1.1755e-38) > v112 ? (v114 = v113 <= 1.0) : (v114 = 1),
            (v115 = v112 / v113, v114) ? (v116 = v115 > 0.00000011921) : (v116 = 0),
            !v116
         && ((v117 = fabsf(v2), v117 >= 1.0) || (float)(v117 * 3.4028e38) >= v112)
         && ((float)(v117 * 1.1755e-38) > v112 ? (v118 = v117 <= 1.0) : (v118 = 1),
             !v118 || (float)(v112 / v117) <= 0.00000011921)))
      {
        v91 = *((float *)this + 3);
        v92 = *((float *)this + 5);
        if (v91 != v92)
        {
          v93 = vabds_f32(v91, v92);
          v94 = fabsf(v91);
          if (v94 >= 1.0 || (float)(v94 * 3.4028e38) >= v93)
          {
            v95 = (float)(v94 * 1.1755e-38) <= v93 || v94 <= 1.0;
            if (!v95 || (float)(v93 / v94) <= 0.00000011921)
            {
              v96 = fabsf(v92);
              if (v96 >= 1.0 || (float)(v96 * 3.4028e38) >= v93)
              {
                v97 = (float)(v96 * 1.1755e-38) <= v93 || v96 <= 1.0;
                v31 = 1;
                if (!v97 || (float)(v93 / v96) <= 0.00000011921)
                  return v31;
              }
            }
          }
          goto LABEL_250;
        }
        return 1;
      }
    }
  }
LABEL_250:
  v119 = v1 - v27;
  v120 = *((float *)this + 1);
  v121 = v120 - *((float *)this + 3);
  v122 = v1 - v2;
  v123 = *((float *)this + 5);
  v124 = *((float *)this + 7);
  if ((float)(v1 - v27) != 0.0)
  {
    v128 = v1 - v27;
    if (v119 < 0.0)
      v128 = -v119;
    if (v128 >= 0.00000011921)
      goto LABEL_275;
  }
  if (v121 != 0.0)
  {
    v131 = v120 - *((float *)this + 3);
    if (v121 < 0.0)
      v131 = -v121;
    if (v131 >= 0.00000011921)
    {
LABEL_275:
      v132 = hypotf(v119, v121);
      v119 = v119 / v132;
      v121 = v121 / v132;
    }
  }
  v125 = v120 - v123;
  v126 = v1 - v28;
  if (v122 != 0.0)
  {
    v129 = v122;
    if (v122 < 0.0)
      v129 = -v122;
    if (v129 >= 0.00000011921)
      goto LABEL_279;
  }
  if (v125 != 0.0)
  {
    v133 = v125;
    if (v125 < 0.0)
      v133 = -v125;
    if (v133 >= 0.00000011921)
    {
LABEL_279:
      v134 = hypotf(v122, v125);
      v122 = v122 / v134;
      v125 = v125 / v134;
    }
  }
  v127 = v120 - v124;
  if (v126 != 0.0)
  {
    v130 = v126;
    if (v126 < 0.0)
      v130 = -v126;
    if (v130 >= 0.00000011921)
      goto LABEL_283;
  }
  if (v127 != 0.0)
  {
    v135 = v120 - v124;
    if (v127 < 0.0)
      v135 = -v127;
    if (v135 >= 0.00000011921)
    {
LABEL_283:
      v136 = hypotf(v126, v120 - v124);
      v126 = v126 / v136;
      v127 = v127 / v136;
    }
  }
  if ((WebCore::FloatQuad::isEmpty(void)const::$_0::operator()(v119, v121, v122, v125) & 1) != 0
    || (WebCore::FloatQuad::isEmpty(void)const::$_0::operator()(v122, v125, v126, v127) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return WebCore::FloatQuad::isEmpty(void)const::$_0::operator()(v119, v121, v126, v127) ^ 1;
  }
}

uint64_t WebCore::FloatQuad::isEmpty(void)const::$_0::operator()(float a1, float a2, float a3, float a4)
{
  uint64_t result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v14;
  float v15;
  _BOOL4 v17;

  if (a1 == 0.0)
    goto LABEL_10;
  v5 = -a1;
  if (a1 >= 0.0)
    v5 = a1;
  if (v5 < 0.00000011921)
  {
LABEL_10:
    if (a2 == 0.0)
      return 0;
    v6 = -a2;
    if (a2 >= 0.0)
      v6 = a2;
    if (v6 < 0.00000011921)
      return 0;
  }
  if (a3 == 0.0)
    goto LABEL_15;
  v8 = -a3;
  if (a3 >= 0.0)
    v8 = a3;
  if (v8 < 0.00000011921)
  {
LABEL_15:
    if (a4 == 0.0)
      return 0;
    v7 = -a4;
    if (a4 >= 0.0)
      v7 = a4;
    if (v7 < 0.00000011921)
      return 0;
  }
  v9 = (float)(a2 * a4) + (float)(a1 * a3);
  if (v9 == 1.0)
    return 0;
  v10 = fabsf(v9 + -1.0);
  v11 = fabsf(v9);
  v12 = v11 * 3.4028e38;
  if (v11 < 1.0 && v12 < v10)
  {
    if (v9 != -1.0)
    {
LABEL_36:
      v15 = fabsf(v9 + 1.0);
      if (v11 < 1.0 && v12 < v15)
        return 1;
      v17 = v11 <= 1.0;
      if ((float)(v11 * 1.1755e-38) <= v15)
        v17 = 1;
      if ((float)(v15 / v11) <= 0.00000011921)
        v17 = 0;
      return v15 > 0.00000011921 || v17;
    }
    return 0;
  }
  result = 0;
  v14 = v11 <= 1.0;
  if ((float)(v11 * 1.1755e-38) <= v10)
    v14 = 1;
  if ((float)(v10 / v11) <= 0.00000011921)
    v14 = 0;
  if (v10 > 0.00000011921)
    v14 = 1;
  if (v9 != -1.0 && v14)
    goto LABEL_36;
  return result;
}

uint64_t WebCore::boundingBoxes@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;
  float *v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v25;
  float v27;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    if (v2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = (_DWORD *)result;
      result = WTF::fastMalloc((WTF *)(16 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = result;
      v5 = v4[3];
      if (v5)
      {
        v6 = (float *)(*(_QWORD *)v4 + 16);
        v7 = (float *)(result + 8);
        v8 = v4[3];
        do
        {
          v10 = *v6;
          v9 = v6[1];
          v12 = v6[2];
          v11 = v6[3];
          if (v12 >= *v6)
            v13 = *v6;
          else
            v13 = v6[2];
          v15 = *(v6 - 4);
          v14 = *(v6 - 3);
          v17 = *(v6 - 2);
          v16 = *(v6 - 1);
          if (v17 >= v15)
            v18 = *(v6 - 4);
          else
            v18 = *(v6 - 2);
          if (v13 >= v18)
            v13 = v18;
          v19 = fabsf(v13);
          if (v19 == INFINITY || v19 > 2147500000.0)
            v13 = (float)((SLODWORD(v13) >> 31) ^ 0x7FFFFFFF);
          if (v11 >= v9)
            v21 = v6[1];
          else
            v21 = v6[3];
          if (v16 >= v14)
            v22 = *(v6 - 3);
          else
            v22 = *(v6 - 1);
          if (v21 >= v22)
            v21 = v22;
          v23 = fabsf(v21);
          if (v23 == INFINITY || v23 > 2147500000.0)
            v21 = (float)((SLODWORD(v21) >> 31) ^ 0x7FFFFFFF);
          if (v15 < v17)
            v15 = *(v6 - 2);
          if (v10 < v12)
            v10 = v6[2];
          if (v15 >= v10)
            v10 = v15;
          v25 = fabsf(v10);
          if (v25 == INFINITY || v25 > 2147500000.0)
            v10 = (float)((SLODWORD(v10) >> 31) ^ 0x7FFFFFFF);
          if (v14 < v16)
            v14 = *(v6 - 1);
          if (v9 < v11)
            v9 = v6[3];
          if (v14 >= v9)
            v9 = v14;
          v27 = fabsf(v9);
          if (v27 == INFINITY || v27 > 2147500000.0)
            v9 = (float)((SLODWORD(v9) >> 31) ^ 0x7FFFFFFF);
          *(v7 - 2) = v13;
          *(v7 - 1) = v21;
          *v7 = v10 - v13;
          v7[1] = v9 - v21;
          v7 += 4;
          v6 += 8;
          --v8;
        }
        while (v8);
        *(_DWORD *)(a2 + 12) = v5;
      }
    }
  }
  return result;
}

float32x2_t WebCore::FloatRect::uniteEvenIfEmpty(float32x2_t *this, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t result;

  v2 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*this, *a2), (int8x8_t)*a2, (int8x8_t)*this);
  v3 = vadd_f32(*this, this[1]);
  v4 = vadd_f32(*a2, a2[1]);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, v3), (int8x8_t)v4, (int8x8_t)v3), v2);
  *this = v2;
  this[1] = result;
  return result;
}

float WebCore::FloatRect::FloatRect(WebCore::FloatRect *this, const WebCore::IntRect *a2)
{
  float v2;
  float result;
  float v4;

  v2 = (float)*((int *)a2 + 1);
  *(float *)this = (float)*(int *)a2;
  *((float *)this + 1) = v2;
  result = (float)*((int *)a2 + 2);
  v4 = (float)*((int *)a2 + 3);
  *((float *)this + 2) = result;
  *((float *)this + 3) = v4;
  return result;
}

BOOL WebCore::FloatRect::inclusivelyIntersects(WebCore::FloatRect *this, const WebCore::FloatRect *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v8;
  float v9;

  v2 = *((float *)this + 2);
  if (v2 < 0.0)
    return 0;
  v3 = *((float *)this + 3);
  if (v3 < 0.0)
    return 0;
  v4 = *((float *)a2 + 2);
  if (v4 < 0.0)
    return 0;
  v5 = *((float *)a2 + 3);
  if (v5 < 0.0)
    return 0;
  v6 = v4 + *(float *)a2;
  if (*(float *)a2 > (float)(v2 + *(float *)this) || *(float *)this > v6)
    return 0;
  v8 = *((float *)this + 1);
  v9 = *((float *)a2 + 1);
  return v8 <= (float)(v5 + v9) && v9 <= (float)(v3 + v8);
}

BOOL WebCore::FloatRect::contains(WebCore::FloatRect *this, const WebCore::FloatRect *a2)
{
  float v2;
  float v3;

  if (*(float *)this > *(float *)a2)
    return 0;
  if ((float)(*(float *)this + *((float *)this + 2)) < (float)(*(float *)a2 + *((float *)a2 + 2)))
    return 0;
  v2 = *((float *)this + 1);
  v3 = *((float *)a2 + 1);
  return v2 <= v3 && (float)(v2 + *((float *)this + 3)) >= (float)(v3 + *((float *)a2 + 3));
}

uint64_t WebCore::FloatRect::edgeInclusiveIntersect(float32x2_t *this, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  int8x8_t v6;

  v2 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a2, *this), (int8x8_t)*a2, (int8x8_t)*this);
  v3 = vadd_f32(*this, this[1]);
  v4 = vadd_f32(*a2, a2[1]);
  v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v4), (int8x8_t)v4, (int8x8_t)v3);
  v6 = vmvn_s8((int8x8_t)vcgt_f32(v2, v5));
  if ((v6.i8[0] & v6.i8[4] & 1) == 0)
  {
    v5 = 0;
    v2 = 0;
  }
  *this = v2;
  this[1] = vsub_f32(v5, v2);
  return v6.i8[0] & v6.i8[4] & 1;
}

double WebCore::FloatRect::uniteIfNonZero(float32x2_t *this, float32x2_t *a2)
{
  __int128 v2;
  float v3;
  float v4;
  float32x2_t v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;

  LODWORD(v2) = a2[1].i32[0];
  if (*(float *)&v2 != 0.0)
  {
    v4 = a2[1].f32[0];
    if (*(float *)&v2 < 0.0)
      v4 = -*(float *)&v2;
    if (v4 >= 0.00000011921)
      goto LABEL_11;
  }
  v3 = a2[1].f32[1];
  if (v3 != 0.0)
  {
    if (v3 < 0.0)
      v3 = -v3;
    if (v3 >= 0.00000011921)
    {
LABEL_11:
      v5.i32[0] = this[1].i32[0];
      if (v5.f32[0] != 0.0)
      {
        v7 = this[1].f32[0];
        if (v5.f32[0] < 0.0)
          v7 = -v5.f32[0];
        if (v7 >= 0.00000011921)
        {
          v6 = this[1].f32[1];
LABEL_21:
          v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*this, *a2), (int8x8_t)*a2, (int8x8_t)*this);
          v5.f32[1] = v6;
          v10 = vadd_f32(v5, *this);
          DWORD1(v2) = a2[1].i32[1];
          v11 = vadd_f32(*(float32x2_t *)&v2, *a2);
          *this = v9;
          *(float32x2_t *)&v2 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v11, v10), (int8x8_t)v11, (int8x8_t)v10), v9);
          this[1] = (float32x2_t)v2;
          return *(double *)&v2;
        }
      }
      v6 = this[1].f32[1];
      if (v6 != 0.0)
      {
        v8 = this[1].f32[1];
        if (v6 < 0.0)
          v8 = -v6;
        if (v8 >= 0.00000011921)
          goto LABEL_21;
      }
      v2 = *(_OWORD *)a2->f32;
      *(_OWORD *)this->f32 = *(_OWORD *)a2->f32;
    }
  }
  return *(double *)&v2;
}

float WebCore::encloseRectToDevicePixels(WebCore *this, const WebCore::FloatRect *a2, float a3)
{
  return floorf(*(float *)this * a3) / a3;
}

uint64_t WebCore::roundedIntRect(WebCore *this, const WebCore::FloatRect *a2)
{
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  unint64_t v7;

  v2 = roundf(*(float *)this);
  v3 = 0x7FFFFFFFLL;
  v4 = 0x80000000;
  if (v2 > -2147500000.0)
    v4 = (int)v2;
  if (v2 < 2147500000.0)
    v3 = v4;
  v5 = roundf(*((float *)this + 1));
  v6 = 0x7FFFFFFF00000000;
  v7 = 0x8000000000000000;
  if (v5 > -2147500000.0)
    v7 = (unint64_t)(int)v5 << 32;
  if (v5 < 2147500000.0)
    v6 = v7;
  return v6 | v3;
}

WTF::StringImpl *WebCore::FloatRect::toJSONObject@<X0>(WebCore::FloatRect *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  _DWORD *v22;
  WTF::StringImpl *result;
  _DWORD **v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD **v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  _BYTE v33[16];
  char v34;

  WTF::JSONImpl::Object::create(this);
  v4 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::FloatPoint::toJSONObject(this, (uint64_t *)&v30);
  v5 = (uint64_t)v30;
  v30 = 0;
  v31 = (_DWORD *)v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v32, (const WTF::StringImpl *)&v31, (uint64_t)v33);
  if (v34)
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v24 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v32);
      v8 = *(unsigned int *)(v4 + 36);
      v25 = *(_QWORD *)(v4 + 24);
      v26 = *v24;
      if (*v24)
        *v26 += 2;
      *(_QWORD *)(v25 + 8 * v8) = v26;
    }
    else
    {
      v9 = *v7;
      v10 = v32;
      if (v32)
        *(_DWORD *)v32 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v31;
  v31 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v30;
  v30 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  v13 = v32;
  v32 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::FloatSize::toJSONObject((WebCore::FloatRect *)((char *)this + 8), (uint64_t *)&v30);
  v15 = (uint64_t)v30;
  v30 = 0;
  v31 = (_DWORD *)v15;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v32, (const WTF::StringImpl *)&v31, (uint64_t)v33);
  if (v34)
  {
    v17 = (uint64_t *)(v14 + 24);
    v18 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v18 == *(_DWORD *)(v14 + 32))
    {
      v27 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v18 + 1, (unint64_t)&v32);
      v18 = *(unsigned int *)(v14 + 36);
      v28 = *(_QWORD *)(v14 + 24);
      v29 = *v27;
      if (*v27)
        *v29 += 2;
      *(_QWORD *)(v28 + 8 * v18) = v29;
    }
    else
    {
      v19 = *v17;
      v20 = v32;
      if (v32)
        *(_DWORD *)v32 += 2;
      *(_QWORD *)(v19 + 8 * v18) = v20;
    }
    *(_DWORD *)(v14 + 36) = v18 + 1;
  }
  v21 = v31;
  v31 = 0;
  if (v21)
  {
    if (*v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v21;
  }
  v22 = v30;
  v30 = 0;
  if (v22)
  {
    if (*v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v22;
  }
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::FloatSize::toJSONObject@<X0>(WebCore::FloatSize *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::JSONImpl::Value *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  _BYTE v30[16];
  char v31;

  WTF::JSONImpl::Object::create(this);
  v4 = *a2;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, *(float *)this);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v28, (const WTF::StringImpl *)&v29, (uint64_t)v30);
  if (v31)
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v22 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v28);
      v8 = *(unsigned int *)(v4 + 36);
      v23 = *(_QWORD *)(v4 + 24);
      v24 = *v22;
      if (*v22)
        *v24 += 2;
      *(_QWORD *)(v23 + 8 * v8) = v24;
    }
    else
    {
      v9 = *v7;
      v10 = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v29;
  v29 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *a2;
  v14 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v14, *((float *)this + 1));
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v13 + 16), &v28, (const WTF::StringImpl *)&v29, (uint64_t)v30);
  if (v31)
  {
    v16 = (uint64_t *)(v13 + 24);
    v17 = *(unsigned int *)(v13 + 36);
    if ((_DWORD)v17 == *(_DWORD *)(v13 + 32))
    {
      v25 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v28);
      v17 = *(unsigned int *)(v13 + 36);
      v26 = *(_QWORD *)(v13 + 24);
      v27 = *v25;
      if (*v25)
        *v27 += 2;
      *(_QWORD *)(v26 + 8 * v17) = v27;
    }
    else
    {
      v18 = *v16;
      v19 = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
    }
    *(_DWORD *)(v13 + 36) = v17 + 1;
  }
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v20;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::JSONImpl::Value *WebCore::FloatRect::toJSONString(WebCore::FloatRect *this)
{
  WTF::JSONImpl::Value *result;
  WTF::JSONImpl::Value *v2;

  WebCore::FloatRect::toJSONObject(this, (uint64_t *)&v2);
  WTF::JSONImpl::Value::toJSONString(v2);
  result = v2;
  v2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

float32x2_t WebCore::FloatRoundedRect::FloatRoundedRect(uint64_t a1, uint64_t a2)
{
  float32x4_t v2;
  float32x2_t result;

  v2 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  *(float32x4_t *)a1 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)a2), v2);
  *(float32x2_t *)(a1 + 16) = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a2 + 16)), *(float32x2_t *)v2.f32);
  *(float32x2_t *)(a1 + 24) = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a2 + 24)), *(float32x2_t *)v2.f32);
  *(float32x2_t *)(a1 + 32) = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a2 + 32)), *(float32x2_t *)v2.f32);
  result = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a2 + 40)), *(float32x2_t *)v2.f32);
  *(float32x2_t *)(a1 + 40) = result;
  return result;
}

__n128 WebCore::FloatRoundedRect::FloatRoundedRect(WebCore::FloatRoundedRect *this, const WebCore::FloatRect *a2, const WebCore::FloatRoundedRect::Radii *a3)
{
  __n128 result;
  __int128 v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  result = *(__n128 *)a3;
  v4 = *((_OWORD *)a3 + 1);
  *((_OWORD *)this + 1) = *(_OWORD *)a3;
  *((_OWORD *)this + 2) = v4;
  return result;
}

{
  __n128 result;
  __int128 v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  result = *(__n128 *)a3;
  v4 = *((_OWORD *)a3 + 1);
  *((_OWORD *)this + 1) = *(_OWORD *)a3;
  *((_OWORD *)this + 2) = v4;
  return result;
}

BOOL WebCore::FloatRoundedRect::Radii::hasEvenCorners(WebCore::FloatRoundedRect::Radii *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  BOOL v7;
  float v8;
  float v10;
  BOOL v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v20;
  float v21;
  float v23;
  BOOL v25;
  float v26;
  float v28;
  float v29;
  float v30;
  BOOL v32;
  float v33;
  float v35;
  BOOL v37;
  float v38;
  float v40;
  float v41;
  float v42;
  float v43;
  BOOL v45;
  float v46;
  float v48;
  BOOL v49;
  float v50;
  float v52;
  float v53;
  float v54;
  BOOL v56;
  float v57;
  float v59;
  BOOL v60;
  float v61;
  float v63;
  float v64;
  BOOL v66;
  float v67;
  float v69;

  v1 = *(float *)this;
  v2 = *((float *)this + 2);
  if (*(float *)this != v2)
  {
    v3 = vabds_f32(v1, v2);
    v4 = fabsf(v1);
    if (v4 < 1.0 && (float)(v4 * 3.4028e38) < v3)
      return 0;
    v7 = (float)(v4 * 1.1755e-38) <= v3 || v4 <= 1.0;
    v8 = v3 / v4;
    if (v7 && v8 > 0.00000011921)
      return 0;
    v10 = fabsf(v2);
    if (v10 < 1.0 && (float)(v10 * 3.4028e38) < v3)
      return 0;
    v12 = (float)(v10 * 1.1755e-38) <= v3 || v10 <= 1.0;
    v13 = v3 / v10;
    if (v12 && v13 > 0.00000011921)
      return 0;
  }
  v15 = *((float *)this + 1);
  v16 = *((float *)this + 3);
  if (v15 != v16)
  {
    v17 = vabds_f32(v15, v16);
    v18 = fabsf(v15);
    if (v18 < 1.0 && (float)(v18 * 3.4028e38) < v17)
      return 0;
    v20 = (float)(v18 * 1.1755e-38) <= v17 || v18 <= 1.0;
    v21 = v17 / v18;
    if (v20 && v21 > 0.00000011921)
      return 0;
    v23 = fabsf(v16);
    if (v23 < 1.0 && (float)(v23 * 3.4028e38) < v17)
      return 0;
    v25 = (float)(v23 * 1.1755e-38) <= v17 || v23 <= 1.0;
    v26 = v17 / v23;
    if (v25 && v26 > 0.00000011921)
      return 0;
  }
  v28 = *((float *)this + 4);
  if (v1 != v28)
  {
    v29 = vabds_f32(v1, v28);
    v30 = fabsf(v1);
    if (v30 < 1.0 && (float)(v30 * 3.4028e38) < v29)
      return 0;
    v32 = (float)(v30 * 1.1755e-38) <= v29 || v30 <= 1.0;
    v33 = v29 / v30;
    if (v32 && v33 > 0.00000011921)
      return 0;
    v35 = fabsf(v28);
    if (v35 < 1.0 && (float)(v35 * 3.4028e38) < v29)
      return 0;
    v37 = (float)(v35 * 1.1755e-38) <= v29 || v35 <= 1.0;
    v38 = v29 / v35;
    if (v37 && v38 > 0.00000011921)
      return 0;
  }
  v40 = *((float *)this + 5);
  if (v15 != v40)
  {
    v53 = vabds_f32(v15, v40);
    v54 = fabsf(v15);
    if (v54 < 1.0 && (float)(v54 * 3.4028e38) < v53)
      return 0;
    v56 = (float)(v54 * 1.1755e-38) <= v53 || v54 <= 1.0;
    v57 = v53 / v54;
    if (v56 && v57 > 0.00000011921)
      return 0;
    v59 = fabsf(v40);
    if (v59 < 1.0 && (float)(v59 * 3.4028e38) < v53)
      return 0;
    v60 = (float)(v59 * 1.1755e-38) <= v53 || v59 <= 1.0;
    v61 = v53 / v59;
    if (v60 && v61 > 0.00000011921)
      return 0;
  }
  v41 = *((float *)this + 6);
  if (v1 != v41)
  {
    v42 = vabds_f32(v1, v41);
    v43 = fabsf(v1);
    if (v43 < 1.0 && (float)(v43 * 3.4028e38) < v42)
      return 0;
    v45 = (float)(v43 * 1.1755e-38) <= v42 || v43 <= 1.0;
    v46 = v42 / v43;
    if (v45 && v46 > 0.00000011921)
      return 0;
    v48 = fabsf(v41);
    if (v48 < 1.0 && (float)(v48 * 3.4028e38) < v42)
      return 0;
    v49 = (float)(v48 * 1.1755e-38) <= v42 || v48 <= 1.0;
    v50 = v42 / v48;
    if (v49 && v50 > 0.00000011921)
      return 0;
  }
  v52 = *((float *)this + 7);
  if (v15 == v52)
    return 1;
  v63 = vabds_f32(v15, v52);
  v64 = fabsf(v15);
  if (v64 < 1.0 && (float)(v64 * 3.4028e38) < v63)
    return 0;
  v66 = (float)(v64 * 1.1755e-38) <= v63 || v64 <= 1.0;
  v67 = v63 / v64;
  if (v66 && v67 > 0.00000011921)
    return 0;
  v69 = fabsf(v52);
  if (v69 < 1.0 && (float)(v69 * 3.4028e38) < v63)
    return 0;
  if (v69 > 1.0 && (float)(v69 * 1.1755e-38) > v63)
    return 1;
  return (float)(v63 / v69) <= 0.00000011921;
}

BOOL WebCore::FloatRoundedRect::Radii::isUniformCornerRadius(WebCore::FloatRoundedRect::Radii *this)
{
  _BOOL8 result;

  result = WTF::areEssentiallyEqual<float>(*(float *)this, *((float *)this + 1), 0.00000011921);
  if ((_DWORD)result)
    return WebCore::FloatRoundedRect::Radii::hasEvenCorners(this);
  return result;
}

float WebCore::FloatRoundedRect::Radii::expand(WebCore::FloatRoundedRect::Radii *this, float a2, float a3, float a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;
  float v11;

  if (*(float *)this > 0.0)
  {
    v5 = *((float *)this + 1);
    if (v5 > 0.0)
    {
      *(float *)this = fmaxf(*(float *)this + a4, 0.0);
      *((float *)this + 1) = fmaxf(v5 + a2, 0.0);
    }
  }
  v6 = *((float *)this + 2);
  if (v6 > 0.0)
  {
    v7 = *((float *)this + 3);
    if (v7 > 0.0)
    {
      *((float *)this + 2) = fmaxf(v6 + a5, 0.0);
      *((float *)this + 3) = fmaxf(v7 + a2, 0.0);
    }
  }
  v8 = *((float *)this + 4);
  if (v8 > 0.0)
  {
    v9 = *((float *)this + 5);
    if (v9 > 0.0)
    {
      *((float *)this + 4) = fmaxf(v8 + a4, 0.0);
      *((float *)this + 5) = fmaxf(v9 + a3, 0.0);
    }
  }
  result = *((float *)this + 6);
  if (result > 0.0)
  {
    v11 = *((float *)this + 7);
    if (v11 > 0.0)
    {
      result = fmaxf(result + a5, 0.0);
      *((float *)this + 6) = result;
      *((float *)this + 7) = fmaxf(v11 + a3, 0.0);
    }
  }
  return result;
}

uint64_t WebCore::FloatRoundedRect::xInterceptsAtY(WebCore::FloatRoundedRect *this, float a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v31;
  float v32;

  v4 = *((float *)this + 1);
  if (v4 > a2)
    return 0;
  v5 = v4 + *((float *)this + 3);
  if (v5 < a2)
    return 0;
  v7 = *((float *)this + 4);
  if (v7 == 0.0)
    goto LABEL_5;
  v17 = *((float *)this + 4);
  if (v7 < 0.0)
    v17 = -v7;
  if (v17 < 0.00000011921)
  {
LABEL_5:
    v8 = *((float *)this + 5);
    if (v8 == 0.0)
      goto LABEL_40;
    v18 = *((float *)this + 5);
    if (v8 < 0.0)
      v18 = -v8;
    if (v18 < 0.00000011921)
    {
LABEL_40:
      v9 = *((float *)this + 6);
      if (v9 == 0.0)
        goto LABEL_74;
      if (v9 < 0.0)
        v9 = -v9;
      if (v9 < 0.00000011921)
      {
LABEL_74:
        v10 = *((float *)this + 7);
        if (v10 == 0.0)
          goto LABEL_75;
        if (v10 < 0.0)
          v10 = -v10;
        if (v10 < 0.00000011921)
        {
LABEL_75:
          v11 = *((float *)this + 8);
          if (v11 == 0.0)
            goto LABEL_76;
          v19 = *((float *)this + 8);
          if (v11 < 0.0)
            v19 = -v11;
          if (v19 < 0.00000011921)
          {
LABEL_76:
            v12 = *((float *)this + 9);
            if (v12 == 0.0)
              goto LABEL_77;
            v20 = *((float *)this + 9);
            if (v12 < 0.0)
              v20 = -v12;
            if (v20 < 0.00000011921)
            {
LABEL_77:
              v13 = *((float *)this + 10);
              if (v13 == 0.0)
                goto LABEL_11;
              if (v13 < 0.0)
                v13 = -v13;
              if (v13 < 0.00000011921)
              {
LABEL_11:
                v14 = *((float *)this + 11);
                if (v14 == 0.0)
                {
                  v15 = *(float *)this;
                }
                else
                {
                  if (v14 < 0.0)
                    v14 = -v14;
                  v15 = *(float *)this;
                  if (v14 >= 0.00000011921)
                    goto LABEL_42;
                }
                *a3 = v15;
                v16 = *(float *)this + *((float *)this + 2);
                goto LABEL_67;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v8 = *((float *)this + 5);
  }
  v15 = *(float *)this;
  v11 = *((float *)this + 8);
  v12 = *((float *)this + 9);
LABEL_42:
  if (v4 > a2 || v7 <= 0.0 || v8 <= 0.0 || (v21 = v4 + v8, v21 <= a2))
  {
    if (v11 > 0.0 && v12 > 0.0)
    {
      v22 = v5 - v12;
      if (v22 <= a2 && (float)(v12 + v22) >= a2)
        v15 = (float)(v15 + v11)
            - (float)(v11 * sqrtf(1.0 - (float)((float)((float)(a2 - v22) * (float)(a2 - v22)) / (float)(v12 * v12))));
    }
  }
  else
  {
    v15 = (float)(v7 + v15)
        - (float)(v7 * sqrtf(1.0 - (float)((float)((float)(v21 - a2) * (float)(v21 - a2)) / (float)(v8 * v8))));
  }
  *a3 = v15;
  v24 = *((float *)this + 1);
  v16 = *(float *)this + *((float *)this + 2);
  v25 = *((float *)this + 6);
  v26 = *((float *)this + 10);
  v27 = *((float *)this + 11);
  if (v25 > 0.0 && (v28 = *((float *)this + 7), v28 > 0.0) && v24 <= a2 && (float)(v24 + v28) >= a2)
  {
    v31 = v16 - v25;
    v32 = v25
        * sqrtf(1.0- (float)((float)((float)((float)(v24 + v28) - a2) * (float)((float)(v24 + v28) - a2)) / (float)(v28 * v28)));
  }
  else
  {
    if (v26 <= 0.0 || v27 <= 0.0)
      goto LABEL_67;
    v29 = (float)(v24 + *((float *)this + 3)) - v27;
    if (v29 > a2 || (float)(v27 + v29) < a2)
      goto LABEL_67;
    v31 = v16 - v26;
    v32 = v26 * sqrtf(1.0 - (float)((float)((float)(a2 - v29) * (float)(a2 - v29)) / (float)(v27 * v27)));
  }
  v16 = v31 + v32;
LABEL_67:
  *a4 = v16;
  return 1;
}

float *WebCore::FloatRoundedRect::adjustRadii(float *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v1 = this[4];
  v2 = this[5];
  v4 = this[6];
  v3 = this[7];
  v5 = v1 + v4;
  v7 = this[8];
  v6 = this[9];
  v9 = this[10];
  v8 = this[11];
  if ((float)(v1 + v4) < (float)(v7 + v9))
    v5 = v7 + v9;
  v10 = v2 + v6;
  if ((float)(v2 + v6) < (float)(v3 + v8))
    v10 = v3 + v8;
  if (v5 <= 0.0 || v10 <= 0.0)
  {
    v13 = v1 * 0.0;
    this[4] = v13;
    this[5] = v2 * 0.0;
    if (v13 == 0.0 || (float)(v2 * 0.0) == 0.0)
      *((_QWORD *)this + 2) = 0;
    v14 = v4 * 0.0;
    v15 = v3 * 0.0;
    this[6] = v14;
    this[7] = v15;
    if (v14 == 0.0 || v15 == 0.0)
      *((_QWORD *)this + 3) = 0;
    v16 = v7 * 0.0;
    v17 = v6 * 0.0;
    this[8] = v16;
    this[9] = v17;
    if (v16 == 0.0 || v17 == 0.0)
      *((_QWORD *)this + 4) = 0;
    v18 = v9 * 0.0;
    v19 = v8 * 0.0;
    goto LABEL_21;
  }
  v11 = this[2] / v5;
  v12 = this[3] / v10;
  if (v11 >= v12)
    v11 = v12;
  if (v11 != 1.0)
  {
    this[4] = v1 * v11;
    this[5] = v2 * v11;
    if ((float)(v1 * v11) == 0.0 || (float)(v2 * v11) == 0.0)
      *((_QWORD *)this + 2) = 0;
    v20 = v4 * v11;
    v21 = v3 * v11;
    this[6] = v20;
    this[7] = v21;
    if (v20 == 0.0 || v21 == 0.0)
      *((_QWORD *)this + 3) = 0;
    v22 = v7 * v11;
    v23 = v6 * v11;
    this[8] = v22;
    this[9] = v23;
    if (v22 == 0.0 || v23 == 0.0)
      *((_QWORD *)this + 4) = 0;
    v18 = v9 * v11;
    v19 = v8 * v11;
LABEL_21:
    this[10] = v18;
    this[11] = v19;
    if (v18 == 0.0 || v19 == 0.0)
      *((_QWORD *)this + 5) = 0;
  }
  return this;
}

_DWORD **WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()(_DWORD **result, unint64_t a2, unint64_t a3, float a4, float a5, double a6)
{
  int v6;
  int v8;
  _DWORD **v9;
  float v10;
  double v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  double v19;
  __double2 v20;
  double v21;
  int v22;
  int v23;
  double v24;
  BOOL v25;
  signed int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  WTF *v54;

  v50 = a3;
  v8 = a2;
  v9 = result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  v11 = v10 * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 0x7FFFFFFF;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = 0x80000000;
  }
  else
  {
    v12 = (int)v11;
  }
  v13 = (((int)(v12 - (v6 & 0xFFFFFFC0) + 32) >> 6) + v12 / 64 + (**result >> 1)) / **result;
  if (v13 >= 0x14)
    v14 = 20;
  else
    v14 = v13;
  if (v14)
  {
    v15 = 0;
    v16 = HIDWORD(a3);
    v17 = a4;
    v48 = (HIDWORD(a3) >> 31) + 0x7FFFFFFF;
    v49 = (a3 >> 31) + 0x7FFFFFFF;
    v18 = HIDWORD(a2);
    v19 = a5;
    do
    {
      v20 = __sincos_stret((a6 + 1.57079633 - a6) * (double)++v15 / (double)(v14 + 1) + a6);
      v21 = v20.__cosval * v17 * 64.0;
      v22 = (int)v21;
      v23 = 0x80000000;
      if (v21 <= -2147483650.0)
        v22 = 0x80000000;
      if (v21 >= 2147483650.0)
        v22 = 0x7FFFFFFF;
      v24 = v20.__sinval * v19 * 64.0;
      if (v24 >= 2147483650.0)
      {
        v23 = 0x7FFFFFFF;
      }
      else if (v24 > -2147483650.0)
      {
        v23 = (int)v24;
      }
      v25 = __OFADD__(v50, v22);
      v26 = v50 + v22;
      if (v25)
        v26 = v49;
      v27 = v16 + v23;
      if (__OFADD__((_DWORD)v16, v23))
        v27 = v48;
      if (v26 >= v8)
        v28 = v8;
      else
        v28 = v26;
      if (v27 >= (int)v18)
        v29 = v18;
      else
        v29 = v27;
      if (v8 <= v26)
        v30 = v26;
      else
        v30 = v8;
      if ((int)v18 <= v27)
        v31 = v27;
      else
        v31 = v18;
      v32 = v30 - v28;
      if (__OFSUB__(v30, v28))
        v32 = (v30 >> 31) + 0x7FFFFFFF;
      v25 = __OFSUB__(v31, v29);
      v33 = v31 - v29;
      v34 = (v31 >> 31) + 0x7FFFFFFF;
      if (v25)
        v33 = v34;
      v35 = (v28 >> 6);
      if (v32)
      {
        v25 = __OFADD__(v28, v32);
        v36 = v28 + v32;
        if (v25)
          v36 = (v28 >> 31) + 0x7FFFFFFF;
        if (v36 > 2147483583)
        {
          v37 = 0x1FFFFFF;
        }
        else if (v36 < 0)
        {
          v37 = -(-v36 >> 6);
        }
        else
        {
          v37 = (v36 + 63) >> 6;
        }
      }
      else
      {
        v37 = v28 >> 6;
      }
      v38 = (v29 >> 6);
      v25 = __OFADD__(v29, v33);
      v39 = v29 + v33;
      v40 = (v29 >> 31) + 0x7FFFFFFF;
      if (!v25)
        v40 = v39;
      v41 = -(-v40 >> 6);
      if (v40 >= 0)
        v41 = (v40 + 63) >> 6;
      if (v40 <= 2147483583)
        v42 = v41;
      else
        v42 = 0x1FFFFFF;
      if (!v33)
        v42 = v38;
      v43 = (WTF *)v9[2];
      v51 = v35 | (v38 << 32);
      v52 = v37 - v35;
      v53 = v42 - v38;
      v54 = 0;
      result = (_DWORD **)WebCore::Region::subtract(v43, (const WebCore::Region *)&v51);
      v45 = v54;
      v54 = 0;
      if (v45)
      {
        v46 = (WTF *)*((_QWORD *)v45 + 18);
        if ((WTF *)((char *)v45 + 160) != v46 && v46)
        {
          *((_QWORD *)v45 + 18) = 0;
          *((_DWORD *)v45 + 38) = 0;
          WTF::fastFree(v46, v44);
        }
        v47 = *(WTF **)v45;
        if ((WTF *)((char *)v45 + 16) != *(WTF **)v45)
        {
          if (v47)
          {
            *(_QWORD *)v45 = 0;
            *((_DWORD *)v45 + 2) = 0;
            WTF::fastFree(v47, v44);
          }
        }
        result = (_DWORD **)WTF::fastFree(v45, v44);
      }
    }
    while (v14 != v15);
  }
  return result;
}

int8x8_t WebCore::FloatSize::constrainedBetween(float32x2_t *this, float32x2_t *a2, float32x2_t *a3)
{
  float32x2_t v3;

  v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a3, *this), (int8x8_t)*this, (int8x8_t)*a3);
  return vbsl_s8((int8x8_t)vcgt_f32(v3, *a2), (int8x8_t)v3, (int8x8_t)*a2);
}

float WebCore::FloatSize::narrowPrecision(WebCore::FloatSize *this, double a2, double a3)
{
  return a2;
}

WTF::JSONImpl::Value *WebCore::FloatSize::toJSONString(WebCore::FloatSize *this)
{
  WTF::JSONImpl::Value *result;
  WTF::JSONImpl::Value *v2;

  WebCore::FloatSize::toJSONObject(this, (uint64_t *)&v2);
  WTF::JSONImpl::Value::toJSONString(v2);
  result = v2;
  v2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

void WebCore::Font::create(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  const void *v22;
  int v23;
  _DWORD *v24;
  int v25;
  char v26;
  char v27;
  char v28;

  v16 = WTF::fastMalloc((WTF *)0x160);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = 0;
  *(_DWORD *)(v16 + 16) = 1000;
  _Q0 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v16 + 20) = _Q0;
  *(int32x4_t *)(v16 + 36) = _Q0;
  *(_QWORD *)(v16 + 52) = _Q0.i64[0];
  *(_QWORD *)(v16 + 68) = 0;
  *(_QWORD *)(v16 + 60) = 0;
  *(_DWORD *)(v16 + 76) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v16 + 80) = _Q0.i64[0];
  v22 = *(const void **)a1;
  *(_QWORD *)(v16 + 88) = *(_QWORD *)a1;
  if (v22)
    CFRetain(v22);
  v23 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v16 + 99) = *(_DWORD *)(a1 + 11);
  *(_DWORD *)(v16 + 96) = v23;
  v24 = *(_DWORD **)(a1 + 16);
  if (v24)
    ++*v24;
  *(_QWORD *)(v16 + 104) = v24;
  v25 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v16 + 115) = *(_DWORD *)(a1 + 27);
  *(_DWORD *)(v16 + 112) = v25;
  *(_QWORD *)(v16 + 120) = 0;
  *(_BYTE *)(v16 + 128) = 0;
  *(_QWORD *)(v16 + 200) = 0;
  *(_QWORD *)(v16 + 208) = 0;
  *(_QWORD *)(v16 + 216) = 0;
  *(_QWORD *)(v16 + 224) = 0x8000000000000000;
  *(_QWORD *)(v16 + 232) = 0;
  *(_QWORD *)(v16 + 240) = a6;
  *(_BYTE *)(v16 + 248) = a7;
  if (a3)
    v26 = 2;
  else
    v26 = 0;
  if (a4)
    v27 = 4;
  else
    v27 = 0;
  if (a5)
    v28 = 8;
  else
    v28 = 0;
  *(_BYTE *)(v16 + 256) = v26 | a2 | v27 | v28 | *(_BYTE *)(v16 + 256) & 0xF0;
  *(_QWORD *)(v16 + 264) = 0;
  *(_DWORD *)(v16 + 280) = 0;
  *(_BYTE *)(v16 + 288) = 0;
  *(_BYTE *)(v16 + 296) = 0;
  *(_BYTE *)(v16 + 304) = 0;
  *(_BYTE *)(v16 + 320) = 0;
  *(_DWORD *)(v16 + 328) = 33686018;
  *(_DWORD *)(v16 + 340) = 0;
  *(_QWORD *)(v16 + 332) = 0;
  *(_BYTE *)(v16 + 344) = *(_BYTE *)(v16 + 344) & 0x80 | 0x20;
  WebCore::Font::platformInit((WebCore::Font *)v16);
  WebCore::Font::platformGlyphInit((WebCore::Font *)v16);
  WebCore::Font::platformCharWidthInit((WebCore::Font *)v16);
  *a8 = v16;
}

WebCore::Font *WebCore::Font::Font(WebCore::Font *this, uint64_t a2, char a3, int a4, int a5, int a6, uint64_t a7, char a8)
{
  const void *v21;
  int v22;
  _DWORD *v23;
  int v24;
  char v25;
  char v26;
  char v27;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1000;
  _Q0 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)((char *)this + 20) = _Q0;
  *(int32x4_t *)((char *)this + 36) = _Q0;
  *(_QWORD *)((char *)this + 52) = _Q0.i64[0];
  *(_QWORD *)((char *)this + 68) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *((_DWORD *)this + 19) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *((_QWORD *)this + 10) = _Q0.i64[0];
  v21 = *(const void **)a2;
  *((_QWORD *)this + 11) = *(_QWORD *)a2;
  if (v21)
    CFRetain(v21);
  v22 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)((char *)this + 99) = *(_DWORD *)(a2 + 11);
  *((_DWORD *)this + 24) = v22;
  v23 = *(_DWORD **)(a2 + 16);
  if (v23)
    ++*v23;
  *((_QWORD *)this + 13) = v23;
  v24 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)((char *)this + 115) = *(_DWORD *)(a2 + 27);
  *((_DWORD *)this + 28) = v24;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0x8000000000000000;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = a7;
  *((_BYTE *)this + 248) = a8;
  if (a4)
    v25 = 2;
  else
    v25 = 0;
  if (a5)
    v26 = 4;
  else
    v26 = 0;
  if (a6)
    v27 = 8;
  else
    v27 = 0;
  *((_BYTE *)this + 256) = v25 | a3 | v26 | v27 | *((_BYTE *)this + 256) & 0xF0;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_BYTE *)this + 288) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_DWORD *)this + 82) = 33686018;
  *((_DWORD *)this + 85) = 0;
  *(_QWORD *)((char *)this + 332) = 0;
  *((_BYTE *)this + 344) = *((_BYTE *)this + 344) & 0x80 | 0x20;
  WebCore::Font::platformInit(this);
  WebCore::Font::platformGlyphInit(this);
  WebCore::Font::platformCharWidthInit(this);
  return this;
}

{
  const void *v21;
  int v22;
  _DWORD *v23;
  int v24;
  char v25;
  char v26;
  char v27;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1000;
  _Q0 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)((char *)this + 20) = _Q0;
  *(int32x4_t *)((char *)this + 36) = _Q0;
  *(_QWORD *)((char *)this + 52) = _Q0.i64[0];
  *(_QWORD *)((char *)this + 68) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *((_DWORD *)this + 19) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *((_QWORD *)this + 10) = _Q0.i64[0];
  v21 = *(const void **)a2;
  *((_QWORD *)this + 11) = *(_QWORD *)a2;
  if (v21)
    CFRetain(v21);
  v22 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)((char *)this + 99) = *(_DWORD *)(a2 + 11);
  *((_DWORD *)this + 24) = v22;
  v23 = *(_DWORD **)(a2 + 16);
  if (v23)
    ++*v23;
  *((_QWORD *)this + 13) = v23;
  v24 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)((char *)this + 115) = *(_DWORD *)(a2 + 27);
  *((_DWORD *)this + 28) = v24;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0x8000000000000000;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = a7;
  *((_BYTE *)this + 248) = a8;
  if (a4)
    v25 = 2;
  else
    v25 = 0;
  if (a5)
    v26 = 4;
  else
    v26 = 0;
  if (a6)
    v27 = 8;
  else
    v27 = 0;
  *((_BYTE *)this + 256) = v25 | a3 | v26 | v27 | *((_BYTE *)this + 256) & 0xF0;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_BYTE *)this + 288) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_DWORD *)this + 82) = 33686018;
  *((_DWORD *)this + 85) = 0;
  *(_QWORD *)((char *)this + 332) = 0;
  *((_BYTE *)this + 344) = *((_BYTE *)this + 344) & 0x80 | 0x20;
  WebCore::Font::platformInit(this);
  WebCore::Font::platformGlyphInit(this);
  WebCore::Font::platformCharWidthInit(this);
  return this;
}

void WebCore::Font::create(WebCore::CachedFont **a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  WebCore::CachedFont *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  float v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  CFTypeRef v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  void *v31;
  const void *v32;
  __int128 v33;
  WTF *v34[2];
  CFTypeRef cf;
  _DWORD v36[2];
  _DWORD *v37;
  _DWORD v38[2];
  WTF::StringImpl *v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  _DWORD *v47;
  __int16 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  float v54;
  int v55;
  __int16 v56;
  char v57;
  uint64_t *v58;
  char v59;

  v11 = *a1;
  v39[0] = 0;
  WebCore::CachedFont::createCustomFontData(v11, (WebCore::SharedBuffer *)v39, (const WTF::String *)&v59, (uint64_t *)&v58);
  v13 = v39[0];
  v39[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v45 = 256;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  v46 = 0;
  v14 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v14 += 2;
  v47 = v14;
  v48 = 0;
  v49 = 2143289344;
  v50 = 0;
  v51 = 0;
  v52 = 26216000;
  v53 = 257;
  v15 = 3.4028e38;
  v55 = 57344;
  v57 = 0;
  v56 = 0;
  if (a6 >= 3.4028e38 || (v15 = -3.4028e38, a6 <= -3.4028e38))
    a6 = v15;
  v54 = a6;
  v33 = 0u;
  *(_OWORD *)v34 = 0u;
  WebCore::FontCustomPlatformData::fontPlatformData((uint64_t)v58, (uint64_t)v39, a3, a4, (__int16 *)&v33, (float *)&cf);
  v17 = v34[1];
  v34[1] = 0;
  if (v17)
    WTF::RefCounted<WebCore::FontCreationContextRareData>::deref((uint64_t)v17, v16);
  v18 = WTF::fastMalloc((WTF *)0x160);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = 0;
  *(_DWORD *)(v18 + 16) = 1000;
  _Q0 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v18 + 20) = _Q0;
  *(int32x4_t *)(v18 + 36) = _Q0;
  *(_QWORD *)(v18 + 52) = _Q0.i64[0];
  *(_QWORD *)(v18 + 68) = 0;
  *(_QWORD *)(v18 + 60) = 0;
  *(_DWORD *)(v18 + 76) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v18 + 80) = _Q0.i64[0];
  v24 = cf;
  *(_QWORD *)(v18 + 88) = cf;
  if (v24)
    CFRetain(v24);
  *(_DWORD *)(v18 + 96) = v36[0];
  *(_DWORD *)(v18 + 99) = *(_DWORD *)((char *)v36 + 3);
  v25 = v37;
  if (v37)
    ++*v37;
  *(_QWORD *)(v18 + 104) = v25;
  *(_DWORD *)(v18 + 112) = v38[0];
  *(_DWORD *)(v18 + 115) = *(_DWORD *)((char *)v38 + 3);
  *(_QWORD *)(v18 + 120) = 0;
  *(_BYTE *)(v18 + 128) = 0;
  *(_QWORD *)(v18 + 200) = 0;
  *(_QWORD *)(v18 + 208) = 0;
  *(_QWORD *)(v18 + 216) = 0;
  *(_QWORD *)(v18 + 224) = 0x8000000000000000;
  *(_QWORD *)(v18 + 232) = 0;
  *(_QWORD *)(v18 + 240) = 0;
  *(_BYTE *)(v18 + 248) = 0;
  *(_BYTE *)(v18 + 256) = *(_BYTE *)(v18 + 256) & 0xF0 | a2;
  *(_QWORD *)(v18 + 264) = 0;
  *(_DWORD *)(v18 + 280) = 0;
  *(_BYTE *)(v18 + 288) = 0;
  *(_BYTE *)(v18 + 296) = 0;
  *(_BYTE *)(v18 + 304) = 0;
  *(_BYTE *)(v18 + 320) = 0;
  *(_DWORD *)(v18 + 328) = 33686018;
  *(_DWORD *)(v18 + 340) = 0;
  *(_QWORD *)(v18 + 332) = 0;
  *(_BYTE *)(v18 + 344) = *(_BYTE *)(v18 + 344) & 0x80 | 0x20;
  WebCore::Font::platformInit((WebCore::Font *)v18);
  WebCore::Font::platformGlyphInit((WebCore::Font *)v18);
  WebCore::Font::platformCharWidthInit((WebCore::Font *)v18);
  *a5 = v18;
  WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)&cf, v26);
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v39, v27);
  v29 = v58;
  v58 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
    {
      v30 = (WTF::StringImpl *)v29[3];
      v29[3] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v28);
        else
          *(_DWORD *)v30 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v29 + 2, v28);
      v32 = (const void *)v29[1];
      v29[1] = 0;
      if (v32)
        CFRelease(v32);
      WTF::fastFree((WTF *)v29, v31);
    }
    else
    {
      --*(_DWORD *)v29;
    }
  }
}

void WebCore::Font::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v14;
  int v15;
  _DWORD *v16;
  int v17;

  v5 = *((_BYTE *)a1 + 16);
  v7 = *a1;
  v6 = a1[1];
  v8 = WTF::fastMalloc((WTF *)0x160);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 1000;
  _Q0 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v8 + 20) = _Q0;
  *(int32x4_t *)(v8 + 36) = _Q0;
  *(_QWORD *)(v8 + 52) = _Q0.i64[0];
  *(_QWORD *)(v8 + 68) = 0;
  *(_QWORD *)(v8 + 60) = 0;
  *(_DWORD *)(v8 + 76) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v8 + 80) = _Q0.i64[0];
  v14 = *(const void **)a2;
  *(_QWORD *)(v8 + 88) = *(_QWORD *)a2;
  if (v14)
    CFRetain(v14);
  v15 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v8 + 99) = *(_DWORD *)(a2 + 11);
  *(_DWORD *)(v8 + 96) = v15;
  v16 = *(_DWORD **)(a2 + 16);
  if (v16)
    ++*v16;
  *(_QWORD *)(v8 + 104) = v16;
  v17 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v8 + 115) = *(_DWORD *)(a2 + 27);
  *(_DWORD *)(v8 + 112) = v17;
  *(_QWORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 200) = 0;
  *(_QWORD *)(v8 + 208) = 0;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 224) = 0x8000000000000000;
  *(_QWORD *)(v8 + 232) = 0;
  *(_QWORD *)(v8 + 240) = v7;
  *(_BYTE *)(v8 + 248) = v6;
  *(_BYTE *)(v8 + 256) = *(_BYTE *)(v8 + 256) & 0xF0 | v5 & 0xF;
  *(_QWORD *)(v8 + 264) = 0;
  *(_DWORD *)(v8 + 280) = 0;
  *(_BYTE *)(v8 + 288) = 0;
  *(_BYTE *)(v8 + 296) = 0;
  *(_BYTE *)(v8 + 304) = 0;
  *(_BYTE *)(v8 + 320) = 0;
  *(_DWORD *)(v8 + 328) = 33686018;
  *(_DWORD *)(v8 + 340) = 0;
  *(_QWORD *)(v8 + 332) = 0;
  *(_BYTE *)(v8 + 344) = *(_BYTE *)(v8 + 344) & 0x80 | 0x20;
  WebCore::Font::platformInit((WebCore::Font *)v8);
  WebCore::Font::platformGlyphInit((WebCore::Font *)v8);
  WebCore::Font::platformCharWidthInit((WebCore::Font *)v8);
  *a3 = v8;
}

uint64_t WebCore::FontInternalAttributes::ensureRenderingResourceIdentifier(WebCore::FontInternalAttributes *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 8))
    return *(_QWORD *)this;
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    result = 142;
    __break(0xC471u);
  }
  else
  {
    result = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    if (!*((_BYTE *)this + 8))
      *((_BYTE *)this + 8) = 1;
    *(_QWORD *)this = result;
  }
  return result;
}

uint64_t WebCore::Font::verticalRightOrientationFont(WebCore::Font *this)
{
  uint64_t v2;
  WebCore::Font::DerivedFonts *v3;
  WTF *v4;
  void *v5;
  uint64_t result;
  const void *v7;
  _DWORD *v8;
  char v9;
  uint64_t v10;
  WTF::StringImpl *v16;
  WebCore::Font *v17;
  const void *v18;
  _BYTE v19[7];
  _DWORD *v20;
  _DWORD v21[2];

  v2 = *((_QWORD *)this + 33);
  if (!v2)
  {
    v2 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_QWORD *)(v2 + 48) = 0;
    v3 = (WebCore::Font::DerivedFonts *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v2;
    if (v3)
    {
      WebCore::Font::DerivedFonts::~DerivedFonts(v3);
      WTF::fastFree(v4, v5);
      v2 = *((_QWORD *)this + 33);
    }
  }
  result = *(_QWORD *)(v2 + 32);
  if (!result)
  {
    v7 = (const void *)*((_QWORD *)this + 11);
    v18 = v7;
    if (v7)
      CFRetain(v7);
    *(_DWORD *)v19 = *((_DWORD *)this + 24);
    *(_DWORD *)&v19[3] = *(_DWORD *)((char *)this + 99);
    v8 = (_DWORD *)*((_QWORD *)this + 13);
    if (v8)
      ++*v8;
    v20 = v8;
    v21[0] = *((_DWORD *)this + 28);
    *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)this + 115);
    v19[4] = 0;
    v9 = *((_BYTE *)this + 256);
    v10 = WTF::fastMalloc((WTF *)0x160);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 16) = 1000;
    _Q0 = vdupq_n_s32(0x7FC00000u);
    *(int32x4_t *)(v10 + 20) = _Q0;
    *(int32x4_t *)(v10 + 36) = _Q0;
    *(_QWORD *)(v10 + 52) = _Q0.i64[0];
    *(_QWORD *)(v10 + 68) = 0;
    *(_QWORD *)(v10 + 60) = 0;
    *(_DWORD *)(v10 + 76) = 0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(_QWORD *)(v10 + 80) = _Q0.i64[0];
    *(_QWORD *)(v10 + 88) = v7;
    if (v7)
      CFRetain(v7);
    *(_DWORD *)(v10 + 96) = *(_DWORD *)v19;
    *(_DWORD *)(v10 + 99) = *(_DWORD *)&v19[3];
    if (v8)
      ++*v8;
    *(_QWORD *)(v10 + 104) = v8;
    *(_DWORD *)(v10 + 112) = v21[0];
    *(_DWORD *)(v10 + 115) = *(_DWORD *)((char *)v21 + 3);
    *(_QWORD *)(v10 + 120) = 0;
    *(_BYTE *)(v10 + 128) = 0;
    *(_QWORD *)(v10 + 200) = 0;
    *(_QWORD *)(v10 + 208) = 0;
    *(_QWORD *)(v10 + 216) = 0;
    *(_QWORD *)(v10 + 224) = 0x8000000000000000;
    *(_QWORD *)(v10 + 232) = 0;
    *(_QWORD *)(v10 + 240) = 0;
    *(_BYTE *)(v10 + 248) = 0;
    *(_BYTE *)(v10 + 256) = v9 & 1 | *(_BYTE *)(v10 + 256) & 0xF0 | 8;
    *(_QWORD *)(v10 + 264) = 0;
    *(_DWORD *)(v10 + 280) = 0;
    *(_BYTE *)(v10 + 288) = 0;
    *(_BYTE *)(v10 + 296) = 0;
    *(_BYTE *)(v10 + 304) = 0;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 328) = 33686018;
    *(_DWORD *)(v10 + 340) = 0;
    *(_QWORD *)(v10 + 332) = 0;
    *(_BYTE *)(v10 + 344) = *(_BYTE *)(v10 + 344) & 0x80 | 0x20;
    WebCore::Font::platformInit((WebCore::Font *)v10);
    WebCore::Font::platformGlyphInit((WebCore::Font *)v10);
    WebCore::Font::platformCharWidthInit((WebCore::Font *)v10);
    v17 = *(WebCore::Font **)(v2 + 32);
    *(_QWORD *)(v2 + 32) = v10;
    if (v17)
      WTF::RefCounted<WebCore::Font>::deref(v17);
    WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)&v18, v16);
    return *(_QWORD *)(v2 + 32);
  }
  return result;
}

uint64_t WebCore::Font::uprightOrientationFont(WebCore::Font *this)
{
  uint64_t v2;
  WebCore::Font::DerivedFonts *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  char v7;
  const void *v13;
  int v14;
  _DWORD *v15;
  int v16;
  WebCore::Font *v17;

  v2 = *((_QWORD *)this + 33);
  if (!v2)
  {
    v2 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_QWORD *)(v2 + 48) = 0;
    v3 = (WebCore::Font::DerivedFonts *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v2;
    if (v3)
    {
      WebCore::Font::DerivedFonts::~DerivedFonts(v3);
      WTF::fastFree(v4, v5);
      v2 = *((_QWORD *)this + 33);
    }
  }
  v6 = *(_QWORD *)(v2 + 40);
  if (!v6)
  {
    v7 = *((_BYTE *)this + 256);
    v6 = WTF::fastMalloc((WTF *)0x160);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 1000;
    _Q0 = vdupq_n_s32(0x7FC00000u);
    *(int32x4_t *)(v6 + 20) = _Q0;
    *(int32x4_t *)(v6 + 36) = _Q0;
    *(_QWORD *)(v6 + 52) = _Q0.i64[0];
    *(_QWORD *)(v6 + 68) = 0;
    *(_QWORD *)(v6 + 60) = 0;
    *(_DWORD *)(v6 + 76) = 0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(_QWORD *)(v6 + 80) = _Q0.i64[0];
    v13 = (const void *)*((_QWORD *)this + 11);
    *(_QWORD *)(v6 + 88) = v13;
    if (v13)
      CFRetain(v13);
    v14 = *((_DWORD *)this + 24);
    *(_DWORD *)(v6 + 99) = *(_DWORD *)((char *)this + 99);
    *(_DWORD *)(v6 + 96) = v14;
    v15 = (_DWORD *)*((_QWORD *)this + 13);
    if (v15)
      ++*v15;
    *(_QWORD *)(v6 + 104) = v15;
    v16 = *((_DWORD *)this + 28);
    *(_DWORD *)(v6 + 115) = *(_DWORD *)((char *)this + 115);
    *(_DWORD *)(v6 + 112) = v16;
    *(_QWORD *)(v6 + 120) = 0;
    *(_BYTE *)(v6 + 128) = 0;
    *(_QWORD *)(v6 + 200) = 0;
    *(_QWORD *)(v6 + 208) = 0;
    *(_QWORD *)(v6 + 216) = 0;
    *(_QWORD *)(v6 + 224) = 0x8000000000000000;
    *(_QWORD *)(v6 + 232) = 0;
    *(_QWORD *)(v6 + 240) = 0;
    *(_BYTE *)(v6 + 248) = 0;
    *(_BYTE *)(v6 + 256) = v7 & 1 | *(_BYTE *)(v6 + 256) & 0xF0 | 8;
    *(_QWORD *)(v6 + 264) = 0;
    *(_DWORD *)(v6 + 280) = 0;
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 296) = 0;
    *(_BYTE *)(v6 + 304) = 0;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 328) = 33686018;
    *(_DWORD *)(v6 + 340) = 0;
    *(_QWORD *)(v6 + 332) = 0;
    *(_BYTE *)(v6 + 344) = *(_BYTE *)(v6 + 344) & 0x80 | 0x20;
    WebCore::Font::platformInit((WebCore::Font *)v6);
    WebCore::Font::platformGlyphInit((WebCore::Font *)v6);
    WebCore::Font::platformCharWidthInit((WebCore::Font *)v6);
    v17 = *(WebCore::Font **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = v6;
    if (v17)
    {
      WTF::RefCounted<WebCore::Font>::deref(v17);
      return *(_QWORD *)(v2 + 40);
    }
  }
  return v6;
}

WebCore::Font *WebCore::Font::smallCapsFont(WebCore::Font *this, const WebCore::FontDescription *a2)
{
  uint64_t v3;
  WebCore::Font::DerivedFonts *v4;
  WTF *v5;
  void *v6;
  WebCore::Font *result;
  WebCore::Font *v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 33);
  if (!v3)
  {
    v3 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_QWORD *)(v3 + 48) = 0;
    v4 = (WebCore::Font::DerivedFonts *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v3;
    if (v4)
    {
      WebCore::Font::DerivedFonts::~DerivedFonts(v4);
      WTF::fastFree(v5, v6);
      v3 = *((_QWORD *)this + 33);
    }
  }
  result = *(WebCore::Font **)v3;
  if (!*(_QWORD *)v3)
  {
    WebCore::Font::platformCreateScaledFont(this, 0.7, &v9);
    result = (WebCore::Font *)v9;
    v8 = *(WebCore::Font **)v3;
    *(_QWORD *)v3 = v9;
    if (v8)
    {
      WTF::RefCounted<WebCore::Font>::deref(v8);
      return *(WebCore::Font **)v3;
    }
  }
  return result;
}

uint64_t WebCore::Font::noSynthesizableFeaturesFont(WebCore::Font *this)
{
  uint64_t v2;
  WebCore::Font::DerivedFonts *v3;
  WTF *v4;
  void *v5;
  uint64_t result;
  WebCore::Font *v7;
  WebCore::Font *v8;
  WebCore::Font *v9;
  WebCore::Font *v10;

  v2 = *((_QWORD *)this + 33);
  if (!v2)
  {
    v2 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_QWORD *)(v2 + 48) = 0;
    v3 = (WebCore::Font::DerivedFonts *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v2;
    if (v3)
    {
      WebCore::Font::DerivedFonts::~DerivedFonts(v3);
      WTF::fastFree(v4, v5);
      v2 = *((_QWORD *)this + 33);
    }
  }
  result = *(_QWORD *)(v2 + 8);
  if (!result)
  {
    WebCore::Font::createFontWithoutSynthesizableFeatures(this, &v10);
    v7 = v10;
    v10 = 0;
    v8 = *(WebCore::Font **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = v7;
    if (v8)
    {
      WTF::RefCounted<WebCore::Font>::deref(v8);
      v9 = v10;
      v10 = 0;
      if (v9)
        WTF::RefCounted<WebCore::Font>::deref(v9);
    }
    return *(_QWORD *)(v2 + 8);
  }
  return result;
}

uint64_t WebCore::Font::emphasisMarkFont(WebCore::Font *this, const WebCore::FontDescription *a2)
{
  uint64_t v3;
  WebCore::Font::DerivedFonts *v4;
  WTF *v5;
  void *v6;
  uint64_t result;
  WebCore::Font *v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 33);
  if (!v3)
  {
    v3 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_QWORD *)(v3 + 48) = 0;
    v4 = (WebCore::Font::DerivedFonts *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v3;
    if (v4)
    {
      WebCore::Font::DerivedFonts::~DerivedFonts(v4);
      WTF::fastFree(v5, v6);
      v3 = *((_QWORD *)this + 33);
    }
  }
  result = *(_QWORD *)(v3 + 16);
  if (!result)
  {
    WebCore::Font::platformCreateScaledFont(this, 0.5, &v9);
    result = v9;
    v8 = *(WebCore::Font **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v9;
    if (v8)
    {
      WTF::RefCounted<WebCore::Font>::deref(v8);
      return *(_QWORD *)(v3 + 16);
    }
  }
  return result;
}

uint64_t WebCore::Font::brokenIdeographFont(WebCore::Font *this)
{
  uint64_t v2;
  WebCore::Font::DerivedFonts *v3;
  WTF *v4;
  void *v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  const void *v14;
  int v15;
  _DWORD *v16;
  int v17;
  WebCore::Font *v18;

  v2 = *((_QWORD *)this + 33);
  if (!v2)
  {
    v2 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_QWORD *)(v2 + 48) = 0;
    v3 = (WebCore::Font::DerivedFonts *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v2;
    if (v3)
    {
      WebCore::Font::DerivedFonts::~DerivedFonts(v3);
      WTF::fastFree(v4, v5);
      v2 = *((_QWORD *)this + 33);
    }
  }
  result = *(_QWORD *)(v2 + 24);
  if (!result)
  {
    v7 = *((_BYTE *)this + 256);
    v8 = WTF::fastMalloc((WTF *)0x160);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = 1000;
    _Q0 = vdupq_n_s32(0x7FC00000u);
    *(int32x4_t *)(v8 + 20) = _Q0;
    *(int32x4_t *)(v8 + 36) = _Q0;
    *(_QWORD *)(v8 + 52) = _Q0.i64[0];
    *(_QWORD *)(v8 + 68) = 0;
    *(_QWORD *)(v8 + 60) = 0;
    *(_DWORD *)(v8 + 76) = 0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(_QWORD *)(v8 + 80) = _Q0.i64[0];
    v14 = (const void *)*((_QWORD *)this + 11);
    *(_QWORD *)(v8 + 88) = v14;
    if (v14)
      CFRetain(v14);
    v15 = *((_DWORD *)this + 24);
    *(_DWORD *)(v8 + 99) = *(_DWORD *)((char *)this + 99);
    *(_DWORD *)(v8 + 96) = v15;
    v16 = (_DWORD *)*((_QWORD *)this + 13);
    if (v16)
      ++*v16;
    *(_QWORD *)(v8 + 104) = v16;
    v17 = *((_DWORD *)this + 28);
    *(_DWORD *)(v8 + 115) = *(_DWORD *)((char *)this + 115);
    *(_DWORD *)(v8 + 112) = v17;
    *(_QWORD *)(v8 + 120) = 0;
    *(_BYTE *)(v8 + 128) = 0;
    *(_QWORD *)(v8 + 200) = 0;
    *(_QWORD *)(v8 + 208) = 0;
    *(_QWORD *)(v8 + 216) = 0;
    *(_QWORD *)(v8 + 224) = 0x8000000000000000;
    *(_QWORD *)(v8 + 232) = 0;
    *(_QWORD *)(v8 + 240) = 0;
    *(_BYTE *)(v8 + 248) = 0;
    *(_BYTE *)(v8 + 256) = *(_BYTE *)(v8 + 256) & 0xF0 | v7 & 1;
    *(_QWORD *)(v8 + 264) = 0;
    *(_DWORD *)(v8 + 280) = 0;
    *(_BYTE *)(v8 + 288) = 0;
    *(_BYTE *)(v8 + 296) = 0;
    *(_BYTE *)(v8 + 304) = 0;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 328) = 33686018;
    *(_DWORD *)(v8 + 340) = 0;
    *(_QWORD *)(v8 + 332) = 0;
    *(_BYTE *)(v8 + 344) = *(_BYTE *)(v8 + 344) & 0x80 | 0x20;
    WebCore::Font::platformInit((WebCore::Font *)v8);
    WebCore::Font::platformGlyphInit((WebCore::Font *)v8);
    WebCore::Font::platformCharWidthInit((WebCore::Font *)v8);
    v18 = *(WebCore::Font **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v8;
    if (v18)
    {
      WTF::RefCounted<WebCore::Font>::deref(v18);
      v8 = *(_QWORD *)(v2 + 24);
    }
    *(_BYTE *)(v8 + 344) |= 4u;
    return *(_QWORD *)(v2 + 24);
  }
  return result;
}

uint64_t WebCore::Font::mathData(WebCore::Font *this)
{
  WebCore::OpenTypeMathData *v2;
  WebCore::OpenTypeMathData *v3;
  void *v4;
  uint64_t (*v5)();
  WebCore::OpenTypeMathData *v6;
  WTF *v8;
  void *v9;

  if ((*((_BYTE *)this + 256) & 2) != 0)
    return 0;
  if (!*((_QWORD *)this + 29))
  {
    v2 = (WebCore::OpenTypeMathData *)WTF::fastMalloc((WTF *)0x10);
    v3 = WebCore::OpenTypeMathData::OpenTypeMathData(v2, (CTFontRef *)this + 11);
    if (*((_QWORD *)v3 + 1))
      v5 = WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::unspecifiedBoolTypeInstance;
    else
      v5 = 0;
    if (!v5)
    {
      if (*(_DWORD *)v3 != 1)
      {
        --*(_DWORD *)v3;
        return *((_QWORD *)this + 29);
      }
      goto LABEL_15;
    }
    v6 = (WebCore::OpenTypeMathData *)*((_QWORD *)this + 29);
    *((_QWORD *)this + 29) = v3;
    if (v6)
    {
      if (*(_DWORD *)v6 != 1)
      {
        --*(_DWORD *)v6;
        return *((_QWORD *)this + 29);
      }
      v3 = v6;
LABEL_15:
      WebCore::OpenTypeMathData::~OpenTypeMathData(v3, v4);
      WTF::fastFree(v8, v9);
    }
  }
  return *((_QWORD *)this + 29);
}

BOOL WebCore::Font::supportsCodePoint(WTF::BitVector *this, void *a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;
  WTF::BitVector *v16;
  CGGlyph glyphs[2];
  UniChar characters;

  v2 = a2;
  if (a2 >= 0x20)
  {
    if (((_DWORD)a2 - 127) > 0x20)
    {
      if ((int)a2 <= 8233)
      {
        if ((int)a2 > 172)
        {
          switch((int)a2)
          {
            case 8204:
              v2 = 78;
              break;
            case 8205:
              v2 = 79;
              break;
            case 8206:
              v2 = 70;
              break;
            case 8207:
              v2 = 71;
              break;
            default:
              if ((_DWORD)a2 != 173)
                return WebCore::Font::glyphForCharacter((uint64_t)this, a2) != 0;
              v2 = 65;
              break;
          }
        }
        else
        {
          if ((_DWORD)a2 != 160)
            return WebCore::Font::glyphForCharacter((uint64_t)this, a2) != 0;
          v2 = 68;
        }
      }
      else
      {
        if ((int)a2 <= 8293)
        {
          switch((int)a2)
          {
            case 8234:
              v2 = 72;
              goto LABEL_4;
            case 8235:
              v2 = 73;
              goto LABEL_4;
            case 8236:
              v2 = 80;
              goto LABEL_4;
            case 8237:
              v2 = 74;
              goto LABEL_4;
            case 8238:
              v2 = 75;
              goto LABEL_4;
            case 8239:
              v2 = 69;
              goto LABEL_4;
            default:
              return WebCore::Font::glyphForCharacter((uint64_t)this, a2) != 0;
          }
        }
        switch((int)a2)
        {
          case 8294:
            v2 = 76;
            break;
          case 8295:
            v2 = 77;
            break;
          case 8296:
            v2 = 82;
            break;
          case 8297:
            v2 = 81;
            break;
          default:
            if ((_DWORD)a2 == 65279)
            {
              v2 = 84;
            }
            else
            {
              if ((_DWORD)a2 != 65532)
                return WebCore::Font::glyphForCharacter((uint64_t)this, a2) != 0;
              v2 = 83;
            }
            break;
        }
      }
    }
    else
    {
      v2 = (_DWORD)a2 - 95;
    }
  }
LABEL_4:
  v3 = v2;
  v5 = (uint64_t *)((char *)this + 224);
  v4 = *((_QWORD *)this + 28);
  v6 = 2 * v2;
  if (v4 < 0)
    v7 = 63;
  else
    v7 = *(_QWORD *)(2 * v4);
  if (v7 < v6 + 2)
  {
    v16 = this;
    v15 = (__int16)a2;
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)((char *)this + 224));
    this = v16;
    LOWORD(a2) = v15;
    v4 = *v5;
  }
  v8 = 2 * v4 + 8;
  if (v4 < 0)
    v8 = (uint64_t)v5;
  v9 = v3 >> 5;
  v10 = v6 & 0x3E;
  v11 = *(_QWORD *)(v8 + 8 * v9);
  *(_QWORD *)(v8 + 8 * v9) = v11 | (1 << v10);
  if ((v11 & (1 << v10)) == 0)
  {
    characters = (unsigned __int16)a2;
    if (CTFontGetGlyphsForCharacters(*((CTFontRef *)this + 11), &characters, glyphs, 1))
    {
      if (*v5 >= 0)
        v12 = 2 * *v5 + 8;
      else
        v12 = (uint64_t)v5;
      *(_QWORD *)(v12 + 8 * v9) |= 1 << (v10 | 1u);
    }
  }
  if (*v5 >= 0)
    v13 = 2 * *v5 + 8;
  else
    v13 = (uint64_t)v5;
  return (*(_QWORD *)(v13 + 8 * v9) >> (v10 | 1u)) & 1;
}

BOOL WebCore::Font::canRenderCombiningCharacterSequence(WTF::BitVector *a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  int v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 result;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned __int16 *v22;
  BOOL v23;

  if ((a3 & 0xFF00000000) != 0)
    v3 = (unsigned __int16 *)((char *)a2 + a3);
  else
    v3 = &a2[a3];
  if (v3 == a2)
    return 1;
  v4 = a2;
  if ((a3 & 0xFF00000000) == 0)
  {
    while (1)
    {
      v6 = *v4;
      if ((v6 & 0xF800) != 0xD800 || (char *)v3 - (char *)v4 == 2)
      {
        v7 = (void *)*v4;
      }
      else
      {
        v7 = (void *)*v4;
        if ((v6 & 0x400) == 0)
        {
          v13 = v4[1];
          v14 = v13 & 0xFC00;
          v15 = v13 + (v6 << 10) - 56613888;
          if (v14 == 56320)
            v7 = (void *)v15;
          else
            v7 = (void *)*v4;
        }
      }
      if ((v6 & 0xFC00) != 0xD800 || (char *)v3 - (char *)v4 == 2)
        v8 = 1;
      else
        v8 = (v4[1] & 0xFC00) == 0xDC00 ? 2 : 1;
      v4 += v8;
      if (v4 == v3)
        break;
      v9 = *v4;
      if ((v9 & 0xF800) != 0xD800 || (char *)v3 - (char *)v4 == 2 || (v9 & 0x400) != 0)
      {
        if ((v9 & 0xFFF0) != 0xFE00)
          break;
      }
      else
      {
        v16 = v4[1];
        v17 = v16 & 0xFC00;
        v18 = v16 + (v9 << 10) - 56613888;
        if (v17 == 56320)
          v9 = v18;
        if (v9 >> 4 != 4064)
          break;
      }
      result = WebCore::Font::supportsCodePoint(a1, v7);
      if (!result)
        return result;
      v11 = (void *)*v4;
      if (((unsigned __int16)v11 & 0xF800) == 0xD800
        && (char *)v3 - (char *)v4 != 2
        && ((unsigned __int16)v11 & 0x400) == 0)
      {
        v19 = v4[1];
        v20 = v19 & 0xFC00;
        v21 = v19 + ((_DWORD)v11 << 10) - 56613888;
        if (v20 == 56320)
          v11 = (void *)v21;
        else
          v11 = (void *)*v4;
      }
      result = WebCore::Font::supportsCodePoint(a1, v11);
      if (!result)
        return result;
      if ((*v4 & 0xFC00) != 0xD800 || (char *)v3 - (char *)v4 == 2)
      {
        v12 = 1;
      }
      else if ((v4[1] & 0xFC00) == 0xDC00)
      {
        v12 = 2;
      }
      else
      {
        v12 = 1;
      }
      v4 += v12;
LABEL_34:
      if (v4 == v3)
        return 1;
    }
    result = WebCore::Font::supportsCodePoint(a1, v7);
    if (!result)
      return result;
    goto LABEL_34;
  }
  v22 = (unsigned __int16 *)((char *)a2 + 1);
  do
  {
    result = WebCore::Font::supportsCodePoint(a1, (void *)*((unsigned __int8 *)v22 - 1));
    v23 = !result || v22 == v3;
    v22 = (unsigned __int16 *)((char *)v22 + 1);
  }
  while (!v23);
  return result;
}

void WebCore::FontCache::~FontCache(WebCore::FontCache *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;

  WebCore::SystemFontDatabaseCoreText::~SystemFontDatabaseCoreText((WebCore::FontCache *)((char *)this + 344), a2);
  v4 = *((_QWORD *)this + 42);
  if (v4)
    WTF::HashTable<WebCore::FontFamilySpecificationKey,WTF::KeyValuePair<WebCore::FontFamilySpecificationKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontFamilySpecificationKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontFamilySpecificationKeyHash,WTF::HashMap<WebCore::FontFamilySpecificationKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontFamilySpecificationKeyHash,WTF::SimpleClassHashTraits<WebCore::FontFamilySpecificationKey>,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<WebCore::FontFamilySpecificationKey>>::deallocateTable(v4, v3);
  v5 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::~ListHashSet((_QWORD *)this + 38, v3);
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::~ListHashSet((_QWORD *)this + 35, v6);
  WTF::HashSet<WTF::RetainPtr<__CTFont const*>,WTF::RetainPtrObjectHash<__CTFont const*>,WTF::RetainPtrObjectHashTraits<__CTFont const*>,WTF::HashTableTraits>::~HashSet((const void ***)this + 34, v7);
  WebCore::FontDatabase::~FontDatabase((WebCore::FontCache *)((char *)this + 208), v8);
  WebCore::FontDatabase::~FontDatabase((WebCore::FontCache *)((char *)this + 144), v9);
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)this + 96, v10);
  v12 = *((_QWORD *)this + 11);
  if (v12)
    WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::deallocateTable(v12, v11);
  v13 = (_BYTE *)*((_QWORD *)this + 10);
  if (v13)
    WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::deallocateTable(v13, v11);
  std::unique_ptr<WebCore::FontCache::FontDataCaches>::reset[abi:sn180100]((WTF::StringImpl **)this + 9, 0);
  WTF::WeakHashSet<WebCore::CanvasDisplayBufferObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet((uint64_t *)this + 7, v14);
  WebCore::Timer::~Timer(this);
}

const void ***WTF::HashSet<WTF::RetainPtr<__CTFont const*>,WTF::RetainPtrObjectHash<__CTFont const*>,WTF::RetainPtrObjectHashTraits<__CTFont const*>,WTF::HashTableTraits>::~HashSet(const void ***a1, void *a2)
{
  const void **v3;
  uint64_t v4;
  const void **v5;
  const void *v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != (const void *)-1)
        {
          *v5 = 0;
          if (v6)
            CFRelease(v6);
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

void WebCore::FontDatabase::~FontDatabase(WebCore::FontDatabase *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  const void **v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *((unsigned int *)this + 10);
    if ((_DWORD)v4)
    {
      v5 = (const void **)((char *)v3 + 8);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          CFRelease(v6);
        v7 = (WTF::StringImpl *)*(v5 - 1);
        *(v5 - 1) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree(v3, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 1);
  if (v8)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v8, (void *)*((unsigned int *)this + 4));
}

uint64_t WebCore::FontCache::cachedFontPlatformData(WTF::Thread *a1, WTF::StringImpl *a2, WebCore::FontPlatformData **a3, __int128 *a4, char a5)
{
  const WebCore::FontDescription *v8;
  WTF::Thread *v9;
  uint64_t v10;
  int v12;
  WebCore::FontPlatformData *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  __int128 *v26;
  const WebCore::FontDescription *v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  __int128 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  __int128 v38;
  WTF *v39;
  uint64_t v40;
  WebCore::FontPlatformData *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  WebCore::FontPlatformData *v50;
  WebCore::FontPlatformData *v51;
  WTF *v52;
  void *v53;
  WebCore::FontPlatformData *v54;
  WTF *v55;
  void *v56;
  WTF::Thread *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  const char *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  int v75;
  _DWORD *v76;
  int v77;
  WebCore::FontPlatformData *v78;
  WTF *v79;
  void *v80;
  uint64_t v81;
  WTF *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  int v87;
  unsigned __int8 *v88;
  int v89;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  char v98;
  WTF::StringImpl *v99;
  const char *v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  __int128 v108;
  __int16 v109;
  WTF *v110;
  WTF::StringImpl *v111;
  WebCore::FontPlatformData *v112[2];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;

  v8 = a2;
  v9 = a1;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10)
    v10 = WTF::Thread::initializeCurrentTLS(a1);
  if (v10 == *((_QWORD *)v9 + 16))
  {
    v12 = *((_DWORD *)v9 + 34) + 1;
    goto LABEL_10;
  }
  if (__ldaxr((unsigned __int8 *)v9 + 140))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C]();
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)v9 + 140))
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)v9 + 16) = v10;
  v12 = 1;
LABEL_10:
  *((_DWORD *)v9 + 34) = v12;
  v13 = *a3;
  if (*a3)
  {
    if ((*((_BYTE *)v13 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v13 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v13, a2);
      v13 = v112[0];
    }
  }
  v111 = v13;
  v100 = (const char *)v9;
  v14 = atomic_load(&WebCore::FontCache::cachedFontPlatformData(WebCore::FontDescription const&,WTF::String const&,WebCore::FontCreationContext const&,WTF::OptionSet<WebCore::FontLookupOptions>)::onceFlag);
  if (v14 != -1)
  {
    v112[0] = (WebCore::FontPlatformData *)&v100;
    *(_QWORD *)&v103 = v112;
    std::__call_once(&WebCore::FontCache::cachedFontPlatformData(WebCore::FontDescription const&,WTF::String const&,WebCore::FontCreationContext const&,WTF::OptionSet<WebCore::FontLookupOptions>)::onceFlag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::FontCache::cachedFontPlatformData(WebCore::FontDescription const&,WTF::String const&,WebCore::FontCreationContext const&,WTF::OptionSet<WebCore::FontLookupOptions>)::$_0 &&>>);
  }
  WebCore::FontDescriptionKey::FontDescriptionKey((WebCore::FontDescriptionKey *)&v103, v8);
  v15 = v111;
  if (v111)
    *(_DWORD *)v111 += 2;
  v107 = v15;
  v108 = *a4;
  v109 = *((_WORD *)a4 + 8);
  v16 = (WTF *)*((_QWORD *)a4 + 3);
  if (v16)
    ++*(_DWORD *)v16;
  v110 = v16;
  v17 = *((_QWORD *)v9 + 9);
  v20 = *(_QWORD *)(v17 + 8);
  v18 = (uint64_t *)(v17 + 8);
  v19 = v20;
  v98 = a5;
  if (v20
    || (WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::expand(v18, 0), (v19 = *v18) != 0))
  {
    v21 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    v21 = 0;
  }
  v22 = WTF::computeHash<WebCore::FontPlatformDataCacheKey>((uint64_t)&v103) & v21;
  v115 = 0u;
  v116 = 0u;
  v23 = v19 + 88 * v22;
  v113 = 0u;
  v114 = 0u;
  *(_OWORD *)v112 = 0u;
  if ((WebCore::operator==((unsigned __int8 *)v23, (unsigned __int8 *)v112) & 1) == 0)
  {
    v25 = v18;
    v26 = a4;
    v27 = v8;
    v28 = 0;
    v29 = 1;
    do
    {
      if ((WebCore::operator==((unsigned __int8 *)v23, (unsigned __int8 *)&v103) & 1) != 0)
        goto LABEL_130;
      if (*(_BYTE *)v23)
        v28 = v23;
      v22 = (v22 + v29) & v21;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      *(_OWORD *)v112 = 0u;
      v23 = v19 + 88 * v22;
      ++v29;
    }
    while (!WebCore::operator==((unsigned __int8 *)v23, (unsigned __int8 *)v112));
    v8 = v27;
    a4 = v26;
    v18 = v25;
    if (v28)
    {
      *(_QWORD *)(v28 + 80) = 0;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)v28 = 0u;
      --*(_DWORD *)(*v25 - 16);
      v23 = v28;
    }
  }
  v31 = v103;
  *(_QWORD *)(v23 + 16) = v104;
  *(_OWORD *)v23 = v31;
  v32 = v105;
  if (v105)
    *(_DWORD *)v105 += 2;
  v33 = *(WTF::StringImpl **)(v23 + 24);
  *(_QWORD *)(v23 + 24) = v32;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v24);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v106;
  if (v106)
    ++*v106;
  v35 = *(_QWORD *)(v23 + 32);
  *(_QWORD *)(v23 + 32) = v34;
  if (v35)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v35, v24);
  v36 = v107;
  if (v107)
    *(_DWORD *)v107 += 2;
  v37 = *(WTF::StringImpl **)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v36;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v24);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v108;
  *(_WORD *)(v23 + 64) = v109;
  *(_OWORD *)(v23 + 48) = v38;
  v39 = v110;
  if (v110)
    ++*(_DWORD *)v110;
  v40 = *(_QWORD *)(v23 + 72);
  *(_QWORD *)(v23 + 72) = v39;
  if (v40)
    WTF::RefCounted<WebCore::FontCreationContextRareData>::deref(v40, v24);
  v41 = *(WebCore::FontPlatformData **)(v23 + 80);
  *(_QWORD *)(v23 + 80) = 0;
  if (v41)
  {
    WebCore::FontPlatformData::~FontPlatformData(v41, v24);
    WTF::fastFree(v42, v43);
  }
  v44 = *v18;
  if (*v18)
    v45 = *(_DWORD *)(v44 - 12) + 1;
  else
    v45 = 1;
  *(_DWORD *)(v44 - 12) = v45;
  v46 = *v18;
  if (*v18)
    v47 = *(_DWORD *)(v46 - 12);
  else
    v47 = 0;
  v48 = (*(_DWORD *)(v46 - 16) + v47);
  v49 = *(unsigned int *)(v46 - 4);
  if (v49 > 0x400)
  {
    if (v49 > 2 * v48)
      goto LABEL_55;
  }
  else if (3 * v49 > 4 * v48)
  {
    goto LABEL_55;
  }
  v23 = WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::expand(v18, (__int128 *)v23);
LABEL_55:
  WebCore::FontCache::createFontPlatformData((uint64_t *)v9, (uint64_t)v8, (WTF::String *)&v111, (__int16 *)a4, v98, (uint64_t *)v112);
  v50 = v112[0];
  v112[0] = 0;
  v51 = *(WebCore::FontPlatformData **)(v23 + 80);
  *(_QWORD *)(v23 + 80) = v50;
  if (v51)
  {
    WebCore::FontPlatformData::~FontPlatformData(v51, v30);
    WTF::fastFree(v52, v53);
    v54 = v112[0];
    v112[0] = 0;
    if (v54)
    {
      WebCore::FontPlatformData::~FontPlatformData(v54, v30);
      WTF::fastFree(v55, v56);
    }
    v50 = *(WebCore::FontPlatformData **)(v23 + 80);
  }
  if (!v50 && (v98 & 1) == 0)
  {
    WebCore::FontCache::platformAlternateFamilyName((uint64_t)&v111, (uint64_t)&v100);
    if (v102)
    {
      v61 = v101;
      if (!v101)
      {
        v65 = 0;
        v99 = 0;
        goto LABEL_102;
      }
    }
    else
    {
      v57 = v9;
      if (!v111)
        goto LABEL_128;
      v58 = v23;
      switch(*((_DWORD *)v111 + 1))
      {
        case 5:
          v91 = *((_QWORD *)v111 + 1);
          if ((*((_BYTE *)v111 + 16) & 4) != 0)
          {
            v92 = *(_BYTE *)v91 & 0xDF;
            if (v92 == 65
              && (*(_BYTE *)(v91 + 1) & 0xDF) == 0x52
              && (*(_BYTE *)(v91 + 2) & 0xDF) == 0x49
              && (*(_BYTE *)(v91 + 3) & 0xDF) == 0x41
              && (*(_BYTE *)(v91 + 4) & 0xDF) == 0x4C)
            {
LABEL_162:
              v100 = "Helvetica";
              v61 = 10;
              goto LABEL_98;
            }
            if (v92 != 84
              || (*(_BYTE *)(v91 + 1) & 0xDF) != 0x49
              || (*(_BYTE *)(v91 + 2) & 0xDF) != 0x4D
              || (*(_BYTE *)(v91 + 3) & 0xDF) != 0x45)
            {
              goto LABEL_129;
            }
            v97 = *(unsigned __int8 *)(v91 + 4);
          }
          else
          {
            if ((*(_WORD *)v91 & 0xFFDF) == 0x41
              && (*(_WORD *)(v91 + 2) & 0xFFDF) == 0x52
              && (*(_WORD *)(v91 + 4) & 0xFFDF) == 0x49
              && (*(_WORD *)(v91 + 6) & 0xFFDF) == 0x41
              && (*(_WORD *)(v91 + 8) & 0xFFDF) == 0x4C)
            {
              goto LABEL_162;
            }
            if ((*(_WORD *)v91 & 0xFFDF) != 0x54
              || (*(_WORD *)(v91 + 2) & 0xFFDF) != 0x49
              || (*(_WORD *)(v91 + 4) & 0xFFDF) != 0x4D
              || (*(_WORD *)(v91 + 6) & 0xFFDF) != 0x45)
            {
              goto LABEL_129;
            }
            v97 = *(unsigned __int16 *)(v91 + 8);
          }
          if ((v97 & 0xFFFFFFDF) != 0x53)
            goto LABEL_129;
          v100 = "Times New Roman";
          v61 = 16;
LABEL_98:
          v101 = v61;
          v102 = 1;
          v9 = v57;
          break;
        case 7:
          v93 = *((_QWORD *)v111 + 1);
          if ((*((_BYTE *)v111 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v93 & 0xDF) != 0x43
              || (*(_BYTE *)(v93 + 1) & 0xDF) != 0x4F
              || (*(_BYTE *)(v93 + 2) & 0xDF) != 0x55
              || (*(_BYTE *)(v93 + 3) & 0xDF) != 0x52
              || (*(_BYTE *)(v93 + 4) & 0xDF) != 0x49
              || (*(_BYTE *)(v93 + 5) & 0xDF) != 0x45)
            {
              goto LABEL_129;
            }
            v94 = *(unsigned __int8 *)(v93 + 6);
          }
          else
          {
            if ((*(_WORD *)v93 & 0xFFDF) != 0x43
              || (*(_WORD *)(v93 + 2) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v93 + 4) & 0xFFDF) != 0x55
              || (*(_WORD *)(v93 + 6) & 0xFFDF) != 0x52
              || (*(_WORD *)(v93 + 8) & 0xFFDF) != 0x49
              || (*(_WORD *)(v93 + 10) & 0xFFDF) != 0x45)
            {
              goto LABEL_129;
            }
            v94 = *(unsigned __int16 *)(v93 + 12);
          }
          if ((v94 & 0xFFFFFFDF) != 0x52)
            goto LABEL_129;
          v100 = "Courier New";
          v61 = 12;
          goto LABEL_98;
        case 9:
          v95 = *((_QWORD *)v111 + 1);
          if ((*((_BYTE *)v111 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v95 & 0xDF) != 0x48
              || (*(_BYTE *)(v95 + 1) & 0xDF) != 0x45
              || (*(_BYTE *)(v95 + 2) & 0xDF) != 0x4C
              || (*(_BYTE *)(v95 + 3) & 0xDF) != 0x56
              || (*(_BYTE *)(v95 + 4) & 0xDF) != 0x45
              || (*(_BYTE *)(v95 + 5) & 0xDF) != 0x54
              || (*(_BYTE *)(v95 + 6) & 0xDF) != 0x49
              || (*(_BYTE *)(v95 + 7) & 0xDF) != 0x43)
            {
              goto LABEL_129;
            }
            v96 = *(unsigned __int8 *)(v95 + 8);
          }
          else
          {
            if ((*(_WORD *)v95 & 0xFFDF) != 0x48
              || (*(_WORD *)(v95 + 2) & 0xFFDF) != 0x45
              || (*(_WORD *)(v95 + 4) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v95 + 6) & 0xFFDF) != 0x56
              || (*(_WORD *)(v95 + 8) & 0xFFDF) != 0x45
              || (*(_WORD *)(v95 + 10) & 0xFFDF) != 0x54
              || (*(_WORD *)(v95 + 12) & 0xFFDF) != 0x49
              || (*(_WORD *)(v95 + 14) & 0xFFDF) != 0x43)
            {
              goto LABEL_129;
            }
            v96 = *(unsigned __int16 *)(v95 + 16);
          }
          if ((v96 & 0xFFFFFFDF) != 0x41)
            goto LABEL_129;
          v64 = "Arial";
          goto LABEL_97;
        case 0xB:
          v59 = *((_QWORD *)v111 + 1);
          if ((*((_BYTE *)v111 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v59 & 0xDF) != 0x43
              || (*(_BYTE *)(v59 + 1) & 0xDF) != 0x4F
              || (*(_BYTE *)(v59 + 2) & 0xDF) != 0x55
              || (*(_BYTE *)(v59 + 3) & 0xDF) != 0x52
              || (*(_BYTE *)(v59 + 4) & 0xDF) != 0x49
              || (*(_BYTE *)(v59 + 5) & 0xDF) != 0x45
              || (*(_BYTE *)(v59 + 6) & 0xDF) != 0x52
              || (*(_BYTE *)(v59 + 7) & 0xDF) != 0
              || (*(_BYTE *)(v59 + 8) & 0xDF) != 0x4E
              || (*(_BYTE *)(v59 + 9) & 0xDF) != 0x45)
            {
              goto LABEL_129;
            }
            v60 = *(unsigned __int8 *)(v59 + 10);
          }
          else
          {
            if ((*(_WORD *)v59 & 0xFFDF) != 0x43
              || (*(_WORD *)(v59 + 2) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v59 + 4) & 0xFFDF) != 0x55
              || (*(_WORD *)(v59 + 6) & 0xFFDF) != 0x52
              || (*(_WORD *)(v59 + 8) & 0xFFDF) != 0x49
              || (*(_WORD *)(v59 + 10) & 0xFFDF) != 0x45
              || (*(_WORD *)(v59 + 12) & 0xFFDF) != 0x52
              || (*(_WORD *)(v59 + 14) & 0xFFDF) != 0
              || (*(_WORD *)(v59 + 16) & 0xFFDF) != 0x4E
              || (*(_WORD *)(v59 + 18) & 0xFFDF) != 0x45)
            {
              goto LABEL_129;
            }
            v60 = *(unsigned __int16 *)(v59 + 20);
          }
          if ((v60 & 0xFFFFFFDF) != 0x57)
            goto LABEL_129;
          v100 = "Courier";
          v61 = 8;
          goto LABEL_98;
        case 0xF:
          v62 = *((_QWORD *)v111 + 1);
          if ((*((_BYTE *)v111 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v62 & 0xDF) != 0x54
              || (*(_BYTE *)(v62 + 1) & 0xDF) != 0x49
              || (*(_BYTE *)(v62 + 2) & 0xDF) != 0x4D
              || (*(_BYTE *)(v62 + 3) & 0xDF) != 0x45
              || (*(_BYTE *)(v62 + 4) & 0xDF) != 0x53
              || (*(_BYTE *)(v62 + 5) & 0xDF) != 0
              || (*(_BYTE *)(v62 + 6) & 0xDF) != 0x4E
              || (*(_BYTE *)(v62 + 7) & 0xDF) != 0x45
              || (*(_BYTE *)(v62 + 8) & 0xDF) != 0x57
              || (*(_BYTE *)(v62 + 9) & 0xDF) != 0
              || (*(_BYTE *)(v62 + 10) & 0xDF) != 0x52
              || (*(_BYTE *)(v62 + 11) & 0xDF) != 0x4F
              || (*(_BYTE *)(v62 + 12) & 0xDF) != 0x4D
              || (*(_BYTE *)(v62 + 13) & 0xDF) != 0x41)
            {
              goto LABEL_129;
            }
            v63 = *(unsigned __int8 *)(v62 + 14);
          }
          else
          {
            if ((*(_WORD *)v62 & 0xFFDF) != 0x54
              || (*(_WORD *)(v62 + 2) & 0xFFDF) != 0x49
              || (*(_WORD *)(v62 + 4) & 0xFFDF) != 0x4D
              || (*(_WORD *)(v62 + 6) & 0xFFDF) != 0x45
              || (*(_WORD *)(v62 + 8) & 0xFFDF) != 0x53
              || (*(_WORD *)(v62 + 10) & 0xFFDF) != 0
              || (*(_WORD *)(v62 + 12) & 0xFFDF) != 0x4E
              || (*(_WORD *)(v62 + 14) & 0xFFDF) != 0x45
              || (*(_WORD *)(v62 + 16) & 0xFFDF) != 0x57
              || (*(_WORD *)(v62 + 18) & 0xFFDF) != 0
              || (*(_WORD *)(v62 + 20) & 0xFFDF) != 0x52
              || (*(_WORD *)(v62 + 22) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v62 + 24) & 0xFFDF) != 0x4D
              || (*(_WORD *)(v62 + 26) & 0xFFDF) != 0x41)
            {
              goto LABEL_129;
            }
            v63 = *(unsigned __int16 *)(v62 + 28);
          }
          if ((v63 & 0xFFFFFFDF) != 0x4E)
            goto LABEL_129;
          v64 = "Times";
LABEL_97:
          v100 = v64;
          v61 = 6;
          goto LABEL_98;
        default:
          goto LABEL_129;
      }
    }
    if (v61 == 1)
    {
      v65 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v65 = v112[0];
    }
    v99 = v65;
LABEL_102:
    v66 = WebCore::FontCache::cachedFontPlatformData(v9, v8, &v99, a4, v98 & 0xFE | 1);
    v99 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v30);
      else
        *(_DWORD *)v65 -= 2;
    }
    v67 = *((_QWORD *)v9 + 9);
    v68 = *(_QWORD *)(v67 + 8);
    if (v68)
    {
      v69 = *(_DWORD *)(v68 - 8);
      v70 = WTF::computeHash<WebCore::FontPlatformDataCacheKey>((uint64_t)&v103) & v69;
      v23 = v68 + 88 * v70;
      if ((WebCore::operator==((unsigned __int8 *)v23, (unsigned __int8 *)&v103) & 1) != 0)
      {
LABEL_120:
        if (v66)
        {
          v73 = WTF::fastMalloc((WTF *)0x20);
          v74 = *(const void **)v66;
          *(_QWORD *)v73 = *(_QWORD *)v66;
          if (v74)
            CFRetain(v74);
          v57 = v9;
          v75 = *(_DWORD *)(v66 + 8);
          *(_DWORD *)(v73 + 11) = *(_DWORD *)(v66 + 11);
          *(_DWORD *)(v73 + 8) = v75;
          v76 = *(_DWORD **)(v66 + 16);
          if (v76)
            ++*v76;
          *(_QWORD *)(v73 + 16) = v76;
          v77 = *(_DWORD *)(v66 + 24);
          *(_DWORD *)(v73 + 27) = *(_DWORD *)(v66 + 27);
          *(_DWORD *)(v73 + 24) = v77;
          v78 = *(WebCore::FontPlatformData **)(v23 + 80);
          v58 = v23;
          *(_QWORD *)(v23 + 80) = v73;
          if (v78)
          {
            WebCore::FontPlatformData::~FontPlatformData(v78, v30);
            WTF::fastFree(v79, v80);
          }
          goto LABEL_129;
        }
        v57 = v9;
LABEL_128:
        v58 = v23;
LABEL_129:
        v23 = v58;
        v9 = v57;
        goto LABEL_130;
      }
      v71 = 1;
      while (1)
      {
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        *(_OWORD *)v112 = 0u;
        if ((WebCore::operator==((unsigned __int8 *)v23, (unsigned __int8 *)v112) & 1) != 0)
          break;
        v70 = (v70 + v71) & v69;
        v23 = v68 + 88 * v70;
        ++v71;
        if ((WebCore::operator==((unsigned __int8 *)v23, (unsigned __int8 *)&v103) & 1) != 0)
          goto LABEL_120;
      }
      v72 = *(_QWORD *)(v67 + 8);
      if (v72)
      {
        v23 = v72 + 88 * *(unsigned int *)(v72 - 4);
        goto LABEL_120;
      }
    }
    v23 = 0;
    goto LABEL_120;
  }
LABEL_130:
  v81 = *(_QWORD *)(v23 + 80);
  v82 = v110;
  v110 = 0;
  if (v82)
    WTF::RefCounted<WebCore::FontCreationContextRareData>::deref((uint64_t)v82, v30);
  v83 = v107;
  v107 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v30);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = (uint64_t)v106;
  v106 = 0;
  if (v84)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v84, v30);
  v85 = v105;
  v105 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v30);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = v111;
  v111 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v30);
    else
      *(_DWORD *)v86 -= 2;
  }
  v87 = *((_DWORD *)v9 + 34) - 1;
  *((_DWORD *)v9 + 34) = v87;
  if (!v87)
  {
    *((_QWORD *)v9 + 16) = 0;
    v88 = (unsigned __int8 *)v9 + 140;
    v89 = __ldxr((unsigned __int8 *)v9 + 140);
    if (v89 == 1)
    {
      if (!__stlxr(0, v88))
        return v81;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v88);
  }
  return v81;
}

WTF::Thread *WTF::Locker<WTF::RecursiveLockAdapter<WTF::Lock>,void>::Locker(WTF::Thread *a1, uint64_t a2)
{
  uint64_t v4;
  int v6;

  *(_QWORD *)a1 = a2;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4)
    v4 = WTF::Thread::initializeCurrentTLS(a1);
  if (v4 != *(_QWORD *)a2)
  {
    if (__ldaxr((unsigned __int8 *)(a2 + 12)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)(a2 + 12)))
    {
LABEL_9:
      *(_QWORD *)a2 = v4;
      v6 = 1;
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C]();
    goto LABEL_9;
  }
  v6 = *(_DWORD *)(a2 + 8) + 1;
LABEL_10:
  *(_DWORD *)(a2 + 8) = v6;
  return a1;
}

uint64_t *WTF::Locker<WTF::RecursiveLockAdapter<WTF::Lock>,void>::~Locker(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 8) - 1;
    *(_DWORD *)(v2 + 8) = v3;
    if (!v3)
    {
      *(_QWORD *)v2 = 0;
      v4 = (unsigned __int8 *)(v2 + 12);
      v5 = __ldxr(v4);
      if (v5 == 1)
      {
        if (!__stlxr(0, v4))
          return a1;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  return a1;
}

const WebCore::FontPlatformData *WebCore::FontCache::fontForFamily@<X0>(WTF::MonotonicTime *a1@<X0>, WTF::StringImpl *a2@<X1>, WebCore::FontPlatformData **a3@<X2>, __int128 *a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  double v12;
  const WebCore::FontPlatformData *result;
  uint64_t v14;
  uint64_t v15;

  if ((*((_QWORD *)a1 + 4) & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((*((_QWORD *)a1 + 4) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)a1 + 3) = 0;
    WTF::MonotonicTime::now(a1);
    WebCore::TimerBase::setNextFireTime((uint64_t)a1, v12 + 0.0);
  }
  result = (const WebCore::FontPlatformData *)WebCore::FontCache::cachedFontPlatformData(a1, a2, a3, a4, a5);
  if (result)
  {
    result = (const WebCore::FontPlatformData *)WebCore::FontCache::fontForPlatformData(a1, result, &v15);
    v14 = v15;
  }
  else
  {
    v14 = 0;
  }
  *a6 = v14;
  return result;
}

uint64_t WebCore::FontCache::inactiveFontCount(WebCore::FontCache *this)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  int v14;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2)
    v2 = WTF::Thread::initializeCurrentTLS(this);
  if (v2 == *((_QWORD *)this + 16))
  {
    v4 = *((_DWORD *)this + 34) + 1;
    goto LABEL_10;
  }
  if (__ldaxr((unsigned __int8 *)this + 140))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C]();
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)this + 140))
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)this + 16) = v2;
  v4 = 1;
LABEL_10:
  *((_DWORD *)this + 34) = v4;
  v5 = (uint64_t *)*((_QWORD *)this + 9);
  v6 = WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::begin(*v5);
  v7 = v6;
  v9 = v8;
  if (*v5)
    v10 = *v5 + 40 * *(unsigned int *)(*v5 - 4);
  else
    v10 = 0;
  if (v10 == v6)
  {
    v11 = 0;
  }
  else
  {
    LODWORD(v11) = 0;
    do
    {
      if (**(_DWORD **)(v7 + 32) == 1)
        v11 = (v11 + 1);
      else
        v11 = v11;
      while (1)
      {
        v7 += 40;
        if (v7 == v9)
          break;
        if ((WTF::HashTraitsEmptyValueChecker<WebCore::FontDataCacheKeyTraits,false>::isEmptyValue<WebCore::FontPlatformData>(v7) & 1) == 0
          && !*(_BYTE *)(v7 + 27))
        {
          goto LABEL_20;
        }
      }
      v7 = v9;
LABEL_20:
      ;
    }
    while (v7 != v10);
  }
  v12 = *((_DWORD *)this + 34) - 1;
  *((_DWORD *)this + 34) = v12;
  if (!v12)
  {
    *((_QWORD *)this + 16) = 0;
    v13 = (unsigned __int8 *)this + 140;
    v14 = __ldxr((unsigned __int8 *)this + 140);
    if (v14 == 1)
    {
      if (!__stlxr(0, v13))
        return v11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  }
  return v11;
}

unsigned __int8 *WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::FontCache::purgeInactiveFontData(unsigned int)::$_0,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>>(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 *result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int128 v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  __int128 v45;
  __int16 v46;
  _OWORD v47[2];
  WTF::StringImpl *v48[2];
  __int128 v49;
  __int128 v50;
  _BYTE v51[23];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = *a2;
  if (*a2 && (v7 = *((unsigned int *)result - 3), (_DWORD)v7))
  {
    if (v7 >= 0x3333334)
    {
      __break(0xC471u);
      return result;
    }
    v44 = 80 * v7;
    v8 = WTF::fastMalloc((WTF *)(80 * v7));
    *(_DWORD *)(a1 + 8) = (v44 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v8;
    result = *a2;
  }
  else
  {
    v8 = 0;
  }
  v9 = WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::begin(result);
  v10 = v9;
  v12 = v11;
  if (*a2)
    v13 = (uint64_t)&(*a2)[88 * *((unsigned int *)*a2 - 1)];
  else
    v13 = 0;
  if ((unsigned __int8 *)v13 == v9)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = (void *)*((_QWORD *)v10 + 10);
      if (v15)
      {
        v16 = **(_QWORD **)(*(_QWORD *)a3 + 72);
        if (!v16
          || !WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyHash>,WebCore::FontPlatformData>(v16, (CFTypeRef *)v15))
        {
          v17 = *v10;
          v18 = *(_OWORD *)(v10 + 1);
          v19 = (_DWORD *)*((_QWORD *)v10 + 3);
          *(_QWORD *)&v51[15] = *((_QWORD *)v10 + 2);
          *(_OWORD *)v51 = v18;
          if (v19)
            *v19 += 2;
          v20 = (WTF::StringImpl *)*((_QWORD *)v10 + 4);
          if (v20)
            ++*(_DWORD *)v20;
          v21 = (WTF::StringImpl *)*((_QWORD *)v10 + 5);
          if (v21)
            *(_DWORD *)v21 += 2;
          v45 = *((_OWORD *)v10 + 3);
          v46 = *((_WORD *)v10 + 32);
          v22 = (_DWORD *)*((_QWORD *)v10 + 9);
          if (v22)
            ++*v22;
          LOBYTE(v47[0]) = v17;
          *(_OWORD *)((char *)v47 + 1) = *(_OWORD *)v51;
          *(_QWORD *)&v47[1] = *(_QWORD *)&v51[15];
          *((_QWORD *)&v47[1] + 1) = v19;
          v48[0] = v20;
          v49 = v45;
          LOWORD(v50) = v46;
          v48[1] = v21;
          *((_QWORD *)&v50 + 1) = v22;
          if (v14 == *(_DWORD *)(a1 + 8))
          {
            v23 = WTF::Vector<WebCore::FontPlatformDataCacheKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v14 + 1, (unint64_t)v47);
            v24 = *(_DWORD *)(a1 + 12);
            v8 = *(_QWORD *)a1;
            v25 = *(_QWORD *)a1 + 80 * v24;
            v26 = *((_QWORD *)v23 + 2);
            *(_OWORD *)v25 = *(_OWORD *)v23;
            *(_QWORD *)(v25 + 16) = v26;
            v27 = *((_QWORD *)v23 + 3);
            *((_QWORD *)v23 + 3) = 0;
            *(_QWORD *)(v25 + 24) = v27;
            v28 = *((_QWORD *)v23 + 4);
            *((_QWORD *)v23 + 4) = 0;
            *(_QWORD *)(v25 + 32) = v28;
            v29 = *((_QWORD *)v23 + 5);
            *((_QWORD *)v23 + 5) = 0;
            *(_QWORD *)(v25 + 40) = v29;
            v30 = *((_OWORD *)v23 + 3);
            *(_WORD *)(v25 + 64) = *((_WORD *)v23 + 32);
            *(_OWORD *)(v25 + 48) = v30;
            v31 = (_QWORD *)(v25 + 72);
            v32 = (uint64_t *)(v23 + 72);
          }
          else
          {
            v33 = v8 + 80 * v14;
            v34 = v47[0];
            *(_QWORD *)(v33 + 16) = *(_QWORD *)&v47[1];
            *(_OWORD *)v33 = v34;
            v35 = *((_QWORD *)&v47[1] + 1);
            *((_QWORD *)&v47[1] + 1) = 0;
            *(_QWORD *)(v33 + 24) = v35;
            v36 = v48[0];
            v48[0] = 0;
            *(_QWORD *)(v33 + 32) = v36;
            v37 = v48[1];
            v48[1] = 0;
            *(_QWORD *)(v33 + 40) = v37;
            v38 = v49;
            *(_WORD *)(v33 + 64) = v50;
            *(_OWORD *)(v33 + 48) = v38;
            v31 = (_QWORD *)(v33 + 72);
            v24 = *(_DWORD *)(a1 + 12);
            v32 = (uint64_t *)&v50 + 1;
          }
          v39 = *v32;
          *v32 = 0;
          *v31 = v39;
          v14 = v24 + 1;
          *(_DWORD *)(a1 + 12) = v24 + 1;
          v40 = *((_QWORD *)&v50 + 1);
          *((_QWORD *)&v50 + 1) = 0;
          if (v40)
            WTF::RefCounted<WebCore::FontCreationContextRareData>::deref(v40, v15);
          v41 = v48[1];
          v48[1] = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v41 -= 2;
          }
          v42 = v48[0];
          v48[0] = 0;
          if (v42)
            WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref((uint64_t)v42, (WTF::StringImpl *)v15);
          v43 = (WTF::StringImpl *)*((_QWORD *)&v47[1] + 1);
          *((_QWORD *)&v47[1] + 1) = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
      }
      while (1)
      {
        v10 += 88;
        if (v10 == v12)
          break;
        v49 = 0u;
        v50 = 0u;
        *(_OWORD *)v48 = 0u;
        memset(v47, 0, sizeof(v47));
        if ((WebCore::operator==(v10, (unsigned __int8 *)v47) & 1) == 0 && !*v10)
          goto LABEL_35;
      }
      v10 = v12;
LABEL_35:
      ;
    }
    while (v10 != (unsigned __int8 *)v13);
  }
  return (unsigned __int8 *)WTF::Vector<WebCore::FontPlatformDataCacheKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a1, v14);
}

uint64_t WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::remove(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _OWORD v23[5];

  v2 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    return result;
  v4 = (uint64_t *)result;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::computeHash<WebCore::FontPlatformDataCacheKey>((uint64_t)a2) & v5;
  v7 = v2 + 88 * v6;
  result = WebCore::operator==((unsigned __int8 *)v7, a2);
  if ((result & 1) != 0)
  {
LABEL_6:
    v10 = *v4;
    if (!*v4)
    {
LABEL_11:
      if (v10 != v7)
      {
        v12 = *(_QWORD *)(v7 + 72);
        *(_QWORD *)(v7 + 72) = 0;
        if (v12)
          WTF::RefCounted<WebCore::FontCreationContextRareData>::deref(v12, v8);
        v13 = *(WTF::StringImpl **)(v7 + 40);
        *(_QWORD *)(v7 + 40) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = *(_QWORD *)(v7 + 32);
        *(_QWORD *)(v7 + 32) = 0;
        if (v14)
          WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v14, (WTF::StringImpl *)v8);
        v15 = *(WTF::StringImpl **)(v7 + 24);
        *(_QWORD *)(v7 + 24) = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v15 -= 2;
        }
        *(_BYTE *)v7 = 1;
        *(_BYTE *)(v7 + 14) = 0;
        *(_QWORD *)(v7 + 4) = 0;
        *(_BYTE *)(v7 + 12) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        result = *(_QWORD *)(v7 + 80);
        *(_QWORD *)(v7 + 80) = 0;
        if (result)
        {
          WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)result, (WTF::StringImpl *)v8);
          result = WTF::fastFree(v16, v17);
        }
        ++*(_DWORD *)(*v4 - 16);
        v18 = *v4;
        if (*v4)
          v19 = *(_DWORD *)(v18 - 12) - 1;
        else
          v19 = -1;
        *(_DWORD *)(v18 - 12) = v19;
        v20 = *v4;
        if (*v4)
        {
          v21 = 6 * *(_DWORD *)(v20 - 12);
          v22 = *(_DWORD *)(v20 - 4);
          if (v21 < v22 && v22 >= 9)
            return WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::rehash(v4, v22 >> 1, 0);
        }
      }
      return result;
    }
    v11 = *(_DWORD *)(v10 - 4);
LABEL_10:
    v10 += 88 * v11;
    if (v10 == v7)
      return result;
    goto LABEL_11;
  }
  v9 = 1;
  while (1)
  {
    memset(v23, 0, sizeof(v23));
    result = WebCore::operator==((unsigned __int8 *)v7, (unsigned __int8 *)v23);
    if ((result & 1) != 0)
      break;
    v6 = (v6 + v9) & v5;
    v7 = v2 + 88 * v6;
    result = WebCore::operator==((unsigned __int8 *)v7, a2);
    ++v9;
    if ((result & 1) != 0)
      goto LABEL_6;
  }
  v10 = *v4;
  if (*v4)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v7 = v10 + 88 * v11;
    goto LABEL_10;
  }
  return result;
}

uint64_t WebCore::FontCache::fontCount(WebCore::FontCache *this)
{
  uint64_t v1;

  v1 = **((_QWORD **)this + 9);
  if (v1)
    return *(unsigned int *)(v1 - 12);
  else
    return 0;
}

unsigned int *WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FontSelector>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned int *result;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  char v23;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore12FontSelectorES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v23);
    v21 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a1)
    {
      v21 = *(_DWORD *)(*(_QWORD *)a1 - 12);
      if (v21 > 0x7FFFFFFE)
        v21 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v21;
  }
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v10 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v8;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
      v8 = *(_QWORD *)(a2 + 16);
    }
  }
  do
    v13 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v13 + 1, (unsigned int *)v8));
  do
    v14 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v14 + 1, (unsigned int *)v8));
  v22 = (WTF *)v8;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v22, a3);
  result = (unsigned int *)v22;
  v22 = 0;
  if (result)
  {
    do
    {
      v19 = __ldaxr(result);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, result));
    if (!v20)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
    }
  }
  if (v8)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v8);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v8));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v15);
    }
  }
  return result;
}

uint64_t WebCore::dispatchToAllFontCaches<WebCore::FontCache::invalidateAllFontCaches(WebCore::FontCache::ShouldRunInvalidationCallback)::$_0>(WebCore *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::FontCache *v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  unint64_t i;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(WebCore::FontCache **)(v3 + 80);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v3);
    v4 = *(WebCore::FontCache **)(v3 + 80);
  }
  v5 = WebCore::FontCache::invalidate(v4, a2);
  v6 = WebCore::WorkerOrWorkletThread::workerOrWorkletThreads((WebCore::WorkerOrWorkletThread *)v5);
  WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::begin((uint64_t)v6, &v18);
  v21 = 0;
  memset(v17, 0, sizeof(v17));
  v22 = 0;
  WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v7);
  v9 = v20;
  for (i = v19; v9 != v19; v20 = v9)
  {
    if (v9 >= i)
    {
      __break(0xC471u);
      JUMPOUT(0x196168DC0);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(v18 + 8 * v9) + 48);
    v14 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v14 = off_1E340B788;
    *(_BYTE *)(v14 + 8) = 0;
    v21 = v14;
    LOBYTE(v22) = 0;
    v23 = 0;
    (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v13 + 32))(v13, &v21, &v23);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    i = v19;
    if (v20 >= v19)
    {
      __break(0xC471u);
      JUMPOUT(0x196168DE0);
    }
    v9 = v20 + 1;
  }
  WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v8);
  return WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v11);
}

uint64_t WebCore::FontCache::releaseNoncriticalMemory(float **this)
{
  void *v2;

  WebCore::FontCache::purgeInactiveFontData((WebCore::FontCache *)this, (WTF::StringImpl *)0xFFFFFFFFLL);
  WebCore::FontCascadeCache::clearWidthCaches(this + 10);
  return WebCore::FontCache::platformReleaseNoncriticalMemory((WebCore::FontCache *)this, v2);
}

uint64_t WebCore::dispatchToAllFontCaches<WebCore::FontCache::releaseNoncriticalMemoryInAllFontCaches(void)::$_0>(WebCore *a1)
{
  uint64_t v1;
  uint64_t v2;
  float **v3;
  WebCore::WorkerOrWorkletThread *v4;
  uint64_t *v5;
  void *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 96)) == 0)
    v2 = WebCore::threadGlobalDataSlow(a1);
  v3 = *(float ***)(v2 + 80);
  if (!v3)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v2);
    v3 = *(float ***)(v2 + 80);
  }
  v4 = (WebCore::WorkerOrWorkletThread *)WebCore::FontCache::releaseNoncriticalMemory(v3);
  v5 = WebCore::WorkerOrWorkletThread::workerOrWorkletThreads(v4);
  WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::begin((uint64_t)v5, &v17);
  v20 = 0;
  memset(v16, 0, sizeof(v16));
  v21 = 0;
  WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v6);
  v8 = v19;
  for (i = v18; v8 != v18; v19 = v8)
  {
    if (v8 >= i)
    {
      __break(0xC471u);
      JUMPOUT(0x196168F88);
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v17 + 8 * v8) + 48);
    v13 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = off_1E340B7B0;
    *(_BYTE *)(v13 + 8) = 0;
    v20 = v13;
    LOBYTE(v21) = 0;
    v22 = 0;
    (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v12 + 32))(v12, &v20, &v22);
    v14 = v22;
    v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v20;
    v20 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    i = v18;
    if (v19 >= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x196168FA8);
    }
    v8 = v19 + 1;
  }
  WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v7);
  return WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v10);
}

WTF::StringImpl *WebCore::FontCache::useBackslashAsYenSignForFamily(WTF::AtomString const&)::$_0::operator()(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  _QWORD v9[3];
  WTF::StringImpl *v10;

  v3 = a1 + 96;
  if (a3 >= 2)
  {
    WTF::AtomStringImpl::add();
    v4 = (WTF::StringImpl *)v9[0];
  }
  else
  {
    v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  v10 = v4;
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v9, v3, (WTF::StringImpl *)&v10);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::AtomStringImpl::add();
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v9, v3, (WTF::StringImpl *)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FontCascade::FontCascade(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::FontCache *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  unsigned int v24;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 28) = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 40) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 44) = v4;
  v5 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  v6 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 56) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(a1 + 64) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 68) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v7 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 72) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_DWORD *)(a1 + 80) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = 0;
  *(_DWORD *)(a1 + 84) = v7;
  v8 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(a1 + 88) = v8;
  v9 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(a1 + 96) = v9;
  v10 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 104);
  v11 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 136) = a2[15];
  v12 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(a1 + 144) = v12;
  v13 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(a1 + 152) = v13;
  v14 = *((_OWORD *)a2 + 9);
  *(_QWORD *)(a1 + 175) = *(uint64_t *)((char *)a2 + 159);
  *(_OWORD *)(a1 + 160) = v14;
  v15 = a2[21];
  a2[21] = 0;
  *(_QWORD *)(a1 + 184) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 44);
  *(_WORD *)(a1 + 196) = *((_WORD *)a2 + 90);
  *(_DWORD *)(a1 + 192) = v15;
  *(_DWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 204) = 4;
  *(_BYTE *)(a1 + 206) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 212) = 4;
  *(_BYTE *)(a1 + 214) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  do
  {
    v16 = __ldaxr(&WebCore::lastFontCascadeGeneration);
    v17 = v16 + 1;
  }
  while (__stlxr(v17, &WebCore::lastFontCascadeGeneration));
  *(_DWORD *)(a1 + 224) = v17;
  v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
    v19 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v20 = *(WebCore::FontCache **)(v19 + 80);
  if (!v20)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v19);
    v20 = *(WebCore::FontCache **)(v19 + 80);
  }
  v21 = *(_QWORD *)(a1 + 184);
  if (!*(_DWORD *)(v21 + 4))
  {
    __break(0xC471u);
    JUMPOUT(0x196169424);
  }
  *(_BYTE *)(a1 + 228) = WebCore::FontCache::useBackslashAsYenSignForFamily(v20, (const WTF::AtomString *)(v21 + 8));
  v23 = (*(unsigned __int8 *)(a1 + 196) >> 1) & 3;
  if (v23 != 1)
    LOBYTE(v23) = v23 != 2 && (*(_DWORD *)(a1 + 176) & 0x30) != 16;
  *(_BYTE *)(a1 + 229) = v23;
  *(_BYTE *)(a1 + 230) = WebCore::FontCascade::computeRequiresShaping((WebCore::FontCascade *)a1, v22);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v24 = (*(unsigned __int16 *)(a1 + 180) | (*(unsigned __int8 *)(a1 + 182) << 16)) & 0xFFFDFFFF;
  *(_WORD *)(a1 + 180) = *(_WORD *)(a1 + 180);
  *(_BYTE *)(a1 + 182) = BYTE2(v24);
  return a1;
}

WebCore::FontCascadeFonts *WebCore::FontCascade::update(WebCore *a1, WebCore **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(a1);
  v6 = *(_QWORD *)(v5 + 80);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v5);
    v6 = *(_QWORD *)(v5 + 80);
  }
  return WebCore::FontCache::updateFontCascade(v6, (uint64_t)a1, a2);
}

void WebCore::FontCascade::layoutComplexText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __n128 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __n128 v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  float32x2_t v26;
  uint64_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  float64x2_t v39;
  WTF *v40;
  float64x2_t v41;
  WTF *v42;
  uint64_t v43;
  _BYTE v44[8192];
  WTF *v45;
  uint64_t v46;
  _BYTE v47[2048];
  WTF *v48;
  uint64_t v49;
  _BYTE v50[16384];
  WTF *v51;
  uint64_t v52;
  _BYTE v53[16384];
  WTF *v54;
  uint64_t v55;
  _BYTE v56[8192];
  float64x2_t v57;
  _QWORD v58[702];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v2;
  *(_QWORD *)v2 = v2 + 16;
  *(_QWORD *)(v2 + 8) = 1024;
  *(_QWORD *)(v2 + 8208) = v2 + 8224;
  *(_QWORD *)(v2 + 8216) = 1024;
  *(_QWORD *)(v2 + 10272) = v2 + 10288;
  *(_QWORD *)(v2 + 10280) = 1024;
  *(_QWORD *)(v2 + 26672) = v2 + 26688;
  *(_QWORD *)(v2 + 26680) = 1024;
  *(_QWORD *)(v2 + 43072) = v2 + 43088;
  *(_QWORD *)(v2 + 43080) = 1024;
  *(_OWORD *)(v2 + 51280) = 0u;
  WebCore::ComplexTextController::ComplexTextController((WebCore::ComplexTextController *)v58, v10, v7, 0, 0, v11);
  v42 = (WTF *)v44;
  v43 = 1024;
  v45 = (WTF *)v47;
  v46 = 1024;
  v48 = (WTF *)v50;
  v49 = 1024;
  v51 = (WTF *)v53;
  v52 = 1024;
  v54 = (WTF *)v56;
  v55 = 1024;
  v57 = 0u;
  WebCore::ComplexTextController::advance((uint64_t)v58, v6, (uint64_t)&v42, 0, 0, 0.0, v12, v13, v14, v15, v16);
  WebCore::ComplexTextController::advance((uint64_t)v58, v4, v9, 0, 0, v17, v18, v19, v20, v21, v22);
  v24 = *(_DWORD *)(v9 + 12);
  if (v24)
  {
    v25 = HIDWORD(v43);
    if ((*(_BYTE *)(v8 + 37) & 2) != 0)
    {
      v26 = (float32x2_t)v58[694];
      if (HIDWORD(v43))
      {
        if (HIDWORD(v49) <= HIDWORD(v43) - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1961697C4);
        }
        v38 = v48;
        do
        {
          v39 = *(float64x2_t *)v38;
          v38 = (WTF *)((char *)v38 + 16);
          v26 = vsub_f32(v26, vcvt_f32_f64(v39));
          --v25;
        }
        while (v25);
      }
      if (v24 <= 1)
        v27 = 1;
      else
        v27 = v24;
      if (*(_DWORD *)(v9 + 10284) > (v27 - 1))
      {
        v28 = *(float64x2_t **)(v9 + 10272);
        do
        {
          v29 = *v28++;
          v26 = vsub_f32(v26, vcvt_f32_f64(v29));
          --v27;
        }
        while (v27);
        v30 = v24 - 1;
        if (v24 != 1)
        {
          v31 = 1;
          do
            WebCore::GlyphBuffer::swap(v9, v31 - 1, v30--);
          while (v31++ < v30);
        }
        goto LABEL_16;
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x1961697BCLL);
    }
    v26 = vcvt_f32_f64(v57);
    if (HIDWORD(v43))
    {
      if (HIDWORD(v49) <= HIDWORD(v43) - 1)
        goto LABEL_43;
      v40 = v48;
      do
      {
        v41 = *(float64x2_t *)v40;
        v40 = (WTF *)((char *)v40 + 16);
        v26 = vadd_f32(v26, vcvt_f32_f64(v41));
        --v25;
      }
      while (v25);
    }
LABEL_16:
    *(float64x2_t *)(v9 + 51280) = vcvtq_f64_f32(v26);
  }
  v33 = v54;
  if (v56 != (_BYTE *)v54 && v54)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree(v33, v23);
  }
  v34 = v51;
  if (v53 != (_BYTE *)v51 && v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v34, v23);
  }
  v35 = v48;
  if (v50 != (_BYTE *)v48 && v48)
  {
    v48 = 0;
    LODWORD(v49) = 0;
    WTF::fastFree(v35, v23);
  }
  v36 = v45;
  if (v47 != (_BYTE *)v45 && v45)
  {
    v45 = 0;
    LODWORD(v46) = 0;
    WTF::fastFree(v36, v23);
  }
  v37 = v42;
  if (v44 != (_BYTE *)v42 && v42)
  {
    v42 = 0;
    LODWORD(v43) = 0;
    WTF::fastFree(v37, v23);
  }
  WebCore::ComplexTextController::~ComplexTextController((WebCore::ComplexTextController *)v58, (WTF::StringImpl *)v23);
}

float WebCore::FontCascade::wordSpacing(WebCore::FontCascade *this)
{
  char *v1;
  int v2;
  float result;
  float v4;

  v1 = (char *)this + 208;
  v2 = *((unsigned __int8 *)this + 212);
  if (v2 == 4)
  {
    if (*((_BYTE *)this + 214))
      return *(float *)v1;
    else
      return (float)*(int *)v1;
  }
  else if (v2 == 3)
  {
    if (*((_BYTE *)this + 214))
      v4 = *(float *)v1;
    else
      v4 = (float)*(int *)v1;
    return (float)(v4 / 100.0) * *((float *)this + 43);
  }
  else
  {
    result = 0.0;
    if (v2 == 11)
      WebCore::Length::nonNanCalculatedValue((WebCore::FontCascade *)((char *)this + 208), *((float *)this + 43));
  }
  return result;
}

uint64_t WebCore::FontCascade::codePath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = WebCore::FontCascade::s_codePath;
  if (!WebCore::FontCascade::s_codePath)
  {
    if (!*(_BYTE *)(a1 + 229) && !*(_BYTE *)(a1 + 230))
      goto LABEL_12;
    if ((a3 & 0xFF00000000) != 0 && (_DWORD)a3)
      return 2;
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 4);
    if ((a4 & 0xFF00000000) != 0 && (_DWORD)v6 != (_DWORD)a4)
    {
      return 2;
    }
    else
    {
LABEL_12:
      if ((*(_BYTE *)(a2 + 37) & 8) != 0 && (v7 = *(_QWORD *)(a2 + 8)) != 0 && (*(_BYTE *)(v7 + 16) & 4) == 0)
        return WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v7 + 8), *(unsigned int *)(v7 + 4));
      else
        return 1;
    }
  }
  return result;
}

uint64_t WebCore::FontCascade::drawEmphasisMarks(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  float *v8;
  float *v9;
  WTF::AtomString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  void *v28;
  double v29;
  double v30;
  float v31;
  float v32;
  WTF *v33;
  WebCore *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  const WebCore::Font *v39;
  __int16 v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  __int16 v53;
  unsigned int v54;
  __int16 v55;
  double v56;
  double v57;
  __n128 v58;
  void *v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  void *v70;
  WTF *v71;
  void *v72;
  WTF *v73;
  uint64_t v74;
  WTF::AtomString *v75;
  WTF *v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  WTF *v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  WTF *v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  WTF *v88;
  int v89;
  uint64_t v90;
  WTF *v91;
  int v92;
  _QWORD v93[1026];
  WTF *v94;
  uint64_t v95;
  _BYTE v96[8192];
  WTF *v97;
  uint64_t v98;
  _BYTE v99[2048];
  WTF *v100;
  uint64_t v101;
  _BYTE v102[16384];
  WTF *v103;
  uint64_t v104;
  _BYTE v105[16384];
  WTF *v106;
  uint64_t v107;
  _OWORD v108[513];
  unint64_t v109;
  unsigned __int16 v110;
  WTF *v111;
  char v112;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v74 = (uint64_t)v3;
  v75 = v10;
  v12 = v11;
  v13 = v2;
  v14 = *(_QWORD *)(v2 + 216);
  if (!v14)
  {
LABEL_12:
    v24 = *(_QWORD *)(v12 + 8);
    v25 = v5 & 0xFF00000000;
    v26 = WebCore::FontCascade::s_codePath;
    if (WebCore::FontCascade::s_codePath)
      goto LABEL_22;
    if (!*(_BYTE *)(v13 + 229) && !*(_BYTE *)(v13 + 230))
    {
LABEL_18:
      if (!v24 || (*(_BYTE *)(v12 + 37) & 8) == 0 || (*(_BYTE *)(v24 + 16) & 4) != 0)
        goto LABEL_23;
      v26 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v24 + 8), *(unsigned int *)(v24 + 4));
LABEL_22:
      if (v26 != 2)
      {
LABEL_23:
        WebCore::FontCascade::layoutSimpleText((uint64_t)&v76, v13);
LABEL_24:
        WebCore::GlyphBuffer::flatten((WebCore::GlyphBuffer *)&v76);
        if (v78)
        {
          v29 = *(double *)&v93[1024];
          v30 = *(double *)&v93[1025];
          v31 = *v9;
          v32 = v9[1];
          WebCore::FontCascade::getEmphasisMarkGlyphData((unsigned __int16 *)v13, v75, (uint64_t)&v110);
          if (v112)
          {
            v33 = v111;
            if (v111)
            {
              v34 = (WebCore *)*((_QWORD *)v111 + 1);
              if (v34)
              {
                ++*(_DWORD *)v34;
                if (!v78)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196169F20);
                }
                v73 = v33;
                if (!v82)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196169F28);
                }
                v35 = v29;
                v36 = v30;
                v37 = v31 + v35;
                v38 = v32 + v36;
                v39 = (const WebCore::Font *)v110;
                v40 = *((_WORD *)v34 + 166);
                WebCore::offsetToMiddleOfGlyph(*(WebCore **)v76, (const WebCore::Font *)*(unsigned __int16 *)v80);
                v42 = v41;
                v43 = v37 + v41;
                WebCore::offsetToMiddleOfGlyph(v34, v39);
                *(float *)&v109 = v43 - v44;
                *((float *)&v109 + 1) = v38;
                v94 = (WTF *)v96;
                v95 = 1024;
                v97 = (WTF *)v99;
                v98 = 1024;
                v100 = (WTF *)v102;
                v101 = 1024;
                v103 = (WTF *)v105;
                v104 = 1024;
                v106 = (WTF *)v108;
                v107 = 1024;
                v108[512] = 0u;
                v45 = v78;
                if (v78 >= 2)
                {
                  v46 = 0;
                  v47 = 0;
                  while (1)
                  {
                    v48 = v47 + 1;
                    if (v47 + 1 >= v82)
                      break;
                    WebCore::offsetToMiddleOfGlyph(*((WebCore **)v76 + v47 + 1), (const WebCore::Font *)*((unsigned __int16 *)v80 + v47 + 1));
                    if (v47 >= v86)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196169F10);
                    }
                    if (v47 >= v82)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196169F18);
                    }
                    v50 = v49;
                    v51 = *(double *)((char *)v84 + v46);
                    v52 = v50 + (float)(v51 - v42);
                    if (*((unsigned __int16 *)v80 + v47) - 1 >= 0xFFFE)
                      v53 = v40;
                    else
                      v53 = (__int16)v39;
                    WebCore::GlyphBuffer::add((WebCore::GlyphBuffer *)&v94, v53, v34, v52, 0x7FFFFFFFFFFFFFFFLL);
                    v45 = v78;
                    v46 += 16;
                    ++v47;
                    v42 = v50;
                    if (v48 + 1 >= v78)
                      goto LABEL_39;
                  }
LABEL_92:
                  __break(0xC471u);
                  JUMPOUT(0x196169F08);
                }
LABEL_39:
                v54 = v45 - 1;
                if (v82 <= v54)
                  goto LABEL_92;
                if (*((unsigned __int16 *)v80 + v54) - 1 >= 0xFFFE)
                  v55 = v40;
                else
                  v55 = (__int16)v39;
                WebCore::GlyphBuffer::add((WebCore::GlyphBuffer *)&v94, v55, v34, 0.0, 0x7FFFFFFFFFFFFFFFLL);
                WebCore::FontCascade::drawGlyphBuffer(v13, v74, (uint64_t)&v94, &v109, 0, v56, v57, v58);
                v60 = v106;
                if (v108 != (_OWORD *)v106 && v106)
                {
                  v106 = 0;
                  LODWORD(v107) = 0;
                  WTF::fastFree(v60, v59);
                }
                v61 = v103;
                if (v105 != (_BYTE *)v103 && v103)
                {
                  v103 = 0;
                  LODWORD(v104) = 0;
                  WTF::fastFree(v61, v59);
                }
                v62 = v100;
                if (v102 != (_BYTE *)v100 && v100)
                {
                  v100 = 0;
                  LODWORD(v101) = 0;
                  WTF::fastFree(v62, v59);
                }
                v63 = v97;
                if (v99 != (_BYTE *)v97 && v97)
                {
                  v97 = 0;
                  LODWORD(v98) = 0;
                  WTF::fastFree(v63, v59);
                }
                v64 = v94;
                if (v96 != (_BYTE *)v94 && v94)
                {
                  v94 = 0;
                  LODWORD(v95) = 0;
                  WTF::fastFree(v64, v59);
                }
                WTF::RefCounted<WebCore::Font>::deref(v34);
                v33 = v73;
              }
              if (*(_DWORD *)v33 == 1)
                WTF::fastFree(v33, v28);
              else
                --*(_DWORD *)v33;
            }
          }
        }
        v65 = v91;
        if (v93 != (_QWORD *)v91 && v91)
        {
          v91 = 0;
          v92 = 0;
          WTF::fastFree(v65, v28);
        }
        v66 = v88;
        if (&v90 != (uint64_t *)v88 && v88)
        {
          v88 = 0;
          v89 = 0;
          WTF::fastFree(v66, v28);
        }
        v67 = v84;
        if (&v87 != (uint64_t *)v84 && v84)
        {
          v84 = 0;
          v85 = 0;
          WTF::fastFree(v67, v28);
        }
        v68 = v80;
        if (&v83 != (uint64_t *)v80 && v80)
        {
          v80 = 0;
          v81 = 0;
          WTF::fastFree(v68, v28);
        }
        result = (uint64_t)v76;
        if (&v79 != (uint64_t *)v76)
        {
          if (v76)
          {
            v76 = 0;
            v77 = 0;
            return WTF::fastFree((WTF *)result, v28);
          }
        }
        return result;
      }
LABEL_60:
      WebCore::FontCascade::layoutComplexText((uint64_t)&v76, v13);
      goto LABEL_24;
    }
    if (v7)
      goto LABEL_60;
    if (v24)
    {
      v27 = *(_DWORD *)(v24 + 4);
      if (!v25)
        goto LABEL_18;
    }
    else
    {
      v27 = 0;
      if (!v25)
        goto LABEL_18;
    }
    if (v27 != (_DWORD)v5)
      goto LABEL_60;
    goto LABEL_18;
  }
  v15 = *(_DWORD *)v14 + 1;
  *(_DWORD *)v14 = v15;
  v16 = *(_DWORD *)(v14 + 20);
  if (!v16)
  {
LABEL_10:
    v23 = v15 - 1;
    if (v23)
    {
      *(_DWORD *)v14 = v23;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v14, v3);
      WTF::fastFree(v69, v70);
    }
    goto LABEL_12;
  }
  v17 = *(unsigned int **)(v14 + 8);
  v18 = &v17[10 * v16];
  while (1)
  {
    v19 = v17[3];
    if ((_DWORD)v19)
      break;
LABEL_8:
    v17 += 10;
    if (v17 == v18)
    {
      v15 = *(_DWORD *)v14;
      goto LABEL_10;
    }
  }
  v20 = 16 * v19;
  v21 = (_QWORD *)(*(_QWORD *)v17 + 8);
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v21 + 24))(*v21);
    if ((result & 1) != 0)
      break;
    v21 += 2;
    v20 -= 16;
    if (!v20)
      goto LABEL_8;
  }
  if (*(_DWORD *)v14 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v14, v3);
    return WTF::fastFree(v71, v72);
  }
  else
  {
    --*(_DWORD *)v14;
  }
  return result;
}

WTF *WebCore::FontCascade::displayListForTextRun(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const void **v23;
  void *v24;
  double v25;
  __n128 v26;
  void *v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  WTF *result;
  long double v33[6];
  _QWORD v34[2];
  WTF *v35;
  int v36;
  int v37;
  uint64_t v38;
  WTF *v39;
  int v40;
  uint64_t v41;
  WTF *v42;
  int v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  uint64_t v47;
  WTF *v48;
  int v49;
  uint64_t v50;
  float64x2_t v51;
  uint64_t v52[22];
  int v53;
  char v54;
  _QWORD v55[480];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5;
  v8 = v7;
  v9 = v3;
  v11 = v10;
  v12 = v2;
  v14 = v13;
  v55[479] = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(v3 + 8);
  if (v15)
    v16 = *(_DWORD *)(v15 + 4);
  else
    v16 = 0;
  if ((v4 & 0xFF00000000) != 0)
    v17 = v4;
  else
    v17 = v16;
  v18 = WebCore::FontCascade::s_codePath;
  if (WebCore::FontCascade::s_codePath)
  {
LABEL_25:
    if (v18 == 2)
      goto LABEL_26;
    goto LABEL_10;
  }
  if (v15 && (*(_BYTE *)(v3 + 37) & 8) != 0 && (*(_BYTE *)(v15 + 16) & 4) == 0)
  {
    v18 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v15 + 8), *(unsigned int *)(v15 + 4));
    goto LABEL_25;
  }
LABEL_10:
  if (!*(_BYTE *)(v12 + 229) && !*(_BYTE *)(v12 + 230))
    goto LABEL_15;
  if (!v8)
  {
    v19 = *(_QWORD *)(v9 + 8);
    if (v19)
      LODWORD(v19) = *(_DWORD *)(v19 + 4);
    if (v17 == (_DWORD)v19)
    {
LABEL_15:
      WebCore::FontCascade::layoutSimpleText((uint64_t)&v35, v12);
      goto LABEL_16;
    }
  }
LABEL_26:
  WebCore::FontCascade::layoutComplexText((uint64_t)&v35, v12);
LABEL_16:
  WebCore::GlyphBuffer::flatten((WebCore::GlyphBuffer *)&v35);
  if (v37)
  {
    v21 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_QWORD *)(v21 + 32) = 0;
    v22 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 80))(v11);
    WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v52, v22);
    v53 = 0;
    v54 = 0;
    v34[0] = 0;
    v34[1] = 0;
    (*(void (**)(long double *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v11 + 672))(v33, v11, 0);
    v23 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    WebCore::DisplayList::Recorder::Recorder((uint64_t)v55, 1, v52, (const WebCore::FloatRect *)v34, v33, v23, 2);
    v55[0] = off_1E34136B0;
    v55[478] = v21;
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v52, v24);
    v52[0] = (uint64_t)vcvt_f32_f64(v51);
    WebCore::FontCascade::drawGlyphBuffer(v12, (uint64_t)v55, (uint64_t)&v35, (unint64_t *)v52, v6, *(double *)v52, v25, v26);
    WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v21, (void *)*(unsigned int *)(v21 + 12));
    v55[0] = off_1E34136B0;
    WebCore::DisplayList::Recorder::~Recorder((WebCore::DisplayList::Recorder *)v55, v27);
  }
  else
  {
    v21 = 0;
  }
  *v14 = v21;
  v28 = v48;
  if (&v50 != (uint64_t *)v48 && v48)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree(v28, v20);
  }
  v29 = v45;
  if (&v47 != (uint64_t *)v45 && v45)
  {
    v45 = 0;
    v46 = 0;
    WTF::fastFree(v29, v20);
  }
  v30 = v42;
  if (&v44 != (uint64_t *)v42 && v42)
  {
    v42 = 0;
    v43 = 0;
    WTF::fastFree(v30, v20);
  }
  v31 = v39;
  if (&v41 != (uint64_t *)v39 && v39)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree(v31, v20);
  }
  result = v35;
  if (&v38 != (uint64_t *)v35)
  {
    if (v35)
    {
      v35 = 0;
      v36 = 0;
      return (WTF *)WTF::fastFree(result, v20);
    }
  }
  return result;
}

void WebCore::FontCascade::widthOfTextRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __n128 v24;
  float v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __n128 v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  __n128 v37;
  uint64_t v38;
  unsigned int v39;
  float v40;
  float v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  void *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  WTF *v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;
  WTF *v59;
  uint64_t v60;
  _BYTE v61[5544];
  float v62;
  WTF *v63;
  uint64_t v64;
  _BYTE v65[2048];
  WTF *v66;
  uint64_t v67;
  _BYTE v68[16384];
  WTF *v69;
  uint64_t v70;
  _BYTE v71[16384];
  WTF *v72;
  uint64_t v73;
  _BYTE v74[8192];
  __int128 v75;
  uint64_t v76;
  _DWORD *v77;
  double v78;
  double v79;
  float v80;
  float v81;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = *(_QWORD *)(v3 + 8);
  if (!v9)
    return;
  v10 = v3;
  v11 = *(unsigned int *)(v9 + 4);
  if (!(_DWORD)v11)
    return;
  v12 = v8;
  v13 = v7;
  v14 = v6;
  v15 = v5;
  v16 = v4;
  v17 = v2;
  v18 = WebCore::FontCascade::s_codePath;
  if (!WebCore::FontCascade::s_codePath)
  {
    if ((*(_BYTE *)(v10 + 37) & 8) == 0 || (*(_BYTE *)(v9 + 16) & 4) != 0)
    {
LABEL_11:
      v43 = WebCore::WidthIterator::WidthIterator((uint64_t)&v76, v17, v10, v14, 0, 0);
      v59 = (WTF *)v61;
      v60 = 1024;
      v63 = (WTF *)v65;
      v64 = 1024;
      v66 = (WTF *)v68;
      v67 = 1024;
      v69 = (WTF *)v71;
      v70 = 1024;
      v72 = (WTF *)v74;
      v73 = 1024;
      v75 = 0u;
      WebCore::WidthIterator::advance(v43, v16, (WebCore::GlyphBuffer *)&v59);
      v25 = v81;
      WebCore::WidthIterator::advance((uint64_t)&v76, v15, (WebCore::GlyphBuffer *)&v59);
      v44 = *(_QWORD *)(v10 + 8);
      if (v44)
        v45 = *(_DWORD *)(v44 + 4);
      else
        v45 = 0;
      v40 = v81;
      WebCore::WidthIterator::advance((uint64_t)&v76, v45, (WebCore::GlyphBuffer *)&v59);
      v47 = *(double *)&v75;
      v48 = v78;
      v49 = *((double *)&v75 + 1);
      v50 = v79;
      *((double *)&v75 + 1) = (float)(v50 + v49);
      v41 = v81;
      *(double *)&v75 = (float)((float)(v48 + v47) + v80);
      v81 = (float)(v81 + v48) + v80;
      v80 = 0.0;
      v51 = v72;
      if (v74 != (_BYTE *)v72 && v72)
      {
        v72 = 0;
        LODWORD(v73) = 0;
        WTF::fastFree(v51, v46);
      }
      v52 = v69;
      if (v71 != (_BYTE *)v69 && v69)
      {
        v69 = 0;
        LODWORD(v70) = 0;
        WTF::fastFree(v52, v46);
      }
      v53 = v66;
      if (v68 != (_BYTE *)v66 && v66)
      {
        v66 = 0;
        LODWORD(v67) = 0;
        WTF::fastFree(v53, v46);
      }
      v54 = v63;
      if (v65 != (_BYTE *)v63 && v63)
      {
        v63 = 0;
        LODWORD(v64) = 0;
        WTF::fastFree(v54, v46);
      }
      v55 = v59;
      if (v61 != (_BYTE *)v59 && v59)
      {
        v59 = 0;
        LODWORD(v60) = 0;
        WTF::fastFree(v55, v46);
      }
      v56 = v77;
      v77 = 0;
      if (v56)
      {
        if (!*v56)
        {
          __break(0xC471u);
          JUMPOUT(0x19616A5A4);
        }
        --*v56;
      }
      v57 = v76;
      v76 = 0;
      if (v57)
      {
        v58 = *(_DWORD *)(v57 + 8);
        if (!v58)
        {
          __break(0xC471u);
          JUMPOUT(0x19616A5C4);
        }
        *(_DWORD *)(v57 + 8) = v58 - 1;
      }
      goto LABEL_24;
    }
    v18 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v9 + 8), v11);
  }
  if (v18 != 2)
    goto LABEL_11;
  WebCore::ComplexTextController::ComplexTextController((WebCore::ComplexTextController *)&v59, v17, v10, 0, v14, 0);
  WebCore::ComplexTextController::advance((uint64_t)&v59, v16, 0, 0, v14, v19, v20, v21, v22, v23, v24);
  v25 = v62;
  WebCore::ComplexTextController::advance((uint64_t)&v59, v15, 0, 0, v14, v26, v27, v28, v29, v30, v31);
  v38 = *(_QWORD *)(v10 + 8);
  if (v38)
    v39 = *(_DWORD *)(v38 + 4);
  else
    v39 = 0;
  v40 = v62;
  WebCore::ComplexTextController::advance((uint64_t)&v59, v39, 0, 0, v14, v32, v33, v34, v35, v36, v37);
  v41 = v62;
  WebCore::ComplexTextController::~ComplexTextController((WebCore::ComplexTextController *)&v59, v42);
LABEL_24:
  if (v13)
    *v13 = v25;
  if (v12)
    *v12 = v41 - v40;
}

uint64_t WebCore::FontCascade::protectedFonts@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 216);
  if (v2)
    ++*v2;
  *a2 = v2;
  return this;
}

WTF *WebCore::FontCascade::widthForSimpleText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::FontCascade *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF *result;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  float v26;
  float v27;
  float v28;
  int v29;
  double v30;
  int v31;
  int v32;
  int v33;
  float v34;
  int v35;
  double v36;
  int v37;
  double v38;
  int v39;
  double v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  WTF *v46;
  uint64_t v47;
  _BYTE v48[8192];
  WTF *v49;
  uint64_t v50;
  _BYTE v51[2048];
  WTF *v52;
  uint64_t v53;
  _BYTE v54[16384];
  WTF *v55;
  uint64_t v56;
  _BYTE v57[16384];
  WTF *v58;
  uint64_t v59;
  _BYTE v60[8192];
  __int128 v61;
  uint64_t v62;
  _DWORD *v63;
  double v64;
  double v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = (WebCore::FontCascade *)v2;
  v9 = WebCore::WidthIterator::WidthIterator((uint64_t)&v62, v2, v5, v8, v3 != 0, 0);
  v46 = (WTF *)v48;
  v47 = 1024;
  v49 = (WTF *)v51;
  v50 = 1024;
  v52 = (WTF *)v54;
  v53 = 1024;
  v55 = (WTF *)v57;
  v56 = 1024;
  v58 = (WTF *)v60;
  v59 = 1024;
  v61 = 0u;
  v10 = *(_QWORD *)(v6 + 8);
  if (v10)
    v11 = *(_DWORD *)(v10 + 4);
  else
    v11 = 0;
  WebCore::WidthIterator::advance(v9, v11, (WebCore::GlyphBuffer *)&v46);
  v13 = *(double *)&v61;
  v14 = v64;
  v15 = *((double *)&v61 + 1);
  v16 = v65;
  *((double *)&v61 + 1) = (float)(v16 + v15);
  *(double *)&v61 = (float)((float)(v14 + v13) + v66);
  v67 = (float)(v67 + v14) + v66;
  v66 = 0.0;
  if (v4)
  {
    v25 = *(_DWORD *)(v4 + 8);
    v26 = ceilf(-v69);
    v27 = 0.0;
    v28 = 0.0;
    if (!*(_BYTE *)(v4 + 16))
    {
      v45 = v26;
      v42 = WebCore::FontCascade::metricsOfPrimaryFont(v7, v12);
      v26 = v45;
      v27 = 0.0;
      v28 = (float)*(int *)(v42 + 44);
    }
    v29 = (int)(float)(v26 - v28);
    if (v25 / 64 > v29)
      v29 = v25 / 64;
    v30 = (float)v29 * 64.0;
    if (v30 > -2147483650.0)
      v31 = (int)v30;
    else
      v31 = 0x80000000;
    if (v30 < 2147483650.0)
      v32 = v31;
    else
      v32 = 0x7FFFFFFF;
    *(_DWORD *)(v4 + 8) = v32;
    v33 = *(_DWORD *)(v4 + 12);
    v34 = ceilf(v68);
    if (!*(_BYTE *)(v4 + 16))
    {
      v44 = v34;
      v43 = WebCore::FontCascade::metricsOfPrimaryFont(v7, v12);
      v34 = v44;
      v27 = (float)*(int *)(v43 + 48);
    }
    v35 = (int)(float)(v34 - v27);
    if (v33 / 64 > v35)
      v35 = v33 / 64;
    v36 = (float)v35 * 64.0;
    if (v36 >= 2147483650.0)
    {
      v37 = 0x7FFFFFFF;
    }
    else if (v36 <= -2147483650.0)
    {
      v37 = 0x80000000;
    }
    else
    {
      v37 = (int)v36;
    }
    *(_DWORD *)(v4 + 12) = v37;
    v38 = ceilf(v70) * 64.0;
    if (v38 >= 2147483650.0)
    {
      v39 = 0x7FFFFFFF;
    }
    else if (v38 <= -2147483650.0)
    {
      v39 = 0x80000000;
    }
    else
    {
      v39 = (int)v38;
    }
    *(_DWORD *)v4 = v39;
    v40 = ceilf(v71) * 64.0;
    if (v40 >= 2147483650.0)
    {
      v41 = 0x7FFFFFFF;
    }
    else if (v40 <= -2147483650.0)
    {
      v41 = 0x80000000;
    }
    else
    {
      v41 = (int)v40;
    }
    *(_DWORD *)(v4 + 4) = v41;
  }
  v17 = v58;
  if (v60 != (_BYTE *)v58 && v58)
  {
    v58 = 0;
    LODWORD(v59) = 0;
    WTF::fastFree(v17, v12);
  }
  v18 = v55;
  if (v57 != (_BYTE *)v55 && v55)
  {
    v55 = 0;
    LODWORD(v56) = 0;
    WTF::fastFree(v18, v12);
  }
  v19 = v52;
  if (v54 != (_BYTE *)v52 && v52)
  {
    v52 = 0;
    LODWORD(v53) = 0;
    WTF::fastFree(v19, v12);
  }
  v20 = v49;
  if (v51 != (_BYTE *)v49 && v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v20, v12);
  }
  result = v46;
  if (v48 != (_BYTE *)v46 && v46)
  {
    v46 = 0;
    LODWORD(v47) = 0;
    result = (WTF *)WTF::fastFree(result, v12);
  }
  v22 = v63;
  v63 = 0;
  if (v22)
  {
    if (!*v22)
    {
      __break(0xC471u);
      JUMPOUT(0x19616A9B4);
    }
    --*v22;
  }
  v23 = v62;
  v62 = 0;
  if (v23)
  {
    v24 = *(_DWORD *)(v23 + 8);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x19616A9D4);
    }
    *(_DWORD *)(v23 + 8) = v24 - 1;
  }
  return result;
}

float WebCore::FontCascade::widthForSimpleTextSlow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  float *v5;
  int v6;
  uint64_t v7;
  WebCore::FontCascadeFonts *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  float v44;
  float v45;
  int v46;
  int v47;
  _QWORD *v48;
  int v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int8x16_t v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  UniChar *v67;
  WTF **v68;
  void *v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  unsigned int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  WTF *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  float v101;
  float v102;
  int v103;
  int v104;
  _QWORD *v105;
  int v106;
  WTF *v107;
  WTF *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int8x16_t v116;
  uint64_t v117;
  uint64_t v118;
  UniChar *v119;
  WTF *v120;
  void *v121;
  WTF *v122;
  uint64_t v123;
  CGFloat v124;
  uint64_t v125;
  uint64_t height_high;
  void *v127;
  double v128;
  double v129;
  const void *v130;
  CGFloat v131;
  uint64_t v132;
  WTF *v133;
  float v134;
  double v135;
  float v136;
  float v137;
  float v138;
  WTF *v139;
  WTF *v141;
  WTF *v142;
  WTF *v143;
  WTF *v144;
  char *v146;
  char *v147;
  char *v148;
  WTF *v149;
  void *v150;
  CTFontOrientation v151;
  uint64_t v152;
  WTF *v153;
  CTFontOrientation v154;
  uint64_t v155;
  uint64_t v156;
  const WebCore::FontCascadeDescription *v157;
  _DWORD *v158;
  uint64_t v159;
  uint64_t v160;
  WTF *v161;
  CGFloat height;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  CGFloat v169;
  uint64_t v170;
  WTF *v171;
  int v172;
  unsigned int v173;
  WTF *v174;
  WTF *v175;
  unsigned int v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  __int16 v183;
  _OWORD *v184;
  uint64_t v185;
  WTF *v186;
  WTF *v187;
  WTF *v188;
  void *v189;
  _OWORD *v190;
  WTF *v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  unint64_t v197;
  unsigned int v198;
  WTF *v199;
  void *v200;
  _OWORD *v201;
  WTF *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  unsigned int v209;
  WTF *v210;
  WTF *v211;
  void *v212;
  WTF *v213;
  void *v214;
  WTF *v215;
  uint64_t v216;
  void *v217;
  CGFloat width;
  WTF *v219;
  int v220;
  unint64_t v221;
  __int128 v222;
  int8x16_t v223;
  __int128 v224;
  __int128 v225;
  char *v226;
  char *v227;
  char *v228;
  __int16 v229;
  void *v230;
  void *v231;
  WTF *v232;
  WTF *v233;
  WTF *v234;
  WTF *v235;
  WTF *v236;
  WTF *v237;
  __int128 v238;
  __int128 v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t *v242;
  _BYTE *v243;
  int v244;
  float *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned __int8 *v249;
  WTF *v250;
  uint64_t v251;
  _BYTE v252[8192];
  WTF *v253;
  uint64_t v254;
  _BYTE v255[2048];
  WTF *v256;
  uint64_t v257;
  _BYTE v258[16384];
  WTF *v259;
  uint64_t v260;
  _BYTE v261[16384];
  _OWORD *v262;
  uint64_t v263;
  _OWORD v264[513];
  const void *v265;
  CGSize v266;
  _WORD v267[256];
  __int128 v268;
  WTF *glyphs;
  uint64_t v270;
  void (*v271)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *);
  void *v272;
  uint64_t v273;
  WTF **v274;
  int v275;
  __int128 v276;
  _OWORD v277[2];
  int8x16x2_t v278;
  int8x16x2_t v279;
  int8x16x2_t v280;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v245 = v5;
  v244 = v6;
  v7 = v2;
  v250 = (WTF *)v252;
  v251 = 1024;
  v253 = (WTF *)v255;
  v254 = 1024;
  v256 = (WTF *)v258;
  v257 = 1024;
  v259 = (WTF *)v261;
  v260 = 1024;
  v262 = v264;
  v263 = 1024;
  v264[512] = 0u;
  v8 = *(WebCore::FontCascadeFonts **)(v2 + 216);
  if (v8)
    ++*(_DWORD *)v8;
  v9 = *((_QWORD *)v8 + 13);
  v246 = v2;
  v249 = v3;
  if (v9 && *(_QWORD *)(v9 + 8))
    goto LABEL_5;
  v156 = v4;
  v157 = (const WebCore::FontCascadeDescription *)(v2 + 16);
  v158 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v8, (const WebCore::FontCascadeDescription *)(v2 + 16), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v158, 1, (uint64_t)&v266);
  if (!*(_QWORD *)&v266.height || (v159 = *(_QWORD *)(*(_QWORD *)&v266.height + 8)) == 0)
  {
    v160 = 0;
    goto LABEL_202;
  }
  v160 = *(_QWORD *)(v159 + 8);
  if (!v160)
  {
    v160 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v160 = 1;
    *(_QWORD *)(v160 + 8) = v159;
    v232 = *(WTF **)(v159 + 8);
    *(_QWORD *)(v159 + 8) = v160;
    if (v232)
    {
      if (*(_DWORD *)v232 == 1)
      {
        WTF::fastFree(v232, v231);
        v160 = *(_QWORD *)(v159 + 8);
        if (!v160)
          goto LABEL_404;
      }
      else
      {
        --*(_DWORD *)v232;
      }
    }
  }
  ++*(_DWORD *)v160;
LABEL_404:
  v7 = v246;
LABEL_202:
  v4 = v156;
  v3 = v249;
  v161 = (WTF *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v8 + 13) = v160;
  if (v161)
  {
    if (*(_DWORD *)v161 == 1)
    {
      WTF::fastFree(v161, v249);
      v3 = v249;
      v4 = v156;
    }
    else
    {
      --*(_DWORD *)v161;
    }
  }
  height = v266.height;
  v266.height = 0.0;
  if (height != 0.0)
  {
    if (**(_DWORD **)&height == 1)
    {
      WTF::fastFree(*(WTF **)&height, v3);
      v3 = v249;
      v4 = v156;
    }
    else
    {
      --**(_DWORD **)&height;
    }
  }
  v163 = *((_QWORD *)v8 + 13);
  if (!v163 || (v164 = *(_QWORD *)(v163 + 8)) == 0)
  {
    if (!v158[3])
    {
      __break(0xC471u);
      JUMPOUT(0x19616C6ACLL);
    }
    v216 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v158 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v158 + 8), 1, v4);
    WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v266, v216);
    width = v266.width;
    v266.width = 0.0;
    v219 = (WTF *)*((_QWORD *)v8 + 13);
    *((CGFloat *)v8 + 13) = width;
    if (!v219)
      goto LABEL_346;
    v220 = *(_DWORD *)v219 - 1;
    if (*(_DWORD *)v219 == 1)
    {
      WTF::fastFree(v219, v217);
      v219 = *(WTF **)&v266.width;
      v266.width = 0.0;
      if (!v219)
        goto LABEL_346;
      v220 = *(_DWORD *)v219 - 1;
      if (*(_DWORD *)v219 == 1)
      {
        WTF::fastFree(v219, v230);
        goto LABEL_346;
      }
    }
    *(_DWORD *)v219 = v220;
LABEL_346:
    v7 = v246;
    v4 = v156;
    v3 = v249;
    goto LABEL_5;
  }
  if ((*(_BYTE *)(v164 + 256) & 2) != 0)
  {
    v165 = 1;
    do
    {
      v166 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v8, v157, v165);
      v3 = v249;
      v4 = v156;
      if (!*(_DWORD *)(v166 + 12))
        break;
      WebCore::FontRanges::glyphDataForCharacter(0x20u, v166, 0, (uint64_t)&v266);
      if (*(_QWORD *)&v266.height)
        v167 = *(_QWORD *)(*(_QWORD *)&v266.height + 8);
      else
        v167 = 0;
      WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&glyphs, v167);
      v169 = v266.height;
      v266.height = 0.0;
      if (v169 != 0.0)
      {
        if (**(_DWORD **)&v169 == 1)
          WTF::fastFree(*(WTF **)&v169, v168);
        else
          --**(_DWORD **)&v169;
      }
      v10 = glyphs;
      if (glyphs)
      {
        v170 = *((_QWORD *)glyphs + 1);
        if (!v170 || (*(_BYTE *)(v170 + 256) & 2) != 0)
        {
          v172 = 0;
          glyphs = 0;
        }
        else
        {
          glyphs = 0;
          v171 = (WTF *)*((_QWORD *)v8 + 13);
          *((_QWORD *)v8 + 13) = v10;
          if (!v171)
          {
            v7 = v246;
            v4 = v156;
            v3 = v249;
            goto LABEL_6;
          }
          if (*(_DWORD *)v171 != 1)
          {
            --*(_DWORD *)v171;
            goto LABEL_346;
          }
          WTF::fastFree(v171, v168);
          v10 = glyphs;
          glyphs = 0;
          if (!v10)
            goto LABEL_346;
          v172 = 2;
        }
        if (*(_DWORD *)v10 == 1)
          WTF::fastFree(v10, v168);
        else
          --*(_DWORD *)v10;
      }
      else
      {
        v172 = 0;
      }
      ++v165;
      v7 = v246;
      v4 = v156;
      v3 = v249;
    }
    while (!v172);
  }
LABEL_5:
  v10 = (WTF *)*((_QWORD *)v8 + 13);
  if (v10)
LABEL_6:
    v11 = *((_QWORD *)v10 + 1);
  else
    v11 = 0;
  v247 = v4;
  if (*(_DWORD *)v8 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v8, v3);
    WTF::fastFree(v149, v150);
    v3 = v249;
    v4 = v247;
  }
  else
  {
    --*(_DWORD *)v8;
  }
  v266.width = *(CGFloat *)(v7 + 136);
  ++*(_DWORD *)v11;
  v12 = v4;
  v248 = v4;
  if ((v4 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)v4)
      goto LABEL_141;
    v73 = 0;
    v74 = (uint64_t *)(v11 + 120);
    v75 = (uint64_t *)(v11 + 200);
    __asm { FMOV            V0.4S, #-1.0 }
    v239 = _Q0;
    v241 = (uint64_t *)(v11 + 200);
    v242 = (uint64_t *)(v11 + 120);
    while (1)
    {
      v77 = v3[v73];
      v78 = *v74;
      if (*v74
        || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v242, 8u, 0), v75 = (uint64_t *)(v11 + 200), v74 = (uint64_t *)(v11 + 120), v12 = v248, v3 = v249, (v78 = *v242) != 0))
      {
        v79 = *(_DWORD *)(v78 - 8);
      }
      else
      {
        v79 = 0;
      }
      v80 = v77 >> 4;
      v81 = 9 * ((v80 + ~(v80 << 15)) ^ ((v80 + ~(v80 << 15)) >> 10));
      v82 = (v81 ^ (v81 >> 6)) + ~((v81 ^ (v81 >> 6)) << 11);
      v83 = v79 & (v82 ^ HIWORD(v82));
      v84 = v78 + 16 * v83;
      v85 = *(_DWORD *)v84;
      if (*(_DWORD *)v84 != -1)
      {
        v86 = 0;
        v87 = 1;
        while (v85 != v80)
        {
          if (v85 == -2)
            v86 = v84;
          v83 = (v83 + v87) & v79;
          v84 = v78 + 16 * v83;
          v85 = *(_DWORD *)v84;
          ++v87;
          if (*(_DWORD *)v84 == -1)
          {
            if (!v86)
              goto LABEL_123;
            *(_DWORD *)v86 = -1;
            *(_QWORD *)(v86 + 8) = 0;
            --*(_DWORD *)(*v74 - 16);
            *(_DWORD *)v86 = v80;
            *(_QWORD *)(v86 + 8) = 0;
            v84 = v86;
            goto LABEL_126;
          }
        }
        goto LABEL_84;
      }
LABEL_123:
      v108 = *(WTF **)(v84 + 8);
      *(_DWORD *)v84 = v80;
      *(_QWORD *)(v84 + 8) = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 1)
        {
          --WebCore::GlyphPage::s_count;
          v186 = (WTF *)*((_QWORD *)v108 + 1);
          *((_QWORD *)v108 + 1) = 0;
          if (v186)
          {
            if (*(_DWORD *)v186 == 1)
              WTF::fastFree(v186, v3);
            else
              --*(_DWORD *)v186;
          }
          WTF::fastFree(v108, v3);
          v74 = (uint64_t *)(v11 + 120);
        }
        else
        {
          --*(_DWORD *)v108;
        }
      }
LABEL_126:
      v109 = *(_QWORD *)(v11 + 120);
      if (v109)
        v110 = *(_DWORD *)(v109 - 12) + 1;
      else
        v110 = 1;
      *(_DWORD *)(v109 - 12) = v110;
      v111 = *v74;
      if (*v74)
        v112 = *(_DWORD *)(v111 - 12);
      else
        v112 = 0;
      v113 = (*(_DWORD *)(v111 - 16) + v112);
      v114 = *(unsigned int *)(v111 - 4);
      if (v114 > 0x400)
      {
        if (v114 > 2 * v113)
          goto LABEL_132;
      }
      else
      {
        if (3 * v114 > 4 * v113)
          goto LABEL_132;
        if (!(_DWORD)v114)
        {
          v176 = 8;
          goto LABEL_325;
        }
      }
      v176 = (_DWORD)v114 << (6 * *(_DWORD *)(v111 - 12) >= (2 * v114));
LABEL_325:
      v84 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v74, v176, (int *)v84);
LABEL_132:
      v115 = WTF::fastMalloc((WTF *)0x44);
      *(_WORD *)v115 = v77 & 0xF0;
      v116 = (int8x16_t)vdupq_n_s16(v77 & 0xF0);
      *(int8x16_t *)(v115 + 2) = vorrq_s8(v116, (int8x16_t)xmmword_1969F77A0);
      *(int8x8_t *)(v115 + 18) = vorr_s8(*(int8x8_t *)v116.i8, (int8x8_t)0xC000B000A0009);
      *(_WORD *)(v115 + 26) = v77 & 0xF0 | 0xD;
      *(_WORD *)(v115 + 28) = v77 & 0xF0 | 0xE;
      *(_WORD *)(v115 + 30) = v77 & 0xF0 | 0xF;
      v117 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v117 = 1;
      v118 = *(_QWORD *)(v11 + 8);
      if (!v118)
      {
        v237 = (WTF *)v117;
        v118 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v118 = 1;
        *(_QWORD *)(v118 + 8) = v11;
        v215 = *(WTF **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = v118;
        if (v215)
        {
          if (*(_DWORD *)v215 == 1)
          {
            WTF::fastFree(v215, v214);
            v118 = *(_QWORD *)(v11 + 8);
            if (!v118)
            {
              v117 = (uint64_t)v237;
              goto LABEL_134;
            }
          }
          else
          {
            --*(_DWORD *)v215;
          }
        }
        v117 = (uint64_t)v237;
      }
      ++*(_DWORD *)v118;
LABEL_134:
      *(_QWORD *)(v117 + 8) = v118;
      *(_OWORD *)(v117 + 16) = 0u;
      *(_OWORD *)(v117 + 32) = 0u;
      *(_DWORD *)(v117 + 48) = 0;
      ++WebCore::GlyphPage::s_count;
      v235 = (WTF *)v115;
      v119 = (UniChar *)v115;
      v120 = (WTF *)v117;
      if ((WebCore::GlyphPage::fill(v117, v119, 0x10uLL) & 1) == 0)
      {
        if (*(_DWORD *)v120 == 1)
        {
          --WebCore::GlyphPage::s_count;
          v199 = (WTF *)*((_QWORD *)v120 + 1);
          *((_QWORD *)v120 + 1) = 0;
          if (v199)
          {
            if (*(_DWORD *)v199 == 1)
              WTF::fastFree(v199, v121);
            else
              --*(_DWORD *)v199;
          }
          WTF::fastFree(v120, v121);
        }
        else
        {
          --*(_DWORD *)v120;
        }
        v120 = 0;
      }
      WTF::fastFree(v235, v121);
      v122 = *(WTF **)(v84 + 8);
      *(_QWORD *)(v84 + 8) = v120;
      if (v122)
      {
        v12 = v248;
        v3 = v249;
        v75 = (uint64_t *)(v11 + 200);
        v74 = (uint64_t *)(v11 + 120);
        if (*(_DWORD *)v122 != 1)
        {
          --*(_DWORD *)v122;
          goto LABEL_84;
        }
        --WebCore::GlyphPage::s_count;
        v187 = (WTF *)*((_QWORD *)v122 + 1);
        *((_QWORD *)v122 + 1) = 0;
        if (v187)
        {
          if (*(_DWORD *)v187 == 1)
          {
            v210 = v122;
            WTF::fastFree(v187, v249);
            v122 = v210;
          }
          else
          {
            --*(_DWORD *)v187;
          }
        }
        WTF::fastFree(v122, v3);
      }
      v12 = v248;
      v3 = v249;
      v75 = (uint64_t *)(v11 + 200);
      v74 = (uint64_t *)(v11 + 120);
LABEL_84:
      v88 = *(WTF **)(v84 + 8);
      if (!v88)
      {
        LOWORD(v90) = 0;
        goto LABEL_109;
      }
      v89 = (*(_DWORD *)v88)++;
      v90 = *((unsigned __int16 *)v88 + (v77 & 0xF) + 8);
      if (v89)
      {
        *(_DWORD *)v88 = v89;
      }
      else
      {
        --WebCore::GlyphPage::s_count;
        v107 = (WTF *)*((_QWORD *)v88 + 1);
        *((_QWORD *)v88 + 1) = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 1)
            WTF::fastFree(v107, v3);
          else
            --*(_DWORD *)v107;
        }
        WTF::fastFree(v88, v3);
        v12 = v248;
        v3 = v249;
        v75 = (uint64_t *)(v11 + 200);
        v74 = (uint64_t *)(v11 + 120);
      }
      if (*(unsigned __int16 *)(v11 + 334) != v90)
      {
LABEL_88:
        LODWORD(v88) = v90 >> 4;
        if (v90 >= 0x10)
        {
          v91 = *v75;
          if (*v75
            || (WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v75, 8u, 0), v75 = (uint64_t *)(v11 + 200), v74 = (uint64_t *)(v11 + 120), v12 = v248, v3 = v249, (v91 = *v241) != 0))
          {
            v92 = *(_DWORD *)(v91 - 8);
          }
          else
          {
            v92 = 0;
          }
          v93 = 9 * ((~((_DWORD)v88 << 15) + (_DWORD)v88) ^ ((~((_DWORD)v88 << 15) + (_DWORD)v88) >> 10));
          v94 = (v93 ^ (v93 >> 6)) + ~((v93 ^ (v93 >> 6)) << 11);
          v95 = v92 & (v94 ^ HIWORD(v94));
          v96 = v91 + 16 * v95;
          v97 = *(_DWORD *)v96;
          if (*(_DWORD *)v96)
          {
            v98 = 0;
            v99 = 1;
            while (v97 != (_DWORD)v88)
            {
              if (v97 == -1)
                v98 = (_QWORD *)v96;
              v95 = (v95 + v99) & v92;
              v96 = v91 + 16 * v95;
              v97 = *(_DWORD *)v96;
              ++v99;
              if (!*(_DWORD *)v96)
              {
                if (v98)
                {
                  *v98 = 0;
                  v98[1] = 0;
                  --*(_DWORD *)(*v241 - 16);
                  v96 = (uint64_t)v98;
                }
                goto LABEL_307;
              }
            }
LABEL_94:
            v100 = *(_QWORD *)(v96 + 8);
LABEL_95:
            v101 = *(float *)(v100 + 4 * (v90 & 0xF));
            if (v101 == -1.0)
            {
              LOWORD(glyphs) = v90;
              v266 = (CGSize)*MEMORY[0x1E0C9D820];
              if (*(float *)(v11 + 96) != 0.0)
              {
                v154 = kCTFontOrientationHorizontal;
                if (*(_BYTE *)(v11 + 100))
                {
                  if ((*(_BYTE *)(v11 + 344) & 4) != 0)
                    v154 = kCTFontOrientationHorizontal;
                  else
                    v154 = kCTFontOrientationVertical;
                }
                CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v11 + 88), v154, (const CGGlyph *)&glyphs, &v266, 1);
              }
              v101 = v266.width;
              WebCore::GlyphMetricsMap<float>::locatePage(v11 + 128, (int)v88);
              *(float *)(v155 + 4 * (v90 & 0xF)) = v101;
              v12 = v248;
              v3 = v249;
              v75 = (uint64_t *)(v11 + 200);
              v74 = (uint64_t *)(v11 + 120);
            }
            v102 = v101 + *(float *)(v11 + 340);
            goto LABEL_97;
          }
LABEL_307:
          *(_DWORD *)v96 = (_DWORD)v88;
          v201 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
          *v201 = v239;
          v201[1] = v239;
          v201[2] = v239;
          v201[3] = v239;
          v202 = *(WTF **)(v96 + 8);
          *(_QWORD *)(v96 + 8) = v201;
          if (v202)
            WTF::fastFree(v202, v200);
          v75 = (uint64_t *)(v11 + 200);
          v203 = *v241;
          if (*v241)
            v204 = *(_DWORD *)(v203 - 12) + 1;
          else
            v204 = 1;
          v12 = v248;
          v3 = v249;
          v74 = (uint64_t *)(v11 + 120);
          *(_DWORD *)(v203 - 12) = v204;
          v205 = *v241;
          if (*v241)
            v206 = *(_DWORD *)(v205 - 12);
          else
            v206 = 0;
          v207 = (*(_DWORD *)(v205 - 16) + v206);
          v208 = *(unsigned int *)(v205 - 4);
          if (v208 > 0x400)
          {
            if (v208 > 2 * v207)
              goto LABEL_94;
          }
          else
          {
            if (3 * v208 > 4 * v207)
              goto LABEL_94;
            if (!(_DWORD)v208)
            {
              v209 = 8;
LABEL_317:
              v96 = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v241, v209, (int *)v96);
              v12 = v248;
              v3 = v249;
              v75 = (uint64_t *)(v11 + 200);
              v74 = (uint64_t *)(v11 + 120);
              goto LABEL_94;
            }
          }
          v209 = (_DWORD)v208 << (6 * *(_DWORD *)(v205 - 12) >= (2 * v208));
          goto LABEL_317;
        }
LABEL_109:
        if (*(_BYTE *)(v11 + 128))
        {
          v100 = v11 + 132;
        }
        else
        {
          *(_OWORD *)(v11 + 132) = v239;
          *(_OWORD *)(v11 + 148) = v239;
          *(_OWORD *)(v11 + 164) = v239;
          *(_OWORD *)(v11 + 180) = v239;
          v100 = v11 + 132;
          *(_BYTE *)(v11 + 128) = 1;
        }
        goto LABEL_95;
      }
      if (!v90)
      {
        LODWORD(v88) = 0;
        v12 = v248;
        v3 = v249;
        v75 = (uint64_t *)(v11 + 200);
        v74 = (uint64_t *)(v11 + 120);
        goto LABEL_109;
      }
      v102 = 0.0;
      v12 = v248;
      v3 = v249;
      v75 = (uint64_t *)(v11 + 200);
      v74 = (uint64_t *)(v11 + 120);
      if ((*(_BYTE *)(v11 + 256) & 2) != 0)
        goto LABEL_88;
LABEL_97:
      v266.width = v102;
      v266.height = 0.0;
      LOWORD(v276) = v90;
      *(_QWORD *)&v277[0] = v73;
      glyphs = (WTF *)v11;
      v103 = HIDWORD(v251);
      if (HIDWORD(v251) == (_DWORD)v251)
      {
        WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)&v250, (unint64_t)&glyphs);
        v75 = (uint64_t *)(v11 + 200);
        v74 = (uint64_t *)(v11 + 120);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        *((_QWORD *)v250 + HIDWORD(v251)) = v11;
        HIDWORD(v251) = v103 + 1;
      }
      v104 = HIDWORD(v254);
      if (HIDWORD(v254) == (_DWORD)v254)
      {
        WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v253, (unint64_t)&v276);
        v75 = (uint64_t *)(v11 + 200);
        v74 = (uint64_t *)(v11 + 120);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        *((_WORD *)v253 + HIDWORD(v254)) = v90;
        HIDWORD(v254) = v104 + 1;
      }
      if (HIDWORD(v257) == (_DWORD)v257)
      {
        WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)&v256, (unint64_t)&v266);
        v75 = (uint64_t *)(v11 + 200);
        v74 = (uint64_t *)(v11 + 120);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        *((CGSize *)v256 + HIDWORD(v257)) = v266;
        ++HIDWORD(v257);
      }
      v270 = 0;
      glyphs = 0;
      if (HIDWORD(v260) == (_DWORD)v260)
      {
        WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)&v259, (unint64_t)&glyphs);
        v75 = (uint64_t *)(v11 + 200);
        v74 = (uint64_t *)(v11 + 120);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        v105 = (_QWORD *)((char *)v259 + 16 * HIDWORD(v260));
        *v105 = 0;
        v105[1] = 0;
        ++HIDWORD(v260);
      }
      v106 = HIDWORD(v263);
      if (HIDWORD(v263) == (_DWORD)v263)
      {
        WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)&v262, (unint64_t)v277);
        v75 = (uint64_t *)(v11 + 200);
        v74 = (uint64_t *)(v11 + 120);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        *((_QWORD *)v262 + HIDWORD(v263)) = v73;
        HIDWORD(v263) = v106 + 1;
      }
      if (++v73 == v12)
        goto LABEL_141;
    }
  }
  if ((_DWORD)v4)
  {
    v13 = 0;
    v14 = (uint64_t *)(v11 + 120);
    v15 = (uint64_t *)(v11 + 200);
    v243 = (_BYTE *)(v11 + 128);
    __asm { FMOV            V0.4S, #-1.0 }
    v238 = _Q0;
    v240 = (uint64_t *)(v11 + 200);
    while (1)
    {
      v20 = *(unsigned __int16 *)&v3[2 * v13];
      v21 = *v14;
      if (*v14
        || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(v11 + 120), 8u, 0), v15 = (uint64_t *)(v11 + 200), v12 = v248, v3 = v249, (v21 = *v14) != 0))
      {
        v22 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        v22 = 0;
      }
      v23 = v20 >> 4;
      v24 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
      v25 = (v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11);
      v26 = v22 & (v25 ^ HIWORD(v25));
      v27 = v21 + 16 * v26;
      v28 = *(_DWORD *)v27;
      if (*(_DWORD *)v27 == -1)
        break;
      v29 = 0;
      v30 = 1;
      while (v28 != v23)
      {
        if (v28 == -2)
          v29 = v27;
        v26 = (v26 + v30) & v22;
        v27 = v21 + 16 * v26;
        v28 = *(_DWORD *)v27;
        ++v30;
        if (*(_DWORD *)v27 == -1)
        {
          if (!v29)
            goto LABEL_56;
          *(_DWORD *)v29 = -1;
          *(_QWORD *)(v29 + 8) = 0;
          --*(_DWORD *)(*v14 - 16);
          *(_DWORD *)v29 = v23;
          *(_QWORD *)(v29 + 8) = 0;
          v27 = v29;
          goto LABEL_59;
        }
      }
LABEL_17:
      v31 = *(WTF **)(v27 + 8);
      if (!v31)
      {
        LOWORD(v33) = 0;
        goto LABEL_42;
      }
      v32 = (*(_DWORD *)v31)++;
      v33 = *((unsigned __int16 *)v31 + (v20 & 0xF) + 8);
      if (v32)
      {
        *(_DWORD *)v31 = v32;
      }
      else
      {
        --WebCore::GlyphPage::s_count;
        v50 = (WTF *)*((_QWORD *)v31 + 1);
        *((_QWORD *)v31 + 1) = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 1)
            WTF::fastFree(v50, v3);
          else
            --*(_DWORD *)v50;
        }
        WTF::fastFree(v31, v3);
        v12 = v248;
        v3 = v249;
        v15 = (uint64_t *)(v11 + 200);
      }
      if (*(unsigned __int16 *)(v11 + 334) != v33)
      {
LABEL_21:
        LODWORD(v31) = v33 >> 4;
        if (v33 >= 0x10)
        {
          v34 = *v15;
          if (*v15
            || (WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v240, 8u, 0), v15 = (uint64_t *)(v11 + 200), v12 = v248, v3 = v249, (v34 = *v240) != 0))
          {
            v35 = *(_DWORD *)(v34 - 8);
          }
          else
          {
            v35 = 0;
          }
          v36 = 9 * ((~((_DWORD)v31 << 15) + (_DWORD)v31) ^ ((~((_DWORD)v31 << 15) + (_DWORD)v31) >> 10));
          v37 = (v36 ^ (v36 >> 6)) + ~((v36 ^ (v36 >> 6)) << 11);
          v38 = v35 & (v37 ^ HIWORD(v37));
          v39 = v34 + 16 * v38;
          v40 = *(_DWORD *)v39;
          if (*(_DWORD *)v39)
          {
            v41 = 0;
            v42 = 1;
            while (v40 != (_DWORD)v31)
            {
              if (v40 == -1)
                v41 = (_QWORD *)v39;
              v38 = (v38 + v42) & v35;
              v39 = v34 + 16 * v38;
              v40 = *(_DWORD *)v39;
              ++v42;
              if (!*(_DWORD *)v39)
              {
                if (v41)
                {
                  *v41 = 0;
                  v41[1] = 0;
                  --*(_DWORD *)(*v240 - 16);
                  v39 = (uint64_t)v41;
                }
                goto LABEL_283;
              }
            }
LABEL_27:
            v43 = *(_QWORD *)(v39 + 8);
LABEL_28:
            v44 = *(float *)(v43 + 4 * (v33 & 0xF));
            if (v44 == -1.0)
            {
              LOWORD(glyphs) = v33;
              v266 = (CGSize)*MEMORY[0x1E0C9D820];
              if (*(float *)(v11 + 96) != 0.0)
              {
                v151 = kCTFontOrientationHorizontal;
                if (*(_BYTE *)(v11 + 100))
                {
                  if ((*(_BYTE *)(v11 + 344) & 4) != 0)
                    v151 = kCTFontOrientationHorizontal;
                  else
                    v151 = kCTFontOrientationVertical;
                }
                CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v11 + 88), v151, (const CGGlyph *)&glyphs, &v266, 1);
              }
              v44 = v266.width;
              WebCore::GlyphMetricsMap<float>::locatePage((uint64_t)v243, (int)v31);
              *(float *)(v152 + 4 * (v33 & 0xF)) = v44;
              v12 = v248;
              v3 = v249;
              v15 = (uint64_t *)(v11 + 200);
            }
            v45 = v44 + *(float *)(v11 + 340);
            goto LABEL_30;
          }
LABEL_283:
          *(_DWORD *)v39 = (_DWORD)v31;
          v190 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
          *v190 = v238;
          v190[1] = v238;
          v190[2] = v238;
          v190[3] = v238;
          v191 = *(WTF **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = v190;
          if (v191)
            WTF::fastFree(v191, v189);
          v15 = (uint64_t *)(v11 + 200);
          v192 = *v240;
          if (*v240)
            v193 = *(_DWORD *)(v192 - 12) + 1;
          else
            v193 = 1;
          v12 = v248;
          v3 = v249;
          *(_DWORD *)(v192 - 12) = v193;
          v194 = *v240;
          if (*v240)
            v195 = *(_DWORD *)(v194 - 12);
          else
            v195 = 0;
          v196 = (*(_DWORD *)(v194 - 16) + v195);
          v197 = *(unsigned int *)(v194 - 4);
          if (v197 > 0x400)
          {
            if (v197 > 2 * v196)
              goto LABEL_27;
          }
          else
          {
            if (3 * v197 > 4 * v196)
              goto LABEL_27;
            if (!(_DWORD)v197)
            {
              v198 = 8;
LABEL_293:
              v39 = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v240, v198, (int *)v39);
              v15 = (uint64_t *)(v11 + 200);
              v12 = v248;
              v3 = v249;
              goto LABEL_27;
            }
          }
          v198 = (_DWORD)v197 << (6 * *(_DWORD *)(v194 - 12) >= (2 * v197));
          goto LABEL_293;
        }
LABEL_42:
        if (*v243)
        {
          v43 = v11 + 132;
        }
        else
        {
          *(_OWORD *)(v11 + 132) = v238;
          *(_OWORD *)(v11 + 148) = v238;
          *(_OWORD *)(v11 + 164) = v238;
          *(_OWORD *)(v11 + 180) = v238;
          v43 = v11 + 132;
          *(_BYTE *)(v11 + 128) = 1;
        }
        goto LABEL_28;
      }
      if (!v33)
      {
        LODWORD(v31) = 0;
        v12 = v248;
        v3 = v249;
        v15 = (uint64_t *)(v11 + 200);
        goto LABEL_42;
      }
      v45 = 0.0;
      v12 = v248;
      v3 = v249;
      v15 = (uint64_t *)(v11 + 200);
      if ((*(_BYTE *)(v11 + 256) & 2) != 0)
        goto LABEL_21;
LABEL_30:
      v266.width = v45;
      v266.height = 0.0;
      LOWORD(v276) = v33;
      *(_QWORD *)&v277[0] = v13;
      glyphs = (WTF *)v11;
      v46 = HIDWORD(v251);
      if (HIDWORD(v251) == (_DWORD)v251)
      {
        WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)&v250, (unint64_t)&glyphs);
        v15 = (uint64_t *)(v11 + 200);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        *((_QWORD *)v250 + HIDWORD(v251)) = v11;
        HIDWORD(v251) = v46 + 1;
      }
      v47 = HIDWORD(v254);
      if (HIDWORD(v254) == (_DWORD)v254)
      {
        WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)&v253, (unint64_t)&v276);
        v15 = (uint64_t *)(v11 + 200);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        *((_WORD *)v253 + HIDWORD(v254)) = v33;
        HIDWORD(v254) = v47 + 1;
      }
      if (HIDWORD(v257) == (_DWORD)v257)
      {
        WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)&v256, (unint64_t)&v266);
        v15 = (uint64_t *)(v11 + 200);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        *((CGSize *)v256 + HIDWORD(v257)) = v266;
        ++HIDWORD(v257);
      }
      v270 = 0;
      glyphs = 0;
      if (HIDWORD(v260) == (_DWORD)v260)
      {
        WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)&v259, (unint64_t)&glyphs);
        v15 = (uint64_t *)(v11 + 200);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        v48 = (_QWORD *)((char *)v259 + 16 * HIDWORD(v260));
        *v48 = 0;
        v48[1] = 0;
        ++HIDWORD(v260);
      }
      v49 = HIDWORD(v263);
      if (HIDWORD(v263) == (_DWORD)v263)
      {
        WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)&v262, (unint64_t)v277);
        v15 = (uint64_t *)(v11 + 200);
        v12 = v248;
        v3 = v249;
      }
      else
      {
        *((_QWORD *)v262 + HIDWORD(v263)) = v13;
        HIDWORD(v263) = v49 + 1;
      }
      if (++v13 == v12)
        goto LABEL_141;
    }
LABEL_56:
    v51 = *(WTF **)(v27 + 8);
    *(_DWORD *)v27 = v23;
    *(_QWORD *)(v27 + 8) = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
      {
        --WebCore::GlyphPage::s_count;
        v174 = (WTF *)*((_QWORD *)v51 + 1);
        *((_QWORD *)v51 + 1) = 0;
        if (v174)
        {
          if (*(_DWORD *)v174 == 1)
            WTF::fastFree(v174, v3);
          else
            --*(_DWORD *)v174;
        }
        WTF::fastFree(v51, v3);
        v15 = (uint64_t *)(v11 + 200);
      }
      else
      {
        --*(_DWORD *)v51;
      }
    }
LABEL_59:
    v52 = *v14;
    if (*v14)
      v53 = *(_DWORD *)(v52 - 12) + 1;
    else
      v53 = 1;
    *(_DWORD *)(v52 - 12) = v53;
    v54 = *v14;
    if (*v14)
      v55 = *(_DWORD *)(v54 - 12);
    else
      v55 = 0;
    v56 = (*(_DWORD *)(v54 - 16) + v55);
    v57 = *(unsigned int *)(v54 - 4);
    if (v57 > 0x400)
    {
      if (v57 > 2 * v56)
        goto LABEL_65;
    }
    else
    {
      if (3 * v57 > 4 * v56)
      {
LABEL_65:
        v58 = v20 & 0xFFF0;
        if (v20 <= 0x6EF && v58 >= 0x600 && (*(_BYTE *)(v11 + 344) & 0x40) != 0)
        {
          v71 = 0;
LABEL_74:
          v72 = *(WTF **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = v71;
          v12 = v248;
          v3 = v249;
          if (v72)
          {
            if (*(_DWORD *)v72 == 1)
            {
              --WebCore::GlyphPage::s_count;
              v175 = (WTF *)*((_QWORD *)v72 + 1);
              *((_QWORD *)v72 + 1) = 0;
              if (v175)
              {
                if (*(_DWORD *)v175 == 1)
                  WTF::fastFree(v175, v249);
                else
                  --*(_DWORD *)v175;
              }
              WTF::fastFree(v72, v3);
              v12 = v248;
              v3 = v249;
              v15 = (uint64_t *)(v11 + 200);
            }
            else
            {
              --*(_DWORD *)v72;
            }
          }
          goto LABEL_17;
        }
        v59 = WTF::fastMalloc((WTF *)0x44);
        *(_WORD *)v59 = v58;
        v60 = (int8x16_t)vdupq_n_s16(v58);
        *(int8x16_t *)(v59 + 2) = vorrq_s8(v60, (int8x16_t)xmmword_1969F77A0);
        v61 = v58 | 0xD;
        v62 = v58 | 0xE;
        v63 = v58 | 0xF;
        v64 = (WTF *)v59;
        *(int8x8_t *)(v59 + 18) = vorr_s8(*(int8x8_t *)v60.i8, (int8x8_t)0xC000B000A0009);
        *(_WORD *)(v59 + 26) = v61;
        *(_WORD *)(v59 + 28) = v62;
        *(_WORD *)(v59 + 30) = v63;
        v65 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v65 = 1;
        v66 = *(_QWORD *)(v11 + 8);
        if (!v66)
        {
          v236 = (WTF *)v65;
          v66 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v66 = 1;
          *(_QWORD *)(v66 + 8) = v11;
          v213 = *(WTF **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = v66;
          if (v213)
          {
            if (*(_DWORD *)v213 == 1)
            {
              WTF::fastFree(v213, v212);
              v66 = *(_QWORD *)(v11 + 8);
              if (!v66)
              {
                v65 = (uint64_t)v236;
LABEL_70:
                *(_QWORD *)(v65 + 8) = v66;
                *(_OWORD *)(v65 + 16) = 0u;
                *(_OWORD *)(v65 + 32) = 0u;
                *(_DWORD *)(v65 + 48) = 0;
                ++WebCore::GlyphPage::s_count;
                v233 = v64;
                v67 = (UniChar *)v64;
                v68 = (WTF **)v65;
                if ((WebCore::GlyphPage::fill(v65, v67, 0x10uLL) & 1) != 0)
                {
                  v234 = (WTF *)v68;
                }
                else
                {
                  v153 = (WTF *)v68;
                  if (*(_DWORD *)v68 == 1)
                  {
                    --WebCore::GlyphPage::s_count;
                    v188 = v68[1];
                    v68[1] = 0;
                    v70 = v233;
                    if (v188)
                    {
                      if (*(_DWORD *)v188 == 1)
                      {
                        v211 = v153;
                        WTF::fastFree(v188, v69);
                        v153 = v211;
                        v70 = v233;
                      }
                      else
                      {
                        --*(_DWORD *)v188;
                      }
                    }
                    WTF::fastFree(v153, v69);
                    v234 = 0;
                    goto LABEL_73;
                  }
                  --*(_DWORD *)v68;
                  v234 = 0;
                }
                v70 = v233;
LABEL_73:
                WTF::fastFree(v70, v69);
                v15 = (uint64_t *)(v11 + 200);
                v71 = v234;
                goto LABEL_74;
              }
            }
            else
            {
              --*(_DWORD *)v213;
            }
          }
          v65 = (uint64_t)v236;
        }
        ++*(_DWORD *)v66;
        goto LABEL_70;
      }
      if (!(_DWORD)v57)
      {
        v173 = 8;
        goto LABEL_304;
      }
    }
    v173 = (_DWORD)v57 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v57));
LABEL_304:
    v27 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(v11 + 120), v173, (int *)v27);
    v15 = (uint64_t *)(v11 + 200);
    goto LABEL_65;
  }
LABEL_141:
  v123 = v246;
  glyphs = (WTF *)MEMORY[0x1E0C809B0];
  v270 = 0x40000000;
  v271 = ___ZNK7WebCore4Font15applyTransformsERNS_11GlyphBufferEjjbbRKN3WTF10AtomStringENS3_10StringViewENS_13TextDirectionE_block_invoke;
  v272 = &__block_descriptor_tmp_10;
  v273 = v11;
  v274 = &v250;
  v275 = 0;
  if (v12)
    v124 = *(double *)&v3;
  else
    v124 = COERCE_DOUBLE("");
  if (v12)
    v125 = v247;
  else
    v125 = 0x100000000;
  *(_QWORD *)&v266.width = v267;
  *(_QWORD *)&v266.height = 256;
  height_high = v125;
  v268 = 0u;
  if ((v125 & 0xFF00000000) != 0)
  {
    if (v125 >= 0x101uLL)
    {
      if (v125 <= 0x141uLL)
        v221 = 321;
      else
        v221 = v125;
      if (v221 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x19616C6CCLL);
      }
      v147 = (char *)WTF::fastMalloc((WTF *)(2 * v221));
      *(_QWORD *)&v266.width = v147;
      *(_QWORD *)&v266.height = __PAIR64__(v125, v221);
      v146 = &v147[2 * v125];
      v123 = v246;
    }
    else
    {
      HIDWORD(v266.height) = v125;
      v146 = (char *)&v267[v125];
      v147 = (char *)v267;
      if (v125 < 0x40uLL)
      {
        v148 = (char *)v267;
        goto LABEL_370;
      }
    }
    v148 = &v147[2 * (v125 & 0xFFFFFFC0)];
    v222 = 0uLL;
    do
    {
      v278.val[0] = **(int8x16_t **)&v124;
      v223 = *(int8x16_t *)(*(_QWORD *)&v124 + 16);
      v279.val[0] = *(int8x16_t *)(*(_QWORD *)&v124 + 32);
      v224 = *(_OWORD *)(*(_QWORD *)&v124 + 48);
      *(_QWORD *)&v124 += 64;
      v225 = v224;
      v279.val[1] = 0uLL;
      v280.val[0] = v223;
      v278.val[1] = 0uLL;
      v226 = v147;
      vst2q_s8(v226, v278);
      v226 += 32;
      v280.val[1] = 0uLL;
      vst2q_s8(v226, v280);
      v227 = v147 + 64;
      vst2q_s8(v227, v279);
      v228 = v147 + 96;
      vst2q_s8(v228, *(int8x16x2_t *)(&v222 - 1));
      v147 += 128;
    }
    while (v147 != v148);
LABEL_370:
    while (v148 != v146)
    {
      v229 = **(_BYTE **)&v124;
      ++*(_QWORD *)&v124;
      *(_WORD *)v148 = v229;
      v148 += 2;
    }
    v124 = v266.width;
    height_high = HIDWORD(v266.height);
  }
  *(CGFloat *)&v268 = v124;
  *((_QWORD *)&v268 + 1) = height_high;
  if (*(_QWORD *)(v123 + 144))
    WebCore::LocaleCocoa::canonicalLanguageIdentifierFromString((WebCore::LocaleCocoa *)(v123 + 144), &v265);
  else
    v265 = 0;
  CTFontShapeGlyphs();
  v129 = v128;
  if (v244)
  {
    v177 = (HIDWORD(v251) - 1);
    if (HIDWORD(v251) != 1)
    {
      v178 = 0;
      v179 = 0;
      v180 = 16 * (HIDWORD(v251) - 1);
      do
      {
        if (v179 >= HIDWORD(v251))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C604);
        }
        if (v177 >= HIDWORD(v251))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C60CLL);
        }
        v181 = *((_QWORD *)v250 + v179);
        *((_QWORD *)v250 + v179) = *((_QWORD *)v250 + v177);
        *((_QWORD *)v250 + v177) = v181;
        if (v179 >= HIDWORD(v254))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C614);
        }
        if (v177 >= HIDWORD(v254))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C61CLL);
        }
        v182 = v253;
        v183 = *((_WORD *)v253 + v179);
        *((_WORD *)v253 + v179) = *((_WORD *)v253 + v177);
        *((_WORD *)v182 + v177) = v183;
        if (v179 >= HIDWORD(v257))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C624);
        }
        v277[0] = *(_OWORD *)((char *)v256 + v178);
        if (v177 >= HIDWORD(v257))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C62CLL);
        }
        *(_OWORD *)((char *)v256 + v178) = *(_OWORD *)((char *)v256 + v180);
        if (v177 >= HIDWORD(v257))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C634);
        }
        *(_OWORD *)((char *)v256 + v180) = v277[0];
        if (v179 >= HIDWORD(v260))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C63CLL);
        }
        v276 = *(_OWORD *)((char *)v259 + v178);
        if (v177 >= HIDWORD(v260))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C644);
        }
        *(_OWORD *)((char *)v259 + v178) = *(_OWORD *)((char *)v259 + v180);
        if (v177 >= HIDWORD(v260))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C64CLL);
        }
        *(_OWORD *)((char *)v259 + v180) = v276;
        if (v179 >= HIDWORD(v263))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C654);
        }
        if (v177 >= HIDWORD(v263))
        {
          __break(0xC471u);
          JUMPOUT(0x19616C65CLL);
        }
        v184 = v262;
        v185 = *((_QWORD *)v262 + v179);
        *((_QWORD *)v262 + v179) = *((_QWORD *)v262 + v177);
        *((_QWORD *)v184 + v177) = v185;
        ++v179;
        --v177;
        v178 += 16;
        v180 -= 16;
      }
      while (v179 < v177);
    }
  }
  v130 = v265;
  v265 = 0;
  if (v130)
    CFRelease(v130);
  v131 = v266.width;
  if (v267 != *(_WORD **)&v266.width && *(_QWORD *)&v266.width)
  {
    v266.width = 0.0;
    LODWORD(v266.height) = 0;
    WTF::fastFree(*(WTF **)&v131, v127);
  }
  v132 = HIDWORD(v251);
  if (HIDWORD(v251))
  {
    if ((unint64_t)HIDWORD(v251) - 1 >= HIDWORD(v257))
    {
      __break(0xC471u);
      JUMPOUT(0x19616C5E4);
    }
    v133 = v256;
    v134 = 0.0;
    do
    {
      v135 = *(double *)v133;
      v133 = (WTF *)((char *)v133 + 16);
      v136 = v135;
      v134 = v134 + v136;
      --v132;
    }
    while (v132);
  }
  else
  {
    v134 = 0.0;
  }
  v137 = v129;
  v138 = v134 + v137;
  if (v245)
    *v245 = v138;
  if (v11)
    WTF::RefCounted<WebCore::Font>::deref((WebCore::Font *)v11);
  v139 = (WTF *)v262;
  if (v264 != v262 && v262 != 0)
  {
    v262 = 0;
    LODWORD(v263) = 0;
    WTF::fastFree(v139, v127);
  }
  v141 = v259;
  if (v261 != (_BYTE *)v259 && v259)
  {
    v259 = 0;
    LODWORD(v260) = 0;
    WTF::fastFree(v141, v127);
  }
  v142 = v256;
  if (v258 != (_BYTE *)v256 && v256)
  {
    v256 = 0;
    LODWORD(v257) = 0;
    WTF::fastFree(v142, v127);
  }
  v143 = v253;
  if (v255 != (_BYTE *)v253 && v253)
  {
    v253 = 0;
    LODWORD(v254) = 0;
    WTF::fastFree(v143, v127);
  }
  v144 = v250;
  if (v252 != (_BYTE *)v250 && v250)
  {
    v250 = 0;
    LODWORD(v251) = 0;
    WTF::fastFree(v144, v127);
  }
  return v138;
}

float *WebCore::FontCascade::widthForSimpleTextWithFixedPitch(float *result, unsigned __int8 *a2, uint64_t a3, int a4)
{
  float *v7;
  float v8;
  uint64_t *v9;
  void *v10;
  float *v11;
  WebCore::Length *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  float v18;
  int v19;
  float v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  float v24;
  unsigned int v25;
  float v26;
  int v27;
  float v28;
  WebCore::Length *v29;
  float v30;
  WebCore::Length *v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;

  if ((_DWORD)a3)
  {
    v7 = result;
    result = (float *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)result, a2);
    v8 = result[84] + result[85];
    if (!a4)
    {
      v9 = (uint64_t *)*((_QWORD *)v7 + 27);
      if (v9)
      {
        ++*(_DWORD *)v9;
        result = (float *)WebCore::WidthCache::add(v9 + 15, a2, a3);
        v11 = result;
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v9, v10);
          result = (float *)WTF::fastFree(v21, v22);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      else
      {
        result = (float *)WebCore::WidthCache::add((uint64_t *)0x78, a2, a3);
        v11 = result;
      }
      if (!v11)
      {
        v12 = (WebCore::Length *)(v7 + 52);
        v13 = a3;
        if ((a3 & 0xFF00000000) != 0)
        {
          v23 = 0;
          v24 = 0.0;
          do
          {
            v25 = a2[v23];
            if (v25 <= 0x1F)
              v26 = -0.0;
            else
              v26 = v8;
            v24 = v24 + v26;
            if (v23 && v25 == 32)
            {
              v27 = *((unsigned __int8 *)v7 + 212);
              if (v27 == 4)
              {
                if (*((_BYTE *)v7 + 214))
                  v28 = *(float *)v12;
                else
                  v28 = (float)*(int *)v12;
              }
              else
              {
                v36 = v23;
                v31 = v12;
                v38 = v24;
                if (v27 == 3)
                {
                  if (*((_BYTE *)v7 + 214))
                    v34 = *(float *)v12;
                  else
                    v34 = (float)*(int *)v12;
                  v28 = (float)(v34 / 100.0) * v7[43];
                  v24 = v38;
                }
                else
                {
                  v28 = 0.0;
                  if (v27 == 11)
                  {
                    result = (float *)WebCore::Length::nonNanCalculatedValue(v12, v7[43]);
                    v23 = v36;
                    v12 = v31;
                    v28 = v32;
                    v24 = v38;
                  }
                }
              }
              v24 = v24 + v28;
            }
            ++v23;
          }
          while (v13 != v23);
        }
        else
        {
          v14 = 0;
          v15 = 0.0;
          do
          {
            v16 = *(unsigned __int16 *)&a2[2 * v14];
            if ((v16 & 0xFFFE) != 0x2028 && v16 > 0x1F)
              v18 = v8;
            else
              v18 = -0.0;
            v15 = v15 + v18;
            if (v14 && v16 == 32)
            {
              v19 = *((unsigned __int8 *)v7 + 212);
              if (v19 == 4)
              {
                if (*((_BYTE *)v7 + 214))
                  v20 = *(float *)v12;
                else
                  v20 = (float)*(int *)v12;
              }
              else
              {
                v35 = v14;
                v29 = v12;
                v37 = v15;
                if (v19 == 3)
                {
                  if (*((_BYTE *)v7 + 214))
                    v33 = *(float *)v12;
                  else
                    v33 = (float)*(int *)v12;
                  v20 = (float)(v33 / 100.0) * v7[43];
                  v15 = v37;
                }
                else
                {
                  v20 = 0.0;
                  if (v19 == 11)
                  {
                    result = (float *)WebCore::Length::nonNanCalculatedValue(v12, v7[43]);
                    v14 = v35;
                    v12 = v29;
                    v20 = v30;
                    v15 = v37;
                  }
                }
              }
              v15 = v15 + v20;
            }
            ++v14;
          }
          while (v13 != v14);
        }
      }
    }
  }
  return result;
}

_DWORD *WebCore::WidthCache::add(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  _BOOL4 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  _DWORD *v47;
  int v48;
  _QWORD *v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int128 *v56;
  __int16 v57;
  _DWORD *result;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  int v68;

  if ((a3 - 17) < 0xFFFFFFF0)
    return 0;
  v5 = *((_DWORD *)a1 + 1);
  v6 = __OFSUB__(v5, 1);
  v7 = v5 - 1;
  if (v7 < 0 == v6)
  {
    result = 0;
    *((_DWORD *)a1 + 1) = v7;
    return result;
  }
  v9 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)a1);
  v11 = atomic_load((unsigned __int8 *)(v9 + 4));
  if (v11 == 2 || *(_BYTE *)(v9 + 7) != 0)
    return 0;
  v13 = a3;
  if (a3 == 1)
  {
    if ((a3 & 0xFF00000000) != 0)
      v39 = *a2;
    else
      v39 = *(unsigned __int16 *)a2;
    v41 = a1 + 1;
    v40 = a1[1];
    v42 = v39 + 1;
    if (v40
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,float>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,float,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1 + 1, 8u, 0), (v40 = *v41) != 0))
    {
      v43 = *(_DWORD *)(v40 - 8);
    }
    else
    {
      v43 = 0;
    }
    v44 = 9 * ((v39 - (v42 << 15)) ^ ((v39 - (v42 << 15)) >> 10));
    v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
    v46 = v43 & (v45 ^ HIWORD(v45));
    v47 = (_DWORD *)(v40 + 8 * v46);
    v48 = *v47;
    if (*v47)
    {
      v49 = 0;
      v50 = 1;
      do
      {
        if (v48 == v42)
        {
          result = v47 + 1;
          goto LABEL_64;
        }
        if (v48 == -1)
          v49 = v47;
        v46 = (v46 + v50) & v43;
        v47 = (_DWORD *)(v40 + 8 * v46);
        v48 = *v47;
        ++v50;
      }
      while (*v47);
      if (v49)
      {
        *v49 = 0;
        --*(_DWORD *)(*v41 - 16);
        v47 = v49;
      }
    }
    *v47 = v42;
    v47[1] = 2143289344;
    v59 = *v41;
    if (*v41)
      v60 = *(_DWORD *)(v59 - 12) + 1;
    else
      v60 = 1;
    *(_DWORD *)(v59 - 12) = v60;
    v61 = *v41;
    if (*v41)
      v62 = *(_DWORD *)(v61 - 12);
    else
      v62 = 0;
    v63 = (*(_DWORD *)(v61 - 16) + v62);
    v64 = *(unsigned int *)(v61 - 4);
    if (v64 > 0x400)
    {
      if (v64 > 2 * v63)
        goto LABEL_81;
    }
    else
    {
      if (3 * v64 > 4 * v63)
      {
LABEL_81:
        v38 = 1;
        result = v47 + 1;
        goto LABEL_63;
      }
      if (!(_DWORD)v64)
      {
        v65 = 8;
        goto LABEL_96;
      }
    }
    v65 = (_DWORD)v64 << (6 * *(_DWORD *)(v61 - 12) >= (2 * v64));
LABEL_96:
    v47 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,float>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,float,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1 + 1, v65, v47);
    goto LABEL_81;
  }
  v14 = a1 + 2;
  v68 = 0;
  v66 = 0u;
  v67 = 0u;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      v56 = &v66;
      do
      {
        v57 = *a2++;
        *(_WORD *)v56 = v57;
        v56 = (__int128 *)((char *)v56 + 2);
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    memcpy(&v66, a2, 2 * a3);
  }
  v15 = *((_QWORD *)&v67 + 1) ^ (((*((_QWORD *)&v66 + 1) ^ 0x1FF5C2923A788D2CuLL)
                                * (unsigned __int128)((unint64_t)v66 ^ 0xE7037ED1A0B428DBLL)) >> 64) ^ ((*((_QWORD *)&v66 + 1) ^ 0x1FF5C2923A788D2CLL) * (v66 ^ 0xE7037ED1A0B428DBLL));
  v16 = ((v15 * (unsigned __int128)((unint64_t)v67 ^ 0xE7037ED1A0B428DBLL)) >> 64) ^ 0xE7037ED1A0B428DBLL;
  v17 = (((v16 * (unsigned __int128)((v15 * ((unint64_t)v67 ^ 0xE7037ED1A0B428DBLL)) ^ 0xA0761D6478BD640FLL)) >> 64) ^ (v16 * ((v15 * (v67 ^ 0xA0B428DB)) ^ 0x78BD640F))) & 0xFFFFFF;
  if (v17)
    v18 = v17;
  else
    v18 = 0x800000;
  v19 = v18 | ((_DWORD)a3 << 24);
  v68 = v19;
  v20 = *v14;
  if (*v14
    || (WTF::HashTable<WebCore::WidthCache::SmallStringKey,WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>>,WebCore::WidthCache::SmallStringKeyHash,WTF::HashMap<WebCore::WidthCache::SmallStringKey,float,WebCore::WidthCache::SmallStringKeyHash,WebCore::WidthCache::SmallStringKeyHashTraits,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::WidthCache::SmallStringKeyHashTraits>::expand(a1 + 2, 0), (v20 = *v14) != 0))
  {
    v21 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    v21 = 0;
  }
  v22 = v21 & v18;
  v10 = v20 + 40 * (v21 & v18);
  v23 = *(_DWORD *)(v10 + 32);
  if (v23)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      v29 = *(_QWORD *)v10 != (_QWORD)v66
         || *(_QWORD *)(v10 + 8) != *((_QWORD *)&v66 + 1)
         || *(_QWORD *)(v10 + 16) != (_QWORD)v67
         || *(_QWORD *)(v10 + 24) != *((_QWORD *)&v67 + 1);
      if (v23 == v19 && !v29)
      {
        v38 = 0;
        goto LABEL_62;
      }
      if (v23 == 17)
        v24 = v10;
      v22 = (v22 + v25) & v21;
      v10 = v20 + 40 * v22;
      v23 = *(_DWORD *)(v10 + 32);
      ++v25;
    }
    while (v23);
    if (v24)
    {
      *(_QWORD *)(v24 + 32) = 0;
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      --*(_DWORD *)(*v14 - 16);
      v10 = v24;
    }
  }
  v30 = v67;
  v31 = v68;
  *(_OWORD *)v10 = v66;
  *(_OWORD *)(v10 + 16) = v30;
  *(_DWORD *)(v10 + 32) = v31;
  *(_DWORD *)(v10 + 36) = 2143289344;
  v32 = *v14;
  if (*v14)
    v33 = *(_DWORD *)(v32 - 12) + 1;
  else
    v33 = 1;
  *(_DWORD *)(v32 - 12) = v33;
  v34 = *v14;
  if (*v14)
    v35 = *(_DWORD *)(v34 - 12);
  else
    v35 = 0;
  v36 = (*(_DWORD *)(v34 - 16) + v35);
  v37 = *(unsigned int *)(v34 - 4);
  if (v37 > 0x400)
  {
    if (v37 > 2 * v36)
      goto LABEL_44;
  }
  else if (3 * v37 > 4 * v36)
  {
    goto LABEL_44;
  }
  v10 = WTF::HashTable<WebCore::WidthCache::SmallStringKey,WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>>,WebCore::WidthCache::SmallStringKeyHash,WTF::HashMap<WebCore::WidthCache::SmallStringKey,float,WebCore::WidthCache::SmallStringKeyHash,WebCore::WidthCache::SmallStringKeyHashTraits,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::WidthCache::SmallStringKeyHashTraits>::expand(a1 + 2, (__int128 *)v10);
LABEL_44:
  v38 = 1;
LABEL_62:
  result = (_DWORD *)(v10 + 36);
LABEL_63:
  if (!v38)
  {
LABEL_64:
    *(_DWORD *)a1 = -3;
    return result;
  }
  v51 = *(_DWORD *)a1;
  if (*(int *)a1 <= 19)
    *(_DWORD *)a1 = ++v51;
  *((_DWORD *)a1 + 1) = v51;
  v52 = a1[1];
  if (v52)
    v53 = *(_DWORD *)(v52 - 12);
  else
    v53 = 0;
  v54 = a1[2];
  if (v54)
    v55 = *(_DWORD *)(v54 - 12);
  else
    v55 = 0;
  if ((v55 + v53) >= 0x7A120)
  {
    if (v52)
    {
      a1[1] = 0;
      WTF::fastFree((WTF *)(v52 - 16), (void *)v10);
      v54 = a1[2];
    }
    if (v54)
    {
      a1[2] = 0;
      WTF::fastFree((WTF *)(v54 - 16), (void *)v10);
    }
    return 0;
  }
  return result;
}

float WebCore::FontCascade::zeroWidth(WebCore::FontCascade *this, void *a2)
{
  float v3;
  float v4;
  unsigned __int8 v5;
  uint64_t v6;
  const WebCore::FontCascadeDescription *v7;
  int v8;
  uint64_t v9;
  WebCore::FontCascadeFonts *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF *v18;

  v3 = *((float *)this + 43) * 0.5;
  v4 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont(this, a2) + 40);
  v5 = 1;
  if ((*((_DWORD *)this + 44) & 0x1C000000) == 0x4000000)
  {
    v6 = MEMORY[0x19AEA861C](48, v4);
    if ((_DWORD)v6 == 48)
      v5 = 1;
    else
      v5 = 2;
  }
  else
  {
    v6 = 48;
  }
  v7 = (WebCore::FontCascade *)((char *)this + 16);
  v8 = (*((unsigned __int16 *)this + 90) >> 12) & 3;
  switch(v8)
  {
    case 0:
      goto LABEL_4;
    case 2:
      v9 = 2;
      break;
    case 3:
LABEL_4:
      if (v6 >= 0x100)
        v9 = 2 * (u_hasBinaryProperty(v6, UCHAR_EMOJI_PRESENTATION) != 0);
      else
        v9 = 0;
      break;
    default:
      v9 = 1;
      break;
  }
  v10 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 27);
  if (v10)
  {
    ++*(_DWORD *)v10;
    WebCore::FontCascadeFonts::glyphDataForCharacter((unint64_t)v10, (void *)v6, v7, v5, v9, (uint64_t)&v17);
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v10, v11);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  else
  {
    WebCore::FontCascadeFonts::glyphDataForCharacter(0, (void *)v6, v7, v5, v9, (uint64_t)&v17);
  }
  v12 = v18;
  if (v18)
  {
    v13 = *((_QWORD *)v18 + 1);
    if (v13)
      v3 = *(float *)(v13 + 56);
    v18 = 0;
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v11);
    else
      --*(_DWORD *)v12;
  }
  return v3;
}

unint64_t WebCore::FontCascade::canUseSimplifiedTextMeasuring(uint64_t a1, void *c, int a3, int a4, uint64_t a5)
{
  const WebCore::FontCascadeDescription *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BOOL4 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WebCore::FontCascadeFonts *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  BOOL v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;

  v6 = a5;
  LOBYTE(v7) = a3;
  v8 = c;
  if ((_DWORD)c == 9 && !a4)
    return 0;
  if (a3)
  {
    if (WebCore::WidthIterator::characterCanUseSimplifiedTextMeasuring((UChar32)c, 1))
    {
      v10 = 0;
      v11 = 2 * v8;
      goto LABEL_14;
    }
    return 0;
  }
  v10 = c < 0x100;
  v11 = 2 * c;
  if (c > 0xFF)
  {
    if (WebCore::WidthIterator::characterCanUseSimplifiedTextMeasuring((UChar32)c, 1))
    {
LABEL_13:
      LOBYTE(v7) = 1;
      if ((*(_DWORD *)(a1 + 176) & 0x1C000000) == 0x4000000)
      {
        v26 = MEMORY[0x19AEA861C](v8);
        if ((_DWORD)v26 == (_DWORD)v8)
          LOBYTE(v7) = 1;
        else
          LOBYTE(v7) = 2;
        v8 = (void *)v26;
      }
LABEL_14:
      v5 = (const WebCore::FontCascadeDescription *)(a1 + 16);
      v18 = (*(unsigned __int16 *)(a1 + 180) >> 12) & 3;
      if (v18)
      {
        if (v18 == 2)
        {
          a5 = 2;
          goto LABEL_17;
        }
        if (v18 != 3)
        {
          a5 = 1;
          goto LABEL_17;
        }
      }
      if (v8 >= 0x100)
        a5 = 2 * (u_hasBinaryProperty((UChar32)v8, UCHAR_EMOJI_PRESENTATION) != 0);
      else
        a5 = 0;
LABEL_17:
      v19 = *(WebCore::FontCascadeFonts **)(a1 + 216);
      if (v19)
      {
        ++*(_DWORD *)v19;
        WebCore::FontCascadeFonts::glyphDataForCharacter((unint64_t)v19, v8, (const WebCore::FontCascadeDescription *)(a1 + 16), v7, a5, (uint64_t)&v27);
        if (*(_DWORD *)v19 == 1)
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts(v19, v20);
          WTF::fastFree(v24, v25);
        }
        else
        {
          --*(_DWORD *)v19;
        }
        goto LABEL_20;
      }
      goto LABEL_42;
    }
    return 0;
  }
  v12 = *(_QWORD *)(a1 + (((unint64_t)c >> 2) & 0x3FFFFFF8) + 232);
  if (((v12 >> ((2 * (_BYTE)c) & 0x3E)) & 1) != 0)
    return (v12 >> ((2 * (_BYTE)c) & 0x3E | 1u)) & 1;
  v7 = 0;
  switch((_DWORD)c)
  {
    case 0xA0:
      goto LABEL_9;
    case 0xA:
    case 0xD:
      goto LABEL_13;
    case 0xAD:
      goto LABEL_9;
  }
  if (u_charType((UChar32)c) != 15)
    goto LABEL_13;
  v7 = 0;
LABEL_9:
  while (v11 >= 0x200)
  {
    __break(1u);
LABEL_42:
    WebCore::FontCascadeFonts::glyphDataForCharacter(0, v8, v5, v7, a5, (uint64_t)&v27);
LABEL_20:
    v21 = v28;
    if (v28)
    {
      v22 = *((_QWORD *)v28 + 1);
      if (v22)
        v23 = v22 == v6;
      else
        v23 = 0;
      v7 = v23;
      v28 = 0;
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v20);
      else
        --*(_DWORD *)v21;
    }
    else
    {
      v7 = 0;
    }
    if (!v10)
      return v7;
  }
  v14 = a1 + 232;
  v15 = v11 >> 6;
  v16 = *(_QWORD *)(a1 + 232 + 8 * (v11 >> 6)) | (1 << v11);
  v17 = 1 << (v11 & 0x3E | 1);
  if ((_DWORD)v7)
  {
    *(_QWORD *)(v14 + 8 * v15) = v16 | v17;
    return 1;
  }
  else
  {
    *(_QWORD *)(v14 + 8 * v15) = v16 & ~v17;
  }
  return v7;
}

uint64_t WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0> [34]>::contains<WTF::AtomString>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v6 = *a1;
  v7 = 34;
  do
  {
    v8 = v6 + 16 * (v7 >> 1);
    v9 = WTF::codePointCompare();
    if (v9 >= 0)
      v7 >>= 1;
    else
      v7 += ~(v7 >> 1);
    if (v9 < 0)
      v6 = v8 + 16;
  }
  while (v7);
  if (v6 == *a1 + 544)
    return 0;
  else
    return WTF::operator==(v4, v5, *(unsigned __int8 **)v6, *(_QWORD *)(v6 + 8));
}

void WebCore::FontCascade::characterSelectionRectsForText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __n128 v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  __n128 v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  float v45[1390];
  float v46;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = *(_QWORD *)(v3 + 8);
  if (v11)
    LODWORD(v11) = *(_DWORD *)(v11 + 4);
  if ((v4 & 0xFF00000000) != 0)
    v12 = v4;
  else
    v12 = v11;
  v13 = *(_BYTE *)(v3 + 37);
  WebCore::ComplexTextController::ComplexTextController((WebCore::ComplexTextController *)v45, v2, v3, 0, 0, 0);
  WebCore::ComplexTextController::advance((uint64_t)v45, v6, 0, 0, 0, v14, v15, v16, v17, v18, v19);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  v21 = v12 - v6;
  if (v12 == v6)
    goto LABEL_7;
  if (!(v21 >> 28))
  {
    v22 = WTF::fastMalloc((WTF *)(16 * v21));
    *(_DWORD *)(v10 + 8) = v21;
    *(_QWORD *)v10 = v22;
    if ((v13 & 2) != 0)
    {
      v37 = 0;
      v38 = v6 + 1;
      do
      {
        v39 = *v8;
        v40 = v8[1];
        v41 = v46;
        WebCore::ComplexTextController::advance((uint64_t)v45, v38 + v37, 0, 0, 0, v23, v24, v25, v26, v27, v28);
        LODWORD(v26) = 1015021568;
        v25 = 64.0;
        v24 = (float)((float)((float)(int)v39 * 0.015625) + (float)(v45[1388] - v46)) * 64.0;
        if (v24 >= 2147483650.0)
        {
          v42 = 0x7FFFFFFFLL;
        }
        else
        {
          v25 = -2147483650.0;
          if (v24 <= -2147483650.0)
            v42 = 0x80000000;
          else
            v42 = (int)v24;
        }
        LODWORD(v24) = 1115684864;
        *(float *)&v23 = ceilf((float)(v46 - v41) * 64.0);
        if (*(float *)&v23 >= 2147500000.0)
        {
          v43 = 0x7FFFFFFFLL;
        }
        else if (*(float *)&v23 <= -2147500000.0)
        {
          v43 = 0x80000000;
        }
        else
        {
          v43 = (int)*(float *)&v23;
        }
        v44 = (unint64_t *)(v22 + 16 * v37);
        *v44 = v42 | v39 & 0xFFFFFFFF00000000;
        v44[1] = v43 | v40 & 0xFFFFFFFF00000000;
        *(_DWORD *)(v10 + 12) = ++v37;
      }
      while (v21 != v37);
    }
    else
    {
      v29 = 0;
      v30 = v6 + 1;
      do
      {
        v31 = *v8;
        v32 = v8[1];
        v33 = v46;
        WebCore::ComplexTextController::advance((uint64_t)v45, v30 + v29, 0, 0, 0, v23, v24, v25, v26, v27, v28);
        HIDWORD(v24) = 1078984704;
        v23 = (float)(v33 + (float)((float)(int)v31 * 0.015625)) * 64.0;
        if (v23 >= 2147483650.0)
        {
          v34 = 0x7FFFFFFFLL;
        }
        else
        {
          HIDWORD(v24) = -1042284544;
          if (v23 <= -2147483650.0)
            v34 = 0x80000000;
          else
            v34 = (int)v23;
        }
        LODWORD(v24) = 1115684864;
        *(float *)&v23 = ceilf((float)(v46 - v33) * 64.0);
        if (*(float *)&v23 >= 2147500000.0)
        {
          v35 = 0x7FFFFFFFLL;
        }
        else if (*(float *)&v23 <= -2147500000.0)
        {
          v35 = 0x80000000;
        }
        else
        {
          v35 = (int)*(float *)&v23;
        }
        v36 = (unint64_t *)(v22 + 16 * v29);
        *v36 = v34 | v31 & 0xFFFFFFFF00000000;
        v36[1] = v35 | v32 & 0xFFFFFFFF00000000;
        *(_DWORD *)(v10 + 12) = ++v29;
      }
      while (v21 != v29);
    }
LABEL_7:
    WebCore::ComplexTextController::~ComplexTextController((WebCore::ComplexTextController *)v45, v20);
    return;
  }
  __break(0xC471u);
}

void WebCore::FontCascade::adjustSelectionRectForText(uint64_t a1, void *a2, uint64_t a3, WebCore::LayoutRect *a4, unsigned int a5, uint64_t a6)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  WebCore::FontCascadeFonts *v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  void *v20;

  v9 = (int)a2;
  v11 = *(_QWORD *)(a3 + 8);
  if (v11)
    v12 = *(_DWORD *)(v11 + 4);
  else
    v12 = 0;
  if ((a6 & 0xFF00000000) != 0)
    v13 = a6;
  else
    v13 = v12;
  v14 = WebCore::FontCascade::s_codePath;
  if (!WebCore::FontCascade::s_codePath)
  {
    if (v11)
      v15 = (*(_BYTE *)(a3 + 37) & 8) == 0;
    else
      v15 = 1;
    if (v15 || (*(_BYTE *)(v11 + 16) & 4) != 0)
      goto LABEL_12;
    v14 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v11 + 8), *(unsigned int *)(v11 + 4));
  }
  if (v14 == 2)
  {
LABEL_25:
    WebCore::FontCascade::adjustSelectionRectForComplexText((WebCore::FontCascade *)a1, (const WebCore::TextRun *)a3, a4);
    return;
  }
  if (!v9)
    goto LABEL_24;
LABEL_12:
  v16 = *(WebCore::FontCascadeFonts **)(a1 + 216);
  if (v16)
    ++*(_DWORD *)v16;
  v17 = *((_BYTE *)v16 + 152) & 3;
  if (v17 == 2)
  {
    WebCore::FontCascadeFonts::determineCanTakeFixedPitchFastContentMeasuring(v16, (const WebCore::FontCascadeDescription *)(a1 + 16));
    v17 = *((_BYTE *)v16 + 152) & 3;
  }
  if (*(_DWORD *)v16 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v16, a2);
    WTF::fastFree(v19, v20);
  }
  else
  {
    --*(_DWORD *)v16;
  }
  if (v17 == 1)
  {
    WebCore::FontCascade::adjustSelectionRectForSimpleTextWithFixedPitch((WebCore::FontCascade *)a1, (const WebCore::TextRun *)a3, a4, a5, v13);
  }
  else
  {
LABEL_24:
    if (*(_BYTE *)(a1 + 229) || *(_BYTE *)(a1 + 230))
    {
      if (a5)
        goto LABEL_25;
      v18 = *(_QWORD *)(a3 + 8);
      if (v18)
        LODWORD(v18) = *(_DWORD *)(v18 + 4);
      if (v13 != (_DWORD)v18)
        goto LABEL_25;
    }
    WebCore::FontCascade::adjustSelectionRectForSimpleText((WebCore::FontCascade *)a1, (const WebCore::TextRun *)a3, a4);
  }
}

int *WebCore::FontCascade::adjustSelectionRectForSimpleTextWithFixedPitch(WebCore::FontCascade *this, const WebCore::TextRun *a2, WebCore::LayoutRect *a3, unsigned int a4, unsigned int a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  float v24;
  int *result;
  float v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  float v31;

  v9 = *((_BYTE *)a2 + 37);
  v10 = *((_QWORD *)a2 + 1);
  if (v10 && (v11 = *(unsigned int *)(v10 + 4), (_DWORD)v11))
  {
    v12 = *(unsigned __int8 **)(v10 + 8);
    v13 = (*(_DWORD *)(v10 + 16) >> 2) & 1;
    if (v11 > a4)
      v14 = (v13 << 32) | a4;
    else
      v14 = v11 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v13 & 1) << 32);
  }
  else
  {
    v14 = 0x100000000;
    v12 = "";
  }
  WebCore::FontCascade::widthForSimpleTextWithFixedPitch((float *)this, v12, v14, (v9 & 1) == 0);
  v16 = v15;
  v17 = *((_QWORD *)a2 + 1);
  if (v17 && (v18 = *(unsigned int *)(v17 + 4), (_DWORD)v18))
  {
    v19 = *(unsigned __int8 **)(v17 + 8);
    v20 = (*(_DWORD *)(v17 + 16) >> 2) & 1;
    if (v18 > a5)
      v21 = (v20 << 32) | a5;
    else
      v21 = v18 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v20 & 1) << 32);
  }
  else
  {
    v21 = 0x100000000;
    v19 = "";
  }
  WebCore::FontCascade::widthForSimpleTextWithFixedPitch((float *)this, v19, v21, (v9 & 1) == 0);
  v23 = v22;
  v24 = v16;
  if ((*((_BYTE *)a2 + 37) & 2) != 0)
  {
    v28 = *((_QWORD *)a2 + 1);
    if (v28)
    {
      v29 = *(unsigned __int8 **)(v28 + 8);
      v30 = *(unsigned int *)(v28 + 4) | ((unint64_t)((*(_DWORD *)(v28 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v29 = 0;
      v30 = 0x100000000;
    }
    WebCore::FontCascade::widthForSimpleTextWithFixedPitch((float *)this, v29, v30, (v9 & 1) == 0);
    v24 = v31 - v23;
  }
  result = WebCore::LayoutRect::move<float,int>((int *)a3, 0, v24);
  v26 = ceilf((float)(v23 - v16) * 64.0);
  if (v26 >= 2147500000.0)
  {
    v27 = 0x7FFFFFFF;
  }
  else if (v26 <= -2147500000.0)
  {
    v27 = 0x80000000;
  }
  else
  {
    v27 = (int)v26;
  }
  *((_DWORD *)a3 + 2) = v27;
  return result;
}

WTF *WebCore::FontCascade::adjustSelectionRectForSimpleText(WebCore::FontCascade *this, const WebCore::TextRun *a2, WebCore::LayoutRect *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  void *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  double v26;
  int v27;
  float v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  WTF *result;
  uint64_t v38;
  _DWORD *v39;
  double v40;
  double v41;
  float v42;
  float v43;
  WTF *v44;
  uint64_t v45;
  _BYTE v46[8192];
  WTF *v47;
  uint64_t v48;
  _BYTE v49[2048];
  WTF *v50;
  uint64_t v51;
  _BYTE v52[16384];
  WTF *v53;
  uint64_t v54;
  _BYTE v55[16384];
  WTF *v56;
  uint64_t v57;
  _BYTE v58[8192];
  double v59[3];

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v44 = (WTF *)v46;
  v45 = 1024;
  v47 = (WTF *)v49;
  v48 = 1024;
  v50 = (WTF *)v52;
  v51 = 1024;
  v53 = (WTF *)v55;
  v54 = 1024;
  v56 = (WTF *)v58;
  v57 = 1024;
  *(_OWORD *)v59 = 0u;
  WebCore::WidthIterator::WidthIterator((uint64_t)&v38, v3, v10, 0, 0, 0);
  WebCore::WidthIterator::advance((uint64_t)&v38, v7, (WebCore::GlyphBuffer *)&v44);
  v12 = v43;
  WebCore::WidthIterator::advance((uint64_t)&v38, v5, (WebCore::GlyphBuffer *)&v44);
  v14 = v43;
  if ((*(_BYTE *)(v11 + 37) & 2) != 0)
  {
    v20 = *(_QWORD *)(v11 + 8);
    if (v20)
      v21 = *(_DWORD *)(v20 + 4);
    else
      v21 = 0;
    WebCore::WidthIterator::advance((uint64_t)&v38, v21, (WebCore::GlyphBuffer *)&v44);
    v22 = v59[0];
    v23 = v40;
    v24 = v59[1];
    v25 = v41;
    v59[1] = (float)(v25 + v24);
    v59[0] = (float)((float)(v23 + v22) + v42);
    v43 = (float)(v43 + v23) + v42;
    v42 = 0.0;
    v19 = (float)(v43 - v14) + (float)((float)*v9 * 0.015625);
  }
  else
  {
    v15 = v59[0];
    v16 = v40;
    v17 = v59[1];
    v18 = v41;
    v59[1] = (float)(v18 + v17);
    v59[0] = (float)((float)(v16 + v15) + v42);
    v43 = (float)(v43 + v16) + v42;
    v42 = 0.0;
    v19 = v12 + (float)((float)*v9 * 0.015625);
  }
  v26 = v19 * 64.0;
  if (v26 >= 2147483650.0)
  {
    v27 = 0x7FFFFFFF;
  }
  else if (v26 <= -2147483650.0)
  {
    v27 = 0x80000000;
  }
  else
  {
    v27 = (int)v26;
  }
  *v9 = v27;
  v28 = ceilf((float)(v14 - v12) * 64.0);
  if (v28 >= 2147500000.0)
  {
    v29 = 0x7FFFFFFF;
  }
  else if (v28 <= -2147500000.0)
  {
    v29 = 0x80000000;
  }
  else
  {
    v29 = (int)v28;
  }
  v9[2] = v29;
  v30 = v39;
  v39 = 0;
  if (v30)
  {
    if (!*v30)
    {
      __break(0xC471u);
      JUMPOUT(0x19616DCB8);
    }
    --*v30;
  }
  v31 = v38;
  v38 = 0;
  if (v31)
  {
    v32 = *(_DWORD *)(v31 + 8);
    if (!v32)
    {
      __break(0xC471u);
      JUMPOUT(0x19616DCD8);
    }
    *(_DWORD *)(v31 + 8) = v32 - 1;
  }
  v33 = v56;
  if (v58 != (_BYTE *)v56 && v56)
  {
    v56 = 0;
    LODWORD(v57) = 0;
    WTF::fastFree(v33, v13);
  }
  v34 = v53;
  if (v55 != (_BYTE *)v53 && v53)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    WTF::fastFree(v34, v13);
  }
  v35 = v50;
  if (v52 != (_BYTE *)v50 && v50)
  {
    v50 = 0;
    LODWORD(v51) = 0;
    WTF::fastFree(v35, v13);
  }
  v36 = v47;
  if (v49 != (_BYTE *)v47 && v47)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree(v36, v13);
  }
  result = v44;
  if (v46 != (_BYTE *)v44)
  {
    if (v44)
    {
      v44 = 0;
      LODWORD(v45) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

void WebCore::FontCascade::adjustSelectionRectForComplexText(WebCore::FontCascade *this, const WebCore::TextRun *a2, WebCore::LayoutRect *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __n128 v17;
  float v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __n128 v24;
  WTF::StringImpl *v25;
  float v26;
  double v27;
  int v28;
  float v29;
  int v30;
  _BYTE v31[5552];
  float v32;
  float v33;

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  WebCore::ComplexTextController::ComplexTextController((WebCore::ComplexTextController *)v31, v3, v10, 0, 0, 0);
  WebCore::ComplexTextController::advance((uint64_t)v31, v7, 0, 0, 0, v12, v13, v14, v15, v16, v17);
  v18 = v33;
  WebCore::ComplexTextController::advance((uint64_t)v31, v5, 0, 0, 0, v19, v20, v21, v22, v23, v24);
  v26 = v33;
  if ((*(_BYTE *)(v11 + 37) & 2) != 0)
  {
    WebCore::LayoutRect::move<float,int>(v9, 0, v32 - v33);
  }
  else
  {
    v27 = (float)(v18 + (float)((float)*v9 * 0.015625)) * 64.0;
    if (v27 >= 2147483650.0)
    {
      v28 = 0x7FFFFFFF;
    }
    else if (v27 <= -2147483650.0)
    {
      v28 = 0x80000000;
    }
    else
    {
      v28 = (int)v27;
    }
    *v9 = v28;
  }
  v29 = ceilf((float)(v26 - v18) * 64.0);
  if (v29 >= 2147500000.0)
  {
    v30 = 0x7FFFFFFF;
  }
  else if (v29 <= -2147500000.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v29;
  }
  v9[2] = v30;
  WebCore::ComplexTextController::~ComplexTextController((WebCore::ComplexTextController *)v31, v25);
}

uint64_t WebCore::FontCascade::offsetForPosition(WebCore::FontCascade *this, const WebCore::TextRun *a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  char v6;
  char v7;
  float v8;
  const WebCore::TextRun *v9;
  WebCore::FontCascade *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  BOOL v17;
  _BYTE v18[5608];

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v7 = v6;
  v8 = v5;
  v9 = (const WebCore::TextRun *)v4;
  v10 = (WebCore::FontCascade *)v3;
  v11 = WebCore::FontCascade::s_codePath;
  if (WebCore::FontCascade::s_codePath)
  {
LABEL_8:
    if (v11 == 2)
      goto LABEL_9;
    return WebCore::FontCascade::offsetForPositionForSimpleText(v10, v9, v8);
  }
  v12 = v5;
  if (*((_BYTE *)v10 + 229))
  {
    if (v12)
    {
LABEL_9:
      WebCore::ComplexTextController::ComplexTextController((WebCore::ComplexTextController *)v18, (uint64_t)v10, (uint64_t)v9, 0, 0, 0);
      v14 = WebCore::ComplexTextController::offsetForPosition((WebCore::ComplexTextController *)v18, v8, v7);
      WebCore::ComplexTextController::~ComplexTextController((WebCore::ComplexTextController *)v18, v15);
      return v14;
    }
  }
  else
  {
    if (*((_BYTE *)v10 + 230))
      v17 = v12 == 0;
    else
      v17 = 1;
    if (!v17)
      goto LABEL_9;
  }
  if ((*(_BYTE *)(v4 + 37) & 8) != 0)
  {
    v13 = *(_QWORD *)(v4 + 8);
    if (v13)
    {
      if ((*(_BYTE *)(v13 + 16) & 4) == 0)
      {
        v11 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v13 + 8), *(unsigned int *)(v13 + 4));
        goto LABEL_8;
      }
    }
  }
  return WebCore::FontCascade::offsetForPositionForSimpleText(v10, v9, v8);
}

uint64_t WebCore::FontCascade::offsetForPositionForSimpleText(WebCore::FontCascade *this, const WebCore::TextRun *a2, float a3)
{
  uint64_t v3;
  char v4;
  char v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unint64_t v15;
  double *v16;
  float v17;
  double v18;
  float v19;
  unsigned int v20;
  unint64_t v21;
  double *v22;
  float v23;
  double v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  double *v31;
  float v32;
  double v33;
  float v34;
  unsigned int v35;
  unint64_t v36;
  double *v37;
  float v38;
  double v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  WTF *v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  WTF *v54;
  uint64_t v55;
  _BYTE v56[8192];
  WTF *v57;
  uint64_t v58;
  _BYTE v59[2048];
  WTF *v60;
  uint64_t v61;
  _BYTE v62[16384];
  WTF *v63;
  uint64_t v64;
  _BYTE v65[16384];
  WTF *v66;
  uint64_t v67;
  _BYTE v68[8192];
  __int128 v69;
  uint64_t v70;
  _DWORD *v71;
  double v72;
  double v73;
  unsigned int v74;
  float v75;
  float v76;

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v3;
  WebCore::WidthIterator::WidthIterator((uint64_t)&v70, v3, v8, 0, 0, 0);
  v54 = (WTF *)v56;
  v55 = 1024;
  v57 = (WTF *)v59;
  v58 = 1024;
  v60 = (WTF *)v62;
  v61 = 1024;
  v63 = (WTF *)v65;
  v64 = 1024;
  v66 = (WTF *)v68;
  v67 = 1024;
  v69 = 0u;
  if ((*(_BYTE *)(v9 + 37) & 2) != 0)
  {
    WebCore::FontCascade::widthForSimpleText(v10, v9);
    v27 = v7 - v26;
    v28 = HIDWORD(v55);
    if ((v5 & 1) != 0)
    {
      do
      {
        v12 = v74;
        WebCore::WidthIterator::advance((uint64_t)&v70, v74 + 1, (WebCore::GlyphBuffer *)&v54);
        if (v28 >= HIDWORD(v55))
          break;
        v29 = HIDWORD(v61) - v28;
        if (HIDWORD(v61) < v28)
          v29 = 0;
        if (v29 <= HIDWORD(v55) + ~v28)
        {
          __break(0xC471u);
          JUMPOUT(0x19616E498);
        }
        v30 = HIDWORD(v55) - (unint64_t)v28;
        v31 = (double *)((char *)v60 + 16 * v28);
        v32 = 0.0;
        do
        {
          v33 = *v31;
          v31 += 2;
          v34 = v33;
          v32 = v32 + v34;
          --v30;
        }
        while (v30);
        v27 = v27 + v32;
        v28 = HIDWORD(v55);
      }
      while ((float)(v27 + (float)(v32 * -0.5)) < 0.0);
    }
    else
    {
      do
      {
        v12 = v74;
        WebCore::WidthIterator::advance((uint64_t)&v70, v74 + 1, (WebCore::GlyphBuffer *)&v54);
        if (v28 >= HIDWORD(v55))
          break;
        v35 = HIDWORD(v61) - v28;
        if (HIDWORD(v61) < v28)
          v35 = 0;
        if (v35 <= HIDWORD(v55) + ~v28)
          goto LABEL_62;
        v36 = HIDWORD(v55) - (unint64_t)v28;
        v37 = (double *)((char *)v60 + 16 * v28);
        v38 = 0.0;
        do
        {
          v39 = *v37;
          v37 += 2;
          v40 = v39;
          v38 = v38 + v40;
          --v36;
        }
        while (v36);
        v27 = v27 + v38;
        v28 = HIDWORD(v55);
      }
      while (v27 < 0.0);
    }
  }
  else
  {
    v11 = 0;
    if ((v5 & 1) != 0)
    {
      do
      {
        v12 = v74;
        WebCore::WidthIterator::advance((uint64_t)&v70, v74 + 1, (WebCore::GlyphBuffer *)&v54);
        if (v11 >= HIDWORD(v55))
          break;
        v14 = HIDWORD(v61) - v11;
        if (HIDWORD(v61) < v11)
          v14 = 0;
        if (v14 <= HIDWORD(v55) + ~v11)
        {
          __break(0xC471u);
          JUMPOUT(0x19616E488);
        }
        v15 = HIDWORD(v55) - (unint64_t)v11;
        v16 = (double *)((char *)v60 + 16 * v11);
        v17 = 0.0;
        do
        {
          v18 = *v16;
          v16 += 2;
          v19 = v18;
          v17 = v17 + v19;
          --v15;
        }
        while (v15);
        v7 = v7 - v17;
        v11 = HIDWORD(v55);
      }
      while ((float)(v7 + (float)(v17 * 0.5)) > 0.0);
    }
    else
    {
      do
      {
        v12 = v74;
        WebCore::WidthIterator::advance((uint64_t)&v70, v74 + 1, (WebCore::GlyphBuffer *)&v54);
        if (v11 >= HIDWORD(v55))
          break;
        v20 = HIDWORD(v61) - v11;
        if (HIDWORD(v61) < v11)
          v20 = 0;
        if (v20 <= HIDWORD(v55) + ~v11)
        {
          __break(0xC471u);
          JUMPOUT(0x19616E490);
        }
        v21 = HIDWORD(v55) - (unint64_t)v11;
        v22 = (double *)((char *)v60 + 16 * v11);
        v23 = 0.0;
        do
        {
          v24 = *v22;
          v22 += 2;
          v25 = v24;
          v23 = v23 + v25;
          --v21;
        }
        while (v21);
        v7 = v7 - v23;
        v11 = HIDWORD(v55);
      }
      while (v7 > 0.0);
    }
  }
  v41 = *(double *)&v69;
  v42 = v72;
  v43 = *((double *)&v69 + 1);
  v44 = v73;
  *((double *)&v69 + 1) = (float)(v44 + v43);
  *(double *)&v69 = (float)((float)(v42 + v41) + v75);
  v76 = (float)(v76 + v42) + v75;
  v75 = 0.0;
  v45 = v66;
  if (v68 != (_BYTE *)v66 && v66)
  {
    v66 = 0;
    LODWORD(v67) = 0;
    WTF::fastFree(v45, v13);
  }
  v46 = v63;
  if (v65 != (_BYTE *)v63 && v63)
  {
    v63 = 0;
    LODWORD(v64) = 0;
    WTF::fastFree(v46, v13);
  }
  v47 = v60;
  if (v62 != (_BYTE *)v60 && v60)
  {
    v60 = 0;
    LODWORD(v61) = 0;
    WTF::fastFree(v47, v13);
  }
  v48 = v57;
  if (v59 != (_BYTE *)v57 && v57)
  {
    v57 = 0;
    LODWORD(v58) = 0;
    WTF::fastFree(v48, v13);
  }
  v49 = v54;
  if (v56 != (_BYTE *)v54 && v54)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree(v49, v13);
  }
  v50 = v71;
  v71 = 0;
  if (v50)
  {
    if (!*v50)
    {
LABEL_62:
      __break(0xC471u);
      JUMPOUT(0x19616E3F4);
    }
    --*v50;
  }
  v51 = v70;
  v70 = 0;
  if (v51)
  {
    v52 = *(_DWORD *)(v51 + 8);
    if (!v52)
    {
      __break(0xC471u);
      JUMPOUT(0x19616E414);
    }
    *(_DWORD *)(v51 + 8) = v52 - 1;
  }
  return v12;
}

WTF::StringImpl *WebCore::normalizeSpacesInternal<unsigned char>(WTF::StringImpl **a1, unsigned __int8 *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  unsigned int v7;
  int v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  char v25;
  __int16 v26;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v22);
  if (a3)
  {
    while (1)
    {
      v7 = *a2;
      if (v7 - 127 < 0x21 || v7 < 0x20 || v7 == 173)
        v10 = 8203;
      else
        v10 = *a2;
      if (v7 == 160)
        v10 = 32;
      v11 = v7 > 0x20;
      v12 = (1 << v7) & 0x100000600;
      v13 = v11 || v12 == 0;
      v14 = v13 ? v10 : 32;
      v26 = v14;
      if (!v23)
        break;
      v15 = v24;
      if (v24 >= *((_DWORD *)v23 + 1) || v22 != 0)
        break;
      if ((*((_BYTE *)v23 + 16) & 4) != 0)
      {
        if (v14 > 0xFF)
          break;
        v18 = *((_QWORD *)v23 + 1);
        ++v24;
        *(_BYTE *)(v18 + v15) = v14;
      }
      else
      {
        v17 = *((_QWORD *)v23 + 1);
        ++v24;
        *(_WORD *)(v17 + 2 * v15) = v14;
      }
LABEL_30:
      ++a2;
      if (!--a3)
        goto LABEL_31;
    }
    WTF::StringBuilder::append();
    goto LABEL_30;
  }
LABEL_31:
  v19 = v22;
  if (v22
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22),
        (v19 = v22) != 0))
  {
    *(_DWORD *)v19 += 2;
  }
  *a1 = v19;
  v20 = v23;
  v23 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v6);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::normalizeSpacesInternal<char16_t>(WTF::StringImpl **a1, unsigned __int16 *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  _BOOL4 isIBooks;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  char v23;
  __int16 v24;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v20);
  if (a3)
  {
    v7 = 2 * a3;
    while (1)
    {
      v8 = *a2;
      v9 = 32;
      v10 = v8 > 0x20 || ((1 << v8) & 0x100000600) == 0;
      if (v10 && v8 != 160)
        break;
LABEL_7:
      v24 = v9;
      if (v21)
      {
        v11 = v22;
        if (v22 < *((_DWORD *)v21 + 1) && v20 == 0)
        {
          if ((*((_BYTE *)v21 + 16) & 4) == 0)
          {
            v15 = *((_QWORD *)v21 + 1);
            ++v22;
            *(_WORD *)(v15 + 2 * v11) = v9;
            goto LABEL_13;
          }
          if (v9 <= 0xFF)
          {
            v16 = *((_QWORD *)v21 + 1);
            ++v22;
            *(_BYTE *)(v16 + v11) = v9;
            goto LABEL_13;
          }
        }
      }
      WTF::StringBuilder::append();
LABEL_13:
      ++a2;
      v7 -= 2;
      if (!v7)
        goto LABEL_29;
    }
    isIBooks = 1;
    if (v8 >= 0x20 && v8 - 127 >= 0x21 && v8 != 173 && v8 != 8203)
    {
      if (v8 < 0x200E)
        goto LABEL_43;
      if (v8 >> 4 < 0x201)
        goto LABEL_19;
      if (v8 < 0x202A)
        goto LABEL_43;
      if (v8 >= 0x202F && v8 != 65279)
      {
        if (v8 == 65532)
        {
          isIBooks = WebCore::CocoaApplication::isIBooks((WebCore::CocoaApplication *)1);
          v8 = 65532;
          goto LABEL_19;
        }
LABEL_43:
        isIBooks = 0;
      }
    }
LABEL_19:
    if ((v8 & 0xFFFE) == 0x200C || isIBooks)
      v9 = 8203;
    else
      v9 = v8;
    goto LABEL_7;
  }
LABEL_29:
  v17 = v20;
  if (v20
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v20),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v20),
        (v17 = v20) != 0))
  {
    *(_DWORD *)v17 += 2;
  }
  *a1 = v17;
  v18 = v21;
  v21 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v6);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FontCascade::shouldDisableFontSubpixelAntialiasingForTesting(WebCore::FontCascade *this)
{
  unsigned __int8 v1;

  v1 = atomic_load(WebCore::disableFontSubpixelAntialiasingForTesting);
  return v1 & 1;
}

uint64_t WebCore::FontCascade::characterRangeCodePath(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v5;
  char v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  UBlockCode Code;
  int v19;
  unsigned int v20;
  unint64_t v21;

  if (!a2)
    return 1;
  v4 = 0;
  v5 = 0;
  v6 = 1;
  while (1)
  {
    v7 = *(unsigned __int16 *)(a1 + 2 * v4);
    if ((v5 & 1) != 0 && v7 == 8205)
      return 2;
    if (v7 < 0x2E5)
      goto LABEL_6;
    if (v7 < 0x2EA)
      return 2;
    if (v7 < 0x300)
      goto LABEL_6;
    if (v7 < 0x370)
      return 2;
    v5 = 0;
    if (v7 >= 0x591 && v7 != 1470)
    {
      if (v7 < 0x5D0)
        return 2;
      if (v7 < 0x600)
        goto LABEL_6;
      v9 = v7 >> 5;
      if (v7 >> 5 < 0x85)
        return 2;
      v10 = v7 >> 8;
      if (v7 >> 8 < 0x11)
        goto LABEL_6;
      v11 = v7 >> 9;
      if (v7 >> 9 < 9)
        return 2;
      if (v7 < 0x135D)
        goto LABEL_6;
      if (v9 < 0x9B)
        return 2;
      if (v10 < 0x17)
        goto LABEL_6;
      v12 = v7 >> 4;
      if (v7 >> 4 < 0x18B)
        return 2;
      if (v10 < 0x19)
        goto LABEL_6;
      if (v12 < 0x195)
        return 2;
      if (v7 >> 7 < 0x33)
        goto LABEL_6;
      if (v9 < 0xCF)
        return 2;
      if (v11 < 0xD)
        goto LABEL_6;
      if (v10 < 0x1D)
        return 2;
      if (v7 >> 6 < 0x77)
        goto LABEL_6;
      if (v11 < 0xF)
        return 2;
      if (v7 <= 0x2000)
      {
        v5 = 0;
        v6 = 3;
        goto LABEL_7;
      }
      if (v12 < 0x20D)
        goto LABEL_6;
      if (v10 < 0x21)
        return 2;
      if (v7 < 0x26F9)
        goto LABEL_6;
      if (v7 == 9977)
        return 2;
      if (v7 < 0x2CEF)
        goto LABEL_6;
      if (v7 < 0x2CF2)
        return 2;
      if (v7 < 0x302A)
        goto LABEL_6;
      if (v12 < 0x303)
        return 2;
      if (v7 < 0x3099)
        goto LABEL_6;
      if (v7 < 0x309D)
        return 2;
      if (v7 < 0xA67C)
        goto LABEL_6;
      if (v7 < 0xA67E)
        return 2;
      if (v12 < 0xA6F)
        goto LABEL_6;
      if (v7 < 0xA6F2)
        return 2;
      if (v7 >> 11 < 0x15)
        goto LABEL_6;
      if (v7 >> 10 < 0x2B)
        return 2;
      if (v12 < 0xD7B)
        goto LABEL_6;
      if (v7 >> 11 < 0x1B)
        return 2;
      if (v7 >> 10 > 0x36)
      {
        if (v11 < 0x7F)
        {
          v5 = 0;
          goto LABEL_7;
        }
        v8 = 2;
        if (v12 < 0xFE1 || (v7 & 0xFFF0) == 0xFE20)
          return v8;
LABEL_6:
        v5 = 0;
        goto LABEL_7;
      }
      v13 = v4 + 1;
      if (v4 + 1 == a2)
        goto LABEL_6;
      v14 = *(unsigned __int16 *)(a1 + 2 * v13);
      if ((v14 & 0xFC00) != 0xDC00)
        goto LABEL_81;
      v15 = v14 + (v7 << 10);
      v16 = v15 - 56613888;
      if ((v15 - 56613888) >> 9 < 0x85)
        goto LABEL_81;
      if (v16 < 0x10A60)
        return 2;
      if (v16 < 0x11000)
        goto LABEL_81;
      if (v16 < 0x110D0)
        return 2;
      if (v16 < 0x11100)
        goto LABEL_81;
      if (v16 < 0x111E0)
        return 2;
      if (v16 < 0x11200)
        goto LABEL_81;
      if (v16 < 0x11250)
        return 2;
      if (v16 < 0x112B0)
        goto LABEL_81;
      if (v16 < 0x11380)
        return 2;
      if (v16 < 0x11400)
        goto LABEL_81;
      if (v16 < 0x114E0)
        return 2;
      if (v16 < 0x11580)
        goto LABEL_81;
      if (v16 < 0x11660)
        return 2;
      if (v16 < 0x11680)
        goto LABEL_81;
      if (v16 < 0x116D0)
        return 2;
      if (v16 < 0x11700)
        goto LABEL_81;
      if (v16 >> 6 < 0x473)
        return 2;
      if (v16 >> 8 < 0x1E9)
        goto LABEL_81;
      if (v16 < 0x1E960)
        return 2;
      if (v16 < 0x1F1E6)
      {
LABEL_81:
        v5 = 0;
        v4 = v13;
        goto LABEL_7;
      }
      v8 = 2;
      if (v16 < 0x1F200)
        return v8;
      v21 = v13;
      v19 = v15;
      if ((v15 - 56741883) < 5)
        return v8;
      v20 = v15 - 56613888;
      Code = ublock_getCode(v16);
      v5 = 1;
      if ((Code - 205) < 3
        || (Code - 55) < 2
        || Code == UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS
        || Code == UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A)
      {
        goto LABEL_77;
      }
      if (v20 < 0xE0000)
      {
        v5 = 0;
LABEL_77:
        v4 = v21;
        goto LABEL_7;
      }
      v8 = 2;
      if (v20 < 0xE0080 || (v19 - 57531648) < 0xF0)
        return v8;
      v5 = 0;
      v4 = v21;
    }
LABEL_7:
    ++v4;
    v8 = v6;
    if (v4 >= a2)
      return v8;
  }
}

uint64_t WebCore::FontCascade::isCJKIdeograph(unsigned int a1)
{
  char v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v8;

  v2 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1969F77D0, (uint32x4_t)vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_1969F77C0))));
  result = 1;
  if ((v2 & 1) == 0)
  {
    v4 = a1 & 0xFFFFFF80;
    v5 = a1 - 63744;
    v6 = (a1 - 0x20000) >> 5;
    v7 = (a1 - 173824) >> 5;
    v8 = a1 - 194560 < 0x220;
    if (v4 == 11904)
      v8 = 1;
    if (v7 < 0x89)
      v8 = 1;
    if (v6 < 0x537)
      v8 = 1;
    return v5 < 0x200 || v8;
  }
  return result;
}

BOOL WebCore::FontCascade::isCJKIdeographOrSymbol(signed int a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int32x4_t v7;

  result = 1;
  if (a1 <= 8412)
  {
    if ((a1 - 8224) <= 0x31 && ((1 << (a1 - 32)) & 0x2038418010003) != 0)
      return result;
    if ((a1 - 711) > 0x24)
      goto LABEL_12;
    v3 = 1 << (a1 + 57);
    v4 = 0x1800040019;
    goto LABEL_10;
  }
  if ((a1 - 8413) <= 0x39 && ((1 << (a1 + 35)) & 0x240314800000003) != 0)
    return result;
  if ((a1 - 8481) <= 0x31)
  {
    v3 = 1 << (a1 - 33);
    v4 = 0x3800004000401;
LABEL_10:
    if ((v3 & v4) != 0)
      return result;
  }
LABEL_12:
  if ((a1 - 8534) >= 5 && (a1 & 0xFFFFFFEC) - 8544 >= 0xC)
  {
    if (a1 > 8977)
    {
      if ((a1 - 9150) < 2)
        return result;
      v5 = 8978;
    }
    else
    {
      if (a1 == 8575 || a1 == 8585)
        return result;
      v5 = 8967;
    }
    if (a1 != v5
      && (a1 - 9152) >= 0xD
      && a1 != 9166
      && a1 != 9251
      && (a1 - 9312) >= 0x33
      && (a1 - 9372) >= 0x64)
    {
      if ((a1 - 9632) >= 0x2D)
      {
        if (a1 >> 2 == 2432)
          return result;
      }
      else if (((0x1AC330CE0C07uLL >> (a1 + 96)) & 1) != 0 || (a1 & 0xFFFFFFFC) == 0x2600)
      {
        return result;
      }
      if (((a1 - 9678) > 0x38 || ((1 << (a1 + 50)) & 0x180000201F0003FLL) == 0)
        && ((a1 - 9742) > 0x34 || ((1 << (a1 - 14)) & 0x14000000000301) == 0))
      {
        v6 = a1 & 0xFFFFFFF0;
        if ((a1 & 0xFFFFFFF0) != 0x2660
          && (a1 - 9842) >= 0xC
          && ((a1 - 10010) > 0x3C || ((1 << (a1 - 26)) & 0x1000006000000001) == 0)
          && ((a1 - 9888) > 0x1E || ((1 << (a1 + 96)) & 0x60000001) == 0)
          && a1 != 10003)
        {
          v7 = vdupq_n_s32(a1);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1969F77F0, (uint32x4_t)vaddq_s32(v7, (int32x4_t)xmmword_1969F77E0)))) & 1) == 0&& (a1 - 65072) >= 0x20&& a1 != 11034&& v6 != 12272&& v6 != 12688&& (a1 & 0xFFFFFFE0) != 0x31A0&& (a1 & 0xFFFFFE00) != 0x3200&& ((a1 - 65040) > 9 || ((1 << (a1 - 16)) & 0x207) == 0))
          {
            if ((a1 - 65293) <= 0x11 && ((1 << (a1 - 13)) & 0x2C001) != 0)
            {
              return 0;
            }
            else if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1969F7810, (uint32x4_t)vaddq_s32(v7, (int32x4_t)xmmword_1969F7800)))) & 1) == 0&& (a1 - 127344) >= 0x1A&& (a1 - 127488) >= 0x4C6&& a1 != 127232&& (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1969F77D0, (uint32x4_t)vaddq_s32(v7, (int32x4_t)xmmword_1969F77C0)))) & 1) == 0&& (a1 - 63744) >= 0x200&& (a1 - 0x20000) >> 5 >= 0x537&& (a1 - 173824) >> 5 >= 0x89&& (a1 & 0xFFFFFF80) != 0x2E80)
            {
              return (a1 - 194560) < 0x220;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::FontCascade::expansionOpportunityCountInternal(uint64_t result, unint64_t a2, char a3, char a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t i;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t j;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  int v20;
  int v21;
  int v22;
  _BOOL4 isCJKIdeographOrSymbol;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL4 v28;

  v6 = result;
  v7 = (a4 & 3) == 2;
  v8 = (a4 & 3) == 0 || (a4 & 3) == 2;
  if ((a3 & 1) != 0)
  {
    if (a2)
    {
      for (i = a2; i; --i)
      {
        if (a2 <= i - 1)
        {
          __break(1u);
          return result;
        }
        result = *(unsigned __int16 *)(v6 + 2 * (i - 1));
        v10 = result > 0x20 || ((1 << result) & 0x100000600) == 0;
        if (v10 && (_DWORD)result != 160)
        {
          if (i >= 2 && (result & 0xFC00) == 0xDC00)
          {
            v11 = *(unsigned __int16 *)(v6 + 2 * i - 4);
            v12 = (v11 & 0xFC00) == 55296;
            v13 = result - 56613888 + (v11 << 10);
            if (v12)
              --i;
            if (v12)
              LODWORD(result) = v13;
          }
          result = WebCore::FontCascade::isCJKIdeographOrSymbol(result);
          if (!(_DWORD)result)
          {
            v8 = 0;
            continue;
          }
          if ((_BYTE)v8)
            v14 = v7;
          else
            v14 = v7 + 1;
          v7 = v14 + 1;
        }
        else
        {
          ++v7;
        }
        v8 = 1;
      }
    }
  }
  else if (a2)
  {
    for (j = 0; j < a2; ++j)
    {
      v16 = *(unsigned __int16 *)(v6 + 2 * j);
      v17 = v16 > 0x20 || ((1 << v16) & 0x100000600) == 0;
      if (v17 && v16 != 160)
      {
        v18 = j + 1;
        if ((v16 & 0xFC00) == 0xD800 && v18 < a2)
        {
          v20 = *(unsigned __int16 *)(v6 + 2 * v18);
          v21 = v20 & 0xFC00;
          v22 = v20 + (v16 << 10) - 56613888;
          if (v21 == 56320)
          {
            ++j;
            v16 = v22;
          }
        }
        isCJKIdeographOrSymbol = WebCore::FontCascade::isCJKIdeographOrSymbol(v16);
        if ((_BYTE)v8)
          v24 = v7;
        else
          v24 = v7 + 1;
        if (isCJKIdeographOrSymbol)
        {
          v7 = v24 + 1;
          v8 = 1;
        }
        else
        {
          v8 = 0;
        }
      }
      else
      {
        ++v7;
        v8 = 1;
      }
    }
  }
  v25 = a4 & 0xC;
  if (v25 != 8 || (_DWORD)v8)
  {
    v28 = v25 == 0 && (_DWORD)v8 != 0;
    if (v25 == 0 && (_DWORD)v8 != 0)
      v27 = 0;
    else
      v27 = v8 << 32;
    v26 = v7 - v28;
  }
  else
  {
    v26 = v7 + 1;
    v27 = 0x100000000;
  }
  return v27 | v26;
}

uint64_t WebCore::FontCascade::expansionOpportunityCount(unsigned __int8 *a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;

  v4 = a2;
  a2 = a2;
  if ((v4 & 0xFF00000000) == 0)
    return WebCore::FontCascade::expansionOpportunityCountInternal((uint64_t)a1, a2, a3, a4);
  v5 = (a4 & 3) == 2;
  v6 = (a4 & 3) == 0 || (a4 & 3) == 2;
  if ((a3 & 1) != 0)
  {
    if ((_DWORD)a2)
    {
      do
      {
        v7 = a1[a2 - 1];
        v8 = v7 > 0x20 || ((1 << v7) & 0x100000600) == 0;
        if (v8 && v7 != 160)
        {
          v6 = 0;
        }
        else
        {
          ++v5;
          v6 = 1;
        }
        --a2;
      }
      while (a2);
    }
  }
  else if ((_DWORD)a2)
  {
    do
    {
      v10 = *a1;
      v11 = v10 > 0x20 || ((1 << v10) & 0x100000600) == 0;
      if (v11 && v10 != 160)
      {
        v6 = 0;
      }
      else
      {
        ++v5;
        v6 = 1;
      }
      ++a1;
      --a2;
    }
    while (a2);
  }
  v12 = a4 & 0xC;
  if (v12 != 8 || (_DWORD)v6)
  {
    v15 = (_DWORD)v6 != 0;
    v16 = v6 << 32;
    v17 = v12 == 0 && v15;
    if (v17)
      v14 = 0;
    else
      v14 = v16;
    v13 = v5 - v17;
  }
  else
  {
    v13 = v5 + 1;
    v14 = 0x100000000;
  }
  return v14 | v13;
}

uint64_t WebCore::FontCascade::canReceiveTextEmphasis(UChar32 a1)
{
  uint64_t result;
  int v3;

  if (((1 << u_charType(a1)) & 0x1F001) != 0)
    return 0;
  result = 0;
  if (a1 > 65791)
  {
    if ((a1 - 65792) < 2)
      return result;
    v3 = 66463;
  }
  else
  {
    if ((a1 - 3851) < 2)
      return result;
    v3 = 4961;
  }
  if (a1 != v3)
    return 1;
  return result;
}

unsigned __int16 *WebCore::FontCascade::getEmphasisMarkGlyphData@<X0>(unsigned __int16 *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  unsigned __int16 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  const WebCore::FontCascadeDescription *v12;
  int v13;
  uint64_t v14;
  WebCore::FontCascadeFonts *v15;
  void *v16;
  int v17;
  char v18;
  WTF *v19;
  void *v20;
  __int16 v21;
  char v22;
  WTF *v23;
  __int16 v24;
  char v25;

  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || (v5 = *(_DWORD *)(v4 + 4)) == 0)
  {
LABEL_2:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return this;
  }
  v6 = this;
  v7 = *(unsigned __int8 **)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    v8 = *v7;
  }
  else
  {
    v8 = *(unsigned __int16 *)v7;
    v9 = v5 != 1 && (v8 & 0xFC00) == 55296;
    if (v9)
    {
      v10 = *((unsigned __int16 *)v7 + 1);
      v9 = (v10 & 0xFC00) == 56320;
      v11 = v10 + ((_DWORD)v8 << 10) - 56613888;
      if (v9)
        v8 = v11;
      else
        v8 = v8;
    }
  }
  v12 = (const WebCore::FontCascadeDescription *)(this + 8);
  v13 = (this[90] >> 12) & 3;
  switch(v13)
  {
    case 0:
      goto LABEL_16;
    case 2:
      v14 = 2;
      break;
    case 3:
LABEL_16:
      if (v8 >= 0x100)
        v14 = 2 * (u_hasBinaryProperty(v8, UCHAR_EMOJI_PRESENTATION) != 0);
      else
        v14 = 0;
      break;
    default:
      v14 = 1;
      break;
  }
  v15 = (WebCore::FontCascadeFonts *)*((_QWORD *)v6 + 27);
  if (v15)
  {
    ++*(_DWORD *)v15;
    WebCore::FontCascadeFonts::glyphDataForCharacter((unint64_t)v15, (void *)v8, v12, 3, v14, (uint64_t)&v21);
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v15, v16);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  else
  {
    WebCore::FontCascadeFonts::glyphDataForCharacter(0, (void *)v8, v12, 3, v14, (uint64_t)&v21);
  }
  v24 = v21;
  v25 = v22;
  this = (unsigned __int16 *)v23;
  if (!v23)
    goto LABEL_2;
  if (*((_QWORD *)v23 + 1))
  {
    *(_WORD *)a3 = v24;
    *(_BYTE *)(a3 + 2) = v25;
    v17 = (*(_DWORD *)this)++;
    *(_QWORD *)(a3 + 8) = this;
    v18 = 1;
  }
  else
  {
    v18 = 0;
    *(_BYTE *)a3 = 0;
    v17 = *(_DWORD *)this - 1;
  }
  *(_BYTE *)(a3 + 16) = v18;
  if (!v17)
    return (unsigned __int16 *)WTF::fastFree((WTF *)this, v16);
  *(_DWORD *)this = v17;
  return this;
}

uint64_t WebCore::FontCascade::emphasisMarkAscent(WebCore::FontCascade *this, const WTF::AtomString *a2)
{
  void *v2;
  WTF *v3;
  unsigned int *v4;
  uint64_t v5;
  _BYTE v7[8];
  unsigned int **v8;
  char v9;

  WebCore::FontCascade::getEmphasisMarkGlyphData((unsigned __int16 *)this, a2, (uint64_t)v7);
  if (!v9)
    return 0;
  v3 = (WTF *)v8;
  if (!v8)
    return 0;
  v4 = v8[1];
  if (v4)
  {
    ++*v4;
    v5 = v4[15];
    WTF::RefCounted<WebCore::Font>::deref((WebCore::Font *)v4);
  }
  else
  {
    v5 = 0;
  }
  if (*(_DWORD *)v3 == 1)
    WTF::fastFree(v3, v2);
  else
    --*(_DWORD *)v3;
  return v5;
}

uint64_t WebCore::FontCascade::emphasisMarkDescent(WebCore::FontCascade *this, const WTF::AtomString *a2)
{
  void *v2;
  WTF *v3;
  unsigned int *v4;
  uint64_t v5;
  _BYTE v7[8];
  unsigned int **v8;
  char v9;

  WebCore::FontCascade::getEmphasisMarkGlyphData((unsigned __int16 *)this, a2, (uint64_t)v7);
  if (!v9)
    return 0;
  v3 = (WTF *)v8;
  if (!v8)
    return 0;
  v4 = v8[1];
  if (v4)
  {
    ++*v4;
    v5 = v4[16];
    WTF::RefCounted<WebCore::Font>::deref((WebCore::Font *)v4);
  }
  else
  {
    v5 = 0;
  }
  if (*(_DWORD *)v3 == 1)
    WTF::fastFree(v3, v2);
  else
    --*(_DWORD *)v3;
  return v5;
}

float WebCore::FontCascade::floatEmphasisMarkHeight(WebCore::FontCascade *this, const WTF::AtomString *a2)
{
  void *v2;
  float *v3;
  float v4;
  _BYTE v6[8];
  WTF *v7;
  char v8;

  WebCore::FontCascade::getEmphasisMarkGlyphData((unsigned __int16 *)this, a2, (uint64_t)v6);
  if (!v8 || !v7)
    return 0.0;
  v3 = (float *)*((_QWORD *)v7 + 1);
  if (*(_DWORD *)v7 == 1)
  {
    WTF::fastFree(v7, v2);
    if (v3)
      goto LABEL_5;
    return 0.0;
  }
  --*(_DWORD *)v7;
  if (!v3)
    return 0.0;
LABEL_5:
  ++*(_DWORD *)v3;
  v4 = v3[5] + v3[7];
  WTF::RefCounted<WebCore::Font>::deref((WebCore::Font *)v3);
  return v4;
}

void WebCore::offsetToMiddleOfGlyph(WebCore *this, const WebCore::Font *a2)
{
  unsigned int v2;
  int v4;
  BOOL v5;
  uint64_t v6;
  WTF **v7;
  uint64_t PageSlowCase;
  CTFontOrientation v9;
  float x;
  uint64_t v11;
  CTFontOrientation v12;
  float y;
  float width;
  float height;
  float v16;
  float v17;
  _OWORD *v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float *v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF **v28;
  WTF *v29;
  CGFloat v30;
  float v31;
  float v32;
  float v33;
  CGRect advances;
  CGGlyph glyphs;
  CGRect BoundingRectsForGlyphs;

  v2 = a2;
  v4 = *((unsigned __int16 *)this + 167);
  if (*((_BYTE *)this + 100))
  {
    v5 = v4 != (_DWORD)a2 || (_DWORD)a2 == 0;
    if ((v5 || (*((_BYTE *)this + 256) & 2) != 0)
      && WebCore::GlyphMetricsMap<float>::metricsForGlyph((uint64_t)this + 128, a2) == -1.0)
    {
      glyphs = v2;
      advances.origin = (CGPoint)*MEMORY[0x1E0C9D820];
      if (*((float *)this + 24) != 0.0)
      {
        v9 = kCTFontOrientationHorizontal;
        if (*((_BYTE *)this + 100))
        {
          if ((*((_BYTE *)this + 344) & 4) != 0)
            v9 = kCTFontOrientationHorizontal;
          else
            v9 = kCTFontOrientationVertical;
        }
        CTFontGetAdvancesForGlyphs(*((CTFontRef *)this + 11), v9, &glyphs, (CGSize *)&advances, 1);
      }
      x = advances.origin.x;
      WebCore::GlyphMetricsMap<float>::locatePage((uint64_t)this + 128, v2 >> 4);
      *(float *)(v11 + 4 * (v2 & 0xF)) = x;
    }
    return;
  }
  if (v4 == (_DWORD)a2)
  {
    if ((_DWORD)a2)
      return;
    v7 = (WTF **)((char *)this + 208);
    v6 = *((_QWORD *)this + 26);
    if (v6)
      goto LABEL_46;
  }
  else
  {
    v7 = (WTF **)((char *)this + 208);
    v6 = *((_QWORD *)this + 26);
    if (v6)
    {
      if (a2 >= 0x10)
      {
        PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase(v6, a2 >> 4);
LABEL_13:
        if (*(float *)(PageSlowCase + 16 * (v2 & 0xF) + 8) != -1.0)
          return;
        if (*((_BYTE *)this + 100))
          v12 = kCTFontOrientationVertical;
        else
          v12 = kCTFontOrientationHorizontal;
        goto LABEL_22;
      }
LABEL_46:
      PageSlowCase = v6 + 4;
      if (!*(_BYTE *)v6)
      {
        *(_OWORD *)(v6 + 4) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 20) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 36) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 52) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 68) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 84) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 100) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 116) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 132) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 148) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 164) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 180) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 196) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 212) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 228) = xmmword_1969F2680;
        *(_OWORD *)(v6 + 244) = xmmword_1969F2680;
        *(_BYTE *)v6 = 1;
      }
      goto LABEL_13;
    }
  }
  v12 = kCTFontOrientationHorizontal;
LABEL_22:
  glyphs = v2;
  memset(&advances, 0, sizeof(advances));
  BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*((_QWORD *)this + 11), v12, &glyphs, &advances, 1);
  y = BoundingRectsForGlyphs.origin.y;
  width = BoundingRectsForGlyphs.size.width;
  height = BoundingRectsForGlyphs.size.height;
  v16 = y + height;
  v17 = *((float *)this + 85);
  v18 = (_OWORD *)*((_QWORD *)this + 26);
  if (!v18)
  {
    v32 = y + height;
    v33 = *((float *)this + 85);
    v31 = width;
    v30 = BoundingRectsForGlyphs.origin.x;
    v18 = (_OWORD *)WTF::fastMalloc((WTF *)0x110);
    *v18 = 0u;
    v18[1] = 0u;
    v18[2] = 0u;
    v18[3] = 0u;
    v18[4] = 0u;
    v18[5] = 0u;
    v18[6] = 0u;
    v18[7] = 0u;
    v18[8] = 0u;
    v18[9] = 0u;
    v18[10] = 0u;
    v18[11] = 0u;
    v18[12] = 0u;
    v18[13] = 0u;
    v18[14] = 0u;
    v18[15] = 0u;
    v18[16] = 0u;
    v25 = *v7;
    *v7 = (WTF *)v18;
    if (v25)
    {
      v26 = *((_QWORD *)v25 + 33);
      if (v26)
      {
        v27 = *(unsigned int *)(v26 - 4);
        if ((_DWORD)v27)
        {
          v28 = (WTF **)(v26 + 8);
          do
          {
            if (*((_DWORD *)v28 - 2) != -1)
            {
              v29 = *v28;
              *v28 = 0;
              if (v29)
                WTF::fastFree(v29, v24);
            }
            v28 += 2;
            --v27;
          }
          while (v27);
        }
        WTF::fastFree((WTF *)(v26 - 16), v24);
      }
      WTF::fastFree(v25, v24);
      v18 = *v7;
    }
    BoundingRectsForGlyphs.origin.x = v30;
    width = v31;
    v16 = v32;
    v17 = v33;
  }
  v19 = BoundingRectsForGlyphs.origin.x;
  v20 = -v16;
  v21 = v17 + width;
  if (v2 < 0x10)
  {
    v22 = (uint64_t)v18 + 4;
    if (!*(_BYTE *)v18)
    {
      *(_OWORD *)((char *)v18 + 4) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 20) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 36) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 52) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 68) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 84) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 100) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 116) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 132) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 148) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 164) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 180) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 196) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 212) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 228) = xmmword_1969F2680;
      *(_OWORD *)((char *)v18 + 244) = xmmword_1969F2680;
      *(_BYTE *)v18 = 1;
    }
  }
  else
  {
    v22 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v18, v2 >> 4);
  }
  v23 = (float *)(v22 + 16 * (v2 & 0xF));
  *v23 = v19;
  v23[1] = v20;
  v23[2] = v21;
  v23[3] = height;
}

_QWORD *WebCore::GlyphBuffer::add(WebCore::GlyphBuffer *this, __int16 a2, const WebCore::Font *a3, float a4, uint64_t a5)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int16 v16;
  char *v17;
  _DWORD *v18;
  WebCore::GlyphBuffer *v19;
  WebCore::GlyphBuffer *v20;
  WebCore::GlyphBuffer *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  __int16 v28;
  __int128 v29;

  v29 = COERCE_UNSIGNED_INT64(a4);
  v28 = a2;
  v27 = a5;
  v26[0] = a3;
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5 == *((_DWORD *)this + 2))
  {
    v16 = a2;
    v19 = this;
    v22 = a5;
    WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)this, (unint64_t)v26);
    a2 = v16;
    this = v19;
    a5 = v22;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)this + 8 * v5) = a3;
    *((_DWORD *)this + 3) = v5 + 1;
  }
  v6 = (_DWORD *)((char *)this + 26680);
  v7 = *((unsigned int *)this + 2055);
  if ((_DWORD)v7 == *((_DWORD *)this + 2054))
  {
    v20 = this;
    v23 = a5;
    v17 = (char *)this + 26680;
    WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)this + 8208, (unint64_t)&v28);
    v6 = v17;
    this = v20;
    a5 = v23;
  }
  else
  {
    *(_WORD *)(*((_QWORD *)this + 1026) + 2 * v7) = a2;
    *((_DWORD *)this + 2055) = v7 + 1;
  }
  v8 = (char *)this + 43072;
  v9 = *((unsigned int *)this + 2571);
  if ((_DWORD)v9 == *((_DWORD *)this + 2570))
  {
    v18 = v6;
    v21 = this;
    v24 = a5;
    v14 = (char *)this + 43072;
    WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)this + 10272, (unint64_t)&v29);
    v8 = v14;
    v6 = v18;
    this = v21;
    a5 = v24;
  }
  else
  {
    *(_OWORD *)(*((_QWORD *)this + 1284) + 16 * v9) = v29;
    ++*((_DWORD *)this + 2571);
  }
  result = (_QWORD *)((char *)this + 26672);
  v26[0] = 0;
  v26[1] = 0;
  v11 = v6[1];
  if ((_DWORD)v11 == *v6)
  {
    v25 = a5;
    v15 = v8;
    result = (_QWORD *)WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)result, (unint64_t)v26);
    v8 = v15;
    a5 = v25;
  }
  else
  {
    v12 = (_QWORD *)(*result + 16 * v11);
    *v12 = 0;
    v12[1] = 0;
    ++v6[1];
  }
  v13 = *((unsigned int *)v8 + 3);
  if ((_DWORD)v13 == *((_DWORD *)v8 + 2))
    return (_QWORD *)WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)v8, (unint64_t)&v27);
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v13) = a5;
  *((_DWORD *)v8 + 3) = v13 + 1;
  return result;
}

int *WebCore::LayoutRect::move<float,int>(int *result, int a2, float a3)
{
  double v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;

  v3 = (float)((float)((float)*result * 0.015625) + a3) * 64.0;
  if (v3 >= 2147483650.0)
  {
    v4 = 0x7FFFFFFF;
  }
  else if (v3 <= -2147483650.0)
  {
    v4 = 0x80000000;
  }
  else
  {
    v4 = (int)v3;
  }
  v5 = a2 << 6;
  if (a2 < -33554432)
    v5 = 0x80000000;
  if (a2 > 0x1FFFFFF)
    v5 = 0x7FFFFFFF;
  v6 = result[1];
  v7 = __OFADD__(v6, v5);
  v8 = v6 + v5;
  v9 = (v6 >> 31) + 0x7FFFFFFF;
  if (!v7)
    v9 = v8;
  *result = v4;
  result[1] = v9;
  return result;
}

uint64_t WebCore::FontCascade::dashesForIntersectionsWithRect(WebCore::FontCascade *this, const WebCore::TextRun *a2, const WebCore::FloatPoint *a3, const WebCore::FloatRect *a4)
{
  uint64_t v4;
  _BYTE *v5;
  float *v6;
  float *v7;
  float32x2_t *v8;
  float32x2_t *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  int v23;
  int v24;
  _BYTE *v25;
  void *v26;
  unint64_t v27;
  WebCore::Font *v28;
  float64x2_t v29;
  _BYTE *v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  UChar32 v37;
  UBlockCode Code;
  WebCore::Font *v42;
  unsigned int v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE *v49;
  float v50;
  double *v51;
  float v52;
  float v53;
  double v54;
  double v55;
  unsigned int v56;
  WebCore::Font *v57;
  WebCore::Font *v58;
  uint64_t *v59;
  _BYTE *PageSlowCase;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  void *v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  WebCore::Font *v80;
  _DWORD *v81;
  WTF *v82;
  WTF *v83;
  WTF *v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;
  void *v88;
  WTF *v89;
  uint64_t v90;
  void *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  int v97;
  WTF *v98;
  void *v99;
  unint64_t v100;
  int v101;
  UChar32 v102;
  WTF *v103;
  uint64_t v104;
  _BYTE *v105;
  _QWORD v106[2];
  int v107;
  float v108;
  float v109;
  float v110;
  unsigned int v111;
  _QWORD *v112;
  WTF **v113;
  WebCore::Font *v114;
  float64x2_t v115;
  __int128 v116;
  float64x2_t v117;
  WTF *v118;
  int v119;
  int v120;
  uint64_t v121;
  WTF *v122;
  int v123;
  uint64_t v124;
  WTF *v125;
  int v126;
  uint64_t v127;
  WTF *v128;
  int v129;
  uint64_t v130;
  _BYTE v131[16];
  uint64_t v132;
  float64x2_t v133;
  unsigned int v134;
  _QWORD v135[3];
  uint64_t v136;
  _BYTE v137[56];
  int v138;
  _BYTE *v139;
  _BYTE v140[56];
  int v141;
  unsigned __int8 v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;

  v4 = MEMORY[0x1E0C80A78](this, a2);
  v7 = v6;
  v9 = v8;
  v10 = v5;
  v11 = v4;
  v13 = v12;
  v146 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(v4 + 216);
  if (v14)
  {
    v15 = *(_DWORD *)v14 + 1;
    *(_DWORD *)v14 = v15;
    v16 = *(_DWORD *)(v14 + 20);
    if (v16)
    {
      v17 = *(unsigned int **)(v14 + 8);
      v18 = &v17[10 * v16];
      do
      {
        v19 = v17[3];
        if ((_DWORD)v19)
        {
          v20 = 16 * v19;
          v21 = (_QWORD *)(*(_QWORD *)v17 + 8);
          do
          {
            result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v21 + 24))(*v21);
            if ((result & 1) != 0)
            {
              if (*(_DWORD *)v14 == 1)
              {
                WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v14, v5);
                result = WTF::fastFree(v98, v99);
              }
              else
              {
                --*(_DWORD *)v14;
              }
              *(_QWORD *)v13 = 0;
              *(_QWORD *)(v13 + 8) = 0;
              return result;
            }
            v21 += 2;
            v20 -= 16;
          }
          while (v20);
        }
        v17 += 10;
      }
      while (v17 != v18);
      v15 = *(_DWORD *)v14;
    }
    v23 = v15 - 1;
    if (v23)
    {
      *(_DWORD *)v14 = v23;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v14, v5);
      WTF::fastFree(v87, v88);
    }
  }
  v24 = WebCore::FontCascade::s_codePath;
  if (!WebCore::FontCascade::s_codePath)
  {
    if ((v10[37] & 8) != 0 && (v86 = *((_QWORD *)v10 + 1)) != 0 && (*(_BYTE *)(v86 + 16) & 4) == 0)
      v24 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v86 + 8), *(unsigned int *)(v86 + 4));
    else
      v24 = 1;
  }
  v25 = v131;
  if (v24 == 2)
    WebCore::FontCascade::layoutComplexText((uint64_t)&v118, v11);
  else
    WebCore::FontCascade::layoutSimpleText((uint64_t)&v118, v11);
  if (!v120)
  {
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    goto LABEL_109;
  }
  v27 = 0;
  v111 = 0;
  ++*(_DWORD *)v10;
  v112 = v10;
  v113 = &v118;
  v28 = *(WebCore::Font **)v118;
  *(_DWORD *)v28 = **(_DWORD **)v118 + 1;
  v114 = v28;
  v115 = (float64x2_t)0x3FF0000000000000uLL;
  v29 = vcvtq_f64_f32(vadd_f32(*v9, vcvt_f32_f64(v133)));
  v116 = xmmword_1969F7820;
  v117 = v29;
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  v30 = v131;
  do
  {
    v106[0] = 0;
    v106[1] = 0;
    v31 = *v7;
    v32 = v7[2];
    v33 = v7[1] + v7[3];
    v107 = *((_DWORD *)v7 + 1);
    v108 = v33;
    v109 = v31 + v32;
    v110 = v31;
    v34 = v112[1];
    if (v34)
      v35 = *(unsigned int *)(v34 + 4);
    else
      v35 = 0;
    if (*((unsigned int *)v30 + 3) <= v27)
    {
      __break(0xC471u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(0xC471u);
      JUMPOUT(0x196170A30);
    }
    v36 = *(_QWORD *)(*(_QWORD *)v30 + 8 * v27);
    if (v36 >= v35)
      goto LABEL_43;
    if (!v34)
      goto LABEL_174;
    if ((*(_BYTE *)(v34 + 16) & 4) != 0)
    {
      if (v36 >= *(unsigned int *)(v34 + 4))
        goto LABEL_174;
      v37 = *(unsigned __int8 *)(*(_QWORD *)(v34 + 8) + v36);
    }
    else
    {
      v92 = *(unsigned int *)(v34 + 4);
      if (v36 >= v92)
        goto LABEL_174;
      v93 = *(_QWORD *)(v34 + 8);
      v37 = *(unsigned __int16 *)(v93 + 2 * v36);
      if ((v37 & 0xF800) == 0xD800)
      {
        if ((v37 & 0x400) != 0)
        {
          if (!(_DWORD)v36)
            goto LABEL_28;
          v100 = (v36 - 1);
          if (v100 >= v92)
            goto LABEL_174;
          v101 = *(unsigned __int16 *)(v93 + 2 * v100);
          v96 = (v101 & 0xFC00) == 55296;
          v97 = v37 + (v101 << 10);
        }
        else
        {
          v94 = (v36 + 1);
          if (v94 == v92)
            goto LABEL_28;
          if (v94 >= v92)
            goto LABEL_174;
          v95 = *(unsigned __int16 *)(v93 + 2 * v94);
          v96 = (v95 & 0xFC00) == 56320;
          v97 = v95 + (v37 << 10);
        }
        v102 = v97 - 56613888;
        if (v96)
          v37 = v102;
      }
    }
LABEL_28:
    Code = ublock_getCode(v37);
    if ((Code - 30) <= 0x35 && ((1 << (Code - 30)) & 0x2213EFD0000001) != 0)
      goto LABEL_55;
    if ((Code - 180) <= 0x1D && ((1 << (Code + 76)) & 0x20030021) != 0)
      goto LABEL_55;
    if ((Code - 94) <= 0x24 && ((1 << (Code - 94)) & 0x1001000003) != 0)
      goto LABEL_55;
LABEL_43:
    v42 = v114;
    ++*(_DWORD *)v114;
    if (*((_DWORD *)v113 + 2055) <= v111)
      goto LABEL_175;
    v43 = *((unsigned __int16 *)v113[1026] + v111);
    v44 = *((_QWORD *)v42 + 27);
    if (!v44
      || (v43 < 0x10
        ? (!*(_BYTE *)v44
         ? (v45 = WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase((_BYTE *)v44))
         : (v45 = (_BYTE *)(v44 + 8)))
        : (v143 = v43 >> 4,
           WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::ensure<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase::{lambda(void)#1}>((uint64_t)&v139, (uint64_t *)(v44 + 1288), (int *)&v143), v45 = (_BYTE *)*((_QWORD *)v139 + 1)), v46 = &v45[80 * (v43 & 0xF)], !v46[72]))
    {
      v105 = v25;
      WebCore::Font::platformPathForGlyph((CTFontRef *)v42, v43, (uint64_t)&v143);
      v59 = (uint64_t *)*((_QWORD *)v42 + 27);
      if (!v59)
      {
        v59 = (uint64_t *)WTF::fastMalloc((WTF *)0x510);
        bzero(v59, 0x510uLL);
        v89 = (WTF *)*((_QWORD *)v42 + 27);
        *((_QWORD *)v42 + 27) = v59;
        if (v89)
        {
          v90 = *((_QWORD *)v89 + 161);
          if (v90)
          {
            v103 = v89;
            v104 = *((_QWORD *)v89 + 161);
            v68 = *(unsigned int *)(v90 - 4);
            if ((_DWORD)v68)
            {
              v67 = (uint64_t *)(v90 + 8);
              do
              {
                if (*((_DWORD *)v67 - 2) != -1)
                {
                  v63 = *v67;
                  *v67 = 0;
                  if (v63)
                  {
                    v64 = (WTF *)std::array<std::optional<WebCore::Path>,16ul>::~array(v63);
                    WTF::fastFree(v64, v65);
                  }
                }
                v67 += 2;
                --v68;
              }
              while (v68);
            }
            WTF::fastFree((WTF *)(v104 - 16), v66);
            v89 = v103;
          }
          std::array<std::optional<WebCore::Path>,16ul>::~array((uint64_t)v89 + 8);
          WTF::fastFree(v89, v91);
          v59 = (uint64_t *)*((_QWORD *)v42 + 27);
        }
      }
      v141 = 0;
      if (v145 == -1)
      {
        v141 = -1;
      }
      else
      {
        v135[0] = v140;
        ((void (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v145])(v135);
      }
      v142 = 1;
      if (v43 < 0x10)
      {
        if (*(_BYTE *)v59)
          PageSlowCase = v59 + 1;
        else
          PageSlowCase = WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase(v59);
      }
      else
      {
        v134 = v43 >> 4;
        WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::ensure<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase::{lambda(void)#1}>((uint64_t)v135, v59 + 161, (int *)&v134);
        PageSlowCase = *(_BYTE **)(v135[0] + 8);
      }
      v61 = &PageSlowCase[80 * (v43 & 0xF)];
      if (v61[72] != v142)
      {
        if (v61[72])
        {
          v69 = *((unsigned int *)v61 + 16);
          if ((_DWORD)v69 != -1)
            ((void (*)(_QWORD *, _BYTE *))off_1E340B6D8[v69])(v135, v61 + 8);
          *((_DWORD *)v61 + 16) = -1;
          v61[72] = 0;
        }
        else
        {
          *((_DWORD *)v61 + 16) = 0;
          if (v141 == -1)
          {
            *((_DWORD *)v61 + 16) = -1;
          }
          else
          {
            v135[0] = v61 + 8;
            ((void (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v141])(v135);
          }
          v61[72] = 1;
        }
        goto LABEL_88;
      }
      if (!v61[72])
      {
LABEL_91:
        v70 = *((_QWORD *)v42 + 27);
        if (v43 < 0x10)
        {
          if (*(_BYTE *)v70)
            v71 = (_BYTE *)(v70 + 8);
          else
            v71 = WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase((_BYTE *)v70);
        }
        else
        {
          LODWORD(v135[0]) = v43 >> 4;
          WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::ensure<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase::{lambda(void)#1}>((uint64_t)&v139, (uint64_t *)(v70 + 1288), (int *)v135);
          v71 = (_BYTE *)*((_QWORD *)v139 + 1);
        }
        v72 = &v71[80 * (v43 & 0xF)];
        if (!v72[72])
          goto LABEL_174;
        v138 = 0;
        v73 = *((unsigned int *)v72 + 16);
        if ((_DWORD)v73 == -1)
        {
          v138 = -1;
        }
        else
        {
          v139 = v137;
          ((void (*)(_BYTE **, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v73])(&v139, v137, v72 + 8);
        }
        v25 = v105;
        if (v145 != -1)
          ((void (*)(_BYTE **, uint64_t *))off_1E340B6D8[v145])(&v139, &v144);
        goto LABEL_50;
      }
      v62 = *((unsigned int *)v61 + 16);
      if ((_DWORD)v62 == -1)
      {
        if (v141 == -1)
          goto LABEL_88;
      }
      else if (v141 == -1)
      {
        ((void (*)(_QWORD *, _BYTE *))off_1E340B6D8[v62])(v135, v61 + 8);
        *((_DWORD *)v61 + 16) = -1;
        goto LABEL_88;
      }
      v135[0] = v61 + 8;
      ((void (*)(_QWORD *))off_1E340B720[v141])(v135);
LABEL_88:
      if (v142 && v141 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E340B6D8[v141])(v135, v140);
      goto LABEL_91;
    }
    v138 = 0;
    v47 = *((unsigned int *)v46 + 16);
    if ((_DWORD)v47 == -1)
    {
      v138 = -1;
    }
    else
    {
      v139 = v137;
      ((void (*)(_BYTE **, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v47])(&v139, v137, v46 + 8);
    }
LABEL_50:
    WTF::RefCounted<WebCore::Font>::deref(v42);
    WebCore::Path::transform((WebCore::Path *)&v136, &v115);
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v48 = off_1E340B7D8;
    v48[1] = v106;
    v139 = v48;
    WebCore::Path::applyElements((WebCore::Path *)&v136, &v139);
    v49 = v139;
    v139 = 0;
    if (v49)
      (*(void (**)(_BYTE *))(*(_QWORD *)v49 + 8))(v49);
    v50 = v110;
    if (v109 < v110)
    {
      v75 = *v7;
      v76 = v109 - *v7;
      *(float *)&v139 = v76;
      v77 = *(_DWORD *)(v13 + 8);
      v78 = *(unsigned int *)(v13 + 12);
      if ((_DWORD)v78 == v77)
      {
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(v13, (uint64_t)&v139);
        v50 = v110;
        v75 = *v7;
        v77 = *(_DWORD *)(v13 + 8);
        v79 = *(_DWORD *)(v13 + 12);
      }
      else
      {
        v79 = v78 + 1;
        *(double *)(*(_QWORD *)v13 + 8 * v78) = v76;
        *(_DWORD *)(v13 + 12) = v78 + 1;
      }
      v74 = v50 - v75;
      *(float *)&v139 = v74;
      if (v79 == v77)
      {
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(v13, (uint64_t)&v139);
      }
      else
      {
        *(double *)(*(_QWORD *)v13 + 8 * v79) = v74;
        *(_DWORD *)(v13 + 12) = v79 + 1;
      }
    }
    if (v138 != -1)
      ((void (*)(_BYTE **, _BYTE *))off_1E340B6D8[v138])(&v139, v137);
LABEL_55:
    if (*((_DWORD *)v113 + 2571) <= v111)
      goto LABEL_176;
    v51 = (double *)((char *)v113[1284] + 16 * v111);
    v52 = *v51;
    v53 = v51[1];
    v54 = v52;
    v55 = v53;
    if (v115.f64[0] == 1.0 && v115.f64[1] == 0.0 && *(double *)&v116 == 0.0 && *((double *)&v116 + 1) == 1.0)
    {
      v117.f64[0] = v117.f64[0] + v54;
    }
    else
    {
      v117.f64[0] = *(double *)&v116 * v55 + v54 * v115.f64[0] + v117.f64[0];
      v55 = *((double *)&v116 + 1) * v55 + v54 * v115.f64[1];
    }
    v117.f64[1] = v55 + v117.f64[1];
    v56 = v111 + 1;
    v111 = v56;
    if (v56 < *((_DWORD *)v113 + 3))
    {
      v57 = (WebCore::Font *)*((_QWORD *)*v113 + v56);
      ++*(_DWORD *)v57;
      v58 = v114;
      v114 = v57;
      if (v58)
        WTF::RefCounted<WebCore::Font>::deref(v58);
    }
    v27 = v111;
    v30 = v113 + 5384;
  }
  while (v111 != (unint64_t)*((unsigned int *)v113 + 3));
  v80 = v114;
  v114 = 0;
  if (v80)
    WTF::RefCounted<WebCore::Font>::deref(v80);
  v81 = v112;
  v112 = 0;
  if (v81)
  {
    if (!*v81)
    {
LABEL_176:
      __break(0xC471u);
      JUMPOUT(0x1961709ACLL);
    }
    --*v81;
  }
LABEL_109:
  v82 = *(WTF **)v25;
  if (&v132 != *(uint64_t **)v25 && v82)
  {
    *(_QWORD *)v25 = 0;
    *((_DWORD *)v25 + 2) = 0;
    WTF::fastFree(v82, v26);
  }
  v83 = v128;
  if (&v130 != (uint64_t *)v128 && v128)
  {
    v128 = 0;
    v129 = 0;
    WTF::fastFree(v83, v26);
  }
  v84 = v125;
  if (&v127 != (uint64_t *)v125 && v125)
  {
    v125 = 0;
    v126 = 0;
    WTF::fastFree(v84, v26);
  }
  v85 = v122;
  if (&v124 != (uint64_t *)v122 && v122)
  {
    v122 = 0;
    v123 = 0;
    WTF::fastFree(v85, v26);
  }
  result = (uint64_t)v118;
  if (&v121 != (uint64_t *)v118)
  {
    if (v118)
    {
      v118 = 0;
      v119 = 0;
      return WTF::fastFree((WTF *)result, v26);
    }
  }
  return result;
}

uint64_t WebCore::capitalized(uint64_t a1)
{
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;

  if (((1 << u_charType(a1)) & 0x1C0) != 0)
  {
    v4 = 0;
    v3 = 0;
    v5 = 0;
  }
  else
  {
    v2 = MEMORY[0x19AEA861C](a1);
    v3 = v2 & 0xFFFFFF00;
    v4 = v2;
    v5 = 0x100000000;
    if (v2 == (_DWORD)a1)
    {
      v4 = 0;
      v3 = 0;
      v5 = 0;
    }
  }
  return v5 | v3 | v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore4Font13NoEmojiGlyphsENS9_14AllEmojiGlyphsENS9_15SomeEmojiGlyphsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if ((*a2 & 0x8000000000000000) == 0)
    return WTF::fastFree((WTF *)(2 * *a2), a2);
  return result;
}

WTF **std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  void *v10;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 161);
    if (v4)
    {
      v5 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v5)
      {
        v6 = (uint64_t *)(v4 + 8);
        do
        {
          if (*((_DWORD *)v6 - 2) != -1)
          {
            v7 = *v6;
            *v6 = 0;
            if (v7)
            {
              v8 = (WTF *)std::array<std::optional<WebCore::Path>,16ul>::~array(v7);
              WTF::fastFree(v8, v9);
            }
          }
          v6 += 2;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    std::array<std::optional<WebCore::Path>,16ul>::~array((uint64_t)v3 + 8);
    WTF::fastFree(v3, v10);
  }
  return a1;
}

uint64_t WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>::~KeyValuePair(uint64_t a1)
{
  uint64_t v2;
  WTF *v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = (WTF *)std::array<std::optional<WebCore::Path>,16ul>::~array(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

uint64_t *std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>::~unique_ptr[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  WTF *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (WTF *)std::array<std::optional<WebCore::Path>,16ul>::~array(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

uint64_t std::array<std::optional<WebCore::Path>,16ul>::~array(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  if (*(_BYTE *)(a1 + 1272))
  {
    v2 = *(unsigned int *)(a1 + 1264);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v2])(&v19, a1 + 1208);
    *(_DWORD *)(a1 + 1264) = -1;
  }
  if (*(_BYTE *)(a1 + 1192))
  {
    v3 = *(unsigned int *)(a1 + 1184);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v3])(&v19, a1 + 1128);
    *(_DWORD *)(a1 + 1184) = -1;
  }
  if (*(_BYTE *)(a1 + 1112))
  {
    v4 = *(unsigned int *)(a1 + 1104);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v4])(&v19, a1 + 1048);
    *(_DWORD *)(a1 + 1104) = -1;
  }
  if (*(_BYTE *)(a1 + 1032))
  {
    v5 = *(unsigned int *)(a1 + 1024);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v5])(&v19, a1 + 968);
    *(_DWORD *)(a1 + 1024) = -1;
  }
  if (*(_BYTE *)(a1 + 952))
  {
    v6 = *(unsigned int *)(a1 + 944);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v6])(&v19, a1 + 888);
    *(_DWORD *)(a1 + 944) = -1;
  }
  if (*(_BYTE *)(a1 + 872))
  {
    v7 = *(unsigned int *)(a1 + 864);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v7])(&v19, a1 + 808);
    *(_DWORD *)(a1 + 864) = -1;
  }
  if (*(_BYTE *)(a1 + 792))
  {
    v8 = *(unsigned int *)(a1 + 784);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v8])(&v19, a1 + 728);
    *(_DWORD *)(a1 + 784) = -1;
  }
  if (*(_BYTE *)(a1 + 712))
  {
    v9 = *(unsigned int *)(a1 + 704);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v9])(&v19, a1 + 648);
    *(_DWORD *)(a1 + 704) = -1;
  }
  if (*(_BYTE *)(a1 + 632))
  {
    v10 = *(unsigned int *)(a1 + 624);
    if ((_DWORD)v10 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v10])(&v19, a1 + 568);
    *(_DWORD *)(a1 + 624) = -1;
  }
  if (*(_BYTE *)(a1 + 552))
  {
    v11 = *(unsigned int *)(a1 + 544);
    if ((_DWORD)v11 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v11])(&v19, a1 + 488);
    *(_DWORD *)(a1 + 544) = -1;
  }
  if (*(_BYTE *)(a1 + 472))
  {
    v12 = *(unsigned int *)(a1 + 464);
    if ((_DWORD)v12 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v12])(&v19, a1 + 408);
    *(_DWORD *)(a1 + 464) = -1;
  }
  if (*(_BYTE *)(a1 + 392))
  {
    v13 = *(unsigned int *)(a1 + 384);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v13])(&v19, a1 + 328);
    *(_DWORD *)(a1 + 384) = -1;
  }
  if (*(_BYTE *)(a1 + 312))
  {
    v14 = *(unsigned int *)(a1 + 304);
    if ((_DWORD)v14 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v14])(&v19, a1 + 248);
    *(_DWORD *)(a1 + 304) = -1;
  }
  if (*(_BYTE *)(a1 + 232))
  {
    v15 = *(unsigned int *)(a1 + 224);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v15])(&v19, a1 + 168);
    *(_DWORD *)(a1 + 224) = -1;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v16 = *(unsigned int *)(a1 + 144);
    if ((_DWORD)v16 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v16])(&v19, a1 + 88);
    *(_DWORD *)(a1 + 144) = -1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v17 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v17 != -1)
      ((void (*)(char *, uint64_t))off_1E340B6D8[v17])(&v19, a1 + 8);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

void WebCore::SystemFontDatabaseCoreText::~SystemFontDatabaseCoreText(WebCore::SystemFontDatabaseCoreText *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v3 = *((unsigned int *)this + 191);
  if ((_DWORD)v3)
  {
    v14 = (WTF::StringImpl **)*((_QWORD *)this + 94);
    v15 = 8 * v3;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v4 = (WTF *)*((_QWORD *)this + 94);
  if (v4)
  {
    *((_QWORD *)this + 94) = 0;
    *((_DWORD *)this + 190) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 91);
  if (v5)
  {
    v17 = *((unsigned int *)this + 184);
    if ((_DWORD)v17)
    {
      v18 = (WTF::StringImpl **)((char *)v5 + 8);
      do
      {
        v19 = *v18;
        *v18 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, a2);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *(v18 - 1);
        *(v18 - 1) = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 88);
  if (v6)
  {
    v21 = *((unsigned int *)this + 178);
    if ((_DWORD)v21)
    {
      v22 = (WTF::StringImpl **)((char *)v6 + 8);
      do
      {
        v23 = *v22;
        *v22 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, a2);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = *(v22 - 1);
        *(v22 - 1) = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, a2);
          else
            *(_DWORD *)v24 -= 2;
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 85);
  if (v7)
  {
    v25 = *((unsigned int *)this + 172);
    if ((_DWORD)v25)
    {
      v26 = (WTF::StringImpl **)((char *)v7 + 8);
      do
      {
        v27 = *v26;
        *v26 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, a2);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = *(v26 - 1);
        *(v26 - 1) = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, a2);
          else
            *(_DWORD *)v28 -= 2;
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 82);
  if (v8)
  {
    v29 = *((unsigned int *)this + 166);
    if ((_DWORD)v29)
    {
      v30 = (WTF::StringImpl **)((char *)v8 + 8);
      do
      {
        v31 = *v30;
        *v30 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, a2);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = *(v30 - 1);
        *(v30 - 1) = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, a2);
          else
            *(_DWORD *)v32 -= 2;
        }
        v30 += 2;
        --v29;
      }
      while (v29);
    }
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 79);
  if (v9)
  {
    v33 = *((unsigned int *)this + 160);
    if ((_DWORD)v33)
    {
      v34 = (WTF::StringImpl **)((char *)v9 + 8);
      do
      {
        v35 = *v34;
        *v34 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, a2);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = *(v34 - 1);
        *(v34 - 1) = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, a2);
          else
            *(_DWORD *)v36 -= 2;
        }
        v34 += 2;
        --v33;
      }
      while (v33);
    }
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)this + 78);
  if (v10)
    WTF::HashTable<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::KeyValuePair<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WebCore::SystemFontDatabaseCoreText::CascadeListParameters::Hash,WTF::HashMap<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::SystemFontDatabaseCoreText::CascadeListParameters::Hash,WTF::SimpleClassHashTraits<WebCore::SystemFontDatabaseCoreText::CascadeListParameters>,WTF::HashTraits<WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<WebCore::SystemFontDatabaseCoreText::CascadeListParameters>>::deallocateTable(v10, a2);
  v11 = 624;
  do
  {
    v12 = (char *)this + v11;
    if (*((_BYTE *)this + v11 - 8))
    {
      v13 = (WTF::StringImpl *)*((_QWORD *)v12 - 3);
      *((_QWORD *)v12 - 3) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v11 -= 24;
  }
  while (v11);
}

uint64_t WTF::HashTable<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::KeyValuePair<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WebCore::SystemFontDatabaseCoreText::CascadeListParameters::Hash,WTF::HashMap<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::SystemFontDatabaseCoreText::CascadeListParameters::Hash,WTF::SimpleClassHashTraits<WebCore::SystemFontDatabaseCoreText::CascadeListParameters>,WTF::HashTraits<WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<WebCore::SystemFontDatabaseCoreText::CascadeListParameters>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  uint64_t v6;
  const void ***v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  const void *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 56 * i);
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v6 = a1 + 56 * i;
        v7 = (const void ***)(v6 + 40);
        v8 = *(unsigned int *)(v6 + 52);
        if ((_DWORD)v8)
        {
          v9 = *v7;
          v10 = 8 * v8;
          do
          {
            v11 = *v9;
            *v9 = 0;
            if (v11)
              CFRelease(v11);
            ++v9;
            v10 -= 8;
          }
          while (v10);
        }
        v12 = (WTF *)*v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 56 * i + 48) = 0;
          WTF::fastFree(v12, a2);
        }
        v13 = v5[1];
        v5[1] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = *v5;
        *v5 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::FontFamilySpecificationKey,WTF::KeyValuePair<WebCore::FontFamilySpecificationKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontFamilySpecificationKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontFamilySpecificationKeyHash,WTF::HashMap<WebCore::FontFamilySpecificationKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontFamilySpecificationKeyHash,WTF::SimpleClassHashTraits<WebCore::FontFamilySpecificationKey>,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<WebCore::FontFamilySpecificationKey>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::FontPlatformData **v4;
  WebCore::FontPlatformData *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const void *v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::FontPlatformData **)(a1 + 48);
    do
    {
      if (!*((_BYTE *)v4 - 40))
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          WebCore::FontPlatformData::~FontPlatformData(v5, a2);
          WTF::fastFree(v6, v7);
        }
        v8 = (uint64_t)*(v4 - 1);
        *(v4 - 1) = 0;
        if (v8)
          WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v8, a2);
        v9 = *(v4 - 2);
        *(v4 - 2) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, a2);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = *(v4 - 6);
        *(v4 - 6) = 0;
        if (v10)
          CFRelease(v10);
      }
      v4 += 7;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::Font const*,WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashMap<WebCore::Font const*,WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::Font const*>,WTF::HashTraits<WebCore::Font const*>,WTF::HashTraits<WTF::HashMap<WebCore::CharacterFallbackMapKey,WebCore::Font*,WebCore::CharacterFallbackMapKeyHash,WebCore::SystemFallbackFontCache::CharacterFallbackMapKeyHashTraits,WTF::HashTraits<WebCore::Font*>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Font const*>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 16 * i) != -1)
      {
        v5 = *(_QWORD *)(a1 + 16 * i + 8);
        if (v5)
        {
          v6 = *(unsigned int *)(v5 - 4);
          if ((_DWORD)v6)
          {
            v7 = (WTF::StringImpl **)(v5 + 8);
            do
            {
              v8 = *v7;
              if (*v7 != (WTF::StringImpl *)-1)
              {
                *v7 = 0;
                if (v8)
                {
                  if (*(_DWORD *)v8 == 2)
                    WTF::StringImpl::destroy(v8, a2);
                  else
                    *(_DWORD *)v8 -= 2;
                }
                v9 = *(v7 - 1);
                *(v7 - 1) = 0;
                if (v9)
                {
                  if (*(_DWORD *)v9 == 2)
                    WTF::StringImpl::destroy(v9, a2);
                  else
                    *(_DWORD *)v9 -= 2;
                }
              }
              v7 += 4;
              --v6;
            }
            while (v6);
          }
          WTF::fastFree((WTF *)(v5 - 16), a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl **std::unique_ptr<WebCore::FontCache::FontDataCaches>::reset[abi:sn180100](WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Font *v7;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)v2 + 1);
    if (v3)
      WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::deallocateTable(v3, a2);
    v4 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v5 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)v2;
        do
        {
          if (!*(_BYTE *)(v6 + 27))
          {
            v7 = *(WebCore::Font **)(v6 + 32);
            *(_QWORD *)(v6 + 32) = 0;
            if (v7)
              WTF::RefCounted<WebCore::Font>::deref(v7);
            WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v6, a2);
          }
          v6 += 40;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::FontTaggedSetting<int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if (a2 == a1)
    return (unsigned int *)a1;
  v4 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 12) > v4)
  {
    *(_DWORD *)(a1 + 12) = v4;
    goto LABEL_5;
  }
  if (v4 <= *(_DWORD *)(a1 + 8)
    || (result = WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a1, 0), v7 = *(unsigned int *)(a2 + 12), *(_DWORD *)(a1 + 8) >= v7))
  {
LABEL_4:
    v4 = *(_DWORD *)(a1 + 12);
LABEL_5:
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      v5 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      v5 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 12) - (*(_QWORD *)a2 + 8 * v5));
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    return (unsigned int *)a1;
  }
  if (!(v7 >> 29))
  {
    v8 = *(void **)a1;
    v9 = *(unsigned int *)(a1 + 12);
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v8, 8 * v9);
    if (v8)
    {
      if (*(void **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v8, v11);
    }
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::GlyphBuffer::swap(uint64_t this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  __int16 v7;
  unsigned int v8;
  uint64_t v9;
  __int128 *v10;
  unsigned int v11;
  uint64_t v12;
  __int128 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_DWORD *)(this + 12);
  if (v3 <= a2)
    goto LABEL_25;
  if (v3 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1961717BCLL);
  }
  v4 = *(_QWORD *)(*(_QWORD *)this + 8 * a2);
  *(_QWORD *)(*(_QWORD *)this + 8 * a2) = *(_QWORD *)(*(_QWORD *)this + 8 * a3);
  *(_QWORD *)(*(_QWORD *)this + 8 * a3) = v4;
  v5 = *(_DWORD *)(this + 8220);
  if (v5 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1961717C4);
  }
  if (v5 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1961717CCLL);
  }
  v6 = *(_QWORD *)(this + 8208);
  v7 = *(_WORD *)(v6 + 2 * a2);
  *(_WORD *)(v6 + 2 * a2) = *(_WORD *)(v6 + 2 * a3);
  *(_WORD *)(v6 + 2 * a3) = v7;
  v8 = *(_DWORD *)(this + 10284);
  if (v8 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1961717D4);
  }
  v9 = *(_QWORD *)(this + 10272);
  v10 = (__int128 *)(v9 + 16 * a2);
  v18 = *v10;
  if (v8 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1961717DCLL);
  }
  *v10 = *(_OWORD *)(v9 + 16 * a3);
  if (*(_DWORD *)(this + 10284) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1961717E4);
  }
  *(_OWORD *)(*(_QWORD *)(this + 10272) + 16 * a3) = v18;
  v11 = *(_DWORD *)(this + 26684);
  if (v11 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1961717ECLL);
  }
  v12 = *(_QWORD *)(this + 26672);
  v13 = (__int128 *)(v12 + 16 * a2);
  v17 = *v13;
  if (v11 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1961717F4);
  }
  *v13 = *(_OWORD *)(v12 + 16 * a3);
  if (*(_DWORD *)(this + 26684) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1961717FCLL);
  }
  *(_OWORD *)(*(_QWORD *)(this + 26672) + 16 * a3) = v17;
  v14 = *(_DWORD *)(this + 43084);
  if (v14 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x196171804);
  }
  if (v14 <= a3)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x1961717B4);
  }
  v15 = *(_QWORD *)(this + 43072);
  v16 = *(_QWORD *)(v15 + 8 * a2);
  *(_QWORD *)(v15 + 8 * a2) = *(_QWORD *)(v15 + 8 * a3);
  *(_QWORD *)(v15 + 8 * a3) = v16;
  return this;
}

void WebCore::FloatPolygonEdge::~FloatPolygonEdge(WebCore::FloatPolygonEdge *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::FloatPolygonEdge::vertex1(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 24);
  v2 = *(unsigned int *)(this + 8);
  if (*(_DWORD *)(v1 + 12) > v2)
    return *(_QWORD *)v1 + 8 * v2;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::FloatPolygonEdge::vertex2(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 24);
  v2 = *(unsigned int *)(this + 12);
  if (*(_DWORD *)(v1 + 12) > v2)
    return *(_QWORD *)v1 + 8 * v2;
  __break(0xC471u);
  return this;
}

char *WebCore::PODIntervalTree<float,WebCore::FloatPolygonEdge *>::searchForOverlapsFrom<WebCore::PODIntervalTree<float,WebCore::FloatPolygonEdge *>::OverlapsSearchAdapter>(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  char *v5;
  float *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    v6 = (float *)a3[1];
    do
    {
      if (*(_QWORD *)v4 && *(float *)(*(_QWORD *)v4 + 48) >= *v6)
      {
        result = (char *)WebCore::PODIntervalTree<float,WebCore::FloatPolygonEdge *>::searchForOverlapsFrom<WebCore::PODIntervalTree<float,WebCore::FloatPolygonEdge *>::OverlapsSearchAdapter>(v5);
        v6 = (float *)a3[1];
      }
      v7 = (float *)(v4 + 32);
      if (*(float *)(v4 + 36) >= *v6 && v6[1] >= *v7)
      {
        v8 = *a3;
        v9 = *(unsigned int *)(*a3 + 12);
        if ((_DWORD)v9 == *(_DWORD *)(*a3 + 8))
        {
          result = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*a3, v9 + 1, v4 + 32);
          v10 = *(_QWORD *)v8 + 24 * *(unsigned int *)(v8 + 12);
          v11 = *(_OWORD *)result;
          v12 = *((_QWORD *)result + 2);
        }
        else
        {
          v10 = *(_QWORD *)v8 + 24 * v9;
          v11 = *(_OWORD *)v7;
          v12 = *(_QWORD *)(v4 + 48);
        }
        *(_QWORD *)(v10 + 16) = v12;
        *(_OWORD *)v10 = v11;
        ++*(_DWORD *)(v8 + 12);
        v6 = (float *)a3[1];
      }
      if (v6[1] < *v7)
        break;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  return result;
}

_BYTE *WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase(_BYTE *a1)
{
  _BYTE *v2;
  char v4;
  char v5[8];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 8;
  v5[0] = 0;
  v8 = 0;
  std::array<std::optional<WebCore::Path>,16ul>::fill[abi:sn180100]((uint64_t)(a1 + 8), (uint64_t)v5);
  if (v8 && v7 != -1)
    ((void (*)(char *, uint64_t *))off_1E340B6D8[v7])(&v4, &v6);
  *a1 = 1;
  return v2;
}

uint64_t WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::ensure<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase(unsigned int)::{lambda(void)#1}>(uint64_t result, uint64_t *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (_DWORD *)(v6 + 16 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v24 = 0;
        v23 = v6 + 16 * v25;
        goto LABEL_21;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (_DWORD *)(v6 + 16 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v13 = v15;
    }
  }
  result = (uint64_t)WTF::HashMapEnsureTranslator<WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>::translate<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,int,WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase::{lambda(void)#1}>(v13, v9);
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_17;
LABEL_28:
    result = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(a2, v13);
    v13 = (_DWORD *)result;
    v19 = *a2;
    if (*a2)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_17;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_28;
LABEL_17:
  v23 = v19 + 16 * v22;
  v24 = 1;
LABEL_21:
  *(_QWORD *)v5 = v13;
  *(_QWORD *)(v5 + 8) = v23;
  *(_BYTE *)(v5 + 16) = v24;
  return result;
}

uint64_t std::array<std::optional<WebCore::Path>,16ul>::fill[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  for (i = 0; i != 1280; i += 80)
  {
    v5 = v3 + i;
    if (*(unsigned __int8 *)(v3 + i + 72) == *(unsigned __int8 *)(a2 + 72))
    {
      if (!*(_BYTE *)(v3 + i + 72))
        continue;
      v6 = *(unsigned int *)(v3 + i + 64);
      v7 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v6 == -1)
      {
        if ((_DWORD)v7 == -1)
          continue;
      }
      else if ((_DWORD)v7 == -1)
      {
        result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E340B6D8[v6])(&v10, v3 + i + 8);
        *(_DWORD *)(v3 + i + 64) = -1;
        continue;
      }
      v10 = v3 + i + 8;
      result = ((uint64_t (*)(uint64_t *))off_1E340B720[v7])(&v10);
    }
    else if (*(_BYTE *)(v3 + i + 72))
    {
      v8 = *(unsigned int *)(v5 + 64);
      if ((_DWORD)v8 != -1)
        result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E340B6D8[v8])(&v10, v3 + i + 8);
      *(_DWORD *)(v5 + 64) = -1;
      *(_BYTE *)(v5 + 72) = 0;
    }
    else
    {
      *(_DWORD *)(v5 + 64) = 0;
      v9 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v9 == -1)
      {
        *(_DWORD *)(v5 + 64) = -1;
      }
      else
      {
        v10 = v3 + i + 8;
        result = ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v9])(&v10);
      }
      *(_BYTE *)(v5 + 72) = 1;
    }
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashMapEnsureTranslator<WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>::translate<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,int,WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase(unsigned int)::{lambda(void)#1}>(_DWORD *a1, int a2)
{
  uint64_t *v2;
  uint64_t v4;

  *a1 = a2;
  v2 = (uint64_t *)(a1 + 2);
  WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase::{lambda(void)#1}::operator()(&v4);
  std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>::operator=[abi:sn180100](v2, &v4);
  return std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>::~unique_ptr[abi:sn180100](&v4);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_DWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::reinsert(*a1, (uint64_t)v14);
          WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>::~KeyValuePair((uint64_t)v14);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>::~KeyValuePair((uint64_t)v14);
        }
      }
      v14 += 4;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) ^ ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(a1 + 16 * v7));
  v8 = a1 + 16 * v7;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = 0;
  if (v9)
  {
    v10 = (WTF *)std::array<std::optional<WebCore::Path>,16ul>::~array(v9);
    WTF::fastFree(v10, v11);
  }
  *(_DWORD *)v8 = *(_DWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v8 + 8) = v12;
  return v8;
}

_BYTE *WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::locatePageSlowCase(unsigned int)::{lambda(void)#1}::operator()(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *result;
  char v4;
  _BYTE v5[8];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5[0] = 0;
  v8 = 0;
  v2 = (_BYTE *)WTF::fastMalloc((WTF *)0x500);
  result = WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage::GlyphMetricsPage(v2, (uint64_t)v5);
  *a1 = result;
  if (v8)
  {
    if (v7 != -1)
      return (_BYTE *)((uint64_t (*)(char *, uint64_t *))off_1E340B6D8[v7])(&v4, &v6);
  }
  return result;
}

uint64_t *std::unique_ptr<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage>>::operator=[abi:sn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = (WTF *)std::array<std::optional<WebCore::Path>,16ul>::~array(v4);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

_BYTE *WebCore::GlyphMetricsMap<std::optional<WebCore::Path>>::GlyphMetricsPage::GlyphMetricsPage(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = 0;
  *a1 = 0;
  a1[72] = 0;
  a1[80] = 0;
  a1[152] = 0;
  a1[160] = 0;
  a1[232] = 0;
  a1[240] = 0;
  a1[312] = 0;
  a1[320] = 0;
  a1[392] = 0;
  a1[400] = 0;
  a1[472] = 0;
  a1[480] = 0;
  a1[552] = 0;
  a1[560] = 0;
  a1[632] = 0;
  a1[640] = 0;
  a1[712] = 0;
  a1[720] = 0;
  a1[792] = 0;
  a1[800] = 0;
  a1[872] = 0;
  a1[880] = 0;
  a1[952] = 0;
  a1[960] = 0;
  a1[1032] = 0;
  a1[1040] = 0;
  a1[1112] = 0;
  a1[1120] = 0;
  a1[1192] = 0;
  a1[1200] = 0;
  a1[1272] = 0;
  do
  {
    v5 = &a1[v4];
    if (a1[v4 + 72] == *(_BYTE *)(a2 + 72))
    {
      if (!a1[v4 + 72])
        goto LABEL_17;
      v6 = *(unsigned int *)&a1[v4 + 64];
      v7 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v6 == -1)
      {
        if ((_DWORD)v7 == -1)
          goto LABEL_17;
      }
      else if ((_DWORD)v7 == -1)
      {
        ((void (*)(uint64_t *, _BYTE *))off_1E340B6D8[v6])(&v11, &a1[v4 + 8]);
        *(_DWORD *)&a1[v4 + 64] = -1;
        goto LABEL_17;
      }
      v11 = (uint64_t)&a1[v4 + 8];
      ((void (*)(uint64_t *))off_1E340B720[v7])(&v11);
    }
    else if (a1[v4 + 72])
    {
      v8 = *((unsigned int *)v5 + 16);
      if ((_DWORD)v8 != -1)
        ((void (*)(uint64_t *, _BYTE *))off_1E340B6D8[v8])(&v11, &a1[v4 + 8]);
      *((_DWORD *)v5 + 16) = -1;
      v5[72] = 0;
    }
    else
    {
      *((_DWORD *)v5 + 16) = 0;
      v9 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v9 == -1)
      {
        *((_DWORD *)v5 + 16) = -1;
      }
      else
      {
        v11 = (uint64_t)&a1[v4 + 8];
        ((void (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v9])(&v11);
      }
      v5[72] = 1;
    }
LABEL_17:
    v4 += 80;
  }
  while (v4 != 1280);
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Font::colorGlyphType(unsigned short)::$_0,WebCore::Font::colorGlyphType(unsigned short)::$_1,WebCore::Font::colorGlyphType(unsigned short)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Font::NoEmojiGlyphs,WebCore::Font::AllEmojiGlyphs,WebCore::Font::SomeEmojiGlyphs> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Font::colorGlyphType(unsigned short)::$_0,WebCore::Font::colorGlyphType(unsigned short)::$_1,WebCore::Font::colorGlyphType(unsigned short)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Font::NoEmojiGlyphs,WebCore::Font::AllEmojiGlyphs,WebCore::Font::SomeEmojiGlyphs> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Font::colorGlyphType(unsigned short)::$_0,WebCore::Font::colorGlyphType(unsigned short)::$_1,WebCore::Font::colorGlyphType(unsigned short)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Font::NoEmojiGlyphs,WebCore::Font::AllEmojiGlyphs,WebCore::Font::SomeEmojiGlyphs> const&>(unsigned __int16 **a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t *v4;

  v2 = **a1;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    if (v2 < 0x3F)
      return (*(_QWORD *)((char *)a2 + ((v2 >> 3) & 0x1FF8)) >> v2) & 1;
  }
  else
  {
    v4 = (unint64_t *)(2 * *a2);
    if (*v4 > v2)
    {
      a2 = v4 + 1;
      return (*(_QWORD *)((char *)a2 + ((v2 >> 3) & 0x1FF8)) >> v2) & 1;
    }
  }
  return 0;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::FontCache::cachedFontPlatformData(WebCore::FontDescription const&,WTF::String const&,WebCore::FontCreationContext const&,WTF::OptionSet<WebCore::FontLookupOptions>)::$_0 &&>>(WebCore::FontCache ****a1)
{
  WebCore::FontCache::platformInit(***a1);
}

unsigned int *WTF::add<WebCore::FontTaggedSettings<int>>(unsigned int *result, unsigned int *a2, int a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  if (a3)
  {
    v3 = &a2[2 * a3];
    v4 = *result;
    do
    {
      v5 = *a2;
      v6 = a2[1];
      a2 += 2;
      v7 = (v4 + v5) ^ ((v4 + v5) << 16);
      v8 = (v7 + BYTE1(v5) + (v7 >> 11)) ^ ((v7 + BYTE1(v5) + (v7 >> 11)) << 16);
      v9 = (v8 + BYTE2(v5) + (v8 >> 11)) ^ ((v8 + BYTE2(v5) + (v8 >> 11)) << 16);
      v10 = (v9 + HIBYTE(v5) + (v9 >> 11)) ^ ((v9 + HIBYTE(v5) + (v9 >> 11)) << 16);
      v4 = ((v6 >> 5) & 0x7FFF800 ^ ((v10 + (unsigned __int16)v6 + (v10 >> 11)) << 16) ^ (v10
                                                                                        + (unsigned __int16)v6
                                                                                        + (v10 >> 11)))
         + (((v6 >> 5) & 0x7FFF800 ^ ((v10 + (unsigned __int16)v6 + (v10 >> 11)) << 16) ^ (v10
                                                                                         + (unsigned __int16)v6
                                                                                         + (v10 >> 11))) >> 11);
      *result = v4;
    }
    while (a2 != v3);
  }
  return result;
}

unsigned int *WebCore::add(unsigned int *result, unint64_t *a2)
{
  unsigned int *v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = result;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  v5 = (*result + v4) ^ ((*result + v4) << 16);
  v6 = v5 + (v5 >> 11);
  *result = v6;
  if (v4)
  {
    v7 = (v6 + v3) ^ ((v6 + v3) << 16);
    v8 = v7 + (v7 >> 11);
    *result = v8;
    if (v3 == 2)
    {
      v9 = (v3 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v3)) << 16) ^ (v8 + WORD2(v3));
      *result = v9 + (v9 >> 11);
    }
  }
  v10 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v10)
  {
    v11 = a2[2];
    v12 = v11 + 16 * v10;
    do
    {
      result = WTF::addArgs<unsigned int,WebCore::Color>(v2, (_DWORD *)v11, (unint64_t *)(v11 + 8));
      v11 += 16;
    }
    while (v11 != v12);
  }
  return result;
}

BOOL WebCore::FontCreationContextRareData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  int v6;
  unint64_t v7;

  v2 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 20) || memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), 8 * v2))
    return 0;
  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a2 + 32))
  {
    v6 = *(unsigned __int8 *)(a1 + 24);
    if (v6 != *(unsigned __int8 *)(a2 + 24) || v6 == 2 && *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 32) != 0) != (*(_BYTE *)(a2 + 32) != 0))
  {
    return 0;
  }
  v7 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v7 != *(_DWORD *)(a2 + 52))
    return 0;
  result = WTF::VectorComparer<false,std::pair<unsigned int,WebCore::Color>>::compare(*(_DWORD **)(a1 + 40), *(_DWORD **)(a2 + 40), v7);
  if (result)
  {
    if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56))
      return *(float *)(a1 + 64) == *(float *)(a2 + 64);
    return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  CFHashCode v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  const void *v37;
  WTF::StringImpl *v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  WebCore::Font *v42;
  _QWORD *v43;
  WebCore::Font *v44;
  WTF::StringImpl *v45;
  const void *v46;
  int v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::Font *v52;
  uint64_t v53;
  WebCore::Font *v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(40 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v59 = v5;
    v56 = v4;
    while (1)
    {
      v11 = v4 + 40 * v9;
      if (*(_BYTE *)(v11 + 27))
        goto LABEL_42;
      if (!WTF::HashTraitsEmptyValueChecker<WebCore::FontDataCacheKeyTraits,false>::isEmptyValue<WebCore::FontPlatformData>(v4 + 40 * v9))
        break;
      v53 = v4 + 40 * v9;
      v54 = *(WebCore::Font **)(v53 + 32);
      *(_QWORD *)(v53 + 32) = 0;
      if (v54)
        WTF::RefCounted<WebCore::Font>::deref(v54);
      WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)(v4 + 40 * v9), v12);
LABEL_42:
      if (++v9 == v59)
        goto LABEL_48;
    }
    v62 = v9;
    v63 = v10;
    v13 = *a1;
    if (*a1)
      v14 = *(_DWORD *)(v13 - 8);
    else
      v14 = 0;
    v15 = CFHash(*(CFTypeRef *)v11);
    v16 = 0;
    v61 = v11;
    v18 = *(unsigned __int8 *)(v11 + 24);
    v17 = v11 + 24;
    v19 = (v15 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v15 - 1640531527) << 16) ^ ((unsigned __int16)v15
                                                                                               - 1640531527);
    v20 = (v15 >> 37) & 0x7FFF800 ^ ((v19 + WORD2(v15) + (v19 >> 11)) << 16) ^ (v19 + WORD2(v15) + (v19 >> 11));
    v21 = v20 + *(unsigned __int8 *)(v17 - 11) + (v20 >> 11);
    v22 = (v21 ^ (v21 << 16)) + *(unsigned __int8 *)(v17 + 3) + ((v21 ^ (v21 << 16)) >> 11);
    v23 = (v22 ^ (v22 << 16)) + *(unsigned __int8 *)(v17 - 10) + ((v22 ^ (v22 << 16)) >> 11);
    v24 = *(unsigned __int8 *)(v17 - 12);
    v25 = ((v23 ^ (v23 << 16)) + v24 + ((v23 ^ (v23 << 16)) >> 11)) ^ (((v23 ^ (v23 << 16))
                                                                      + v24
                                                                      + ((v23 ^ (v23 << 16)) >> 11)) << 16);
    v26 = (v25 + v24 + (v25 >> 11)) ^ ((v25 + v24 + (v25 >> 11)) << 16);
    v27 = (v26 + v18 + (v26 >> 11)) ^ ((v26 + v18 + (v26 >> 11)) << 16);
    v60 = (int *)v17;
    v28 = v27 + *(unsigned __int8 *)(v17 + 1) + (v27 >> 11);
    v29 = (v28 ^ (v28 << 16)) + ((v28 ^ (v28 << 16)) >> 11);
    v30 = (v29 ^ (8 * v29)) + ((v29 ^ (8 * v29)) >> 5);
    v31 = (v30 ^ (4 * v30)) + ((v30 ^ (4 * v30)) >> 15);
    v32 = v31 ^ (v31 << 10);
    if (v32)
      v33 = v32;
    else
      v33 = 0x800000;
    v34 = _MergedGlobals_225;
    while (1)
    {
      if ((v34 & 1) == 0)
      {
        WebCore::FontPlatformData::FontPlatformData((uint64_t)&qword_1ECE83C20, 0, 0, 0, 0, 0, 0, 0.0);
        v34 = 1;
        _MergedGlobals_225 = 1;
      }
      v35 = v33 & v14;
      v36 = v13 + 40 * v35;
      v37 = *(const void **)v36;
      v38 = (WTF::StringImpl *)qword_1ECE83C20;
      if (*(_QWORD *)v36)
        v39 = qword_1ECE83C20 == 0;
      else
        v39 = 1;
      if (v39)
      {
        if (v37 != (const void *)qword_1ECE83C20)
          goto LABEL_31;
      }
      else
      {
        v40 = CFEqual(v37, (CFTypeRef)qword_1ECE83C20);
        v34 = _MergedGlobals_225;
        if (!v40)
          goto LABEL_31;
      }
      if (*(unsigned __int8 *)(v36 + 27) == byte_1ECE83C3B
        && *(float *)(v36 + 8) == *(float *)&dword_1ECE83C28
        && *(unsigned __int8 *)(v36 + 24) == byte_1ECE83C38
        && *(unsigned __int8 *)(v36 + 25) == byte_1ECE83C39
        && *(unsigned __int8 *)(v36 + 26) == byte_1ECE83C3A
        && (*(_BYTE *)(v36 + 12) == 0) != (byte_1ECE83C2C != 0)
        && *(unsigned __int8 *)(v36 + 13) == byte_1ECE83C2D
        && *(unsigned __int8 *)(v36 + 14) == byte_1ECE83C2E)
      {
        v41 = v13 + 40 * v35;
        v44 = *(WebCore::Font **)(v41 + 32);
        v43 = (_QWORD *)(v41 + 32);
        v42 = v44;
        *v43 = 0;
        if (v44)
          WTF::RefCounted<WebCore::Font>::deref(v42);
        WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v36, v38);
        v9 = v62;
        v46 = *(const void **)v61;
        *(_QWORD *)v36 = *(_QWORD *)v61;
        v4 = v56;
        if (v46)
          CFRetain(v46);
        v47 = *(_DWORD *)(v61 + 8);
        *(_DWORD *)(v36 + 11) = *(_DWORD *)(v61 + 11);
        *(_DWORD *)(v36 + 8) = v47;
        v48 = *(_DWORD **)(v61 + 16);
        if (v48)
          ++*v48;
        *(_QWORD *)(v36 + 16) = v48;
        v49 = *v60;
        *(_DWORD *)(v36 + 27) = *(int *)((char *)v60 + 3);
        *(_DWORD *)(v36 + 24) = v49;
        v50 = v56 + 40 * v62;
        v51 = *(_QWORD *)(v50 + 32);
        *(_QWORD *)(v50 + 32) = 0;
        *v43 = v51;
        v52 = *(WebCore::Font **)(v50 + 32);
        *(_QWORD *)(v50 + 32) = 0;
        if (v52)
          WTF::RefCounted<WebCore::Font>::deref(v52);
        WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v61, v45);
        v10 = v63;
        if (v61 == a3)
          v10 = v36;
        goto LABEL_42;
      }
LABEL_31:
      v33 = ++v16 + v35;
    }
  }
  v10 = 0;
  result = 0;
  if (v4)
  {
LABEL_48:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::Font **v7;
  uint64_t v8;
  WebCore::Font *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v7 = *(WebCore::Font ***)a1;
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
        WTF::RefCounted<WebCore::Font>::deref(v9);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v4 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::begin(uint64_t a1)
{
  if (!a1)
    return 0;
  if (*(_DWORD *)(a1 - 12))
    return WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::makeIterator(a1, a1);
  return a1 + 40 * *(unsigned int *)(a1 - 4);
}

uint64_t WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::makeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v2 = a2;
  if (a1)
    v3 = *(_DWORD *)(a1 - 4);
  else
    v3 = 0;
  v4 = a1 + 40 * v3;
  if (v4 != a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WebCore::FontDataCacheKeyTraits,false>::isEmptyValue<WebCore::FontPlatformData>(v2) & 1) != 0
         || *(_BYTE *)(v2 + 27))
    {
      v2 += 40;
      if (v2 == v4)
        return v4;
    }
  }
  return v2;
}

char *WTF::Vector<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = WTF::Vector<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 0x15)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 20;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x196172E3CLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x15)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 20;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

uint64_t *WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::remove(uint64_t *a1, WebCore::FontPlatformData *a2)
{
  WebCore::FontPlatformData *v2;

  if (*a1)
  {
    v2 = (WebCore::FontPlatformData *)(*a1 + 40 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v2 = 0;
  }
  if (v2 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::remove(a1, a2);
  return a1;
}

WebCore::Font *WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::remove(uint64_t *a1, WebCore::FontPlatformData *a2)
{
  WebCore::Font *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>::customDeleteBucket(a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebCore::Font *)WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WebCore::Font *WTF::KeyValuePairHashTraits<WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>::customDeleteBucket(WebCore::FontPlatformData *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Font *result;

  WebCore::FontPlatformData::~FontPlatformData(a1, a2);
  WebCore::FontPlatformData::FontPlatformData(v3);
  result = *(WebCore::Font **)(v4 + 32);
  *((_QWORD *)a1 + 4) = 0;
  if (result)
    return WTF::RefCounted<WebCore::Font>::deref(result);
  return result;
}

uint64_t WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyHash>,WebCore::FontPlatformData>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyHash>,WebCore::FontPlatformData>(result, a2);
    v4 = *a1;
    if (!result)
    {
      if (v4)
        return v4 + 40 * *(unsigned int *)(v4 - 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyHash>,WebCore::FontPlatformData>(uint64_t a1, CFTypeRef *this)
{
  unsigned int v4;
  int v5;
  int i;
  unsigned int v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  BOOL v11;

  if (a1)
  {
    v4 = *(_DWORD *)(a1 - 8);
    v5 = WebCore::FontPlatformData::hash(this);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = a1 + 40 * (v5 & v4);
      v9 = *(CFTypeRef *)v8;
      v10 = *this;
      if (*(_QWORD *)v8)
        v11 = v10 == 0;
      else
        v11 = 1;
      if (v11)
      {
        if (v9 != v10)
          goto LABEL_11;
      }
      else if (!CFEqual(v9, v10))
      {
        goto LABEL_11;
      }
      if (*(unsigned __int8 *)(v8 + 27) == *((unsigned __int8 *)this + 27)
        && *(float *)(v8 + 8) == *((float *)this + 2)
        && *(unsigned __int8 *)(v8 + 24) == *((unsigned __int8 *)this + 24)
        && *(unsigned __int8 *)(v8 + 25) == *((unsigned __int8 *)this + 25)
        && *(unsigned __int8 *)(v8 + 26) == *((unsigned __int8 *)this + 26)
        && (*(_BYTE *)(v8 + 12) == 0) != (*((_BYTE *)this + 12) != 0)
        && *(unsigned __int8 *)(v8 + 13) == *((unsigned __int8 *)this + 13)
        && *(unsigned __int8 *)(v8 + 14) == *((unsigned __int8 *)this + 14))
      {
        return v8;
      }
LABEL_11:
      if ((WTF::HashTraitsEmptyValueChecker<WebCore::FontDataCacheKeyTraits,false>::isEmptyValue<WebCore::FontPlatformData>(a1 + 40 * v7) & 1) != 0)
        return 0;
      ++i;
    }
  }
  return 0;
}

unsigned __int8 *WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::makeIterator(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned __int8 *v4;
  __int128 i;
  _OWORD v7[5];

  v2 = a2;
  if (a1)
    v3 = *(_DWORD *)(a1 - 4);
  else
    v3 = 0;
  v4 = (unsigned __int8 *)(a1 + 88 * v3);
  if (v4 != a2)
  {
    for (i = 0uLL; ; i = 0uLL)
    {
      v7[3] = i;
      v7[4] = i;
      v7[1] = i;
      v7[2] = i;
      v7[0] = i;
      if ((WebCore::operator==(v2, (unsigned __int8 *)v7) & 1) == 0 && !*v2)
        break;
      v2 += 88;
      if (v2 == v4)
        return v4;
    }
  }
  return v2;
}

char *WTF::Vector<WebCore::FontPlatformDataCacheKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 80 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x3333334)
      {
        __break(0xC471u);
        JUMPOUT(0x196173320);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 80 * *(unsigned int *)(a1 + 12));
      v18 = 80 * v16;
      v19 = WTF::fastMalloc((WTF *)(80 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::FontPlatformDataCacheKey>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x3333334)
      {
        __break(0xC471u);
        JUMPOUT(0x196173328);
      }
      v10 = 80 * v9;
      v11 = WTF::fastMalloc((WTF *)(80 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::FontPlatformDataCacheKey>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::FontPlatformDataCacheKey>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(_OWORD *)v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v7;
      v8 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v8;
      v9 = *((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      *(_QWORD *)(a3 + 40) = v9;
      v10 = *((_OWORD *)v5 + 3);
      *(_WORD *)(a3 + 64) = *((_WORD *)v5 + 32);
      *(_OWORD *)(a3 + 48) = v10;
      v11 = *((_QWORD *)v5 + 9);
      *((_QWORD *)v5 + 9) = 0;
      *(_QWORD *)(a3 + 72) = v11;
      v12 = *((_QWORD *)v5 + 9);
      *((_QWORD *)v5 + 9) = 0;
      if (v12)
        WTF::RefCounted<WebCore::FontCreationContextRareData>::deref(v12, a2);
      v13 = (WTF::StringImpl *)*((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      if (v14)
        WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v14, a2);
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 80);
      a3 += 80;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::FontPlatformDataCacheKey>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 9);
      *((_QWORD *)v3 + 9) = 0;
      if (v4)
        WTF::RefCounted<WebCore::FontCreationContextRareData>::deref(v4, a2);
      v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 5);
      *((_QWORD *)v3 + 5) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      if (v6)
        WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v6, a2);
      result = (WTF::StringImpl *)*((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 80);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore12FontSelectorES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  int v6;
  unsigned int v7;
  unsigned int **v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  int v15;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 4);
    if (v4)
    {
      v6 = 0;
      v7 = v4 - 1;
      do
      {
        v8 = (unsigned int **)(v2 + 8 * v7);
        if ((unint64_t)*v8 + 1 >= 2 && !*((_QWORD *)*v8 + 1))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v8, a2);
          ++v6;
        }
      }
      while ((unint64_t)v7--);
      v10 = *a1;
      v2 = v6 != 0;
      if (v6)
      {
        *(_DWORD *)(v10 - 16) += v6;
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 12);
        else
          v15 = 0;
        *(_DWORD *)(v14 - 12) = v15 - v6;
        v10 = *a1;
      }
      if (v10)
      {
        v11 = *(_DWORD *)(v10 - 4);
        v12 = 6 * *(_DWORD *)(v10 - 12);
        if (v11 >= 9 && v12 < v11)
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(a1);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>,WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>&&)#1},WTF::Vector<WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t a1, _QWORD **a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  result = WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)a2);
  if ((_DWORD)result)
  {
    v12 = result;
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v13 = WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a1 + 8) = v12;
    *(_QWORD *)a1 = v13;
  }
  WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v19, a2);
  v5 = *a2;
  if (*a2)
  {
    v7 = *((unsigned int *)v5 - 1);
    v6 = &v5[v7];
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v14 = a2;
  v15 = v6;
  v16 = v6;
  v17 = v6;
  v18 = &v5[v7];
  result = (uint64_t)WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  v8 = v20;
  v9 = v15;
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(*v8 + 8);
    ++*(_DWORD *)(v10 + 8);
    v11 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v10;
    *(_DWORD *)(a1 + 12) = v11 + 1;
    result = (uint64_t)WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
    v8 = v20;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::VectorDestructor<true,WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>>::destruct(_DWORD *result, _DWORD **a2)
{
  _DWORD **v3;

  if (result != (_DWORD *)a2)
  {
    v3 = (_DWORD **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<void WebCore::dispatchToAllFontCaches<WebCore::FontCache::invalidateAllFontCaches(WebCore::FontCache::ShouldRunInvalidationCallback)::$_0>(WebCore::FontCache::invalidateAllFontCaches(WebCore::FontCache::ShouldRunInvalidationCallback)::$_0)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext &>::call(WebCore *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *result;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (a1 = *(WebCore **)(v2 + 96)) == 0)
    a1 = (WebCore *)WebCore::threadGlobalDataSlow(a1);
  result = (uint64_t *)*((_QWORD *)a1 + 10);
  if (result)
    return WebCore::FontCache::invalidate((WebCore::FontCache *)result, a2);
  return result;
}

float **WTF::Detail::CallableWrapper<void WebCore::dispatchToAllFontCaches<WebCore::FontCache::releaseNoncriticalMemoryInAllFontCaches(void)::$_0>(WebCore::FontCache::releaseNoncriticalMemoryInAllFontCaches(void)::$_0)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext &>::call(WebCore *a1)
{
  uint64_t v1;
  float **result;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v1 || (a1 = *(WebCore **)(v1 + 96)) == 0)
    a1 = (WebCore *)WebCore::threadGlobalDataSlow(a1);
  result = (float **)*((_QWORD *)a1 + 10);
  if (result)
    return (float **)WebCore::FontCache::releaseNoncriticalMemory(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FontCascade::dashesForIntersectionsWithRect(WebCore::TextRun const&,WebCore::FloatPoint const&,WebCore::FloatRect const&)::$_0,void,WebCore::PathElement const&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  BOOL v11;
  float v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;

  v2 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)a2 == 2)
  {
    v3 = (float *)(a2 + 12);
    v4 = (float *)(a2 + 16);
LABEL_3:
    v5 = *v4;
    v6 = *v3;
    v8 = *(float *)(v2 + 12);
    v7 = *(float *)(v2 + 16);
    v9 = *(float *)(v2 + 8);
    v10 = v8 >= v7 || v5 <= v7;
    if (!v10 || (v8 > v7 ? (v11 = v5 < v7) : (v11 = 0), v11))
    {
      v17 = v9 + (float)((float)((float)(v6 - v9) * (float)(v7 - v8)) / (float)(v5 - v8));
      v18 = *(float *)(v2 + 24);
      if (v18 > v17)
        v18 = v9 + (float)((float)((float)(v6 - v9) * (float)(v7 - v8)) / (float)(v5 - v8));
      if (*(float *)(v2 + 28) >= v17)
        v17 = *(float *)(v2 + 28);
      *(float *)(v2 + 24) = v18;
      *(float *)(v2 + 28) = v17;
    }
    v12 = *(float *)(v2 + 20);
    v13 = v8 >= v12 || v5 <= v12;
    if (!v13 || (v8 > v12 ? (v14 = v5 < v12) : (v14 = 0), v14))
    {
      v19 = v9 + (float)((float)((float)(v6 - v9) * (float)(v12 - v8)) / (float)(v5 - v8));
      v20 = *(float *)(v2 + 24);
      if (v20 > v19)
        v20 = v9 + (float)((float)((float)(v6 - v9) * (float)(v12 - v8)) / (float)(v5 - v8));
      if (*(float *)(v2 + 28) >= v19)
        v19 = *(float *)(v2 + 28);
      *(float *)(v2 + 24) = v20;
      *(float *)(v2 + 28) = v19;
    }
    v15 = v8 < v7 || v8 > v12;
    if (!v15 || (v8 <= v7 ? (v16 = v8 < v12) : (v16 = 1), !v16))
    {
      v21 = *(float *)(v2 + 24);
      if (v21 > v9)
        v21 = v9;
      if (*(float *)(v2 + 28) >= v9)
        v9 = *(float *)(v2 + 28);
      *(float *)(v2 + 24) = v21;
      *(float *)(v2 + 28) = v9;
    }
    *(float *)(v2 + 8) = v6;
    *(float *)(v2 + 12) = v5;
  }
  else
  {
    switch(*(_BYTE *)a2)
    {
      case 0:
        *(_QWORD *)v2 = *(_QWORD *)(a2 + 4);
        *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 4);
        break;
      case 1:
        v3 = (float *)(a2 + 4);
        v4 = (float *)(a2 + 8);
        goto LABEL_3;
      case 3:
        v3 = (float *)(a2 + 20);
        v4 = (float *)(a2 + 24);
        goto LABEL_3;
      case 4:
        v4 = (float *)(v2 + 4);
        v3 = *(float **)(result + 8);
        goto LABEL_3;
      default:
        return result;
    }
  }
  return result;
}

uint64_t WebCore::add(_DWORD *a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  result = *a2;
  if (*a2)
  {
    v5 = WTF::StringImpl::startsWith();
    v6 = *a2;
    if (v5)
    {
      if (v6)
        result = *(_DWORD *)(v6 + 16) >> 8;
      else
        result = 0;
    }
    else
    {
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(unsigned int *)(v6 + 4);
      if ((*(_BYTE *)(v6 + 16) & 4) != 0)
      {
        v9 = -1640531527;
        if (v8 >= 2)
        {
          v10 = 0;
          do
          {
            v11 = v9 + *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v7 + v10));
            v12 = (v11 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v7 + v10 + 1)) << 11) ^ v11;
            v9 = v12 + (v12 >> 11);
            v13 = v10 + 3;
            v10 += 2;
          }
          while (v13 < v8);
        }
        if ((v8 & 1) != 0)
        {
          v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v8 + v7 - 1));
          v9 = ((v9 + v14) ^ ((v9 + v14) << 11)) + (((v9 + v14) ^ ((v9 + v14) << 11)) >> 17);
        }
        v15 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
        v16 = (v15 ^ (4 * v15)) + ((v15 ^ (4 * v15)) >> 15);
        v17 = (v16 ^ (v16 << 10)) & 0xFFFFFF;
        if (v17)
          result = v17;
        else
          result = 0x800000;
      }
      else
      {
        result = WTF::ASCIICaseInsensitiveHash::hash<char16_t>(v7, v8);
      }
    }
    *a1 = ((result >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)result) << 16) ^ (*a1
                                                                                               + (unsigned __int16)result))
        + (((result >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)result) << 16) ^ (*a1
                                                                                                + (unsigned __int16)result)) >> 11);
  }
  return result;
}

BOOL WebCore::FontCascadeDescription::familyNamesAreEqual(WebCore::FontCascadeDescription *this, const WTF::AtomString *a2, const WTF::AtomString *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)this)
  {
    v5 = WTF::StringImpl::startsWith();
    v6 = *(_QWORD *)this;
    if (v5)
      return v6 == *(_QWORD *)a2;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)a2;
  if (v6 == *(_QWORD *)a2)
    return 1;
  v9 = *(unsigned int *)(v6 + 4);
  if ((_DWORD)v9 != *(_DWORD *)(v7 + 4))
    return 0;
  v10 = *(_DWORD *)(v7 + 16);
  v11 = *(_QWORD *)(v6 + 8);
  v12 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    if ((v10 & 4) != 0)
      return WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(v11, v9, v12, v9, v9);
    else
      return WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(v11, v9, v12, v9, v9);
  }
  else if ((v10 & 4) != 0)
  {
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(v11, v9, v12, v9, v9);
  }
  else
  {
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(v11, v9, v12, v9, v9);
  }
}

uint64_t WebCore::FontCascadeCache::clearWidthCaches(float **this)
{
  float *v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = *this;
  result = (uint64_t)WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::begin(*this);
  v4 = result;
  v5 = v3;
  if (v1)
    v1 += 24 * *((unsigned int *)v1 - 1);
  if (v1 != (float *)result)
  {
    do
    {
      result = WebCore::WidthCache::clear(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 88) + 120, v3);
      while (1)
      {
        v4 += 96;
        if ((void *)v4 == v5)
          break;
        result = WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::isEmptyOrDeletedBucket((float *)v4);
        if (!(_DWORD)result)
          goto LABEL_7;
      }
      v4 = (uint64_t)v5;
LABEL_7:
      ;
    }
    while ((float *)v4 != v1);
  }
  return result;
}

uint64_t WebCore::WidthCache::clear(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this;
  v3 = *(_QWORD *)(this + 8);
  if (v3)
  {
    *(_QWORD *)(this + 8) = 0;
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    *(_QWORD *)(v2 + 16) = 0;
    return WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  return this;
}

uint64_t WebCore::FontCascadeFonts::pruneSystemFallbacks(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this + 96);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v3 = this;
    v4 = 0;
    v5 = this + 72;
    do
    {
      WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::removeIf<WebCore::FontCascadeFonts::pruneSystemFallbacks(void)::$_0>((WebCore::MixedFontGlyphPage *)(v5 + v4), a2);
      v4 += 8;
    }
    while (v4 != 24);
    this = *(_QWORD *)(v3 + 96);
    if (this)
    {
      *(_QWORD *)(v3 + 96) = 0;
      return WTF::HashTable<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>::deallocateTable((WTF ***)this, a2);
    }
  }
  return this;
}

WebCore::FontCascadeCacheEntry *WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::remove(WebCore::FontCascadeCacheEntry *result, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v3 = (uint64_t *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_QWORD *)result + 96 * *(unsigned int *)(*(_QWORD *)result - 4);
    if ((WTF::StringImpl *)v4 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v4 = 0;
  }
  if ((WTF::StringImpl *)v4 != a2)
  {
    WTF::hashTraitsDeleteBucket<WebCore::FontCascadeCacheKeyHashTraits,WebCore::FontCascadeCacheKey>((uint64_t)a2, a2);
    result = (WebCore::FontCascadeCacheEntry *)*((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 11) = 0;
    if (result)
    {
      WebCore::FontCascadeCacheEntry::~FontCascadeCacheEntry(result, v5);
      result = (WebCore::FontCascadeCacheEntry *)WTF::fastFree(v6, v7);
    }
    ++*(_DWORD *)(*v3 - 16);
    v8 = *v3;
    if (*v3)
      v9 = *(_DWORD *)(v8 - 12) - 1;
    else
      v9 = -1;
    *(_DWORD *)(v8 - 12) = v9;
    v10 = *v3;
    if (*v3)
    {
      v11 = 6 * *(_DWORD *)(v10 - 12);
      v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
        return (WebCore::FontCascadeCacheEntry *)WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::rehash(v3, v12 >> 1, 0);
    }
  }
  return result;
}

WebCore::FontCascadeDescription *WebCore::FontCascadeDescription::FontCascadeDescription(WebCore::FontCascadeDescription *this)
{
  _DWORD *v2;
  unsigned int v3;
  _QWORD *v4;

  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_BYTE *)this + 97) = 1;
  *((_BYTE *)this + 104) = 0;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *((_QWORD *)this + 14) = v2;
  *((_WORD *)this + 60) = 0;
  *((_DWORD *)this + 31) = 2143289344;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 26216000;
  *((_WORD *)this + 76) = 257;
  v3 = *((_DWORD *)this + 40) & 0x80000000 | 0xE000;
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 40) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 166);
  *((_WORD *)this + 82) = 0;
  *((_BYTE *)this + 166) = v3 & 0xFC;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = 0x100000001;
  v4[1] = 0;
  *((_QWORD *)this + 21) = v4;
  *((_DWORD *)this + 44) = 0;
  *((_WORD *)this + 90) &= 0xFC00u;
  return this;
}

{
  _DWORD *v2;
  unsigned int v3;
  _QWORD *v4;

  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_BYTE *)this + 97) = 1;
  *((_BYTE *)this + 104) = 0;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *((_QWORD *)this + 14) = v2;
  *((_WORD *)this + 60) = 0;
  *((_DWORD *)this + 31) = 2143289344;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 26216000;
  *((_WORD *)this + 76) = 257;
  v3 = *((_DWORD *)this + 40) & 0x80000000 | 0xE000;
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 40) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 166);
  *((_WORD *)this + 82) = 0;
  *((_BYTE *)this + 166) = v3 & 0xFC;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = 0x100000001;
  v4[1] = 0;
  *((_QWORD *)this + 21) = v4;
  *((_DWORD *)this + 44) = 0;
  *((_WORD *)this + 90) &= 0xFC00u;
  return this;
}

uint64_t WebCore::FontDescription::FontDescription(uint64_t this)
{
  _DWORD *v1;
  unsigned int v2;

  *(_QWORD *)(this + 96) = 0;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)(this + 16) = 0u;
  *(_BYTE *)(this + 97) = 1;
  *(_BYTE *)(this + 104) = 0;
  v1 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v1 += 2;
  *(_QWORD *)(this + 112) = v1;
  *(_WORD *)(this + 120) = 0;
  *(_DWORD *)(this + 124) = 2143289344;
  *(_QWORD *)(this + 128) = 0;
  *(_QWORD *)(this + 136) = 0;
  *(_QWORD *)(this + 144) = 26216000;
  *(_WORD *)(this + 152) = 257;
  v2 = *(_DWORD *)(this + 160) & 0x80000000 | 0xE000;
  *(_DWORD *)(this + 156) = 0;
  *(_DWORD *)(this + 160) = v2;
  LOBYTE(v2) = *(_BYTE *)(this + 166);
  *(_WORD *)(this + 164) = 0;
  *(_BYTE *)(this + 166) = v2 & 0xFC;
  return this;
}

uint64_t WebCore::FontCascadeDescription::lighterWeight(uint64_t result)
{
  int v1;
  unsigned int v2;

  if ((unsigned __int16)result >= 0xBB8u)
    v1 = 2800;
  else
    v1 = 1600;
  if ((unsigned __int16)result >= 0x898u)
    v2 = v1;
  else
    v2 = 400;
  if ((__int16)result >= 400)
    return v2;
  else
    return (unsigned __int16)result;
}

uint64_t WebCore::FontCascadeDescription::bolderWeight(unsigned __int16 a1)
{
  int v1;
  unsigned int v2;

  if (a1 <= 0xE10u)
    v1 = 3600;
  else
    v1 = a1;
  if (a1 >= 0x898u)
    v2 = v1;
  else
    v2 = 2800;
  if ((__int16)a1 >= 1400)
    return v2;
  else
    return 1600;
}

float WebCore::FontCascadeDescription::resolveFontSizeAdjustFromFontIfNeeded(WebCore::FontCascadeDescription *this, const WebCore::Font *a2)
{
  float result;

  LODWORD(result) = HIDWORD(*((_QWORD *)this + 15));
  return result;
}

uint64_t WebCore::FontSizeAdjust::resolve(unsigned __int8 *a1, float *a2, float a3)
{
  int v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  if ((v3 - 3) < 2)
  {
    v4 = a2[4];
  }
  else if (v3 == 2)
  {
    v4 = a2[10];
  }
  else if (v3 == 1)
  {
    v4 = a2[2];
  }
  else
  {
    v4 = a2[9];
  }
  if (a3 == 0.0)
  {
    v7 = 0;
    v8 = 0;
    v6 = 0;
  }
  else
  {
    v5 = v4 / a3;
    v6 = LODWORD(v5) & 0xFFFFFF00;
    v7 = LOBYTE(v5);
    v8 = 0x100000000;
  }
  return v8 | v7 | v6;
}

uint64_t WebCore::GlyphData::GlyphData(uint64_t a1, __int16 a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  WTF *v8;

  v4 = a1;
  *(_WORD *)a1 = a2;
  *(_BYTE *)(a1 + 2) = a4;
  if (a3)
  {
    v5 = *(_QWORD *)(a3 + 8);
    if (!v5)
    {
      v5 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v5 = 1;
      *(_QWORD *)(v5 + 8) = a3;
      v8 = *(WTF **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v5;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WTF::fastFree(v8, v7);
          v5 = *(_QWORD *)(a3 + 8);
          if (!v5)
            goto LABEL_6;
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    ++*(_DWORD *)v5;
LABEL_6:
    v4 = a1;
    goto LABEL_3;
  }
  v5 = 0;
LABEL_3:
  *(_QWORD *)(v4 + 8) = v5;
  return v4;
}

WebCore::FontCache **WebCore::FontCascadeFonts::FontCascadeFonts(WebCore::FontCache **this, const WebCore::FontPlatformData *a2)
{
  WebCore::FontCache **v3;
  _DWORD *v4;
  unint64_t StatusReg;
  uint64_t v6;
  WebCore::FontCache **v7;
  WebCore::FontCache *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::FontCache *v11;
  WebCore::Font *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  WTF *v20;
  _BYTE *v21;
  unint64_t v22;
  WTF **v24;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  WTF *v29;
  void *v30;
  unsigned int v31;
  WebCore::FontCache *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WebCore::Font *v46;
  WebCore::Font *v47;
  WTF *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;

  v3 = this;
  *(_DWORD *)this = 1;
  this[1] = (WebCore::FontCache *)(this + 3);
  v4 = this + 1;
  this[2] = (WebCore::FontCache *)1;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)(this + 13) = 0u;
  *(_OWORD *)(this + 11) = 0u;
  *(_OWORD *)(this + 9) = 0u;
  this[15] = (WebCore::FontCache *)0x1400000014;
  this[16] = 0;
  this[17] = 0;
  *((_DWORD *)this + 36) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 736);
  if (!v6 || (v7 = *(WebCore::FontCache ***)(v6 + 96)) == 0)
  {
    this = (WebCore::FontCache **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v7 = this;
  }
  v8 = v7[10];
  if (!v8)
  {
    this = WebCore::ThreadGlobalData::initializeFontCache(v7);
    v8 = v7[10];
  }
  *((_WORD *)v3 + 74) = *((_WORD *)v8 + 60);
  *((_WORD *)v3 + 75) = 256;
  *((_BYTE *)v3 + 152) = (_BYTE)v3[19] & 0xFC | 2;
  v9 = *(_QWORD *)(StatusReg + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v11 = *(WebCore::FontCache **)(v10 + 80);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v10);
    v11 = *(WebCore::FontCache **)(v10 + 80);
  }
  WebCore::FontCache::fontForPlatformData(v11, a2, &v46);
  v12 = v46;
  v46 = 0;
  v47 = v12;
  WebCore::FontRanges::FontRanges((uint64_t)&v48, (uint64_t *)&v47);
  v14 = *((unsigned int *)v3 + 5);
  if ((_DWORD)v14 != *((_DWORD *)v3 + 4))
  {
    v15 = *(_QWORD *)v4;
    v16 = v15 + 40 * v14;
    v17 = v50;
    v18 = (_QWORD *)(v16 + 16);
    *(_QWORD *)v16 = v16 + 16;
    *(_DWORD *)(v16 + 8) = 1;
    *(_DWORD *)(v16 + 12) = v17;
    if (v17 < 2)
    {
LABEL_13:
      v19 = v50;
      v20 = v48;
      if (v50)
      {
        v37 = (WTF *)((char *)v48 + 16 * v50);
        v38 = v48;
        do
        {
          *v18 = *(_QWORD *)v38;
          v39 = *((_QWORD *)v38 + 1);
          ++*(_DWORD *)(v39 + 8);
          v18[1] = v39;
          v38 = (WTF *)((char *)v38 + 16);
          v18 += 2;
        }
        while (v38 != v37);
      }
      v21 = (_BYTE *)(v15 + 40 * v14 + 32);
      v22 = (unint64_t)&v48;
      goto LABEL_15;
    }
    if (!(v17 >> 28))
    {
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(v16 + 8) = v17;
      *(_QWORD *)v16 = v18;
      goto LABEL_13;
    }
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x1961744C0);
  }
  v22 = WTF::Vector<WebCore::FontRanges,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v14 + 1, (unint64_t)&v48);
  v31 = *((_DWORD *)v3 + 5);
  v32 = v3[1];
  v33 = (char *)v32 + 40 * v31;
  v34 = *(unsigned int *)(v22 + 12);
  v35 = v33 + 16;
  *(_QWORD *)v33 = v33 + 16;
  *((_DWORD *)v33 + 2) = 1;
  *((_DWORD *)v33 + 3) = v34;
  if (v34 >= 2)
  {
    if (v34 >> 28)
      goto LABEL_50;
    v45 = v34;
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v34));
    *((_DWORD *)v33 + 2) = v45;
    *(_QWORD *)v33 = v35;
  }
  v36 = *(unsigned int *)(v22 + 12);
  if ((_DWORD)v36)
  {
    v42 = *(_QWORD **)v22;
    v43 = *(_QWORD *)v22 + 16 * v36;
    do
    {
      *v35 = *v42;
      v44 = v42[1];
      ++*(_DWORD *)(v44 + 8);
      v35[1] = v44;
      v42 += 2;
      v35 += 2;
    }
    while (v42 != (_QWORD *)v43);
  }
  v21 = (char *)v32 + 40 * v31 + 32;
  v19 = v50;
  v20 = v48;
LABEL_15:
  *v21 = *(_BYTE *)(v22 + 32);
  ++*((_DWORD *)v3 + 5);
  if (v19)
  {
    v26 = 16 * v19;
    v27 = (_DWORD **)((char *)v20 + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (v28[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
        else
          --v28[2];
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
    v20 = v48;
  }
  if (&v51 != (uint64_t *)v20 && v20 != 0)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree(v20, v13);
  }
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
    {
      WebCore::Font::~Font((WTF **)v47);
      WTF::fastFree(v29, v30);
    }
    else
    {
      --*(_DWORD *)v47;
    }
  }
  v24 = (WTF **)v46;
  v46 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      WebCore::Font::~Font(v24);
      WTF::fastFree(v40, v41);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  return v3;
}

uint64_t WebCore::FontCascadeFonts::determinePitch(WebCore::FontCascadeFonts *this, const WebCore::FontCascadeDescription *a2)
{
  uint64_t result;
  char v4;

  result = WebCore::FontCascadeFonts::realizeFallbackRangesAt(this, a2, 0);
  if (*(_DWORD *)(result + 12) == 1)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)result + 8) + 16))(*(_QWORD *)(*(_QWORD *)result + 8), 0);
    if ((*(_BYTE *)(result + 344) & 1) != 0)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 2;
  }
  *((_BYTE *)this + 150) = v4;
  return result;
}

uint64_t WebCore::FontCascadeFonts::determineCanTakeFixedPitchFastContentMeasuring(WebCore::FontCascadeFonts *this, const WebCore::FontCascadeDescription *a2)
{
  uint64_t result;

  result = WebCore::FontCascadeFonts::realizeFallbackRangesAt(this, a2, 0);
  if (*(_DWORD *)(result + 12) == 1)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)result + 8) + 16))(*(_QWORD *)(*(_QWORD *)result + 8), 0);
    *((_BYTE *)this + 152) = *((_BYTE *)this + 152) & 0xFC | ((*(_BYTE *)(result + 344) & 2) != 0);
  }
  else
  {
    *((_BYTE *)this + 152) &= 0xFCu;
  }
  return result;
}

WTF::StringImpl *WebCore::FontCascadeFonts::glyphDataForSystemFallback(uint64_t a1, WebCore::FontCascadeFonts *this, unsigned int a3, WebCore::FontCascadeDescription *a4, int a5, int a6, int a7)
{
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  void *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  int v25;
  WebCore::FontCascadeDescription *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  WebCore::FontCascadeDescription *v35;
  void *v36;
  WebCore::Font *v37;
  int v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  WebCore::Font *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  WebCore::Font **v54;
  WebCore::Font *v55;
  WebCore::Font **v56;
  int v57;
  WTF **v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *result;
  int v61;
  WTF::StringImpl *v62;
  WTF *v63;
  void *v64;
  WTF **v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  WTF *v72;
  void *v73;
  _DWORD *v74;
  WebCore::Font *v75;
  _BOOL4 isCJKIdeographOrSymbol;
  WebCore::Font *v77;
  WTF *v78;
  int v79;
  unsigned int v80;
  __int16 v81;
  char v82;
  WTF *v83;
  WebCore::Font *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unsigned int v87;
  char v88;

  v14 = 0;
  while (1)
  {
    v15 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(this, a4, v14);
    if (!*(_DWORD *)(v15 + 12))
      break;
    v16 = (_DWORD *)v15;
    WebCore::FontRanges::glyphDataForCharacter(a3, v15, 0, (uint64_t)&v85);
    v18 = v86;
    if (!v86)
      goto LABEL_7;
    v19 = *((_QWORD *)v86 + 1);
    v86 = 0;
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, v17);
    else
      --*(_DWORD *)v18;
    if (!v19)
    {
LABEL_7:
      if (!v16[3])
      {
        __break(0xC471u);
        JUMPOUT(0x196174C24);
      }
      v19 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v16 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v16 + 8), 0);
    }
    ++v14;
    if ((*(_BYTE *)(v19 + 256) & 2) == 0)
      goto LABEL_10;
  }
  v74 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(this, a4, 0);
  if (!v74[3])
    goto LABEL_123;
  v19 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v74 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v74 + 8), 0);
LABEL_10:
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 1;
  if (a3 < 0x10000)
    v20 = 1;
  else
    v20 = 2;
  if (a3 > 0xFF)
  {
    v21 = (WebCore *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v85);
    if (v21)
    {
      if (HIWORD(a3))
      {
        v61 = (a3 >> 10) - 10304;
        *((_WORD *)v21 + 1) = a3 & 0x3FF | 0xDC00;
      }
      else
      {
        LOWORD(v61) = a3;
      }
      *(_WORD *)v21 = v61;
    }
  }
  else
  {
    v21 = (WebCore *)MEMORY[0x19AEA4824](&v85, v20);
    if (v21)
      *(_BYTE *)v21 = a3;
  }
  v22 = v86;
  v79 = a5;
  v80 = a3;
  if (v86)
  {
    v23 = v86;
  }
  else
  {
    v23 = v85;
    if (!v85)
    {
LABEL_19:
      v24 = v87;
      if (!v87)
      {
        v25 = a7;
        v26 = a4;
        v27 = 0;
        goto LABEL_24;
      }
      if (v85)
        v22 = v85;
      if ((v87 & 0x80000000) == 0)
      {
        v25 = a7;
        v26 = a4;
        v27 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
LABEL_24:
        v28 = 0x100000000;
        goto LABEL_25;
      }
LABEL_123:
      __break(0xC471u);
      JUMPOUT(0x196174A7CLL);
    }
  }
  if ((*((_BYTE *)v23 + 16) & 4) != 0)
    goto LABEL_19;
  v24 = v87;
  if (v87)
  {
    v62 = v85;
    if (!v85)
      v62 = v86;
    if ((v87 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196174BF8);
    }
    v25 = a7;
    v26 = a4;
    v28 = 0;
    v27 = (unsigned __int8 *)*((_QWORD *)v62 + 1);
  }
  else
  {
    v25 = a7;
    v26 = a4;
    v28 = 0;
    v27 = 0;
  }
LABEL_25:
  v29 = v28 | v24;
  v30 = *((unsigned __int8 *)this + 151);
  v31 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v31 || (v32 = *(_QWORD *)(v31 + 96)) == 0)
    v32 = WebCore::threadGlobalDataSlow(v21);
  v33 = *(_QWORD *)(v32 + 80);
  if (!v33)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v32);
    v33 = *(_QWORD *)(v32 + 80);
  }
  v34 = v30 != 0;
  v35 = v26;
  WebCore::SystemFallbackFontCache::systemFallbackFontForCharacterCluster((uint64_t *)(v33 + 88), v19, v27, v29, (uint64_t)v26, a6, v34, &v84);
  v37 = v84;
  if (!v84)
  {
    *(_WORD *)a1 = 0;
    *(_BYTE *)(a1 + 2) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_49;
  }
  if (v25)
  {
    v37 = (WebCore::Font *)WebCore::Font::invisibleFont(v84);
    ++*(_DWORD *)v37;
    v75 = v84;
    v84 = v37;
    v38 = v79;
    if (v75)
    {
      WTF::RefCounted<WebCore::Font>::deref(v75);
      v37 = v84;
    }
  }
  else
  {
    v38 = v79;
  }
  if (*((_BYTE *)v37 + 100))
  {
    if ((*((_BYTE *)v37 + 344) & 8) == 0)
    {
      isCJKIdeographOrSymbol = WebCore::FontCascade::isCJKIdeographOrSymbol(v80);
      v37 = v84;
      if (isCJKIdeographOrSymbol)
      {
        *(_WORD *)a1 = 0;
        *(_BYTE *)(a1 + 2) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v39 = a1 + 8;
        v38 = 4;
        goto LABEL_109;
      }
    }
  }
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v39 = a1 + 8;
  if (v38 == 1)
  {
    WebCore::Font::glyphDataForCharacter(v37, v80, (uint64_t)&v81);
    *(_WORD *)a1 = v81;
    *(_BYTE *)(a1 + 2) = v82;
    v40 = v83;
    v83 = 0;
    v41 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v40;
    if (v41)
    {
      v42 = *(_DWORD *)v41 - 1;
      if (*(_DWORD *)v41 == 1)
      {
        WTF::fastFree(v41, v36);
        v41 = v83;
        v83 = 0;
        if (!v41)
          goto LABEL_38;
        v42 = *(_DWORD *)v41 - 1;
        if (*(_DWORD *)v41 == 1)
        {
          WTF::fastFree(v41, v36);
          goto LABEL_38;
        }
      }
      *(_DWORD *)v41 = v42;
    }
LABEL_38:
    v43 = 0;
    goto LABEL_39;
  }
LABEL_109:
  v77 = WebCore::Font::variantFont(v37, v35, v38);
  WebCore::Font::glyphDataForCharacter(v77, v80, (uint64_t)&v81);
  WebCore::GlyphData::operator=(a1, &v81);
  v78 = v83;
  v83 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 1)
      WTF::fastFree(v78, v36);
    else
      --*(_DWORD *)v78;
  }
  v43 = 1;
LABEL_39:
  if (*(_QWORD *)v39)
  {
    v44 = *(_QWORD *)(*(_QWORD *)v39 + 8);
    if (v44)
    {
      if (*(_BYTE *)(v44 + 100))
      {
        if (((v43 | ((*(_BYTE *)(v44 + 256) & 8) >> 3)) & 1) == 0
          && !WebCore::FontCascade::isCJKIdeographOrSymbol(v80))
        {
          WebCore::glyphDataForNonCJKCharacterWithGlyphOrientation((uint64_t)&v81, v80, (*((_DWORD *)v35 + 40) & 2) != 0, (unsigned __int16 *)a1);
          WebCore::GlyphData::operator=(a1, &v81);
          if (v83)
          {
            if (*(_DWORD *)v83 == 1)
              WTF::fastFree(v83, v36);
            else
              --*(_DWORD *)v83;
          }
        }
      }
    }
    if (*(_QWORD *)v39 && *(_QWORD *)(*(_QWORD *)v39 + 8))
    {
      v47 = *((_QWORD *)this + 12);
      v46 = (uint64_t *)((char *)this + 96);
      v45 = v47;
      if (v47
        || (WTF::HashTable<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>::rehash(v46, 8u), (v45 = *v46) != 0))
      {
        v48 = *(_DWORD *)(v45 - 8);
      }
      else
      {
        v48 = 0;
      }
      v49 = v84;
      v50 = ((unint64_t)v84 + ~((_QWORD)v84 << 32)) ^ (((unint64_t)v84 + ~((_QWORD)v84 << 32)) >> 22);
      v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
      v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
      v53 = v48 & ((v52 >> 31) ^ v52);
      v54 = (WebCore::Font **)(v45 + 8 * v53);
      v55 = *v54;
      if (!*v54)
      {
LABEL_84:
        v84 = 0;
        v65 = (WTF **)*v54;
        *v54 = v49;
        if (v65)
        {
          if (*(_DWORD *)v65 == 1)
          {
            WebCore::Font::~Font(v65);
            WTF::fastFree(v72, v73);
          }
          else
          {
            --*(_DWORD *)v65;
          }
        }
        v66 = *v46;
        if (*v46)
          v67 = *(_DWORD *)(v66 - 12) + 1;
        else
          v67 = 1;
        *(_DWORD *)(v66 - 12) = v67;
        v68 = *v46;
        if (*v46)
          v69 = *(_DWORD *)(v68 - 12);
        else
          v69 = 0;
        v70 = (*(_DWORD *)(v68 - 16) + v69);
        v71 = *(unsigned int *)(v68 - 4);
        if (v71 > 0x400)
        {
          if (v71 > 2 * v70)
            goto LABEL_49;
        }
        else if (3 * v71 > 4 * v70)
        {
          goto LABEL_49;
        }
        WTF::HashTable<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>::expand(v46);
        goto LABEL_49;
      }
      v56 = 0;
      v57 = 1;
      while (v55 != v84)
      {
        if (v55 == (WebCore::Font *)-1)
          v56 = v54;
        v53 = (v53 + v57) & v48;
        v54 = (WebCore::Font **)(v45 + 8 * v53);
        v55 = *v54;
        ++v57;
        if (!*v54)
        {
          if (v56)
          {
            *v56 = 0;
            --*(_DWORD *)(*v46 - 16);
            v49 = v84;
            v54 = v56;
          }
          goto LABEL_84;
        }
      }
    }
  }
LABEL_49:
  v58 = (WTF **)v84;
  v84 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 1)
    {
      WebCore::Font::~Font(v58);
      WTF::fastFree(v63, v64);
    }
    else
    {
      --*(_DWORD *)v58;
    }
  }
  v59 = v86;
  v86 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v36);
    else
      *(_DWORD *)v59 -= 2;
  }
  result = v85;
  v85 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v36);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::GlyphData::operator=(uint64_t a1, _BYTE *a2)
{
  __int16 v3;
  uint64_t v4;
  WTF *v5;

  v3 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = a2[2];
  *(_WORD *)a1 = v3;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  return a1;
}

{
  __int16 v3;
  _DWORD *v4;
  WTF *v5;

  v3 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = a2[2];
  *(_WORD *)a1 = v3;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    ++*v4;
  v5 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  return a1;
}

WebCore::Font *WebCore::Font::variantFont(WebCore::Font *this, const WebCore::FontDescription *a2, int a3)
{
  switch(a3)
  {
    case 4:
      return (WebCore::Font *)WebCore::Font::brokenIdeographFont(this);
    case 3:
      return (WebCore::Font *)WebCore::Font::emphasisMarkFont(this, a2);
    case 2:
      return WebCore::Font::smallCapsFont(this, a2);
  }
  return this;
}

WTF *WebCore::glyphDataForNonCJKCharacterWithGlyphOrientation(uint64_t a1, unsigned int a2, char a3, unsigned __int16 *a4)
{
  unsigned __int8 *v7;
  int v8;
  WebCore::Font *v9;
  void *v10;
  BOOL v11;
  WTF *result;
  _DWORD *v13;
  int32x4_t v14;
  WebCore::Font *v15;
  _DWORD *v16;
  unsigned __int16 v17;
  char v18;
  WTF *v19;

  v7 = *(unsigned __int8 **)(*((_QWORD *)a4 + 1) + 8);
  v8 = v7[113];
  if ((a3 & 1) != 0
    || a2 - 167 <= 0x17 && ((1 << (a2 + 89)) & 0xE08085) != 0
    || a2 - 6320 < 0x50
    || a2 - 5121 < 0x27F
    || a2 - 741 < 7
    || (a2 & 0xFFFFFF00) == 0x1100
    || a2 - 8214 <= 0x1B && ((1 << (a2 - 22)) & 0xC000C01) != 0
    || a2 - 8251 < 3
    || a2 - 8258 <= 0xF && ((1 << (a2 - 66)) & 0x80E5) != 0
    || (v14 = vdupq_n_s32(a2),
        (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1969F7860, (uint32x4_t)vaddq_s32(v14, (int32x4_t)xmmword_1969F7850)))) & 1) != 0)|| a2 - 8473 < 0x19|| a2 - 8499 < 0xD|| a2 - 8517 < 6|| a2 - 8524 < 2|| (vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32((uint32x4_t)xmmword_1969F7890, (uint32x4_t)vaddq_s32(v14, (int32x4_t)xmmword_1969F7870)), (int16x8_t)vcgtq_u32((uint32x4_t)xmmword_1969F78A0, (uint32x4_t)vaddq_s32(v14, (int32x4_t)xmmword_1969F7880))))) & 1) != 0|| (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32((uint32x4_t)xmmword_1969F78C0, (uint32x4_t)vaddq_s32(v14, (int32x4_t)xmmword_1969F78B0)), (int8x16_t)xmmword_1968BCEF0)) & 0xF) != 0
    || a2 - 11085 < 0xB3
    || (a2 & 0xFFFFFFF8) == 0x2300
    || (vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32((uint32x4_t)xmmword_1969F78F0, (uint32x4_t)vaddq_s32(v14, (int32x4_t)xmmword_1969F78D0)), (int16x8_t)vcgtq_u32((uint32x4_t)xmmword_1969F7900, (uint32x4_t)vaddq_s32(v14, (int32x4_t)xmmword_1969F78E0))))) & 1) != 0|| a2 - 65127 < 9|| a2 - 65281 < 7|| a2 - 65290 < 3|| (a2 & 0xFFFFFFFE) == 0x3012|| (a2 & 0xFFFFFFF0) == 0x3020|| (a2 & 0xFFFFFFE0) == 0xA960|| (a2 & 0xFFFFFFF0) == 0xFE10|| (a2 & 0xFFFFFFF8) == 0xFE50|| a2 == 65307|| a2 - 65294 < 0xC|| a2 >> 2 == 16377|| a2 - 65504 < 3
    || a2 - 65344 < 0x1B
    || a2 - 65311 < 0x1C
    || (a2 & 0xFFFFFFFD) == 0xFF3C
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1969F7920, (uint32x4_t)vaddq_s32(v14, (int32x4_t)xmmword_1969F7910)))) & 1) != 0|| (a2 & 0xFFFEFFFE) - 0x20000 < 0xFFFE|| a2 == 65533|| (a2 & 0xFFFFFF00) == 0x1B000|| (a2 & 0xFFFFFE00) == 0x1D000|| (a2 & 0xFFFFFF80) == 0x1D300)
  {
    v9 = (WebCore::Font *)WebCore::Font::uprightOrientationFont((WebCore::Font *)v7);
    WebCore::Font::glyphDataForCharacter(v9, a2, (uint64_t)&v17);
    if (v8)
      v11 = 0;
    else
      v11 = *a4 == v17;
    if (v11)
      goto LABEL_58;
  }
  else
  {
    v15 = (WebCore::Font *)WebCore::Font::verticalRightOrientationFont((WebCore::Font *)v7);
    WebCore::Font::glyphDataForCharacter(v15, a2, (uint64_t)&v17);
    if (!v8 && *a4 != v17)
    {
LABEL_58:
      *(_WORD *)a1 = *a4;
      *(_BYTE *)(a1 + 2) = *((_BYTE *)a4 + 2);
      v16 = (_DWORD *)*((_QWORD *)a4 + 1);
      if (v16)
        ++*v16;
      *(_QWORD *)(a1 + 8) = v16;
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          return (WTF *)WTF::fastFree(result, v10);
        else
          --*(_DWORD *)result;
      }
      return result;
    }
  }
  result = v19;
  if (v19)
  {
    if (*((_QWORD *)v19 + 1))
    {
      *(_WORD *)a1 = v17;
      *(_BYTE *)(a1 + 2) = v18;
      *(_QWORD *)(a1 + 8) = result;
      return result;
    }
    v19 = 0;
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v10);
    else
      --*(_DWORD *)result;
  }
  *(_WORD *)a1 = *a4;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a4 + 2);
  v13 = (_DWORD *)*((_QWORD *)a4 + 1);
  if (v13)
    ++*v13;
  *(_QWORD *)(a1 + 8) = v13;
  return result;
}

WebCore::MixedFontGlyphPage *WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::removeIf<WebCore::FontCascadeFonts::pruneSystemFallbacks(void)::$_0>(WebCore::MixedFontGlyphPage *result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  unsigned int v26;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v3 = *(_DWORD *)(v2 - 4);
    if (v3)
    {
      v4 = (uint64_t *)result;
      v5 = 0;
      v6 = v3 - 1;
      do
      {
        v7 = v6;
        v8 = v2 + 24 * v6;
        if (*(_DWORD *)v8 <= 0xFFFFFFFD)
        {
          result = *(WebCore::MixedFontGlyphPage **)(v8 + 16);
          if (result)
          {
            *(_DWORD *)v8 = -2;
            v9 = v2 + 24 * v6;
            *(_QWORD *)(v9 + 16) = 0;
            WebCore::MixedFontGlyphPage::~MixedFontGlyphPage(result, a2);
            result = (WebCore::MixedFontGlyphPage *)WTF::fastFree(v10, v11);
            v12 = *(WTF **)(v9 + 8);
            *(_QWORD *)(v9 + 8) = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 1)
              {
                --WebCore::GlyphPage::s_count;
                v13 = (WTF *)*((_QWORD *)v12 + 1);
                *((_QWORD *)v12 + 1) = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                    WTF::fastFree(v13, a2);
                  else
                    --*(_DWORD *)v13;
                }
                result = (WebCore::MixedFontGlyphPage *)WTF::fastFree(v12, a2);
              }
              else
              {
                --*(_DWORD *)v12;
              }
            }
            ++v5;
          }
        }
        --v6;
      }
      while (v7);
      v14 = *v4;
      if (v5)
      {
        *(_DWORD *)(v14 - 16) += v5;
        v15 = *v4;
        if (*v4)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v5;
        v14 = *v4;
      }
      if (v14)
      {
        v17 = *(_DWORD *)(v14 - 4);
        v18 = *(unsigned int *)(v14 - 12);
        if (v17 >= 9 && 6 * (int)v18 < v17)
        {
          v20 = (v18 - 1) | ((v18 - 1) >> 1) | ((((_DWORD)v18 - 1) | ((v18 - 1) >> 1)) >> 2);
          v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
          v22 = (v21 | HIWORD(v21)) + 1;
          if (v22 > 0x400)
          {
            if (v22 > 2 * v18)
              goto LABEL_34;
          }
          else if (3 * v22 > 4 * v18)
          {
LABEL_31:
            v23 = (double)v18;
            v24 = (double)v22;
            v25 = 0.604166667;
LABEL_35:
            if (v24 * v25 <= v23)
              LODWORD(v22) = 2 * v22;
            if (v22 <= 8)
              v26 = 8;
            else
              v26 = v22;
            return (WebCore::MixedFontGlyphPage *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v4, v26);
          }
          LODWORD(v22) = 2 * v22;
          if (v22 <= 0x400)
            goto LABEL_31;
LABEL_34:
          v23 = (double)v18;
          v24 = (double)v22;
          v25 = 0.416666667;
          goto LABEL_35;
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::specializedChineseLocale(WebCore *this, uint64_t a2, void (*a3)(void *))
{
  WebCore *v3;
  void *v4;

  if ((byte_1ECE83C41 & 1) == 0)
  {
    qword_1ECE83C48 = 0;
    byte_1ECE83C41 = 1;
    goto LABEL_3;
  }
  if (!qword_1ECE83C48)
  {
LABEL_3:
    v3 = (WebCore *)WTF::addLanguageChangeObserver((WTF *)&_MergedGlobals_226, WebCore::fontDescriptionLanguageChanged, a3);
    WebCore::fontDescriptionLanguageChanged(v3, v4);
  }
  return &qword_1ECE83C48;
}

unsigned int *WebCore::add(unsigned int *result, _QWORD *a2)
{
  unsigned int *v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = result;
  v4 = a2[2];
  if (v4)
    v5 = *(_DWORD *)(v4 - 12) == 0;
  else
    v5 = 1;
  *result = ((*result + v5) ^ ((*result + v5) << 16)) + (((*result + v5) ^ ((*result + v5) << 16)) >> 11);
  v6 = a2[2];
  if (!v6)
  {
    v7 = 0;
    LODWORD(v8) = 0;
LABEL_5:
    v9 = v6 + 24 * v8;
    goto LABEL_6;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v9 = v6 + 24 * v8;
  if (!*(_DWORD *)(v6 - 12))
  {
    v7 = v6 + 24 * v8;
    goto LABEL_5;
  }
  v7 = a2[2];
  if ((_DWORD)v8)
  {
    v52 = 24 * v8;
    v7 = a2[2];
    while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
    {
      v7 += 24;
      v52 -= 24;
      if (!v52)
      {
        v7 = v9;
        break;
      }
    }
  }
LABEL_6:
  if (v6)
    v10 = v6 + 24 * *(unsigned int *)(v6 - 4);
  else
    v10 = 0;
  while (v7 != v10)
  {
    result = WTF::add<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, *(_QWORD *)v7, *(unsigned int **)(v7 + 8), *(_DWORD *)(v7 + 20));
    v11 = v7 + 24;
    v7 = v9;
    if (v11 != v9)
    {
      v7 = v11;
      while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
      {
        v7 += 24;
        if (v7 == v9)
        {
          v7 = v9;
          break;
        }
      }
    }
  }
  v12 = a2[3];
  if (v12)
    v13 = *(_DWORD *)(v12 - 12) == 0;
  else
    v13 = 1;
  *v3 = ((*v3 + v13) ^ ((*v3 + v13) << 16)) + (((*v3 + v13) ^ ((*v3 + v13) << 16)) >> 11);
  v14 = a2[3];
  if (!v14)
  {
    v15 = 0;
    LODWORD(v16) = 0;
LABEL_19:
    v17 = v14 + 24 * v16;
    goto LABEL_20;
  }
  v16 = *(unsigned int *)(v14 - 4);
  v17 = v14 + 24 * v16;
  if (!*(_DWORD *)(v14 - 12))
  {
    v15 = v14 + 24 * v16;
    goto LABEL_19;
  }
  v15 = a2[3];
  if ((_DWORD)v16)
  {
    v53 = 24 * v16;
    v15 = a2[3];
    while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
    {
      v15 += 24;
      v53 -= 24;
      if (!v53)
      {
        v15 = v17;
        break;
      }
    }
  }
LABEL_20:
  if (v14)
    v18 = v14 + 24 * *(unsigned int *)(v14 - 4);
  else
    v18 = 0;
  while (v15 != v18)
  {
    result = WTF::add<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, *(_QWORD *)v15, *(unsigned int **)(v15 + 8), *(_DWORD *)(v15 + 20));
    v19 = v15 + 24;
    v15 = v17;
    if (v19 != v17)
    {
      v15 = v19;
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 24;
        if (v15 == v17)
        {
          v15 = v17;
          break;
        }
      }
    }
  }
  v20 = a2[4];
  if (v20)
    v21 = *(_DWORD *)(v20 - 12) == 0;
  else
    v21 = 1;
  *v3 = ((*v3 + v21) ^ ((*v3 + v21) << 16)) + (((*v3 + v21) ^ ((*v3 + v21) << 16)) >> 11);
  v22 = a2[4];
  if (!v22)
  {
    v23 = 0;
    LODWORD(v24) = 0;
LABEL_33:
    v25 = v22 + 24 * v24;
    goto LABEL_34;
  }
  v24 = *(unsigned int *)(v22 - 4);
  v25 = v22 + 24 * v24;
  if (!*(_DWORD *)(v22 - 12))
  {
    v23 = v22 + 24 * v24;
    goto LABEL_33;
  }
  v23 = a2[4];
  if ((_DWORD)v24)
  {
    v54 = 24 * v24;
    v23 = a2[4];
    while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
    {
      v23 += 24;
      v54 -= 24;
      if (!v54)
      {
        v23 = v25;
        break;
      }
    }
  }
LABEL_34:
  if (v22)
    v26 = v22 + 24 * *(unsigned int *)(v22 - 4);
  else
    v26 = 0;
  while (v23 != v26)
  {
    result = WTF::add<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, *(_QWORD *)v23, *(unsigned int **)(v23 + 8), *(_DWORD *)(v23 + 20));
    v27 = v23 + 24;
    v23 = v25;
    if (v27 != v25)
    {
      v23 = v27;
      while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
      {
        v23 += 24;
        if (v23 == v25)
        {
          v23 = v25;
          break;
        }
      }
    }
  }
  v28 = a2[5];
  if (v28)
    v29 = *(_DWORD *)(v28 - 12) == 0;
  else
    v29 = 1;
  *v3 = ((*v3 + v29) ^ ((*v3 + v29) << 16)) + (((*v3 + v29) ^ ((*v3 + v29) << 16)) >> 11);
  v30 = a2[5];
  if (!v30)
  {
    v31 = 0;
    LODWORD(v32) = 0;
LABEL_47:
    v33 = v30 + 24 * v32;
    goto LABEL_48;
  }
  v32 = *(unsigned int *)(v30 - 4);
  v33 = v30 + 24 * v32;
  if (!*(_DWORD *)(v30 - 12))
  {
    v31 = v30 + 24 * v32;
    goto LABEL_47;
  }
  v31 = a2[5];
  if ((_DWORD)v32)
  {
    v55 = 24 * v32;
    v31 = a2[5];
    while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
    {
      v31 += 24;
      v55 -= 24;
      if (!v55)
      {
        v31 = v33;
        break;
      }
    }
  }
LABEL_48:
  if (v30)
    v34 = v30 + 24 * *(unsigned int *)(v30 - 4);
  else
    v34 = 0;
  while (v31 != v34)
  {
    result = WTF::add<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, *(_QWORD *)v31, *(unsigned int **)(v31 + 8), *(_DWORD *)(v31 + 20));
    v35 = v31 + 24;
    v31 = v33;
    if (v35 != v33)
    {
      v31 = v35;
      while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
      {
        v31 += 24;
        if (v31 == v33)
        {
          v31 = v33;
          break;
        }
      }
    }
  }
  v36 = a2[6];
  if (v36)
    v37 = *(_DWORD *)(v36 - 12) == 0;
  else
    v37 = 1;
  *v3 = ((*v3 + v37) ^ ((*v3 + v37) << 16)) + (((*v3 + v37) ^ ((*v3 + v37) << 16)) >> 11);
  v38 = a2[6];
  if (!v38)
  {
    v39 = 0;
    LODWORD(v40) = 0;
LABEL_61:
    v41 = v38 + 24 * v40;
    goto LABEL_62;
  }
  v40 = *(unsigned int *)(v38 - 4);
  v41 = v38 + 24 * v40;
  if (!*(_DWORD *)(v38 - 12))
  {
    v39 = v38 + 24 * v40;
    goto LABEL_61;
  }
  v39 = a2[6];
  if ((_DWORD)v40)
  {
    v56 = 24 * v40;
    v39 = a2[6];
    while ((unint64_t)(*(_QWORD *)v39 + 1) <= 1)
    {
      v39 += 24;
      v56 -= 24;
      if (!v56)
      {
        v39 = v41;
        break;
      }
    }
  }
LABEL_62:
  if (v38)
    v42 = v38 + 24 * *(unsigned int *)(v38 - 4);
  else
    v42 = 0;
  while (v39 != v42)
  {
    result = WTF::add<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, *(_QWORD *)v39, *(unsigned int **)(v39 + 8), *(_DWORD *)(v39 + 20));
    v43 = v39 + 24;
    v39 = v41;
    if (v43 != v41)
    {
      v39 = v43;
      while ((unint64_t)(*(_QWORD *)v39 + 1) <= 1)
      {
        v39 += 24;
        if (v39 == v41)
        {
          v39 = v41;
          break;
        }
      }
    }
  }
  v44 = a2[7];
  if (v44)
    v45 = *(_DWORD *)(v44 - 12) == 0;
  else
    v45 = 1;
  *v3 = ((*v3 + v45) ^ ((*v3 + v45) << 16)) + (((*v3 + v45) ^ ((*v3 + v45) << 16)) >> 11);
  v46 = a2[7];
  if (!v46)
  {
    v47 = 0;
    LODWORD(v48) = 0;
LABEL_75:
    v49 = v46 + 24 * v48;
    goto LABEL_76;
  }
  v48 = *(unsigned int *)(v46 - 4);
  v49 = v46 + 24 * v48;
  if (!*(_DWORD *)(v46 - 12))
  {
    v47 = v46 + 24 * v48;
    goto LABEL_75;
  }
  v47 = v46;
  if ((_DWORD)v48)
  {
    v57 = 24 * v48;
    v47 = v46;
    while ((unint64_t)(*(_QWORD *)v47 + 1) <= 1)
    {
      v47 += 24;
      v57 -= 24;
      if (!v57)
      {
        v47 = v49;
        break;
      }
    }
  }
LABEL_76:
  if (v46)
    v50 = v46 + 24 * *(unsigned int *)(v46 - 4);
  else
    v50 = 0;
  while (v47 != v50)
  {
    result = WTF::add<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, *(_QWORD *)v47, *(unsigned int **)(v47 + 8), *(_DWORD *)(v47 + 20));
    v51 = v47 + 24;
    v47 = v49;
    if (v51 != v49)
    {
      v47 = v51;
      while ((unint64_t)(*(_QWORD *)v47 + 1) <= 1)
      {
        v47 += 24;
        if (v47 == v49)
        {
          v47 = v49;
          break;
        }
      }
    }
  }
  return result;
}

WTF *WebCore::FontFeatureValues::updateOrInsert(WTF *this, const WebCore::FontFeatureValues *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl **v34;
  WTF::StringImpl **v35;
  WTF::StringImpl **v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl **v40;
  uint64_t *v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];
  uint64_t v50;
  uint64_t v51;

  if (this == a2)
    return this;
  v50 = v2;
  v51 = v3;
  v5 = (uint64_t *)this;
  v6 = *((_QWORD *)a2 + 2);
  if (!v6)
  {
    v7 = 0;
    LODWORD(v8) = 0;
LABEL_4:
    v9 = (WTF::StringImpl **)(v6 + 24 * v8);
    goto LABEL_5;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v9 = (WTF::StringImpl **)(v6 + 24 * v8);
  if (!*(_DWORD *)(v6 - 12))
  {
    v7 = (WTF::StringImpl **)(v6 + 24 * v8);
    goto LABEL_4;
  }
  v7 = (WTF::StringImpl **)*((_QWORD *)a2 + 2);
  if ((_DWORD)v8)
  {
    v43 = 24 * v8;
    v7 = (WTF::StringImpl **)*((_QWORD *)a2 + 2);
    while ((unint64_t)*v7 + 1 <= 1)
    {
      v7 += 3;
      v43 -= 24;
      if (!v43)
      {
        v7 = v9;
        break;
      }
    }
  }
LABEL_5:
  if (v6)
    v10 = (WTF::StringImpl **)(v6 + 24 * *(unsigned int *)(v6 - 4));
  else
    v10 = 0;
  while (v7 != v10)
  {
    this = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v49, v5 + 2, v7, (WTF *)(v7 + 1));
    v11 = v7 + 3;
    v7 = v9;
    if (v11 != v9)
    {
      v7 = v11;
      while ((unint64_t)*v7 + 1 <= 1)
      {
        v7 += 3;
        if (v7 == v9)
        {
          v7 = v9;
          break;
        }
      }
    }
  }
  v12 = *((_QWORD *)a2 + 3);
  if (!v12)
  {
    v13 = 0;
    LODWORD(v14) = 0;
LABEL_16:
    v15 = (WTF::StringImpl **)(v12 + 24 * v14);
    goto LABEL_17;
  }
  v14 = *(unsigned int *)(v12 - 4);
  v15 = (WTF::StringImpl **)(v12 + 24 * v14);
  if (!*(_DWORD *)(v12 - 12))
  {
    v13 = (WTF::StringImpl **)(v12 + 24 * v14);
    goto LABEL_16;
  }
  v13 = (WTF::StringImpl **)*((_QWORD *)a2 + 3);
  if ((_DWORD)v14)
  {
    v44 = 24 * v14;
    v13 = (WTF::StringImpl **)*((_QWORD *)a2 + 3);
    while ((unint64_t)*v13 + 1 <= 1)
    {
      v13 += 3;
      v44 -= 24;
      if (!v44)
      {
        v13 = v15;
        break;
      }
    }
  }
LABEL_17:
  if (v12)
    v16 = (WTF::StringImpl **)(v12 + 24 * *(unsigned int *)(v12 - 4));
  else
    v16 = 0;
  while (v13 != v16)
  {
    this = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v49, v5 + 3, v13, (WTF *)(v13 + 1));
    v17 = v13 + 3;
    v13 = v15;
    if (v17 != v15)
    {
      v13 = v17;
      while ((unint64_t)*v13 + 1 <= 1)
      {
        v13 += 3;
        if (v13 == v15)
        {
          v13 = v15;
          break;
        }
      }
    }
  }
  v18 = *((_QWORD *)a2 + 4);
  if (!v18)
  {
    v19 = 0;
    LODWORD(v20) = 0;
LABEL_28:
    v21 = (WTF::StringImpl **)(v18 + 24 * v20);
    goto LABEL_29;
  }
  v20 = *(unsigned int *)(v18 - 4);
  v21 = (WTF::StringImpl **)(v18 + 24 * v20);
  if (!*(_DWORD *)(v18 - 12))
  {
    v19 = (WTF::StringImpl **)(v18 + 24 * v20);
    goto LABEL_28;
  }
  v19 = (WTF::StringImpl **)*((_QWORD *)a2 + 4);
  if ((_DWORD)v20)
  {
    v45 = 24 * v20;
    v19 = (WTF::StringImpl **)*((_QWORD *)a2 + 4);
    while ((unint64_t)*v19 + 1 <= 1)
    {
      v19 += 3;
      v45 -= 24;
      if (!v45)
      {
        v19 = v21;
        break;
      }
    }
  }
LABEL_29:
  if (v18)
    v22 = (WTF::StringImpl **)(v18 + 24 * *(unsigned int *)(v18 - 4));
  else
    v22 = 0;
  while (v19 != v22)
  {
    this = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v49, v5 + 4, v19, (WTF *)(v19 + 1));
    v23 = v19 + 3;
    v19 = v21;
    if (v23 != v21)
    {
      v19 = v23;
      while ((unint64_t)*v19 + 1 <= 1)
      {
        v19 += 3;
        if (v19 == v21)
        {
          v19 = v21;
          break;
        }
      }
    }
  }
  v24 = *((_QWORD *)a2 + 5);
  if (!v24)
  {
    v25 = 0;
    LODWORD(v26) = 0;
LABEL_40:
    v27 = (WTF::StringImpl **)(v24 + 24 * v26);
    goto LABEL_41;
  }
  v26 = *(unsigned int *)(v24 - 4);
  v27 = (WTF::StringImpl **)(v24 + 24 * v26);
  if (!*(_DWORD *)(v24 - 12))
  {
    v25 = (WTF::StringImpl **)(v24 + 24 * v26);
    goto LABEL_40;
  }
  v25 = (WTF::StringImpl **)*((_QWORD *)a2 + 5);
  if ((_DWORD)v26)
  {
    v46 = 24 * v26;
    v25 = (WTF::StringImpl **)*((_QWORD *)a2 + 5);
    while ((unint64_t)*v25 + 1 <= 1)
    {
      v25 += 3;
      v46 -= 24;
      if (!v46)
      {
        v25 = v27;
        break;
      }
    }
  }
LABEL_41:
  if (v24)
    v28 = (WTF::StringImpl **)(v24 + 24 * *(unsigned int *)(v24 - 4));
  else
    v28 = 0;
  while (v25 != v28)
  {
    this = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v49, v5 + 5, v25, (WTF *)(v25 + 1));
    v29 = v25 + 3;
    v25 = v27;
    if (v29 != v27)
    {
      v25 = v29;
      while ((unint64_t)*v25 + 1 <= 1)
      {
        v25 += 3;
        if (v25 == v27)
        {
          v25 = v27;
          break;
        }
      }
    }
  }
  v30 = *((_QWORD *)a2 + 6);
  if (!v30)
  {
    v31 = 0;
    LODWORD(v32) = 0;
LABEL_52:
    v33 = (WTF::StringImpl **)(v30 + 24 * v32);
    goto LABEL_53;
  }
  v32 = *(unsigned int *)(v30 - 4);
  v33 = (WTF::StringImpl **)(v30 + 24 * v32);
  if (!*(_DWORD *)(v30 - 12))
  {
    v31 = (WTF::StringImpl **)(v30 + 24 * v32);
    goto LABEL_52;
  }
  v31 = (WTF::StringImpl **)*((_QWORD *)a2 + 6);
  if ((_DWORD)v32)
  {
    v47 = 24 * v32;
    v31 = (WTF::StringImpl **)*((_QWORD *)a2 + 6);
    while ((unint64_t)*v31 + 1 <= 1)
    {
      v31 += 3;
      v47 -= 24;
      if (!v47)
      {
        v31 = v33;
        break;
      }
    }
  }
LABEL_53:
  if (v30)
    v34 = (WTF::StringImpl **)(v30 + 24 * *(unsigned int *)(v30 - 4));
  else
    v34 = 0;
  while (v31 != v34)
  {
    this = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v49, v5 + 6, v31, (WTF *)(v31 + 1));
    v35 = v31 + 3;
    v31 = v33;
    if (v35 != v33)
    {
      v31 = v35;
      while ((unint64_t)*v31 + 1 <= 1)
      {
        v31 += 3;
        if (v31 == v33)
        {
          v31 = v33;
          break;
        }
      }
    }
  }
  v36 = (WTF::StringImpl **)*((_QWORD *)a2 + 7);
  if (v36)
  {
    v38 = *((unsigned int *)v36 - 1);
    v39 = &v36[3 * v38];
    if (*((_DWORD *)v36 - 3))
    {
      v37 = (WTF::StringImpl **)*((_QWORD *)a2 + 7);
      if ((_DWORD)v38)
      {
        v48 = 24 * v38;
        v37 = v36;
        while ((unint64_t)*v37 + 1 <= 1)
        {
          v37 += 3;
          v48 -= 24;
          if (!v48)
          {
            v37 = v39;
            goto LABEL_65;
          }
        }
      }
      goto LABEL_65;
    }
    v37 = &v36[3 * v38];
  }
  else
  {
    v37 = 0;
    LODWORD(v38) = 0;
  }
  v39 = &v36[3 * v38];
LABEL_65:
  if (v36)
    v40 = &v36[3 * *((unsigned int *)v36 - 1)];
  else
    v40 = 0;
  if (v40 != v37)
  {
    v41 = v5 + 7;
    do
    {
      this = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v49, v41, v37, (WTF *)(v37 + 1));
      v42 = v37 + 3;
      v37 = v39;
      if (v42 != v39)
      {
        v37 = v42;
        while ((unint64_t)*v37 + 1 <= 1)
        {
          v37 += 3;
          if (v37 == v39)
          {
            v37 = v39;
            break;
          }
        }
      }
    }
    while (v37 != v40);
  }
  return this;
}

WTF *WebCore::FontFeatureValues::updateOrInsertForType(WTF *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;
  uint64_t v31;

  v30 = v3;
  v31 = v4;
  switch(a2)
  {
    case 0:
      v5 = *(_DWORD *)(a3 + 12);
      if (v5)
      {
        v6 = (uint64_t *)((char *)result + 16);
        v7 = *(WTF::StringImpl ***)a3;
        v8 = *(_QWORD *)a3 + 24 * v5;
        do
        {
          result = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v29, v6, v7, (WTF *)(v7 + 1));
          v7 += 3;
        }
        while (v7 != (WTF::StringImpl **)v8);
      }
      break;
    case 1:
      v9 = *(_DWORD *)(a3 + 12);
      if (v9)
      {
        v10 = (uint64_t *)((char *)result + 24);
        v11 = *(WTF::StringImpl ***)a3;
        v12 = *(_QWORD *)a3 + 24 * v9;
        do
        {
          result = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v29, v10, v11, (WTF *)(v11 + 1));
          v11 += 3;
        }
        while (v11 != (WTF::StringImpl **)v12);
      }
      break;
    case 2:
      v13 = *(_DWORD *)(a3 + 12);
      if (v13)
      {
        v14 = (uint64_t *)((char *)result + 32);
        v15 = *(WTF::StringImpl ***)a3;
        v16 = *(_QWORD *)a3 + 24 * v13;
        do
        {
          result = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v29, v14, v15, (WTF *)(v15 + 1));
          v15 += 3;
        }
        while (v15 != (WTF::StringImpl **)v16);
      }
      break;
    case 3:
      v17 = *(_DWORD *)(a3 + 12);
      if (v17)
      {
        v18 = (uint64_t *)((char *)result + 40);
        v19 = *(WTF::StringImpl ***)a3;
        v20 = *(_QWORD *)a3 + 24 * v17;
        do
        {
          result = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v29, v18, v19, (WTF *)(v19 + 1));
          v19 += 3;
        }
        while (v19 != (WTF::StringImpl **)v20);
      }
      break;
    case 4:
      v21 = *(_DWORD *)(a3 + 12);
      if (v21)
      {
        v22 = (uint64_t *)((char *)result + 48);
        v23 = *(WTF::StringImpl ***)a3;
        v24 = *(_QWORD *)a3 + 24 * v21;
        do
        {
          result = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v29, v22, v23, (WTF *)(v23 + 1));
          v23 += 3;
        }
        while (v23 != (WTF::StringImpl **)v24);
      }
      break;
    case 5:
      v25 = *(_DWORD *)(a3 + 12);
      if (v25)
      {
        v26 = (uint64_t *)((char *)result + 56);
        v27 = *(WTF::StringImpl ***)a3;
        v28 = *(_QWORD *)a3 + 24 * v25;
        do
        {
          result = WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v29, v26, v27, (WTF *)(v27 + 1));
          v27 += 3;
        }
        while (v27 != (WTF::StringImpl **)v28);
      }
      break;
    default:
      return result;
  }
  return result;
}

WebCore::FontPlatformData *WebCore::FontPlatformData::FontPlatformData(WebCore::FontPlatformData *this, const WebCore::FontPlatformData *a2)
{
  const void *v4;
  int v5;
  _DWORD *v6;
  int v7;

  v4 = *(const void **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  v5 = *((_DWORD *)a2 + 2);
  *(_DWORD *)((char *)this + 11) = *(_DWORD *)((char *)a2 + 11);
  *((_DWORD *)this + 2) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6)
    ++*v6;
  *((_QWORD *)this + 2) = v6;
  v7 = *((_DWORD *)a2 + 6);
  *(_DWORD *)((char *)this + 27) = *(_DWORD *)((char *)a2 + 27);
  *((_DWORD *)this + 6) = v7;
  return this;
}

{
  const void *v4;
  int v5;
  _DWORD *v6;
  int v7;

  v4 = *(const void **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  v5 = *((_DWORD *)a2 + 2);
  *(_DWORD *)((char *)this + 11) = *(_DWORD *)((char *)a2 + 11);
  *((_DWORD *)this + 2) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6)
    ++*v6;
  *((_QWORD *)this + 2) = v6;
  v7 = *((_DWORD *)a2 + 6);
  *(_DWORD *)((char *)this + 27) = *(_DWORD *)((char *)a2 + 27);
  *((_DWORD *)this + 6) = v7;
  return this;
}

uint64_t WebCore::FontPlatformData::creationData(WebCore::FontPlatformData *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return v1 + 16;
  else
    return 0;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::FontFamilyName>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      ++v3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>::deallocateTable(WTF ***a1, void *a2)
{
  uint64_t v3;
  WTF ***v4;
  WTF **v5;
  WTF *v6;
  void *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF **)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::Font::~Font(v5);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::realizeNextFallback(WebCore::FontCascadeDescription const&,unsigned int &,WebCore::FontSelector *)::$_0,WebCore::realizeNextFallback(WebCore::FontCascadeDescription const&,unsigned int &,WebCore::FontSelector *)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WebCore::FontFamilySpecificationCoreText> const&>@<X0>(WTF *result@<X0>, WebCore::FontPlatformData **a2@<X1>, uint64_t a3@<X8>)
{
  WTF ***v5;
  WTF *v6;
  void *v7;
  WTF::Thread *v8;
  WTF::StringImpl *v9;
  WTF ***v10;
  double v11;
  const WebCore::FontPlatformData *v12;
  void *v13;
  WebCore::Font *v14;
  WTF *v15;
  void *v16;
  __int128 v17;
  WTF *v18[2];
  WebCore::Font *v19;
  WebCore::Font *v20;

  if (!*a2)
    goto LABEL_16;
  v5 = *(WTF ****)result;
  v6 = ***(WTF ****)result;
  if (v6)
  {
    result = (WTF *)(*(uint64_t (**)(WTF *, WTF **, WebCore::FontPlatformData **))(*(_QWORD *)v6 + 16))(v6, v5[1], a2);
    if (*(_DWORD *)(a3 + 12))
      return result;
    v6 = *(WTF **)a3;
    if (a3 + 16 != *(_QWORD *)a3 && v6)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      v6 = (WTF *)WTF::fastFree(v6, v7);
    }
  }
  v10 = v5 + 1;
  v9 = (WTF::StringImpl *)v5[1];
  v8 = (WTF::Thread *)v10[1];
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  if ((*((_QWORD *)v8 + 4) & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((*((_QWORD *)v8 + 4) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)v8 + 3) = 0;
    WTF::MonotonicTime::now(v6);
    WebCore::TimerBase::setNextFireTime((uint64_t)v8, v11 + 0.0);
  }
  v12 = (const WebCore::FontPlatformData *)WebCore::FontCache::cachedFontPlatformData(v8, v9, a2, &v17, 0);
  if (v12)
  {
    WebCore::FontCache::fontForPlatformData(v8, v12, &v20);
    v14 = v20;
  }
  else
  {
    v14 = 0;
  }
  result = v18[1];
  v18[1] = 0;
  v19 = v14;
  if (result)
    result = (WTF *)WTF::RefCounted<WebCore::FontCreationContextRareData>::deref((uint64_t)result, v13);
  if (v14)
  {
    WebCore::FontRanges::FontRanges(a3, (uint64_t *)&v19);
    result = v19;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        WebCore::Font::~Font((WTF **)v19);
        return (WTF *)WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
  }
  else
  {
LABEL_16:
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 1;
  }
  return result;
}

WTF **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::realizeNextFallback(WebCore::FontCascadeDescription const&,unsigned int &,WebCore::FontSelector *)::$_0,WebCore::realizeNextFallback(WebCore::FontCascadeDescription const&,unsigned int &,WebCore::FontSelector *)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WebCore::FontFamilySpecificationCoreText> const&>@<X0>(uint64_t a1@<X0>, WebCore::FontFamilySpecificationCoreText *a2@<X1>, uint64_t a3@<X8>)
{
  WTF **result;
  void *v5;
  _QWORD *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  _BYTE v13[24];

  result = WebCore::FontFamilySpecificationCoreText::fontRanges(a2, *(const WebCore::FontDescription **)(*(_QWORD *)a1 + 24), (uint64_t)&v11);
  v6 = (_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 1;
  v7 = v11;
  if (v11 == (WTF *)v13)
  {
    if (HIDWORD(v12))
    {
      v8 = (WTF *)((char *)v11 + 16 * HIDWORD(v12));
      do
      {
        *v6 = *(_QWORD *)v7;
        v9 = *((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = 0;
        v6[1] = v9;
        result = (WTF **)*((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
            result = (WTF **)(*((uint64_t (**)(WTF **))*result + 1))(result);
          else
            --*((_DWORD *)result + 2);
        }
        v7 = (WTF *)((char *)v7 + 16);
        v6 += 2;
      }
      while (v7 != v8);
      v7 = v11;
    }
    v10 = HIDWORD(v12);
    HIDWORD(v12) = 0;
    *(_DWORD *)(a3 + 12) = v10;
    *(_BYTE *)(a3 + 32) = 1;
    if (v13 != (_BYTE *)v7)
    {
      if (v7)
      {
        v11 = 0;
        LODWORD(v12) = 0;
        return (WTF **)WTF::fastFree(v7, v5);
      }
    }
  }
  else
  {
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_BYTE *)(a3 + 32) = 1;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringEN7WebCore31FontFamilySpecificationCoreTextEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringEN7WebCore31FontFamilySpecificationCoreTextEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

WTF::StringImpl *WebCore::fontDescriptionLanguageChanged(WebCore *this, void *a2)
{
  uint64_t v2;
  int v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;

  v3 = 1;
  result = (WTF::StringImpl *)WTF::userPreferredLanguages();
  v6 = v13;
  v7 = v14;
  if (!v14)
    goto LABEL_25;
  v8 = 0;
  while (1)
  {
    v2 = *(_QWORD *)((char *)v13 + v8);
    if (!v2 || *(_DWORD *)(v2 + 4) < 3u)
      goto LABEL_10;
    v9 = *(_DWORD *)(v2 + 16);
    v10 = *(_QWORD *)(v2 + 8);
    if ((v9 & 4) != 0)
    {
      if ((*(_BYTE *)v10 & 0xDF) != 0x5A || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x48)
        goto LABEL_10;
      v11 = *(unsigned __int8 *)(v10 + 2);
    }
    else
    {
      if ((*(_WORD *)v10 & 0xFFDF) != 0x5A || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x48)
        goto LABEL_10;
      v11 = *(unsigned __int16 *)(v10 + 4);
    }
    if ((v11 & 0xFFFFFFDF) == 0xD)
      break;
LABEL_10:
    v8 += 8;
    if (8 * v14 == v8)
    {
      v3 = 1;
      goto LABEL_18;
    }
  }
  if ((v9 & 0x10) != 0)
  {
    *(_DWORD *)v2 += 2;
  }
  else
  {
    result = (WTF::StringImpl *)WTF::AtomStringImpl::addSlowCase(*(WTF::AtomStringImpl **)((char *)v13 + v8), v5);
    v2 = v15;
    v7 = v14;
    v6 = v13;
  }
  v3 = 0;
  if (!v7)
    goto LABEL_25;
LABEL_18:
  v12 = 8 * v7;
  do
  {
    result = *(WTF::StringImpl **)v6;
    *(_QWORD *)v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    v6 = (WTF *)((char *)v6 + 8);
    v12 -= 8;
  }
  while (v12);
  v6 = v13;
LABEL_25:
  if (v6)
  {
    v13 = 0;
    result = (WTF::StringImpl *)WTF::fastFree(v6, v5);
    if (v3)
    {
LABEL_27:
      result = (WTF::StringImpl *)WTF::AtomStringImpl::add();
      v2 = (uint64_t)v13;
    }
  }
  else if (v3)
  {
    goto LABEL_27;
  }
  if ((byte_1ECE83C41 & 1) != 0)
  {
    result = (WTF::StringImpl *)qword_1ECE83C48;
    qword_1ECE83C48 = v2;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    byte_1ECE83C41 = 1;
    qword_1ECE83C48 = v2;
  }
  return result;
}

unsigned int *WTF::add<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *result, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    v5 = v4 & 0xFFFFFFFE;
    if ((v4 & 0xFFFFFFFE) != 0)
    {
      v6 = 0;
      v7 = *result;
      do
      {
        v8 = *(unsigned int *)(a2 + 4);
        if (v6 >= v8)
        {
          v10 = 0;
        }
        else
        {
          v9 = *(_QWORD *)(a2 + 8);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            v10 = *(unsigned __int8 *)(v9 + v6);
          else
            v10 = *(unsigned __int16 *)(v9 + 2 * v6);
        }
        v11 = v6 + 1;
        if (v6 + 1 >= v8)
        {
          v13 = 0;
        }
        else
        {
          v12 = *(_QWORD *)(a2 + 8);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            v13 = *(unsigned __int8 *)(v12 + v6 + 1);
          else
            v13 = *(unsigned __int16 *)(v12 + 2 * v6 + 2);
        }
        v14 = (v10 << 11) ^ ((v7 + v13) << 16) ^ (v7 + v13);
        v7 = v14 + (v14 >> 11);
        *result = v7;
        v6 = v11 + 1;
      }
      while (v11 + 1 < v5);
    }
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(a2 + 4) <= v5)
      {
        v16 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(a2 + 8);
        if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          v16 = *(unsigned __int8 *)(v15 + v5);
        else
          v16 = *(unsigned __int16 *)(v15 + 2 * v5);
      }
      *result = ((*result + v16) ^ ((*result + v16) << 16)) + (((*result + v16) ^ ((*result + v16) << 16)) >> 11);
    }
  }
  if (a4)
  {
    v17 = *result;
    v18 = 4 * a4;
    do
    {
      v19 = *a3++;
      v17 = ((v19 >> 5) & 0x7FFF800 ^ ((v17 + (unsigned __int16)v19) << 16) ^ (v17 + (unsigned __int16)v19))
          + (((v19 >> 5) & 0x7FFF800 ^ ((v17 + (unsigned __int16)v19) << 16) ^ (v17 + (unsigned __int16)v19)) >> 11);
      *result = v17;
      v18 -= 4;
    }
    while (v18);
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF *a4)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF *result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl **)(v7 + 24 * (v10 & v8));
    v15 = *v14;
    if (*v14 != (WTF::StringImpl *)-1)
      break;
    v11 = (WTF::StringImpl **)(v7 + 24 * v13);
LABEL_13:
    v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = v11;
    }
    v16 = *a3;
    if (*a3)
      *(_DWORD *)v16 += 2;
    *v14 = v16;
    result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v14 + 1), a4);
    v18 = *a2;
    if (*a2)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
        goto LABEL_25;
    }
    else if (3 * v23 <= 4 * v22)
    {
      if (!(_DWORD)v23)
      {
        v24 = 8;
LABEL_31:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v24, v14);
        v14 = (WTF::StringImpl **)result;
        v20 = *a2;
        if (*a2)
          LODWORD(v23) = *(_DWORD *)(v20 - 4);
        else
          LODWORD(v23) = 0;
        goto LABEL_33;
      }
LABEL_25:
      v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
      goto LABEL_31;
    }
LABEL_33:
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v20 + 24 * v23;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v15, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 4);
  else
    v26 = 0;
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v25 + 24 * v26;
  *(_BYTE *)(a1 + 16) = 0;
  return WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v7 + 24 * v13 + 8), a4);
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  int *v3;
  uint64_t v4;
  int *v5;
  int *v6;
  uint64_t v7;
  int *v8;
  WTF::StringImpl *v9;
  int *v10;
  _BYTE v11[24];
  WTF::StringImpl *v12;
  int v13;

  *a2 = 0;
  v3 = *(int **)result;
  if (!*(_QWORD *)result)
  {
    v6 = 0;
    v4 = 0;
LABEL_25:
    v5 = &v3[4 * v4];
    goto LABEL_8;
  }
  v4 = *(v3 - 1);
  v5 = &v3[4 * v4];
  if (!*(v3 - 3))
  {
    v6 = &v3[4 * v4];
    goto LABEL_25;
  }
  v6 = *(int **)result;
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = *(int **)result;
    while ((*v6 + 3) <= 1)
    {
      v6 += 4;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_8:
  if (v3)
    v8 = &v3[4 * *(v3 - 1)];
  else
    v8 = 0;
  while (v6 != v8)
  {
    v13 = *v6;
    WTF::String::isolatedCopy();
    WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>(a2, (WTF::StringImpl *)&v13, (uint64_t *)&v12, (uint64_t)v11);
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    v10 = v6 + 4;
    v6 = v5;
    if (v10 != v5)
    {
      v6 = v10;
      while ((*v6 + 3) <= 1)
      {
        v6 += 4;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::expand(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) ^ ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(a1 + 16 * v7) != -2);
  v8 = a1 + 16 * v7;
  v9 = *(WTF::StringImpl **)(v8 + 8);
  *(_QWORD *)(v8 + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_DWORD *)v8 = *(_DWORD *)a2;
  v10 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(v8 + 8) = v10;
  return v8;
}

uint64_t WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::find(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_3:
      result += 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6 != -2)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_3;
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::UScriptCodeHashTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_3:
      result += 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6 != -2)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_3;
      }
      return 0;
    }
  }
  return result;
}

float *WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::makeIterator(uint64_t a1, float *a2)
{
  float *v2;
  unsigned int v3;
  float *v4;

  v2 = a2;
  if (a1)
    v3 = *(_DWORD *)(a1 - 4);
  else
    v3 = 0;
  v4 = (float *)(a1 + 96 * v3);
  if (v4 != a2)
  {
    while (WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::isEmptyOrDeletedBucket(v2))
    {
      v2 += 24;
      if (v2 == v4)
        return v4;
    }
  }
  return v2;
}

BOOL WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::isEmptyOrDeletedBucket(float *a1)
{
  BOOL v1;
  BOOL v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;

  if (!*(_BYTE *)a1
    && a1[1] == 0.0
    && (float)((float)*((__int16 *)a1 + 4) * 0.25) == 0.0
    && ((float)((float)*((__int16 *)a1 + 5) * 0.25) == 0.0 ? (v1 = *((_BYTE *)a1 + 14) == 0) : (v1 = 0),
        v1 ? (v2 = *((_QWORD *)a1 + 2) == 0) : (v2 = 0),
        v2 ? (v3 = *((_QWORD *)a1 + 3) == 0) : (v3 = 0),
        v3 ? (v4 = *((_QWORD *)a1 + 4) == 0) : (v4 = 0),
        v4 ? (v5 = *((_DWORD *)a1 + 13) == 0) : (v5 = 0),
        v5 ? (v6 = *((_DWORD *)a1 + 20) == 0) : (v6 = 0),
        v6 ? (v7 = *((_DWORD *)a1 + 21) == 0) : (v7 = 0),
        v7))
  {
    return 1;
  }
  else
  {
    return *(_BYTE *)a1 != 0;
  }
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WebCore::FontCascadeCacheKeyHashTraits,WebCore::FontCascadeCacheKey>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v8 = *(WTF::StringImpl ***)(a1 + 40);
    v9 = 8 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v4 = *(WTF **)(a1 + 40);
  if ((WTF *)(a1 + 56) != v4 && v4 != 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v6, a2);
  result = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)a1 = 1;
  *(_BYTE *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t WTF::computeHash<WebCore::FontCascadeCacheKey>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v28;
  unsigned int v29;
  unsigned __int16 v30;
  char v31;

  v29 = -1640531527;
  v30 = 0;
  v31 = 0;
  WTF::add<float,WebCore::FontSelectionRequest,std::array<unsigned int,2ul>,WTF::AtomString>(&v29, (_DWORD *)(a1 + 4), (unsigned __int16 *)(a1 + 8), (_DWORD *)(a1 + 16), (_QWORD *)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WTF::add<WebCore::FontTaggedSettings<int>,WebCore::FontTaggedSettings<float>,WebCore::FontVariantAlternates,WebCore::FontPalette,WebCore::FontSizeAdjust>(&v29, v2 + 8, v2 + 24, v2 + 40, (unsigned __int8 *)(v2 + 112), (unsigned __int8 *)(v2 + 128));
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = &v4[v3];
    v6 = MEMORY[0x1E0CBF868];
    do
    {
      if (*v4)
      {
        v7 = WTF::StringImpl::startsWith();
        v8 = *v4;
        if (v7)
        {
          if (v8)
            v20 = *(_DWORD *)(v8 + 16) >> 8;
          else
            v20 = 0;
        }
        else
        {
          v9 = *(_QWORD *)(v8 + 8);
          v10 = *(unsigned int *)(v8 + 4);
          if ((*(_BYTE *)(v8 + 16) & 4) != 0)
          {
            v11 = -1640531527;
            if (v10 >= 2)
            {
              v12 = 0;
              do
              {
                v13 = v11 + *(unsigned __int8 *)(v6 + *(unsigned __int8 *)(v9 + v12));
                v14 = (v13 << 16) ^ (*(unsigned __int8 *)(v6 + *(unsigned __int8 *)(v9 + v12 + 1)) << 11) ^ v13;
                v11 = v14 + (v14 >> 11);
                v15 = v12 + 3;
                v12 += 2;
              }
              while (v15 < v10);
            }
            if ((v10 & 1) != 0)
            {
              v16 = *(unsigned __int8 *)(v6 + *(unsigned __int8 *)(v10 + v9 - 1));
              v11 = ((v11 + v16) ^ ((v11 + v16) << 11)) + (((v11 + v16) ^ ((v11 + v16) << 11)) >> 17);
            }
            v17 = (v11 ^ (8 * v11)) + ((v11 ^ (8 * v11)) >> 5);
            v18 = (v17 ^ (4 * v17)) + ((v17 ^ (4 * v17)) >> 15);
            v19 = (v18 ^ (v18 << 10)) & 0xFFFFFF;
            if (v19)
              v20 = v19;
            else
              v20 = 0x800000;
          }
          else
          {
            v20 = WTF::ASCIICaseInsensitiveHash::hash<char16_t>(v9, v10);
          }
        }
        v29 = ((v20 >> 5) & 0x7FFF800 ^ ((v29 + (unsigned __int16)v20) << 16) ^ (v29 + (unsigned __int16)v20))
            + (((v20 >> 5) & 0x7FFF800 ^ ((v29 + (unsigned __int16)v20) << 16) ^ (v29 + (unsigned __int16)v20)) >> 11);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v21 = (*(_DWORD *)(a1 + 80) >> 5) & 0x7FFF800 ^ ((v29 + (unsigned __int16)*(_DWORD *)(a1 + 80)) << 16) ^ (v29 + (unsigned __int16)*(_DWORD *)(a1 + 80));
  v22 = (*(_DWORD *)(a1 + 84) >> 5) & 0x7FFF800 ^ ((v21 + (unsigned __int16)*(_DWORD *)(a1 + 84) + (v21 >> 11)) << 16) ^ (v21 + (unsigned __int16)*(_DWORD *)(a1 + 84) + (v21 >> 11));
  v23 = v22 + (v22 >> 11);
  if (v31)
  {
    v28 = (v23 + v30) ^ ((v23 + v30) << 11);
    v23 = v28 + (v28 >> 17);
  }
  v24 = (v23 ^ (8 * v23)) + ((v23 ^ (8 * v23)) >> 5);
  v25 = (v24 ^ (4 * v24)) + ((v24 ^ (4 * v24)) >> 15);
  v26 = v25 ^ (v25 << 10);
  if (v26)
    return v26;
  else
    return 0x800000;
}

uint64_t WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::random(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  uint64_t result;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v1 = *a1;
  if (!*a1)
    return 0;
  if (!*(_DWORD *)(v1 - 12))
    return v1 + 96 * *(unsigned int *)(v1 - 4);
  do
  {
    while (1)
    {
      v3 = WTF::weakRandomNumber<unsigned int>();
      v4 = *a1 ? *(_DWORD *)(*a1 - 8) : 0;
      result = v1 + 96 * (v4 & v3);
      if (!*(_BYTE *)result && *(float *)(result + 4) == 0.0)
        break;
      v1 = *a1;
      if (!*(_BYTE *)result)
        return result;
    }
    if ((float)((float)*(__int16 *)(result + 8) * 0.25) != 0.0)
      break;
    v6 = (float)((float)*(__int16 *)(result + 10) * 0.25) == 0.0 && *(_BYTE *)(result + 14) == 0;
    v7 = v6 && *(_QWORD *)(result + 16) == 0;
    v8 = v7 && *(_QWORD *)(result + 24) == 0;
    v9 = v8 && *(_QWORD *)(result + 32) == 0;
    v10 = v9 && *(_DWORD *)(result + 52) == 0;
    v11 = v10 && *(_DWORD *)(result + 80) == 0;
    v12 = v11 && *(_DWORD *)(result + 84) == 0;
    v1 = *a1;
  }
  while (v12);
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  WebCore::Font *v11;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = (uint64_t *)v4;
    do
    {
      if (*v10 != -1)
      {
        if (*v10)
        {
          WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::reinsert(*a1, v10);
          v11 = (WebCore::Font *)*v10;
          *v10 = 0;
          if (v11)
            WTF::RefCounted<WebCore::Font>::deref(v11);
        }
        else
        {
          *v10 = 0;
        }
      }
      ++v10;
      --v9;
    }
    while (v9);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WebCore::MixedFontGlyphPage *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  WebCore::MixedFontGlyphPage *result;
  _QWORD *v12;
  WebCore::MixedFontGlyphPage *v13;
  WTF **v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = *(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15);
  v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  v7 = (v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16);
  do
  {
    v8 = v7 & v3;
    v9 = (_DWORD *)(a1 + 24 * (v7 & v3));
    v7 = ++v4 + (v7 & v3);
  }
  while (*v9 != -1);
  v10 = a1 + 24 * v8;
  v13 = *(WebCore::MixedFontGlyphPage **)(v10 + 16);
  v12 = (_QWORD *)(v10 + 16);
  result = v13;
  v14 = (WTF **)(v12 - 1);
  *v12 = 0;
  if (v13)
  {
    WebCore::MixedFontGlyphPage::~MixedFontGlyphPage(result, a2);
    result = (WebCore::MixedFontGlyphPage *)WTF::fastFree(v15, v16);
  }
  v17 = *v14;
  *v14 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      --WebCore::GlyphPage::s_count;
      v20 = (WTF *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          WTF::fastFree(v20, a2);
        else
          --*(_DWORD *)v20;
      }
      result = (WebCore::MixedFontGlyphPage *)WTF::fastFree(v17, a2);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  *v9 = *(_DWORD *)a2;
  v18 = (WTF *)a2[1];
  a2[1] = 0;
  *v14 = v18;
  v19 = a2[2];
  a2[2] = 0;
  *v12 = v19;
  return result;
}

uint64_t WebCore::FontRanges::Range::font(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::FontRanges::FontRanges(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;

  v6 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  v7 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      v11 = &v7[2 * v8];
      do
      {
        *v6 = *v7;
        v12 = v7[1];
        v7[1] = 0;
        v6[1] = v12;
        v13 = (_DWORD *)v7[1];
        v7[1] = 0;
        if (v13)
        {
          if (v13[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          else
            --v13[2];
        }
        v7 += 2;
        v6 += 2;
      }
      while (v7 != v11);
    }
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)a1 = v7;
    v14 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 1;
    *(_DWORD *)(a1 + 8) = v14;
  }
  v9 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v9;
  *(_BYTE *)(a1 + 32) = a3;
  return a1;
}

uint64_t WebCore::FontRanges::FontRanges(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E340B820;
    *(_QWORD *)(v4 + 16) = v3;
    v12 = 0x7FFFFFFF00000000;
    v13 = (_DWORD *)v4;
    v5 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v5 == *(_DWORD *)(a1 + 8))
    {
      v8 = (_QWORD *)WTF::Vector<WebCore::FontRanges::Range,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v5 + 1, (unint64_t)&v12);
      v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
      *v9 = *v8;
      v10 = v8[1];
      v8[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(a1 + 12);
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
    }
    else
    {
      v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
      *v6 = v12;
      v6[1] = v4;
      ++*(_DWORD *)(a1 + 12);
    }
  }
  return a1;
}

uint64_t WebCore::FontRanges::fontForCharacter(uint64_t a1, unsigned int a2)
{
  void *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v6;
  WTF *v7;

  WebCore::FontRanges::glyphDataForCharacter(a2, a1, 1, (uint64_t)&v6);
  v3 = v7;
  if (!v7)
    return 0;
  v4 = *((_QWORD *)v7 + 1);
  v7 = 0;
  if (*(_DWORD *)v3 == 1)
    WTF::fastFree(v3, v2);
  else
    --*(_DWORD *)v3;
  return v4;
}

uint64_t WebCore::FontRanges::fontForFirstRange(WebCore::FontRanges *this)
{
  if (!*((_DWORD *)this + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x196177928);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)this + 8) + 16))(*(_QWORD *)(*(_QWORD *)this + 8), 0);
}

uint64_t WebCore::FourCC::fromString(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t i;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *j;
  uint64_t v15;
  signed __int8 v16;
  int v17;
  signed __int8 v18;

  if ((_DWORD)a2 != 4)
  {
LABEL_16:
    v7 = 0;
    v8 = 0;
    v9 = 0;
    return v7 | v9 | v8;
  }
  v2 = a1 & 7;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((a1 & 7) != 0)
    {
      v2 = 0;
      v3 = 0;
      do
      {
        v2 |= a1[v3];
        v4 = v3 + 1;
        if ((((_BYTE)a1 + 1 + (_BYTE)v3) & 7) == 0)
          break;
        v5 = v3++ == 3;
      }
      while (!v5);
    }
    else
    {
      v4 = 0;
    }
    for (i = (unint64_t)&a1[v4];
          i < ((unint64_t)(a1 + 4) & 0xFFFFFFFFFFFFFFF8);
          i = (unint64_t)&a1[v4])
    {
      v2 |= *(_QWORD *)&a1[v4];
      v4 += 8;
    }
    while (v4 != 4)
      v2 |= a1[v4++];
    if ((v2 & 0x8080808080808080) != 0)
      goto LABEL_16;
  }
  else
  {
    if ((a1 & 7) != 0)
    {
      v2 = 0;
      v11 = 0;
      v12 = (_BYTE)a1 + 2;
      do
      {
        v2 |= *(unsigned __int16 *)&a1[2 * v11];
        v13 = v11 + 1;
        if ((v12 & 7) == 0)
          break;
        v12 += 2;
        v5 = v11++ == 3;
      }
      while (!v5);
    }
    else
    {
      v13 = 0;
    }
    for (j = &a1[2 * v13]; (unint64_t)j < ((unint64_t)(a1 + 8) & 0xFFFFFFFFFFFFFFF8); j += 8)
    {
      v15 = *(_QWORD *)j;
      v2 |= v15;
      v13 += 4;
    }
    while (v13 != 4)
      v2 |= *(unsigned __int16 *)&a1[2 * v13++];
    if ((v2 & 0xFF80FF80FF80FF80) != 0)
      goto LABEL_16;
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    v16 = a1[1];
    v17 = *a1;
    v18 = a1[2];
    LOBYTE(v8) = a1[3];
  }
  else
  {
    v16 = a1[2];
    v17 = *a1;
    v18 = a1[4];
    LOBYTE(v8) = a1[6];
  }
  v9 = (v17 << 24) | (v18 << 8) | (v16 << 16) | (char)v8 & 0xFFFFFF00;
  v8 = v8;
  v7 = 0x100000000;
  return v7 | v9 | v8;
}

void WebCore::GeneratedImage::computeIntrinsicDimensions(WebCore::GeneratedImage *this, WebCore::Length *a2, WebCore::Length *a3, WebCore::FloatSize *a4)
{
  float v7;
  int v8;
  int v9;
  float v10;
  int v11;

  v7 = (*(float (**)(WebCore::GeneratedImage *, _QWORD))(*(_QWORD *)this + 168))(this, 0);
  *(float *)a4 = v7;
  *((_DWORD *)a4 + 1) = v8;
  if (*((_BYTE *)a2 + 4) == 11)
  {
    v10 = v7;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a2);
    v7 = v10;
  }
  *((_WORD *)a2 + 2) = 4;
  *((_BYTE *)a2 + 6) = 1;
  *(float *)a2 = v7;
  v9 = *((_DWORD *)a4 + 1);
  if (*((_BYTE *)a3 + 4) == 11)
  {
    v11 = *((_DWORD *)a4 + 1);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
    v9 = v11;
  }
  *((_WORD *)a3 + 2) = 4;
  *((_BYTE *)a3 + 6) = 1;
  *(_DWORD *)a3 = v9;
  *(_QWORD *)a4 = 0;
}

float WebCore::euclidianDistance(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  return hypotf(*(float *)this - *(float *)a2, *((float *)this + 1) - *((float *)a2 + 1));
}

BOOL WebCore::findIntersection(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, const WebCore::FloatPoint *a4, const WebCore::FloatPoint *a5, WebCore::FloatPoint *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  v7 = *(float *)this;
  v6 = *((float *)this + 1);
  v8 = *(float *)a2 - *(float *)this;
  v9 = *((float *)a2 + 1) - v6;
  v10 = *((float *)a3 + 1);
  v11 = *(float *)a4 - *(float *)a3;
  v12 = *((float *)a4 + 1) - v10;
  v13 = (float)(v8 * v12) - (float)(v9 * v11);
  if (v13 != 0.0)
  {
    v14 = (float)((float)((float)(*(float *)a3 - v7) * v12) - (float)((float)(v10 - v6) * v11)) / v13;
    *(float *)a5 = v7 + (float)(v14 * v8);
    *((float *)a5 + 1) = v6 + (float)(v14 * v9);
  }
  return v13 != 0.0;
}

unint64_t WebCore::unionRect(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v1 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = *(_QWORD *)a1 + 8;
  v6 = 16 * v1;
  do
  {
    v7 = *(_DWORD *)(v5 + 4);
    if (*(int *)v5 >= 1 && v7 >= 1)
    {
      if ((int)v4 < 1 || v4 <= 0)
      {
        v2 = *(_DWORD *)(v5 - 8);
        v3 = *(unsigned int *)(v5 - 4);
        v4 = *(_QWORD *)v5;
      }
      else
      {
        v9 = *(_DWORD *)(v5 - 8);
        v10 = *(_DWORD *)(v5 - 4);
        v11 = v2 + v4;
        if (v9 < (int)v2)
          v2 = *(_DWORD *)(v5 - 8);
        v12 = v3 + HIDWORD(v4);
        if (v10 >= (int)v3)
          v3 = v3;
        else
          v3 = v10;
        v13 = v9 + *(_DWORD *)v5;
        if (v11 > v13)
          v13 = v11;
        v14 = v10 + v7;
        if (v12 > v14)
          v14 = v12;
        v4 = (v13 - v2) | ((unint64_t)(v14 - v3) << 32);
      }
    }
    v5 += 16;
    v6 -= 16;
  }
  while (v6);
  return v2 | (unint64_t)(v3 << 32);
}

unint64_t WebCore::unionRectIgnoringZeroRects(unsigned int *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v1 = a1[3];
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = (_DWORD *)(*(_QWORD *)a1 + 8);
  v6 = 16 * v1;
  do
  {
    if (*(_QWORD *)v5)
    {
      if (v4)
      {
        v7 = *(v5 - 2);
        v8 = *(v5 - 1);
        v9 = v2 + v4;
        if (v7 < (int)v2)
          v2 = *(v5 - 2);
        v10 = v3 + HIDWORD(v4);
        if (v8 >= (int)v3)
          v3 = v3;
        else
          v3 = v8;
        v11 = v7 + *v5;
        if (v9 > v11)
          v11 = v9;
        v12 = v8 + v5[1];
        if (v10 > v12)
          v12 = v10;
        v4 = (v11 - v2) | ((unint64_t)(v12 - v3) << 32);
      }
      else
      {
        v2 = *(v5 - 2);
        v3 = *(v5 - 1);
        v4 = *(_QWORD *)v5;
      }
    }
    v5 += 4;
    v6 -= 16;
  }
  while (v6);
  return v2 | (unint64_t)(v3 << 32);
}

float WebCore::unionRect(unsigned int *a1)
{
  uint64_t v1;
  float *v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v1 = a1[3];
  if (!(_DWORD)v1)
    return 0.0;
  v2 = (float *)(*(_QWORD *)a1 + 8);
  v3 = 16 * v1;
  v4 = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  do
  {
    v8 = *v2;
    if (*v2 <= 0.0 || (v9 = v2[1], v9 <= 0.0))
    {
      result = v4;
      v8 = v6;
      v9 = v7;
    }
    else
    {
      result = *(v2 - 2);
      if (v6 <= 0.0 || v7 <= 0.0)
      {
        v5 = *(v2 - 1);
      }
      else
      {
        v11 = v8 + result;
        if (result >= v4)
          result = v4;
        v12 = *(v2 - 1);
        v13 = v5 + v7;
        if (v12 < v5)
          v5 = *(v2 - 1);
        v14 = v4 + v6;
        if (v14 >= v11)
          v11 = v14;
        v15 = v9 + v12;
        if (v13 >= v15)
          v15 = v13;
        v8 = v11 - result;
        v9 = v15 - v5;
      }
    }
    v2 += 4;
    v4 = result;
    v6 = v8;
    v7 = v9;
    v3 -= 16;
  }
  while (v3);
  return result;
}

float WebCore::unionRectIgnoringZeroRects(unsigned int *a1)
{
  uint64_t v1;
  float *v2;
  uint64_t v3;
  float result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v1 = a1[3];
  if (!(_DWORD)v1)
    return 0.0;
  v2 = (float *)(*(_QWORD *)a1 + 12);
  v3 = 16 * v1;
  result = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  do
  {
    v8 = *(v2 - 1);
    if (v8 != 0.0)
    {
      v10 = *(v2 - 1);
      if (v8 < 0.0)
        v10 = -v8;
      if (v10 >= 0.00000011921)
        goto LABEL_24;
    }
    v9 = *v2;
    if (*v2 == 0.0)
      goto LABEL_5;
    if (v9 < 0.0)
      v9 = -v9;
    if (v9 < 0.00000011921)
    {
LABEL_5:
      v8 = v6;
    }
    else
    {
      if (v6 != 0.0)
      {
        v11 = -v6;
        if (v6 >= 0.0)
          v11 = v6;
        if (v11 >= 0.00000011921)
          goto LABEL_25;
      }
LABEL_24:
      if (v7 == 0.0)
        goto LABEL_17;
      v12 = -v7;
      if (v7 >= 0.0)
        v12 = v7;
      if (v12 < 0.00000011921)
      {
LABEL_17:
        result = *(v2 - 3);
        v5 = *(v2 - 2);
        v7 = *v2;
      }
      else
      {
LABEL_25:
        v13 = *(v2 - 3);
        v14 = *(v2 - 2);
        v15 = result + v6;
        if (v13 < result)
          result = *(v2 - 3);
        v16 = v5 + v7;
        if (v14 < v5)
          v5 = *(v2 - 2);
        v17 = v8 + v13;
        if (v15 >= v17)
          v17 = v15;
        if (v16 < (float)(v14 + *v2))
          v16 = v14 + *v2;
        v8 = v17 - result;
        v7 = v16 - v5;
      }
    }
    v2 += 4;
    v6 = v8;
    v3 -= 16;
  }
  while (v3);
  return result;
}

float WebCore::mapRect(WebCore *this, const WebCore::FloatRect *a2, const WebCore::FloatRect *a3, const WebCore::FloatRect *a4)
{
  float v4;
  float result;

  v4 = *((float *)a2 + 2);
  result = 0.0;
  if (v4 != 0.0 && *((float *)a2 + 3) != 0.0)
    return *(float *)a3 + (float)((float)(*(float *)this - *(float *)a2) * (float)(*((float *)a3 + 2) / v4));
  return result;
}

float WebCore::largestRectWithAspectRatioInsideRect(WebCore *this, float a2, const WebCore::FloatRect *a3)
{
  float result;
  float v5;
  float v6;

  result = *(float *)this;
  v5 = *((float *)this + 2);
  v6 = *((float *)this + 3);
  if ((float)(v5 / v6) >= a2)
    return result - (float)((float)-(float)(v5 - (float)(v6 * a2)) * 0.5);
  return result;
}

float WebCore::smallestRectWithAspectRatioAroundRect(WebCore *this, float a2, const WebCore::FloatRect *a3)
{
  float result;
  float v5;
  float v6;

  result = *(float *)this;
  v5 = *((float *)this + 2);
  v6 = *((float *)this + 3);
  if ((float)(v5 / v6) <= a2)
    return result - (float)((float)-(float)(v5 - (float)(v6 * a2)) * 0.5);
  return result;
}

BOOL WebCore::ellipseContainsPoint(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::FloatSize *a3, const WebCore::FloatPoint *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  BOOL v9;
  float v12;
  float v13;
  float v14;

  v4 = *(float *)a2;
  if (*(float *)a2 <= 0.0)
    return 0;
  v5 = *((float *)a2 + 1);
  if (v5 <= 0.0)
    return 0;
  v6 = *(float *)a3 - *(float *)this;
  v7 = *((float *)a3 + 1) - *((float *)this + 1);
  v8 = v6 >= (float)-v4 && v6 <= v4;
  v9 = !v8 || v7 < (float)-v5;
  if (v9 || v7 > v5)
    return 0;
  v12 = v5 * v6;
  v13 = v4 * v7;
  v14 = v4 * v5;
  return (float)(fabsf(v12) + fabsf(v13)) <= v14
      || (float)((float)(v13 * v13) + (float)(v12 * v12)) <= (float)(v14 * v14);
}

void WebCore::rotatedBoundingRectWithMinimumAngleOfRotation(float *a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v22;
  float v23;
  float v24;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  __float2 v43;
  __float2 v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;

  if ((a2 & 0xFF00000000) != 0)
    v4 = *(float *)&a2;
  else
    v4 = 0.00000011921;
  v6 = a1[6];
  v5 = a1[7];
  v7 = *a1;
  v58 = a1[1];
  v9 = a1[4];
  v8 = a1[5];
  v56 = a1[2];
  v57 = a1[3];
  v54 = (float)(v58 + v5) * 0.5;
  v55 = (float)(*a1 + v6) * 0.5;
  v51 = (float)(v57 + v8) * 0.5;
  v52 = (float)(v56 + v9) * 0.5;
  v10 = hypotf(v52 - v55, v51 - v54);
  v53 = v52 - v55;
  v50 = v10;
  if (v10 == 0.0)
  {
    v11 = 0.0;
  }
  else
  {
    v11 = acosf((float)(v52 - v55) / v10);
    if ((float)(v51 - v54) < 0.0)
      v11 = -v11;
  }
  v12 = v51 - v54;
  v13 = v11 + 6.2832;
  if (v11 >= 0.0)
    v13 = v11;
  if (fabsf(v13) >= v4 && vabds_f32(6.2832, v13) >= v4)
  {
    v48 = v13;
    v47 = hypotf(v12, -v53);
    v32 = v47 * hypotf(v7 - v55, v58 - v54);
    v49 = 0.0;
    v33 = 0.0;
    if (v32 != 0.0)
    {
      v34 = (float)((float)((float)(v58 - v54) * (float)-v53) + (float)(v12 * (float)(v7 - v55))) / v32;
      v35 = -1.0;
      if (v34 > -1.0)
        v35 = v34;
      if (v34 >= 1.0)
        v36 = 1.0;
      else
        v36 = v35;
      v33 = acosf(v36);
    }
    v37 = v47 * hypotf(v56 - v52, v57 - v51);
    if (v37 != 0.0)
    {
      v38 = (float)((float)((float)(v57 - v51) * (float)-v53) + (float)(v12 * (float)(v56 - v52))) / v37;
      v39 = -1.0;
      if (v38 > -1.0)
        v39 = v38;
      if (v38 >= 1.0)
        v40 = 1.0;
      else
        v40 = v39;
      v49 = acosf(v40);
    }
    v41 = hypotf(v55 - v7, v54 - v58);
    v42 = hypotf(v52 - v56, v51 - v57);
    v43 = __sincosf_stret(v33);
    v44 = __sincosf_stret(v49);
    v29 = (float)(v50 + (float)(v43.__sinval * v41)) + (float)(v44.__sinval * v42);
    v45 = v44.__cosval * v42;
    if ((float)(v43.__cosval * v41) >= (float)(v44.__cosval * v42))
      v45 = v43.__cosval * v41;
    v30 = v45 + v45;
    v46 = (float)((float)(v50 + (float)(v44.__sinval * v42)) - (float)(v43.__sinval * v41)) * 0.5;
    *a3 = v55 + (float)((float)(v53 * v46) / v50);
    a3[1] = v54 + (float)((float)((float)(v51 - v54) * v46) / v50);
    v31 = v48;
  }
  else
  {
    if (v6 >= v9)
      v14 = v9;
    else
      v14 = v6;
    if (v56 >= v7)
      v15 = v7;
    else
      v15 = v56;
    if (v14 >= v15)
      v14 = v15;
    v16 = fabsf(v14);
    if (v16 == INFINITY || v16 > 2147500000.0)
      v14 = (float)((SLODWORD(v14) >> 31) ^ 0x7FFFFFFF);
    if (v5 >= v8)
      v18 = v8;
    else
      v18 = v5;
    if (v57 >= v58)
      v19 = v58;
    else
      v19 = v57;
    if (v18 >= v19)
      v18 = v19;
    v20 = fabsf(v18);
    if (v20 == INFINITY || v20 > 2147500000.0)
      v18 = (float)((SLODWORD(v18) >> 31) ^ 0x7FFFFFFF);
    if (v7 >= v56)
      v22 = v7;
    else
      v22 = v56;
    if (v9 >= v6)
      v23 = v9;
    else
      v23 = v6;
    if (v22 < v23)
      v22 = v23;
    v24 = fabsf(v22);
    if (v24 == INFINITY || v24 > 2147500000.0)
      v22 = (float)((SLODWORD(v22) >> 31) ^ 0x7FFFFFFF);
    if (v58 >= v57)
      v26 = v58;
    else
      v26 = v57;
    if (v8 >= v5)
      v27 = v8;
    else
      v27 = v5;
    if (v26 < v27)
      v26 = v27;
    v28 = fabsf(v26);
    if (v28 == INFINITY || v28 > 2147500000.0)
      v26 = (float)((SLODWORD(v26) >> 31) ^ 0x7FFFFFFF);
    v29 = v22 - v14;
    v30 = v26 - v18;
    *a3 = v14 + (float)(v29 * 0.5);
    a3[1] = v18 + (float)(v30 * 0.5);
    v31 = 0.0;
  }
  a3[2] = v29;
  a3[3] = v30;
  a3[4] = v31;
}

void WebCore::lengthOfPointToSideOfIntersection(uint64_t a1, float *a2, int a3)
{
  float v3;
  float i;
  BOOL v6;
  float v7;
  float v8;

  if (*a2 >= 0.0 && *a2 <= *(float *)(a1 + 8))
  {
    v3 = a2[1];
    if (v3 >= 0.0 && v3 <= *(float *)(a1 + 12))
    {
      for (i = fmodf(*(float *)&a3, 360.0); i < 0.0; i = i + 360.0)
        ;
      if (i >= 90.0)
      {
        v6 = i > 90.0 || i < 180.0;
        v7 = vabds_f32(360.0, i);
        v8 = vabds_f32(180.0, i);
        if (v6)
          i = v8;
        else
          i = v7;
      }
      __sincosf_stret(*(float *)&a3 * 0.017453);
      __sincosf_stret(i * 0.017453);
    }
  }
}

void WebCore::angleOfPointToSideOfIntersection(uint64_t a1, uint64_t a2, int a3)
{
  float v4;
  float v5;
  BOOL v6;
  float v7;
  float v8;
  float i;

  v4 = fmodf(*(float *)&a3, 360.0);
  v5 = v4;
  if (v4 < 0.0)
  {
    v5 = v4;
    do
      v5 = v5 + 360.0;
    while (v5 < 0.0);
  }
  if (v5 >= 90.0)
  {
    v6 = v5 > 90.0 || v5 < 180.0;
    v7 = vabds_f32(360.0, v5);
    v8 = vabds_f32(180.0, v5);
    if (v6)
      v5 = v8;
    else
      v5 = v7;
  }
  for (; v4 < 0.0; v4 = v4 + 360.0)
    ;
  for (i = fmodf(v4, 360.0); i < 0.0; i = i + 360.0)
    ;
  __sincosf_stret(*(float *)&a3 * 0.017453);
  __sincosf_stret(v5 * 0.017453);
}

void WebCore::TrivialFontAccessor::~TrivialFontAccessor(WebCore::TrivialFontAccessor *this)
{
  WTF **v2;
  WTF *v3;
  void *v4;

  v2 = (WTF **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::Font::~Font(v2);
      WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

uint64_t WebCore::Gradient::create@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;

  v16 = WTF::fastMalloc((WTF *)0xC8);
  result = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)result = 0;
  *(_OWORD *)(result + 8) = xmmword_19689B170;
  *(_QWORD *)(result + 24) = v16;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = a6;
  *(_QWORD *)(v16 + 40) = a7;
  *(_QWORD *)v16 = off_1E340B850;
  *(_QWORD *)(v16 + 8) = result;
  v18 = a1[1];
  *(_OWORD *)(v16 + 48) = *a1;
  *(_OWORD *)(v16 + 64) = v18;
  *(_QWORD *)(v16 + 80) = a2;
  *(_DWORD *)(v16 + 88) = a3;
  *(_BYTE *)(v16 + 92) = a4;
  *(_QWORD *)(v16 + 96) = v16 + 112;
  *(_QWORD *)(v16 + 104) = 2;
  v19 = *a5;
  if ((uint64_t *)*a5 == a5 + 2)
  {
    v20 = *((unsigned int *)a5 + 3);
    if ((_DWORD)v20)
    {
      v21 = (_QWORD *)(v16 + 120);
      v22 = 16 * v20;
      v23 = (_QWORD *)(v19 + 8);
      do
      {
        *((_DWORD *)v21 - 2) = *((_DWORD *)v23 - 2);
        *v21 = 0;
        if (*v23)
        {
          *v21 = *v23;
          *v23 = 0;
        }
        v21 += 2;
        v23 += 2;
        v22 -= 16;
      }
      while (v22);
    }
  }
  else
  {
    *a5 = (uint64_t)(a5 + 2);
    *(_QWORD *)(v16 + 96) = v19;
    v24 = *((_DWORD *)a5 + 2);
    *((_DWORD *)a5 + 2) = 2;
    *(_DWORD *)(v16 + 104) = v24;
    LODWORD(v20) = *((_DWORD *)a5 + 3);
  }
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(v16 + 108) = v20;
  *(_BYTE *)(v16 + 144) = *((_BYTE *)a5 + 48);
  *(_DWORD *)(v16 + 152) = 0;
  *(_BYTE *)(v16 + 160) = 0;
  *(_BYTE *)(v16 + 192) = 0;
  *a8 = v16;
  return result;
}

uint64_t WebCore::Gradient::Gradient(uint64_t a1, _OWORD *a2, uint64_t a3, int a4, char a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v24;

  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v16 = 0;
  *(_OWORD *)(v16 + 8) = xmmword_19689B170;
  *(_QWORD *)(v16 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = a8;
  *(_QWORD *)a1 = off_1E340B850;
  *(_QWORD *)(a1 + 8) = v16;
  v17 = a2[1];
  *(_OWORD *)(a1 + 48) = *a2;
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = a3;
  *(_DWORD *)(a1 + 88) = a4;
  *(_BYTE *)(a1 + 92) = a5;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 2;
  v18 = *a6;
  if ((uint64_t *)*a6 == a6 + 2)
  {
    v19 = *((unsigned int *)a6 + 3);
    if ((_DWORD)v19)
    {
      v20 = (_QWORD *)(a1 + 120);
      v21 = 16 * v19;
      v22 = (_QWORD *)(v18 + 8);
      do
      {
        *((_DWORD *)v20 - 2) = *((_DWORD *)v22 - 2);
        *v20 = 0;
        if (*v22)
        {
          *v20 = *v22;
          *v22 = 0;
        }
        v20 += 2;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
  }
  else
  {
    *a6 = (uint64_t)(a6 + 2);
    *(_QWORD *)(a1 + 96) = v18;
    v24 = *((_DWORD *)a6 + 2);
    *((_DWORD *)a6 + 2) = 2;
    *(_DWORD *)(a1 + 104) = v24;
    LODWORD(v19) = *((_DWORD *)a6 + 3);
  }
  *((_DWORD *)a6 + 3) = 0;
  *(_DWORD *)(a1 + 108) = v19;
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a6 + 48);
  *(_DWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  return a1;
}

unsigned int *WebCore::Gradient::adjustParametersForTiledDrawing(unsigned int *this, WebCore::FloatSize *a2, WebCore::FloatRect *a3, const WebCore::FloatSize *a4)
{
  unsigned int *v6;

  if (*((float *)a3 + 2) > 0.0 && *((float *)a3 + 3) > 0.0)
  {
    v6 = this;
    this = (unsigned int *)WebCore::FloatSize::isZero(a4);
    if ((_DWORD)this)
      return WTF::switchOn<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> &,WebCore::Gradient::adjustParametersForTiledDrawing(WebCore::FloatSize &,WebCore::FloatRect &,WebCore::FloatSize const&)::$_0,WebCore::Gradient::adjustParametersForTiledDrawing(WebCore::FloatSize &,WebCore::FloatRect &,WebCore::FloatSize const&)::$_1,WebCore::Gradient::adjustParametersForTiledDrawing(WebCore::FloatSize &,WebCore::FloatRect &,WebCore::FloatSize const&)::$_2>((uint64_t)(v6 + 12), (uint64_t)a2, (uint64_t)a3);
  }
  return this;
}

unsigned int *WTF::switchOn<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> &,WebCore::Gradient::adjustParametersForTiledDrawing(WebCore::FloatSize &,WebCore::FloatRect &,WebCore::FloatSize const&)::$_0,WebCore::Gradient::adjustParametersForTiledDrawing(WebCore::FloatSize &,WebCore::FloatRect &,WebCore::FloatSize const&)::$_1,WebCore::Gradient::adjustParametersForTiledDrawing(WebCore::FloatSize &,WebCore::FloatRect &,WebCore::FloatSize const&)::$_2>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::Gradient *v5;
  _QWORD v6[2];
  _QWORD *v7;

  v6[0] = a2;
  v6[1] = a3;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3 == -1)
  {
    v5 = (WebCore::Gradient *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Gradient::isZeroSize(v5);
  }
  else
  {
    v7 = v6;
    return (unsigned int *)((uint64_t (*)(_QWORD **, uint64_t))off_1E340C760[v3])(&v7, a1);
  }
}

unsigned int *WebCore::Gradient::isZeroSize(WebCore::Gradient *this)
{
  uint64_t v1;
  uint64_t v3;
  float *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 19);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Gradient::addColorStop(v3, v4);
  }
  else
  {
    v6 = &v5;
    return (unsigned int *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8Gradient10isZeroSizeEvE3__0JZNKS9_10isZeroSizeEvE3__1ZNKS9_10isZeroSizeEvE3__2EEEEEJRKNS0_6__implIJNS9_10LinearDataENS9_10RadialDataENS9_9ConicDataEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, (char *)this + 48);
  }
}

unsigned int *WebCore::Gradient::addColorStop(uint64_t a1, float *a2)
{
  float v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  uint64_t v16;
  char v17;

  v3 = *a2;
  v15 = *a2;
  v16 = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v16 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
  }
  v4 = (_QWORD *)(a1 + 96);
  v5 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v5)
  {
    if (*(float *)(*v4 + 16 * v5 - 16) > v3)
      *(_BYTE *)(a1 + 144) = 0;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 104))
  {
    v11 = (_DWORD *)WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 96, (void *)(v6 + 1), (unint64_t)&v15);
    v12 = *v11;
    result = v11 + 2;
    v5 = *(unsigned int *)(a1 + 108);
    v8 = (_DWORD *)(*(_QWORD *)(a1 + 96) + 16 * v5);
    *v8 = v12;
  }
  else
  {
    result = (unsigned int *)&v16;
    v8 = (_DWORD *)(*v4 + 16 * v6);
    *(float *)v8 = v3;
  }
  v9 = v8 + 2;
  *v9 = 0;
  if (*(_QWORD *)result)
  {
    *v9 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
  }
  *(_DWORD *)(a1 + 108) = v5 + 1;
  if ((v16 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  *(_DWORD *)(a1 + 152) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    v10 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v10 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GradientRendererCG8GradientENS7_7ShadingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v17, a1 + 160);
    *(_DWORD *)(a1 + 184) = -1;
    *(_BYTE *)(a1 + 192) = 0;
  }
  return result;
}

uint64_t WebCore::Gradient::hash(WebCore::Gradient *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 38);
  if (!(_DWORD)result)
  {
    WebCore::GradientColorStops::sort((char **)this + 12);
    result = WTF::computeHash<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,WebCore::ColorInterpolationMethod,WebCore::GradientSpreadMethod,WebCore::GradientColorStops>((uint64_t)this + 48, (uint64_t)this + 80, (unsigned __int8 *)this + 92, (uint64_t *)this + 12);
    *((_DWORD *)this + 38) = result;
  }
  return result;
}

uint64_t WTF::computeHash<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,WebCore::ColorInterpolationMethod,WebCore::GradientSpreadMethod,WebCore::GradientColorStops>(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned int v5;
  __int16 v6;
  char v7;

  v5 = -1640531527;
  v6 = 0;
  v7 = 0;
  WTF::addArgs<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,WebCore::ColorInterpolationMethod,WebCore::GradientSpreadMethod,WebCore::GradientColorStops>(&v5, a1, a2, a3, a4);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v5);
}

WebCore::GradientImage *WebCore::operator<<(WTF::TextStream *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::GradientImage *v10;
  WebCore::Gradient *v11;
  const WebCore::FloatSize *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::TextStream *v17;
  uint64_t *v18;

  v15 = (uint64_t)a1;
  v16 = a1;
  v17 = a1;
  v2 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v2 == -1)
    goto LABEL_6;
  v13 = &v15;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCorelsERNS6_10TextStreamERKNS8_8GradientEE3__0JZNS8_lsESA_SD_E3__1ZNS8_lsESA_SD_E3__2EEEEEJRKNS0_6__implIJNSB_10LinearDataENSB_10RadialDataENSB_9ConicDataEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v13, a2 + 48);
  v6 = *(_DWORD *)(a2 + 88);
  v13 = *(uint64_t **)(a2 + 80);
  v5 = v13;
  v14 = v6;
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v15 = WTF::TextStream::operator<<();
  v16 = &v13;
  if ((unint64_t)v5 >> 32 == 0xFFFFFFFF)
  {
LABEL_6:
    v10 = (WebCore::GradientImage *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::GradientImage::GradientImage(v10, v11, v12);
  }
  else
  {
    v18 = &v15;
    ((void (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCorelsERNS6_10TextStreamERKNS8_24ColorInterpolationMethodEE3__0JEEEEEJRKNS0_6__implIJNSB_3HSLENSB_3HWBENSB_3LCHENSB_3LabENSB_5OKLCHENSB_5OKLabENSB_4SRGBENSB_10SRGBLinearENSB_9DisplayP3ENSB_6A98RGBENSB_11ProPhotoRGBENSB_7Rec2020ENSB_6XYZD50ENSB_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[(unint64_t)v5 >> 32])(&v18, &v13);
    WTF::TextStream::endGroup(a1);
    v7 = *(char *)(a2 + 92);
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (v7 <= 2)
      WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    v8 = WTF::TextStream::operator<<();
    WTF::streamSizedContainer<WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (unsigned int *)(a2 + 96));
    WTF::TextStream::endGroup(a1);
    return a1;
  }
}

void WebCore::GradientImage::~GradientImage(WebCore::GradientImage *this, void *a2)
{
  uint64_t v3;
  void *v4;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v3 + 8), a2);
  WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref((uint64_t *)this + 9, a2);
  WebCore::Image::~Image(this, v4);
}

{
  WTF *v2;
  void *v3;

  WebCore::GradientImage::~GradientImage(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::GradientImage::drawPattern(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float64x2_t *a5, uint64_t a6, WebCore::FloatSize *a7, int a8)
{
  float64x2_t v15;
  float64x2_t v16;
  WebCore::DestinationColorSpace *v17;
  int v18;
  float v19;
  WebCore *v20;
  const WebCore::FloatSize *v21;
  const WebCore::FloatSize *v22;
  float v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  void *v27;
  unsigned __int8 **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 **v33;
  void *v34;
  double v35;
  double v36;
  uint64_t v37[2];
  unsigned __int8 **v38;
  float64x2_t v39[3];
  long double v40[6];
  float32x4_t v41;
  uint64_t v42;

  v42 = *(_QWORD *)(a1 + 64);
  v41 = *a4;
  WebCore::Gradient::adjustParametersForTiledDrawing(*(unsigned int **)(a1 + 72), (WebCore::FloatSize *)&v42, (WebCore::FloatRect *)&v41, a7);
  (*(void (**)(long double *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 672))(v40, a2, 0);
  v36 = hypot(v40[0], v40[1]);
  v35 = hypot(v40[2], v40[3]);
  v15 = a5[1];
  v39[0] = *a5;
  v39[1] = v15;
  v39[2] = a5[2];
  WebCore::AffineTransform::scale(v39, 1.0 / fabs(v36), 1.0 / fabs(v35));
  v16.f64[0] = v36;
  v16.f64[1] = v35;
  v41 = vmulq_f32(vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v16)), v41);
  v17 = (WebCore::DestinationColorSpace *)WebCore::Gradient::hash(*(WebCore::Gradient **)(a1 + 72));
  v18 = (int)v17;
  if (*(_QWORD *)(a1 + 80))
  {
    if (*(_DWORD *)(a1 + 96) == (_DWORD)v17
      && *(float *)(a1 + 88) == *(float *)&v42
      && *(float *)(a1 + 92) == *((float *)&v42 + 1))
    {
      v19 = WebCore::GraphicsContext::scaleFactor((WebCore::GraphicsContext *)a2);
      v17 = (WebCore::DestinationColorSpace *)WebCore::areEssentiallyEqual(v20, v21, v22, v19, v23, *(float *)(a1 + 100), *(float *)(a1 + 104));
      if ((v17 & 1) != 0)
        goto LABEL_26;
    }
  }
  v24 = WebCore::DestinationColorSpace::SRGB(v17);
  (*(void (**)(unsigned __int8 ***__return_ptr, uint64_t, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)a2 + 336))(&v38, a2, &v42, v24, 0);
  if (v38)
  {
    v25 = (*((uint64_t (**)(unsigned __int8 **))*v38 + 2))(v38);
    v37[0] = 0;
    v37[1] = v42;
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v25 + 240))(v25, v37, *(_QWORD *)(a1 + 72));
    *(_DWORD *)(a1 + 96) = v18;
    *(_QWORD *)(a1 + 88) = v42;
    *(float *)(a1 + 100) = WebCore::GraphicsContext::scaleFactor((WebCore::GraphicsContext *)a2);
    *(_DWORD *)(a1 + 104) = v26;
    if (*(_BYTE *)(a2 + 346))
      (*((void (**)(unsigned __int8 **))*v38 + 9))(v38);
    v28 = v38;
    v38 = 0;
    if (v28)
    {
      (*((void (**)(uint64_t *__return_ptr, unsigned __int8 **))*v28 + 17))(v37, v28);
      v29 = v37[0];
    }
    else
    {
      v29 = 0;
    }
    v37[0] = 0;
    v30 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v29;
    if (v30)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v30 + 8), v27);
      v31 = v37[0];
      v37[0] = 0;
      if (v31)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v31 + 8), v27);
    }
    if (v28)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v28 + 1, v27);
    v32 = *(_QWORD *)(a1 + 80);
    v33 = v38;
    v38 = 0;
    if (v33)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v33 + 1, v27);
    if (v32)
    {
LABEL_26:
      if (*(_BYTE *)(a2 + 346))
      {
        *(_BYTE *)(a2 + 346) = 0;
        *(_DWORD *)(a2 + 184) |= 0x8000u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
      WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(v37, *(_QWORD *)(a1 + 80));
      (*(void (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, float64x2_t *, uint64_t, WebCore::FloatSize *, uint64_t))(*(_QWORD *)a2 + 408))(a2, v37[0], a3, &v41, v39, a6, a7, *(_QWORD *)&a8 & 0xFFFFFFLL);
      WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(v37, v34);
    }
  }
}

BOOL WebCore::areEssentiallyEqual(WebCore *this, const WebCore::FloatSize *a2, const WebCore::FloatSize *a3, float a4, float a5, float a6, float a7)
{
  float v7;
  float v8;
  BOOL v11;
  float v12;
  float v14;
  BOOL v15;
  float v16;
  float v17;
  BOOL v19;
  float v20;
  float v22;

  if (a4 != a6)
  {
    v7 = vabds_f32(a4, a6);
    v8 = fabsf(a4);
    if (v8 < 1.0 && (float)(v8 * 3.4028e38) < v7)
      return 0;
    v11 = (float)(v8 * 1.1755e-38) <= v7 || v8 <= 1.0;
    v12 = v7 / v8;
    if (v11 && v12 > 0.00000011921)
      return 0;
    v14 = fabsf(a6);
    if (v14 < 1.0 && (float)(v14 * 3.4028e38) < v7)
      return 0;
    v15 = (float)(v14 * 1.1755e-38) <= v7 || v14 <= 1.0;
    if (v15 && (float)(v7 / v14) > 0.00000011921)
      return 0;
  }
  if (a5 == a7)
    return 1;
  v16 = vabds_f32(a5, a7);
  v17 = fabsf(a5);
  if (v17 < 1.0 && (float)(v17 * 3.4028e38) < v16)
    return 0;
  v19 = (float)(v17 * 1.1755e-38) <= v16 || v17 <= 1.0;
  v20 = v16 / v17;
  if (v19 && v20 > 0.00000011921)
    return 0;
  v22 = fabsf(a7);
  if (v22 < 1.0 && (float)(v22 * 3.4028e38) < v16)
    return 0;
  if (v22 > 1.0 && (float)(v22 * 1.1755e-38) > v16)
    return 1;
  return (float)(v16 / v22) <= 0.00000011921;
}

float WebCore::GraphicsContext::scaleFactor(WebCore::GraphicsContext *this)
{
  float v1;
  long double v3[6];

  (*(void (**)(long double *__return_ptr, WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)this + 672))(v3, this, 0);
  v1 = hypot(v3[0], v3[1]);
  hypot(v3[2], v3[3]);
  return v1;
}

_QWORD *WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v6;

  v4 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *a1 = a2;
  return a1;
}

double WebCore::GraphicsContext::GraphicsContext(uint64_t a1, char a2, _DWORD *a3, char a4)
{
  double result;

  *(_QWORD *)a1 = off_1E340BA10;
  *(_QWORD *)(a1 + 8) = 0x11040000000000FFLL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0x11040000000000FFLL;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = *a3;
  *(_DWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 192) = 16908544;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_BYTE *)(a1 + 340) = a4;
  *(_QWORD *)(a1 + 341) = 16843009;
  *(_QWORD *)(a1 + 352) = a1 + 368;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(a1 + 360) = 1;
  *(_DWORD *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 716) = *(_BYTE *)(a1 + 716) & 0xFC | a2;
  return result;
}

uint64_t WebCore::GraphicsContext::GraphicsContext(uint64_t a1, char a2, uint64_t *a3)
{
  *(_QWORD *)a1 = off_1E340BA10;
  WebCore::GraphicsContextState::GraphicsContextState(a1 + 8, a3);
  *(_QWORD *)(a1 + 352) = a1 + 368;
  *(_QWORD *)(a1 + 360) = 1;
  *(_DWORD *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 716) = *(_BYTE *)(a1 + 716) & 0xFC | a2;
  return a1;
}

void WebCore::GraphicsContext::~GraphicsContext(WebCore::GraphicsContext *this, void *a2)
{
  unsigned int v3;
  WTF *v4;

  *(_QWORD *)this = off_1E340BA10;
  v3 = *((_DWORD *)this + 91);
  if (v3)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v3));
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::GraphicsContext *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContext *)((char *)this + 8), a2);
}

uint64_t *WebCore::GraphicsContext::save(uint64_t a1, int a2)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  char v36;
  char v37;
  char v38;

  result = (uint64_t *)(a1 + 352);
  v5 = (uint64_t *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 364);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 360))
  {
    v29 = (uint64_t *)WTF::Vector<WebCore::GraphicsContextState,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v6 + 1, (unint64_t)v5);
    result = (uint64_t *)WebCore::GraphicsContextState::GraphicsContextState(*(_QWORD *)(a1 + 352) + 344 * *(unsigned int *)(a1 + 364), v29);
  }
  else
  {
    v7 = *result;
    v8 = *result + 344 * v6;
    v9 = *v5;
    *(_QWORD *)v8 = *v5;
    if ((v9 & 0x8000000000000) != 0)
    {
      v30 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
    *(_BYTE *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 80) = -1;
    v10 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v10 != -1)
    {
      result = (uint64_t *)((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v10])(&v36);
      *(_DWORD *)(v8 + 80) = v10;
    }
    v11 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(v7 + 344 * v6 + 88) = v11;
    if ((v11 & 0x8000000000000) != 0)
    {
      v32 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v12 = v7 + 344 * v6;
    *(_DWORD *)(v12 + 168) = -1;
    v13 = (_DWORD *)(v12 + 168);
    *((_BYTE *)v13 - 64) = 0;
    v14 = *(unsigned int *)(a1 + 176);
    if ((_DWORD)v14 != -1)
    {
      result = (uint64_t *)((uint64_t (*)(char *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v14])(&v37, v13 - 16, a1 + 112);
      *v13 = v14;
    }
    v15 = v7 + 344 * v6;
    v16 = *(_QWORD *)(a1 + 184);
    v17 = *(_DWORD *)(a1 + 192);
    *(_BYTE *)(v15 + 192) = 0;
    v18 = v15 + 192;
    *(_DWORD *)(v18 - 8) = v17;
    *(_QWORD *)(v18 - 16) = v16;
    *(_BYTE *)(v18 + 32) = 0;
    v19 = (_BYTE *)(v18 + 32);
    if (*(_BYTE *)(a1 + 232))
    {
      v20 = *(_QWORD *)(a1 + 200);
      *(_DWORD *)(v18 + 8) = *(_DWORD *)(a1 + 208);
      *(_QWORD *)v18 = v20;
      v21 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(v7 + 344 * v6 + 208) = v21;
      if ((v21 & 0x8000000000000) != 0)
      {
        v34 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
      *(_QWORD *)(v7 + 344 * v6 + 216) = *(_QWORD *)(a1 + 224);
      *v19 = 1;
    }
    v22 = v7 + 344 * v6;
    *(_BYTE *)(v22 + 232) = 0;
    v22 += 232;
    *(_BYTE *)(v22 + 88) = 0;
    v23 = (_BYTE *)(v22 + 88);
    if (*(_BYTE *)(a1 + 328))
    {
      v24 = v7 + 344 * v6;
      *(_DWORD *)(v24 + 312) = -1;
      v25 = *(unsigned int *)(a1 + 320);
      if ((_DWORD)v25 != -1)
      {
        v26 = (_DWORD *)(v24 + 312);
        result = (uint64_t *)((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v25])(&v38);
        *v26 = v25;
      }
      *v23 = 1;
    }
    v27 = v7 + 344 * v6;
    v28 = *(_QWORD *)(a1 + 341);
    *(_QWORD *)(v27 + 328) = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(v27 + 333) = v28;
  }
  ++*(_DWORD *)(a1 + 364);
  if (a2)
  {
    if (a2 == 2)
      *(_DWORD *)(a1 + 336) = 1065353216;
  }
  else
  {
    *(_DWORD *)(a1 + 184) = 0;
  }
  *(_BYTE *)(a1 + 348) = a2;
  return result;
}

uint64_t WebCore::GraphicsContext::restore(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  _QWORD *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  _QWORD *v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  _QWORD *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  _QWORD *v85;
  __int128 v86;
  __int128 v87;

  v2 = *(unsigned int *)(result + 364);
  if (!(_DWORD)v2)
    return result;
  v3 = result;
  v4 = v2 - 1;
  v5 = *(_QWORD *)(result + 352);
  v6 = (_QWORD *)(v5 + 344 * (v2 - 1));
  v7 = *(_QWORD *)(result + 8);
  v8 = *v6;
  if ((v7 & 0x8000000000000) != 0)
  {
    if ((v8 & 0x8000000000000) != 0)
    {
      v65 = v6;
      v87 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      v86 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
      result = WebCore::operator==<float,4ul>((float *)&v87, (float *)&v86);
      v7 = *(_QWORD *)(v3 + 8);
      if ((_DWORD)result && HIBYTE(v7) == HIBYTE(*v65))
      {
        v6 = v65;
        if (BYTE6(v7) == BYTE6(*v65))
          goto LABEL_8;
      }
      else
      {
        v6 = v65;
      }
    }
  }
  else if (v7 == v8 && (v8 & 0x8000000000000) == 0)
  {
    goto LABEL_8;
  }
  if ((v7 & 0x8000000000000) != 0)
  {
    v71 = v6;
    result = v7 & 0xFFFFFFFFFFFFLL;
    do
    {
      v72 = __ldaxr((unsigned int *)result);
      v73 = --v72 == 0;
    }
    while (__stlxr(v72, (unsigned int *)result));
    v6 = v71;
    if (v73)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
      v6 = v71;
    }
  }
  v68 = *v6;
  *(_QWORD *)(v3 + 8) = *v6;
  if ((v68 & 0x8000000000000) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 + 1, v69));
  }
LABEL_8:
  v10 = (void *)(v3 + 24);
  v11 = *(unsigned int *)(v3 + 88);
  v12 = *((unsigned int *)v6 + 20);
  if ((_DWORD)v11 == -1)
  {
    if ((_DWORD)v12 != -1)
      goto LABEL_10;
  }
  else
  {
    if ((_DWORD)v12 != -1)
    {
LABEL_10:
      *(_QWORD *)&v87 = v3 + 24;
      result = ((uint64_t (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v12])(&v87);
      goto LABEL_11;
    }
    result = ((uint64_t (*)(__int128 *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v11])(&v87, v10);
    *(_DWORD *)(v3 + 88) = -1;
  }
LABEL_11:
  v13 = v5 + 344 * v4;
  v16 = *(_QWORD *)(v13 + 88);
  v14 = (_QWORD *)(v13 + 88);
  v15 = v16;
  v17 = *(_QWORD *)(v3 + 96);
  if ((v17 & 0x8000000000000) != 0)
  {
    if ((v15 & 0x8000000000000) != 0)
    {
      v85 = v14;
      v87 = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4);
      v86 = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
      result = WebCore::operator==<float,4ul>((float *)&v87, (float *)&v86);
      v17 = *(_QWORD *)(v3 + 96);
      if ((_DWORD)result && HIBYTE(v17) == HIBYTE(*v85))
      {
        v14 = v85;
        if (BYTE6(v17) == BYTE6(*v85))
          goto LABEL_17;
      }
      else
      {
        v14 = v85;
      }
    }
  }
  else if (v17 == v15 && (v15 & 0x8000000000000) == 0)
  {
    goto LABEL_17;
  }
  if ((v17 & 0x8000000000000) != 0)
  {
    v77 = v14;
    result = v17 & 0xFFFFFFFFFFFFLL;
    do
    {
      v78 = __ldaxr((unsigned int *)result);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, (unsigned int *)result));
    if (!v79)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v10);
      v14 = v77;
    }
  }
  v74 = *v14;
  *(_QWORD *)(v3 + 96) = *v14;
  if ((v74 & 0x8000000000000) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 + 1, v75));
  }
LABEL_17:
  v19 = (void *)(v3 + 112);
  v20 = *(unsigned int *)(v3 + 176);
  v21 = *(unsigned int *)(v5 + 344 * v4 + 168);
  if ((_DWORD)v20 == -1)
  {
    if ((_DWORD)v21 != -1)
      goto LABEL_19;
  }
  else
  {
    if ((_DWORD)v21 != -1)
    {
LABEL_19:
      *(_QWORD *)&v87 = v3 + 112;
      result = ((uint64_t (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v21])(&v87);
      goto LABEL_20;
    }
    result = ((uint64_t (*)(__int128 *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v20])(&v87, v19);
    *(_DWORD *)(v3 + 176) = -1;
  }
LABEL_20:
  v22 = v5 + 344 * v4;
  v23 = *(_QWORD *)(v22 + 176);
  *(_DWORD *)(v3 + 192) = *(_DWORD *)(v22 + 184);
  *(_QWORD *)(v3 + 184) = v23;
  v24 = (_QWORD *)(v3 + 200);
  v25 = (uint64_t *)(v22 + 192);
  if (*(unsigned __int8 *)(v3 + 232) == *(unsigned __int8 *)(v22 + 224))
  {
    if (!*(_BYTE *)(v3 + 232))
      goto LABEL_32;
    v26 = *v25;
    *(_DWORD *)(v3 + 208) = *(_DWORD *)(v22 + 200);
    *v24 = v26;
    v27 = v5 + 344 * v4;
    v30 = *(_QWORD *)(v27 + 208);
    v29 = (uint64_t *)(v27 + 208);
    v28 = v30;
    v31 = *(_QWORD *)(v3 + 216);
    if ((v31 & 0x8000000000000) != 0)
    {
      if ((v28 & 0x8000000000000) == 0
        || (v87 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 4),
            v86 = *(_OWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 4),
            result = WebCore::operator==<float,4ul>((float *)&v87, (float *)&v86),
            v31 = *(_QWORD *)(v3 + 216),
            !(_DWORD)result)
        || HIBYTE(v31) != HIBYTE(*v29)
        || BYTE6(v31) != BYTE6(*v29))
      {
LABEL_130:
        if ((v31 & 0x8000000000000) != 0)
        {
          result = v31 & 0xFFFFFFFFFFFFLL;
          do
          {
            v83 = __ldaxr((unsigned int *)result);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, (unsigned int *)result));
          if (!v84)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v19);
          }
        }
        v80 = *v29;
        *(_QWORD *)(v3 + 216) = *v29;
        if ((v80 & 0x8000000000000) != 0)
        {
          v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFLL);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 + 1, v81));
        }
      }
    }
    else if (v31 != v28 || (v28 & 0x8000000000000) != 0)
    {
      goto LABEL_130;
    }
    *(_QWORD *)(v3 + 224) = *(_QWORD *)(v5 + 344 * v4 + 216);
    goto LABEL_32;
  }
  if (*(_BYTE *)(v3 + 232))
  {
    v33 = *(_QWORD *)(v3 + 216);
    if ((v33 & 0x8000000000000) != 0)
    {
      result = v33 & 0xFFFFFFFFFFFFLL;
      do
      {
        v66 = __ldaxr((unsigned int *)result);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, (unsigned int *)result));
      if (!v67)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v19);
      }
    }
    *(_BYTE *)(v3 + 232) = 0;
  }
  else
  {
    v54 = *v25;
    *(_DWORD *)(v3 + 208) = *(_DWORD *)(v22 + 200);
    *v24 = v54;
    v55 = *(_QWORD *)(v5 + 344 * v4 + 208);
    *(_QWORD *)(v3 + 216) = v55;
    if ((v55 & 0x8000000000000) != 0)
    {
      v57 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 + 1, v57));
    }
    *(_QWORD *)(v3 + 224) = *(_QWORD *)(v5 + 344 * v4 + 216);
    *(_BYTE *)(v3 + 232) = 1;
  }
LABEL_32:
  v34 = (void *)(v3 + 240);
  v35 = v5 + 344 * v4;
  v36 = v35 + 232;
  if (*(unsigned __int8 *)(v3 + 328) != *(unsigned __int8 *)(v35 + 320))
  {
    if (*(_BYTE *)(v3 + 328))
    {
      v39 = *(unsigned int *)(v3 + 320);
      if ((_DWORD)v39 != -1)
        result = ((uint64_t (*)(__int128 *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v39])(&v87, v34, v36);
      *(_DWORD *)(v3 + 320) = -1;
      *(_BYTE *)(v3 + 328) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 240) = 0;
      *(_DWORD *)(v3 + 320) = -1;
      v56 = *(unsigned int *)(v5 + 344 * v4 + 312);
      if ((_DWORD)v56 != -1)
      {
        result = ((uint64_t (*)(__int128 *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v56])(&v87, v34, v36);
        *(_DWORD *)(v3 + 320) = v56;
      }
      *(_BYTE *)(v3 + 328) = 1;
    }
    goto LABEL_41;
  }
  if (*(_BYTE *)(v3 + 328))
  {
    v37 = *(unsigned int *)(v3 + 320);
    v38 = *(unsigned int *)(v5 + 344 * v4 + 312);
    if ((_DWORD)v37 == -1)
    {
      if ((_DWORD)v38 != -1)
        goto LABEL_36;
    }
    else
    {
      if ((_DWORD)v38 != -1)
      {
LABEL_36:
        *(_QWORD *)&v87 = v3 + 240;
        result = ((uint64_t (*)(__int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRSB_SH_EEEDcmSJ_DpOT0____fdiagonal
                                                      + v38))(&v87);
        goto LABEL_41;
      }
      result = ((uint64_t (*)(__int128 *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v37])(&v87, v34, v36);
      *(_DWORD *)(v3 + 320) = -1;
    }
  }
LABEL_41:
  v40 = *(_QWORD *)(v5 + 344 * v4 + 328);
  *(_QWORD *)(v3 + 341) = *(_QWORD *)(v5 + 344 * v4 + 333);
  *(_QWORD *)(v3 + 336) = v40;
  v41 = *(unsigned int *)(v3 + 364);
  if ((_DWORD)v41)
  {
    v42 = v41 - 1;
    v43 = *(_QWORD *)(v3 + 352);
    v44 = v43 + 344 * (v41 - 1);
    if (*(_BYTE *)(v44 + 320))
    {
      v45 = (_DWORD *)(v43 + 344 * v42 + 312);
      v46 = *v45;
      if ((_DWORD)v46 != -1)
        result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v46])(&v87, v44 + 232, v36);
      *v45 = -1;
    }
    if (*(_BYTE *)(v43 + 344 * v42 + 224))
    {
      v47 = *(_QWORD *)(v43 + 344 * v42 + 208);
      if ((v47 & 0x8000000000000) != 0)
      {
        result = v47 & 0xFFFFFFFFFFFFLL;
        do
        {
          v63 = __ldaxr((unsigned int *)result);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, (unsigned int *)result));
        if (!v64)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v34);
        }
      }
    }
    v48 = v43 + 344 * v42;
    v51 = *(_DWORD *)(v48 + 168);
    v50 = (_DWORD *)(v48 + 168);
    v49 = v51;
    v52 = v50 - 20;
    if (v51 != -1)
      result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v49])(&v87, v43 + 344 * v42 + 104, v36);
    *v50 = -1;
    if ((*v52 & 0x8000000000000) != 0)
    {
      result = *v52 & 0xFFFFFFFFFFFFLL;
      do
      {
        v59 = __ldaxr((unsigned int *)result);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, (unsigned int *)result));
      if (!v60)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v34);
      }
    }
    v53 = *(unsigned int *)(v44 + 80);
    if ((_DWORD)v53 != -1)
      result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v53])(&v87, v44 + 16);
    *(_DWORD *)(v44 + 80) = -1;
    if ((*(_QWORD *)v44 & 0x8000000000000) != 0)
    {
      result = *(_QWORD *)v44 & 0xFFFFFFFFFFFFLL;
      do
      {
        v61 = __ldaxr((unsigned int *)result);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, (unsigned int *)result));
      if (!v62)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v34);
      }
    }
    *(_DWORD *)(v3 + 364) = v42;
    if (!(_DWORD)v42 && *(_DWORD *)(v3 + 360))
    {
      result = *(_QWORD *)(v3 + 352);
      if (v3 + 368 != result && result)
      {
        *(_QWORD *)(v3 + 352) = 0;
        *(_DWORD *)(v3 + 360) = 0;
        WTF::fastFree((WTF *)result, v34);
        result = *(_QWORD *)(v3 + 352);
      }
      if (!result)
      {
        *(_QWORD *)(v3 + 352) = v3 + 368;
        *(_DWORD *)(v3 + 360) = 1;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unsigned __int8 *WebCore::GraphicsContext::unwindStateStack(unsigned __int8 *this, int a2)
{
  int v2;
  unsigned __int8 *v3;
  int v4;

  if (a2)
  {
    v2 = a2;
    v3 = this;
    do
    {
      v4 = v3[348];
      if (v4 == 2)
      {
        this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 608))(v3);
      }
      else if (v4 == 1)
      {
        this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v3 + 104))(v3, 1);
      }
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t WebCore::GraphicsContext::mergeAllChanges(WebCore::GraphicsContext *this, const WebCore::GraphicsContextState *a2)
{
  char *v3;

  v3 = (char *)this + 8;
  WebCore::GraphicsContextState::mergeAllChanges((WebCore::GraphicsContext *)((char *)this + 8), a2);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)this + 88))(this, v3);
}

uint64_t WebCore::GraphicsContextState::mergeAllChanges(WebCore::GraphicsContextState *this, const WebCore::GraphicsContextState *a2)
{
  float v4;
  int v5;
  uint64_t result;
  float v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16[2];

  v16[0] = (uint64_t)this;
  v16[1] = (uint64_t)a2;
  WebCore::GraphicsContextState::mergeAllChanges(WebCore::GraphicsContextState const&)::$_0::operator()<WebCore::SourceBrush>((uint64_t)v16, (_QWORD *)1, 0);
  if ((*((_BYTE *)a2 + 184) != 0) == (*((_BYTE *)this + 184) == 0))
  {
    *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
    *((_DWORD *)this + 44) |= 2u;
  }
  WebCore::GraphicsContextState::mergeAllChanges(WebCore::GraphicsContextState const&)::$_0::operator()<WebCore::SourceBrush>((uint64_t)v16, (_QWORD *)4, 88);
  v4 = *((float *)a2 + 45);
  if (*((float *)this + 45) != v4)
  {
    *((float *)this + 45) = v4;
    *((_DWORD *)this + 44) |= 8u;
  }
  v5 = *((unsigned __int8 *)a2 + 185);
  if (*((unsigned __int8 *)this + 185) != v5)
  {
    *((_BYTE *)this + 185) = v5;
    *((_DWORD *)this + 44) |= 0x10u;
  }
  if (*((unsigned __int8 *)this + 186) != *((unsigned __int8 *)a2 + 186)
    || *((unsigned __int8 *)this + 187) != *((unsigned __int8 *)a2 + 187))
  {
    *((_WORD *)this + 93) = *((_WORD *)a2 + 93);
    *((_DWORD *)this + 44) |= 0x20u;
  }
  WebCore::GraphicsContextState::mergeAllChanges(WebCore::GraphicsContextState const&)::$_0::operator()<std::optional<WebCore::GraphicsDropShadow>>(v16);
  result = WebCore::GraphicsContextState::mergeAllChanges(WebCore::GraphicsContextState const&)::$_0::operator()<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>((uint64_t)v16);
  v7 = *((float *)a2 + 82);
  if (*((float *)this + 82) != v7)
  {
    *((float *)this + 82) = v7;
    *((_DWORD *)this + 44) |= 0x100u;
  }
  v8 = *((unsigned __int8 *)a2 + 333);
  if (*((unsigned __int8 *)this + 333) != v8)
  {
    *((_BYTE *)this + 333) = v8;
    *((_DWORD *)this + 44) |= 0x400u;
  }
  v9 = *((unsigned __int8 *)a2 + 332);
  if (*((unsigned __int8 *)this + 332) != v9)
  {
    *((_BYTE *)this + 332) = v9;
    *((_DWORD *)this + 44) |= 0x200u;
  }
  v10 = *((unsigned __int8 *)a2 + 334);
  if (*((unsigned __int8 *)this + 334) != v10)
  {
    *((_BYTE *)this + 334) = v10;
    *((_DWORD *)this + 44) |= 0x800u;
  }
  v11 = *((unsigned __int8 *)a2 + 335);
  if (*((unsigned __int8 *)this + 335) != v11)
  {
    *((_BYTE *)this + 335) = v11;
    *((_DWORD *)this + 44) |= 0x1000u;
  }
  v12 = *((unsigned __int8 *)a2 + 336);
  if (*((unsigned __int8 *)this + 336) != v12)
  {
    *((_BYTE *)this + 336) = v12;
    *((_DWORD *)this + 44) |= 0x2000u;
  }
  v13 = *((unsigned __int8 *)a2 + 337);
  if (*((unsigned __int8 *)this + 337) != v13)
  {
    *((_BYTE *)this + 337) = v13;
    *((_DWORD *)this + 44) |= 0x4000u;
  }
  v14 = *((unsigned __int8 *)a2 + 338);
  if (*((unsigned __int8 *)this + 338) != v14)
  {
    *((_BYTE *)this + 338) = v14;
    *((_DWORD *)this + 44) |= 0x8000u;
  }
  v15 = *((unsigned __int8 *)a2 + 339);
  if (*((unsigned __int8 *)this + 339) != v15)
  {
    *((_BYTE *)this + 339) = v15;
    *((_DWORD *)this + 44) |= 0x10000u;
  }
  return result;
}

uint64_t WebCore::GraphicsContext::drawRaisedEllipse(WebCore::GraphicsContext *this, const WebCore::FloatRect *a2, const WebCore::Color *a3, const WebCore::Color *a4)
{
  float v8;
  _DWORD v10[2];
  uint64_t v11;

  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)this + 96))(this, 1);
  WebCore::GraphicsContext::setStrokeColor(this, a4);
  WebCore::GraphicsContext::setFillColor(this, a4);
  v8 = *((float *)a2 + 1) + 1.0;
  v10[0] = *(_DWORD *)a2;
  *(float *)&v10[1] = v8;
  v11 = *((_QWORD *)a2 + 1);
  (*(void (**)(WebCore::GraphicsContext *, _DWORD *))(*(_QWORD *)this + 160))(this, v10);
  WebCore::GraphicsContext::setStrokeColor(this, a3);
  WebCore::GraphicsContext::setFillColor(this, a3);
  (*(void (**)(WebCore::GraphicsContext *, const WebCore::FloatRect *))(*(_QWORD *)this + 160))(this, a2);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)this + 104))(this, 1);
}

uint64_t WebCore::GraphicsContext::beginTransparencyLayer(uint64_t this, float a2)
{
  ++*(_DWORD *)(this + 712);
  return this;
}

uint64_t WebCore::GraphicsContext::beginTransparencyLayer(uint64_t result)
{
  ++*(_DWORD *)(result + 712);
  return result;
}

uint64_t WebCore::GraphicsContext::endTransparencyLayer(uint64_t this)
{
  --*(_DWORD *)(this + 712);
  return this;
}

void WebCore::GraphicsContext::drawDecomposedGlyphs(WebCore::GraphicsContext *this, const WebCore::Font *a2, const WebCore::DecomposedGlyphs *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const WebCore::AffineTransform *a8)
{
  void *v8;
  int v9;
  CGAffineTransform *v10;
  const WebCore::DecomposedGlyphs *v11;
  const CGSize *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  _BOOL4 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGContext *v27;
  float a;
  _BOOL4 v29;
  double b;
  float d;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  float v35;
  long double v36;
  double v37;
  long double v38;
  float v39;
  float v40;
  float v41;
  int v42;
  void *v44;
  __int128 v45;
  void *v46;
  uint64_t v47;
  float v48;
  float v49;
  const WebCore::AffineTransform *v50;
  float v51;
  const WebCore::AffineTransform *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  BOOL v58;
  unsigned int *v59;
  unsigned int v60;
  double v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  BOOL shouldAntialias[4];
  float v78;
  float v79;
  float32x2_t v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  CGContextRef c;
  CGAffineTransform v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  CGAffineTransform v98;

  v11 = a3;
  v14 = (const CGSize *)*((unsigned int *)a3 + 15);
  if ((_DWORD)v14)
  {
    if ((v14 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19617ACCCLL);
    }
    v15 = (void *)WTF::fastMalloc((WTF *)(2 * (_QWORD)v14));
    memcpy(v15, *((const void **)v11 + 6), 2 * *((unsigned int *)v11 + 15));
  }
  else
  {
    v15 = 0;
  }
  v16 = *((unsigned int *)v11 + 19);
  if ((_DWORD)v16)
  {
    if (v16 >> 28)
    {
      __break(0xC471u);
      goto LABEL_134;
    }
    v8 = (void *)WTF::fastMalloc((WTF *)(16 * v16));
    memcpy(v8, *((const void **)v11 + 8), 16 * *((unsigned int *)v11 + 19));
  }
  else
  {
    v8 = 0;
  }
  if (*((float *)a2 + 24) == 0.0)
    goto LABEL_63;
  v17 = *((_QWORD *)v11 + 10);
  v18 = *((unsigned __int8 *)v11 + 88);
  v19 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
     && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
  if (v19
    && (WebCore::Font::hasAnyComplexColorFormatGlyphs((CTFontRef *)a2, (const unsigned __int16 *)v15, v14) & 1) != 0)
  {
    goto LABEL_63;
  }
  v11 = (const WebCore::DecomposedGlyphs *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)this + 24))(this);
  if (v18 == 1)
    v20 = 0;
  else
    v20 = (*((unsigned __int8 *)a2 + 344) >> 5) & 1;
  *(_DWORD *)shouldAntialias = CGContextGetShouldAntialias();
  v9 = *(_DWORD *)shouldAntialias ^ v20;
  if ((*(_DWORD *)shouldAntialias ^ v20) == 1)
    CGContextSetShouldAntialias(v11, v20);
  v92 = v17;
  if (*((_BYTE *)a2 + 113))
  {
    if (*((_BYTE *)a2 + 100))
      v24 = dbl_1969F7940[(*((_BYTE *)a2 + 256) & 8) == 0];
    else
      v24 = 0.0;
    v61 = -0.249328002;
    if (*((_BYTE *)a2 + 100))
      v61 = 0.0;
    v21 = 1.0 - v61 * 0.0;
    v26 = 0.0 - v61;
    v23 = v24 * 0.0 + -1.0;
    v25 = v61 * 0.0 + 0.0;
    *(double *)&v89 = v21;
    *(double *)&v90 = 0.0 - v61;
    v22 = v24 * 0.0 + 0.0 + 0.0;
    *(double *)&v91 = v25;
    *((double *)&v91 + 1) = v22;
  }
  else
  {
    v89 = constinit_4;
    v90 = xmmword_1969F8630;
    v91 = xmmword_1969F8640;
    v21 = 1.0;
    v22 = 0.0;
    v23 = -1.0;
    v24 = -0.0;
    v25 = 0.0;
    v26 = 0.0;
  }
  *((double *)&v89 + 1) = v24;
  *((double *)&v90 + 1) = v23;
  c = v11;
  v10 = &v88;
  CGContextGetTextMatrix(&v88, v11);
  v98.a = v21;
  v98.b = v24;
  v98.c = v26;
  v98.d = v23;
  v98.tx = v25;
  v98.ty = v22;
  CGContextSetTextMatrix(v11, &v98);
  v27 = (CGContext *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)this + 24))(this);
  CGContextSetShouldAntialiasFonts();
  memset(&v98, 0, sizeof(v98));
  CGContextGetCTM(&v98, v27);
  a = v98.a;
  v29 = 0;
  if ((float)(int)a == a)
  {
    b = v98.b;
    d = v98.d;
    if ((float)(int)d == d && v98.b == 0.0)
      v29 = v98.c == 0.0;
  }
  else
  {
    b = v98.b;
  }
  if (b == 0.0 && v98.c == 0.0)
  {
    v32 = 0;
  }
  else
  {
    v32 = v98.a != 0.0;
    if (v98.d != 0.0)
      v32 = 1;
  }
  if (!v29 && !v32)
    LOBYTE(v29) = *((_BYTE *)this + 344) != 0;
  CGContextSetShouldSubpixelPositionFonts(v27, 1);
  CGContextSetShouldSubpixelQuantizeFonts(v27, v29);
  CGContextSetFontSize(v11, *((float *)a2 + 24));
  LOBYTE(v82) = 0;
  v86 = 0;
  v33 = *((unsigned __int8 *)this + 232);
  if (*((_BYTE *)this + 232))
  {
    v82 = *((_QWORD *)this + 25);
    v83 = *((float *)this + 52);
    v34 = *((_QWORD *)this + 27);
    v84 = v34;
    if ((v34 & 0x8000000000000) != 0)
    {
      v53 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
    }
    v85 = *((_QWORD *)this + 28);
    v86 = 1;
  }
  (*(void (**)(CGAffineTransform *__return_ptr, WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)this + 672))(&v98, this, 1);
  v35 = *((float *)a2 + 85);
  if (v35 != 0.0)
  {
    v79 = *((float *)a2 + 85);
    if (v98.a == 1.0)
    {
      v36 = v98.c;
      if (v98.b == 0.0 && v98.c == 0.0 && (v98.d == 1.0 || v98.d == -1.0))
        goto LABEL_100;
    }
    else
    {
      v36 = v98.c;
    }
    v37 = hypot(v98.a, v98.b);
    v38 = hypot(v36, v98.d);
    v39 = v37;
    *(float *)&v38 = v38 * 0.0;
    v40 = sqrtf((float)(*(float *)&v38 * *(float *)&v38) + (float)(v39 * v39));
    if (v40 != 0.0)
    {
      v35 = v79;
      v41 = v79 / v40;
      if (v41 < v79)
        v35 = v41;
      goto LABEL_39;
    }
LABEL_100:
    v35 = v79;
  }
LABEL_39:
  v42 = 0;
  v78 = v35;
  if (v33)
  {
    if (*((_BYTE *)this + 341) == 1)
    {
      v42 = 0;
      if ((v84 & 0x4000000000000) != 0 && v83 == 0.0 && *((_BYTE *)a2 + 114) == 0)
      {
        if (*((_BYTE *)this + 345))
        {
          if (v98.a != 1.0)
          {
LABEL_49:
            v42 = 0;
            goto LABEL_50;
          }
          v42 = 0;
          if (v98.b != 0.0 || v98.c != 0.0)
            goto LABEL_50;
          v42 = 0;
          v58 = v98.d == -1.0 || v98.d == 1.0;
          if (!v58 || *((_DWORD *)this + 178))
            goto LABEL_50;
        }
        else if (*((_DWORD *)this + 178))
        {
          goto LABEL_49;
        }
        LOBYTE(v93) = 0;
        v97 = 0;
        WebCore::GraphicsContextState::setDropShadow((uint64_t)this + 8, (uint64_t)&v93);
        if (v97)
        {
          if ((v95 & 0x8000000000000) != 0)
          {
            v74 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
            do
            {
              v75 = __ldaxr(v74);
              v76 = v75 - 1;
            }
            while (__stlxr(v76, v74));
            if (!v76)
            {
              atomic_store(1u, v74);
              WTF::fastFree((WTF *)v74, v46);
            }
          }
        }
        (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
        v47 = *((_QWORD *)this + 1);
        v93 = v47;
        if ((v47 & 0x8000000000000) != 0)
        {
          v59 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 + 1, v59));
        }
        v16 = v86;
        if (!v86)
          goto LABEL_134;
        if ((v93 & 0x8000000000000) != 0)
          v48 = *(float *)((v93 & 0xFFFFFFFFFFFFLL) + 0x10);
        else
          v48 = (float)v93 / 255.0;
        if ((v84 & 0x8000000000000) != 0)
          v49 = *(float *)((v84 & 0xFFFFFFFFFFFFLL) + 0x10);
        else
          v49 = (float)v84 / 255.0;
        WebCore::Color::colorWithAlpha((uint64_t)&v84, v48 * v49, &v81);
        WebCore::GraphicsContext::setFillColor(this, (const WebCore::Color *)&v81);
        if (*((_BYTE *)this + 345))
          v51 = -*((float *)&v82 + 1);
        else
          v51 = *((float *)&v82 + 1);
        v80.f32[0] = *(float *)&v82 + *(float *)&v92;
        v80.f32[1] = v51 + *((float *)&v92 + 1);
        WebCore::showGlyphsWithAdvances((WebCore *)&v80, a2, v11, (CGContext *)v15, (const unsigned __int16 *)v8, v14, &v89, v50);
        if (v78 != 0.0)
        {
          v80 = vadd_f32((float32x2_t)LODWORD(v78), v80);
          WebCore::showGlyphsWithAdvances((WebCore *)&v80, a2, v11, (CGContext *)v15, (const unsigned __int16 *)v8, v14, &v89, v52);
        }
        WebCore::GraphicsContext::setFillColor(this, (const WebCore::Color *)&v93);
        v16 = v81;
        if ((v81 & 0x8000000000000) != 0)
          goto LABEL_135;
        goto LABEL_82;
      }
    }
  }
  while (1)
  {
LABEL_50:
    WebCore::showGlyphsWithAdvances((WebCore *)&v92, a2, v11, (CGContext *)v15, (const unsigned __int16 *)v8, v14, &v89, a8);
    if (v78 != 0.0)
    {
      *(float *)&v93 = v78 + *(float *)&v92;
      HIDWORD(v93) = HIDWORD(v92);
      WebCore::showGlyphsWithAdvances((WebCore *)&v93, a2, v11, (CGContext *)v15, (const unsigned __int16 *)v8, v14, &v89, a8);
    }
    if (!v42)
      break;
    v16 = v86;
    if (v86)
    {
      v93 = v82;
      v94 = v83;
      v95 = v84;
      if ((v84 & 0x8000000000000) != 0)
      {
        v55 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 + 1, v55));
      }
      v96 = v85;
      v97 = 1;
      WebCore::GraphicsContextState::setDropShadow((uint64_t)this + 8, (uint64_t)&v93);
      if (v97)
      {
        if ((v95 & 0x8000000000000) != 0)
        {
          v65 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            atomic_store(1u, v65);
            WTF::fastFree((WTF *)v65, v44);
          }
        }
      }
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
      break;
    }
LABEL_134:
    __break(1u);
LABEL_135:
    v68 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      WTF::fastFree((WTF *)v68, a2);
    }
LABEL_82:
    if ((v93 & 0x8000000000000) != 0)
    {
      v71 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        atomic_store(1u, v71);
        WTF::fastFree((WTF *)v71, a2);
      }
    }
    v42 = 1;
  }
  if (v9)
    CGContextSetShouldAntialias(v11, shouldAntialias[0]);
  if (v86)
  {
    if ((v84 & 0x8000000000000) != 0)
    {
      v62 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        atomic_store(1u, v62);
        WTF::fastFree((WTF *)v62, a2);
      }
    }
  }
  v45 = *(_OWORD *)&v10->c;
  *(_OWORD *)&v98.a = *(_OWORD *)&v10->a;
  *(_OWORD *)&v98.c = v45;
  *(_OWORD *)&v98.tx = *(_OWORD *)&v10->tx;
  CGContextSetTextMatrix(c, &v98);
LABEL_63:
  if (v8)
    WTF::fastFree((WTF *)v8, a2);
  if (v15)
    WTF::fastFree((WTF *)v15, a2);
}

uint64_t WebCore::GraphicsContext::drawEmphasisMarks(uint64_t a1, uint64_t a2)
{
  return WebCore::FontCascade::drawEmphasisMarks(a2, a1);
}

uint64_t WebCore::GraphicsContext::drawDisplayListItems(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, float *a5)
{
  WTF *v10;
  _DWORD *v11;
  _QWORD v13[2];
  _QWORD v14[3];
  _DWORD *v15;
  WTF *v16[4];

  (*(void (**)(uint64_t, float, float))(*(_QWORD *)a1 + 648))(a1, *a5, a5[1]);
  v14[0] = a1;
  v14[1] = a2;
  ++a4[2];
  v14[2] = a3;
  v15 = a4;
  v13[0] = 0;
  v13[1] = 0;
  WebCore::DisplayList::Replayer::replay((uint64_t)v14, (const WebCore::FloatRect *)v13, 0, (uint64_t *)v16);
  v10 = v16[0];
  v16[0] = 0;
  if (v10)
    std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100]((int)v16, v10);
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)a1 + 648))(a1, -*a5, -a5[1]);
}

void WebCore::GraphicsContext::createImageBuffer(uint64_t a1@<X0>, float *a2@<X1>, CFTypeRef *a3@<X2>, __int16 a4@<W3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  int v11;
  _BOOL4 v12;
  uint64_t v14;
  uint64_t v15;

  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  v12 = a4 != 0;
  if ((a4 & 0xFF00) == 0)
    v12 = v11;
  if (!v12 || WebCore::s_canUseAcceleratedBuffers == 0)
    goto LABEL_9;
  v14 = 0;
  v15 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferIOSurfaceBackend,WebCore::ImageBuffer>(a2, a3, 1, 0, (uint64_t)&v14, a5, a6);
  if (!*a5)
  {
    *a5 = 0;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v15 + 4));
LABEL_9:
    v14 = 0;
    v15 = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(a2, a3, 1, 0, a5, a6);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v15 + 4));
}

uint64_t WebCore::GraphicsContext::createScaledImageBuffer@<X0>(uint64_t result@<X0>, float *a2@<X1>, float *a3@<X2>, uint64_t a4@<X3>, unsigned __int16 a5@<W4>, unsigned __int16 a6@<W5>, uint64_t *a7@<X8>)
{
  float v9;
  int v10;
  int v11;
  float v12;
  int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  _DWORD v25[2];

  v9 = ceilf(*a2 * *a3);
  if (v9 > -2147500000.0)
    v10 = (int)v9;
  else
    v10 = 0x80000000;
  if (v9 < 2147500000.0)
    v11 = v10;
  else
    v11 = 0x7FFFFFFF;
  v12 = ceilf(a2[1] * a3[1]);
  if (v12 >= 2147500000.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else
  {
    if (v12 <= -2147500000.0)
    {
LABEL_17:
      *a7 = 0;
      return result;
    }
    v13 = (int)v12;
  }
  if (v11 < 1 || v13 <= 0)
    goto LABEL_17;
  v14 = (float)v11;
  v15 = (float)v13;
  v16 = (float)v11 * (float)v13;
  v17 = 1.0;
  if (v16 > 16777000.0)
    v17 = sqrtf(16777000.0 / v16);
  *(float *)v25 = v17;
  *(float *)&v25[1] = v17;
  v22 = v17 * v14;
  v23 = v17 * v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, float *, uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)result
                                                                                                  + 328))(&v24, result, &v22, a4, a5, a6, 1.0);
  result = v24;
  if (v24)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v18 + 632))(v18, v25);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    v20 = v15 / a2[1];
    v22 = v14 / *a2;
    v23 = v20;
    result = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v19 + 632))(v19, &v22);
    v21 = v24;
  }
  else
  {
    v21 = 0;
  }
  *a7 = v21;
  return result;
}

unint64_t WebCore::GraphicsContext::createScaledImageBuffer@<X0>(float32x4_t *this@<X1>, uint64_t a2@<X0>, float *a3@<X2>, uint64_t a4@<X3>, unsigned __int16 a5@<W4>, unsigned __int16 a6@<W5>, uint64_t *a7@<X8>, double a8@<D0>)
{
  unint64_t result;
  int v15;
  int v16;
  unint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25[2];
  uint64_t v26;
  _DWORD v27[2];

  *(float *)&a8 = *a3;
  result = WebCore::scaledImageBufferRect(this, (const WebCore::FloatRect *)this, (const WebCore::FloatSize *)a3, a8, a3[1]);
  if (v15 < 1 || v16 <= 0)
  {
    *a7 = 0;
  }
  else
  {
    v18 = result;
    v19 = (float)v15 * (float)v16;
    v20 = 1.0;
    if (v19 > 16777000.0)
      v20 = sqrtf(16777000.0 / v19);
    *(float *)v27 = v20;
    *(float *)&v27[1] = v20;
    v25[0] = v20 * (float)v15;
    v25[1] = v20 * (float)v16;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, float *, uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)a2 + 328))(&v26, a2, v25, a4, a5, a6, 1.0);
    result = v26;
    if (v26)
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v21 + 632))(v21, v27);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v22 + 648))(v22, (float)-(int)v18, (float)(int)((unint64_t)-(uint64_t)(v18 & 0xFFFFFFFF00000000) >> 32));
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      result = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v23 + 632))(v23, a3);
      v24 = v26;
    }
    else
    {
      v24 = 0;
    }
    *a7 = v24;
  }
  return result;
}

unint64_t WebCore::scaledImageBufferRect(float32x4_t *this, const WebCore::FloatRect *a2, const WebCore::FloatSize *a3, double a4, float a5)
{
  float32x4_t v6;

  *((float *)&a4 + 1) = a5;
  v6 = vmulq_f32(*this, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&a4, 0));
  return WebCore::enclosingIntRect((WebCore *)&v6, a2);
}

uint64_t WebCore::GraphicsContext::createAlignedImageBuffer@<X0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  long double v14[6];

  (*(void (**)(long double *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 672))(v14, a1, 0);
  *(float *)&v10 = hypot(v14[0], v14[1]);
  *(float *)&v11 = hypot(v14[2], v14[3]);
  *(_QWORD *)&v14[0] = __PAIR64__(v11, v10);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  return WebCore::GraphicsContext::createScaledImageBuffer(a1, a2, (float *)v14, a3, v12 | 0x100u, a4, a5);
}

unint64_t WebCore::GraphicsContext::createAlignedImageBuffer@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  double v12;
  __int16 v13;
  long double v15[6];

  (*(void (**)(long double *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 672))(v15, a1, 0);
  *(float *)&v10 = hypot(v15[0], v15[1]);
  *(float *)&v11 = hypot(v15[2], v15[3]);
  *(_QWORD *)&v15[0] = __PAIR64__(v11, v10);
  v12 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  return WebCore::GraphicsContext::createScaledImageBuffer(a2, a1, (float *)v15, a3, v13 | 0x100u, a4, a5, v12);
}

unsigned __int8 **WebCore::GraphicsContext::drawNativeImage(WebCore::GraphicsContext *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, int a5)
{
  uint64_t v9;
  CGImageRef *v10;
  CGColorSpace *ColorSpace;
  CGColorSpaceRef *v13;
  float v14;
  WebCore::DestinationColorSpace *v15;
  uint64_t *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  __int32 v23;
  float32x2_t v24;
  void *v25;
  float v26;
  float v27;
  float32x2_t v28;
  uint64_t v29;

  v9 = *(_QWORD *)&a5 & 0xFFFFFFLL;
  if (a4[1].f32[0] <= 0.0)
    return (unsigned __int8 **)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, uint64_t, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 720))(a1, a2, a3, a4, v9);
  if (a4[1].f32[1] <= 0.0)
    return (unsigned __int8 **)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, uint64_t, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 720))(a1, a2, a3, a4, v9);
  v10 = (CGImageRef *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 16))(*(_QWORD *)(a2 + 48));
  ColorSpace = CGImageGetColorSpace(*v10);
  if (!CGColorSpaceIsHDR(ColorSpace))
    return (unsigned __int8 **)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, uint64_t, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 720))(a1, a2, a3, a4, v9);
  v13 = (CGColorSpaceRef *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a1 + 32))(a1);
  if (CGColorSpaceIsHDR(*v13))
    return (unsigned __int8 **)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, uint64_t, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 720))(a1, a2, a3, a4, v9);
  v26 = WebCore::GraphicsContext::scaleFactor(a1);
  v27 = v14;
  v16 = WebCore::DestinationColorSpace::DisplayP3(v15);
  WebCore::GraphicsContext::createScaledImageBuffer((float32x4_t *)a3, (uint64_t)a1, &v26, (uint64_t)v16, 0x100u, 0x100u, &v29, v17);
  v18 = v29;
  if (!v29)
    return (unsigned __int8 **)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, uint64_t, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 720))(a1, a2, a3, a4, v9);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t))(*(_QWORD *)v19 + 720))(v19, a2, a3, a4, v9);
  v20 = a4[1];
  v21 = vdiv_f32(*(float32x2_t *)(a3 + 8), v20);
  v22.f32[0] = WebCore::GraphicsContext::scaleFactor(a1);
  v22.i32[1] = v23;
  v24 = vmul_f32(v21, v22);
  v26 = 0.0 * v24.f32[0];
  v27 = vmuls_lane_f32(0.0, v24, 1);
  v28 = vmul_f32(v20, v24);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t, uint64_t, float *, uint64_t))(*(_QWORD *)a1 + 384))(a1, v18, a3, &v26, 4641);
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v18 + 8), v25);
}

uint64_t WebCore::GraphicsContext::drawSystemImage(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

uint64_t WebCore::GraphicsContext::drawImage(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  float v8;
  int v9;
  float v10;
  int v11;
  uint64_t v13;
  float v14;
  int v15;
  uint64_t v16;
  float v17;
  int v18;

  v8 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  v16 = *a3;
  v17 = v8;
  v18 = v9;
  v10 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  v13 = 0;
  v14 = v10;
  v15 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 360))(a1, a2, &v16, &v13, *(_QWORD *)&a4 & 0xFFFFFFLL);
}

uint64_t WebCore::GraphicsContext::drawImage(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v8;
  int v9;
  uint64_t v11;
  float v12;
  int v13;

  v8 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, (unsigned __int16)a4 >> 12);
  v11 = 0;
  v12 = v8;
  v13 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 360))(a1, a2, a3, &v11, *(_QWORD *)&a4 & 0xFFFFFFLL);
}

uint64_t WebCore::GraphicsContext::nativeImageForDrawing(WebCore::GraphicsContext *this, WebCore::ImageBuffer *a2)
{
  uint64_t v2;
  WebCore::GraphicsContext *v5;
  WebCore::ImageBuffer *v6;

  if ((*((_BYTE *)this + 716) & 1) != 0)
  {
    v2 = 6;
  }
  else
  {
    v6 = a2;
    v5 = (WebCore::GraphicsContext *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)a2 + 16))(a2);
    a2 = v6;
    v2 = 6;
    if (v5 != this)
      v2 = 7;
  }
  return (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)a2 + 8 * v2))(a2);
}

uint64_t WebCore::GraphicsContext::drawImageBuffer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 20);
  v9 = *a3;
  v10 = v3;
  v11 = v4;
  v6 = 0;
  v7 = v3;
  v8 = v4;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
}

uint64_t WebCore::GraphicsContext::drawImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
}

uint64_t WebCore::GraphicsContext::drawConsumingImageBuffer(uint64_t result, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  v4 = *a2;
  if (!*a2)
    return result;
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(_DWORD *)(v4 + 20);
  *a2 = 0;
  v23 = v4;
  v20 = *a3;
  v21 = v5;
  v22 = v6;
  v17 = 0;
  v18 = v5;
  v19 = v6;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)result + 392))(result, &v23, &v20, &v17, *(_QWORD *)&a4 & 0xFFFFFFLL);
  v8 = v23;
  v23 = 0;
  if (!v8)
    return result;
  v9 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEA534C](v9);
LABEL_7:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
LABEL_14:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return result;
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
    goto LABEL_14;
  if (v12)
    return result;
LABEL_15:
  if (v13)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    return WTF::fastFree((WTF *)v9, v7);
  return result;
}

uint64_t WebCore::GraphicsContext::drawConsumingImageBuffer(uint64_t result, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v4 = *a2;
  if (!*a2)
    return result;
  *a2 = 0;
  v16 = v4;
  v15[0] = 0;
  v15[1] = *(_QWORD *)(v4 + 16);
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)result + 392))(result, &v16, a3, v15, *(_QWORD *)&a4 & 0xFFFFFFLL);
  v6 = v16;
  v16 = 0;
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v7);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v14 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v14 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_10:
  if (!v10)
  {
    if (v11)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (!v12)
      return WTF::fastFree((WTF *)v7, v5);
  }
  return result;
}

_QWORD *WebCore::GraphicsContext::drawConsumingImageBuffer(_QWORD *result, uint64_t *a2, uint64_t a3, float32x4_t *a4, unsigned int a5)
{
  uint64_t v5;
  _QWORD *v9;
  int v10;
  int v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x4_t v26;

  v5 = *a2;
  if (!*a2)
    return result;
  v9 = result;
  v10 = HIWORD(a5) & 0xF;
  v11 = *((unsigned __int8 *)result + 340);
  if (v10)
  {
    v24 = a4;
    if (v11 == v10)
    {
      v12 = 1;
    }
    else
    {
      *((_BYTE *)result + 340) = BYTE2(a5) & 0xF;
      *((_DWORD *)result + 46) |= 0x400u;
      (*(void (**)(_QWORD *, _QWORD *))(*result + 88))(result, result + 1);
      v12 = 0;
      v5 = *a2;
    }
    a4 = v24;
  }
  else
  {
    v12 = 1;
  }
  v26 = *a4;
  v26 = vmulq_n_f32(v26, *(float *)(v5 + 24));
  *a2 = 0;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 136))(&v25, v5);
  v14 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_8;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v14);
LABEL_8:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v23 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v23 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (!v17)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (!v17)
  {
LABEL_16:
    if (v18)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (!v19)
      result = (_QWORD *)WTF::fastFree((WTF *)v14, v13);
  }
LABEL_20:
  if (v25)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, float32x4_t *, uint64_t))(*v9 + 720))(v9, v25, a3, &v26, *(_QWORD *)&a5 & 0xFFFFFFLL);
    v22 = v25;
    v25 = 0;
    if (v22)
      result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v22 + 8), v21);
  }
  if ((v12 & 1) == 0)
  {
    if (*((unsigned __int8 *)v9 + 340) != v11)
    {
      *((_BYTE *)v9 + 340) = v11;
      *((_DWORD *)v9 + 46) |= 0x400u;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v9 + 88))(v9, v9 + 1);
  }
  return result;
}

WebCore::FilterImage *WebCore::GraphicsContext::drawFilteredImageBuffer(WebCore::GraphicsContext *this, WebCore::ImageBuffer *a2, float32x4_t *a3, WebCore::Filter *a4, WebCore::FilterResults *a5)
{
  WebCore::FilterImage *result;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  float v31[4];
  WebCore::FilterImage *v32;
  _QWORD v33[2];

  WebCore::Filter::apply(a4, a2, a3, a5, &v32);
  result = v32;
  if (!v32)
    return result;
  if (*((_QWORD *)v32 + 11))
    v8 = WebCore::FilterImage::imageBufferFromCIImage(v32);
  else
    v8 = WebCore::FilterImage::imageBufferFromPixelBuffer(v32);
  v10 = v8;
  if (v8)
  {
    v11 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
LABEL_8:
      ++*(_QWORD *)(v11 + 8);
      v13 = __ldxr((unsigned __int8 *)v11);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v11))
        {
LABEL_13:
          __asm { FMOV            V1.2S, #1.0 }
          v33[0] = vdiv_f32(_D1, *(float32x2_t *)((char *)a4 + 52));
          (*(void (**)(WebCore::GraphicsContext *, _QWORD *))(*(_QWORD *)this + 632))(this, v33);
          v19 = (float)*((int *)v32 + 10);
          v31[0] = (float)*((int *)v32 + 9);
          v31[1] = v19;
          v20 = (float)*((int *)v32 + 12);
          v31[2] = (float)*((int *)v32 + 11);
          v31[3] = v20;
          v33[0] = 0;
          v33[1] = *(_QWORD *)(v10 + 16);
          (*(void (**)(WebCore::GraphicsContext *, uint64_t, float *, _QWORD *, uint64_t))(*(_QWORD *)this
                                                                                                  + 384))(this, v10, v31, v33, 4641);
          v33[0] = *(_QWORD *)((char *)a4 + 52);
          (*(void (**)(WebCore::GraphicsContext *, _QWORD *))(*(_QWORD *)this + 632))(this, v33);
          v21 = *(_QWORD *)(v10 + 8);
          if (__ldaxr((unsigned __int8 *)v21))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v21))
          {
LABEL_16:
            v23 = *(_QWORD *)(v21 + 8);
            v24 = v23 - 1;
            *(_QWORD *)(v21 + 8) = v23 - 1;
            if (v23 == 1)
            {
              v30 = *(_QWORD *)(v21 + 16);
              v25 = *(_QWORD *)(v21 + 24);
              *(_QWORD *)(v21 + 24) = 0;
              v26 = v30 != 0;
            }
            else
            {
              v25 = 0;
              v26 = 1;
            }
            v27 = __ldxr((unsigned __int8 *)v21);
            if (v27 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v21))
                goto LABEL_20;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_20:
            if (!v24)
            {
              if (v25)
                (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
              if (!v26)
                WTF::fastFree((WTF *)v21, v9);
            }
            goto LABEL_21;
          }
          MEMORY[0x19AEA534C](v21);
          goto LABEL_16;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v11);
    goto LABEL_8;
  }
LABEL_21:
  result = v32;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      WebCore::FilterImage::~FilterImage(v32, v9);
      return (WebCore::FilterImage *)WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  return result;
}

unsigned __int8 **WebCore::GraphicsContext::drawPattern(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v15;
  unsigned __int8 **result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((a1[716] & 1) != 0)
  {
    v15 = 6;
  }
  else
  {
    v20 = a2;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    a2 = v20;
    v15 = 6;
    if ((_BYTE *)v19 != a1)
      v15 = 7;
  }
  result = (unsigned __int8 **)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 8 * v15))(&v21, a2);
  if (v21)
  {
    result = (unsigned __int8 **)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 408))(a1, v21, a3, a4, a5, a6, a7, *(_QWORD *)&a8 & 0xFFFFFFLL);
    v18 = v21;
    v21 = 0;
    if (v18)
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v18 + 8), v17);
  }
  return result;
}

uint64_t WebCore::GraphicsContext::drawControlPart(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, float a5)
{
  return WebCore::ControlPart::draw(a2, a1, a3, a4, a5);
}

uint64_t WebCore::GraphicsContext::clipBounds(WebCore::GraphicsContext *this)
{
  return 0;
}

unsigned int *WebCore::GraphicsContext::fillRectWithRoundedHole(WebCore::GraphicsContext *this, const WebCore::FloatRect *a2, const WebCore::FloatRoundedRect *a3, const WebCore::Color *a4)
{
  __n128 v7;
  int v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  WebCore::Path::addRect((WebCore::Path *)v17, a2);
  if (WebCore::FloatRoundedRect::Radii::isZero((const WebCore::FloatRoundedRect *)((char *)a3 + 16)))
    v7.n128_f64[0] = WebCore::Path::addRect((WebCore::Path *)v17, a3);
  else
    v7.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)v17, a3, 0);
  v8 = *((unsigned __int8 *)this + 192);
  v9 = *((_QWORD *)this + 1);
  v16 = v9;
  if ((v9 & 0x8000000000000) == 0)
  {
    if (v8)
      goto LABEL_6;
    goto LABEL_15;
  }
  v12 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  if (!*((_BYTE *)this + 192))
  {
LABEL_15:
    *((_BYTE *)this + 192) = 1;
    *((_DWORD *)this + 46) |= 2u;
  }
LABEL_6:
  (*(void (**)(WebCore::GraphicsContext *, char *, __n128))(*(_QWORD *)this + 88))(this, (char *)this + 8, v7);
  WebCore::GraphicsContext::setFillColor(this, a4);
  (*(void (**)(WebCore::GraphicsContext *, _BYTE *))(*(_QWORD *)this + 176))(this, v17);
  if ((v8 != 0) == (*((_BYTE *)this + 192) == 0))
  {
    *((_BYTE *)this + 192) = v8;
    *((_DWORD *)this + 46) |= 2u;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  result = (unsigned int *)WebCore::GraphicsContext::setFillColor(this, (const WebCore::Color *)&v16);
  if ((v16 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
  }
  if (v19 != -1)
    return (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_5[v19])(&v16, &v18);
  return result;
}

float WebCore::GraphicsContext::adjustLineToPixelBoundaries(float *a1, float *a2, char a3, float result)
{
  float *v4;

  if ((a3 & 0xFE) == 2)
  {
    if (*a1 == *a2)
    {
      a1[1] = a1[1] + result;
      v4 = a2 + 1;
    }
    else
    {
      *a1 = *a1 + result;
      v4 = a2;
    }
    *v4 = *v4 - result;
  }
  if (((int)result & 1) != 0)
  {
    if (*a1 == *a2)
    {
      *a1 = *a1 + 0.5;
    }
    else
    {
      a1[1] = a1[1] + 0.5;
      ++a2;
    }
    result = *a2 + 0.5;
    *a2 = result;
  }
  return result;
}

float WebCore::GraphicsContext::scaleFactorForDrawing(WebCore::GraphicsContext *this, const WebCore::FloatRect *a2, const WebCore::FloatRect *a3)
{
  BOOL v5;
  float v6;
  float v8;
  double v9;
  double v10;
  float v11;
  double v12;
  float v13;
  double v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v22;
  float v23;
  double v25[2];
  double v26;
  double v27;
  double v28;

  (*(void (**)(double *__return_ptr, WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)this + 672))(v25, this, 0);
  if (v25[0] == 1.0 && v25[1] == 0.0 && (v26 == 0.0 ? (v5 = v27 == 1.0) : (v5 = 0), v5))
  {
    v6 = *((float *)a2 + 2);
  }
  else
  {
    v8 = *((float *)a2 + 1);
    v9 = *(float *)a2;
    v10 = v26 * v8;
    v11 = v28 + v10 + v25[0] * v9;
    v12 = (float)(*(float *)a2 + *((float *)a2 + 2));
    v13 = v28 + v10 + v25[0] * v12;
    v14 = v26 * (float)(v8 + *((float *)a2 + 3));
    v15 = v28 + v14 + v25[0] * v12;
    v16 = v15;
    v17 = v28 + v14 + v25[0] * v9;
    if (v17 >= v16)
      v18 = v15;
    else
      v18 = v17;
    if (v13 >= v11)
      v19 = v11;
    else
      v19 = v13;
    if (v18 >= v19)
      v18 = v19;
    v20 = fabsf(v18);
    if (v20 == INFINITY || v20 > 2147500000.0)
      v18 = (float)((SLODWORD(v18) >> 31) ^ 0x7FFFFFFF);
    if (v11 < v13)
      v11 = v13;
    if (v16 >= v17)
      v22 = v15;
    else
      v22 = v17;
    if (v11 < v22)
      v11 = v22;
    v23 = fabsf(v11);
    if (v23 == INFINITY || v23 > 2147500000.0)
      v11 = (float)((SLODWORD(v11) >> 31) ^ 0x7FFFFFFF);
    v6 = v11 - v18;
  }
  return v6 / *((float *)a3 + 2);
}

uint64_t WebCore::GraphicsContext::drawPath(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2);
}

uint64_t WebCore::GraphicsContext::fillEllipseAsPath(WebCore::GraphicsContext *this, __n128 *a2)
{
  __n128 v3;
  uint64_t result;
  char v5;
  _BYTE v6[8];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v3 = WebCore::Path::addEllipseInRect((WebCore::Path *)v6, a2);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, _BYTE *, __n128))(*(_QWORD *)this + 176))(this, v6, v3);
  if (v8 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_5[v8])(&v5, &v7);
  return result;
}

uint64_t WebCore::GraphicsContext::strokeEllipseAsPath(WebCore::GraphicsContext *this, __n128 *a2)
{
  __n128 v3;
  uint64_t result;
  char v5;
  _BYTE v6[8];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v3 = WebCore::Path::addEllipseInRect((WebCore::Path *)v6, a2);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, _BYTE *, __n128))(*(_QWORD *)this + 184))(this, v6, v3);
  if (v8 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_5[v8])(&v5, &v7);
  return result;
}

WTF *WebCore::GraphicsContext::drawLineForText(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v9;
  double v10;
  double *v11;
  void *v12;
  WTF *result;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *(_QWORD *)a2;
  v9 = a2[3];
  v10 = a2[2];
  v11 = (double *)WTF::fastMalloc((WTF *)0x10);
  v14 = (WTF *)v11;
  *v11 = 0.0;
  v11[1] = v10;
  v15 = 0x200000002;
  (*(void (**)(uint64_t, uint64_t *, WTF **, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 568))(a1, &v16, &v14, a3, a4, a5, v9);
  result = v14;
  if (v14)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v12);
  }
  return result;
}

float WebCore::GraphicsContext::computeUnderlineBoundsForText(WebCore::GraphicsContext *this, const WebCore::FloatRect *a2, int a3)
{
  void *v3;
  float result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  float v8;
  uint64_t v9;

  v9 = 0;
  result = WebCore::GraphicsContext::computeLineBoundsAndAntialiasingModeForText(this, a2, a3, (WebCore::Color *)&v9);
  if ((v9 & 0x8000000000000) != 0)
  {
    v8 = result;
    v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v3);
      return v8;
    }
  }
  return result;
}

float WebCore::GraphicsContext::computeLineBoundsAndAntialiasingModeForText(WebCore::GraphicsContext *this, const WebCore::FloatRect *a2, int a3, WebCore::Color *a4)
{
  float v5;
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  float v18;
  float v19;
  double v20;
  double v21;
  double v22;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  long double v29;
  long double v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v5 = *(float *)a2;
  if (!a3)
  {
    (*(void (**)(long double *__return_ptr, WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)this + 672))(&v29, this, 0);
    v8 = v29;
    v7 = v30;
    v9 = v29;
    if (v30 != 0.0)
      v9 = hypot(v29, v30);
    v10 = v9;
    if (v10 < 1.0)
    {
      WebCore::Color::colorWithAlphaMultipliedBy(a4, fmaxf(v10, 0.4), &v28);
      WebCore::Color::operator=((unint64_t *)a4, &v28);
      if ((v28 & 0x8000000000000) != 0)
      {
        v25 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v24);
        }
      }
      v8 = v29;
      v7 = v30;
    }
    v11 = v8 * v32 - v7 * v31;
    v12 = fabs(v11);
    if ((unint64_t)(*(_QWORD *)&v12 - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&v12 - 1) <= 0xFFFFFFFFFFFFELL)
    {
      v14 = *(float *)a2;
      v15 = *((float *)a2 + 1);
      v16 = v33 + v31 * v15 + v8 * v14;
      v17 = v34 + v32 * v15 + v7 * v14;
      *(float *)&v15 = v16;
      *(float *)&v16 = v17;
      v18 = roundf(*(float *)&v15);
      v19 = ceilf(*(float *)&v16);
      if (v8 == 1.0 && v7 == 0.0 && v31 == 0.0 && v32 == 1.0)
      {
        v22 = -v33;
        v21 = 0.0;
        v20 = 1.0;
      }
      else
      {
        v20 = v32 / v11;
        v21 = -v31 / v11;
        v22 = (v31 * v34 - v32 * v33) / v11;
      }
      return v22 + v21 * v19 + v20 * v18;
    }
  }
  return v5;
}

uint64_t WebCore::Color::colorWithAlphaMultipliedBy@<X0>(WebCore::Color *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  float v3;

  if ((*(_QWORD *)this & 0x8000000000000) != 0)
    v3 = *(float *)((*(_QWORD *)this & 0xFFFFFFFFFFFFLL) + 0x10);
  else
    v3 = (float)*(_QWORD *)this / 255.0;
  return WebCore::Color::colorWithAlpha((uint64_t)this, v3 * a2, a3);
}

uint64_t WebCore::GraphicsContext::paintFrameForMedia(WebCore::GraphicsContext *this, WebCore::MediaPlayer *a2, const WebCore::FloatRect *a3)
{
  return (*(uint64_t (**)(_QWORD, WebCore::GraphicsContext *, const WebCore::FloatRect *))(**((_QWORD **)a2 + 9) + 656))(*((_QWORD *)a2 + 9), this, a3);
}

uint64_t WebCore::GraphicsContext::paintVideoFrame(WebCore::GraphicsContext *this, WebCore::VideoFrame *a2, const WebCore::FloatRect *a3)
{
  char v4;

  v4 = 1;
  return WebCore::VideoFrame::paintInContext(a2, this, a3, (const WebCore::ImageOrientation *)&v4);
}

_QWORD *WebCore::GraphicsContextGL::Client::Client(_QWORD *this)
{
  *this = off_1E340BCF8;
  return this;
}

double WebCore::GraphicsContextGL::GraphicsContextGL(uint64_t a1, uint64_t a2, __int16 a3)
{
  double result;

  *(_QWORD *)a1 = &unk_1E340BD28;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 33) = a2;
  *(_WORD *)(a1 + 41) = a3;
  return result;
}

uint64_t WebCore::GraphicsContextGL::externalImageTextureBindingPoint(WebCore::GraphicsContextGL *this)
{
  return 0x806900000DE1;
}

uint64_t WebCore::GraphicsContextGL::computeBytesPerGroup(WebCore::GraphicsContextGL *this, int a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;

  v2 = (int)this;
  result = 0;
  v4 = 1;
  if (v2 > 33318)
  {
    if (v2 <= 35905)
    {
      if ((v2 - 33319) < 2)
      {
LABEL_12:
        v4 = 2;
        goto LABEL_19;
      }
      if (v2 == 34041)
        goto LABEL_19;
      if (v2 != 35904)
        return result;
      goto LABEL_15;
    }
    if (v2 > 36247)
    {
      if (v2 == 36248)
      {
LABEL_15:
        v4 = 3;
        goto LABEL_19;
      }
      v5 = 36249;
LABEL_17:
      if (v2 != v5)
        return result;
    }
    else if (v2 != 35906)
    {
      if (v2 != 36244)
        return result;
LABEL_19:
      if (a2 <= 32818)
      {
        if ((a2 - 5120) > 0xB)
          return 0;
        if (((1 << a2) & 0x70) != 0)
          return (4 * v4);
        if (((1 << a2) & 0x80C) == 0)
        {
          result = v4;
          if (((1 << a2) & 3) != 0)
            return result;
          return 0;
        }
      }
      else
      {
        if (a2 <= 35898)
        {
          if (a2 <= 33639)
          {
            result = 2;
            if ((a2 - 32819) < 2 || a2 == 33635)
              return result;
            return 0;
          }
          if (a2 == 33640)
            return 4;
          v6 = 34042;
LABEL_35:
          if (a2 != v6)
            return 0;
          return 4;
        }
        if (a2 <= 36192)
        {
          if (a2 == 35899)
            return 4;
          v6 = 35902;
          goto LABEL_35;
        }
        if (a2 != 36193)
        {
          if (a2 == 36269)
            return (8 * v4);
          return 0;
        }
      }
      return (2 * v4);
    }
LABEL_18:
    v4 = 4;
    goto LABEL_19;
  }
  switch(v2)
  {
    case 6402:
    case 6403:
    case 6406:
    case 6409:
      goto LABEL_19;
    case 6404:
    case 6405:
      return result;
    case 6407:
      goto LABEL_15;
    case 6408:
      goto LABEL_18;
    case 6410:
      goto LABEL_12;
    default:
      v5 = 32993;
      goto LABEL_17;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGL::computeImageSize@<X0>(WebCore::GraphicsContextGL *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, unsigned int *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;
  int v11;
  _BOOL4 v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BOOL4 v21;
  char v22;
  unint64_t v23;
  _BOOL4 v24;
  BOOL v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  BOOL v39;
  int v40;
  char v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  _BOOL4 v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  char v53;
  _BOOL4 v54;

  result = WebCore::GraphicsContextGL::computeBytesPerGroup(a1, a2);
  if (!(_DWORD)result)
    goto LABEL_92;
  if (!(_DWORD)a3 || !a4 || !HIDWORD(a3))
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
LABEL_8:
    *(_BYTE *)(a6 + 16) = 1;
    return result;
  }
  v11 = a5[1];
  if (v11 <= 0)
  {
    v12 = (int)a3 >= 0;
    v11 = a3;
  }
  else
  {
    v12 = 1;
  }
  LODWORD(v13) = a5[2];
  v14 = (int)v13 > 0;
  if ((int)v13 <= 0)
    LODWORD(v13) = HIDWORD(a3);
  if (a3 >= 0)
    v14 = 1;
  if (!v14)
    v13 = HIDWORD(a3);
  v15 = !v14;
  if (!v12
    || (v16 = v11 * (unint64_t)result, (v16 & 0xFFFFFFFF00000000) != 0)
    || (v17 = *a5, (*a5 & 0x80000000) != 0))
  {
    LODWORD(v16) = 0;
    v20 = 1;
  }
  else if (v16 % v17)
  {
    v18 = v17 - v16 % v17;
    v19 = __CFADD__((_DWORD)v16, v18);
    LODWORD(v16) = v16 + v18;
    v20 = v19;
    if (v19)
      LODWORD(v16) = 0;
  }
  else
  {
    v20 = 0;
  }
  v21 = 0;
  v22 = a4 < 0 || !v14;
  v23 = v13 * (unint64_t)(a4 - 1);
  v24 = (v23 & 0xFFFFFFFF00000000) == 0;
  if ((v23 & 0xFFFFFFFF00000000) != 0)
    LODWORD(v23) = 0;
  v25 = (v22 & 1) == 0;
  v26 = (v22 & 1) == 0 && v24;
  if (!v25)
    LODWORD(v23) = 0;
  v27 = a3 >= 0 && v26;
  v28 = (v23 + HIDWORD(a3));
  v29 = __CFADD__((_DWORD)v23, HIDWORD(a3));
  v30 = a3 * (unint64_t)result;
  v32 = (v30 & 0xFFFFFFFF00000000) != 0 || (int)a3 < 0;
  if (v32)
    v33 = 0;
  else
    v33 = a3 * result;
  if (!v27)
    goto LABEL_59;
  v34 = 0;
  if (v29)
    goto LABEL_60;
  v21 = 0;
  if ((unint64_t)(v28 - 1) >> 32)
  {
LABEL_59:
    v34 = 0;
  }
  else
  {
    v34 = 0;
    if (!v20)
    {
      v35 = (v28 - 1) * (unint64_t)v16;
      v21 = (v35 & 0xFFFFFFFF00000000) == 0;
      if ((v35 & 0xFFFFFFFF00000000) != 0)
        v34 = 0;
      else
        v34 = (v28 - 1) * v16;
    }
  }
LABEL_60:
  v36 = 0;
  v37 = __CFADD__(v34, v33);
  v38 = v34 + v33;
  v39 = __CFADD__(v34, v33);
  if (v37)
    v40 = 0;
  else
    v40 = v38;
  v41 = v21 & ~(_BYTE)v32;
  if ((v21 & ~v32) != 0)
    v42 = v40;
  else
    v42 = 0;
  v43 = a5[4];
  v44 = a5[5];
  v45 = a5[3];
  if (v44 < 0)
    v46 = 1;
  else
    v46 = v15;
  v47 = v44 * (unint64_t)v13;
  v48 = 1;
  if ((v43 & 0x80000000) == 0 && (v46 & 1) == 0 && (v47 & 0xFFFFFFFF00000000) == 0)
  {
    v36 = 0;
    v19 = __CFADD__((_DWORD)v47, v43);
    v49 = v47 + v43;
    if (!v19 && !v20)
    {
      v50 = v16 * (unint64_t)v49;
      v48 = (v50 & 0xFFFFFFFF00000000) != 0;
      if ((v50 & 0xFFFFFFFF00000000) != 0)
        v36 = 0;
      else
        v36 = v50;
    }
  }
  if ((v45 & 0x80000000) == 0)
  {
    v51 = result * (unint64_t)v45;
    if ((v51 & 0xFFFFFFFF00000000) == 0 && !v48)
    {
      v52 = v36 + v51;
      if (!__CFADD__(v36, (_DWORD)v51))
      {
        v53 = v39 | ~v41;
        v54 = __CFADD__(v52, v42);
        if ((v53 & 1) == 0 && !v54)
        {
          if (v20 || v32)
          {
            __break(0xC471u);
            JUMPOUT(0x19617CC70);
          }
          *(_DWORD *)a6 = v52;
          *(_DWORD *)(a6 + 4) = v42;
          *(_DWORD *)(a6 + 8) = v16;
          *(_DWORD *)(a6 + 12) = v30;
          goto LABEL_8;
        }
      }
    }
  }
LABEL_92:
  *(_BYTE *)a6 = 0;
  *(_BYTE *)(a6 + 16) = 0;
  return result;
}

uint64_t WebCore::GraphicsContextGL::packImageData(uint64_t a1, uint64_t a2, WebCore::GraphicsContextGL *a3, unsigned int a4, char a5, unsigned __int8 a6, unsigned int a7, int a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, int a13, uint64_t a14)
{
  uint64_t result;
  unsigned int v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  char *v34;
  unsigned __int8 v35;
  int v36;
  _BYTE v37[4];
  unsigned int v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  result = 0;
  if (a1 && a2)
  {
    v42 = 0;
    v41 = 0;
    v43 = 0;
    v40 = 1;
    result = WebCore::GraphicsContextGL::computeImageSize(a3, a4, *(_QWORD *)(a10 + 8), a11, &v40, (uint64_t)v37);
    if (v39)
    {
      v35 = a6;
      v36 = a8;
      v23 = v38;
      v24 = *(unsigned int *)(a14 + 12);
      if (v24 < v38)
      {
        v25 = *(unsigned int *)(a14 + 8);
        if (v25 < v38)
        {
          v26 = v25 + (v25 >> 2);
          if (v26 >= 0x10)
            v27 = v26 + 1;
          else
            v27 = 16;
          if (v27 <= v38)
            v28 = v38;
          else
            v28 = v27;
          if (HIDWORD(v28))
          {
            __break(0xC471u);
            return result;
          }
          v33 = v28;
          v34 = *(char **)a14;
          v29 = (void *)WTF::fastMalloc((WTF *)v28);
          *(_DWORD *)(a14 + 8) = v33;
          *(_QWORD *)a14 = v29;
          memcpy(v29, v34, v24);
          if (v34)
          {
            if (*(char **)a14 == v34)
            {
              *(_QWORD *)a14 = 0;
              *(_DWORD *)(a14 + 8) = 0;
            }
            WTF::fastFree((WTF *)v34, v30);
          }
        }
      }
      *(_DWORD *)(a14 + 12) = v23;
      result = WebCore::packPixels(a2, a7, v36, (_DWORD *)a10, a11, a12, a13, a3, a4, v35, *(char **)a14, a5);
      if ((_DWORD)result)
      {
        v31 = *(_QWORD *)(a1 + 32);
        if (v31)
        {
          v32 = *(_DWORD **)(v31 + 8);
          if (v32)
          {
            ++v32[2];
            (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v32 + 64))(v32, a1);
            if (v32[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
            else
              --v32[2];
          }
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::packPixels(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int a5, unsigned int a6, int a7, WebCore *this, unsigned int a9, unsigned __int8 a10, char *a11, char a12)
{
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  size_t v39;
  void *v40;
  void *v41;
  WTF *v42;
  int v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _DWORD *v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  char v58;
  WTF *v59;

  v15 = (int)a4[3];
  if (a7)
    v16 = a7;
  else
    v16 = a4[3];
  if (a2 > 0x44)
    v17 = 0;
  else
    v17 = dword_1969F79DC[(char)a2];
  v18 = v17 * a3;
  if (a6 && v18 % a6)
    v18 = v18 + a6 - v18 % a6;
  if (a2 > 0x44)
    v19 = 0;
  else
    v19 = dword_1969F79DC[(char)a2];
  v20 = *a4;
  result = WebCore::getDataFormat(this, a9);
  if ((_DWORD)result == 69)
    return 0;
  v23 = result;
  v24 = a4[2];
  v25 = a1;
  if (result > 0x44)
    v26 = 0;
  else
    v26 = dword_1969F79DC[result];
  v27 = v26 * v24;
  if (a12)
    v28 = &a11[v27 * ((int)v15 * a5 - 1)];
  else
    v28 = a11;
  if (a12)
    v29 = -v27;
  else
    v29 = v27;
  if (((a2 - 6) > 0x3A || ((1 << (a2 - 6)) & 0x64E400001C9001FLL) == 0)
    && a2 >= 4)
  {
    goto LABEL_53;
  }
  v30 = 0;
  if (a2 <= 0x39 && ((1 << a2) & 0x39F3FFFF27E7FCFLL) != 0)
  {
    if (result > 0x39)
    {
LABEL_53:
      v30 = 0;
      goto LABEL_32;
    }
    if (((1 << result) & 0x39F3FFFF27E7FCFLL) != 0)
      v30 = a10;
    else
      v30 = 0;
  }
LABEL_32:
  v31 = v19 * v20;
  if ((_DWORD)result == (_DWORD)a2 && !(_DWORD)v30)
  {
    v32 = v16;
    v33 = (int)a4[1];
    v34 = v18;
    v35 = v25 + (int)v33 * (uint64_t)v18;
    v36 = v25 + (v33 + v15) * v18;
    if (a5 > 1 && a12)
    {
      v37 = v32;
      v38 = v32 * (a5 - 1) * v18;
      v35 -= v38;
      v36 -= v38;
    }
    else
    {
      if (a5 < 1)
        return 1;
      v37 = v32;
    }
    v43 = 0;
    if (v29 >= 0)
      v44 = v29;
    else
      v44 = -v29;
    v45 = v31;
    v46 = v29;
    v47 = v18 * (uint64_t)v37;
    do
    {
      if (v35 < v36)
      {
        v48 = v35;
        do
        {
          memcpy(v28, (const void *)(v48 + v45), v44);
          v48 += v34;
          v28 += v46;
        }
        while (v48 < v36);
      }
      v35 += v47;
      v36 += v47;
      ++v43;
    }
    while (v43 != a5);
    return 1;
  }
  v50 = a4;
  v51 = a5;
  v52 = v16;
  v53 = v25;
  v54 = v28;
  v55 = v18;
  v56 = v19 * v20;
  v57 = v29;
  v58 = 0;
  if ((v24 & 0x80000000) == 0)
  {
    v39 = 16 * v24;
    v40 = (void *)WTF::fastMalloc((WTF *)(16 * v24));
    bzero(v40, v39);
    v59 = (WTF *)v40;
    WebCore::FormatConverter::convert(&v50, a2, v23, v30);
    v22 = v58 != 0;
    v42 = v59;
    v59 = 0;
    if (v42)
      WTF::fastFree(v42, v41);
    return v22;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::GraphicsContextGL::extractPixelBuffer(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5, WebCore::GraphicsContextGL *a6, unsigned int a7, char a8, char a9, uint64_t a10)
{
  int v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  char *__src;
  int v30;
  int v31;
  _BYTE v32[4];
  unsigned int v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v18 = *(_DWORD *)(a1 + 32);
  v37 = 0;
  v36 = 0;
  v38 = 0;
  v35 = 1;
  result = WebCore::GraphicsContextGL::computeImageSize(a6, a7, *(_QWORD *)(a3 + 8), a4, &v35, (uint64_t)v32);
  if (!v34)
    return 0;
  v31 = v18;
  v20 = a8;
  v21 = v33;
  v22 = *(unsigned int *)(a10 + 12);
  if (v22 >= v33 || (v23 = *(unsigned int *)(a10 + 8), v23 >= v33))
  {
LABEL_15:
    *(_DWORD *)(a10 + 12) = v21;
    return WebCore::packPixels(*(_QWORD *)(a1 + 40), a2, v31, (_DWORD *)a3, a4, 0, a5, a6, a7, a9, *(char **)a10, v20);
  }
  v30 = a5;
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= v33)
    v26 = v33;
  else
    v26 = v25;
  if (!HIDWORD(v26))
  {
    __src = *(char **)a10;
    v27 = (void *)WTF::fastMalloc((WTF *)v26);
    *(_DWORD *)(a10 + 8) = v26;
    *(_QWORD *)a10 = v27;
    memcpy(v27, __src, v22);
    a5 = v30;
    if (__src)
    {
      if (*(char **)a10 == __src)
      {
        *(_QWORD *)a10 = 0;
        *(_DWORD *)(a10 + 8) = 0;
      }
      WTF::fastFree((WTF *)__src, v28);
    }
    goto LABEL_15;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::GraphicsContextGL::extractTextureData(unsigned int a1, uint64_t a2, WebCore *this, unsigned int a4, unsigned int *a5, char a6, unsigned __int8 a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t DataFormat;
  uint64_t result;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  unsigned int v29;
  int v30;
  int v31;
  size_t v32;
  char *__src;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37[4];
  char v38;

  DataFormat = WebCore::getDataFormat(this, a4);
  if ((_DWORD)DataFormat == 69)
    return 0;
  v20 = DataFormat;
  result = WebCore::GraphicsContextGL::computeBytesPerGroup(this, a4);
  if ((_DWORD)result)
  {
    v21 = result;
    result = WebCore::GraphicsContextGL::computeImageSize(this, a4, a1 | (unint64_t)(a2 << 32), 1, a5, (uint64_t)v37);
    if (!v38)
      return 0;
    v22 = a2 * a1 * v21;
    if (*(_DWORD *)(a11 + 12) < v22)
    {
      v23 = *(unsigned int *)(a11 + 8);
      if (v23 < v22)
      {
        v32 = *(unsigned int *)(a11 + 12);
        v24 = v23 + (v23 >> 2);
        if (v24 >= 0x10)
          v25 = v24 + 1;
        else
          v25 = 16;
        if (v25 <= v22)
          v26 = v22;
        else
          v26 = v25;
        if (HIDWORD(v26))
        {
          __break(0xC471u);
          return result;
        }
        __src = *(char **)a11;
        v31 = v26;
        v27 = (void *)WTF::fastMalloc((WTF *)v26);
        *(_DWORD *)(a11 + 8) = v31;
        *(_QWORD *)a11 = v27;
        memcpy(v27, __src, v32);
        if (__src)
        {
          if (*(char **)a11 == __src)
          {
            *(_QWORD *)a11 = 0;
            *(_DWORD *)(a11 + 8) = 0;
          }
          WTF::fastFree((WTF *)__src, v28);
        }
      }
    }
    *(_DWORD *)(a11 + 12) = v22;
    v29 = *a5;
    if (a5[1])
      v30 = a5[1];
    else
      v30 = a1;
    v34 = 0;
    v35 = a1;
    v36 = a2;
    return WebCore::packPixels(a9 + v37[0], v20, v30, &v34, 1, v29, 0, this, a4, a7, *(char **)a11, a6);
  }
  return result;
}

uint64_t WebCore::getDataFormat(WebCore *this, int a2)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;

  v2 = (int)this;
  if (a2 <= 32818)
  {
    switch(a2)
    {
      case 5120:
        result = 43;
        if (v2 <= 33318)
        {
          if (v2 == 6403)
            return result;
          if (v2 != 6407)
          {
            v5 = 6408;
LABEL_79:
            if (v2 != v5)
              return 69;
            return 1;
          }
        }
        else
        {
          if (v2 <= 36247)
          {
            if ((v2 - 33319) < 2)
              return 35;
            v6 = 36244;
            goto LABEL_103;
          }
          if (v2 != 36248)
          {
            v5 = 36249;
            goto LABEL_79;
          }
        }
        return 12;
      case 5121:
        result = 11;
        if (v2 <= 33318)
        {
          switch(v2)
          {
            case 6403:
            case 6409:
              return 42;
            case 6406:
              result = 60;
              break;
            case 6407:
              return result;
            case 6408:
              return 0;
            case 6410:
              result = 52;
              break;
            default:
              return 69;
          }
        }
        else
        {
          if (v2 > 36243)
          {
            if (v2 == 36244)
              return 42;
            if (v2 == 36248)
              return result;
            v4 = 36249;
          }
          else
          {
            if ((v2 - 33319) < 2)
              return 34;
            if (v2 == 35904)
              return result;
            v4 = 35906;
          }
          if (v2 != v4)
            return 69;
          return 0;
        }
        return result;
      case 5122:
        if ((int)this > 36247)
        {
          if ((_DWORD)this == 36248)
          {
            return 14;
          }
          else
          {
            if ((_DWORD)this != 36249)
              return 69;
            return 3;
          }
        }
        else if ((_DWORD)this == 33320)
        {
          return 37;
        }
        else
        {
          if ((_DWORD)this != 36244)
            return 69;
          return 45;
        }
      case 5123:
        if ((int)this <= 36243)
        {
          if ((_DWORD)this == 6402)
          {
            return 65;
          }
          else
          {
            if ((_DWORD)this != 33320)
              return 69;
            return 36;
          }
        }
        else
        {
          switch((_DWORD)this)
          {
            case 0x8D94:
              return 44;
            case 0x8D98:
              return 13;
            case 0x8D99:
              return 2;
            default:
              return 69;
          }
        }
      case 5124:
        if ((int)this > 36247)
        {
          if ((_DWORD)this == 36248)
          {
            return 18;
          }
          else
          {
            if ((_DWORD)this != 36249)
              return 69;
            return 7;
          }
        }
        else if ((_DWORD)this == 33320)
        {
          return 39;
        }
        else
        {
          if ((_DWORD)this != 36244)
            return 69;
          return 49;
        }
      case 5125:
        if ((int)this <= 36243)
        {
          if ((_DWORD)this == 6402)
          {
            return 66;
          }
          else
          {
            if ((_DWORD)this != 33320)
              return 69;
            return 38;
          }
        }
        else
        {
          switch((_DWORD)this)
          {
            case 0x8D94:
              return 48;
            case 0x8D98:
              return 17;
            case 0x8D99:
              return 6;
            default:
              return 69;
          }
        }
      case 5126:
        result = 9;
        if (v2 > 33318)
        {
          if (v2 == 33319)
          {
            return 41;
          }
          else
          {
            if (v2 != 35904)
              goto LABEL_76;
            return 20;
          }
        }
        else
        {
          switch(v2)
          {
            case 6402:
              result = 67;
              break;
            case 6403:
            case 6409:
              result = 51;
              break;
            case 6406:
              result = 64;
              break;
            case 6407:
              return 20;
            case 6408:
              return result;
            case 6410:
              result = 56;
              break;
            default:
              return 69;
          }
        }
        return result;
      case 5131:
        goto LABEL_21;
      default:
        return 69;
    }
  }
  if (a2 <= 34041)
  {
    if (a2 > 33634)
    {
      if (a2 == 33635)
        return 31;
      if (a2 == 33640)
        return 10;
    }
    else
    {
      if (a2 == 32819)
        return 30;
      if (a2 == 32820)
        return 29;
    }
    return 69;
  }
  if (a2 <= 35901)
  {
    if (a2 == 34042)
      return 68;
    if (a2 == 35899)
      return 32;
    return 69;
  }
  if (a2 == 35902)
    return 33;
  if (a2 != 36193)
    return 69;
LABEL_21:
  result = 8;
  if (v2 > 33318)
  {
    if (v2 == 33319)
      return 40;
    if (v2 == 35904)
      return 19;
LABEL_76:
    v6 = 35906;
LABEL_103:
    if (v2 == v6)
      return result;
    return 69;
  }
  switch(v2)
  {
    case 6403:
    case 6409:
      result = 50;
      break;
    case 6406:
      result = 63;
      break;
    case 6407:
      return 19;
    case 6408:
      return result;
    case 6410:
      result = 55;
      break;
    default:
      return 69;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGL::paintToCanvas(uint64_t this, int32x2_t *a2, const WebCore::IntSize *a3, WebCore::GraphicsContext *a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  _QWORD v14[2];

  if (a2->i32[0] >= 1 && a2->i32[1] >= 1)
  {
    v7 = this;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 48) + 24))(*(_QWORD *)(this + 48));
    v9 = v8;
    v10 = HIDWORD(v8);
    v14[0] = 0;
    v14[1] = vcvt_f32_s32(*a2);
    (*(void (**)(const WebCore::IntSize *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
    v11 = 0xBF8000003F800000;
    (*(void (**)(const WebCore::IntSize *, unint64_t *))(*(_QWORD *)a3 + 632))(a3, &v11);
    (*(void (**)(const WebCore::IntSize *, float, float))(*(_QWORD *)a3 + 648))(a3, 0.0, (float)-(int)v10);
    if (*((_BYTE *)a3 + 340) != 1)
    {
      *((_BYTE *)a3 + 340) = 1;
      *((_DWORD *)a3 + 46) |= 0x400u;
    }
    (*(void (**)(const WebCore::IntSize *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
    v11 = 0;
    v12 = (float)v9;
    v13 = (float)(int)v10;
    WebCore::NativeImage::draw(v7, a3, (uint64_t)v14, (float32x2_t *)&v11, 4385);
    return (*(uint64_t (**)(const WebCore::IntSize *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  }
  return this;
}

unsigned __int8 **WebCore::GraphicsContextGL::paintToCanvas(unsigned __int8 **result, uint64_t *a2, int32x2_t *a3, const WebCore::IntSize *a4)
{
  WebCore::GraphicsContext *v7;
  void *v8;
  WebCore::GraphicsContextGL *v9;
  WebCore::GraphicsContextGL *v10;

  if (a3->i32[0] >= 1 && a3->i32[1] >= 1)
  {
    WebCore::GraphicsContextGL::createNativeImageFromPixelBuffer(result, a2, &v10);
    result = (unsigned __int8 **)WebCore::GraphicsContextGL::paintToCanvas((uint64_t)v10, a3, a4, v7);
    v9 = v10;
    v10 = 0;
    if (v9)
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v9 + 1, v8);
  }
  return result;
}

uint64_t WebCore::GraphicsContextGL::forceContextLost(WebCore::GraphicsContextGL *this)
{
  uint64_t result;

  *((_BYTE *)this + 32) = 1;
  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

_BYTE **WebCore::GraphicsContextGL::videoFrameToImage@<X0>(WebCore::VideoFrame *a1@<X1>, char **a2@<X8>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  unint64_t v9;
  _BYTE **result;
  uint64_t v11;
  char **v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char **v34;
  char *v35;
  unint64_t v36;

  v5 = (*(float (**)(WebCore::VideoFrame *))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(WebCore::VideoFrame *))(*(_QWORD *)a1 + 16))(a1);
  v6 = (float)(int)v5;
  v8 = (float)(int)v7;
  *(float *)&v32 = v6;
  *((float *)&v32 + 1) = v8;
  v9 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v9 != -1)
  {
    v35 = &v33;
    v34 = &v35;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v34, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v35 = 0;
  v36 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v32, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v34, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v36 + 4));
  result = v34;
  if (!v34)
  {
    *a2 = 0;
    return result;
  }
  v11 = (*((uint64_t (**)(char **))*v34 + 2))(v34);
  v35 = 0;
  v36 = __PAIR64__(LODWORD(v8), LODWORD(v6));
  (*(void (**)(uint64_t, WebCore::VideoFrame *, char **, uint64_t))(*(_QWORD *)v11 + 440))(v11, a1, &v35, 1);
  v12 = v34;
  v34 = 0;
  if (v12)
    (*((void (**)(uint64_t *__return_ptr, char **))*v12 + 17))(&v32, v12);
  else
    v32 = 0;
  result = (_BYTE **)WebCore::BitmapImage::create(&v32, (uint64_t *)&v35);
  *a2 = v35;
  v35 = 0;
  v14 = v32;
  v32 = 0;
  if (v14)
    result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v14 + 8), v13);
  if (v12)
  {
    v15 = v12[1];
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_15;
    }
    result = (_BYTE **)MEMORY[0x19AEA534C](v15);
LABEL_15:
    v17 = *((_QWORD *)v15 + 1);
    v18 = v17 - 1;
    *((_QWORD *)v15 + 1) = v17 - 1;
    if (v17 == 1)
    {
      v30 = *((_QWORD *)v15 + 2);
      v19 = *((_QWORD *)v15 + 3);
      *((_QWORD *)v15 + 3) = 0;
      v20 = v30 != 0;
    }
    else
    {
      v19 = 0;
      v20 = 1;
    }
    v21 = __ldxr((unsigned __int8 *)v15);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
        if (v18)
          goto LABEL_27;
LABEL_23:
        if (v19)
          result = (_BYTE **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        if (!v20)
          result = (_BYTE **)WTF::fastFree((WTF *)v15, v13);
        goto LABEL_27;
      }
    }
    else
    {
      __clrex();
    }
    result = (_BYTE **)WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      goto LABEL_27;
    goto LABEL_23;
  }
LABEL_27:
  v22 = (uint64_t)v34;
  v34 = 0;
  if (!v22)
    return result;
  v23 = *(_QWORD *)(v22 + 8);
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
    goto LABEL_32;
  }
  result = (_BYTE **)MEMORY[0x19AEA534C](v23);
LABEL_32:
  v25 = *(_QWORD *)(v23 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v23 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v31 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 24) = 0;
    v28 = v31 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v23);
  if (v29 != 1)
  {
    __clrex();
LABEL_39:
    result = (_BYTE **)WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (v26)
      return result;
    goto LABEL_40;
  }
  if (__stlxr(0, (unsigned __int8 *)v23))
    goto LABEL_39;
  if (v26)
    return result;
LABEL_40:
  if (v27)
    result = (_BYTE **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (!v28)
    return (_BYTE **)WTF::fastFree((WTF *)v23, v13);
  return result;
}

uint64_t WebCore::GraphicsContextState::mergeLastChanges(WebCore::GraphicsContextState const&,std::optional<WebCore::GraphicsContextState> const&)::$_0::operator()<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  _BOOL4 v26;
  BOOL v27;
  _BOOL4 v28;
  char v29;
  char *v30;

  v1 = result;
  v3 = *(_QWORD *)result;
  v2 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)result + 232;
  v5 = *(unsigned __int8 *)(*(_QWORD *)result + 320);
  v6 = *(unsigned __int8 *)(v2 + 320);
  if (*(_BYTE *)(*(_QWORD *)result + 320))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    v12 = (*(_BYTE *)(*(_QWORD *)result + 320) != 0) == (*(_BYTE *)(v2 + 320) != 0);
    goto LABEL_14;
  }
  v8 = *(unsigned int *)(v3 + 312);
  v9 = *(_DWORD *)(v2 + 312);
  v10 = v9 == v8;
  v11 = v9 == -1;
  v12 = v9 == -1;
  if (v11)
    v10 = 0;
  if ((_DWORD)v8 == -1)
  {
    v13 = 1;
  }
  else
  {
    v12 = v10;
    v13 = !v10;
  }
  if (v13)
  {
LABEL_14:
    if (v12)
      return result;
LABEL_18:
    v14 = v2 + 232;
    if (v5 == v6)
    {
      if (!v5)
        goto LABEL_32;
      v15 = *(unsigned int *)(v3 + 312);
      v16 = *(unsigned int *)(v2 + 312);
      if ((_DWORD)v15 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_32;
      }
      else if ((_DWORD)v16 == -1)
      {
        result = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(&v30, v4, v14);
        *(_DWORD *)(v3 + 312) = -1;
        goto LABEL_32;
      }
      v30 = (char *)v4;
      result = ((uint64_t (*)(char **, uint64_t, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRSB_SH_EEEDcmSJ_DpOT0____fdiagonal
                                                                   + v16))(&v30, v4, v14);
    }
    else if (v5)
    {
      v17 = *(unsigned int *)(v3 + 312);
      if ((_DWORD)v17 != -1)
        result = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17])(&v30, v4, v14);
      *(_DWORD *)(v3 + 312) = -1;
      *(_BYTE *)(v3 + 320) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 232) = 0;
      *(_DWORD *)(v3 + 312) = -1;
      v18 = *(unsigned int *)(v2 + 312);
      if ((_DWORD)v18 != -1)
      {
        result = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v18])(&v30, v4, v14);
        *(_DWORD *)(v3 + 312) = v18;
      }
      *(_BYTE *)(v3 + 320) = 1;
    }
LABEL_32:
    v19 = *(_QWORD *)(v1 + 24);
    v20 = **(_DWORD **)(v1 + 16);
    if (!*(_BYTE *)(v19 + 344))
      goto LABEL_40;
    if (*(_BYTE *)(v19 + 320))
      v21 = *(_BYTE *)(v3 + 320) == 0;
    else
      v21 = 1;
    if (v21)
    {
      v22 = (*(_BYTE *)(v19 + 320) != 0) ^ (*(_BYTE *)(v3 + 320) != 0);
    }
    else
    {
      v24 = *(unsigned int *)(v19 + 312);
      v25 = *(_DWORD *)(v3 + 312);
      v26 = v25 == v24;
      v27 = v25 == -1;
      v28 = v25 == -1;
      if (v27)
        v26 = 0;
      if ((_DWORD)v24 != -1)
        v28 = v26;
      v22 = !v28;
      if ((_DWORD)v24 != -1 && v26)
      {
        v30 = &v29;
        result = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E340C748[v24])(&v30, v19 + 232, v4);
        if ((result & 1) == 0)
          goto LABEL_50;
        goto LABEL_40;
      }
    }
    if (!v22)
    {
LABEL_50:
      v23 = *(_DWORD *)(v3 + 176) & ~v20;
      goto LABEL_41;
    }
LABEL_40:
    v23 = *(_DWORD *)(v3 + 176) | v20;
LABEL_41:
    *(_DWORD *)(v3 + 176) = v23;
    return result;
  }
  v30 = &v29;
  result = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E340C730[v8])(&v30, v4, v2 + 232);
  if ((result & 1) == 0)
  {
    v2 = *(_QWORD *)(v1 + 8);
    v5 = *(unsigned __int8 *)(v3 + 320);
    v6 = *(unsigned __int8 *)(v2 + 320);
    goto LABEL_18;
  }
  return result;
}

uint64_t *WebCore::GraphicsContextState::mergeLastChanges(WebCore::GraphicsContextState const&,std::optional<WebCore::GraphicsContextState> const&)::$_0::operator()<WTF::OptionSet<WebCore::TextDrawingMode>>(uint64_t *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;

  v1 = *result;
  v2 = *(unsigned __int8 *)(result[1] + 333);
  if (*(unsigned __int8 *)(*result + 333) != v2)
  {
    *(_BYTE *)(v1 + 333) = v2;
    v3 = result[3];
    v4 = *(_DWORD *)result[2];
    if (*(_BYTE *)(v3 + 344) && *(unsigned __int8 *)(v3 + 333) == v2)
      v5 = *(_DWORD *)(v1 + 176) & ~v4;
    else
      v5 = *(_DWORD *)(v1 + 176) | v4;
    *(_DWORD *)(v1 + 176) = v5;
  }
  return result;
}

uint64_t *WebCore::GraphicsContextState::mergeLastChanges(WebCore::GraphicsContextState const&,std::optional<WebCore::GraphicsContextState> const&)::$_0::operator()<BOOL>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = *result;
  v3 = *(unsigned __int8 *)(result[1] + a2);
  if (*(unsigned __int8 *)(*result + a2) != v3)
  {
    *(_BYTE *)(v2 + a2) = v3;
    v4 = result[3];
    v5 = *(_DWORD *)result[2];
    if (*(_BYTE *)(v4 + 344) && *(unsigned __int8 *)(v4 + a2) == v3)
      v6 = *(_DWORD *)(v2 + 176) & ~v5;
    else
      v6 = *(_DWORD *)(v2 + 176) | v5;
    *(_DWORD *)(v2 + 176) = v6;
  }
  return result;
}

uint64_t WebCore::GraphicsContextState::mergeAllChanges(WebCore::GraphicsContextState const&)::$_0::operator()<WebCore::SourceBrush>(uint64_t result, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD v31[2];
  _QWORD *v32;

  v3 = (int)a2;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v6 = (unint64_t *)(*(_QWORD *)result + a3);
  v7 = v4 + a3;
  v8 = *v6;
  v9 = *(_QWORD *)(v4 + a3);
  v10 = v9 & 0x8000000000000;
  if ((*v6 & 0x8000000000000) != 0)
  {
    if (!v10)
      goto LABEL_6;
    if (*(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v8) != HIBYTE(v9)
      || BYTE6(v8) != BYTE6(v9))
    {
      v10 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    v11 = v8 == v9 && v10 == 0;
    if (!v11)
      goto LABEL_6;
  }
  v18 = *((_DWORD *)v6 + 20);
  v19 = *(_DWORD *)(v7 + 80);
  v20 = v19 == v18;
  if (v19 == -1)
    v20 = 0;
  if (v18 == -1)
    v20 = v19 == -1;
  if (!v20)
  {
LABEL_6:
    v12 = (uint64_t *)(v4 + a3);
    if ((v8 & 0x8000000000000) != 0)
    {
      if (v10
        && *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v8) == HIBYTE(v9)
        && BYTE6(v8) == BYTE6(v9))
      {
        goto LABEL_10;
      }
      v30 = v12;
      result = v8 & 0xFFFFFFFFFFFFLL;
      do
      {
        v25 = __ldaxr((unsigned int *)result);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)result));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, a2);
        v12 = v30;
      }
    }
    else if (v8 == v9 && !v10)
    {
      goto LABEL_10;
    }
    v13 = *v12;
    *v6 = *v12;
    if ((v13 & 0x8000000000000) != 0)
    {
      v16 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
LABEL_10:
    v14 = *((unsigned int *)v6 + 20);
    v15 = *((unsigned int *)v12 + 20);
    if ((_DWORD)v14 == -1)
    {
      if ((_DWORD)v15 == -1)
        goto LABEL_15;
    }
    else if ((_DWORD)v15 == -1)
    {
      result = ((uint64_t (*)(_QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v14])(v31, v6 + 2);
      *((_DWORD *)v6 + 20) = -1;
LABEL_15:
      *(_DWORD *)(v5 + 176) |= v3;
      return result;
    }
    v31[0] = v6 + 2;
    result = ((uint64_t (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v15])(v31);
    goto LABEL_15;
  }
  a2 = v6 + 2;
  if (v18 != 2)
  {
    if (v18 != 1)
      return result;
    v28 = result;
    v29 = a3;
    if (v19 == 1)
    {
      v21 = 0;
      do
      {
        v22 = *(double *)&v6[v21 + 4];
        v23 = *(double *)(v7 + 32 + v21 * 8);
        if (v22 != v23)
          break;
        v11 = v21++ == 5;
      }
      while (!v11);
      if (v22 != v23)
        goto LABEL_6;
      v31[0] = v7 + 16;
      v31[1] = v7 + 16;
      v24 = *((unsigned int *)v6 + 6);
      if ((_DWORD)v24 != -1)
      {
        v32 = v31;
        result = ((uint64_t (*)(_QWORD **, _QWORD *, uint64_t))off_1E340C6F8[v24])(&v32, a2, a3);
        a3 = v29;
        if ((result & 1) == 0)
        {
          v4 = *(_QWORD *)(v28 + 8);
          v8 = *v6;
          v9 = *(_QWORD *)(v4 + v29);
          v10 = v9 & 0x8000000000000;
          goto LABEL_6;
        }
        return result;
      }
    }
LABEL_58:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::GraphicsContextState::mergeAllChanges(WebCore::GraphicsContextState const&)::$_0::operator()<std::optional<WebCore::GraphicsDropShadow>>(v27);
  }
  if (v19 != 2)
    goto LABEL_58;
  if (*a2 != *(_QWORD *)(v7 + 16))
    goto LABEL_6;
  return result;
}

uint64_t WebCore::GraphicsContextState::mergeAllChanges(WebCore::GraphicsContextState const&)::$_0::operator()<std::optional<WebCore::GraphicsDropShadow>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v2 = *a1;
  v3 = *a1 + 192;
  result = std::operator==[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>(v3, a1[1] + 192);
  if ((result & 1) == 0)
  {
    v6 = a1[1];
    v7 = (uint64_t *)(v6 + 192);
    if (*(unsigned __int8 *)(v2 + 224) != *(unsigned __int8 *)(v6 + 224))
    {
      if (*(_BYTE *)(v2 + 224))
      {
        v13 = *(_QWORD *)(v2 + 208);
        if ((v13 & 0x8000000000000) != 0)
        {
          result = v13 & 0xFFFFFFFFFFFFLL;
          do
          {
            v20 = __ldaxr((unsigned int *)result);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, (unsigned int *)result));
          if (!v21)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v5);
          }
        }
        *(_BYTE *)(v2 + 224) = 0;
      }
      else
      {
        v14 = *v7;
        *(_DWORD *)(v3 + 8) = *(_DWORD *)(v6 + 200);
        *(_QWORD *)v3 = v14;
        v15 = *(_QWORD *)(v6 + 208);
        *(_QWORD *)(v2 + 208) = v15;
        if ((v15 & 0x8000000000000) != 0)
        {
          v18 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
        *(_QWORD *)(v2 + 216) = *(_QWORD *)(v6 + 216);
        *(_BYTE *)(v2 + 224) = 1;
      }
      goto LABEL_16;
    }
    if (!*(_BYTE *)(v2 + 224))
    {
LABEL_16:
      *(_DWORD *)(v2 + 176) |= 0x40u;
      return result;
    }
    v8 = *v7;
    *(_DWORD *)(v3 + 8) = *(_DWORD *)(v6 + 200);
    *(_QWORD *)v3 = v8;
    v9 = *(_QWORD *)(v2 + 208);
    v10 = *(_QWORD *)(v6 + 208);
    if ((v9 & 0x8000000000000) != 0)
    {
      if ((v10 & 0x8000000000000) != 0
        && *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v9) == HIBYTE(v10)
        && BYTE6(v9) == BYTE6(v10))
      {
LABEL_10:
        *(_QWORD *)(v2 + 216) = *(_QWORD *)(v6 + 216);
        goto LABEL_16;
      }
      result = v9 & 0xFFFFFFFFFFFFLL;
      do
      {
        v22 = __ldaxr((unsigned int *)result);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)result));
      if (!v23)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v5);
      }
    }
    else if (v9 == v10 && (v10 & 0x8000000000000) == 0)
    {
      goto LABEL_10;
    }
    v12 = *(_QWORD *)(v6 + 208);
    *(_QWORD *)(v2 + 208) = v12;
    if ((v12 & 0x8000000000000) != 0)
    {
      v16 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
    goto LABEL_10;
  }
  return result;
}

uint64_t WebCore::GraphicsContextState::mergeAllChanges(WebCore::GraphicsContextState const&)::$_0::operator()<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;

  v2 = *(_QWORD *)result;
  v1 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)result + 232;
  v4 = *(unsigned __int8 *)(*(_QWORD *)result + 320);
  v5 = *(unsigned __int8 *)(v1 + 320);
  if (*(_BYTE *)(*(_QWORD *)result + 320))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v11 = (*(_BYTE *)(*(_QWORD *)result + 320) != 0) == (*(_BYTE *)(v1 + 320) != 0);
    goto LABEL_14;
  }
  v7 = *(unsigned int *)(v2 + 312);
  v8 = *(_DWORD *)(v1 + 312);
  v9 = v8 == v7;
  v10 = v8 == -1;
  v11 = v8 == -1;
  if (v10)
    v9 = 0;
  if ((_DWORD)v7 == -1)
  {
    v12 = 1;
  }
  else
  {
    v11 = v9;
    v12 = !v9;
  }
  if (v12)
  {
LABEL_14:
    if (!v11)
      goto LABEL_18;
    return result;
  }
  v13 = result;
  v20 = &v19;
  result = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E340C730[v7])(&v20, v3, v1 + 232);
  if ((result & 1) == 0)
  {
    v1 = *(_QWORD *)(v13 + 8);
    v4 = *(unsigned __int8 *)(v2 + 320);
    v5 = *(unsigned __int8 *)(v1 + 320);
LABEL_18:
    v14 = v1 + 232;
    if (v4 != v5)
    {
      if (v4)
      {
        v17 = *(unsigned int *)(v2 + 312);
        if ((_DWORD)v17 != -1)
          result = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17])(&v20, v3, v14);
        *(_DWORD *)(v2 + 312) = -1;
        *(_BYTE *)(v2 + 320) = 0;
      }
      else
      {
        *(_BYTE *)(v2 + 232) = 0;
        *(_DWORD *)(v2 + 312) = -1;
        v18 = *(unsigned int *)(v1 + 312);
        if ((_DWORD)v18 != -1)
        {
          result = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v18])(&v20, v3, v14);
          *(_DWORD *)(v2 + 312) = v18;
        }
        *(_BYTE *)(v2 + 320) = 1;
      }
      goto LABEL_32;
    }
    if (v4)
    {
      v15 = *(unsigned int *)(v2 + 312);
      v16 = *(unsigned int *)(v1 + 312);
      if ((_DWORD)v15 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_32;
      }
      else if ((_DWORD)v16 == -1)
      {
        result = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(&v20, v3, v14);
        *(_DWORD *)(v2 + 312) = -1;
        goto LABEL_32;
      }
      v20 = (char *)v3;
      result = ((uint64_t (*)(char **, uint64_t, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRSB_SH_EEEDcmSJ_DpOT0____fdiagonal
                                                                   + v16))(&v20, v3, v14);
    }
LABEL_32:
    *(_DWORD *)(v2 + 176) |= 0x80u;
  }
  return result;
}

WTF::TextStream *WebCore::GraphicsContextState::dump(WebCore::GraphicsContextState *this, WTF::TextStream *a2)
{
  uint64_t v4;
  int v5;
  int i;
  int v7;
  WTF::TextStream *v9;
  WTF::TextStream *v10;
  WTF::TextStream *v11;
  WTF::TextStream *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  _QWORD v21[3];
  _QWORD *v22;

  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v4 = WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v5 = *((_DWORD *)this + 44);
  if (v5)
  {
    WebCore::operator<<(v4, v5 & -v5);
    for (i = (v5 - 1) & v5; i; i &= i - 1)
    {
      WTF::TextStream::operator<<();
      WebCore::operator<<(v4, i & -i);
    }
  }
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v7 = *((_DWORD *)this + 44);
  if ((v7 & 1) != 0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    v9 = (WTF::TextStream *)WTF::TextStream::operator<<();
    WebCore::operator<<(v9, (uint64_t)this);
    WTF::TextStream::endGroup(a2);
    v7 = *((_DWORD *)this + 44);
    if ((v7 & 2) == 0)
    {
LABEL_6:
      if ((v7 & 4) == 0)
        goto LABEL_7;
      goto LABEL_25;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_6;
  }
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v7 = *((_DWORD *)this + 44);
  if ((v7 & 4) == 0)
  {
LABEL_7:
    if ((v7 & 8) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v10 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v10, (uint64_t)this + 88);
  WTF::TextStream::endGroup(a2);
  v7 = *((_DWORD *)this + 44);
  if ((v7 & 8) == 0)
  {
LABEL_8:
    if ((v7 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v7 = *((_DWORD *)this + 44);
  if ((v7 & 0x10) == 0)
  {
LABEL_9:
    if ((v7 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_27:
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*((char *)this + 185) <= 5)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v7 = *((_DWORD *)this + 44);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v11 = (WTF::TextStream *)WTF::TextStream::operator<<();
  LOWORD(v21[0]) = *((_WORD *)this + 93);
  WTF::TextStream::dumpProperty<WebCore::CompositeOperator>(v11, (uint64_t)"composite-operation", (unsigned __int8 *)v21);
  WTF::TextStream::dumpProperty<WebCore::BlendMode>(v11, (uint64_t)"blend-mode", (unsigned __int8 *)v21 + 1);
  WTF::TextStream::endGroup(a2);
  v7 = *((_DWORD *)this + 44);
  if ((v7 & 0x40) == 0)
  {
LABEL_11:
    if ((v7 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_31:
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v12 = (WTF::TextStream *)WTF::TextStream::operator<<();
  if (*((_BYTE *)this + 224))
    WebCore::operator<<(v12, (float *)this + 48);
  else
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  v7 = *((_DWORD *)this + 44);
  if ((v7 & 0x80) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_35:
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v13 = WTF::TextStream::operator<<();
  if (!*((_BYTE *)this + 320))
  {
    WTF::TextStream::operator<<();
LABEL_39:
    WTF::TextStream::endGroup(a2);
    v7 = *((_DWORD *)this + 44);
    if ((v7 & 0x100) == 0)
    {
LABEL_13:
      if ((v7 & 0x400) == 0)
        goto LABEL_14;
      goto LABEL_41;
    }
LABEL_40:
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v7 = *((_DWORD *)this + 44);
    if ((v7 & 0x400) == 0)
    {
LABEL_14:
      if ((v7 & 0x200) == 0)
        goto LABEL_15;
      goto LABEL_44;
    }
LABEL_41:
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if ((unint64_t)*((char *)this + 332) <= 4)
      WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v7 = *((_DWORD *)this + 44);
    if ((v7 & 0x200) == 0)
    {
LABEL_15:
      if ((v7 & 0x800) == 0)
        goto LABEL_16;
      goto LABEL_54;
    }
LABEL_44:
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v15 = *((unsigned __int8 *)this + 333);
    if (*((_BYTE *)this + 333))
    {
      v16 = v15 & -v15;
      if (v16 == 1 || v16 == 2)
        WTF::TextStream::operator<<();
      v17 = (v15 - 1) & v15;
      if (v17)
      {
        do
        {
          WTF::TextStream::operator<<();
          v18 = (v17 & -(char)v17);
          if (v18 == 1 || v18 == 2)
            WTF::TextStream::operator<<();
          LOBYTE(v17) = (v17 - 1) & v17;
        }
        while ((_BYTE)v17);
      }
    }
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v7 = *((_DWORD *)this + 44);
    if ((v7 & 0x800) == 0)
    {
LABEL_16:
      if ((v7 & 0x1000) == 0)
        goto LABEL_17;
      goto LABEL_55;
    }
LABEL_54:
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v7 = *((_DWORD *)this + 44);
    if ((v7 & 0x1000) == 0)
    {
LABEL_17:
      if ((v7 & 0x2000) == 0)
        goto LABEL_18;
      goto LABEL_56;
    }
LABEL_55:
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v7 = *((_DWORD *)this + 44);
    if ((v7 & 0x2000) == 0)
    {
LABEL_18:
      if ((v7 & 0x4000) == 0)
        goto LABEL_19;
      goto LABEL_57;
    }
LABEL_56:
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v7 = *((_DWORD *)this + 44);
    if ((v7 & 0x4000) == 0)
    {
LABEL_19:
      if ((v7 & 0x8000) == 0)
        goto LABEL_20;
      goto LABEL_58;
    }
LABEL_57:
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    v7 = *((_DWORD *)this + 44);
    if ((v7 & 0x8000) == 0)
    {
LABEL_20:
      if ((v7 & 0x10000) == 0)
        return a2;
LABEL_21:
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a2);
      return a2;
    }
LABEL_58:
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
    if ((*((_DWORD *)this + 44) & 0x10000) == 0)
      return a2;
    goto LABEL_21;
  }
  v21[0] = v13;
  v21[1] = v13;
  v21[2] = v13;
  v14 = *((unsigned int *)this + 78);
  if ((_DWORD)v14 != -1)
  {
    v22 = v21;
    ((void (*)(_QWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCorelsERNS6_10TextStreamERKNS_7variantIJNS8_18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE3__0JZNS8_lsESA_SH_E3__1ZNS8_lsESA_SH_E3__2EEEEEJRKNS0_6__implIJSC_SD_SE_EEEEEEDcOT_DpOT0____fmatrix[v14])(&v22, (char *)this + 232);
    goto LABEL_39;
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF::TextStream *)WebCore::operator<<(v19, v20);
}

uint64_t WebCore::GradientImage::isGradientImage(WebCore::GradientImage *this)
{
  return 1;
}

uint64_t WebCore::Gradient::isGradient(WebCore::Gradient *this)
{
  return 1;
}

uint64_t WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    v15 = a3 - (_QWORD)v5;
    v16 = *(unsigned int *)(result + 8) + ((unint64_t)*(unsigned int *)(result + 8) >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 > (unint64_t)a2)
      a2 = (void *)v17;
    WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, (unint64_t)a2);
    return *(_QWORD *)v4 + v15;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 3)
  {
    v11 = result + 16;
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 2;
    goto LABEL_12;
  }
  if (!(v9 >> 28))
  {
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    if ((_DWORD)v10)
    {
      v12 = (_QWORD *)(v11 + 8);
      v13 = 16 * v10;
      v14 = (_QWORD *)((char *)v5 + 8);
      do
      {
        *((_DWORD *)v12 - 2) = *((_DWORD *)v14 - 2);
        *v12 = 0;
        if (*v14)
        {
          *v12 = *v14;
          *v14 = 0;
        }
        v12 += 2;
        v14 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    if ((WTF *)(v4 + 16) != v5 && v5)
    {
      if ((WTF *)v11 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    v4 = *(WTF **)a1;
    v5 = *(unsigned int *)(a1 + 12);
    if (a2 < 3)
    {
      v6 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x19617F450);
      }
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
    }
    if ((_DWORD)v5)
    {
      v7 = (_QWORD *)(v6 + 8);
      v8 = 16 * v5;
      v9 = (_QWORD *)((char *)v4 + 8);
      do
      {
        *((_DWORD *)v7 - 2) = *((_DWORD *)v9 - 2);
        *v7 = 0;
        if (*v9)
        {
          *v7 = *v9;
          *v9 = 0;
        }
        v7 += 2;
        v9 += 2;
        v8 -= 16;
      }
      while (v8);
    }
    if ((WTF *)(a1 + 16) != v4 && v4)
    {
      if ((WTF *)v6 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
  }
  return 1;
}

uint64_t _ZNSt3__116__insertion_sortB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  float *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  if ((void *)result == a2)
    return result;
  v2 = result + 16;
  if ((void *)(result + 16) == a2)
    return result;
  v3 = result;
  do
  {
    v4 = v3;
    v3 = v2;
    v5 = *(float *)(v4 + 16);
    v6 = *(float *)v4;
    if (v5 >= *(float *)v4)
      goto LABEL_34;
    v7 = *(_QWORD *)(v4 + 24);
    if (v7)
      *(_QWORD *)(v4 + 24) = 0;
    v8 = *(_QWORD *)(v2 + 8);
    v9 = v3;
    while (1)
    {
      v10 = v4;
      *(float *)v9 = v6;
      v11 = *(_QWORD *)(v4 + 8);
      if ((v8 & 0x8000000000000) != 0)
      {
        if ((v11 & 0x8000000000000) == 0
          || *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v8) != HIBYTE(v11)
          || BYTE6(v8) != BYTE6(v11))
        {
          v24 = v9;
          v25 = v4;
          v23 = v5;
          v31 = v3;
          v33 = v7;
          v27 = result;
          v29 = a2;
          v13 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, a2);
            v9 = v24;
            v10 = v25;
            v5 = v23;
            v3 = v31;
            v7 = v33;
            result = v27;
            a2 = v29;
          }
LABEL_13:
          v11 = 0;
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
        }
      }
      else
      {
        v12 = v8 == v11 && (v11 & 0x8000000000000) == 0;
        v11 = v8;
        if (!v12)
          goto LABEL_13;
      }
      if (v10 == result)
        break;
      v4 = v10 - 16;
      v6 = *(float *)(v10 - 16);
      v8 = v11;
      v9 = v10;
      if (v5 >= v6)
      {
        v16 = (float *)v10;
        goto LABEL_30;
      }
    }
    v16 = (float *)result;
LABEL_30:
    *v16 = v5;
    if ((v11 & 0x8000000000000) != 0)
    {
      v26 = v10;
      v32 = v3;
      v28 = result;
      v30 = a2;
      v34 = v7;
      if ((v7 & 0x8000000000000) != 0
        && (v20 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL),
            *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 4))
        && *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v11) == HIBYTE(v7)
        && BYTE6(v11) == BYTE6(v7))
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          WTF::fastFree((WTF *)v20, a2);
          a2 = v30;
          v3 = v32;
          result = v28;
        }
      }
      else
      {
        v17 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
          v10 = v26;
          result = v28;
          v3 = v32;
          v7 = v34;
          a2 = v30;
        }
LABEL_33:
        *(_QWORD *)(v10 + 8) = v7;
      }
    }
    else if ((v7 & 0x8000000000000) != 0 || v11 != v7)
    {
      goto LABEL_33;
    }
LABEL_34:
    v2 = v3 + 16;
  }
  while ((void *)(v3 + 16) != a2);
  return result;
}

char *_ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeE(char *result, char *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a4 == 2)
  {
    v5 = *((float *)a2 - 4);
    if (v5 >= *(float *)result)
    {
      *(_DWORD *)a5 = *(_DWORD *)result;
      *(_QWORD *)(a5 + 8) = 0;
      v6 = *((_QWORD *)result + 1);
      if (v6)
      {
        *(_QWORD *)(a5 + 8) = v6;
        *((_QWORD *)result + 1) = 0;
      }
      *(_DWORD *)(a5 + 16) = *((_DWORD *)a2 - 4);
      *(_QWORD *)(a5 + 24) = 0;
      v7 = *((_QWORD *)a2 - 1);
      if (v7)
      {
        *(_QWORD *)(a5 + 24) = v7;
        *((_QWORD *)a2 - 1) = 0;
      }
      return result;
    }
    *(float *)a5 = v5;
    *(_QWORD *)(a5 + 8) = 0;
    v10 = *((_QWORD *)a2 - 1);
    if (v10)
    {
      *(_QWORD *)(a5 + 8) = v10;
      *((_QWORD *)a2 - 1) = 0;
    }
    *(_DWORD *)(a5 + 16) = *(_DWORD *)result;
    *(_QWORD *)(a5 + 24) = 0;
    v11 = *((_QWORD *)result + 1);
    if (v11)
    {
      *(_QWORD *)(a5 + 24) = v11;
      goto LABEL_11;
    }
  }
  else
  {
    if (a4 == 1)
    {
      *(_DWORD *)a5 = *(_DWORD *)result;
      *(_QWORD *)(a5 + 8) = 0;
      v8 = *((_QWORD *)result + 1);
      if (!v8)
        return result;
      *(_QWORD *)(a5 + 8) = v8;
LABEL_11:
      *((_QWORD *)result + 1) = 0;
      return result;
    }
    if (a4)
    {
      if ((uint64_t)a4 > 8)
      {
        v13 = a4 >> 1;
        v14 = (uint64_t)&result[16 * (a4 >> 1)];
        v15 = (uint64_t)result;
        ((void (*)(void))_ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeEl)();
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_S6_NS_15iterator_traitsISC_E15difference_typeEPNSE_10value_typeEl(v14, a2, a3, a4 - (a4 >> 1), a5 + 16 * v13, a4 - (a4 >> 1));
        return (char *)_ZNSt3__122__merge_move_constructB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopESB_EEvT1_SC_T2_SD_PNS_15iterator_traitsISC_E10value_typeES6_(v15, v14, v14, (uint64_t)a2, a5);
      }
      else
      {
        return _ZNSt3__121__insertion_sort_moveB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_PNS_15iterator_traitsISC_E10value_typeES6_(result, a2, a5);
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__119__merge_move_assignB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopESB_SB_EEvT1_SC_T2_SD_T3_S6_(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  while ((void *)result != a2)
  {
    if (a3 == a4)
    {
      while (1)
      {
        if ((void *)result == a2)
          return result;
        *(_DWORD *)a5 = *(_DWORD *)result;
        v22 = *(_QWORD *)(a5 + 8);
        v23 = *(_QWORD *)(result + 8);
        if ((v22 & 0x8000000000000) != 0)
        {
          if ((v23 & 0x8000000000000) == 0
            || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 4)
            || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 8)
            || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0xC)
            || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10)
            || HIBYTE(v22) != HIBYTE(v23)
            || BYTE6(v22) != BYTE6(v23))
          {
            v30 = result;
            v33 = a2;
            v43 = a5;
            v25 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, a2);
              result = v30;
              a2 = v33;
              a5 = v43;
            }
LABEL_69:
            *(_QWORD *)(a5 + 8) = *(_QWORD *)(result + 8);
            *(_QWORD *)(result + 8) = 0;
          }
        }
        else if (v22 != v23 || (v23 & 0x8000000000000) != 0)
        {
          goto LABEL_69;
        }
        result += 16;
        a5 += 16;
      }
    }
    if (*(float *)a3 < *(float *)result)
    {
      *(_DWORD *)a5 = *(_DWORD *)a3;
      v5 = *(_QWORD *)(a5 + 8);
      v6 = *(_QWORD *)(a3 + 8);
      if ((v5 & 0x8000000000000) != 0)
      {
        if ((v6 & 0x8000000000000) != 0
          && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v5) == HIBYTE(v6)
          && BYTE6(v5) == BYTE6(v6))
        {
          goto LABEL_10;
        }
        v28 = result;
        v31 = a2;
        v37 = a3;
        v34 = a4;
        v40 = a5;
        v11 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
          result = v28;
          a2 = v31;
          a3 = v37;
          a5 = v40;
          a4 = v34;
        }
      }
      else if (v5 == v6 && (v6 & 0x8000000000000) == 0)
      {
        goto LABEL_10;
      }
      *(_QWORD *)(a5 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
LABEL_10:
      a3 += 16;
      goto LABEL_18;
    }
    *(_DWORD *)a5 = *(_DWORD *)result;
    v8 = *(_QWORD *)(a5 + 8);
    v9 = *(_QWORD *)(result + 8);
    if ((v8 & 0x8000000000000) != 0)
    {
      if ((v9 & 0x8000000000000) != 0
        && *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v8) == HIBYTE(v9)
        && BYTE6(v8) == BYTE6(v9))
      {
        goto LABEL_17;
      }
      v29 = result;
      v32 = a2;
      v38 = a3;
      v35 = a4;
      v41 = a5;
      v14 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
        result = v29;
        a2 = v32;
        a3 = v38;
        a5 = v41;
        a4 = v35;
      }
    }
    else if (v8 == v9 && (v9 & 0x8000000000000) == 0)
    {
      goto LABEL_17;
    }
    *(_QWORD *)(a5 + 8) = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = 0;
LABEL_17:
    result += 16;
LABEL_18:
    a5 += 16;
  }
  while (a3 != a4)
  {
    *(_DWORD *)a5 = *(_DWORD *)a3;
    v17 = *(_QWORD *)(a5 + 8);
    v18 = *(_QWORD *)(a3 + 8);
    if ((v17 & 0x8000000000000) != 0)
    {
      if ((v18 & 0x8000000000000) == 0
        || *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v17) != HIBYTE(v18)
        || BYTE6(v17) != BYTE6(v18))
      {
        v39 = a3;
        v36 = a4;
        v42 = a5;
        result = v17 & 0xFFFFFFFFFFFFLL;
        do
        {
          v20 = __ldaxr((unsigned int *)result);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, (unsigned int *)result));
        if (!v21)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
          a3 = v39;
          a5 = v42;
          a4 = v36;
        }
LABEL_48:
        *(_QWORD *)(a5 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = 0;
      }
    }
    else if (v17 != v18 || (v18 & 0x8000000000000) != 0)
    {
      goto LABEL_48;
    }
    a3 += 16;
    a5 += 16;
  }
  return result;
}

_QWORD *std::unique_ptr<WebCore::GradientColorStop,std::__destruct_n &>::~unique_ptr[abi:sn180100](_QWORD *result, void *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v2 = *result;
  *result = 0;
  if (v2)
  {
    v3 = (unint64_t *)result[1];
    if (*v3)
    {
      v4 = 0;
      do
      {
        v5 = *(_QWORD *)(v2 + 8);
        if ((v5 & 0x8000000000000) != 0)
        {
          v12 = v4;
          v9 = v3;
          v10 = v2;
          v11 = result;
          v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
          do
          {
            v7 = __ldaxr(v6);
            v8 = --v7 == 0;
          }
          while (__stlxr(v7, v6));
          v2 = v10;
          if (v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
            v4 = v12;
            v3 = v9;
            v2 = v10;
            result = v11;
          }
        }
        ++v4;
        v2 += 16;
      }
      while (v4 < *v3);
    }
  }
  return result;
}

uint64_t _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_SC_OS6_NS_15iterator_traitsISC_E15difference_typeESG_PNSF_10value_typeEl(uint64_t result, float *a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  float *v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float *v30;
  float *v31;
  float v32;
  float *v33;
  float *i;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float *v38;
  float *v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (!a6)
    return result;
  while (1)
  {
    if (a5 <= a8 || a6 <= a8)
      return _ZNSt3__124__buffered_inplace_mergeB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_SC_OS6_NS_15iterator_traitsISC_E15difference_typeESG_PNSF_10value_typeE(result, a2, a3, a4, a5, a6, a7);
    if (!a5)
      return result;
    v11 = 0;
    v12 = *a2;
    v13 = -a5;
    while (1)
    {
      v14 = *(float *)(result + v11);
      if (v12 < v14)
        break;
      v11 += 16;
      if (__CFADD__(v13++, 1))
        return result;
    }
    v16 = -v13;
    v17 = (float *)(result + v11);
    if (-v13 >= a6)
      break;
    if (a6 >= 0)
      v18 = a6;
    else
      v18 = a6 + 1;
    v19 = v18 >> 1;
    v20 = &a2[4 * (v18 >> 1)];
    v21 = a2;
    if (v17 != a2)
    {
      v22 = ((uint64_t)a2 - result - v11) >> 4;
      v21 = (float *)(result + v11);
      do
      {
        v23 = v22 >> 1;
        v24 = &v21[4 * (v22 >> 1)];
        v26 = *v24;
        v25 = v24 + 4;
        v22 += ~(v22 >> 1);
        if (*v20 < v26)
          v22 = v23;
        else
          v21 = v25;
      }
      while (v22);
    }
    v27 = ((uint64_t)v21 - result - v11) >> 4;
LABEL_31:
    v33 = v20;
    if (v21 != a2)
    {
      v33 = v21;
      if (a2 != v20)
      {
        v33 = v21 + 4;
        for (i = a2 + 4; ; i += 4)
        {
          v35 = *((_QWORD *)v33 - 1);
          if (v35)
            *((_QWORD *)v33 - 1) = 0;
          v36 = *((_DWORD *)v33 - 4);
          *(v33 - 4) = *(i - 4);
          v37 = *((_QWORD *)i - 1);
          if (v37)
          {
            *((_QWORD *)v33 - 1) = v37;
            *((_QWORD *)i - 1) = 0;
          }
          *((_DWORD *)i - 4) = v36;
          if (v35)
            *((_QWORD *)i - 1) = v35;
          if (i == v20)
            break;
          if (v33 == a2)
            a2 = i;
          v33 += 4;
        }
        if (v33 == a2)
        {
          v33 = a2;
        }
        else
        {
          v38 = v33;
          v39 = a2;
          do
          {
            while (1)
            {
              v40 = *((_QWORD *)v38 + 1);
              if (v40)
                *((_QWORD *)v38 + 1) = 0;
              v41 = *v38;
              *v38 = *a2;
              v42 = *((_QWORD *)a2 + 1);
              if (v42)
              {
                *((_QWORD *)v38 + 1) = v42;
                *((_QWORD *)a2 + 1) = 0;
              }
              *a2 = v41;
              if (v40)
                *((_QWORD *)a2 + 1) = v40;
              v38 += 4;
              a2 += 4;
              if (a2 == v20)
                break;
              if (v38 == v39)
                v39 = a2;
            }
            a2 = v39;
          }
          while (v38 != v39);
        }
      }
    }
    a5 = -(v27 + v13);
    v43 = a6 - v19;
    if (v27 + v19 >= a6 - (v27 + v19) - v13)
    {
      v48 = v20;
      v49 = a7;
      v50 = (uint64_t)v17;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_SC_OS6_NS_15iterator_traitsISC_E15difference_typeESG_PNSF_10value_typeEl(v33, v48, a3, a4, a5, a6 - v19, a7, a8);
      result = v50;
      a7 = v49;
      v20 = v21;
      v43 = v19;
      a5 = v27;
      a3 = v33;
    }
    else
    {
      v44 = v21;
      v45 = a3;
      v46 = v27;
      v47 = a7;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_SC_OS6_NS_15iterator_traitsISC_E15difference_typeESG_PNSF_10value_typeEl(v17, v44, v33, a4, v46, v19, a7, a8);
      a3 = v45;
      a7 = v47;
      result = (uint64_t)v33;
    }
    a6 = v43;
    a2 = v20;
    if (!v43)
      return result;
  }
  if (v13 != -1)
  {
    if (v13 > 0)
      v16 = 1 - v13;
    v27 = v16 >> 1;
    v21 = (float *)(result + 16 * (v16 >> 1) + v11);
    v20 = a3;
    if (a3 != a2)
    {
      v28 = ((char *)a3 - (char *)a2) >> 4;
      v20 = a2;
      do
      {
        v29 = v28 >> 1;
        v30 = &v20[4 * (v28 >> 1)];
        v32 = *v30;
        v31 = v30 + 4;
        v28 += ~(v28 >> 1);
        if (v32 < *v21)
          v20 = v31;
        else
          v28 = v29;
      }
      while (v28);
    }
    v19 = ((char *)v20 - (char *)a2) >> 4;
    goto LABEL_31;
  }
  v51 = result + v11;
  v52 = *(_QWORD *)(result + v11 + 8);
  if (v52)
    *(_QWORD *)(v51 + 8) = 0;
  *(float *)(result + v11) = v12;
  v53 = *((_QWORD *)a2 + 1);
  if (v53)
  {
    *(_QWORD *)(v51 + 8) = v53;
    *((_QWORD *)a2 + 1) = 0;
  }
  *a2 = v14;
  if (v52)
    *((_QWORD *)a2 + 1) = v52;
  return result;
}

char *_ZNSt3__121__insertion_sort_moveB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_PNS_15iterator_traitsISC_E10value_typeES6_(char *result, char *a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  float *v5;
  float *v6;
  char *v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v29;
  unsigned int v30;
  BOOL v31;
  float *v32;
  float *v33;
  float *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  char *v43;
  _QWORD *v44;

  if (result != a2)
  {
    *(_DWORD *)a3 = *(_DWORD *)result;
    *(_QWORD *)(a3 + 8) = 0;
    v3 = *((_QWORD *)result + 1);
    if (v3)
    {
      *(_QWORD *)(a3 + 8) = v3;
      *((_QWORD *)result + 1) = 0;
    }
    v4 = result + 16;
    if (result + 16 != a2)
    {
      v5 = (float *)a3;
      v6 = (float *)a3;
      while (1)
      {
        v7 = result;
        result = v4;
        v8 = *v6;
        v6 += 4;
        v9 = v8;
        v10 = *((float *)v7 + 4);
        if (v10 < v8)
          break;
        v5[4] = v10;
        *((_QWORD *)v5 + 3) = 0;
        v24 = *((_QWORD *)v7 + 3);
        v23 = v7 + 24;
        v22 = v24;
        if (v24)
        {
          *((_QWORD *)v5 + 3) = v22;
LABEL_42:
          *v23 = 0;
        }
LABEL_43:
        v4 = result + 16;
        v5 = v6;
        if (result + 16 == a2)
          return result;
      }
      v5[4] = v9;
      *((_QWORD *)v5 + 3) = 0;
      v11 = *((_QWORD *)v5 + 1);
      if (v11)
      {
        *((_QWORD *)v5 + 3) = v11;
        *((_QWORD *)v5 + 1) = 0;
      }
      v12 = (float *)a3;
      if (v5 != (float *)a3)
      {
        v13 = v5;
        while (1)
        {
          v14 = *(v13 - 4);
          v13 -= 4;
          v15 = v14;
          if (*(float *)result >= v14)
          {
            v12 = v5;
            break;
          }
          *v5 = v15;
          v16 = *((_QWORD *)v5 + 1);
          v17 = *((_QWORD *)v5 - 1);
          if ((v16 & 0x8000000000000) != 0)
          {
            if ((v17 & 0x8000000000000) != 0
              && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4)
              && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8)
              && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC)
              && *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10)
              && HIBYTE(v16) == HIBYTE(v17)
              && BYTE6(v16) == BYTE6(v17))
            {
              goto LABEL_18;
            }
            v32 = v5;
            v33 = v13;
            v41 = v6;
            v43 = v7;
            v35 = result;
            v37 = a2;
            v39 = a3;
            v19 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
            do
            {
              v20 = __ldaxr(v19);
              v21 = --v20 == 0;
            }
            while (__stlxr(v20, v19));
            v7 = v43;
            if (v21)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, a2);
              v5 = v32;
              v13 = v33;
              v6 = v41;
              v7 = v43;
              result = v35;
              a2 = v37;
              a3 = v39;
            }
          }
          else if (v16 == v17 && (v17 & 0x8000000000000) == 0)
          {
            goto LABEL_18;
          }
          *((_QWORD *)v5 + 1) = *((_QWORD *)v5 - 1);
          *((_QWORD *)v5 - 1) = 0;
LABEL_18:
          v5 = v13;
          if (v13 == (float *)a3)
          {
            v12 = (float *)a3;
            break;
          }
        }
      }
      *v12 = *(float *)result;
      v26 = *((_QWORD *)v7 + 3);
      v23 = v7 + 24;
      v25 = v26;
      v27 = *((_QWORD *)v12 + 1);
      if ((v27 & 0x8000000000000) != 0)
      {
        if ((v25 & 0x8000000000000) != 0
          && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v27) == HIBYTE(v25)
          && BYTE6(v27) == BYTE6(v25))
        {
          goto LABEL_43;
        }
        v34 = v12;
        v42 = v6;
        v44 = v23;
        v36 = result;
        v38 = a2;
        v40 = a3;
        v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
        do
        {
          v30 = __ldaxr(v29);
          v31 = --v30 == 0;
        }
        while (__stlxr(v30, v29));
        v23 = v44;
        if (v31)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, a2);
          v12 = v34;
          result = v36;
          v6 = v42;
          v23 = v44;
          a2 = v38;
          a3 = v40;
        }
      }
      else if (v27 == v25 && (v25 & 0x8000000000000) == 0)
      {
        goto LABEL_43;
      }
      *((_QWORD *)v12 + 1) = *v23;
      goto LABEL_42;
    }
  }
  return result;
}

uint64_t _ZNSt3__122__merge_move_constructB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopESB_EEvT1_SC_T2_SD_PNS_15iterator_traitsISC_E10value_typeES6_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  while (result != a2)
  {
    if (a3 == a4)
    {
      if (result != a2)
      {
        v9 = 0;
        do
        {
          v10 = a5 + v9;
          *(_DWORD *)v10 = *(_DWORD *)(result + v9);
          *(_QWORD *)(v10 + 8) = 0;
          v11 = *(_QWORD *)(result + v9 + 8);
          if (v11)
          {
            *(_QWORD *)(v10 + 8) = v11;
            *(_QWORD *)(result + v9 + 8) = 0;
          }
          v9 += 16;
        }
        while (result + v9 != a2);
      }
      return result;
    }
    if (*(float *)a3 >= *(float *)result)
    {
      *(_DWORD *)a5 = *(_DWORD *)result;
      *(_QWORD *)(a5 + 8) = 0;
      v6 = *(_QWORD *)(result + 8);
      if (v6)
      {
        *(_QWORD *)(a5 + 8) = v6;
        *(_QWORD *)(result + 8) = 0;
      }
      result += 16;
    }
    else
    {
      *(_DWORD *)a5 = *(_DWORD *)a3;
      *(_QWORD *)(a5 + 8) = 0;
      v5 = *(_QWORD *)(a3 + 8);
      if (v5)
      {
        *(_QWORD *)(a5 + 8) = v5;
        *(_QWORD *)(a3 + 8) = 0;
      }
      a3 += 16;
    }
    a5 += 16;
  }
  if (a3 != a4)
  {
    v7 = (_QWORD *)(a5 + 8);
    do
    {
      *((_DWORD *)v7 - 2) = *(_DWORD *)a3;
      *v7 = 0;
      v8 = *(_QWORD *)(a3 + 8);
      if (v8)
      {
        *v7 = v8;
        *(_QWORD *)(a3 + 8) = 0;
      }
      a3 += 16;
      v7 += 2;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t _ZNSt3__124__buffered_inplace_mergeB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore18GradientColorStops4sortEvEUlRT_RT0_E_PNS2_17GradientColorStopEEEvT1_SC_SC_OS6_NS_15iterator_traitsISC_E15difference_typeESG_PNSF_10value_typeE(uint64_t result, float *a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  BOOL v15;
  float *v16;
  float *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v36;
  unsigned int v37;
  BOOL v38;
  unsigned int *v39;
  unsigned int v40;
  BOOL v41;
  float *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v47;
  BOOL v48;
  unsigned int *v49;
  unsigned int v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  float *v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float *v63;
  float *v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  uint64_t v79;
  float *v80;
  float *v81;
  float *v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  if (a5 > a6)
  {
    if (a2 == a3)
      return result;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = a7 + v7 * 4;
      *(float *)v9 = a2[v7];
      *(_QWORD *)(v9 + 8) = 0;
      v10 = *(_QWORD *)&a2[v7 + 2];
      if (v10)
      {
        *(_QWORD *)(v9 + 8) = v10;
        *(_QWORD *)&a2[v7 + 2] = 0;
      }
      ++v8;
      v7 += 4;
    }
    while (&a2[v7] != a3);
    if (v7 * 4)
    {
      v11 = (float *)(a7 + v7 * 4);
      while (1)
      {
        v12 = v11;
        if (a2 == (float *)result)
          break;
        v13 = *(v11 - 4);
        v14 = *(a2 - 4);
        v15 = v13 < v14;
        if (v13 < v14)
          v13 = *(a2 - 4);
        *(a3 - 4) = v13;
        v16 = a3 - 4;
        if (v15)
          v17 = a2;
        else
          v17 = v11;
        if (v15)
          a2 -= 4;
        else
          v11 -= 4;
        v18 = *((_QWORD *)a3 - 1);
        v19 = *((_QWORD *)v17 - 1);
        if ((v18 & 0x8000000000000) != 0)
        {
          if ((v19 & 0x8000000000000) != 0
            && *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4)
            && *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8)
            && *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC)
            && *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10)
            && HIBYTE(v18) == HIBYTE(v19)
            && BYTE6(v18) == BYTE6(v19))
          {
            goto LABEL_24;
          }
          v65 = v17;
          v70 = v11;
          v59 = a3 - 4;
          v91 = v8;
          v62 = a2;
          v80 = a3;
          v75 = result;
          v85 = a7;
          v21 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
          do
          {
            v22 = __ldaxr(v21);
            v23 = --v22 == 0;
          }
          while (__stlxr(v22, v21));
          v16 = a3 - 4;
          v8 = v91;
          if (v23)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, a2);
            v17 = v65;
            v11 = v70;
            v16 = v59;
            a2 = v62;
            a7 = v85;
            v8 = v91;
            a3 = v80;
            result = v75;
          }
        }
        else
        {
          v20 = v18 == v19 && (v19 & 0x8000000000000) == 0;
          if (v20)
            goto LABEL_24;
        }
        *((_QWORD *)a3 - 1) = *((_QWORD *)v17 - 1);
        *((_QWORD *)v17 - 1) = 0;
LABEL_24:
        a3 = v16;
        if (v11 == (float *)a7)
          goto LABEL_133;
      }
      v42 = a3;
      while (1)
      {
        v43 = *((_DWORD *)v12 - 4);
        v12 -= 4;
        *((_DWORD *)v42 - 4) = v43;
        v42 -= 4;
        v44 = *((_QWORD *)v42 + 1);
        v45 = *((_QWORD *)v12 + 1);
        if ((v44 & 0x8000000000000) != 0)
        {
          if ((v45 & 0x8000000000000) != 0
            && *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 4)
            && *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 8)
            && *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 0xC)
            && *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 0x10)
            && HIBYTE(v44) == HIBYTE(v45)
            && BYTE6(v44) == BYTE6(v45))
          {
            goto LABEL_97;
          }
          v73 = v11;
          v78 = v42;
          v68 = v12;
          v88 = a7;
          v94 = v8;
          v83 = a3;
          result = v44 & 0xFFFFFFFFFFFFLL;
          do
          {
            v47 = __ldaxr((unsigned int *)result);
            v48 = --v47 == 0;
          }
          while (__stlxr(v47, (unsigned int *)result));
          v12 = v68;
          if (v48)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, a2);
            v11 = v73;
            v42 = v78;
            v12 = v68;
            a7 = v88;
            v8 = v94;
            a3 = v83;
          }
        }
        else if (v44 == v45 && (v45 & 0x8000000000000) == 0)
        {
          goto LABEL_97;
        }
        *((_QWORD *)a3 - 1) = *((_QWORD *)v11 - 1);
        *((_QWORD *)v11 - 1) = 0;
LABEL_97:
        a3 = v42;
        v11 = v12;
        if (v12 == (float *)a7)
          goto LABEL_133;
      }
    }
    goto LABEL_133;
  }
  if ((float *)result == a2)
    return result;
  v24 = 0;
  v8 = 0;
  do
  {
    v25 = a7 + v24;
    *(_DWORD *)v25 = *(_DWORD *)(result + v24);
    *(_QWORD *)(v25 + 8) = 0;
    v26 = *(_QWORD *)(result + v24 + 8);
    if (v26)
    {
      *(_QWORD *)(v25 + 8) = v26;
      *(_QWORD *)(result + v24 + 8) = 0;
    }
    ++v8;
    v24 += 16;
  }
  while ((float *)(result + v24) != a2);
  if (v24)
  {
    v27 = a7 + v24;
    v28 = a7 + v24 - 16;
    v29 = a7;
    while (a2 != a3)
    {
      if (*a2 >= *(float *)v29)
      {
        *(_DWORD *)result = *(_DWORD *)v29;
        v33 = *(_QWORD *)(result + 8);
        v34 = *(_QWORD *)(v29 + 8);
        if ((v33 & 0x8000000000000) != 0)
        {
          if ((v34 & 0x8000000000000) != 0
            && *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v34 & 0xFFFFFFFFFFFFLL) + 4)
            && *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v34 & 0xFFFFFFFFFFFFLL) + 8)
            && *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v34 & 0xFFFFFFFFFFFFLL) + 0xC)
            && *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v34 & 0xFFFFFFFFFFFFLL) + 0x10)
            && HIBYTE(v33) == HIBYTE(v34)
            && BYTE6(v33) == BYTE6(v34))
          {
            goto LABEL_61;
          }
          v61 = v27;
          v67 = v29;
          v72 = v28;
          v93 = v8;
          v64 = a2;
          v82 = a3;
          v77 = result;
          v87 = a7;
          v39 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
          do
          {
            v40 = __ldaxr(v39);
            v41 = --v40 == 0;
          }
          while (__stlxr(v40, v39));
          v8 = v93;
          if (v41)
          {
            atomic_store(1u, v39);
            WTF::fastFree((WTF *)v39, a2);
            v27 = v61;
            a2 = v64;
            v29 = v67;
            v28 = v72;
            a7 = v87;
            v8 = v93;
            a3 = v82;
            result = v77;
          }
        }
        else if (v33 == v34 && (v34 & 0x8000000000000) == 0)
        {
          goto LABEL_61;
        }
        *(_QWORD *)(result + 8) = *(_QWORD *)(v29 + 8);
        *(_QWORD *)(v29 + 8) = 0;
LABEL_61:
        v29 += 16;
        goto LABEL_62;
      }
      *(float *)result = *a2;
      v30 = *(_QWORD *)(result + 8);
      v31 = *((_QWORD *)a2 + 1);
      if ((v30 & 0x8000000000000) != 0)
      {
        if ((v31 & 0x8000000000000) != 0
          && *(float *)((v30 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v30 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v30 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v30 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v30) == HIBYTE(v31)
          && BYTE6(v30) == BYTE6(v31))
        {
          goto LABEL_54;
        }
        v60 = v27;
        v66 = v29;
        v71 = v28;
        v92 = v8;
        v63 = a2;
        v81 = a3;
        v76 = result;
        v86 = a7;
        v36 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
        do
        {
          v37 = __ldaxr(v36);
          v38 = --v37 == 0;
        }
        while (__stlxr(v37, v36));
        v8 = v92;
        if (v38)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, a2);
          v27 = v60;
          a2 = v63;
          v29 = v66;
          v28 = v71;
          a7 = v86;
          v8 = v92;
          a3 = v81;
          result = v76;
        }
      }
      else if (v30 == v31 && (v31 & 0x8000000000000) == 0)
      {
        goto LABEL_54;
      }
      *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
LABEL_54:
      a2 += 4;
LABEL_62:
      result += 16;
      if (v27 == v29)
        goto LABEL_133;
    }
    do
    {
      *(_DWORD *)result = *(_DWORD *)v29;
      v52 = *(_QWORD *)(result + 8);
      v53 = *(_QWORD *)(v29 + 8);
      if ((v52 & 0x8000000000000) != 0)
      {
        if ((v53 & 0x8000000000000) != 0
          && *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v52 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v53 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v52) == HIBYTE(v53)
          && BYTE6(v52) == BYTE6(v53))
        {
          goto LABEL_131;
        }
        v69 = v29;
        v74 = v28;
        v95 = v8;
        v79 = result;
        v89 = a7;
        v49 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
        do
        {
          v50 = __ldaxr(v49);
          v51 = --v50 == 0;
        }
        while (__stlxr(v50, v49));
        v8 = v95;
        if (v51)
        {
          atomic_store(1u, v49);
          WTF::fastFree((WTF *)v49, a2);
          v29 = v69;
          v28 = v74;
          a7 = v89;
          v8 = v95;
          result = v79;
        }
      }
      else if (v52 == v53 && (v53 & 0x8000000000000) == 0)
      {
        goto LABEL_131;
      }
      *(_QWORD *)(result + 8) = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
LABEL_131:
      result += 16;
      v20 = v28 == v29;
      v29 += 16;
    }
    while (!v20);
  }
LABEL_133:
  if (a7)
  {
    v55 = 0;
    do
    {
      v56 = *(_QWORD *)(a7 + 8);
      if ((v56 & 0x8000000000000) != 0)
      {
        v84 = v55;
        v90 = a7;
        v96 = v8;
        result = v56 & 0xFFFFFFFFFFFFLL;
        do
        {
          v57 = __ldaxr((unsigned int *)result);
          v58 = --v57 == 0;
        }
        while (__stlxr(v57, (unsigned int *)result));
        v55 = v84;
        if (v58)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
          v55 = v84;
          a7 = v90;
          v8 = v96;
        }
      }
      ++v55;
      a7 += 16;
    }
    while (v55 != v8);
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  char v8;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E340C678[v5])(&v8, a2, a3);
    *(_DWORD *)(a2 + 8) = v5;
  }
  result = *(__n128 *)(a3 + 16);
  v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v7;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 1;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;

  v4 = *a3;
  v5 = *(_QWORD *)(*a3 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_10:
  *a2 = v4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
  v4 = a3[2];
  *(_QWORD *)(a2 + 16) = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)(a2 + 24) = a3[3];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *(unsigned int *)(a2 + 8);
      v8 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v7 == -1)
      {
        if ((_DWORD)v8 == -1)
          goto LABEL_12;
      }
      else if ((_DWORD)v8 == -1)
      {
        ((void (*)(char *, uint64_t))off_1E340C650[v7])(&v14, a2);
        *(_DWORD *)(a2 + 8) = -1;
LABEL_12:
        result = *(__n128 *)(a3 + 16);
        v12 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 48) = v12;
        *(__n128 *)(a2 + 16) = result;
        return result;
      }
      v13 = a2;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E340C6D0[v8])(&v13, a2, a3);
      goto LABEL_12;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v15, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 8) = -1;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E340C678[v9])(&v16, v4, a3);
    *(_DWORD *)(v4 + 8) = v9;
  }
  result = *(__n128 *)(a3 + 16);
  v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v11;
  *(__n128 *)(v4 + 16) = result;
  *(_DWORD *)(v4 + 64) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_7:
    v8 = *a3;
    *v8 = **a3 + 1;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 64) = 2;
    return result;
  }
  v6 = *a3;
  *v6 = **a3 + 1;
  v7 = *a2;
  *a2 = (uint64_t)v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      if (*(_BYTE *)(v7 + 40))
      {
        v9 = *(unsigned int *)(v7 + 32);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v9])(&v12, v7 + 24);
        *(_DWORD *)(v7 + 32) = -1;
      }
      v10 = *(unsigned int *)(v7 + 16);
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v10])(&v13, v7 + 8);
      *(_DWORD *)(v7 + 16) = -1;
      return WTF::fastFree((WTF *)v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEERKS12_EEEDcSU_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<0ul,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore8GradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSQ_1EJSG_SL_EEERKS12_EEEDcSU_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E340C650[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 8) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__assign_alt[abi:sn180100]<0ul,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  char v24;

  v4 = result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5 == -1)
  {
LABEL_6:
    *(_DWORD *)(v4 + 8) = -1;
    v10 = *a3;
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_10;
    }
    result = MEMORY[0x19AEA534C](v11);
LABEL_10:
    ++*(_QWORD *)(v11 + 8);
    v13 = __ldxr((unsigned __int8 *)v11);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_15:
    *(_QWORD *)v4 = v10;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E340C650[v5])(&v24, result);
    goto LABEL_6;
  }
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_18;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_18:
  ++*(_QWORD *)(v8 + 8);
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_22:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v15 = *a2;
  *a2 = v7;
  if (!v15)
    return result;
  v16 = *(_QWORD *)(v15 + 8);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_28;
  }
  result = MEMORY[0x19AEA534C](v16);
LABEL_28:
  v18 = *(_QWORD *)(v16 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v16 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v23 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    v21 = v23 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v16);
  if (v22 != 1)
  {
    __clrex();
LABEL_35:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (v19)
      return result;
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
    goto LABEL_35;
  if (v19)
    return result;
LABEL_36:
  if (v20)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (!v21)
    return WTF::fastFree((WTF *)v16, a2);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKSS_EEEDcSK_DpT0_(unsigned int *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      a2[2] = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      v7 = *((_QWORD *)a2 + 2);
      v8 = a3[2];
      if ((v7 & 0x8000000000000) != 0)
      {
        if ((v8 & 0x8000000000000) != 0
          && *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v7) == HIBYTE(v8)
          && BYTE6(v7) == BYTE6(v8))
        {
LABEL_9:
          *((_QWORD *)a2 + 3) = a3[3];
          return result;
        }
        v17 = a2;
        result = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
        do
        {
          v18 = __ldaxr(result);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, result));
        if (!v19)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          a2 = v17;
        }
      }
      else if (v7 == v8 && (v8 & 0x8000000000000) == 0)
      {
        goto LABEL_9;
      }
      v10 = a3[2];
      *((_QWORD *)a2 + 2) = v10;
      if ((v10 & 0x8000000000000) != 0)
      {
        v15 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      goto LABEL_9;
    }
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v20, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  v11 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v11;
  v12 = a3[2];
  *(_QWORD *)(v4 + 16) = v12;
  if ((v12 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v4 + 24) = a3[3];
  *(_DWORD *)(v4 + 80) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 80) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *(_OWORD *)a2 = *(_OWORD *)a3;
      result = *(__n128 *)(a3 + 16);
      v7 = *(_OWORD *)(a3 + 32);
      v8 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v8;
      *(__n128 *)(a2 + 16) = result;
      *(_OWORD *)(a2 + 32) = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 32);
  v10 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 64) = v10;
  *(__n128 *)(v4 + 16) = result;
  *(_OWORD *)(v4 + 32) = v9;
  *(_DWORD *)(v4 + 80) = 2;
  return result;
}

WTF **WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WTF **result, void *a2)
{
  WTF *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;

  v2 = *result;
  if (*result)
  {
    v3 = (unsigned int *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        v6 = v3;
        WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v6);
      }
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

WTF **std::unique_ptr<WebCore::BidiCharacterRun>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  WebCore::BidiCharacterRun *v3;
  void *v4;
  WebCore::BidiCharacterRun *v5;
  WebCore::BidiCharacterRun *v6;
  WTF *v7;
  void *v8;
  WebCore::BidiCharacterRun *v9;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(WebCore::BidiCharacterRun **)v2;
    *(_QWORD *)v2 = 0;
    v9 = v3;
    if (v3)
    {
      do
      {
        v5 = *(WebCore::BidiCharacterRun **)v3;
        *(_QWORD *)v3 = 0;
        v6 = v9;
        v9 = v5;
        if (v6)
        {
          WebCore::BidiCharacterRun::~BidiCharacterRun(v6);
          WTF::fastFree(v7, v8);
        }
        v3 = v5;
      }
      while (v5);
    }
    std::unique_ptr<WebCore::BidiCharacterRun>::reset[abi:sn180100](&v9, 0);
    std::unique_ptr<WebCore::BidiCharacterRun>::reset[abi:sn180100](v2, 0);
    return (WTF **)WTF::fastFree(v2, v4);
  }
  return result;
}

void WebCore::BidiCharacterRun::~BidiCharacterRun(WTF **this)
{
  WebCore::BidiCharacterRun *v2;
  WebCore::BidiCharacterRun *v3;
  WebCore::BidiCharacterRun **v4;
  WTF *v5;
  void *v6;
  WebCore::BidiCharacterRun *v7;

  v2 = *this;
  *this = 0;
  v7 = v2;
  if (v2)
  {
    do
    {
      v3 = *(WebCore::BidiCharacterRun **)v2;
      *(_QWORD *)v2 = 0;
      v4 = (WebCore::BidiCharacterRun **)v7;
      v7 = v3;
      if (v4)
      {
        WebCore::BidiCharacterRun::~BidiCharacterRun(v4);
        WTF::fastFree(v5, v6);
      }
      v2 = v3;
    }
    while (v3);
  }
  std::unique_ptr<WebCore::BidiCharacterRun>::reset[abi:sn180100](&v7, 0);
  std::unique_ptr<WebCore::BidiCharacterRun>::reset[abi:sn180100](this, 0);
}

void WebCore::BidiCharacterRun::~BidiCharacterRun(WebCore::BidiCharacterRun **this)
{
  WebCore::BidiCharacterRun *v2;
  WebCore::BidiCharacterRun *v3;
  WTF *v4;
  void *v5;
  WTF **v6;
  WebCore::BidiCharacterRun *v7;
  void *v8;
  WebCore::BidiCharacterRun *v9;
  WebCore::BidiCharacterRun *v10;
  WTF *v11;
  void *v12;
  WebCore::BidiCharacterRun *v13;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    do
    {
      v3 = *(WebCore::BidiCharacterRun **)v2;
      *(_QWORD *)v2 = 0;
      WebCore::BidiCharacterRun::~BidiCharacterRun(v2);
      WTF::fastFree(v4, v5);
      v2 = v3;
    }
    while (v3);
    v6 = (WTF **)*this;
    *this = 0;
    if (v6)
    {
      v7 = *v6;
      *v6 = 0;
      v13 = v7;
      if (v7)
      {
        do
        {
          v9 = *(WebCore::BidiCharacterRun **)v7;
          *(_QWORD *)v7 = 0;
          v10 = v13;
          v13 = v9;
          if (v10)
          {
            WebCore::BidiCharacterRun::~BidiCharacterRun(v10);
            WTF::fastFree(v11, v12);
          }
          v7 = v9;
        }
        while (v9);
      }
      std::unique_ptr<WebCore::BidiCharacterRun>::reset[abi:sn180100](&v13, 0);
      std::unique_ptr<WebCore::BidiCharacterRun>::reset[abi:sn180100](v6, 0);
      WTF::fastFree((WTF *)v6, v8);
    }
  }
}

BOOL std::operator!=[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v8;
  unint64_t v9;

  if (*(_BYTE *)(a1 + 32))
    v2 = *(_BYTE *)(a2 + 32) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 32) != 0) ^ (*(_BYTE *)(a2 + 32) != 0);
  v4 = *(float *)a1 == *(float *)a2 && *(float *)(a1 + 4) == *(float *)(a2 + 4);
  if (v4 && *(float *)(a1 + 8) == *(float *)(a2 + 8))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a2 + 16);
    if ((v5 & 0x8000000000000) == 0)
    {
      v8 = (v6 & 0x8000000000000) == 0 && v5 == v6;
      return !v8;
    }
    if ((v6 & 0x8000000000000) != 0
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10))
    {
      v9 = HIBYTE(v6);
      v8 = BYTE6(v5) == BYTE6(v6);
      if (HIBYTE(v5) != (_DWORD)v9)
        v8 = 0;
      return !v8;
    }
  }
  v8 = 0;
  return !v8;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;

  return std::equal_to<void>::operator()[abi:sn180100]<WebCore::GraphicsDropShadow const&,WebCore::GraphicsDropShadow const&>((uint64_t)&v4, a2, a3);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const>(uint64_t a1, float *a2, float *a3)
{
  return a2[1] == a3[1] && *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  BOOL v6;

  v3 = 0;
  do
  {
    v4 = *(float *)(a2 + v3);
    v5 = *(float *)(a3 + v3);
    if (v4 != v5)
      break;
    v6 = v3 == 76;
    v3 += 4;
  }
  while (!v6);
  return v4 == v5;
}

BOOL std::equal_to<void>::operator()[abi:sn180100]<WebCore::GraphicsDropShadow const&,WebCore::GraphicsDropShadow const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(float *)a2 == *(float *)a3 && *(float *)(a2 + 4) == *(float *)(a3 + 4);
  if (!v3 || *(float *)(a2 + 8) != *(float *)(a3 + 8))
    return 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  if ((v4 & 0x8000000000000) != 0)
  {
    if ((v5 & 0x8000000000000) != 0
      && *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10))
    {
      return HIBYTE(v4) == HIBYTE(v5) && BYTE6(v4) == BYTE6(v5);
    }
    return 0;
  }
  return (v5 & 0x8000000000000) == 0 && v4 == v5;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  _BOOL4 v7;
  unint64_t v9;

  v3 = *(float *)a2 == *(float *)a3 && *(float *)(a2 + 4) == *(float *)(a3 + 4);
  if (!v3 || *(float *)(a2 + 8) != *(float *)(a3 + 8))
    goto LABEL_16;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  if ((v4 & 0x8000000000000) == 0)
  {
    v7 = (v5 & 0x8000000000000) == 0 && v4 == v5;
    return !v7;
  }
  if ((v5 & 0x8000000000000) == 0
    || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4)
    || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8)
    || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC)
    || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10))
  {
LABEL_16:
    v7 = 0;
    return !v7;
  }
  v9 = HIBYTE(v5);
  v7 = BYTE6(v4) == BYTE6(v5);
  if (HIBYTE(v4) != (_DWORD)v9)
    v7 = 0;
  return !v7;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const>(uint64_t a1, float *a2, float *a3)
{
  return a2[1] != a3[1] || *a2 != *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,std::__variant_detail::_Trait::GraphicsGaussianBlur,std::__variant_detail::_Trait::GraphicsColorMatrix> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  BOOL v6;

  v3 = 0;
  do
  {
    v4 = *(float *)(a2 + v3);
    v5 = *(float *)(a3 + v3);
    if (v4 != v5)
      break;
    v6 = v3 == 76;
    v3 += 4;
  }
  while (!v6);
  return v4 != v5;
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Gradient::adjustParametersForTiledDrawing(WebCore::FloatSize &,WebCore::FloatRect &,WebCore::FloatSize const&)::$_0,WebCore::Gradient::adjustParametersForTiledDrawing(WebCore::FloatSize &,WebCore::FloatRect &,WebCore::FloatSize const&)::$_1,WebCore::Gradient::adjustParametersForTiledDrawing(WebCore::FloatSize &,WebCore::FloatRect &,WebCore::FloatSize const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> &>(_QWORD **a1, float *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  float result;

  v3 = (_DWORD *)**a1;
  v2 = (_DWORD *)(*a1)[1];
  result = *a2;
  if (*a2 == a2[2])
  {
    *v3 = 1065353216;
    v2[2] = 1065353216;
LABEL_3:
    *v2 = 0;
    return result;
  }
  result = a2[1];
  if (result == a2[3])
  {
    v3[1] = 1065353216;
    v2[3] = 1065353216;
    ++v2;
    goto LABEL_3;
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Gradient::isZeroSize(void)::$_0,WebCore::Gradient::isZeroSize(void)::$_1,WebCore::Gradient::isZeroSize(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&>(uint64_t a1, float *a2)
{
  return a2[1] == a2[3] && *a2 == a2[2];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Gradient::isZeroSize(void)::$_0,WebCore::Gradient::isZeroSize(void)::$_1,WebCore::Gradient::isZeroSize(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&>(uint64_t a1, float *a2)
{
  return *a2 == a2[2] && a2[1] == a2[3] && a2[4] == a2[5];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Gradient::isZeroSize(void)::$_0,WebCore::Gradient::isZeroSize(void)::$_1,WebCore::Gradient::isZeroSize(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&>()
{
  return 0;
}

unsigned int *WTF::addArgs<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,WebCore::ColorInterpolationMethod,WebCore::GradientSpreadMethod,WebCore::GradientColorStops>(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5)
{
  unsigned int v9;

  WTF::add<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>(a1, a2);
  v9 = (*a1 + *(unsigned __int8 *)(a3 + 8)) ^ ((*a1 + *(unsigned __int8 *)(a3 + 8)) << 16);
  *a1 = v9 + (v9 >> 11);
  _ZN3WTF8switchOnIRKNSt3__17variantIJN7WebCore24ColorInterpolationMethod3HSLENS4_3HWBENS4_3LCHENS4_3LabENS4_5OKLCHENS4_5OKLabENS4_4SRGBENS4_10SRGBLinearENS4_9DisplayP3ENS4_6A98RGBENS4_11ProPhotoRGBENS4_7Rec2020ENS4_6XYZD50ENS4_6XYZD65EEEEJZNS3_3addERNS_6HasherERKS4_EUlTyRKT_E_EEEDTclsr3stdE5visitcl11makeVisitorspclsr3stdE7forwardIT0_Efp0_EEclsr3stdE7forwardISQ_Efp_EEEOSQ_DpOSU_(a3, (uint64_t)a1);
  return WTF::addArgs<WebCore::GradientSpreadMethod,WebCore::GradientColorStops>(a1, *a4, a5);
}

uint64_t WTF::add<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>(_DWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;

  if (*(_DWORD *)(a2 + 28) == -1)
    v4 = -1;
  else
    v4 = *(unsigned int *)(a2 + 28);
  WTF::add<unsigned long>(a1, v4);
  v8 = a1;
  v5 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore8Gradient10LinearDataENSB_10RadialDataENSB_9ConicDataEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_SE_EEEEEEDcSN_DpT0_(v7);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E340C790[v5])(&v9, a2);
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore8Gradient10LinearDataENSB_10RadialDataENSB_9ConicDataEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_SE_EEEEEEDcSN_DpT0_(_DWORD ***a1, uint64_t a2)
{
  return WTF::add<WebCore::FloatPoint,WebCore::FloatPoint>(**a1, (unsigned int *)(a2 + 8), *(float *)a2, *(float *)(a2 + 4));
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore8Gradient10LinearDataENSB_10RadialDataENSB_9ConicDataEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_SE_EEEEEEDcSN_DpT0_(_DWORD ***a1, unsigned int *a2)
{
  _DWORD *v3;
  _DWORD *result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v3 = **a1;
  WTF::add<float,float>(v3, *a2, a2[1]);
  result = WTF::add<float,float>(v3, a2[2], a2[3]);
  v5 = (a2[4] >> 5) & 0x7FFF800 ^ ((*v3 + (unsigned __int16)a2[4]) << 16) ^ (*v3 + (unsigned __int16)a2[4]);
  v6 = (a2[5] >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a2[5] + (v5 >> 11)) << 16) ^ (v5
                                                                                       + (unsigned __int16)a2[5]
                                                                                       + (v5 >> 11));
  v7 = a2[6];
  *v3 = ((v7 >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)v7 + (v6 >> 11)) << 16) ^ (v6
                                                                                   + (unsigned __int16)v7
                                                                                   + (v6 >> 11)))
      + (((v7 >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)v7 + (v6 >> 11)) << 16) ^ (v6
                                                                                    + (unsigned __int16)v7
                                                                                    + (v6 >> 11))) >> 11);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore8Gradient10LinearDataENSB_10RadialDataENSB_9ConicDataEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_SE_EEEEEEDcSN_DpT0_(_DWORD ***a1, unsigned int *a2)
{
  _DWORD *v3;
  _DWORD *result;
  unsigned int v5;

  v3 = **a1;
  result = WTF::add<float,float>(v3, *a2, a2[1]);
  v5 = (a2[2] >> 5) & 0x7FFF800 ^ ((*v3 + (unsigned __int16)a2[2]) << 16) ^ (*v3 + (unsigned __int16)a2[2]);
  *v3 = v5 + (v5 >> 11);
  return result;
}

_DWORD *WTF::add<WebCore::FloatPoint,WebCore::FloatPoint>(_DWORD *a1, unsigned int *a2, float a3, float a4)
{
  WTF::add<float,float>(a1, LODWORD(a3), LODWORD(a4));
  return WTF::add<float,float>(a1, *a2, a2[1]);
}

_DWORD *WTF::add<float,float>(_DWORD *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  v3 = (a2 >> 5) & 0x7FFF800 ^ ((*result + (unsigned __int16)a2) << 16) ^ (*result + (unsigned __int16)a2);
  *result = ((a3 >> 5) & 0x7FFF800 ^ ((v3 + (unsigned __int16)a3 + (v3 >> 11)) << 16) ^ (v3
                                                                                       + (unsigned __int16)a3
                                                                                       + (v3 >> 11)))
          + (((a3 >> 5) & 0x7FFF800 ^ ((v3 + (unsigned __int16)a3 + (v3 >> 11)) << 16) ^ (v3
                                                                                        + (unsigned __int16)a3
                                                                                        + (v3 >> 11))) >> 11);
  return result;
}

unsigned int *WTF::addArgs<WebCore::GradientSpreadMethod,WebCore::GradientColorStops>(unsigned int *result, unsigned __int8 a2, uint64_t *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (*result + a2) ^ ((*result + a2) << 16);
  *result = v3 + (v3 >> 11);
  v4 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v4)
  {
    v5 = result;
    v6 = *a3;
    v7 = *a3 + 16 * v4;
    do
    {
      result = WTF::add<float,WebCore::Color>(v5, *(_DWORD *)v6, *(_QWORD *)(v6 + 8));
      v6 += 16;
    }
    while (v6 != v7);
  }
  return result;
}

_QWORD **_ZN3WTF8switchOnIRKNSt3__17variantIJN7WebCore24ColorInterpolationMethod3HSLENS4_3HWBENS4_3LCHENS4_3LabENS4_5OKLCHENS4_5OKLabENS4_4SRGBENS4_10SRGBLinearENS4_9DisplayP3ENS4_6A98RGBENS4_11ProPhotoRGBENS4_7Rec2020ENS4_6XYZD50ENS4_6XYZD65EEEEJZNS3_3addERNS_6HasherERKS4_EUlTyRKT_E_EEEDTclsr3stdE5visitcl11makeVisitorspclsr3stdE7forwardIT0_Efp0_EEclsr3stdE7forwardISQ_Efp_EEEOSQ_DpOSU_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t *v7;

  v6 = a2;
  v2 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v2 == -1)
  {
    v4 = (_QWORD **)std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(v4, v5);
  }
  else
  {
    v7 = &v6;
    return (_QWORD **)((uint64_t (*)(uint64_t **, uint64_t))off_1E340C7A8[v2])(&v7, a1);
  }
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result, unsigned __int8 *a2)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = (_DWORD *)**result;
  v3 = ((*v2 ^ (*v2 << 16)) + *a2 + ((*v2 ^ (*v2 << 16)) >> 11)) ^ (((*v2 ^ (*v2 << 16))
                                                                                 + *a2
                                                                                 + ((*v2 ^ (*v2 << 16)) >> 11)) << 16);
  *v2 = v3 + (v3 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result, unsigned __int8 *a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (_DWORD *)**result;
  v3 = (*v2 + 1) ^ ((*v2 + 1) << 16);
  v4 = (v3 + *a2 + (v3 >> 11)) ^ ((v3 + *a2 + (v3 >> 11)) << 16);
  *v2 = v4 + (v4 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result, unsigned __int8 *a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (_DWORD *)**result;
  v3 = (*v2 + 2) ^ ((*v2 + 2) << 16);
  v4 = (v3 + *a2 + (v3 >> 11)) ^ ((v3 + *a2 + (v3 >> 11)) << 16);
  *v2 = v4 + (v4 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 3) ^ ((*v1 + 3) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result, unsigned __int8 *a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (_DWORD *)**result;
  v3 = (*v2 + 4) ^ ((*v2 + 4) << 16);
  v4 = (v3 + *a2 + (v3 >> 11)) ^ ((v3 + *a2 + (v3 >> 11)) << 16);
  *v2 = v4 + (v4 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 5) ^ ((*v1 + 5) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 6) ^ ((*v1 + 6) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 7) ^ ((*v1 + 7) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 8) ^ ((*v1 + 8) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 9) ^ ((*v1 + 9) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 10) ^ ((*v1 + 10) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 11) ^ ((*v1 + 11) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 12) ^ ((*v1 + 12) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

_QWORD **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3addERNS8_6HasherERKNSA_24ColorInterpolationMethodEEUlTyRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJNSD_3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEEEEEDcSG_DpT0_(_QWORD **result)
{
  _DWORD *v1;
  unsigned int v2;

  v1 = (_DWORD *)**result;
  v2 = (*v1 + 13) ^ ((*v1 + 13) << 16);
  *v1 = v2 + (v2 >> 11);
  return result;
}

unsigned int *WTF::add<float,WebCore::Color>(unsigned int *a1, unsigned int a2, unint64_t a3)
{
  *a1 = ((a2 >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)a2) << 16) ^ (*a1 + (unsigned __int16)a2))
      + (((a2 >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)a2) << 16) ^ (*a1 + (unsigned __int16)a2)) >> 11);
  return WebCore::add(a1, a3);
}

unsigned int *WebCore::add(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  char v5;
  unsigned __int8 v6;
  __int128 v7;

  if ((a2 & 0x8000000000000) != 0)
  {
    v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 4);
    v6 = HIBYTE(a2);
    v5 = BYTE6(a2);
    return WTF::add<WebCore::ColorComponents<float,4ul>,WebCore::ColorSpace,WTF::OptionSet<WebCore::Color::FlagsIncludingPrivate>>(result, &v7, &v6, &v5);
  }
  else
  {
    v2 = ((a2 >> 5) & 0x7FFF800 ^ ((*result + (unsigned __int16)a2) << 16) ^ (*result
                                                                                          + (unsigned __int16)a2))
       + (((a2 >> 5) & 0x7FFF800 ^ ((*result + (unsigned __int16)a2) << 16) ^ (*result
                                                                                           + (unsigned __int16)a2)) >> 11);
    *result = v2;
    if (BYTE6(a2))
    {
      v3 = HIWORD(a2);
      do
      {
        v4 = (v2 + (v3 & -(char)v3)) ^ ((v2 + (v3 & -(char)v3)) << 16);
        v2 = v4 + (v4 >> 11);
        LODWORD(v3) = (v3 - 1) & v3;
      }
      while ((_BYTE)v3);
      *result = v2;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::Gradient const&)::$_0,WebCore::operator<<(WTF::TextStream &,WebCore::Gradient const&)::$_1,WebCore::operator<<(WTF::TextStream &,WebCore::Gradient const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&>(WTF::TextStream ***a1)
{
  WTF::TextStream **v1;
  WTF::TextStream *v2;
  WTF::TextStream *v3;

  v1 = *a1;
  v2 = **a1;
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v2);
  v3 = *v1;
  WTF::TextStream::startGroup(*v1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::Gradient const&)::$_0,WebCore::operator<<(WTF::TextStream &,WebCore::Gradient const&)::$_1,WebCore::operator<<(WTF::TextStream &,WebCore::Gradient const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&>(uint64_t *a1)
{
  uint64_t v1;
  WTF::TextStream *v2;
  WTF::TextStream *v3;
  WTF::TextStream *v4;
  WTF::TextStream *v5;
  WTF::TextStream *v6;

  v1 = *a1;
  v2 = *(WTF::TextStream **)(*a1 + 8);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v2);
  v3 = *(WTF::TextStream **)(v1 + 8);
  WTF::TextStream::startGroup(v3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v3);
  v4 = *(WTF::TextStream **)(v1 + 8);
  WTF::TextStream::startGroup(v4);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v4);
  v5 = *(WTF::TextStream **)(v1 + 8);
  WTF::TextStream::startGroup(v5);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v5);
  v6 = *(WTF::TextStream **)(v1 + 8);
  WTF::TextStream::startGroup(v6);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v6);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,WebCore::Gradient const&)::$_0,WebCore::operator<<(WTF::TextStream &,WebCore::Gradient const&)::$_1,WebCore::operator<<(WTF::TextStream &,WebCore::Gradient const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&>(uint64_t *a1)
{
  uint64_t v1;
  WTF::TextStream *v2;
  WTF::TextStream *v3;

  v1 = *a1;
  v2 = *(WTF::TextStream **)(*a1 + 16);
  WTF::TextStream::startGroup(v2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(v2);
  v3 = *(WTF::TextStream **)(v1 + 16);
  WTF::TextStream::startGroup(v3);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v3);
}

uint64_t WTF::streamSizedContainer<WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WebCore *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;

  WTF::TextStream::operator<<();
  v4 = a2[3];
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)a2;
    WebCore::serializationForRenderTreeAsText((WebCore *)(*(_QWORD *)a2 + 8), (uint64_t *)&v14);
    WTF::TextStream::operator<<();
    v7 = v14;
    v14 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v8 = 1;
    if ((_DWORD)v4 != 1 && *(_DWORD *)(a1 + 32) != 1)
    {
      v9 = (WebCore *)(v5 + 24);
      v10 = 16 * v4 - 16;
      v8 = 2;
      while (1)
      {
        WTF::TextStream::operator<<();
        WebCore::serializationForRenderTreeAsText(v9, (uint64_t *)&v14);
        WTF::TextStream::operator<<();
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        if (v8 == *(_DWORD *)(a1 + 32))
          break;
        ++v8;
        v9 = (WebCore *)((char *)v9 + 16);
        v10 -= 16;
        if (!v10)
        {
          v8 = v4;
          break;
        }
      }
    }
    if (a2[3] != v8)
      WTF::TextStream::operator<<();
  }
  return WTF::TextStream::operator<<();
}

unsigned int *WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(unsigned int *result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  if (result != a2)
  {
    v20 = v2;
    v21 = v3;
    v5 = result;
    do
    {
      if (*((_BYTE *)v5 + 320))
      {
        v6 = v5[78];
        if ((_DWORD)v6 != -1)
          result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v6])(&v17, v5 + 58);
        v5[78] = -1;
      }
      if (*((_BYTE *)v5 + 224))
      {
        v7 = *((_QWORD *)v5 + 26);
        if ((v7 & 0x8000000000000) != 0)
        {
          result = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
          do
          {
            v15 = __ldaxr(result);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, result));
          if (!v16)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          }
        }
      }
      v8 = v5[42];
      if ((_DWORD)v8 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v8])(&v18, v5 + 26);
      v5[42] = -1;
      v9 = *((_QWORD *)v5 + 11);
      if ((v9 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
        do
        {
          v11 = __ldaxr(result);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, result));
        if (!v12)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v10 = v5[20];
      if ((_DWORD)v10 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v10])(&v19, v5 + 4);
      v5[20] = -1;
      if ((*(_QWORD *)v5 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(result);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, result));
        if (!v14)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v5 += 86;
    }
    while (v5 != a2);
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;
  __int128 v7;
  char v8;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E340C708[v5])(&v8, a2, a3);
    *(_DWORD *)(a2 + 8) = v5;
  }
  result = *(__n128 *)(a3 + 16);
  v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v7;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS9_7PatternENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS8_SA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = a3[2];
  if (v4)
  {
    *(_QWORD *)(a2 + 16) = v4;
    a3[2] = 0;
  }
  *(_QWORD *)(a2 + 24) = a3[3];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t WebCore::BidiStatus::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;

  v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v3;
  v4 = (unsigned int *)a2[2];
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (WTF *)v6;
      WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v10, a2);
    }
  }
  return a1;
}

uint64_t WebCore::BidiRunList<WebCore::BidiCharacterRun>::reverseRuns(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  WebCore::BidiCharacterRun ***v4;
  unsigned int v5;
  WebCore::BidiCharacterRun ***v6;
  WebCore::BidiCharacterRun ***v7;
  WebCore::BidiCharacterRun **v8;
  WebCore::BidiCharacterRun **v9;
  WebCore::BidiCharacterRun **v10;
  WebCore::BidiCharacterRun *v11;
  WebCore::BidiCharacterRun **v12;
  WebCore::BidiCharacterRun **v13;
  WTF *v14;
  void *v15;

  v3 = a3 - a2;
  if (a3 > a2)
  {
    v4 = 0;
    v5 = a2 + 1;
    v6 = (WebCore::BidiCharacterRun ***)result;
    do
    {
      v7 = v4;
      v6 = (WebCore::BidiCharacterRun ***)*v6;
      v4 = v6;
      --v5;
    }
    while (v5);
    v8 = (WebCore::BidiCharacterRun **)v6;
    do
    {
      v8 = (WebCore::BidiCharacterRun **)*v8;
      --v3;
    }
    while (v3);
    v9 = (WebCore::BidiCharacterRun **)*v8;
    if (!*v8)
    {
      *(_QWORD *)(result + 8) = v6;
      v9 = (WebCore::BidiCharacterRun **)*v8;
    }
    *v8 = 0;
    if (v7)
      v10 = (WebCore::BidiCharacterRun **)v7;
    else
      v10 = (WebCore::BidiCharacterRun **)result;
    v11 = *v10;
    *v10 = 0;
    if (v11)
    {
      do
      {
        v12 = (WebCore::BidiCharacterRun **)v11;
        v11 = *(WebCore::BidiCharacterRun **)v11;
        *v12 = (WebCore::BidiCharacterRun *)v9;
        v9 = v12;
      }
      while (v11);
      if (v7)
      {
LABEL_14:
        v13 = *v7;
        *v7 = v12;
        if (!v13)
          return result;
        goto LABEL_15;
      }
    }
    else
    {
      v12 = v9;
      if (v7)
        goto LABEL_14;
    }
    v13 = *(WebCore::BidiCharacterRun ***)result;
    *(_QWORD *)result = v12;
    if (v13)
    {
LABEL_15:
      WebCore::BidiCharacterRun::~BidiCharacterRun(v13);
      return WTF::fastFree(v14, v15);
    }
  }
  return result;
}

uint64_t *WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::embed(uint64_t a1, unsigned int a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t *)(a1 + 216);
  v7 = a2 | 0x100000000;
  v4 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 224))
  {
    result = (uint64_t *)WTF::Vector<WebCore::BidiEmbedding,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v4 + 1), (unint64_t)&v7);
    v4 = *(unsigned int *)(a1 + 228);
    v5 = *(_QWORD *)(a1 + 216);
    v6 = *result;
  }
  else
  {
    v5 = *result;
    v6 = v7;
  }
  *(_QWORD *)(v5 + 8 * v4) = v6;
  ++*(_DWORD *)(a1 + 228);
  return result;
}

BOOL WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::commitExplicitEmbedding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  unsigned int *v34;
  WTF *v35;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_BYTE *)(v3 + 4) & 0x3F;
  do
    v5 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v5 + 1, (unsigned int *)v3));
  v6 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v6)
  {
    v7 = *(int **)(a1 + 216);
    v8 = &v7[2 * v6];
    while (1)
    {
      v9 = *v7;
      if ((*v7 - 14) >= 2)
      {
        if (v9 == 16)
        {
          v12 = *(_QWORD *)(v3 + 8);
          if (!v12)
            goto LABEL_24;
          do
            v13 = __ldaxr((unsigned int *)v12);
          while (__stlxr(v13 + 1, (unsigned int *)v12));
          do
          {
            v14 = __ldaxr((unsigned int *)v3);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, (unsigned int *)v3));
          if (v15)
            goto LABEL_25;
          atomic_store(1u, (unsigned int *)v3);
          v35 = (WTF *)v3;
          goto LABEL_13;
        }
        a2 = 0;
        v10 = v9 == 12;
        v11 = (*(_BYTE *)(v3 + 4) & 0x3E) + 2;
      }
      else
      {
        v10 = v9 == 15;
        v11 = ((*(_BYTE *)(v3 + 4) & 0x3F) + 1) | 1;
        a2 = 1;
      }
      if (v11 > 0x3C)
      {
LABEL_24:
        v12 = v3;
        goto LABEL_25;
      }
      WebCore::BidiContext::createUncached(v11, a2, v10, v7[1], (unsigned int *)v3, (uint64_t *)&v34);
      v12 = (uint64_t)v34;
      v34 = 0;
      do
      {
        v16 = __ldaxr((unsigned int *)v3);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v3));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v3);
        v35 = (WTF *)v3;
        WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v35, (void *)a2);
      }
      v18 = v34;
      v34 = 0;
      if (!v18)
        goto LABEL_25;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (v20)
        goto LABEL_25;
      atomic_store(1u, v18);
      v35 = (WTF *)v18;
LABEL_13:
      WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v35, (void *)a2);
LABEL_25:
      v7 += 2;
      v3 = v12;
      if (v7 == v8)
        goto LABEL_28;
    }
  }
  v12 = v3;
LABEL_28:
  v21 = *(_BYTE *)(v12 + 4);
  v22 = v21 & 0x3F;
  if (v22 > v4)
  {
    v23 = v21 & 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_67;
    v24 = a1 + 32;
    v25 = a1 + 48;
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 48) && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a1 + 56))
      goto LABEL_67;
    if (*(_DWORD *)(a1 + 88) == 10)
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 68) != 0;
    v27 = *(_DWORD *)(a1 + 64);
    if ((v21 & 1) == 0)
    {
      if (v27 == 5)
      {
        v28 = 5;
        goto LABEL_62;
      }
      if (v27 != 2)
      {
        if ((v4 & 1) != 0)
          goto LABEL_66;
LABEL_59:
        if (*(_DWORD *)(a1 + 68))
        {
          WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal(a1);
          *(_DWORD *)(a1 + 88) = 0;
        }
        goto LABEL_66;
      }
      goto LABEL_50;
    }
    if (v27 != 5)
    {
      if (v27 == 2)
      {
        if (!(*(_DWORD *)(a1 + 68) | v4 & 1))
          goto LABEL_66;
        goto LABEL_65;
      }
      if ((v4 & 1) == 0)
        goto LABEL_66;
      goto LABEL_64;
    }
    goto LABEL_65;
  }
  if (v22 < v4)
  {
    v23 = v4 & 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_67;
    v24 = a1 + 32;
    v25 = a1 + 48;
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 48) && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a1 + 56))
      goto LABEL_67;
    if (*(_DWORD *)(a1 + 88) == 10)
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 68) != 0;
    v28 = *(_DWORD *)(a1 + 64);
    if ((v4 & 1) == 0)
    {
      if (v28 == 5)
        goto LABEL_62;
      if (v28 != 2)
        goto LABEL_59;
LABEL_50:
      if (!*(_DWORD *)(a1 + 68))
      {
LABEL_66:
        *(_QWORD *)v24 = *(_QWORD *)v25;
        *(_DWORD *)(v24 + 8) = *(_DWORD *)(v25 + 8);
LABEL_67:
        WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal(a1);
        *(_BYTE *)(a1 + 136) = 1;
        *(_DWORD *)(a1 + 68) = v23;
        *(_DWORD *)(a1 + 72) = v23;
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_68;
      }
      v28 = 2;
LABEL_62:
      *(_DWORD *)(a1 + 88) = v28;
      WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal(a1);
      goto LABEL_66;
    }
    if (v28 != 2 && v28 != 5)
    {
LABEL_64:
      if (*(_DWORD *)(a1 + 68))
        goto LABEL_66;
    }
LABEL_65:
    WebCore::BidiResolverBase<WebCore::TextBoxIterator,WebCore::BidiCharacterRun,WebCore::BidiResolver<WebCore::TextBoxIterator,WebCore::BidiCharacterRun>>::appendRunInternal(a1);
    *(_DWORD *)(a1 + 88) = 1;
    goto LABEL_66;
  }
LABEL_68:
  v29 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      v35 = (WTF *)v29;
      WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v35, (void *)a2);
    }
  }
  if (*(_DWORD *)(a1 + 224))
  {
    if (*(_DWORD *)(a1 + 228))
      *(_DWORD *)(a1 + 228) = 0;
    v32 = *(WTF **)(a1 + 216);
    if ((WTF *)(a1 + 232) == v32)
    {
      if (v32)
        return v4 != v22;
LABEL_80:
      *(_QWORD *)(a1 + 216) = a1 + 232;
      *(_DWORD *)(a1 + 224) = 8;
      return v4 != v22;
    }
    if (!v32)
      goto LABEL_80;
    *(_QWORD *)(a1 + 216) = 0;
    *(_DWORD *)(a1 + 224) = 0;
    WTF::fastFree(v32, (void *)a2);
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_80;
  }
  return v4 != v22;
}

WebCore::BidiCharacterRun **WebCore::BidiCharacterRun::setNext(WebCore::BidiCharacterRun ***a1, WebCore::BidiCharacterRun ***a2)
{
  WebCore::BidiCharacterRun **v3;
  WebCore::BidiCharacterRun **result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    WebCore::BidiCharacterRun::~BidiCharacterRun(result);
    return (WebCore::BidiCharacterRun **)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::BidiEmbedding,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 9)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_33;
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_33:
        v21 = 0;
        do
        {
          *(_QWORD *)(v11 + v21) = *(_QWORD *)((char *)v5 + v21);
          v21 += 8;
        }
        while (8 * v6 != v21);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x196183164);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 9)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_42;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 8 * v16;
    v19 = v5;
    do
    {
      v20 = *(_QWORD *)v19;
      v19 = (WTF *)((char *)v19 + 8);
      *v17++ = v20;
      v18 -= 8;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

void WebCore::FilterImage::~FilterImage(WebCore::FilterImage *this, void *a2)
{
  const void *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  const void *v14;
  uint64_t v15;

  v3 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v7);
LABEL_14:
    v9 = *(_QWORD *)(v7 + 8);
    v10 = v9 - 1;
    *(_QWORD *)(v7 + 8) = v9 - 1;
    if (v9 == 1)
    {
      v15 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      v12 = v15 != 0;
    }
    else
    {
      v11 = 0;
      v12 = 1;
    }
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
        if (v10)
          goto LABEL_26;
LABEL_22:
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        if (!v12)
          WTF::fastFree((WTF *)v7, a2);
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      goto LABEL_26;
    goto LABEL_22;
  }
LABEL_26:
  v14 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
    CFRelease(v14);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18GradientRendererCG8GradientENS9_7ShadingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18GradientRendererCG8GradientENS9_7ShadingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t *a2)
{
  const void *v3;
  const void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;

  v3 = (const void *)a2[2];
  a2[2] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a2[1];
  a2[1] = 0;
  if (v4)
    CFRelease(v4);
  v5 = *a2;
  *a2 = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(WTF **)(v5 + 16);
      if (v8)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        WTF::fastFree(v8, a2);
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

WTF **WebCore::GraphicsContextSwitcher::create@<X0>(uint64_t a1@<X0>, const WebCore::FloatRect *a2@<X1>, uint64_t a3@<X2>, WebCore::Filter **a4@<X3>, uint64_t a5@<X4>, WTF ***a6@<X8>)
{
  uint64_t v12;
  void *v13;
  WTF **result;
  uint64_t v15;
  WTF *v16;

  if (*a4 && (*((_BYTE *)*a4 + 49) & 4) != 0)
  {
    v15 = WTF::fastMalloc((WTF *)0x20);
    result = (WTF **)WebCore::TransparencyLayerContextSwitcher::TransparencyLayerContextSwitcher(v15, a1, a2, a4);
    *a6 = result;
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x30);
    v16 = 0;
    *a6 = (WTF **)WebCore::ImageBufferContextSwitcher::ImageBufferContextSwitcher(v12, a1, a2, a3, a4, a5);
    return std::unique_ptr<WebCore::ImageBufferContextSwitcher>::~unique_ptr[abi:sn180100](&v16, v13);
  }
  return result;
}

WTF **std::unique_ptr<WebCore::ImageBufferContextSwitcher>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  uint64_t v22;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (!v4)
      goto LABEL_19;
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_7;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_7:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v21 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v21 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          goto LABEL_19;
LABEL_15:
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if (!v10)
          WTF::fastFree((WTF *)v5, a2);
LABEL_19:
        v12 = *((_QWORD *)v3 + 1);
        *(_QWORD *)v3 = off_1E340C8F0;
        *((_QWORD *)v3 + 1) = 0;
        if (!v12)
          goto LABEL_36;
        v13 = *(_QWORD *)(v12 + 8);
        if (__ldaxr((unsigned __int8 *)v13))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v13))
        {
          goto LABEL_24;
        }
        MEMORY[0x19AEA534C](v13);
LABEL_24:
        v15 = *(_QWORD *)(v13 + 8);
        v16 = v15 - 1;
        *(_QWORD *)(v13 + 8) = v15 - 1;
        if (v15 == 1)
        {
          v22 = *(_QWORD *)(v13 + 16);
          v17 = *(_QWORD *)(v13 + 24);
          *(_QWORD *)(v13 + 24) = 0;
          v18 = v22 != 0;
        }
        else
        {
          v17 = 0;
          v18 = 1;
        }
        v19 = __ldxr((unsigned __int8 *)v13);
        if (v19 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v13))
          {
            if (!v16)
              goto LABEL_32;
            goto LABEL_36;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v13);
        if (!v16)
        {
LABEL_32:
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (!v18)
            WTF::fastFree((WTF *)v13, a2);
        }
LABEL_36:
        WTF::fastFree(v3, a2);
        return a1;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      goto LABEL_19;
    goto LABEL_15;
  }
  return a1;
}

uint64_t WebCore::animatedPropertyIDAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      break;
    default:
      v2 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      *a2 = v2;
      break;
  }
  return result;
}

void *WTF::Vector<std::unique_ptr<WebCore::AnimationValue const>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  void *result;
  uint64_t v9;

  v3 = (uint64_t *)a3;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
  {
    v3 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, a3);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * a2);
  result = memmove(v7 + 1, v7, *(_QWORD *)a1 + 8 * v6 - (_QWORD)v7);
  v9 = *v3;
  *v3 = 0;
  *v7 = v9;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebCore::GraphicsLayer::GraphicsLayer(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E340C940;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 72) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 76) = 0x3F0000003F000000;
  *(_OWORD *)(result + 84) = 0u;
  *(_OWORD *)(result + 100) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_DWORD *)(result + 128) = 1065353216;
  *(_OWORD *)(result + 132) = 0u;
  *(_OWORD *)(result + 148) = 0u;
  *(_DWORD *)(result + 164) = 0;
  *(_BYTE *)(result + 168) = 1;
  *(_BYTE *)(result + 169) = a2;
  *(_BYTE *)(result + 170) = 0;
  *(_DWORD *)(result + 172) = 3;
  *(_BYTE *)(result + 176) = 0;
  v3 = *(unsigned __int8 *)(result + 179) >> 6;
  if (a2 == 1)
    v4 = 791628;
  else
    v4 = 791624;
  *(_WORD *)(result + 177) = v4;
  *(_BYTE *)(result + 179) = (v4 & 0xFF3FFFFF | ((v3 & 3) << 22)) >> 16;
  *(_OWORD *)(result + 180) = 0uLL;
  *(_OWORD *)(result + 196) = 0uLL;
  *(_OWORD *)(result + 212) = 0uLL;
  *(_OWORD *)(result + 228) = 0uLL;
  *(_OWORD *)(result + 240) = 0uLL;
  *(_OWORD *)(result + 256) = 0uLL;
  *(_OWORD *)(result + 272) = 0uLL;
  *(_OWORD *)(result + 288) = 0uLL;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_QWORD *)(result + 304) = 0;
  *(_OWORD *)(result + 328) = 0uLL;
  *(_OWORD *)(result + 344) = 0uLL;
  *(_OWORD *)(result + 360) = 0uLL;
  *(_BYTE *)(result + 376) = 0;
  *(_BYTE *)(result + 392) = 0;
  *(_BYTE *)(result + 512) = 0;
  *(_OWORD *)(result + 473) = 0uLL;
  *(_OWORD *)(result + 448) = 0uLL;
  *(_OWORD *)(result + 464) = 0uLL;
  *(_OWORD *)(result + 416) = 0uLL;
  *(_OWORD *)(result + 432) = 0uLL;
  *(_OWORD *)(result + 400) = 0uLL;
  *(_WORD *)(result + 520) = 1;
  *(_DWORD *)(result + 592) = 0;
  *(_DWORD *)(result + 600) = 0;
  return result;
}

uint64_t *WebCore::GraphicsLayer::resetTrackedRepaints(uint64_t *this)
{
  char *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;

  {
    WebCore::repaintRectMap(void)::map = 0;
    return this;
  }
  v4 = this;
  if (WebCore::repaintRectMap(void)::map)
  {
    this = WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>(&WebCore::repaintRectMap(void)::map, &v4);
    if (this)
    {
      v1 = (char *)this;
      if (!WebCore::repaintRectMap(void)::map)
      {
        v2 = 0;
        goto LABEL_7;
      }
      v3 = *(_DWORD *)(WebCore::repaintRectMap(void)::map - 4);
    }
    else
    {
      if (!WebCore::repaintRectMap(void)::map)
        return this;
      v3 = *(_DWORD *)(WebCore::repaintRectMap(void)::map - 4);
      v1 = (char *)(WebCore::repaintRectMap(void)::map + 24 * v3);
    }
    v2 = WebCore::repaintRectMap(void)::map + 24 * v3;
LABEL_7:
    if ((char *)v2 != v1)
      return (uint64_t *)WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::removeWithoutEntryConsistencyCheck((WTF *)&WebCore::repaintRectMap(void)::map, v1);
  }
  return this;
}

void *WebCore::GraphicsLayer::removeFromParent(WebCore::GraphicsLayer *this)
{
  void *result;
  uint64_t v3;
  uint64_t v4;
  WebCore::GraphicsLayer **v5;
  WebCore::GraphicsLayer **v6;
  uint64_t v7;

  result = (void *)*((_QWORD *)this + 25);
  if (result)
  {
    result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 912))(result);
    v3 = *((_QWORD *)this + 25);
    if (v3)
    {
      *((_QWORD *)this + 25) = 0;
      v4 = *(unsigned int *)(v3 + 196);
      if ((_DWORD)v4)
      {
        v5 = *(WebCore::GraphicsLayer ***)(v3 + 184);
        v6 = v5 + 1;
        v7 = *(unsigned int *)(v3 + 196);
        while (*v5 != this)
        {
          ++v5;
          ++v6;
          if (!--v7)
            return result;
        }
        *v5 = 0;
        if (this)
        {
          if (*((_DWORD *)this + 2) == 1)
          {
            (*(void (**)(WebCore::GraphicsLayer *))(*(_QWORD *)this + 16))(this);
            v4 = *(unsigned int *)(v3 + 196);
          }
          else
          {
            --*((_DWORD *)this + 2);
          }
        }
        result = memmove(v5, v5 + 1, *(_QWORD *)(v3 + 184) + 8 * v4 - (_QWORD)v6);
        --*(_DWORD *)(v3 + 196);
      }
    }
  }
  return result;
}

uint64_t WebCore::GraphicsLayer::clearClient(uint64_t this)
{
  {
    WebCore::EmptyGraphicsLayerClient::singleton(void)::client = (uint64_t)off_1E340CF70;
  }
  *(_QWORD *)(this + 24) = &WebCore::EmptyGraphicsLayerClient::singleton(void)::client;
  return this;
}

_QWORD *WebCore::GraphicsLayer::clear(_QWORD *result)
{
  _DWORD *v1;
  _DWORD *v2;

  v1 = (_DWORD *)*result;
  if (*result)
  {
    {
      WebCore::EmptyGraphicsLayerClient::singleton(void)::client = (uint64_t)off_1E340CF70;
    }
    *((_QWORD *)v1 + 3) = &WebCore::EmptyGraphicsLayerClient::singleton(void)::client;
    v2 = (_DWORD *)*result;
    *result = 0;
    if (v2)
    {
      if (v2[2] == 1)
        return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
      else
        --v2[2];
    }
  }
  return result;
}

uint64_t WebCore::GraphicsLayer::debugName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 32);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::GraphicsLayer::setClient(uint64_t this, WebCore::GraphicsLayerClient *a2)
{
  *(_QWORD *)(this + 24) = a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::setChildren(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 12);
  v5 = *(_DWORD *)(result + 196);
  if ((_DWORD)v4 == v5)
  {
    result = memcmp(*(const void **)a2, *(const void **)(result + 184), 8 * v4);
    if (!(_DWORD)result)
      return result;
  }
  if (v5)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 912))(v3);
    v11 = *(WTF **)(v3 + 184);
    v12 = *(unsigned int *)(v3 + 196);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = 8 * v12;
      v15 = *(uint64_t **)(v3 + 184);
      do
      {
        v16 = *v15++;
        *(_QWORD *)(v16 + 200) = 0;
        v14 -= 8;
      }
      while (v14);
      if (!*(_DWORD *)(v3 + 192))
        goto LABEL_4;
      do
      {
        result = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 8) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          else
            --*(_DWORD *)(result + 8);
        }
        v11 = (WTF *)((char *)v11 + 8);
        v13 -= 8;
      }
      while (v13);
      *(_DWORD *)(v3 + 196) = 0;
      v11 = *(WTF **)(v3 + 184);
    }
    else if (!*(_DWORD *)(v3 + 192))
    {
      goto LABEL_4;
    }
    if (v11)
    {
      *(_QWORD *)(v3 + 184) = 0;
      *(_DWORD *)(v3 + 192) = 0;
      result = WTF::fastFree(v11, v10);
    }
  }
LABEL_4:
  v6 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v6)
    return 1;
  v7 = 0;
  v8 = 0;
  v9 = 8 * v6;
  while (v8 < *(unsigned int *)(a2 + 12))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(v3, *(_QWORD *)a2 + v7);
    ++v8;
    v7 += 8;
    result = 1;
    if (v9 == v7)
      return result;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::GraphicsLayer::addChild(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 912))(v5);
    v10 = *(_QWORD *)(v4 + 200);
    if (v10)
    {
      *(_QWORD *)(v4 + 200) = 0;
      v11 = *(unsigned int *)(v10 + 196);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD **)(v10 + 184);
        v13 = v12 + 1;
        v14 = *(unsigned int *)(v10 + 196);
        while (*v12 != v4)
        {
          ++v12;
          ++v13;
          if (!--v14)
            goto LABEL_2;
        }
        *v12 = 0;
        if (v4)
        {
          if (*(_DWORD *)(v4 + 8) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
            v11 = *(unsigned int *)(v10 + 196);
          }
          else
          {
            --*(_DWORD *)(v4 + 8);
          }
        }
        memmove(v12, v12 + 1, *(_QWORD *)(v10 + 184) + 8 * v11 - (_QWORD)v13);
        --*(_DWORD *)(v10 + 196);
      }
    }
  }
LABEL_2:
  *(_QWORD *)(*(_QWORD *)v2 + 200) = a1;
  result = (_QWORD *)(a1 + 184);
  v7 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 192))
  {
    result = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v7 + 1, v2);
    v2 = (unint64_t)result;
    v7 = *(unsigned int *)(a1 + 196);
    v8 = (_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v7);
  }
  else
  {
    v8 = (_QWORD *)(*result + 8 * v7);
  }
  v9 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *v8 = v9;
  *(_DWORD *)(a1 + 196) = v7 + 1;
  return result;
}

void *WebCore::GraphicsLayer::addChildAtIndex(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 912))(v7);
    v8 = *(_QWORD *)(v6 + 200);
    if (v8)
    {
      *(_QWORD *)(v6 + 200) = 0;
      v9 = *(unsigned int *)(v8 + 196);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD **)(v8 + 184);
        v11 = v10 + 1;
        v12 = *(unsigned int *)(v8 + 196);
        while (*v10 != v6)
        {
          ++v10;
          ++v11;
          if (!--v12)
            goto LABEL_12;
        }
        *v10 = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 8) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
            v9 = *(unsigned int *)(v8 + 196);
          }
          else
          {
            --*(_DWORD *)(v6 + 8);
          }
        }
        memmove(v10, v10 + 1, *(_QWORD *)(v8 + 184) + 8 * v9 - (_QWORD)v11);
        --*(_DWORD *)(v8 + 196);
      }
    }
  }
LABEL_12:
  *(_QWORD *)(*(_QWORD *)a2 + 200) = a1;
  return WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>(a1 + 184, a3, a2);
}

_QWORD *WebCore::GraphicsLayer::addChildBelow(uint64_t a1, WebCore::GraphicsLayer **a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::GraphicsLayer *v10;

  WebCore::GraphicsLayer::removeFromParent(*a2);
  *((_QWORD *)*a2 + 25) = a1;
  result = (_QWORD *)(a1 + 184);
  v7 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (*(_QWORD *)(*result + 8 * v8) != a3)
    {
      if (v7 == ++v8)
        goto LABEL_6;
    }
    return WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>((uint64_t)result, v8, (unint64_t)a2);
  }
  else
  {
LABEL_6:
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 192))
    {
      return (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)result, (unint64_t)a2);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 184);
      v10 = *a2;
      *a2 = 0;
      *(_QWORD *)(v9 + 8 * v7) = v10;
      *(_DWORD *)(a1 + 196) = v7 + 1;
    }
  }
  return result;
}

uint64_t *WebCore::GraphicsLayer::addChildAbove(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 912))(v7);
    v8 = *(_QWORD *)(v6 + 200);
    if (v8)
    {
      *(_QWORD *)(v6 + 200) = 0;
      v9 = *(unsigned int *)(v8 + 196);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD **)(v8 + 184);
        v11 = v10 + 1;
        v12 = *(unsigned int *)(v8 + 196);
        while (*v10 != v6)
        {
          ++v10;
          ++v11;
          if (!--v12)
            goto LABEL_12;
        }
        *v10 = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 8) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
            v9 = *(unsigned int *)(v8 + 196);
          }
          else
          {
            --*(_DWORD *)(v6 + 8);
          }
        }
        memmove(v10, v10 + 1, *(_QWORD *)(v8 + 184) + 8 * v9 - (_QWORD)v11);
        --*(_DWORD *)(v8 + 196);
      }
    }
  }
LABEL_12:
  *(_QWORD *)(*(_QWORD *)a2 + 200) = a1;
  result = (uint64_t *)(a1 + 184);
  v14 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v14)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(*result + 8 * v15++);
      if (v16 == a3)
        return (uint64_t *)WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>((uint64_t)result, v15, a2);
      if (v14 == v15)
      {
        v17 = *(unsigned int *)(a1 + 196);
        goto LABEL_18;
      }
    }
  }
  else
  {
    v17 = 0;
LABEL_18:
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 192))
    {
      result = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v17 + 1, a2);
      v14 = *(unsigned int *)(a1 + 196);
      v18 = *(_QWORD *)(a1 + 184);
      v19 = *result;
      *result = 0;
      *(_QWORD *)(v18 + 8 * v14) = v19;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 184);
      v21 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(v20 + 8 * v17) = v21;
    }
    *(_DWORD *)(a1 + 196) = v14 + 1;
  }
  return result;
}

BOOL WebCore::GraphicsLayer::replaceChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a1 + 196);
  if (!(_DWORD)v3)
    return 0;
  v6 = *a3;
  v7 = *(_QWORD **)(a1 + 184);
  if (*v7 != a2)
  {
    v8 = 0;
    while (v3 - 1 != v8)
    {
      v9 = v7[++v8];
      if (v9 == a2)
      {
        v10 = v8 < v3;
        goto LABEL_9;
      }
    }
    return 0;
  }
  v8 = 0;
  v10 = 1;
LABEL_9:
  *a3 = 0;
  v11 = (_DWORD *)v7[v8];
  v7[v8] = v6;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[2];
  }
  *(_QWORD *)(a2 + 200) = 0;
  v12 = *(_QWORD *)(v6 + 200);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 912))(v12);
    v13 = *(_QWORD *)(v6 + 200);
    if (v13)
    {
      *(_QWORD *)(v6 + 200) = 0;
      v14 = *(unsigned int *)(v13 + 196);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD **)(v13 + 184);
        v16 = v15 + 1;
        v17 = *(unsigned int *)(v13 + 196);
        while (*v15 != v6)
        {
          ++v15;
          ++v16;
          if (!--v17)
            goto LABEL_23;
        }
        *v15 = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 8) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
            v14 = *(unsigned int *)(v13 + 196);
          }
          else
          {
            --*(_DWORD *)(v6 + 8);
          }
        }
        memmove(v15, v15 + 1, *(_QWORD *)(v13 + 184) + 8 * v14 - (_QWORD)v16);
        --*(_DWORD *)(v13 + 196);
      }
    }
  }
LABEL_23:
  *(_QWORD *)(v6 + 200) = a1;
  return v10;
}

uint64_t WebCore::GraphicsLayer::setPreserves3D(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 4;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFFFB;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::setMasksToBounds(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 16;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFFEF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::setDrawsContent(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 32;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFFDF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

__int128 *WebCore::GraphicsLayer::transform(WebCore::GraphicsLayer *this)
{
  if (*((_QWORD *)this + 13))
    return (__int128 *)*((_QWORD *)this + 13);
  else
    return &WebCore::TransformationMatrix::identity;
}

__n128 WebCore::GraphicsLayer::setTransform(WebCore::GraphicsLayer *this, const WebCore::TransformationMatrix *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v15 = *(_OWORD *)a2;
    v16 = *((_OWORD *)a2 + 1);
    v17 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v3 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v3 + 48) = v17;
    *(_OWORD *)v3 = v15;
    *(_OWORD *)(v3 + 16) = v16;
    result = *((__n128 *)a2 + 4);
    v18 = *((_OWORD *)a2 + 5);
    v19 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(v3 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(v3 + 112) = v19;
    *(__n128 *)(v3 + 64) = result;
    *(_OWORD *)(v3 + 80) = v18;
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x80);
    v7 = *((_OWORD *)a2 + 3);
    v9 = *(_OWORD *)a2;
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v6 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)v6 = v9;
    *(_OWORD *)(v6 + 16) = v8;
    result = *((__n128 *)a2 + 6);
    v11 = *((_OWORD *)a2 + 7);
    v13 = *((_OWORD *)a2 + 4);
    v12 = *((_OWORD *)a2 + 5);
    *(__n128 *)(v6 + 96) = result;
    *(_OWORD *)(v6 + 112) = v11;
    *(_OWORD *)(v6 + 64) = v13;
    *(_OWORD *)(v6 + 80) = v12;
    v14 = (WTF *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v6;
    if (v14)
      WTF::fastFree(v14, v5);
  }
  return result;
}

__int128 *WebCore::GraphicsLayer::childrenTransform(WebCore::GraphicsLayer *this)
{
  if (*((_QWORD *)this + 14))
    return (__int128 *)*((_QWORD *)this + 14);
  else
    return &WebCore::TransformationMatrix::identity;
}

_QWORD *WebCore::GraphicsLayer::setChildrenTransform(_QWORD *this, const WebCore::TransformationMatrix *a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  void *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = (_OWORD *)this[14];
  if (v3)
  {
    v4 = *(_OWORD *)a2;
    v5 = *((_OWORD *)a2 + 1);
    v6 = *((_OWORD *)a2 + 3);
    v3[2] = *((_OWORD *)a2 + 2);
    v3[3] = v6;
    *v3 = v4;
    v3[1] = v5;
    v7 = *((_OWORD *)a2 + 4);
    v8 = *((_OWORD *)a2 + 5);
    v9 = *((_OWORD *)a2 + 7);
    v3[6] = *((_OWORD *)a2 + 6);
    v3[7] = v9;
    v3[4] = v7;
    v3[5] = v8;
  }
  else
  {
    v10 = this;
    v12 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
    v13 = *((_OWORD *)a2 + 3);
    v15 = *(_OWORD *)a2;
    v14 = *((_OWORD *)a2 + 1);
    v12[2] = *((_OWORD *)a2 + 2);
    v12[3] = v13;
    *v12 = v15;
    v12[1] = v14;
    v16 = *((_OWORD *)a2 + 7);
    v18 = *((_OWORD *)a2 + 4);
    v17 = *((_OWORD *)a2 + 5);
    v12[6] = *((_OWORD *)a2 + 6);
    v12[7] = v16;
    v12[4] = v18;
    v12[5] = v17;
    this = (_QWORD *)v10[14];
    v10[14] = v12;
    if (this)
      return (_QWORD *)WTF::fastFree((WTF *)this, v11);
  }
  return this;
}

uint64_t WebCore::GraphicsLayer::setFilters(WebCore::GraphicsLayer *this, const WebCore::FilterOperations *a2)
{
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 34, (uint64_t)a2);
  return 1;
}

uint64_t WebCore::GraphicsLayer::setOpacity(uint64_t this, float a2)
{
  *(float *)(this + 128) = a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::setMaskLayer(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v2 = *a2;
  v3 = *(_QWORD *)(result + 208);
  if (*a2 != v3)
  {
    v5 = result;
    if (v2)
    {
      v6 = *(_QWORD *)(v2 + 200);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 912))(v6);
        v7 = *(_QWORD *)(v2 + 200);
        if (v7)
        {
          *(_QWORD *)(v2 + 200) = 0;
          v8 = *(unsigned int *)(v7 + 196);
          if ((_DWORD)v8)
          {
            v9 = *(_QWORD **)(v7 + 184);
            v10 = v9 + 1;
            v11 = *(unsigned int *)(v7 + 196);
            while (*v9 != v2)
            {
              ++v9;
              ++v10;
              if (!--v11)
                goto LABEL_15;
            }
            *v9 = 0;
            if (*(_DWORD *)(v2 + 8) == 1)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
              v8 = *(unsigned int *)(v7 + 196);
            }
            else
            {
              --*(_DWORD *)(v2 + 8);
            }
            memmove(v9, v9 + 1, *(_QWORD *)(v7 + 184) + 8 * v8 - (_QWORD)v10);
            --*(_DWORD *)(v7 + 196);
          }
        }
      }
LABEL_15:
      *(_QWORD *)(*a2 + 200) = v5;
      *(_WORD *)(*a2 + 177) |= 0x8000u;
    }
    else if (v3)
    {
      *(_QWORD *)(v3 + 200) = 0;
      v12 = *(_QWORD *)(result + 208);
      v13 = *(unsigned __int16 *)(v12 + 177);
      v12 += 177;
      v14 = *(unsigned __int8 *)(v12 + 2);
      *(_WORD *)v12 = v13 & 0x7FFF;
      *(_BYTE *)(v12 + 2) = (v13 & 0xFFFF7FFF | (v14 << 16)) >> 16;
    }
    v15 = *a2;
    *a2 = 0;
    result = *(_QWORD *)(v5 + 208);
    *(_QWORD *)(v5 + 208) = v15;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t WebCore::GraphicsLayer::setVideoGravity(uint64_t result, char a2)
{
  *(_BYTE *)(result + 520) = a2;
  return result;
}

uint64_t WebCore::GraphicsLayer::setShapeLayerPath(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(unsigned int *)(result + 592);
  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v2 == -1)
  {
    if ((_DWORD)v3 == -1)
      return result;
  }
  else if ((_DWORD)v3 == -1)
  {
    v4 = result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_6[v2])(&v6, result + 536);
    *(_DWORD *)(v4 + 592) = -1;
    return result;
  }
  v5 = result + 536;
  return ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_0[v3])(&v5);
}

uint64_t WebCore::GraphicsLayer::setShapeLayerWindRule(uint64_t result, char a2)
{
  *(_BYTE *)(result + 521) = a2;
  return result;
}

uint64_t WebCore::GraphicsLayer::setEventRegion(uint64_t a1, uint64_t a2)
{
  return WebCore::EventRegion::operator=(a1 + 400, a2);
}

uint64_t WebCore::GraphicsLayer::setIsInWindow(WebCore::GraphicsLayer *this, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::GraphicsLayer *))(*(_QWORD *)this + 832))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 144))(result, a2);
  return result;
}

_DWORD *WebCore::GraphicsLayer::setReplicatedByLayer(uint64_t a1, _DWORD **a2)
{
  _DWORD *v3;
  _DWORD *result;
  _DWORD *v6;

  v3 = *(_DWORD **)(a1 + 216);
  result = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v3 + 928))(v3, 0);
      result = *a2;
    }
    if (result)
    {
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)result + 928))(result, a1);
      v6 = *a2;
    }
    else
    {
      v6 = 0;
    }
    *a2 = 0;
    result = *(_DWORD **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v6;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t WebCore::GraphicsLayer::setSize(uint64_t this, const WebCore::FloatSize *a2, __n128 a3, __n128 a4)
{
  uint64_t v5;

  a3.n128_u32[0] = *(_DWORD *)a2;
  a4.n128_u32[0] = *((_DWORD *)a2 + 1);
  if (*(float *)a2 != *(float *)(this + 88) || a4.n128_f32[0] != *(float *)(this + 92))
  {
    v5 = this;
    *(_QWORD *)(this + 88) = *(_QWORD *)a2;
    this = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)this + 920))(this, a3, a4);
    if ((_DWORD)this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 320))(v5);
  }
  return this;
}

uint64_t WebCore::GraphicsLayer::setBackgroundColor(uint64_t this, const WebCore::Color *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  const WebCore::Color *v14;
  const WebCore::Color *v15;
  __int128 v16;
  __int128 v17;

  v2 = *(_QWORD *)(this + 120);
  v3 = *(_QWORD *)a2;
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) != 0)
    {
      v14 = a2;
      v17 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
      v16 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      v5 = this;
      v6 = WebCore::operator==<float,4ul>((float *)&v17, (float *)&v16);
      v2 = *(_QWORD *)(v5 + 120);
      if (v6 && HIBYTE(v2) == HIBYTE(*(_QWORD *)v14))
      {
        this = v5;
        a2 = v14;
        if (BYTE6(v2) == BYTE6(*(_QWORD *)v14))
          return this;
      }
      else
      {
        this = v5;
        a2 = v14;
      }
    }
  }
  else if (v2 == v3 && (v3 & 0x8000000000000) == 0)
  {
    return this;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    v13 = this;
    v15 = a2;
    v10 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
      this = v13;
      a2 = v15;
    }
  }
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(this + 120) = *(_QWORD *)a2;
  if ((v7 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  return this;
}

uint64_t WebCore::GraphicsLayer::paintGraphicsLayerContents(uint64_t a1, uint64_t a2, __int128 *a3, unsigned __int8 a4)
{
  float v7;
  float v8;
  float v10;
  float v11;
  __int128 v12;

  v7 = *(float *)(a1 + 40) - (float)*(int *)(a1 + 48);
  v8 = *(float *)(a1 + 44) - (float)*(int *)(a1 + 52);
  v12 = *a3;
  if (v7 != 0.0)
  {
    v10 = v7;
    if (v7 < 0.0)
      v10 = -v7;
    if (v10 >= 0.00000011921)
      goto LABEL_7;
  }
  if (v8 != 0.0)
  {
    v11 = v8;
    if (v8 < 0.0)
      v11 = -v8;
    if (v11 >= 0.00000011921)
    {
LABEL_7:
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, -v7, -v8);
      *(float *)&v12 = v7 + *(float *)&v12;
      *((float *)&v12 + 1) = v8 + *((float *)&v12 + 1);
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __int128 *, _QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24), a1, a2, &v12, a4);
}

void WebCore::GraphicsLayer::createAsyncContentsDisplayDelegate(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *WebCore::GraphicsLayer::getDebugBorderInfo(uint64_t *this, WebCore::Color *a2, float *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  *a3 = 2.0;
  if (*((_DWORD *)this + 41))
  {
    v5 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != 0x11040000FF00FF80)
    {
      if ((v5 & 0x8000000000000) != 0)
      {
        this = (uint64_t *)(v5 & 0xFFFFFFFFFFFFLL);
        do
        {
          v17 = __ldaxr((unsigned int *)this);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)this));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)this);
          this = (uint64_t *)WTF::fastFree((WTF *)this, a2);
        }
      }
      *(_QWORD *)a2 = 0x11040000FF00FF80;
    }
    v6 = 1094713344;
LABEL_6:
    *(_DWORD *)a3 = v6;
    return this;
  }
  v7 = (uint64_t)this;
  v8 = *this;
  if ((*(_WORD *)((_BYTE *)this + 177) & 0x20) != 0)
  {
    this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v8 + 832))(this);
    v11 = *(_QWORD *)a2;
    if (this)
    {
      v12 = 0x11040000FF800080;
      if (v11 == 0x11040000FF800080)
        return this;
      if ((v11 & 0x8000000000000) == 0)
        goto LABEL_27;
      this = (uint64_t *)(v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr((unsigned int *)this);
        v14 = --v13 == 0;
      }
      while (__stlxr(v13, (unsigned int *)this));
    }
    else
    {
      v12 = 0x1104000000802080;
      if (v11 == 0x1104000000802080)
        return this;
      if ((v11 & 0x8000000000000) == 0)
        goto LABEL_27;
      this = (uint64_t *)(v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v21 = __ldaxr((unsigned int *)this);
        v14 = --v21 == 0;
      }
      while (__stlxr(v21, (unsigned int *)this));
    }
    goto LABEL_43;
  }
  this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v8 + 576))(this);
  if ((_DWORD)this)
  {
    v10 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != 0x1104000000408096)
    {
      if ((v10 & 0x8000000000000) != 0)
      {
        this = (uint64_t *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v19 = __ldaxr((unsigned int *)this);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, (unsigned int *)this));
        if (!v20)
        {
          atomic_store(1u, (unsigned int *)this);
          this = (uint64_t *)WTF::fastFree((WTF *)this, v9);
        }
      }
      *(_QWORD *)a2 = 0x1104000000408096;
    }
    v6 = 1090519040;
    goto LABEL_6;
  }
  v15 = *(_QWORD *)a2;
  if ((*(_WORD *)(v7 + 177) & 0x10) != 0)
  {
    if (v15 != 0x1104000080FFFF30)
    {
      if ((v15 & 0x8000000000000) != 0)
      {
        this = (uint64_t *)(v15 & 0xFFFFFFFFFFFFLL);
        do
        {
          v22 = __ldaxr((unsigned int *)this);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, (unsigned int *)this));
        if (!v23)
        {
          atomic_store(1u, (unsigned int *)this);
          this = (uint64_t *)WTF::fastFree((WTF *)this, v9);
        }
      }
      *(_QWORD *)a2 = 0x1104000080FFFF30;
    }
    v6 = 1098907648;
    goto LABEL_6;
  }
  v12 = 0x11040000FFFF00C0;
  if (v15 != 0x11040000FFFF00C0)
  {
    if ((v15 & 0x8000000000000) == 0)
    {
LABEL_27:
      *(_QWORD *)a2 = v12;
      return this;
    }
    this = (uint64_t *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr((unsigned int *)this);
      v14 = --v16 == 0;
    }
    while (__stlxr(v16, (unsigned int *)this));
LABEL_43:
    if (v14)
    {
      atomic_store(1u, (unsigned int *)this);
      this = (uint64_t *)WTF::fastFree((WTF *)this, v9);
    }
    goto LABEL_27;
  }
  return this;
}

uint64_t WebCore::GraphicsLayer::updateDebugIndicators(uint64_t this)
{
  uint64_t v1;
  void *v2;
  unsigned int v3;
  unsigned int v4;
  float v5;
  uint64_t v6;

  if ((*(_WORD *)(this + 177) & 0x2000) != 0)
  {
    v1 = this;
    v6 = 0;
    v5 = 0.0;
    (*(void (**)(uint64_t, uint64_t *, float *))(*(_QWORD *)this + 944))(this, &v6, &v5);
    this = (*(uint64_t (**)(uint64_t, uint64_t *, float))(*(_QWORD *)v1 + 640))(v1, &v6, v5);
    if ((v6 & 0x8000000000000) != 0)
    {
      this = v6 & 0xFFFFFFFFFFFFLL;
      do
      {
        v3 = __ldaxr((unsigned int *)this);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, (unsigned int *)this));
      if (!v4)
      {
        atomic_store(1u, (unsigned int *)this);
        return WTF::fastFree((WTF *)this, v2);
      }
    }
  }
  return this;
}

uint64_t WebCore::GraphicsLayer::setZPosition(uint64_t this, float a2)
{
  *(float *)(this + 132) = a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::setAcceleratedEffectsAndBaseValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _DWORD *v7;

  result = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a2 + 12))
  {
    if (!result)
    {
      result = bmalloc::api::isoAllocate();
      *(_DWORD *)(result + 8) = 1;
      *(_QWORD *)result = &off_1E31F5B08;
      *(_DWORD *)(result + 16) = 1065353216;
      *(_BYTE *)(result + 20) = 0;
      *(_BYTE *)(result + 108) = 0;
      *(_DWORD *)(result + 112) = 0;
      *(_DWORD *)(result + 115) = 0;
      *(_DWORD *)(result + 120) = 0;
      *(_DWORD *)(result + 123) = 0;
      *(_BYTE *)(result + 128) = 1;
      *(_DWORD *)(result + 192) = 0;
      *(_DWORD *)(result + 195) = 0;
      *(_DWORD *)(result + 200) = 0;
      *(_DWORD *)(result + 203) = 0;
      *(_DWORD *)(result + 208) = 0;
      *(_DWORD *)(result + 211) = 0;
      *(_DWORD *)(result + 219) = 0;
      *(_DWORD *)(result + 216) = 0;
      *(_DWORD *)(result + 224) = 0;
      *(_BYTE *)(result + 228) = 0;
      *(_OWORD *)(result + 136) = 0u;
      *(_OWORD *)(result + 152) = 0u;
      *(_OWORD *)(result + 168) = 0u;
      *(_QWORD *)(result + 183) = 0;
      *(_OWORD *)(result + 248) = 0u;
      *(_OWORD *)(result + 264) = 0u;
      *(_OWORD *)(result + 232) = 0u;
      *(_OWORD *)(result + 280) = 0u;
      v7 = *(_DWORD **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = result;
      if (v7)
      {
        if (v7[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
          result = *(_QWORD *)(a1 + 16);
        }
        else
        {
          --v7[2];
        }
      }
    }
    (**(void (***)(uint64_t, uint64_t))result)(result, a2);
    return WebCore::AcceleratedEffectValues::operator=(*(_QWORD *)(a1 + 16) + 16, a3);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  return result;
}

double WebCore::GraphicsLayer::backingStoreMemoryEstimate(WebCore::GraphicsLayer *this)
{
  double result;

  result = 0.0;
  if ((*(_WORD *)((_BYTE *)this + 177) & 0x20) != 0)
    return (float)(*((float *)this + 22) * 4.0) * *((float *)this + 23);
  return result;
}

WTF *WebCore::GraphicsLayer::addRepaintRect(WebCore::GraphicsLayer *this, float32x2_t *a2)
{
  WTF *result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WebCore::GraphicsLayer *v11;
  _QWORD v12[3];
  __int128 v13;

  result = (WTF *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 136))(*((_QWORD *)this + 3));
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)this + 11);
    *(_QWORD *)&v13 = 0;
    *((_QWORD *)&v13 + 1) = v5;
    WebCore::FloatRect::intersect((float32x2_t *)&v13, a2);
    {
      WebCore::repaintRectMap(void)::map = 0;
    }
    v10 = 0;
    v11 = this;
    v9 = 0;
    WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&WebCore::repaintRectMap(void)::map, (uint64_t *)&v11, (uint64_t)&v9, (uint64_t)v12);
    v7 = v12[0];
    v8 = *(unsigned int *)(v12[0] + 20);
    if ((_DWORD)v8 == *(_DWORD *)(v12[0] + 16))
    {
      WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(v12[0] + 8, (unint64_t)&v13);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)(v12[0] + 8) + 16 * v8) = v13;
      ++*(_DWORD *)(v7 + 20);
    }
    result = v9;
    if (v9)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      return (WTF *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(_DWORD *)(v8 - 4);
        v24 = 0;
        v25 = v8 + 24 * v23;
        goto LABEL_32;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  result = (uint64_t *)v16[1];
  if (result)
  {
    v16[1] = 0;
    *((_DWORD *)v16 + 4) = 0;
    result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
  }
  v20 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v16[1] = v20;
  LODWORD(v20) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *((_DWORD *)v16 + 4) = v20;
  LODWORD(v20) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *((_DWORD *)v16 + 5) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v26 = *v6;
  if (*v6)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_26;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
LABEL_29:
      result = WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::rehash(v6, v30, v16);
      v16 = result;
      v26 = *v6;
      if (*v6)
        LODWORD(v29) = *(_DWORD *)(v26 - 4);
      else
        LODWORD(v29) = 0;
      goto LABEL_31;
    }
LABEL_26:
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
    goto LABEL_29;
  }
LABEL_31:
  v25 = v26 + 24 * v29;
  v24 = 1;
LABEL_32:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

uint64_t WebCore::GraphicsLayer::setTileCoverage(WebCore::GraphicsLayer *this, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::GraphicsLayer *))(*(_QWORD *)this + 832))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 160))(result, a2);
  return result;
}

uint64_t WebCore::GraphicsLayer::dumpLayer(uint64_t a1, WTF::TextStream *this, unsigned __int16 a3)
{
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((a3 & 1) != 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::operator<<();
  WebCore::GraphicsLayer::dumpProperties(a1, this, a3);
  WTF::TextStream::writeIndent(this);
  return WTF::TextStream::operator<<();
}

WTF::StringImpl *WebCore::GraphicsLayer::dumpProperties(uint64_t a1, WTF::TextStream *this, unsigned __int16 a3)
{
  uint64_t v3;
  int *v4;
  float v8;
  float v9;
  unint64_t v10;
  char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  __int16 v16;
  int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  double *v22;
  double *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  void *v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t i;
  void *v36;
  unint64_t v37;
  void *v38;
  float v39;
  WTF::StringImpl *v40;
  void *v41;
  WTF::StringImpl *v42;
  void *v43;
  WTF::StringImpl *v44;
  void *v45;
  WTF::StringImpl *v46;
  void *v47;
  WTF::TextStream *v48;
  int v49;
  int v50;
  int j;
  int v52;
  WTF::StringImpl *result;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  char v62;
  int v63;
  __int16 v64;
  int v65;
  WTF::StringImpl *v66;

  ++*((_DWORD *)this + 6);
  v8 = *(float *)(a1 + 40);
  if (v8 != 0.0)
  {
    if (v8 < 0.0)
      v8 = -v8;
    if (v8 >= 0.00000011921)
      goto LABEL_175;
  }
  v9 = *(float *)(a1 + 44);
  if (v9 != 0.0)
  {
    if (v9 < 0.0)
      v9 = -v9;
    if (v9 >= 0.00000011921)
    {
LABEL_175:
      WTF::TextStream::writeIndent(this);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      *(double *)&v59 = *(float *)(a1 + 40);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      *(double *)&v66 = *(float *)(a1 + 44);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
    }
  }
  if (*(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 52))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(float *)(a1 + 56) != 0.0 || *(float *)(a1 + 60) != 0.0)
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_BYTE *)(a1 + 72))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    if (!*(_BYTE *)(a1 + 72) || (WTF::TextStream::operator<<(), WTF::TextStream::operator<<(), !*(_BYTE *)(a1 + 72)))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_210;
    }
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(float *)(a1 + 96) != 0.0 || *(float *)(a1 + 100) != 0.0)
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  v3 = a3;
  if ((*(unsigned int (**)(_QWORD, uint64_t, const char *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24), a1, "anchorPoint", 12, a3))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (*(float *)(a1 + 84) != 0.0)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
    }
    WTF::TextStream::operator<<();
  }
  if (*(float *)(a1 + 88) != 0.0 || *(float *)(a1 + 92) != 0.0)
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(float *)(a1 + 128) != 1.0)
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_BYTE *)(a1 + 168) != 1)
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    v10 = *(unsigned __int8 *)(a1 + 168);
    if (v10 < 2)
      goto LABEL_29;
    v11 = (&WebCore::blendOperatorNames)[2 * (v10 - 1) + 1];
    if (!v11)
    {
      *(double *)&v66 = 0.0;
LABEL_31:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      v14 = v66;
      *(double *)&v66 = 0.0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      goto LABEL_34;
    }
    if (v11 == (char *)1)
    {
      v12 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
LABEL_29:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v12 = v59;
    }
    v66 = v12;
    goto LABEL_31;
  }
LABEL_34:
  if (!*(_BYTE *)(a1 + 169) && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 832))(a1))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
  }
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24), a1);
  LOBYTE(v16) = *(_WORD *)(a1 + 177);
  if ((*(_WORD *)(a1 + 177) & 2) != 0 || v15)
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v16 = *(_WORD *)(a1 + 177);
  }
  if ((v16 & 0x10) != 0 && (a3 & 0x100) != 0)
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v16 = *(_WORD *)(a1 + 177);
  }
  if ((v16 & 4) != 0)
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v16 = *(_WORD *)(a1 + 177);
  }
  if ((v16 & 0x20) != 0
    && (*(unsigned int (**)(_QWORD, uint64_t, const char *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24), a1, "drawsContent", 13, a3))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  v17 = *(unsigned __int16 *)(a1 + 177);
  v18 = v17 | (*(unsigned __int8 *)(a1 + 179) << 16);
  if ((v17 & 0x40) != 0)
  {
    if ((v17 & 8) != 0)
      goto LABEL_50;
  }
  else
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    v33 = *(unsigned __int16 *)(a1 + 177);
    v18 = v33 | (*(unsigned __int8 *)(a1 + 179) << 16);
    if ((v33 & 8) != 0)
    {
LABEL_50:
      if ((v18 & 0x10000) == 0)
        goto LABEL_51;
LABEL_117:
      WTF::TextStream::writeIndent(this);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      if ((a3 & 1) == 0)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  WTF::TextStream::writeIndent(this);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (((*(unsigned __int16 *)(a1 + 177) | (*(unsigned __int8 *)(a1 + 179) << 16)) & 0x10000) != 0)
    goto LABEL_117;
LABEL_51:
  if ((a3 & 1) != 0)
  {
LABEL_52:
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    *(double *)&v59 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1));
    v60 = v19;
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    v66 = v60;
    WTF::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
LABEL_53:
  if ((*(_BYTE *)(a1 + 126) & 4) == 0
    || !(*(unsigned int (**)(_QWORD, uint64_t, const char *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24), a1, "backgroundColor", 16, a3)|| (WTF::TextStream::writeIndent(this), WTF::TextStream::operator<<(), WebCore::serializationForRenderTreeAsText((WebCore *)(a1 + 120), (uint64_t *)&v59), WTF::TextStream::operator<<(), WTF::TextStream::operator<<(), v21 = v59, *(double *)&v59 = 0.0, !v21))
  {
LABEL_58:
    if ((a3 & 0x80) != 0)
      goto LABEL_59;
    goto LABEL_61;
  }
  if (*(_DWORD *)v21 != 2)
  {
    *(_DWORD *)v21 -= 2;
    goto LABEL_58;
  }
  WTF::StringImpl::destroy(v21, v20);
  if ((a3 & 0x80) != 0)
  {
LABEL_59:
    if ((*(_WORD *)(a1 + 177) & 0x100) != 0)
    {
      WTF::TextStream::writeIndent(this);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
    }
  }
LABEL_61:
  if ((a3 & 0x200) != 0)
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  v22 = *(double **)(a1 + 104);
  if (v22
    && (*v22 != 1.0
     || v22[1] != 0.0
     || v22[2] != 0.0
     || v22[3] != 0.0
     || v22[4] != 0.0
     || v22[5] != 1.0
     || v22[6] != 0.0
     || v22[7] != 0.0
     || v22[8] != 0.0
     || v22[9] != 0.0
     || v22[10] != 1.0
     || v22[11] != 0.0
     || v22[12] != 0.0
     || v22[13] != 0.0
     || v22[14] != 0.0
     || v22[15] != 1.0))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_QWORD *)(a1 + 200))
  {
    v23 = *(double **)(a1 + 112);
    if (v23)
    {
      if (*v23 != 1.0
        || v23[1] != 0.0
        || v23[2] != 0.0
        || v23[3] != 0.0
        || v23[4] != 0.0
        || v23[5] != 1.0
        || v23[6] != 0.0
        || v23[7] != 0.0
        || v23[8] != 0.0
        || v23[9] != 0.0
        || v23[10] != 1.0
        || v23[11] != 0.0
        || v23[12] != 0.0
        || v23[13] != 0.0
        || v23[14] != 0.0
        || v23[15] != 1.0)
      {
        WTF::TextStream::writeIndent(this);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
      }
    }
  }
  if (*(_QWORD *)(a1 + 208))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    if ((a3 & 1) != 0)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
    }
    WTF::TextStream::operator<<();
    ++*((_DWORD *)this + 6);
    WebCore::GraphicsLayer::dumpLayer(*(_QWORD *)(a1 + 208), this);
    --*((_DWORD *)this + 6);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    if ((a3 & 1) != 0)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
    }
    WTF::TextStream::operator<<();
    ++*((_DWORD *)this + 6);
    WebCore::GraphicsLayer::dumpLayer(*(_QWORD *)(a1 + 216), this);
    --*((_DWORD *)this + 6);
  }
  if (*(_QWORD *)(a1 + 224))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    if ((a3 & 1) != 0)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
    }
    WTF::TextStream::operator<<();
  }
  if ((a3 & 8) == 0)
    goto LABEL_155;
  v4 = &dword_1ECE90000;
  {
    if (!WebCore::repaintRectMap(void)::map)
      goto LABEL_155;
    v24 = *(_DWORD *)(WebCore::repaintRectMap(void)::map - 8);
    v25 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
    v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
    v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
    v28 = v24 & ((v27 >> 31) ^ v27);
    v29 = *(_QWORD *)(WebCore::repaintRectMap(void)::map + 24 * v28);
    if (v29 == a1)
    {
LABEL_113:
      WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>((uint64_t)&v59, a1);
      if (HIDWORD(v60))
        v32 = (*(uint64_t (**)(_QWORD, uint64_t, const char *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24), a1, "repaintRects", 13, a3);
      else
        v32 = 0;
      if (*(double *)&v59 == 0.0)
      {
        if (!v32)
          goto LABEL_155;
      }
      else
      {
        WTF::fastFree(v59, v31);
        if (!v32)
          goto LABEL_155;
      }
      WTF::TextStream::writeIndent(this);
      WTF::TextStream::operator<<();
      v34 = 0;
      for (i = 0; ; ++i)
      {
        {
          WebCore::repaintRectMap(void)::map = 0;
        }
        WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>((uint64_t)&v59, a1);
        v37 = HIDWORD(v60);
        if (*(double *)&v59 != 0.0)
          WTF::fastFree(v59, v36);
        if (i >= v37)
          break;
        {
          WebCore::repaintRectMap(void)::map = 0;
        }
        WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>((uint64_t)&v59, a1);
        if (i >= HIDWORD(v60))
        {
          __break(0xC471u);
          JUMPOUT(0x1961867FCLL);
        }
        if (*(float *)((char *)v59 + v34 + 8) <= 0.0)
        {
          WTF::fastFree(v59, v38);
        }
        else
        {
          v39 = *(float *)((char *)v59 + v34 + 12);
          WTF::fastFree(v59, v38);
          if (v39 > 0.0)
          {
            ++*((_DWORD *)this + 6);
            WTF::TextStream::writeIndent(this);
            WTF::TextStream::operator<<();
            {
              WebCore::repaintRectMap(void)::map = 0;
            }
            WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>((uint64_t)&v59, a1);
            if (i >= HIDWORD(v60))
            {
              __break(0xC471u);
              JUMPOUT(0x196186804);
            }
            v40 = v59;
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::fastFree(v40, v41);
            {
              WebCore::repaintRectMap(void)::map = 0;
            }
            WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>((uint64_t)&v59, a1);
            if (i >= HIDWORD(v60))
            {
              __break(0xC471u);
              JUMPOUT(0x19618680CLL);
            }
            v42 = v59;
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::fastFree(v42, v43);
            {
              WebCore::repaintRectMap(void)::map = 0;
            }
            WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>((uint64_t)&v59, a1);
            if (i >= HIDWORD(v60))
            {
              __break(0xC471u);
              JUMPOUT(0x19618681CLL);
            }
            v44 = v59;
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::fastFree(v44, v45);
            {
              WebCore::repaintRectMap(void)::map = 0;
            }
            WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>((uint64_t)&v59, a1);
            if (i >= HIDWORD(v60))
            {
              __break(0xC471u);
              JUMPOUT(0x196186814);
            }
            v46 = v59;
            WTF::TextStream::operator<<();
            WTF::fastFree(v46, v47);
            WTF::TextStream::operator<<();
            --*((_DWORD *)this + 6);
          }
        }
        v34 += 16;
      }
      WTF::TextStream::writeIndent(this);
      WTF::TextStream::operator<<();
      v3 = a3;
    }
    else
    {
      v30 = 1;
      while (v29)
      {
        v28 = (v28 + v30) & v24;
        v29 = *(_QWORD *)(WebCore::repaintRectMap(void)::map + 24 * v28);
        ++v30;
        if (v29 == a1)
          goto LABEL_113;
      }
    }
LABEL_155:
    if ((a3 & 0x800) == 0)
      goto LABEL_159;
    goto LABEL_156;
  }
LABEL_210:
  WebCore::repaintRectMap(void)::map = 0;
  *((_BYTE *)v4 + 3728) = 1;
  if ((a3 & 0x800) == 0)
    goto LABEL_159;
LABEL_156:
  if (*(int *)(a1 + 408) >= 1 && *(int *)(a1 + 412) >= 1)
  {
    WTF::TextStream::writeIndent(this);
    v48 = (WTF::TextStream *)WTF::TextStream::operator<<();
    WebCore::EventRegion::dump((WebCore::EventRegion *)(a1 + 400), v48);
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
  }
LABEL_159:
  if ((a3 & 0x10) != 0 && *(_DWORD *)(a1 + 172))
  {
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    v49 = *(_DWORD *)(a1 + 172);
    WTF::TextStream::operator<<();
    if (v49)
    {
      v50 = v49 & -v49;
      if (v50 > 15)
      {
        if (v50 == 16 || v50 == 32 || v50 == 64)
LABEL_181:
          WTF::TextStream::operator<<();
      }
      else
      {
        switch(v50)
        {
          case 1:
          case 2:
          case 4:
          case 8:
            goto LABEL_181;
          default:
            break;
        }
      }
      for (j = (v49 - 1) & v49; j; j &= j - 1)
      {
        v52 = j & -j;
        WTF::TextStream::operator<<();
        if (v52 > 15)
        {
          if (v52 == 16 || v52 == 32 || v52 == 64)
LABEL_188:
            WTF::TextStream::operator<<();
        }
        else
        {
          switch(v52)
          {
            case 1:
            case 2:
            case 4:
            case 8:
              goto LABEL_188;
            default:
              continue;
          }
        }
      }
    }
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::TextStream *, uint64_t))(*(_QWORD *)a1 + 936))(a1, this, v3);
  if (*(_DWORD *)(a1 + 196))
  {
    *(double *)&v59 = 0.0;
    v60 = 0;
    v61 = 0;
    v62 = 1;
    v64 = 256;
    v65 = 0;
    v63 = *((_DWORD *)this + 6);
    v58 = 0;
    WebCore::dumpChildren((uint64_t)&v59, a1 + 184, &v58, v3);
    if (v58)
    {
      WTF::TextStream::writeIndent(this);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::release((WTF::TextStream *)&v59);
      WTF::TextStream::operator<<();
      v56 = v66;
      *(double *)&v66 = 0.0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v55);
        else
          *(_DWORD *)v56 -= 2;
      }
      WTF::TextStream::writeIndent(this);
      WTF::TextStream::operator<<();
    }
    v57 = v60;
    v60 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v54);
      else
        *(_DWORD *)v57 -= 2;
    }
    result = v59;
    *(double *)&v59 = 0.0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v54);
      else
        *(_DWORD *)result -= 2;
    }
  }
  --*((_DWORD *)this + 6);
  return result;
}

uint64_t WebCore::dumpChildren(uint64_t result, uint64_t a2, _DWORD *a3, unsigned __int16 a4)
{
  uint64_t v4;
  WTF::TextStream *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  *a3 += *(_DWORD *)(a2 + 12);
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v5 = (WTF::TextStream *)result;
    v6 = *(uint64_t **)a2;
    v7 = a4;
    if ((a4 & 1) != 0)
    {
      v10 = *(_DWORD *)(result + 24) + 1;
      v11 = 8 * v4;
      do
      {
        *((_DWORD *)v5 + 6) = v10;
        v12 = *v6++;
        result = WebCore::GraphicsLayer::dumpLayer(v12, v5);
        v10 = *((_DWORD *)v5 + 6);
        *((_DWORD *)v5 + 6) = v10 - 1;
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      v9 = 8 * v4;
      do
      {
        if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*v6 + 24) + 144))(*(_QWORD *)(*v6 + 24), *v6, v7) & 1) != 0)
        {
          --*a3;
          result = WebCore::dumpChildren(v5, *v6 + 184, a3, v7);
        }
        else
        {
          ++*((_DWORD *)v5 + 6);
          result = WebCore::GraphicsLayer::dumpLayer(*v6, v5);
          --*((_DWORD *)v5 + 6);
        }
        ++v6;
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::GraphicsLayer::layerTreeAsText(uint64_t a1, unsigned __int16 a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  char v8;
  int v9;
  __int16 v10;
  int v11;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 1;
  v9 = 0;
  v10 = 257;
  v11 = 0;
  WebCore::GraphicsLayer::dumpLayer(a1, (WTF::TextStream *)&v5, a2);
  WTF::TextStream::release((WTF::TextStream *)&v5);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::GraphicsLayerContentsDisplayDelegate::orientation(WebCore::GraphicsLayerContentsDisplayDelegate *this)
{
  return 0;
}

double WebCore::GraphicsLayerTransform::GraphicsLayerTransform(WebCore::GraphicsLayerTransform *this)
{
  double result;

  *(_QWORD *)this = 0x3F0000003F000000;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 14) = 1;
  *((_BYTE *)this + 30) = 0;
  result = 0.0;
  *((_OWORD *)this + 6) = xmmword_1969F7B48;
  *((_OWORD *)this + 7) = unk_1969F7B58;
  *((_OWORD *)this + 8) = xmmword_1969F7B68;
  *((_OWORD *)this + 9) = unk_1969F7B78;
  *((_OWORD *)this + 2) = xmmword_1969F7B08;
  *((_OWORD *)this + 3) = unk_1969F7B18;
  *((_OWORD *)this + 4) = xmmword_1969F7B28;
  *((_OWORD *)this + 5) = unk_1969F7B38;
  *((_OWORD *)this + 14) = xmmword_1969F7B48;
  *((_OWORD *)this + 15) = unk_1969F7B58;
  *((_OWORD *)this + 16) = xmmword_1969F7B68;
  *((_OWORD *)this + 17) = unk_1969F7B78;
  *((_OWORD *)this + 10) = xmmword_1969F7B08;
  *((_OWORD *)this + 11) = unk_1969F7B18;
  *((_OWORD *)this + 12) = xmmword_1969F7B28;
  *((_OWORD *)this + 13) = unk_1969F7B38;
  *((_OWORD *)this + 18) = xmmword_1969F7B08;
  *((_OWORD *)this + 19) = unk_1969F7B18;
  *((_OWORD *)this + 20) = xmmword_1969F7B28;
  *((_OWORD *)this + 21) = unk_1969F7B38;
  *((_OWORD *)this + 22) = xmmword_1969F7B48;
  *((_OWORD *)this + 23) = unk_1969F7B58;
  *((_OWORD *)this + 24) = xmmword_1969F7B68;
  *((_OWORD *)this + 25) = unk_1969F7B78;
  *((_OWORD *)this + 28) = xmmword_1969F7B28;
  *((_OWORD *)this + 29) = unk_1969F7B38;
  *((_OWORD *)this + 26) = xmmword_1969F7B08;
  *((_OWORD *)this + 27) = unk_1969F7B18;
  *((_OWORD *)this + 32) = xmmword_1969F7B68;
  *((_OWORD *)this + 33) = unk_1969F7B78;
  *((_OWORD *)this + 30) = xmmword_1969F7B48;
  *((_OWORD *)this + 31) = unk_1969F7B58;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0x3F0000003F000000;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 14) = 1;
  *((_BYTE *)this + 30) = 0;
  result = 0.0;
  *((_OWORD *)this + 6) = xmmword_1969F7B48;
  *((_OWORD *)this + 7) = unk_1969F7B58;
  *((_OWORD *)this + 8) = xmmword_1969F7B68;
  *((_OWORD *)this + 9) = unk_1969F7B78;
  *((_OWORD *)this + 2) = xmmword_1969F7B08;
  *((_OWORD *)this + 3) = unk_1969F7B18;
  *((_OWORD *)this + 4) = xmmword_1969F7B28;
  *((_OWORD *)this + 5) = unk_1969F7B38;
  *((_OWORD *)this + 14) = xmmword_1969F7B48;
  *((_OWORD *)this + 15) = unk_1969F7B58;
  *((_OWORD *)this + 16) = xmmword_1969F7B68;
  *((_OWORD *)this + 17) = unk_1969F7B78;
  *((_OWORD *)this + 10) = xmmword_1969F7B08;
  *((_OWORD *)this + 11) = unk_1969F7B18;
  *((_OWORD *)this + 12) = xmmword_1969F7B28;
  *((_OWORD *)this + 13) = unk_1969F7B38;
  *((_OWORD *)this + 18) = xmmword_1969F7B08;
  *((_OWORD *)this + 19) = unk_1969F7B18;
  *((_OWORD *)this + 20) = xmmword_1969F7B28;
  *((_OWORD *)this + 21) = unk_1969F7B38;
  *((_OWORD *)this + 22) = xmmword_1969F7B48;
  *((_OWORD *)this + 23) = unk_1969F7B58;
  *((_OWORD *)this + 24) = xmmword_1969F7B68;
  *((_OWORD *)this + 25) = unk_1969F7B78;
  *((_OWORD *)this + 28) = xmmword_1969F7B28;
  *((_OWORD *)this + 29) = unk_1969F7B38;
  *((_OWORD *)this + 26) = xmmword_1969F7B08;
  *((_OWORD *)this + 27) = unk_1969F7B18;
  *((_OWORD *)this + 32) = xmmword_1969F7B68;
  *((_OWORD *)this + 33) = unk_1969F7B78;
  *((_OWORD *)this + 30) = xmmword_1969F7B48;
  *((_OWORD *)this + 31) = unk_1969F7B58;
  return result;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, float *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  *(double *)&v7 = *a2;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::serializationForRenderTreeAsText((WebCore *)(a2 + 4), (uint64_t *)&v7);
  WTF::TextStream::operator<<();
  v5 = v7;
  *(double *)&v7 = 0.0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  return a1;
}

{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  if (*a2 != 0.0)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[1] != 0.0)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  if (a2[2] != 0.0)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  return a1;
}

uint64_t WebCore::parseBlendMode(_QWORD *a1, char *a2)
{
  char v4;

  if (MEMORY[0x19AEA53F4](*a1, "normal", 6))
  {
    v4 = 1;
LABEL_36:
    *a2 = v4;
    return 1;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "multiply", 8) & 1) != 0)
  {
    v4 = 2;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "screen", 6) & 1) != 0)
  {
    v4 = 3;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "darken", 6) & 1) != 0)
  {
    v4 = 4;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "lighten", 7) & 1) != 0)
  {
    v4 = 5;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "overlay", 7) & 1) != 0)
  {
    v4 = 6;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "color-dodge", 11) & 1) != 0)
  {
    v4 = 7;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "color-burn", 10) & 1) != 0)
  {
    v4 = 8;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "hard-light", 10) & 1) != 0)
  {
    v4 = 9;
    goto LABEL_36;
  }
  v4 = 10;
  if ((MEMORY[0x19AEA53F4](*a1, "soft-light", 10) & 1) != 0)
    goto LABEL_36;
  if ((MEMORY[0x19AEA53F4](*a1, "difference", 10) & 1) != 0)
  {
    v4 = 11;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "exclusion", 9) & 1) != 0)
  {
    v4 = 12;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "hue", 3) & 1) != 0)
  {
    v4 = 13;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "saturation", 10) & 1) != 0)
  {
    v4 = 14;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "color", 5) & 1) != 0)
  {
    v4 = 15;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "luminosity", 10) & 1) != 0)
  {
    v4 = 16;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "plus-darker", 11) & 1) != 0)
  {
    v4 = 17;
    goto LABEL_36;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "plus-lighter", 12) & 1) != 0)
  {
    v4 = 18;
    goto LABEL_36;
  }
  return 0;
}

uint64_t WebCore::parseCompositeAndBlendOperator(_QWORD *a1, char *a2, char *a3)
{
  char v6;
  uint64_t result;

  if ((MEMORY[0x19AEA53F4](*a1, "clear", 5) & 1) != 0)
  {
    v6 = 0;
LABEL_29:
    *a2 = v6;
    result = 1;
    *a3 = 1;
    return result;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "copy", 4) & 1) != 0)
  {
    v6 = 1;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "source-over", 11) & 1) != 0)
  {
    v6 = 2;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "source-in", 9) & 1) != 0)
  {
    v6 = 3;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "source-out", 10) & 1) != 0)
  {
    v6 = 4;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "source-atop", 11) & 1) != 0)
  {
    v6 = 5;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "destination-over", 16) & 1) != 0)
  {
    v6 = 6;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "destination-in", 14) & 1) != 0)
  {
    v6 = 7;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "destination-out", 15) & 1) != 0)
  {
    v6 = 8;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "destination-atop", 16) & 1) != 0)
  {
    v6 = 9;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "xor", 3) & 1) != 0)
  {
    v6 = 10;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "darker", 6) & 1) != 0)
  {
    v6 = 11;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "lighter", 7) & 1) != 0)
  {
    v6 = 12;
    goto LABEL_29;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "difference", 10) & 1) != 0)
  {
    v6 = 13;
    goto LABEL_29;
  }
  if ((WebCore::parseBlendMode(a1, a3) & 1) == 0)
    return 0;
  *a2 = 2;
  return 1;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, __int16 a2)
{
  __int16 v4;

  v4 = a2;
  WTF::TextStream::dumpProperty<WebCore::CompositeOperator>(a1, (uint64_t)"composite-operation", (unsigned __int8 *)&v4);
  WTF::TextStream::dumpProperty<WebCore::BlendMode>(a1, (uint64_t)"blend-mode", (unsigned __int8 *)&v4 + 1);
  return a1;
}

uint64_t WTF::TextStream::dumpProperty<WebCore::CompositeOperator>(WTF::TextStream *a1, uint64_t a2, unsigned __int8 *a3)
{
  char *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v5 = (&WebCore::compositeOperatorNames)[2 * *a3 + 1];
  if (v5)
  {
    if (v5 == (char *)1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v10;
    }
    v9 = v6;
  }
  else
  {
    v9 = 0;
  }
  WTF::TextStream::operator<<();
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return WTF::TextStream::endGroup(a1);
}

uint64_t WTF::TextStream::dumpProperty<WebCore::BlendMode>(WTF::TextStream *a1, uint64_t a2, unsigned __int8 *a3)
{
  char *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v5 = (&WebCore::blendOperatorNames)[2 * *a3 - 1];
  if (v5)
  {
    if (v5 == (char *)1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v10;
    }
    v9 = v6;
  }
  else
  {
    v9 = 0;
  }
  WTF::TextStream::operator<<();
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return WTF::TextStream::endGroup(a1);
}

uint64_t WebCore::parseAVCCodecParameters(uint64_t a1, uint64_t a2)
{
  uint64_t NextSubstring;
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  char v32;

  v29 = a1;
  v30 = a2;
  v31 = 46;
  v32 = 0;
  v25 = &v29;
  v26 = 0;
  v28 = (_DWORD)a2 == 0;
  NextSubstring = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v25);
  if (v26 == (_DWORD)v30 && v28)
    goto LABEL_59;
  v6 = *((unsigned int *)v25 + 2);
  if (v6 <= v26)
    goto LABEL_59;
  LODWORD(v7) = v27;
  if (v6 - v26 <= v27)
  {
    if (!v26)
    {
      v9 = *v25;
      v7 = v25[1];
      goto LABEL_15;
    }
    LODWORD(v7) = v6 - v26;
  }
  v7 = v7;
  v8 = v6 - v26;
  if (*((_BYTE *)v25 + 12))
  {
    if (v8 < v7)
      goto LABEL_64;
    v9 = *v25 + v26;
    v7 = v7 | 0x100000000;
  }
  else
  {
    if (v8 < v7)
      goto LABEL_64;
    v9 = *v25 + 2 * v26;
  }
LABEL_15:
  if ((char *)v9 != "avc1" && v7 == 4)
  {
    if ((v7 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v9 != 97 || *(_WORD *)(v9 + 1) != 25462 || *(_WORD *)(v9 + 2) != 12643)
        goto LABEL_59;
    }
    else
    {
      if (*(_WORD *)v9 != 97)
        goto LABEL_59;
      v21 = *(_DWORD *)(v9 + 2);
      v22 = *(_DWORD *)(v9 + 4);
      if (v21 != 6488182 || v22 != 3211363)
        goto LABEL_59;
    }
  }
  else if ((char *)v9 != "avc1" || v7 != 4)
  {
    goto LABEL_59;
  }
  NextSubstring = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(NextSubstring + 8) == (_DWORD)v30 && *(_BYTE *)(NextSubstring + 16))
    goto LABEL_59;
  v12 = *((unsigned int *)v25 + 2);
  if (v12 <= v26)
    goto LABEL_59;
  LODWORD(v13) = v27;
  v14 = v12 - v26;
  v15 = v27;
  if (v12 - v26 <= v27)
  {
    v15 = v12 - v26;
    if (!v26)
    {
      v13 = v25[1];
      if (!(_DWORD)v13)
      {
        v19 = 0;
        v18 = 0;
LABEL_60:
        v20 = 0;
        return v18 | v19 | v13 | v20;
      }
      goto LABEL_45;
    }
  }
  v16 = v12 - v26;
  if (*((_BYTE *)v25 + 12))
  {
    if (v16 < v15)
      goto LABEL_64;
  }
  else if (v16 < v15)
  {
    goto LABEL_64;
  }
  if (!v15)
  {
LABEL_59:
    v19 = 0;
    v18 = 0;
    LODWORD(v13) = 0;
    goto LABEL_60;
  }
  if (v14 <= v27)
  {
    LODWORD(v13) = v14;
    if (!v26)
    {
      v13 = v25[1];
LABEL_45:
      NextSubstring = *v25;
      goto LABEL_48;
    }
  }
  v13 = v13;
  if (*((_BYTE *)v25 + 12))
  {
    if (v16 >= v13)
    {
      NextSubstring = *v25 + v26;
      v13 = v13 | 0x100000000;
      goto LABEL_48;
    }
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v16 < v13)
    goto LABEL_64;
  NextSubstring = *v25 + 2 * v26;
LABEL_48:
  v3 = v13;
  v4 = 16;
  if ((v13 & 0xFF00000000) != 0)
  {
    v17 = WTF::parseInteger<unsigned int,unsigned char>(NextSubstring, v13, 16, 0);
    goto LABEL_50;
  }
LABEL_65:
  v17 = WTF::parseInteger<unsigned int,char16_t>(NextSubstring, v3, v4, 0);
LABEL_50:
  if ((v17 & 0xFF00000000) == 0)
    goto LABEL_59;
  LODWORD(v13) = v17 << 16;
  v18 = v17 & 0xFF00;
  v19 = BYTE2(v17);
  v20 = 0x1000000;
  return v18 | v19 | v13 | v20;
}

_BYTE *WebCore::createAVCCodecParametersString@<X0>(_QWORD *a1@<X8>)
{
  int v2;
  int v3;
  _BYTE *result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  _DWORD __n[3];

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  __n[0] = v2;
  WTF::Internal::appendHex();
  LODWORD(v19) = v3;
  result = (_BYTE *)WTF::Internal::appendHex();
  LODWORD(v18) = v5;
  if (((v19 | v5) & 0x80000000) == 0)
  {
    v6 = v19 + v5;
    v7 = __OFADD__((_DWORD)v19, v5);
    if ((__n[0] & 0x80000000) == 0 && !v7)
    {
      v8 = __n[0] + v6;
      if (!__OFADD__(__n[0], v6))
      {
        v9 = (v8 + 5);
        if (!__OFADD__(v8, 5))
        {
          if (v8 == -5)
          {
            v10 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
LABEL_21:
            *a1 = v10;
            return result;
          }
          if ((v9 & 0x80000000) == 0)
          {
            result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
            v10 = v17;
            if (v17)
            {
              *(_DWORD *)v17 = 2;
              *(_DWORD *)(v17 + 4) = v9;
              *(_QWORD *)(v17 + 8) = v17 + 20;
              *(_QWORD *)(v17 + 16) = 0x3163766100000004;
              *(_BYTE *)(v17 + 24) = 46;
              v11 = (_BYTE *)(v17 + 25);
              v12 = __n[0];
              if (__n[0])
              {
                v13 = (char *)__n - __n[0];
                if (__n[0] == 1)
                  *v11 = *v13;
                else
                  result = memcpy((void *)(v17 + 25), v13, __n[0]);
              }
              v14 = &v11[v12];
              if ((_DWORD)v19)
              {
                v15 = (char *)__n - v19 + 4;
                if ((_DWORD)v19 == 1)
                  *v14 = *v15;
                else
                  result = memcpy(v14, v15, v19);
              }
              if ((_DWORD)v18)
              {
                result = &v14[v19];
                v16 = (char *)&v18 - v18;
                if ((_DWORD)v18 == 1)
                  *result = *v16;
                else
                  result = memcpy(result, v16, v18);
              }
              goto LABEL_21;
            }
          }
        }
      }
    }
  }
  *a1 = 0;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::parseAVCDecoderConfigurationRecord(WebCore *this, const WebCore::SharedBuffer *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  WTF *v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  WTF *v15;
  int v17;
  WTF *v18;
  _DWORD *v19;
  char v20;
  WTF *v21;

  if (*((_QWORD *)this + 6) >= 0x18uLL)
  {
    WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(this, &v21);
    if (v21)
    {
      v20 = 1;
      JSC::DataView::create();
      v6 = JSC::DataView::get<unsigned char>((uint64_t)v19, 1, 0, &v20);
      if (v20 && (v4 = v6, v7 = JSC::DataView::get<unsigned char>((uint64_t)v19, 2, 0, &v20), v20))
      {
        v2 = v7;
        v8 = JSC::DataView::get<unsigned char>((uint64_t)v19, 3, 0, &v20);
        if (v20)
        {
          v3 = v8;
        }
        else
        {
          v4 = 0;
          v2 = 0;
          v3 = 0;
        }
        v5 = v20 != 0;
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
      if (v19)
      {
        if (*v19 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v19;
      }
      v9 = v21;
      v21 = 0;
      if (v9)
      {
        v10 = *(_DWORD *)v9 == 2;
        *(_DWORD *)v9 -= 2;
        if (v10)
        {
          v17 = v5;
          v11 = v4;
          v18 = v9;
          v12 = *((_QWORD *)v9 + 10);
          if (v12)
          {
            *(_QWORD *)(v12 + 8) = 3;
            *((_QWORD *)v18 + 10) = 0;
          }
          if ((*((_BYTE *)v18 + 72) & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v18 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v18 + 16));
          v14 = (WTF *)*((_QWORD *)v18 + 1);
          if ((v14 & 1) == 0 && v14)
          {
            v15 = *(WTF **)v14;
            if (*(_QWORD *)v14)
            {
              *(_QWORD *)v14 = 0;
              *((_DWORD *)v14 + 2) = 0;
              WTF::fastFree(v15, v13);
            }
            WTF::fastFree(v14, v13);
          }
          WTF::fastFree(v18, v13);
          v4 = v11;
          v5 = v17;
        }
      }
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return (v3 << 16) | (v5 << 24) | (v2 << 8) | v4;
}

_DWORD *WebCore::parseHEVCCodecParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const char *v50;
  uint64_t v51;
  char v52;
  _BYTE v54[13];
  _DWORD v55[2];
  __int16 v56;
  uint64_t *v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  char v64;

  v61 = a1;
  v62 = a2;
  v63 = 46;
  v64 = 0;
  v57 = &v61;
  v58 = 0;
  v60 = (_DWORD)a2 == 0;
  result = (_DWORD *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v57);
  if (v58 == (_DWORD)v62 && v60)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    return result;
  }
  *(_DWORD *)v54 = 1;
  *(_WORD *)&v54[4] = 0;
  v55[0] = 0;
  LOWORD(v55[1]) = 0;
  v56 = 0;
  v6 = *((unsigned int *)v57 + 2);
  if (v6 <= v58)
    goto LABEL_142;
  LODWORD(v7) = v59;
  if (v6 - v58 <= v59)
  {
    if (!v58)
    {
      v9 = *v57;
      v7 = v57[1];
      goto LABEL_15;
    }
    LODWORD(v7) = v6 - v58;
  }
  v7 = v7;
  v8 = v6 - v58;
  if (*((_BYTE *)v57 + 12))
  {
    if (v8 < v7)
      goto LABEL_147;
    v9 = *v57 + v58;
    v7 = v7 | 0x100000000;
  }
  else
  {
    if (v8 < v7)
      goto LABEL_147;
    v9 = *v57 + 2 * v58;
  }
LABEL_15:
  v10 = (_DWORD)v7 != 4;
  if ((char *)v9 != "hvc1" && (_DWORD)v7 == 4)
  {
    if ((v7 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v9 != 104 || *(_WORD *)(v9 + 1) != 25462 || *(_WORD *)(v9 + 2) != 12643)
      {
LABEL_21:
        v11 = 4;
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_WORD *)v9 != 104)
        goto LABEL_21;
      if (*(_DWORD *)(v9 + 2) != 6488182 || *(_DWORD *)(v9 + 4) != 3211363)
        goto LABEL_21;
    }
LABEL_34:
    v14 = 1;
    goto LABEL_38;
  }
  v11 = v7;
  if ((char *)v9 == "hvc1")
  {
    v11 = v7;
    if ((_DWORD)v7 == 4)
      goto LABEL_34;
  }
LABEL_22:
  if ((char *)v9 == "hev1")
    v10 = 1;
  if (v10)
  {
    if ((char *)v9 != "hev1" || (_DWORD)v7 != 4)
      goto LABEL_142;
LABEL_37:
    v14 = 0;
LABEL_38:
    *(_DWORD *)v54 = v14;
    v15 = WTF::StringView::SplitResult::Iterator::operator++();
    if (*(_DWORD *)(v15 + 8) == (_DWORD)v62 && *(_BYTE *)(v15 + 16))
      goto LABEL_142;
    v16 = *((unsigned int *)v57 + 2);
    if (v16 <= v58)
      goto LABEL_142;
    LODWORD(v17) = v59;
    if (v16 - v58 <= v59)
    {
      if (!v58)
      {
        v19 = (const char *)*v57;
        v17 = v57[1];
        if (!(_DWORD)v17)
          goto LABEL_142;
LABEL_51:
        v20 = v17 & 0xFF00000000;
        if ((v17 & 0xFF00000000) != 0)
          v21 = *(unsigned __int8 *)v19;
        else
          v21 = *(unsigned __int16 *)v19;
        if ((v21 - 65) > 2)
        {
          v22 = v17;
        }
        else
        {
          *(_WORD *)&v54[4] = v21 - 64;
          if (v17 < 2)
            goto LABEL_148;
          v22 = (v17 - 1);
          v23 = v17 - 1;
          if (v20)
          {
            if (v23 < v22)
              goto LABEL_147;
            ++v19;
            v22 |= 0x100000000uLL;
          }
          else
          {
            if (v23 < v22)
              goto LABEL_147;
            v19 += 2;
          }
        }
        v24 = v22;
        if ((v22 & 0xFF00000000) == 0)
        {
          v25 = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v19, v22, 10, 0);
          goto LABEL_65;
        }
        while (1)
        {
          v25 = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v19, v24, 10, 0);
LABEL_65:
          if ((v25 & 0xFF00) == 0)
            goto LABEL_142;
          *(_WORD *)&v54[6] = v25;
          v26 = WTF::StringView::SplitResult::Iterator::operator++();
          if (*(_DWORD *)(v26 + 8) == (_DWORD)v62)
          {
            if (*(_BYTE *)(v26 + 16))
              goto LABEL_142;
          }
          v27 = *((unsigned int *)v57 + 2);
          if (v27 <= v58)
          {
            v31 = 0;
            v30 = "";
            goto LABEL_78;
          }
          LODWORD(v28) = v59;
          if (v27 - v58 <= v59)
          {
            if (!v58)
            {
              v30 = (const char *)*v57;
              v28 = v57[1];
              goto LABEL_77;
            }
            LODWORD(v28) = v27 - v58;
          }
          v28 = v28;
          v29 = v27 - v58;
          if (*((_BYTE *)v57 + 12))
          {
            if (v29 < v28)
              goto LABEL_147;
            v30 = (const char *)(*v57 + v58);
            v28 = v28 | 0x100000000;
          }
          else
          {
            if (v29 < v28)
              goto LABEL_147;
            v30 = (const char *)(*v57 + 2 * v58);
          }
LABEL_77:
          v31 = v28;
          if ((v28 & 0xFF00000000) == 0)
          {
            v32 = WTF::parseInteger<unsigned int,char16_t>((uint64_t)v30, v28, 16, 0);
            goto LABEL_79;
          }
LABEL_78:
          v32 = WTF::parseInteger<unsigned int,unsigned char>((uint64_t)v30, v31, 16, 0);
LABEL_79:
          if ((v32 & 0xFF00000000) == 0)
            goto LABEL_142;
          *(_DWORD *)&v54[8] = __rbit32(v32);
          v33 = WTF::StringView::SplitResult::Iterator::operator++();
          if (*(_DWORD *)(v33 + 8) == (_DWORD)v62)
          {
            if (*(_BYTE *)(v33 + 16))
              goto LABEL_142;
          }
          v34 = *((unsigned int *)v57 + 2);
          if (v34 <= v58)
            goto LABEL_147;
          LODWORD(v35) = v59;
          if (v34 - v58 > v59)
            goto LABEL_84;
          if (v58)
          {
            LODWORD(v35) = v34 - v58;
LABEL_84:
            v35 = v35;
            v36 = v34 - v58;
            if (*((_BYTE *)v57 + 12))
            {
              if (v36 < v35)
                goto LABEL_147;
              v37 = (unsigned __int8 *)(*v57 + v58);
              v35 = v35 | 0x100000000;
            }
            else
            {
              if (v36 < v35)
                goto LABEL_147;
              v37 = (unsigned __int8 *)(*v57 + 2 * v58);
            }
            goto LABEL_92;
          }
          v37 = (unsigned __int8 *)*v57;
          v35 = v57[1];
LABEL_92:
          v38 = v35 & 0xFF00000000;
          if ((v35 & 0xFF00000000) != 0)
          {
            if (!(_DWORD)v35)
              goto LABEL_147;
            v39 = *v37;
          }
          else
          {
            if (!(_DWORD)v35)
              goto LABEL_147;
            v39 = *(unsigned __int16 *)v37;
          }
          if ((v39 & 0xFFFFFFFB) != 0x48)
            goto LABEL_142;
          v54[12] = v39 != 76;
          if (v35 < 2)
          {
            v40 = 0;
            v42 = "";
            goto LABEL_102;
          }
          v40 = (v35 - 1);
          v41 = v35 - 1;
          if (v38)
          {
            if (v41 >= v40)
            {
              v42 = (const char *)(v37 + 1);
LABEL_102:
              v43 = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v42, v40, 10, 0);
              goto LABEL_105;
            }
          }
          else if (v41 >= v40)
          {
            v43 = WTF::parseInteger<unsigned char,char16_t>((uint64_t)(v37 + 2), v40, 10, 0);
LABEL_105:
            if ((v43 & 0xFF00) == 0)
              goto LABEL_142;
            v44 = 0;
            v56 = v43;
            while (2)
            {
              v45 = WTF::StringView::SplitResult::Iterator::operator++();
              if (*(_DWORD *)(v45 + 8) == (_DWORD)v62 && *(_BYTE *)(v45 + 16) != 0)
              {
LABEL_130:
                *(_QWORD *)a3 = *(_QWORD *)v54;
                *(_QWORD *)(a3 + 5) = *(_QWORD *)&v54[5];
                *(_QWORD *)(a3 + 16) = a3 + 32;
                *(_DWORD *)(a3 + 24) = 6;
                memcpy((void *)(a3 + 32), v55, 6uLL);
                *(_DWORD *)(a3 + 28) = 6;
                *(_WORD *)(a3 + 40) = v56;
                v52 = 1;
                goto LABEL_144;
              }
              v47 = *((unsigned int *)v57 + 2);
              if (v47 > v58)
              {
                LODWORD(v48) = v59;
                if (v47 - v58 <= v59)
                {
                  if (v58)
                  {
                    LODWORD(v48) = v47 - v58;
                    goto LABEL_114;
                  }
                  v50 = (const char *)*v57;
                  v48 = v57[1];
                }
                else
                {
LABEL_114:
                  v48 = v48;
                  v49 = v47 - v58;
                  if (*((_BYTE *)v57 + 12))
                  {
                    if (v49 < v48)
                      goto LABEL_147;
                    v50 = (const char *)(*v57 + v58);
                    v48 = v48 | 0x100000000;
                  }
                  else
                  {
                    if (v49 < v48)
                      goto LABEL_147;
                    v50 = (const char *)(*v57 + 2 * v58);
                  }
                }
                v51 = v48;
                if ((v48 & 0xFF00000000) != 0)
LABEL_122:
                  result = (_DWORD *)WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v50, v51, 16, 0);
                else
                  result = (_DWORD *)WTF::parseInteger<unsigned char,char16_t>((uint64_t)v50, v48, 16, 0);
                v52 = BYTE1(result);
                if (!BYTE1(result))
                  goto LABEL_143;
                if (v44 >= 6)
                {
                  __break(0xC471u);
                  return result;
                }
                *((_BYTE *)v55 + v44++) = (_BYTE)result;
                if (v44 == 6)
                  goto LABEL_130;
                continue;
              }
              break;
            }
            v51 = 0;
            v50 = "";
            goto LABEL_122;
          }
LABEL_147:
          __break(1u);
LABEL_148:
          v24 = 0;
          v19 = "";
        }
      }
      LODWORD(v17) = v16 - v58;
    }
    v17 = v17;
    v18 = v16 - v58;
    if (*((_BYTE *)v57 + 12))
    {
      if (v18 < v17)
        goto LABEL_147;
      v19 = (const char *)(*v57 + v58);
      v17 = v17 | 0x100000000;
      if (!(_DWORD)v17)
        goto LABEL_142;
    }
    else
    {
      if (v18 < v17)
        goto LABEL_147;
      v19 = (const char *)(*v57 + 2 * v58);
      if (!(_DWORD)v17)
        goto LABEL_142;
    }
    goto LABEL_51;
  }
  if (!v11)
    goto LABEL_37;
  if ((v7 & 0xFF00000000) != 0)
  {
    if (*(_BYTE *)v9 != 104 || *(_WORD *)(v9 + 1) != 30309)
      goto LABEL_142;
    v12 = *(unsigned __int16 *)(v9 + 2);
    v13 = 12662;
  }
  else
  {
    if (*(_WORD *)v9 != 104 || *(_DWORD *)(v9 + 2) != 7733349)
      goto LABEL_142;
    v12 = *(_DWORD *)(v9 + 4);
    v13 = 3211382;
  }
  if (v12 == v13)
    goto LABEL_37;
LABEL_142:
  v52 = 0;
LABEL_143:
  *(_BYTE *)a3 = 0;
LABEL_144:
  *(_BYTE *)(a3 + 48) = v52;
  return v55;
}

WTF::StringImpl *WebCore::createHEVCCodecParametersString@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  int8x16_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int8x16_t *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int16 v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  char *v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  int8x16_t *v30;
  __int16 v31;
  unsigned __int8 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  unsigned __int16 v39;
  unsigned int v40;
  int v41;
  unsigned __int16 v42;
  unsigned int v43;
  __int16 v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 v48;
  unsigned int v49;
  _WORD *v50;
  BOOL v51;
  unsigned int v52;
  unsigned int v53;
  _WORD *v54;
  char *v55;
  int8x16_t *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unsigned __int16 v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  char *v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  _BYTE *v70;
  unsigned int v71;
  __int128 v72;
  char *v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  char *v77;
  char *v78;
  char *v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unsigned int v84;
  _WORD *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  int8x16_t v91;
  int8x16_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  unsigned int v95;
  char v96;
  char v97;
  int8x16_t *v98;
  int v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unsigned int __n;
  char __n_4;
  uint64_t v104;
  uint64_t v105;
  size_t v106[2];
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;
  int8x16x2_t v110;
  int8x16x2_t v111;
  int8x16x2_t v112;

  v106[1] = *MEMORY[0x1E0C80C00];
  v104 = 0;
  v105 = 0;
  result = (WTF::StringImpl *)WTF::Internal::appendHex();
  LODWORD(v106[0]) = v6;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 1;
  v7 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v7)
    goto LABEL_41;
  v8 = v7 - 1;
  while (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + v8))
  {
    if (--v8 == -1)
      goto LABEL_41;
  }
  if (v8 == -1)
  {
LABEL_41:
    v100 = 0;
    v101 = 0;
    __n = 0;
    __n_4 = 1;
    if (*(_DWORD *)a1)
      v30 = (int8x16_t *)"hvc1";
    else
      v30 = (int8x16_t *)"hev1";
    v98 = v30;
    v99 = 4;
    v97 = 46;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v100, &v98, &v97);
    v31 = *(_WORD *)(a1 + 4);
    if (v31)
    {
      v32 = v31 + 64;
      LOBYTE(v98) = v32;
      if (!v101 || (v33 = __n, __n >= *((_DWORD *)v101 + 1)) || v100)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v34 = *((_DWORD *)v101 + 4);
        v35 = *((_QWORD *)v101 + 1);
        ++__n;
        if ((v34 & 4) != 0)
          *(_BYTE *)(v35 + v33) = v32;
        else
          *(_WORD *)(v35 + 2 * v33) = v32;
      }
    }
    v36 = 0;
    v37 = *(_WORD *)(a1 + 6);
    v38 = *(_WORD *)(a1 + 40);
    v39 = v37;
    do
    {
      ++v36;
      v40 = v39;
      v39 /= 0xAu;
    }
    while (v40 > 9);
    v41 = 2;
    v42 = *(_WORD *)(a1 + 40);
    do
    {
      v43 = v42;
      v42 /= 0xAu;
      ++v41;
    }
    while (v43 > 9);
    if (*(_BYTE *)(a1 + 12))
      v44 = 72;
    else
      v44 = 76;
    v45 = v101;
    if ((v101 || (v45 = v100) != 0) && (*((_BYTE *)v45 + 16) & 4) == 0)
    {
      v46 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v100);
      if (v46)
      {
        v47 = 0;
        v48 = v37;
        do
        {
          v49 = v48;
          *((_BYTE *)&v98 + v47-- + 6) = (v48 % 0xAu) | 0x30;
          v48 /= 0xAu;
        }
        while (v49 > 9);
        if (v47 + 8 <= 7)
        {
          v50 = (_WORD *)v46;
          do
          {
            *v50++ = *((unsigned __int8 *)&v98 + v47 + 7);
            v51 = __CFADD__(v47++, 1);
          }
          while (!v51);
        }
        v52 = 0;
        do
        {
          ++v52;
          v53 = v37;
          v37 /= 0xAu;
        }
        while (v53 > 9);
        v54 = (_WORD *)(v46 + 2 * v52);
        *v54 = 46;
        v55 = (char *)(v54 + 1);
        v56 = (int8x16_t *)((char *)v106 - LODWORD(v106[0]));
        v57 = &v55[2 * LODWORD(v106[0])];
        if (LODWORD(v106[0]) >= 0x40)
        {
          v58 = &v55[2 * (v106[0] & 0xFFFFFFC0)];
          v72 = 0uLL;
          v73 = v55;
          do
          {
            v109.val[0] = *v56;
            v74 = v56[1];
            v111.val[0] = v56[2];
            v75 = v56[3];
            v56 += 4;
            v76 = v75;
            v111.val[1] = 0uLL;
            v112.val[0] = v74;
            v109.val[1] = 0uLL;
            v77 = v73;
            vst2q_s8(v77, v109);
            v77 += 32;
            v112.val[1] = 0uLL;
            vst2q_s8(v77, v112);
            v78 = v73 + 64;
            vst2q_s8(v78, v111);
            v79 = v73 + 96;
            vst2q_s8(v79, *(int8x16x2_t *)(&v72 - 1));
            v73 += 128;
          }
          while (v73 != v58);
        }
        else
        {
          v58 = v55;
        }
        while (v58 != v57)
        {
          v80 = v56->u8[0];
          v56 = (int8x16_t *)((char *)v56 + 1);
          *(_WORD *)v58 = v80;
          v58 += 2;
        }
        v81 = 0;
        v82 = LODWORD(v106[0]);
        v83 = &v55[2 * LODWORD(v106[0])];
        *(_WORD *)v83 = 46;
        *((_WORD *)v83 + 1) = v44;
        do
        {
          v84 = v38;
          *((_BYTE *)&v98 + v81-- + 6) = (v38 % 0xAu) | 0x30;
          v38 /= 0xAu;
        }
        while (v84 > 9);
        if (v81 + 8 <= 7)
        {
          v85 = (_WORD *)(v46 + 2 * v82 + 2 * v52 + 6);
          do
          {
            *v85++ = *((unsigned __int8 *)&v98 + v81 + 7);
            v51 = __CFADD__(v81++, 1);
          }
          while (!v51);
        }
      }
    }
    else
    {
      v59 = (char *)MEMORY[0x19AEA4824](&v100);
      if (v59)
      {
        v60 = v59;
        v61 = 0;
        v62 = v37;
        do
        {
          v63 = v62;
          *((_BYTE *)&v98 + v61-- + 6) = (v62 % 0xAu) | 0x30;
          v62 /= 0xAu;
        }
        while (v63 > 9);
        if (v61 + 8 <= 7)
          memcpy(v59, (char *)&v98 + v61 + 7, -v61);
        v64 = 0;
        do
        {
          ++v64;
          v65 = v37;
          v37 /= 0xAu;
        }
        while (v65 > 9);
        v66 = &v60[v64];
        *v66 = 46;
        v67 = v66 + 1;
        if (LODWORD(v106[0]))
        {
          v68 = (char *)v106 - LODWORD(v106[0]);
          if (LODWORD(v106[0]) == 1)
            *v67 = *v68;
          else
            memcpy(v67, v68, LODWORD(v106[0]));
        }
        v69 = 0;
        v70 = &v67[LODWORD(v106[0])];
        *v70 = 46;
        v70[1] = v44;
        do
        {
          v71 = v38;
          *((_BYTE *)&v98 + v69-- + 6) = (v38 % 0xAu) | 0x30;
          v38 /= 0xAu;
        }
        while (v71 > 9);
        if (v69 + 8 <= 7)
          memcpy(v70 + 2, (char *)&v98 + v69 + 7, -v69);
      }
    }
    WTF::StringBuilder::append(&v100, &v93);
    v87 = v100;
    if (v100
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v100),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v100),
          (v87 = v100) != 0))
    {
      *(_DWORD *)v87 += 2;
    }
    *a2 = v87;
    v88 = v101;
    v101 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, v86);
      else
        *(_DWORD *)v88 -= 2;
    }
    v89 = v100;
    v100 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, v86);
      else
        *(_DWORD *)v89 -= 2;
    }
    v90 = v94;
    v94 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
        WTF::StringImpl::destroy(v90, v86);
      else
        *(_DWORD *)v90 -= 2;
    }
    result = v93;
    v93 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v86);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    while (1)
    {
      v91 = v5;
      v92 = v10;
      LOBYTE(v100) = 46;
      if (v94 && ((v11 = v95, v95 < *((_DWORD *)v94 + 1)) ? (v12 = v93 == 0) : (v12 = 0), v12))
      {
        v22 = *((_DWORD *)v94 + 4);
        v23 = *((_QWORD *)v94 + 1);
        ++v95;
        if ((v22 & 4) != 0)
          *(_BYTE *)(v23 + v11) = 46;
        else
          *(_WORD *)(v23 + 2 * v11) = 46;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::StringBuilder::append();
      }
      if (v9 >= *(unsigned int *)(a1 + 28))
        break;
      WTF::Internal::appendHex();
      __n = v13;
      if (__CFADD__(v95, v13))
        v14 = 0xFFFFFFFFLL;
      else
        v14 = v95 + v13;
      v15 = v94;
      if ((v94 || (v15 = v93) != 0) && (*((_BYTE *)v15 + 16) & 4) == 0)
      {
        result = (WTF::StringImpl *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v93);
        v5 = v91;
        v10 = v92;
        if (result)
        {
          v16 = __n;
          v17 = (int8x16_t *)((char *)&__n - __n);
          if (__n >= 0x40)
          {
            v18 = (WTF::StringImpl *)((char *)result + 2 * (__n & 0xFFFFFFC0));
            v24 = (char *)result;
            do
            {
              v107.val[0] = *v17;
              v25 = v17[1];
              v108.val[0] = v17[2];
              v26 = v17[3];
              v17 += 4;
              v5 = v26;
              v108.val[1] = v92;
              v110.val[0] = v25;
              v107.val[1] = v92;
              v27 = v24;
              vst2q_s8(v27, v107);
              v27 += 32;
              v110.val[1] = v92;
              vst2q_s8(v27, v110);
              v28 = v24 + 64;
              vst2q_s8(v28, v108);
              v29 = v24 + 96;
              vst2q_s8(v29, *(int8x16x2_t *)v5.i8);
              v24 += 128;
            }
            while (v24 != (char *)v18);
          }
          else
          {
            v18 = result;
          }
          v19 = (WTF::StringImpl *)((char *)result + 2 * v16);
          while (v18 != v19)
          {
            v20 = v17->u8[0];
            v17 = (int8x16_t *)((char *)v17 + 1);
            *(_WORD *)v18 = v20;
            v18 = (WTF::StringImpl *)((char *)v18 + 2);
          }
        }
      }
      else
      {
        result = (WTF::StringImpl *)MEMORY[0x19AEA4824](&v93, v14);
        v5 = v91;
        v10 = v92;
        if (result && __n)
        {
          v21 = (char *)&__n - __n;
          if (__n == 1)
          {
            *(_BYTE *)result = *v21;
          }
          else
          {
            result = (WTF::StringImpl *)memcpy(result, v21, __n);
            v5 = v91;
            v10 = v92;
          }
        }
      }
      v12 = v8 == v9++;
      if (v12)
        goto LABEL_41;
    }
    __break(0xC471u);
  }
  return result;
}

WTF *WebCore::parseHEVCDecoderConfigurationRecord@<X0>(WebCore::FragmentedSharedBuffer *this@<X1>, WTF *result@<X0>, uint64_t a3@<X8>)
{
  int v4;
  void *v5;
  unsigned int v6;
  char v7;
  __int16 v8;
  __int16 v9;
  WTF *v10;
  int v11;
  int v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  WTF *v18;
  _DWORD *v19;
  char v20;
  _QWORD *v21;
  _BYTE v22[13];
  WTF *v23;
  size_t __n;
  int v25;
  __int16 v26;
  __int16 v27;

  if (*((_QWORD *)this + 6) <= 0x16uLL)
    goto LABEL_5;
  v22[12] = 0;
  *(_QWORD *)&v22[4] = 0;
  v23 = (WTF *)&v25;
  v25 = 0;
  v26 = 0;
  __n = 0x600000006;
  v27 = 0;
  if ((_DWORD)result != 1751479857)
  {
    if ((_DWORD)result == 1752589105)
    {
      v4 = 1;
      goto LABEL_8;
    }
LABEL_5:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    return result;
  }
  v4 = 0;
LABEL_8:
  *(_DWORD *)v22 = v4;
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(this, &v21);
  if (v21)
  {
    v20 = 1;
    JSC::DataView::create();
    v6 = JSC::DataView::get<unsigned char>((uint64_t)v19, 1, 0, &v20);
    v7 = v20;
    if (!v20)
      goto LABEL_28;
    *(_WORD *)&v22[4] = v6 >> 6;
    v22[12] = (v6 & 0x20) != 0;
    *(_WORD *)&v22[6] = v6 & 0x1F;
    *(_DWORD *)&v22[8] = JSC::DataView::get<unsigned int>((uint64_t)v19, 2, 0, &v20);
    v7 = v20;
    if (!v20)
      goto LABEL_28;
    result = (WTF *)JSC::DataView::get<unsigned char>((uint64_t)v19, 6, 0, &v20);
    if (HIDWORD(__n))
    {
      *(_BYTE *)v23 = (_BYTE)result;
      if (!v20)
        goto LABEL_27;
      result = (WTF *)JSC::DataView::get<unsigned char>((uint64_t)v19, 7, 0, &v20);
      if (HIDWORD(__n) >= 2)
      {
        *((_BYTE *)v23 + 1) = (_BYTE)result;
        if (!v20)
          goto LABEL_27;
        result = (WTF *)JSC::DataView::get<unsigned char>((uint64_t)v19, 8, 0, &v20);
        if (HIDWORD(__n) >= 3)
        {
          *((_BYTE *)v23 + 2) = (_BYTE)result;
          if (!v20)
            goto LABEL_27;
          result = (WTF *)JSC::DataView::get<unsigned char>((uint64_t)v19, 9, 0, &v20);
          if (HIDWORD(__n) >= 4)
          {
            *((_BYTE *)v23 + 3) = (_BYTE)result;
            if (!v20)
              goto LABEL_27;
            result = (WTF *)JSC::DataView::get<unsigned char>((uint64_t)v19, 10, 0, &v20);
            if (HIDWORD(__n) >= 5)
            {
              *((_BYTE *)v23 + 4) = (_BYTE)result;
              if (!v20)
                goto LABEL_27;
              result = (WTF *)JSC::DataView::get<unsigned char>((uint64_t)v19, 11, 0, &v20);
              if (HIDWORD(__n) >= 6)
              {
                *((_BYTE *)v23 + 5) = (_BYTE)result;
                if (v20)
                {
                  v8 = JSC::DataView::get<unsigned char>((uint64_t)v19, 12, 0, &v20);
                  v27 = v8;
                  v7 = v20;
                  if (v20)
                  {
                    v9 = v8;
                    *(_QWORD *)a3 = *(_QWORD *)v22;
                    *(_QWORD *)(a3 + 5) = *(_QWORD *)&v22[5];
                    *(_QWORD *)(a3 + 16) = a3 + 32;
                    *(_DWORD *)(a3 + 24) = 6;
                    v10 = v23;
                    if (v23 == (WTF *)&v25)
                    {
                      v12 = HIDWORD(__n);
                      memcpy((void *)(a3 + 32), &v25, HIDWORD(__n));
                    }
                    else
                    {
                      v23 = (WTF *)&v25;
                      *(_QWORD *)(a3 + 16) = v10;
                      v11 = __n;
                      v12 = HIDWORD(__n);
                      LODWORD(__n) = 6;
                      *(_DWORD *)(a3 + 24) = v11;
                    }
                    HIDWORD(__n) = 0;
                    *(_DWORD *)(a3 + 28) = v12;
                    v7 = 1;
                    *(_WORD *)(a3 + 40) = v9;
                    goto LABEL_29;
                  }
LABEL_28:
                  *(_BYTE *)a3 = 0;
LABEL_29:
                  *(_BYTE *)(a3 + 48) = v7;
                  if (v19)
                  {
                    if (*v19 == 1)
                      JSC::ArrayBufferView::operator delete();
                    else
                      --*v19;
                  }
                  v13 = v21;
                  v21 = 0;
                  if (v13)
                  {
                    v14 = *(_DWORD *)v13 == 2;
                    *(_DWORD *)v13 -= 2;
                    if (v14)
                    {
                      v15 = v13[10];
                      if (v15)
                      {
                        *(_QWORD *)(v15 + 8) = 3;
                        v13[10] = 0;
                      }
                      if ((v13[9] & 1) == 0)
                        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v13 + 9));
                      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v13 + 2));
                      v17 = (WTF *)v13[1];
                      if ((v17 & 1) == 0 && v17)
                      {
                        v18 = *(WTF **)v17;
                        if (*(_QWORD *)v17)
                        {
                          *(_QWORD *)v17 = 0;
                          *((_DWORD *)v17 + 2) = 0;
                          WTF::fastFree(v18, v16);
                        }
                        WTF::fastFree(v17, v16);
                      }
                      WTF::fastFree((WTF *)v13, v16);
                    }
                  }
                  goto LABEL_34;
                }
LABEL_27:
                v7 = 0;
                goto LABEL_28;
              }
            }
          }
        }
      }
    }
    __break(0xC471u);
    return result;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 48) = 0;
LABEL_34:
  result = v23;
  if (&v25 != (int *)v23)
  {
    if (v23)
    {
      v23 = 0;
      LODWORD(__n) = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

uint64_t JSC::DataView::get<unsigned int>(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2 + 4;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = MEMORY[0x1E0CC10F8];
  if (!a4)
  {
    if (!v5)
      goto LABEL_18;
    v11 = *(_QWORD *)(v5 + 16);
    if (v11)
    {
      if ((v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v11 & 0x3FFFFFFFFLL) + v12)
      {
        v13 = *(_BYTE *)(a1 + 6);
        if ((v13 & 3) == 0)
        {
          v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_18;
        }
        if (*(_BYTE *)(v5 + 64) && (v29 = *(_QWORD *)(v5 + 32)) != 0)
        {
          v19 = atomic_load((unint64_t *)(v29 + 32));
          v13 = *(_BYTE *)(a1 + 6);
        }
        else
        {
          v19 = *(_QWORD *)(v5 + 48);
        }
        v20 = *(_QWORD *)(a1 + 8);
        if ((v13 & 4) == 0)
        {
          if (*(_QWORD *)(a1 + 16) + v20 <= v19 && v19 >= v20)
            v5 = 0;
          else
            v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_18;
        }
        v18 = v19 >= v20;
        v24 = v19 - v20;
        if (!v18)
        {
          if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
            LOBYTE(v25) = 0;
          else
            v25 = qword_1969F7C08[(char)(*(_BYTE *)(a1 + 4) - 4)];
          v5 = (-1 << v25) & v24;
LABEL_18:
          if (v4 > v5)
          {
            __break(0xC471u);
            JUMPOUT(0x1961893ACLL);
          }
          goto LABEL_21;
        }
      }
    }
    v5 = 0;
    goto LABEL_18;
  }
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if ((v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v7 & 0x3FFFFFFFFLL) + v8)
      {
        v9 = *(_BYTE *)(a1 + 6);
        if ((v9 & 3) == 0)
        {
          v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_9;
        }
        if (*(_BYTE *)(v5 + 64) && (v28 = *(_QWORD *)(v5 + 32)) != 0)
        {
          v16 = atomic_load((unint64_t *)(v28 + 32));
          v9 = *(_BYTE *)(a1 + 6);
        }
        else
        {
          v16 = *(_QWORD *)(v5 + 48);
        }
        v17 = *(_QWORD *)(a1 + 8);
        if ((v9 & 4) == 0)
        {
          v18 = *(_QWORD *)(a1 + 16) + v17 <= v16 && v16 >= v17;
          if (v18)
            v5 = 0;
          else
            v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_9;
        }
        v18 = v16 >= v17;
        v22 = v16 - v17;
        if (!v18)
        {
          if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
            LOBYTE(v23) = 0;
          else
            v23 = qword_1969F7C08[(char)(*(_BYTE *)(a1 + 4) - 4)];
          v5 = (-1 << v23) & v22;
          goto LABEL_9;
        }
      }
    }
    v5 = 0;
  }
LABEL_9:
  if (v4 > v5)
  {
    result = 0;
    *a4 = 0;
    return result;
  }
  *a4 = 1;
LABEL_21:
  v14 = *(_QWORD *)(v6 + 56);
  if (v14 && (*(_BYTE *)(v6 + 34) || !*MEMORY[0x1E0CC10F0]))
    v15 = (*(_QWORD *)(a1 + 24) & 0x3FFFFFFFFLL) + v14;
  else
    v15 = *(_QWORD *)(a1 + 24);
  v26 = *(_DWORD *)(v15 + a2);
  v27 = bswap32(v26);
  if (a3)
    return v26;
  else
    return v27;
}

unint64_t WebCore::parseDoViCodecParameters(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;
  unsigned __int16 **v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  unsigned __int16 *v66;
  uint64_t v67;
  __int16 v68;
  char v69;

  v4 = (unint64_t)a1;
  v66 = a1;
  v67 = a2;
  v68 = 46;
  v69 = 0;
  v62 = &v66;
  v63 = 0;
  v65 = (_DWORD)a2 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v62);
  if (v63 == (_DWORD)v67 && v65)
    goto LABEL_123;
  v6 = *((unsigned int *)v62 + 2);
  if (v6 <= v63)
    goto LABEL_29;
  LODWORD(v7) = v64;
  if (v6 - v63 <= v64)
  {
    if (!v63)
    {
      v9 = *v62;
      v7 = (uint64_t)v62[1];
      goto LABEL_15;
    }
    LODWORD(v7) = v6 - v63;
  }
  v7 = v7;
  v8 = v6 - v63;
  if (*((_BYTE *)v62 + 12))
  {
    if (v8 < v7)
      goto LABEL_128;
    v9 = (unsigned __int16 *)((char *)*v62 + v63);
    v7 = v7 | 0x100000000;
  }
  else
  {
    if (v8 < v7)
      goto LABEL_128;
    v9 = &(*v62)[v63];
  }
LABEL_15:
  v10 = v7;
  if ((v7 & 0xFF00000000) == 0)
  {
    if (v7 <= 4uLL)
    {
      if ((_DWORD)v7)
      {
        v19 = 0;
        v12 = 0;
        v20 = 8 * v10;
        while (1)
        {
          v22 = *v9++;
          v21 = v22;
          if (v22 > 0x7F)
            goto LABEL_23;
          v12 |= (v21 | 0x20) << (v19 + 24);
          v19 -= 8;
          if (!(v20 + v19))
            goto LABEL_30;
        }
      }
      goto LABEL_29;
    }
LABEL_23:
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_31;
  }
  if (v7 > 4uLL)
    goto LABEL_23;
  if ((_DWORD)v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    while (1)
    {
      v15 = *(char *)v9;
      v9 = (unsigned __int16 *)((char *)v9 + 1);
      v14 = v15;
      if (v15 < 0)
        goto LABEL_23;
      v12 |= (v14 | 0x20) << (v11 + 24);
      v11 -= 8;
      if (!(v13 + v11))
        goto LABEL_30;
    }
  }
LABEL_29:
  v12 = 0;
LABEL_30:
  v18 = v12 & 0xFFFFFF00;
  v17 = v12;
  v16 = 0x100000000;
LABEL_31:
  v23 = v18 | v17;
  if ((v16 & 0x100000000) == 0)
    goto LABEL_123;
  v24 = 0;
  v25 = v23 | v16;
  if (v25 > 1685481520)
  {
    if (v25 == 1685481521)
    {
      v24 = 2;
    }
    else
    {
      v26 = 0;
      if (v25 != 1685481573)
        return v26 | v24;
      v24 = 3;
    }
  }
  else if (v25 != 1685479729)
  {
    v26 = 0;
    if (v25 != 1685479798)
      return v26 | v24;
    v24 = 1;
  }
  v2 = *(_DWORD *)&WebCore::parseDoViCodecType(WTF::StringView)::typesArray[8 * v24 + 4];
  v27 = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(v27 + 8) == (_DWORD)v67 && *(_BYTE *)(v27 + 16) != 0)
    goto LABEL_123;
  v29 = *((unsigned int *)v62 + 2);
  if (v29 <= v63)
    goto LABEL_123;
  LODWORD(v30) = v64;
  if (v29 - v63 > v64)
    goto LABEL_47;
  if (v63)
  {
    LODWORD(v30) = v29 - v63;
LABEL_47:
    v30 = v30;
    v31 = v29 - v63;
    if (*((_BYTE *)v62 + 12))
    {
      if (v31 < v30)
        goto LABEL_128;
      v32 = (unsigned __int16 *)((char *)*v62 + v63);
      v30 = v30 | 0x100000000;
      if (!(_DWORD)v30)
        goto LABEL_123;
    }
    else
    {
      if (v31 < v30)
        goto LABEL_128;
      v32 = &(*v62)[v63];
      if (!(_DWORD)v30)
        goto LABEL_123;
    }
    goto LABEL_56;
  }
  v32 = *v62;
  v30 = (uint64_t)v62[1];
  if (!(_DWORD)v30)
    goto LABEL_123;
LABEL_56:
  if ((v30 & 0xFF00000000) != 0)
  {
    if (*(_BYTE *)v32 == 48)
    {
      v33 = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v32, v30, 10, 0);
LABEL_61:
      if (HIBYTE(v33))
      {
        v4 = v33;
        goto LABEL_98;
      }
LABEL_123:
      v24 = 0;
      v26 = 0;
      return v26 | v24;
    }
  }
  else if (*v32 == 48)
  {
    v33 = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v32, v30, 10, 0);
    goto LABEL_61;
  }
  if (!(_DWORD)a2)
  {
LABEL_84:
    v38 = 0;
    goto LABEL_85;
  }
  v34 = (v30 + 5);
  v35 = v34 | 0x100000000;
  if ((a2 & 0xFF00000000) == 0)
    v35 = v34;
  if (v34 >= a2)
    v36 = a2;
  else
    v36 = v35;
  v37 = v36;
  if ((v36 & 0xFF00000000) != 0)
  {
    if (v36 <= 8uLL)
    {
      if ((_DWORD)v36)
      {
        v38 = 0;
        v39 = 8 * v37;
        v40 = 56;
        while (1)
        {
          v42 = *(char *)v4++;
          v41 = v42;
          if (v42 < 0)
            goto LABEL_77;
          v38 |= (v41 | 0x20) << v40;
          v40 -= 8;
          if (v39 + v40 == 56)
            goto LABEL_85;
        }
      }
      goto LABEL_84;
    }
LABEL_77:
    v43 = 0;
    v44 = 0;
    v45 = 0;
    goto LABEL_86;
  }
  if (v36 > 8uLL)
    goto LABEL_77;
  v38 = 0;
  if (v37)
  {
    v46 = 8 * v37;
    v47 = 56;
    do
    {
      v49 = *(unsigned __int16 *)v4;
      v4 += 2;
      v48 = v49;
      if (v49 > 0x7F)
        goto LABEL_77;
      v38 |= (v48 | 0x20) << v47;
      v47 -= 8;
    }
    while (v46 + v47 != 56);
  }
LABEL_85:
  v45 = v38 & 0xFFFFFFFFFFFFFF00;
  v43 = v38;
  v44 = 1;
LABEL_86:
  v50 = v45 | v43;
  if (!v44)
    goto LABEL_123;
  v24 = 0;
  if (v50 <= 0x647668652E647471)
  {
    if (v50 == 0x647661762E736500)
      goto LABEL_97;
    v26 = 0;
    if (v50 == 0x647668652E647462)
    {
      v24 = 1;
      goto LABEL_97;
    }
  }
  else
  {
    if (v50 == 0x647668652E647472)
    {
      v24 = 2;
      goto LABEL_97;
    }
    if (v50 == 0x647668652E737400)
    {
      v24 = 3;
      goto LABEL_97;
    }
    v26 = 0;
    if (v50 == 0x647668652E73746ELL)
    {
      v24 = 4;
LABEL_97:
      v4 = *((unsigned __int16 *)&WebCore::profileIDForAlphabeticDoViProfile(WTF::StringView)::profilesArray
           + 8 * v24
           + 4);
LABEL_98:
      if (v4 > 9 || ((1 << v4) & 0x3B0) == 0)
        goto LABEL_123;
      v52 = v2 < 2;
      if ((_DWORD)v4 != 9)
        v52 = (v2 & 0xFFFFFFFE) == 2;
      if (!v52)
        goto LABEL_123;
      v53 = WTF::StringView::SplitResult::Iterator::operator++();
      if (*(_DWORD *)(v53 + 8) == (_DWORD)v67)
      {
        if (*(_BYTE *)(v53 + 16))
          goto LABEL_123;
      }
      v54 = *((unsigned int *)v62 + 2);
      if (v54 <= v63)
        goto LABEL_129;
      LODWORD(v55) = v64;
      if (v54 - v63 <= v64)
      {
        if (!v63)
        {
          v57 = (const char *)*v62;
          v55 = (uint64_t)v62[1];
LABEL_116:
          v58 = v55;
          if ((v55 & 0xFF00000000) == 0)
          {
            v59 = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v57, v55, 10, 0);
            goto LABEL_119;
          }
LABEL_117:
          v59 = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v57, v58, 10, 0);
LABEL_119:
          if (HIBYTE(v59))
          {
            v60 = v4 - 4;
            if ((v4 - 4) <= 5
              && ((0x3Bu >> v60) & 1) != 0
              && (unsigned __int16)asc_1969F7BF8[v60] >= v59)
            {
              v26 = (v4 << 32) | ((unint64_t)v59 << 48) | v2 & 0xFFFFFF00;
              v24 = v2;
              return v26 | v24;
            }
          }
          goto LABEL_123;
        }
        LODWORD(v55) = v54 - v63;
      }
      v55 = v55;
      v56 = v54 - v63;
      if (*((_BYTE *)v62 + 12))
      {
        if (v56 >= v55)
        {
          v57 = (char *)*v62 + v63;
          v55 = v55 | 0x100000000;
          goto LABEL_116;
        }
        goto LABEL_128;
      }
      if (v56 >= v55)
      {
        v57 = (const char *)&(*v62)[v63];
        goto LABEL_116;
      }
LABEL_128:
      __break(1u);
LABEL_129:
      v58 = 0;
      v57 = "";
      goto LABEL_117;
    }
  }
  return v26 | v24;
}

unint64_t WebCore::parseDoViDecoderConfigurationRecord(WebCore *this, const WebCore::SharedBuffer *a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  WTF *v12;
  _DWORD *v13;
  char v14;
  WTF *v15;

  if (*((_QWORD *)this + 6) >= 0x18uLL)
  {
    WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(this, &v15);
    if (v15)
    {
      v14 = 1;
      JSC::DataView::create();
      v4 = JSC::DataView::get<unsigned short>((uint64_t)v13, 2, 0, &v14);
      if (v14)
        v3 = 3;
      else
        v3 = 0;
      if (v14)
        v2 = ((unint64_t)(v4 >> 9) << 24) | ((unint64_t)((v4 >> 3) & 0x3F) << 40);
      else
        v2 = 0;
      if (v13)
      {
        if (*v13 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v13;
      }
      v5 = v15;
      v15 = 0;
      if (v5)
      {
        v6 = *(_DWORD *)v5 == 2;
        *(_DWORD *)v5 -= 2;
        if (v6)
        {
          v12 = v5;
          v7 = *((_QWORD *)v5 + 10);
          if (v7)
          {
            *(_QWORD *)(v7 + 8) = 3;
            *((_QWORD *)v12 + 10) = 0;
          }
          if ((*((_BYTE *)v12 + 72) & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v12 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v12 + 16));
          v9 = (WTF *)*((_QWORD *)v12 + 1);
          if ((v9 & 1) == 0 && v9)
          {
            v10 = *(WTF **)v9;
            if (*(_QWORD *)v9)
            {
              *(_QWORD *)v9 = 0;
              *((_DWORD *)v9 + 2) = 0;
              WTF::fastFree(v10, v8);
            }
            WTF::fastFree(v9, v8);
          }
          WTF::fastFree(v12, v8);
        }
      }
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
  }
  return v3 | (v2 << 8);
}

uint64_t JSC::DataView::get<unsigned short>(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v28;
  uint64_t v29;

  v4 = a2 + 2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = MEMORY[0x1E0CC10F8];
  if (!a4)
  {
    if (!v5)
      goto LABEL_18;
    v11 = *(_QWORD *)(v5 + 16);
    if (v11)
    {
      if ((v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v11 & 0x3FFFFFFFFLL) + v12)
      {
        v13 = *(_BYTE *)(a1 + 6);
        if ((v13 & 3) == 0)
        {
          v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_18;
        }
        if (*(_BYTE *)(v5 + 64) && (v29 = *(_QWORD *)(v5 + 32)) != 0)
        {
          v19 = atomic_load((unint64_t *)(v29 + 32));
          v13 = *(_BYTE *)(a1 + 6);
        }
        else
        {
          v19 = *(_QWORD *)(v5 + 48);
        }
        v20 = *(_QWORD *)(a1 + 8);
        if ((v13 & 4) == 0)
        {
          if (*(_QWORD *)(a1 + 16) + v20 <= v19 && v19 >= v20)
            v5 = 0;
          else
            v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_18;
        }
        v18 = v19 >= v20;
        v24 = v19 - v20;
        if (!v18)
        {
          if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
            LOBYTE(v25) = 0;
          else
            v25 = qword_1969F7C08[(char)(*(_BYTE *)(a1 + 4) - 4)];
          v5 = (-1 << v25) & v24;
LABEL_18:
          if (v4 > v5)
          {
            __break(0xC471u);
            JUMPOUT(0x196189DBCLL);
          }
          goto LABEL_21;
        }
      }
    }
    v5 = 0;
    goto LABEL_18;
  }
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if ((v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v7 & 0x3FFFFFFFFLL) + v8)
      {
        v9 = *(_BYTE *)(a1 + 6);
        if ((v9 & 3) == 0)
        {
          v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_9;
        }
        if (*(_BYTE *)(v5 + 64) && (v28 = *(_QWORD *)(v5 + 32)) != 0)
        {
          v16 = atomic_load((unint64_t *)(v28 + 32));
          v9 = *(_BYTE *)(a1 + 6);
        }
        else
        {
          v16 = *(_QWORD *)(v5 + 48);
        }
        v17 = *(_QWORD *)(a1 + 8);
        if ((v9 & 4) == 0)
        {
          v18 = *(_QWORD *)(a1 + 16) + v17 <= v16 && v16 >= v17;
          if (v18)
            v5 = 0;
          else
            v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_9;
        }
        v18 = v16 >= v17;
        v22 = v16 - v17;
        if (!v18)
        {
          if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
            LOBYTE(v23) = 0;
          else
            v23 = qword_1969F7C08[(char)(*(_BYTE *)(a1 + 4) - 4)];
          v5 = (-1 << v23) & v22;
          goto LABEL_9;
        }
      }
    }
    v5 = 0;
  }
LABEL_9:
  if (v4 > v5)
  {
    LOWORD(v10) = 0;
    *a4 = 0;
    return (unsigned __int16)v10;
  }
  *a4 = 1;
LABEL_21:
  v14 = *(_QWORD *)(v6 + 56);
  if (v14 && (*(_BYTE *)(v6 + 34) || !*MEMORY[0x1E0CC10F0]))
    v15 = (*(_QWORD *)(a1 + 24) & 0x3FFFFFFFFLL) + v14;
  else
    v15 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned __int16 *)(v15 + a2);
  v26 = bswap32(v10) >> 16;
  if (!a3)
    LOWORD(v10) = v26;
  return (unsigned __int16)v10;
}

WTF::StringImpl *WebCore::createDoViCodecParametersString@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  char v21;
  unsigned __int16 v22;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  WTF::StringBuilder::append();
  v4 = *(unsigned __int16 *)(a1 + 4);
  if (v4 <= 9)
  {
    LOBYTE(v22) = 48;
    WTF::StringBuilder::append();
    LOWORD(v4) = *(_WORD *)(a1 + 4);
  }
  v22 = v4;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned short,void>>((uint64_t *)&v18, &v22);
  LOBYTE(v22) = 46;
  if (v19 && ((v5 = v20, v20 < *((_DWORD *)v19 + 1)) ? (v6 = v18 == 0) : (v6 = 0), v6))
  {
    v14 = *((_DWORD *)v19 + 4);
    v15 = *((_QWORD *)v19 + 1);
    ++v20;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v5) = 46;
    else
      *(_WORD *)(v15 + 2 * v5) = 46;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v7 = *(unsigned __int16 *)(a1 + 6);
  if (v7 <= 9)
  {
    LOBYTE(v22) = 48;
    if (v19 && ((v8 = v20, v20 < *((_DWORD *)v19 + 1)) ? (v9 = v18 == 0) : (v9 = 0), v9))
    {
      v16 = *((_DWORD *)v19 + 4);
      v17 = *((_QWORD *)v19 + 1);
      ++v20;
      if ((v16 & 4) != 0)
        *(_BYTE *)(v17 + v8) = 48;
      else
        *(_WORD *)(v17 + 2 * v8) = 48;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    LOWORD(v7) = *(_WORD *)(a1 + 6);
  }
  v22 = v7;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned short,void>>((uint64_t *)&v18, &v22);
  v11 = v18;
  if (v18
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v18),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v18),
        (v11 = v18) != 0))
  {
    *(_DWORD *)v11 += 2;
  }
  *a2 = v11;
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::GraphicsLayer::layerMode(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::primaryLayerID(WebCore::GraphicsLayer *this)
{
  return 0;
}

WTF::StringImpl *WebCore::GraphicsLayer::setName(WebCore::GraphicsLayer *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::GraphicsLayer::setIsBackdropRoot(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 0x10000;
  else
    v5 = 0;
  v6 = v4 & 0xFFFEFFFF;
  *(_WORD *)result = v6;
  *(_BYTE *)(result + 2) = (v6 | v5) >> 16;
  return result;
}

uint64_t WebCore::GraphicsLayer::setPosition(uint64_t this, const WebCore::FloatPoint *a2)
{
  if (*(_BYTE *)(this + 72))
    *(_BYTE *)(this + 72) = 0;
  *(_QWORD *)(this + 56) = *(_QWORD *)a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::setApproximatePosition(uint64_t this, const WebCore::FloatPoint *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)a2;
  if (!*(_BYTE *)(this + 72))
    *(_BYTE *)(this + 72) = 1;
  *(_QWORD *)(this + 64) = v2;
  return this;
}

uint64_t WebCore::GraphicsLayer::syncPosition(uint64_t this, const WebCore::FloatPoint *a2)
{
  *(_QWORD *)(this + 56) = *(_QWORD *)a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::setAnchorPoint(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 84) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(result + 76) = v2;
  return result;
}

uint64_t WebCore::GraphicsLayer::setBoundsOrigin(uint64_t this, const WebCore::FloatPoint *a2)
{
  *(_QWORD *)(this + 96) = *(_QWORD *)a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::syncBoundsOrigin(uint64_t this, const WebCore::FloatPoint *a2)
{
  *(_QWORD *)(this + 96) = *(_QWORD *)a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::setContentsVisible(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 64;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFFBF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::setUserInteractionEnabled(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 0x40000;
  else
    v5 = 0;
  v6 = v4 & 0xFFFBFFFF;
  *(_WORD *)result = v6;
  *(_BYTE *)(result + 2) = (v6 | v5) >> 16;
  return result;
}

uint64_t WebCore::GraphicsLayer::setAcceleratesDrawing(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 256;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFEFF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::setUsesDisplayListDrawing(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 512;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFDFF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::setContentsOpaque(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 2;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFFFD;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::setBackfaceVisibility(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 8;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFFF7;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::setBackdropFilters(WebCore::GraphicsLayer *this, const WebCore::FilterOperations *a2)
{
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 38, (uint64_t)a2);
  return 1;
}

__n128 WebCore::GraphicsLayer::setBackdropFiltersRect(WebCore::GraphicsLayer *this, const WebCore::FloatRoundedRect *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 344) = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 360) = v3;
  *(__n128 *)((char *)this + 328) = result;
  return result;
}

uint64_t WebCore::GraphicsLayer::setBlendMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 168) = a2;
  return result;
}

uint64_t WebCore::GraphicsLayer::setContentsTilePhase(uint64_t this, const WebCore::FloatSize *a2)
{
  *(_QWORD *)(this + 304) = *(_QWORD *)a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::setContentsTileSize(uint64_t this, const WebCore::FloatSize *a2)
{
  *(_QWORD *)(this + 312) = *(_QWORD *)a2;
  return this;
}

__n128 WebCore::GraphicsLayer::setContentsRect(__n128 *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  this[15] = *a2;
  return result;
}

__n128 WebCore::GraphicsLayer::setContentsClippingRect(WebCore::GraphicsLayer *this, const WebCore::FloatRoundedRect *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 17) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 18) = v3;
  *((__n128 *)this + 16) = result;
  return result;
}

uint64_t WebCore::GraphicsLayer::setContentsRectClipsDescendants(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 128;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFF7F;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::addAnimation()
{
  return 0;
}

void WebCore::GraphicsLayer::acceleratedAnimationsForTesting(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::GraphicsLayer::shouldDirectlyCompositeImage(WebCore::GraphicsLayer *this, WebCore::Image *a2)
{
  return 1;
}

uint64_t WebCore::GraphicsLayer::contentsLayerForMedia(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::contentsLayerIDForModel(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::usesContentsLayer(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::platformLayer(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::setContentsOrientation(uint64_t result, char a2)
{
  *(_BYTE *)(result + 176) = a2;
  return result;
}

uint64_t WebCore::GraphicsLayer::setContentsMinificationFilter(uint64_t result, int a2)
{
  *(_DWORD *)(result + 320) = a2;
  return result;
}

uint64_t WebCore::GraphicsLayer::setContentsMagnificationFilter(uint64_t result, int a2)
{
  *(_DWORD *)(result + 324) = a2;
  return result;
}

uint64_t WebCore::GraphicsLayer::setShowDebugBorder(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 0x2000;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFDFFF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::setShowRepaintCounter(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 0x4000;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFBFFF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::setCustomAppearance(uint64_t result, char a2)
{
  *(_BYTE *)(result + 170) = a2;
  return result;
}

float WebCore::GraphicsLayer::zPosition(WebCore::GraphicsLayer *this)
{
  return *((float *)this + 33);
}

float WebCore::GraphicsLayer::pixelAlignmentOffset(WebCore::GraphicsLayer *this)
{
  return 0.0;
}

uint64_t WebCore::GraphicsLayer::setAppliesPageScale(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 2048;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFF7FF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::appliesPageScale(WebCore::GraphicsLayer *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 11) & 1;
}

uint64_t WebCore::GraphicsLayer::allowsBackingStoreDetaching(WebCore::GraphicsLayer *this)
{
  return 1;
}

uint64_t WebCore::GraphicsLayer::setAllowsTiling(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 1024;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFBFF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::allowsTiling(WebCore::GraphicsLayer *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 10) & 1;
}

uint64_t WebCore::GraphicsLayer::visibleRectChangeRequiresFlush(WebCore::GraphicsLayer *this, const WebCore::FloatRect *a2)
{
  return 0;
}

void WebCore::GraphicsLayer::displayListAsText(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::GraphicsLayer::platformLayerTreeAsText(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::GraphicsLayer::setIsTrackingDisplayListReplay(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 0x20000;
  else
    v5 = 0;
  v6 = v4 & 0xFFFDFFFF;
  *(_WORD *)result = v6;
  *(_BYTE *)(result + 2) = (v6 | v5) >> 16;
  return result;
}

uint64_t WebCore::GraphicsLayer::isTrackingDisplayListReplay(WebCore::GraphicsLayer *this)
{
  return (*((unsigned __int8 *)this + 179) >> 1) & 1;
}

void WebCore::GraphicsLayer::replayDisplayListAsText(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::GraphicsLayer::backingStoreAttached(WebCore::GraphicsLayer *this)
{
  return 1;
}

uint64_t WebCore::GraphicsLayer::backingStoreAttachedForTesting(WebCore::GraphicsLayer *this)
{
  return (*(uint64_t (**)(WebCore::GraphicsLayer *))(*(_QWORD *)this + 816))(this);
}

uint64_t WebCore::GraphicsLayer::tiledBacking(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::isGraphicsLayerCA(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::isGraphicsLayerCARemote(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::isGraphicsLayerTextureMapper(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::isCoordinatedGraphicsLayer(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::shouldRepaintOnSizeChange(WebCore::GraphicsLayer *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 5) & 1;
}

uint64_t WebCore::GraphicsLayer::setReplicatedLayer(uint64_t this, WebCore::GraphicsLayer *a2)
{
  *(_QWORD *)(this + 224) = a2;
  return this;
}

WebCore::GraphicsContext *WebCore::GraphicsContextSwitcher::drawingContext(WebCore::GraphicsContextSwitcher *this, WebCore::GraphicsContext *a2)
{
  return a2;
}

uint64_t WebCore::GraphicsContextSwitcher::hasSourceImage(WebCore::GraphicsContextSwitcher *this)
{
  return 0;
}

float WebCore::GraphicsLayerClient::deviceScaleFactor(WebCore::GraphicsLayerClient *this)
{
  return 1.0;
}

uint64_t WebCore::GraphicsLayerClient::shouldSkipLayerInDump()
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::shouldDumpPropertyForLayer()
{
  return 1;
}

void *WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  void *result;
  uint64_t v9;

  v3 = (uint64_t *)a3;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
  {
    v3 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, a3);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * a2);
  result = memmove(v7 + 1, v7, *(_QWORD *)a1 + 8 * v6 - (_QWORD)v7);
  v9 = *v3;
  *v3 = 0;
  *v7 = v9;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WTF *WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::removeWithoutEntryConsistencyCheck(WTF *result, char *a2)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (uint64_t *)result;
  v3 = *(char **)result;
  if (*(_QWORD *)result)
    v3 += 24 * *((unsigned int *)v3 - 1);
  if (v3 != a2)
  {
    *(_QWORD *)a2 = -1;
    result = (WTF *)*((_QWORD *)a2 + 1);
    if (result)
    {
      *((_QWORD *)a2 + 1) = 0;
      *((_DWORD *)a2 + 4) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    ++*(_DWORD *)(*v2 - 16);
    v4 = *v2;
    if (*v2)
      v5 = *(_DWORD *)(v4 - 12) - 1;
    else
      v5 = -1;
    *(_DWORD *)(v4 - 12) = v5;
    v6 = *v2;
    if (*v2)
    {
      v7 = 6 * *(_DWORD *)(v6 - 12);
      v8 = *(_DWORD *)(v6 - 4);
      if (v7 < v8 && v8 >= 9)
        return (WTF *)WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::rehash(v2, v8 >> 1, 0);
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  _QWORD *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = (_QWORD *)(v18 + 24 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (*v26);
          v27 = v25;
          v28 = v18 + 24 * v25;
          v31 = *(WTF **)(v28 + 8);
          v30 = (_QWORD *)(v28 + 8);
          v29 = v31;
          if (v31)
          {
            *v30 = 0;
            *(_DWORD *)(v18 + 24 * v25 + 16) = 0;
            WTF::fastFree(v29, v8);
            v13 = *v12;
          }
          *v26 = v13;
          v32 = v4 + 24 * v9;
          *v30 = 0;
          v30[1] = 0;
          v34 = *(_QWORD *)(v32 + 8);
          v33 = v32 + 8;
          *(_QWORD *)v33 = 0;
          *v30 = v34;
          v35 = *(_DWORD *)(v33 + 8);
          *(_DWORD *)(v33 + 8) = 0;
          v36 = v18 + 24 * v27;
          *(_DWORD *)(v36 + 16) = v35;
          v37 = *(_DWORD *)(v33 + 12);
          *(_DWORD *)(v33 + 12) = 0;
          *(_DWORD *)(v36 + 20) = v37;
          v38 = *(WTF **)v33;
          if (*(_QWORD *)v33)
          {
            *(_QWORD *)v33 = 0;
            *(_DWORD *)(v33 + 8) = 0;
            WTF::fastFree(v38, v8);
          }
          if (v12 == a3)
            v10 = v26;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v17 = *(WTF **)(v14 + 8);
          v16 = (_QWORD *)(v14 + 8);
          v15 = v17;
          if (v17)
          {
            *v16 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v15, v8);
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t *WTF::HashTable<WebCore::GraphicsLayer const*,WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::GraphicsLayer const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  result = (uint64_t *)(v2 + 24 * v7);
  v9 = *result;
  if (*result != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v3;
      result = (uint64_t *)(v2 + 24 * v7);
      v9 = *result;
      ++v10;
      if (*result == *a2)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::GraphicsLayer const*>>,WebCore::GraphicsLayer const*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;

  v2 = result;
  if (!WebCore::repaintRectMap(void)::map)
  {
LABEL_12:
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    return result;
  }
  v3 = *(_DWORD *)(WebCore::repaintRectMap(void)::map - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(WebCore::repaintRectMap(void)::map + 24 * v7);
  if (v8 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = (v7 + v9) & v3;
      v8 = *(_QWORD *)(WebCore::repaintRectMap(void)::map + 24 * v7);
      ++v9;
      if (v8 == a2)
        goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_6:
  v10 = WebCore::repaintRectMap(void)::map + 24 * v7;
  v11 = *(unsigned int *)(v10 + 20);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v12 = v10 + 8;
      result = WTF::fastMalloc((WTF *)(16 * v11));
      *(_DWORD *)(v2 + 8) = v11;
      *(_QWORD *)v2 = result;
      v13 = *(unsigned int *)(v12 + 12);
      if ((_DWORD)v13)
      {
        v14 = *(__int128 **)v12;
        v15 = 16 * v13;
        do
        {
          v16 = *v14++;
          *(_OWORD *)result = v16;
          result += 16;
          v15 -= 16;
        }
        while (v15);
      }
    }
  }
  return result;
}

uint64_t WTF::streamSizedContainer<std::array<float,20ul>>(uint64_t a1)
{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 1)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 2)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 3)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 4)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 5)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 6)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 7)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 8)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 9)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 10)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 11)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 12)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 13)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 14)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 15)
    goto LABEL_20;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a1 + 32) == 16
    || (WTF::TextStream::operator<<(), WTF::TextStream::operator<<(), *(_DWORD *)(a1 + 32) == 17)
    || (WTF::TextStream::operator<<(), WTF::TextStream::operator<<(), *(_DWORD *)(a1 + 32) == 18)
    || (WTF::TextStream::operator<<(), WTF::TextStream::operator<<(), *(_DWORD *)(a1 + 32) == 19))
  {
LABEL_20:
    WTF::TextStream::operator<<();
  }
  else
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  return WTF::TextStream::operator<<();
}

WTF::TextStream *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&)::$_0,WebCore::operator<<(WTF::TextStream &,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&)::$_1,WebCore::operator<<(WTF::TextStream &,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(WTF::TextStream ***a1, float *a2)
{
  return WebCore::operator<<(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&)::$_0,WebCore::operator<<(WTF::TextStream &,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&)::$_1,WebCore::operator<<(WTF::TextStream &,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(uint64_t a1)
{
  WTF::TextStream *v1;

  v1 = *(WTF::TextStream **)(*(_QWORD *)a1 + 8);
  WTF::TextStream::startGroup(v1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator<<(WTF::TextStream &,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&)::$_0,WebCore::operator<<(WTF::TextStream &,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&)::$_1,WebCore::operator<<(WTF::TextStream &,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(uint64_t a1)
{
  WTF::TextStream *v1;
  uint64_t v2;

  v1 = *(WTF::TextStream **)(*(_QWORD *)a1 + 16);
  WTF::TextStream::startGroup(v1);
  WTF::TextStream::operator<<();
  v2 = WTF::TextStream::operator<<();
  WTF::streamSizedContainer<std::array<float,20ul>>(v2);
  return WTF::TextStream::endGroup(v1);
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned short,void>>(uint64_t *a1, unsigned __int16 *a2)
{
  unsigned int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  _WORD *result;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned int v10;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned int v14;
  _BYTE v15[22];

  v3 = *a2;
  v4 = *((_DWORD *)a1 + 4);
  do
  {
    ++v4;
    v5 = v3 > 9;
    v3 /= 0xAu;
  }
  while (v5);
  v6 = a1[1];
  if ((v6 || (v6 = *a1) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (result)
    {
      v8 = 0;
      v9 = *a2;
      do
      {
        v10 = v9;
        v15[v8-- + 13] = (v9 % 0xAu) | 0x30;
        v9 /= 0xAu;
      }
      while (v10 > 9);
      if (v8 + 8 <= 7)
      {
        do
          *result++ = v15[v8 + 14];
        while (!__CFADD__(v8++, 1));
      }
    }
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v12 = 0;
      v13 = *a2;
      do
      {
        v14 = v13;
        v15[v12-- + 6] = (v13 % 0xAu) | 0x30;
        v13 /= 0xAu;
      }
      while (v14 > 9);
      if (v12 + 8 <= 7)
        return memcpy(result, &v15[v12 + 7], -v12);
    }
  }
  return result;
}

WebCore::Image *WebCore::Image::Image(WebCore::Image *this, WebCore::ImageObserver *a2)
{
  uint64_t v3;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::Image *v11;

  v3 = 0;
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E340D128;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2)
  {
    v11 = this;
    v3 = *((_QWORD *)a2 + 2);
    if (v3)
      goto LABEL_14;
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v7 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    if (!v7)
      goto LABEL_14;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
    v3 = *((_QWORD *)a2 + 2);
    if (v3)
    {
LABEL_14:
      do
        v5 = __ldaxr((unsigned int *)v3);
      while (__stlxr(v5 + 1, (unsigned int *)v3));
    }
    this = v11;
  }
  *((_QWORD *)this + 4) = v3;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void WebCore::Image::~Image(WebCore::Image *this, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  *(_QWORD *)this = off_1E340D128;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    v5 = v4[2];
    v4[2] = 0;
    if (v5)
      CFRelease(v5);
    v6 = v4[1];
    v4[1] = 0;
    if (v6)
      CFRelease(v6);
    v7 = *v4;
    *v4 = 0;
    if (v7)
    {
      do
      {
        v15 = __ldaxr(v7);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v7));
      if (!v16)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v20 = *(unsigned int *)(v11 + 20);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(v11 + 8);
        v22 = v21 + 16 * v20;
        do
        {
          v23 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              v31 = v21;
              v32 = v22;
              v30 = v11;
              atomic_store(1u, v23);
              v29 = v23[6];
              if ((_DWORD)v29 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_10[v29])(&v33, v23 + 2);
              v23[6] = -1;
              WTF::fastFree((WTF *)v23, a2);
              v11 = v30;
              v21 = v31;
              v22 = v32;
            }
          }
          v21 += 16;
        }
        while (v21 != v22);
      }
      v26 = *(WTF **)(v11 + 8);
      if ((WTF *)(v11 + 24) != v26 && v26 != 0)
      {
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        v28 = v11;
        WTF::fastFree(v26, a2);
        v11 = v28;
      }
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v17 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

_QWORD *WebCore::Image::adapter(WebCore::Image *this)
{
  _QWORD *v1;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v1 = (_QWORD *)*((_QWORD *)this + 5);
  if (!v1)
  {
    v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    if (!*((_QWORD *)this + 2))
    {
      v13 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = this;
      v14 = (unsigned int *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v13;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, v3);
        }
      }
    }
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v1[1] = 0;
    v1[2] = 0;
    *v1 = v4;
    v6 = (unsigned int **)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v1;
    if (v6)
    {
      v7 = v6[2];
      v6[2] = 0;
      if (v7)
        CFRelease(v7);
      v8 = v6[1];
      v6[1] = 0;
      if (v8)
        CFRelease(v8);
      v9 = *v6;
      *v6 = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, v3);
        }
      }
      WTF::fastFree((WTF *)v6, v3);
      return (_QWORD *)*((_QWORD *)this + 5);
    }
  }
  return v1;
}

void WebCore::Image::invalidateAdapter(WebCore::Image *this)
{
  WebCore::ImageAdapter *v1;

  v1 = (WebCore::ImageAdapter *)*((_QWORD *)this + 5);
  if (v1)
    WebCore::ImageAdapter::invalidate(v1);
}

double WebCore::PDFDocumentImage::create@<D0>(WebCore::PDFDocumentImage *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;
  unsigned int v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
    && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19618B600);
  }
  v6 = WTF::fastMalloc((WTF *)0x78);
  v7 = 0;
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E340D128;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  if (this)
  {
    v14 = v6;
    v7 = *((_QWORD *)this + 2);
    if (v7)
      goto LABEL_20;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = this;
    v11 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v7;
    if (!v11)
      goto LABEL_20;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
    v7 = *((_QWORD *)this + 2);
    if (v7)
    {
LABEL_20:
      do
        v9 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v9 + 1, (unsigned int *)v7));
    }
    v6 = v14;
  }
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = 0;
  *(_WORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)v6 = off_1E34123F8;
  result = 0.0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_QWORD *)(v6 + 93) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *a2 = v6;
  return result;
}

void WebCore::Image::create(int **a1@<X0>, _BYTE *a2@<X8>)
{
  int *v3;
  CFTypeRef v4;
  char *v5;
  char v6;
  uint64_t v7;
  CFTypeRef cf;

  v3 = *a1;
  if (!v3)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  WebCore::ShareableBitmap::makeCGImage(v3, 1, (CGImageRef *)&cf);
  if (!cf)
  {
    v5 = a2 + 8;
LABEL_9:
    v6 = 0;
    *a2 = 0;
    goto LABEL_10;
  }
  WebCore::BitmapImage::create((CGImageRef *)&cf, &v7);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  v5 = a2 + 8;
  if (!v7)
    goto LABEL_9;
  *(_QWORD *)a2 = v7;
  v6 = 1;
LABEL_10:
  *v5 = v6;
}

BOOL WebCore::Image::supportsType(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  _BOOL8 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v2 = *this;
  if (!*this || !*((_DWORD *)v2 + 1))
    return 0;
  *(_DWORD *)v2 += 2;
  v7 = v2;
  if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v7) & 1) != 0)
  {
    v3 = 1;
  }
  {
    if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
      v3 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v7) != 0;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
    WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
  }
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

_QWORD *WebCore::Image::drawPattern(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  _QWORD *result;
  void *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 312))(&v29, a1, (unsigned __int16)a8 >> 12);
  if (v29)
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 408))(a2, v29, a3, a4, a5, a6, a7, *(_QWORD *)&a8 & 0xFFFFFFLL);
    v18 = a1[4];
    if (v18)
    {
      v19 = *(_DWORD **)(v18 + 8);
      if (v19)
      {
        ++v19[2];
        result = (_QWORD *)(*(uint64_t (**)(_DWORD *, _QWORD *))(*(_QWORD *)v19 + 64))(v19, a1);
        if (v19[2] == 1)
          result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        else
          --v19[2];
      }
    }
    v20 = v29;
    v29 = 0;
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (__ldaxr((unsigned __int8 *)v21))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v21))
      {
        goto LABEL_11;
      }
      result = (_QWORD *)MEMORY[0x19AEA534C](v21);
LABEL_11:
      v23 = *(_QWORD *)(v21 + 8);
      v24 = v23 - 1;
      *(_QWORD *)(v21 + 8) = v23 - 1;
      if (v23 == 1)
      {
        v28 = *(_QWORD *)(v21 + 16);
        v25 = *(_QWORD *)(v21 + 24);
        *(_QWORD *)(v21 + 24) = 0;
        v26 = v28 != 0;
      }
      else
      {
        v25 = 0;
        v26 = 1;
      }
      v27 = __ldxr((unsigned __int8 *)v21);
      if (v27 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v21))
        {
          if (v24)
            return result;
LABEL_19:
          if (v25)
            result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          if (!v26)
            return (_QWORD *)WTF::fastFree((WTF *)v21, v17);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
      if (v24)
        return result;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t WebCore::Image::drawTiled(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, int a6, int a7, unsigned int a8)
{
  float v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  _BOOL4 v24;
  float v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  int v33;
  float v34;
  _BOOL4 v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v42[2];
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  (*(void (**)(double *__return_ptr))(*(_QWORD *)a1 + 360))(&v43);
  if (LOBYTE(v44))
  {
    WebCore::Image::fillWithSolidColor(a2, (uint64_t)a3, &v43, (a8 >> 8) & 0xF, v16);
    if (LOBYTE(v44) && (*(_QWORD *)&v43 & 0x8000000000000) != 0)
    {
      v18 = (unsigned int *)(*(_QWORD *)&v43 & 0xFFFFFFFFFFFFLL);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v17);
      }
    }
    return 3;
  }
  v22 = *a5;
  v21 = a5[1];
  v49 = 0;
  if (a6 == 2)
  {
    v28 = v22 * a4[2];
    v29 = a3[2];
    v30 = vcvtms_s32_f32(v29 / v28);
    if (!v30)
      return 0;
    v23 = (float)(v29 - (float)(v28 * (float)v30)) / (float)(v30 + 1);
    *(float *)&v49 = v23;
    v24 = (v30 & 1) == 0;
  }
  else
  {
    v23 = 0.0;
    if (a6 == 1)
    {
      v24 = 0;
      v25 = a4[2];
      v26 = a3[2];
      v27 = vcvtms_s32_f32(v26 / (float)(v22 * v25));
      if (v27 <= 1)
        v27 = 1;
      v22 = v26 / (float)(v25 * (float)v27);
    }
    else
    {
      v24 = 0;
    }
  }
  if (a7 == 1)
  {
    v35 = 0;
    v31 = a4[3];
    v36 = a3[3];
    v37 = vcvtms_s32_f32(v36 / (float)(v21 * v31));
    if (v37 <= 1)
      v37 = 1;
    v21 = v36 / (float)(v31 * (float)v37);
    goto LABEL_24;
  }
  if (a7 != 2)
  {
    v35 = 0;
    v31 = a4[3];
LABEL_24:
    v34 = 0.0;
    goto LABEL_25;
  }
  v31 = a4[3];
  v32 = a3[3];
  v33 = vcvtms_s32_f32(v32 / (float)(v21 * v31));
  if (v33)
  {
    v34 = (float)(v32 - (float)((float)(v21 * v31) * (float)v33)) / (float)(v33 + 1);
    *((float *)&v49 + 1) = v34;
    v35 = (v33 & 1) == 0;
LABEL_25:
    v43 = v22;
    v44 = v22 * 0.0;
    v45 = v21 * 0.0;
    v46 = v21;
    v47 = 0;
    v48 = 0;
    v38 = v22 * *a4;
    if (v24)
    {
      v38 = v38 - v23;
    }
    else if ((a6 & 0xFFFFFFFE) == 2)
    {
      v38 = v38 + (float)((float)(a3[2] - (float)(v22 * a4[2])) * -0.5);
    }
    v39 = v21 * a4[1];
    if (v35)
    {
      v39 = v39 - v34;
    }
    else if ((a7 & 0xFFFFFFFE) == 2)
    {
      v39 = v39 + (float)((float)(a3[3] - (float)(v21 * v31)) * -0.5);
    }
    v40 = a3[1] - v39;
    v42[0] = *a3 - v38;
    v42[1] = v40;
    (*(void (**)(uint64_t, uint64_t, float *, float *, double *, float *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 320))(a1, a2, a3, a4, &v43, v42, &v49, *(_QWORD *)&a8 & 0xFFFFFFLL);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
    return 3;
  }
  return 0;
}

CFTypeRef WebCore::Image::colorSpace@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v3;
  CFTypeRef result;
  char v5;
  char **v6;
  char *v7;

  v3 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *a1 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (result)
    return CFRetain(result);
  return result;
}

void WebCore::Image::toShareableBitmap(WebCore::Image *this@<X0>, WebCore::ShareableBitmap **a2@<X8>)
{
  float v4;
  float v5;
  int v6;
  int v7;
  int v8;
  CFTypeRef v9;
  WebCore::ShareableBitmap *v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  int v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  CFTypeRef cf;
  char v21;
  WebCore::ShareableBitmap *v22;
  uint64_t v23;
  float v24;
  int v25;

  v4 = (*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)this + 168))(this, 0);
  if (v4 > -2147500000.0)
    v6 = (int)v4;
  else
    v6 = 0x80000000;
  if (v4 < 2147500000.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  LODWORD(v23) = v7;
  if (v5 >= 2147500000.0)
  {
    v8 = 0x7FFFFFFF;
  }
  else if (v5 <= -2147500000.0)
  {
    v8 = 0x80000000;
  }
  else
  {
    v8 = (int)v5;
  }
  HIDWORD(v23) = v8;
  v18[0] = 0;
  v18[8] = 0;
  WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration((uint64_t)&v19, (WebCore::ShareableBitmapConfiguration *)&v23, (uint64_t)v18, 0);
  WebCore::ShareableBitmap::create((mach_vm_size_t)&v19, (uint64_t *)&v22);
  if (v21)
  {
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
  }
  v10 = v22;
  WebCore::ShareableBitmap::createGraphicsContext(v22, &v17);
  v12 = v17;
  if (v17)
  {
    *(float *)&v13 = (*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)this + 168))(this, 0);
    v19 = 0;
    cf = (CFTypeRef)__PAIR64__(v14, v13);
    v15 = (*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)this + 168))(this, 0);
    v23 = 0;
    v24 = v15;
    v25 = v16;
    (*(void (**)(uint64_t, WebCore::Image *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v12 + 360))(v12, this, &v19, &v23, 545);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *a2 = v10;
  }
  else
  {
    *a2 = 0;
    if (v10)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v10, v11);
  }
}

uint64_t WebCore::Image::dump(WebCore::Image *this, WTF::TextStream *a2)
{
  float v4;

  if ((*(unsigned int (**)(WebCore::Image *))(*(_QWORD *)this + 112))(this))
  {
    (*(void (**)(WebCore::Image *))(*(_QWORD *)this + 112))(this);
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  if ((*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)this + 168))(this, 0) <= 0.0 || v4 <= 0.0)
  {
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a2);
  }
  (*(void (**)(WebCore::Image *, _QWORD))(*(_QWORD *)this + 168))(this, 0);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a2);
}

uint64_t WebCore::Image::setSystemAllowsAnimationControls(uint64_t this)
{
  WebCore::Image::gSystemAllowsAnimationControls = this;
  return this;
}

uint64_t *WebCore::ImageAdapter::allNativeImages@<X0>(WebCore::ImageAdapter *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8) + 96))(*(_QWORD *)(*(_QWORD *)this + 8));
  if ((_DWORD)result)
  {
    v5 = (int)result;
    v6 = 0;
    while (1)
    {
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)this + 8)
                                                                                 + 296))(&v32, *(_QWORD *)(*(_QWORD *)this + 8), v6);
      v8 = v32;
      if (!v32)
        goto LABEL_41;
      v31 = v32;
      v32 = 0;
      v9 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v9 == *(_DWORD *)(a2 + 8))
      {
        result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v9 + 1, (unint64_t)&v31);
        v9 = *(unsigned int *)(a2 + 12);
        v10 = *(char **)a2;
        v11 = *result;
        *result = 0;
        *(_QWORD *)&v10[8 * v9] = v11;
      }
      else
      {
        v12 = *(char **)a2;
        v31 = 0;
        *(_QWORD *)&v12[8 * v9] = v8;
      }
      *(_DWORD *)(a2 + 12) = v9 + 1;
      v13 = v31;
      v31 = 0;
      if (v13)
        break;
LABEL_24:
      v21 = v32;
      v32 = 0;
      if (!v21)
        goto LABEL_41;
      v22 = *(_QWORD *)(v21 + 8);
      if (__ldaxr((unsigned __int8 *)v22))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v22))
      {
        goto LABEL_29;
      }
      result = (uint64_t *)MEMORY[0x19AEA534C](v22);
LABEL_29:
      v24 = *(_QWORD *)(v22 + 8);
      v25 = v24 - 1;
      *(_QWORD *)(v22 + 8) = v24 - 1;
      if (v24 == 1)
      {
        v29 = *(_QWORD *)(v22 + 16);
        v26 = *(_QWORD *)(v22 + 24);
        *(_QWORD *)(v22 + 24) = 0;
        v27 = v29 != 0;
      }
      else
      {
        v26 = 0;
        v27 = 1;
      }
      v28 = __ldxr((unsigned __int8 *)v22);
      if (v28 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v22))
        {
          if (!v25)
            goto LABEL_37;
          goto LABEL_41;
        }
      }
      else
      {
        __clrex();
      }
      result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v22);
      if (!v25)
      {
LABEL_37:
        if (v26)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        if (!v27)
          result = (uint64_t *)WTF::fastFree((WTF *)v22, v7);
      }
LABEL_41:
      v6 = (v6 + 1);
      if (v5 == (_DWORD)v6)
        return result;
    }
    v14 = *(_QWORD *)(v13 + 8);
    if (__ldaxr((unsigned __int8 *)v14))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v14))
    {
      goto LABEL_12;
    }
    result = (uint64_t *)MEMORY[0x19AEA534C](v14);
LABEL_12:
    v16 = *(_QWORD *)(v14 + 8);
    v17 = v16 - 1;
    *(_QWORD *)(v14 + 8) = v16 - 1;
    if (v16 == 1)
    {
      v30 = *(_QWORD *)(v14 + 16);
      v18 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = 0;
      v19 = v30 != 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    v20 = __ldxr((unsigned __int8 *)v14);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
      {
        if (v17)
          goto LABEL_24;
LABEL_20:
        if (v18)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        if (!v19)
          result = (uint64_t *)WTF::fastFree((WTF *)v14, v7);
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17)
      goto LABEL_24;
    goto LABEL_20;
  }
  return result;
}

void WebCore::ImageBuffer::create(float *a1@<X0>, uint64_t a2@<X1>, CFTypeRef *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>, __n128 a8@<Q0>)
{
  __int16 v10;
  float v12;
  __int16 v13;
  uint64_t v16;
  uint64_t v17;

  v10 = a4;
  v12 = a8.n128_f32[0];
  v13 = a2;
  if (a6)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, float *, uint64_t, CFTypeRef *, uint64_t, _QWORD, __n128))(*(_QWORD *)a6 + 40))(a7, a6, a1, a2, a3, a4, a5, a8);
    if (*a7)
      return;
    *a7 = 0;
  }
  if ((a5 & 1) != 0 && WebCore::s_canUseAcceleratedBuffers)
  {
    v16 = 0;
    v17 = 0;
    if (a6)
      LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
    WebCore::ImageBuffer::create<WebCore::ImageBufferIOSurfaceBackend,WebCore::ImageBuffer>(a1, a3, v10, v13, (uint64_t)&v16, a7, v12);
    if (*a7)
      goto LABEL_11;
    *a7 = 0;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v17 + 4));
  }
  v16 = 0;
  v17 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(a1, a3, v10, v13, a7, v12);
LABEL_11:
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v17 + 4));
}

void WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(float *a1@<X0>, CFTypeRef *a2@<X1>, __int16 a3@<W2>, __int16 a4@<W3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  float v10;
  float v11;
  CFTypeRef v12;
  unint64_t v13;
  float v14;
  float v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  CFTypeRef v25;
  CFTypeRef v26;
  uint64_t v27;
  unint64_t v28;
  float v29;
  CFTypeRef cf;
  __int16 v31;
  __int128 v32[2];
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  CFTypeRef v40;
  char v41;
  char v42;

  v10 = *a1;
  v11 = a1[1];
  v12 = *a2;
  if (*a2)
    CFRetain(*a2);
  v13 = 0;
  v14 = ceilf(v10 * a6);
  if (v14 > 0.0)
  {
    v15 = ceilf(v11 * a6);
    if (v15 > 0.0)
    {
      v16 = v14 > -2147500000.0 && v14 < 2147500000.0;
      if (v16 && (v15 > -2147500000.0 ? (v17 = v15 < 2147500000.0) : (v17 = 0), v17))
      {
        v18 = (int)v14;
        v19 = (unint64_t)(int)v15 << 32;
        if (v15 >= 2147500000.0)
          v19 = 0x7FFFFFFF00000000;
        if (v14 >= 2147500000.0)
          v18 = 0x7FFFFFFFLL;
        v13 = v19 | v18;
      }
      else
      {
        v13 = 0;
      }
    }
  }
  v38 = v13;
  v39 = a6;
  v40 = v12;
  if (v12)
    CFRetain(v12);
  v41 = a3;
  v42 = a4;
  WebCore::ImageBufferCGBitmapBackend::create(&v38, &v37);
  v20 = v37;
  if (v37)
  {
    LOBYTE(v32[0]) = 0;
    v21 = (double)-HIDWORD(v38);
    v34 = v21 * -0.0 + 0.0;
    v35 = 0.0 - v21;
    *((double *)v32 + 1) = v39;
    v32[1] = (__int128)vmulq_n_f64((float64x2_t)xmmword_1968DD9F0, v39);
    v33 = -v39;
    if (v38 >> 30
      || (v38 & 0x8000000000000000) != 0
      || (v22 = HIDWORD(v38) * (unint64_t)(4 * v38), (v22 & 0xFFFFFFFF00000000) != 0))
    {
      __break(0xC471u);
      JUMPOUT(0x19618C680);
    }
    v36 = v22;
    v28 = __PAIR64__(LODWORD(v11), LODWORD(v10));
    v23 = a3 | (a4 << 8);
    v29 = a6;
    cf = v12;
    if (v12)
      CFRetain(v12);
    v31 = v23;
    v27 = v20;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer>((uint64_t *)&v28, v32, &v27, a5);
    v24 = v27;
    v27 = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = cf;
    cf = 0;
    if (v25)
      CFRelease(v25);
  }
  else
  {
    *a5 = 0;
  }
  v26 = v40;
  v40 = 0;
  if (v26)
    CFRelease(v26);
  if (v12)
    CFRelease(v12);
}

uint64_t WebCore::ImageBuffer::ImageBuffer(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v11 = 0;
  *(_OWORD *)(v11 + 8) = xmmword_19689B170;
  *(_QWORD *)(v11 + 24) = a1;
  *(_QWORD *)a1 = off_1E340D2A8;
  *(_QWORD *)(a1 + 8) = v11;
  v12 = *a2;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 16) = v12;
  v13 = (const void *)a2[2];
  *(_QWORD *)(a1 + 32) = v13;
  if (v13)
    CFRetain(v13);
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 12);
  v14 = *a3;
  v15 = a3[1];
  v16 = a3[3];
  *(_OWORD *)(a1 + 80) = a3[2];
  *(_OWORD *)(a1 + 96) = v16;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v15;
  v17 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = a6;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  return a1;
}

{
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v11 = 0;
  *(_OWORD *)(v11 + 8) = xmmword_19689B170;
  *(_QWORD *)(v11 + 24) = a1;
  *(_QWORD *)a1 = off_1E340D2A8;
  *(_QWORD *)(a1 + 8) = v11;
  v12 = *a2;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 16) = v12;
  v13 = (const void *)a2[2];
  *(_QWORD *)(a1 + 32) = v13;
  if (v13)
    CFRetain(v13);
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 12);
  v14 = *a3;
  v15 = a3[1];
  v16 = a3[3];
  *(_OWORD *)(a1 + 80) = a3[2];
  *(_OWORD *)(a1 + 96) = v16;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v15;
  v17 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = a6;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  return a1;
}

void WebCore::ImageBuffer::~ImageBuffer(WebCore::ImageBuffer *this)
{
  uint64_t v2;
  const void *v3;

  *(_QWORD *)this = off_1E340D2A8;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
}

{
  uint64_t v2;
  const void *v3;

  *(_QWORD *)this = off_1E340D2A8;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
}

BOOL WebCore::ImageBuffer::sizeNeedsClamping(WebCore::ImageBuffer *this, const WebCore::FloatSize *a2)
{
  _BOOL8 result;
  float v4;

  result = 0;
  if (*(float *)this > 0.0)
  {
    v4 = *((float *)this + 1);
    if (v4 > 0.0)
      return (float)(floorf(*(float *)this) * floorf(v4)) > 16777000.0;
  }
  return result;
}

uint64_t WebCore::SerializedImageBuffer::sinkIntoImageBuffer(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (!a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  *a1 = 0;
  v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WebCore::ImageBuffer::sinkIntoSerializedImageBuffer@<X0>(WebCore::ImageBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  int v8;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v5 = result;
  *result = off_1E340D5C8;
  if (!this)
    goto LABEL_11;
  v6 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    result = (_QWORD *)MEMORY[0x19AEA534C](v6);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_11:
  v5[1] = this;
  *a2 = v5;
  return result;
}

uint64_t WebCore::ImageBuffer::sizeNeedsClamping(WebCore::ImageBuffer *this, const WebCore::FloatSize *a2, WebCore::FloatSize *a3)
{
  uint64_t result;
  float v5;
  float v6;
  float v7;
  float v8;

  result = 0;
  v5 = *(float *)this * *(float *)a2;
  if (v5 > 0.0)
  {
    v6 = *((float *)a2 + 1);
    v7 = *((float *)this + 1) * v6;
    if (v7 > 0.0)
    {
      if ((float)(floorf(v5) * floorf(v7)) > 16777000.0)
      {
        v8 = sqrtf(16777000.0 / (float)(v5 * v7));
        *(float *)a2 = *(float *)a2 * v8;
        *((float *)a2 + 1) = v6 * v8;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void WebCore::ImageBuffer::clone(WebCore::ImageBuffer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  WebCore::ImageBuffer *v17;

  v4 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v17 = this;
  WebCore::copyImageBuffer(a2, (uint64_t *)&v17, 1);
  v8 = (uint64_t)v17;
  v17 = 0;
  if (!v8)
    return;
  v9 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_16:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (!v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (!v14)
      WTF::fastFree((WTF *)v9, v7);
  }
}

void WebCore::copyImageBuffer(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  float v7;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const void *v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  CFTypeRef cf[2];
  uint64_t v35;
  uint64_t v36;
  const void *v37;

  v6 = *a2;
  v7 = 1.0;
  if (*(float *)(*a2 + 24) != 1.0 && a3 == 0)
    goto LABEL_16;
  v9 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_9:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = __ldxr((unsigned __int8 *)v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v6 = *a2;
  if (v11 == 1)
  {
    *a2 = 0;
    *a1 = v6;
    return;
  }
LABEL_16:
  v37 = *(const void **)(v6 + 16);
  if (a3)
    v7 = *(float *)(v6 + 24);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v14 = *(const void **)(*a2 + 32);
  cf[0] = v14;
  if (v14)
    CFRetain(v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const void **, CFTypeRef *, _QWORD, _QWORD, float))(*(_QWORD *)v13 + 328))(&v36, v13, &v37, cf, 0, 0, v7);
  v15 = cf[0];
  cf[0] = 0;
  if (v15)
    CFRelease(v15);
  v16 = v36;
  if (!v36)
    goto LABEL_52;
  v17 = *(_QWORD *)(*a2 + 8);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](v17);
LABEL_27:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = __ldxr((unsigned __int8 *)v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  v22 = *a2;
  if (v19 != 1)
  {
    cf[0] = 0;
    WebCore::GraphicsContext::drawImageBuffer(v21, v22, (uint64_t *)cf);
    goto LABEL_51;
  }
  *a2 = 0;
  cf[0] = 0;
  cf[1] = v37;
  v35 = v22;
  v33 = xmmword_1969F2680;
  (*(void (**)(uint64_t, uint64_t *, CFTypeRef *, __int128 *, uint64_t))(*(_QWORD *)v21 + 392))(v21, &v35, cf, &v33, 4385);
  v24 = v35;
  v35 = 0;
  if (!v24)
    goto LABEL_51;
  v25 = *(_QWORD *)(v24 + 8);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
LABEL_38:
    MEMORY[0x19AEA534C](v25);
    goto LABEL_39;
  }
  if (__stxr(1u, (unsigned __int8 *)v25))
    goto LABEL_38;
LABEL_39:
  v27 = *(_QWORD *)(v25 + 8);
  v28 = v27 - 1;
  *(_QWORD *)(v25 + 8) = v27 - 1;
  if (v27 == 1)
  {
    v32 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    *(_QWORD *)(v25 + 24) = 0;
    v30 = v32 != 0;
  }
  else
  {
    v29 = 0;
    v30 = 1;
  }
  v31 = __ldxr((unsigned __int8 *)v25);
  if (v31 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v25))
    {
      if (!v28)
        goto LABEL_47;
      goto LABEL_51;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v25);
  if (!v28)
  {
LABEL_47:
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    if (!v30)
      WTF::fastFree((WTF *)v25, v23);
  }
LABEL_51:
  v16 = v36;
LABEL_52:
  *a1 = v16;
}

uint64_t WebCore::ImageBuffer::flushDrawingContextAsync(WebCore::ImageBuffer *this)
{
  (*(void (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 24))(this);
  return 1;
}

_QWORD *WebCore::ImageBuffer::setBackend(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  if (result[14] != *a2)
  {
    v3 = result;
    *a2 = 0;
    result = (_QWORD *)result[14];
    v3[14] = v2;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    ++*((_DWORD *)v3 + 32);
  }
  return result;
}

unint64_t WebCore::ImageBuffer::backendSize(WebCore::ImageBuffer *this)
{
  return WebCore::ImageBuffer::calculateBackendSize(*((float *)this + 4), *((float *)this + 5), *((float *)this + 6));
}

uint64_t WebCore::ImageBuffer::createNativeImageReference@<X0>(WebCore::ImageBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  *a2 = 0;
  return result;
}

uint64_t WebCore::ImageBuffer::sinkIntoNativeImage@<X0>(WebCore::ImageBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *a2 = 0;
  return result;
}

uint64_t WebCore::ImageBuffer::sinkIntoBufferForDifferentThread@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *a1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  *a2 = 0;
  return result;
}

uint64_t WebCore::ImageBuffer::sinkIntoBufferForDifferentThread@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v6;

  v2 = this;
  if (!this)
    goto LABEL_11;
  v4 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    this = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *a2 = v2;
  return this;
}

uint64_t *WebCore::ImageBuffer::filteredNativeImage@<X0>(WebCore::ImageBuffer *this@<X0>, WebCore::Filter *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *result;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  int v16;
  float *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  _QWORD *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float32x4_t v38;
  WebCore::FilterImage *v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;

  result = (uint64_t *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (!result)
  {
    *a3 = 0;
    return result;
  }
  v40 = 0;
  v41 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = off_1E340D360;
  v42 = v7;
  v38.i64[0] = 0;
  v38.i64[1] = *((_QWORD *)this + 2);
  WebCore::Filter::apply(a2, this, &v38, (WebCore::FilterResults *)&v40, &v39);
  if (v39)
  {
    if (*((_QWORD *)v39 + 11))
      v9 = WebCore::FilterImage::imageBufferFromCIImage(v39);
    else
      v9 = WebCore::FilterImage::imageBufferFromPixelBuffer(v39);
    v10 = v9;
    if (!v9)
    {
      *a3 = 0;
      goto LABEL_43;
    }
    v11 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_12:
    ++*(_QWORD *)(v11 + 8);
    v13 = __ldxr((unsigned __int8 *)v11);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_17:
        v14 = *(_QWORD *)(v10 + 8);
        if (__ldaxr((unsigned __int8 *)v14))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v14))
        {
          goto LABEL_21;
        }
        MEMORY[0x19AEA534C](v14);
LABEL_21:
        ++*(_QWORD *)(v14 + 8);
        v16 = __ldxr((unsigned __int8 *)v14);
        if (v16 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v14))
          {
LABEL_26:
            v37 = (float *)v10;
            WebCore::copyImageBufferToNativeImage(a3, &v37, 0, 0);
            v17 = v37;
            v37 = 0;
            if (!v17)
              goto LABEL_27;
            v28 = *((_QWORD *)v17 + 1);
            if (__ldaxr((unsigned __int8 *)v28))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v28))
            {
              goto LABEL_59;
            }
            MEMORY[0x19AEA534C](v28);
LABEL_59:
            v30 = *(_QWORD *)(v28 + 8);
            v31 = v30 - 1;
            *(_QWORD *)(v28 + 8) = v30 - 1;
            if (v30 == 1)
            {
              v36 = *(_QWORD *)(v28 + 16);
              v32 = *(_QWORD *)(v28 + 24);
              *(_QWORD *)(v28 + 24) = 0;
              v33 = v36 != 0;
            }
            else
            {
              v32 = 0;
              v33 = 1;
            }
            v34 = __ldxr((unsigned __int8 *)v28);
            if (v34 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v28))
              {
LABEL_66:
                if (!v31)
                {
                  if (v32)
                    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
                  if (!v33)
                    WTF::fastFree((WTF *)v28, v8);
                }
LABEL_27:
                v18 = *(_QWORD *)(v10 + 8);
                if (__ldaxr((unsigned __int8 *)v18))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v18))
                {
                  goto LABEL_31;
                }
                MEMORY[0x19AEA534C](v18);
LABEL_31:
                v20 = *(_QWORD *)(v18 + 8);
                v21 = v20 - 1;
                *(_QWORD *)(v18 + 8) = v20 - 1;
                if (v20 == 1)
                {
                  v35 = *(_QWORD *)(v18 + 16);
                  v22 = *(_QWORD *)(v18 + 24);
                  *(_QWORD *)(v18 + 24) = 0;
                  v23 = v35 != 0;
                }
                else
                {
                  v22 = 0;
                  v23 = 1;
                }
                v24 = __ldxr((unsigned __int8 *)v18);
                if (v24 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v18))
                  {
                    if (!v21)
                      goto LABEL_39;
                    goto LABEL_43;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v18);
                if (!v21)
                {
LABEL_39:
                  if (v22)
                    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
                  if (!v23)
                    WTF::fastFree((WTF *)v18, v8);
                }
LABEL_43:
                if (v39)
                {
                  if (*(_DWORD *)v39 == 1)
                  {
                    WebCore::FilterImage::~FilterImage(v39, v8);
                    WTF::fastFree(v26, v27);
                  }
                  else
                  {
                    --*(_DWORD *)v39;
                  }
                }
                goto LABEL_46;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v28);
            goto LABEL_66;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v14);
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_17;
  }
  *a3 = 0;
LABEL_46:
  v25 = v42;
  v42 = 0;
  if (v25)
    (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  if (v41)
    WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::deallocateTable(v41, v8);
  result = v40;
  if (v40)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable(v40, v8);
  return result;
}

void WebCore::copyImageBufferToNativeImage(_QWORD *a1, float **a2, int a3, int a4)
{
  float *v6;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  float *v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  _QWORD *v55;

  v6 = *a2;
  if ((*a2)[6] == 1.0 || a4 != 0)
  {
    v9 = *((_QWORD *)v6 + 1);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_13:
    v17 = *(_QWORD *)(v9 + 8);
    v18 = __ldxr((unsigned __int8 *)v9);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
LABEL_18:
        if (v17 != 1)
        {
          v23 = *(_QWORD *)*a2;
          if (a3)
            v24 = *(void (**)(void))(v23 + 56);
          else
            v24 = *(void (**)(void))(v23 + 48);
          v24();
          return;
        }
        v19 = *a2;
        *a2 = 0;
        if (v19)
        {
          (*(void (**)(float *))(*(_QWORD *)v19 + 136))(v19);
          v21 = *((_QWORD *)v19 + 1);
          if (__ldaxr((unsigned __int8 *)v21))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v21))
          {
            goto LABEL_60;
          }
          MEMORY[0x19AEA534C](v21);
LABEL_60:
          v38 = *(_QWORD *)(v21 + 8);
          v39 = v38 - 1;
          *(_QWORD *)(v21 + 8) = v38 - 1;
          if (v38 == 1)
          {
            v52 = *(_QWORD *)(v21 + 16);
            v40 = *(_QWORD *)(v21 + 24);
            *(_QWORD *)(v21 + 24) = 0;
            v41 = v52 != 0;
          }
          else
          {
            v40 = 0;
            v41 = 1;
          }
          v42 = __ldxr((unsigned __int8 *)v21);
          if (v42 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v21))
            {
              if (v39)
                return;
LABEL_68:
              if (v40)
                (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
              if (!v41)
                WTF::fastFree((WTF *)v21, v20);
              return;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v21);
          if (v39)
            return;
          goto LABEL_68;
        }
LABEL_22:
        *a1 = 0;
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_18;
  }
  *a2 = 0;
  v54 = v6;
  WebCore::copyImageBuffer((uint64_t *)&v55, (uint64_t *)&v54, 0);
  v12 = (uint64_t)v54;
  v54 = 0;
  if (v12)
  {
    v43 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v43))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v43))
    {
      goto LABEL_77;
    }
    MEMORY[0x19AEA534C](v43);
LABEL_77:
    v45 = *(_QWORD *)(v43 + 8);
    v46 = v45 - 1;
    *(_QWORD *)(v43 + 8) = v45 - 1;
    if (v45 == 1)
    {
      v53 = *(_QWORD *)(v43 + 16);
      v47 = *(_QWORD *)(v43 + 24);
      *(_QWORD *)(v43 + 24) = 0;
      v48 = v53 != 0;
    }
    else
    {
      v47 = 0;
      v48 = 1;
    }
    v49 = __ldxr((unsigned __int8 *)v43);
    if (v49 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v43))
      {
LABEL_84:
        if (!v46)
        {
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          if (!v48)
            WTF::fastFree((WTF *)v43, v11);
        }
        goto LABEL_8;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v43);
    goto LABEL_84;
  }
LABEL_8:
  v13 = v55;
  if (!v55)
    goto LABEL_22;
  v55 = 0;
  (*(void (**)(_QWORD *))(*v13 + 136))(v13);
  v15 = v13[1];
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](v15);
LABEL_27:
  v25 = *(_QWORD *)(v15 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v15 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v50 = *(_QWORD *)(v15 + 16);
    v27 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v28 = v50 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v15);
  if (v29 != 1)
  {
    __clrex();
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v26)
      goto LABEL_39;
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_34;
  if (v26)
    goto LABEL_39;
LABEL_35:
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (!v28)
    WTF::fastFree((WTF *)v15, v14);
LABEL_39:
  v30 = (uint64_t)v55;
  v55 = 0;
  if (!v30)
    return;
  v31 = *(_QWORD *)(v30 + 8);
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v31))
  {
    goto LABEL_44;
  }
  MEMORY[0x19AEA534C](v31);
LABEL_44:
  v33 = *(_QWORD *)(v31 + 8);
  v34 = v33 - 1;
  *(_QWORD *)(v31 + 8) = v33 - 1;
  if (v33 == 1)
  {
    v51 = *(_QWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 24);
    *(_QWORD *)(v31 + 24) = 0;
    v36 = v51 != 0;
  }
  else
  {
    v35 = 0;
    v36 = 1;
  }
  v37 = __ldxr((unsigned __int8 *)v31);
  if (v37 != 1)
  {
    __clrex();
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (v34)
      return;
    goto LABEL_52;
  }
  if (__stlxr(0, (unsigned __int8 *)v31))
    goto LABEL_51;
  if (v34)
    return;
LABEL_52:
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (!v36)
    WTF::fastFree((WTF *)v31, v14);
}

uint64_t WebCore::ImageBuffer::filteredNativeImage@<X0>(float *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  const void *v22;
  CFTypeRef v23;
  uint64_t v24;
  int v26;
  void *v27;
  float *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  float *v37;
  _QWORD v38[2];
  CFTypeRef cf[2];
  char v40;

  if ((*(_BYTE *)(a2 + 49) & 4) == 0)
  {
    v8 = 0;
    goto LABEL_23;
  }
  (*(void (**)(float *))(*(_QWORD *)a1 + 16))(a1);
  v38[0] = 0;
  v38[1] = *((_QWORD *)a1 + 2);
  v8 = WTF::fastMalloc((WTF *)0x20);
  v9 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_7:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_12:
  *(_QWORD *)v8 = off_1E340FF98;
  *(_QWORD *)(v8 + 8) = a2;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  WebCore::Filter::createFilterStyles((WebCore::Filter *)a2, (const WebCore::FloatRect *)v38, (WTF **)cf);
  v13 = *(unsigned int *)(v8 + 28);
  v14 = *(_QWORD *)(v8 + 16);
  if ((_DWORD)v13)
  {
    v15 = v13 << 7;
    do
    {
      if (*(_BYTE *)(v14 + 88))
      {
        v16 = *(unsigned int *)(v14 + 80);
        if ((_DWORD)v16 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v16])(&v40, v14);
        *(_DWORD *)(v14 + 80) = -1;
      }
      v14 += 128;
      v15 -= 128;
    }
    while (v15);
    v14 = *(_QWORD *)(v8 + 16);
  }
  if (v14)
  {
    *(_QWORD *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 24) = 0;
    WTF::fastFree((WTF *)v14, v12);
  }
  *(CFTypeRef *)(v8 + 16) = cf[0];
  *(CFTypeRef *)(v8 + 24) = cf[1];
  v17 = (*(uint64_t (**)(float *))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v8 + 48))(v8, v17, 1.0);
LABEL_23:
  v18 = (*(uint64_t (**)(float *))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v18);
  v19 = *(_QWORD *)a1;
  if ((*(_BYTE *)(a2 + 49) & 4) != 0)
  {
    v21 = (*(uint64_t (**)(float *))(v19 + 16))(a1);
    v22 = (const void *)*((_QWORD *)a1 + 4);
    cf[0] = v22;
    if (v22)
      CFRetain(v22);
    (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)v8 + 56))(v8, v21, cf);
    v23 = cf[0];
    cf[0] = 0;
    if (v23)
      CFRelease(v23);
    v24 = *((_QWORD *)a1 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
      goto LABEL_34;
    }
    MEMORY[0x19AEA534C](v24);
LABEL_34:
    ++*(_QWORD *)(v24 + 8);
    v26 = __ldxr((unsigned __int8 *)v24);
    if (v26 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v24))
      {
LABEL_39:
        v37 = a1;
        WebCore::copyImageBufferToNativeImage(a4, &v37, 0, 0);
        v28 = v37;
        v37 = 0;
        if (!v28)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        v29 = *((_QWORD *)v28 + 1);
        if (__ldaxr((unsigned __int8 *)v29))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v29))
        {
          goto LABEL_45;
        }
        MEMORY[0x19AEA534C](v29);
LABEL_45:
        v31 = *(_QWORD *)(v29 + 8);
        v32 = v31 - 1;
        *(_QWORD *)(v29 + 8) = v31 - 1;
        if (v31 == 1)
        {
          v36 = *(_QWORD *)(v29 + 16);
          v33 = *(_QWORD *)(v29 + 24);
          *(_QWORD *)(v29 + 24) = 0;
          v34 = v36 != 0;
        }
        else
        {
          v33 = 0;
          v34 = 1;
        }
        v35 = __ldxr((unsigned __int8 *)v29);
        if (v35 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v29))
          {
LABEL_52:
            if (!v32)
            {
              if (v33)
                (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
              if (!v34)
                WTF::fastFree((WTF *)v29, v27);
            }
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
        goto LABEL_52;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
    goto LABEL_39;
  }
  result = (*(uint64_t (**)(float *, uint64_t))(v19 + 64))(a1, a2);
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t WebCore::ImageBuffer::sinkIntoNativeImage@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *a1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
  *a2 = 0;
  return result;
}

void WebCore::ImageBuffer::convertToLuminanceMask(WebCore::ImageBuffer *this)
{
  WebCore::ImageBufferBackend *v1;

  v1 = (WebCore::ImageBufferBackend *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (v1)
    WebCore::ImageBufferBackend::convertToLuminanceMask(v1);
}

void WebCore::ImageBufferBackend::convertToLuminanceMask(WebCore::ImageBufferBackend *this)
{
  unint64_t v2;
  const void *v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  CFTypeRef v15;
  unint64_t v16;
  __int16 v17;
  CFTypeRef cf;
  _QWORD v19[2];
  uint64_t v20;

  v2 = *((_QWORD *)this + 1);
  v19[0] = 0;
  v19[1] = v2;
  v17 = 1;
  v3 = (const void *)*((_QWORD *)this + 3);
  cf = v3;
  if (v3)
    CFRetain(v3);
  v16 = v2;
  WebCore::ByteArrayPixelBuffer::tryCreate((JSC::ArrayBuffer *)&v17, &v16, &v20);
  v4 = v20;
  if (!v20)
    goto LABEL_18;
  (*(void (**)(WebCore::ImageBufferBackend *, _QWORD *, uint64_t))(*(_QWORD *)this + 64))(this, v19, v20);
  v7 = *(_DWORD *)(v4 + 48);
  if (!v7)
  {
LABEL_16:
    v20 = 0;
    (*(void (**)(WebCore::ImageBufferBackend *, uint64_t, _QWORD *, uint64_t *, _QWORD))(*(_QWORD *)this + 72))(this, v4, v19, &v20, 0);
    if (*(_DWORD *)(v4 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    else
      --*(_DWORD *)(v4 + 8);
LABEL_18:
    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
    return;
  }
  v8 = 0;
  while (1)
  {
    v9 = v8 + 3;
    if (*(_QWORD *)(v4 + 48) <= v9)
      break;
    v10 = *(_QWORD *)(v4 + 40);
    if (*(_BYTE *)(v10 + v9))
    {
      LOBYTE(v5) = *(_BYTE *)(v10 + v8);
      LOBYTE(v6) = *(_BYTE *)(v10 + v8 + 1);
      *(double *)&v11 = (double)*(unint64_t *)&v6 * 0.7154;
      v12 = *(double *)&v11 + (double)*(unint64_t *)&v5 * 0.2125;
      LOBYTE(v11) = *(_BYTE *)(v10 + v8 + 2);
      v13 = v12 + (double)v11 * 0.0721;
      v6 = (double)*(unsigned __int8 *)(v10 + v9) / 255.0;
      v5 = v6 * v13;
      if (v5 < 0.0)
      {
        LOBYTE(v14) = 0;
      }
      else if (v5 > 255.0)
      {
        LOBYTE(v14) = -1;
      }
      else
      {
        v5 = rint(v5);
        v14 = (uint64_t)v5;
      }
      *(_BYTE *)(v10 + v9) = v14;
    }
    v8 += 4;
    if (v8 >= v7)
      goto LABEL_16;
  }
  __break(0xC471u);
}

const void **WebCore::ImageBuffer::transformToColorSpace(const void **this, CFTypeRef *a2)
{
  const void **result;

  result = (const void **)(*((uint64_t (**)(const void **))*this + 20))(this);
  if (result)
  {
    (*((void (**)(const void **, CFTypeRef *))*result + 7))(result, a2);
    return WTF::RetainPtr<CGColorSpace *>::operator=(this + 4, a2);
  }
  return result;
}

uint64_t WebCore::ImageBuffer::toDataURL@<X0>(uint64_t a1@<X0>, WebCore *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  int v14;
  uint64_t result;
  void *v16;
  float *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  float *v26;

  v12 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_5:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
  v26 = (float *)a1;
  result = (uint64_t)WebCore::ImageBuffer::toDataURL(&v26, a2, a3, a4, a5, a6);
  v17 = v26;
  v26 = 0;
  if (!v17)
    return result;
  v18 = *((_QWORD *)v17 + 1);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_16;
  }
  result = MEMORY[0x19AEA534C](v18);
LABEL_16:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v25 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v25 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_22:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (!v21)
  {
    if (v22)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (!v23)
      return WTF::fastFree((WTF *)v18, v16);
  }
  return result;
}

WTF::StringImpl *WebCore::ImageBuffer::toDataURL@<X0>(float **a1@<X0>, WebCore *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  float *v8;
  void *v9;
  float *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl *result;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  WTF::StringImpl *v26;
  float *v27;
  WTF *v28;
  unsigned int v29;
  _QWORD v30[2];
  _QWORD v31[2];

  v8 = *a1;
  *a1 = 0;
  v27 = v8;
  WebCore::ImageBuffer::toData(a2, &v27, a3, a4, a5, &v28);
  v10 = v27;
  v27 = 0;
  if (!v10)
    goto LABEL_2;
  v16 = *((_QWORD *)v10 + 1);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v16);
LABEL_20:
  v18 = *(_QWORD *)(v16 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v16 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v23 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    v21 = v23 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v16);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  if (!v19)
  {
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (!v21)
      WTF::fastFree((WTF *)v16, v9);
  }
LABEL_2:
  v11 = v29;
  if (!v29)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v28;
    goto LABEL_11;
  }
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v12 += 2;
  v26 = v12;
  v13 = v28;
  v24[0] = v28;
  v24[1] = v11;
  v25 = 0;
  v31[0] = "data:";
  v31[1] = 6;
  v30[0] = ";base64,";
  v30[1] = 9;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::Base64Specification>((uint64_t)v31, (uint64_t *)&v26, (uint64_t)v30, (uint64_t)v24, a6);
  if (!*a6)
  {
    __break(0xC471u);
    return result;
  }
  result = v26;
  v26 = 0;
  if (!result)
  {
LABEL_11:
    if (!v13)
      return result;
    return (WTF::StringImpl *)WTF::fastFree(v13, v15);
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    if (!v13)
      return result;
    return (WTF::StringImpl *)WTF::fastFree(v13, v15);
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
  if (v13)
    return (WTF::StringImpl *)WTF::fastFree(v13, v15);
  return result;
}

void WebCore::ImageBuffer::toData(WebCore *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, WTF **a6@<X8>)
{
  uint64_t v12;
  int v14;
  void *v15;
  float *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  float *v25;

  v12 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_5:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
  v25 = (float *)a2;
  WebCore::ImageBuffer::toData(this, &v25, a3, a4, a5, a6);
  v16 = v25;
  v25 = 0;
  if (!v16)
    return;
  v17 = *((_QWORD *)v16 + 1);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v17);
LABEL_16:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v24 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v24 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
  if (!v20)
  {
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (!v22)
      WTF::fastFree((WTF *)v17, v15);
  }
}

void WebCore::ImageBuffer::toData(WebCore *this@<X1>, float **a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, WTF **a6@<X8>)
{
  WebCore *v12;
  CFTypeRef v13;
  const __CFString *v14;
  int v15;
  CFTypeRef v16;
  float *v17;
  void *v18;
  WTF **v19;
  WTF *v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  void *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  WTF *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  float *v65;
  uint64_t v66;
  WTF **v67;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  WTF ***v70;
  WTF *v71;
  WTF *v72;

  v12 = (WebCore *)WebCore::utiFromImageBufferMIMEType(this, (const __CFString **)&cf);
  v13 = cf;
  if (!cf)
  {
    v17 = *a2;
    *a2 = 0;
    goto LABEL_12;
  }
  v14 = WebCore::jpegUTI(v12);
  v15 = CFEqual(v13, v14);
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  v17 = *a2;
  *a2 = 0;
  if (!v15)
  {
LABEL_12:
    v65 = v17;
    WebCore::copyImageBufferToNativeImage(&v66, &v65, 1, a5);
    v27 = (WTF *)v65;
    v65 = 0;
    if (!v27)
      goto LABEL_46;
LABEL_30:
    v33 = *((_QWORD *)v27 + 1);
    if (__ldaxr((unsigned __int8 *)v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v33))
    {
      goto LABEL_34;
    }
    MEMORY[0x19AEA534C](v33);
LABEL_34:
    v35 = *(_QWORD *)(v33 + 8);
    v36 = v35 - 1;
    *(_QWORD *)(v33 + 8) = v35 - 1;
    if (v35 == 1)
    {
      v59 = *(_QWORD *)(v33 + 16);
      v37 = *(_QWORD *)(v33 + 24);
      *(_QWORD *)(v33 + 24) = 0;
      v38 = v59 != 0;
    }
    else
    {
      v37 = 0;
      v38 = 1;
    }
    v39 = __ldxr((unsigned __int8 *)v33);
    if (v39 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v33))
      {
LABEL_41:
        if (!v36)
        {
          if (v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          if (!v38)
            WTF::fastFree((WTF *)v33, v24);
        }
        goto LABEL_46;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
    goto LABEL_41;
  }
  v67 = (WTF **)v17;
  WebCore::copyImageBuffer((uint64_t *)&v71, (uint64_t *)&v67, a5);
  v19 = v67;
  v67 = 0;
  if (!v19)
    goto LABEL_6;
  v51 = v19[1];
  if (__ldaxr((unsigned __int8 *)v51))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v51))
  {
    goto LABEL_74;
  }
  MEMORY[0x19AEA534C](v51);
LABEL_74:
  v53 = *((_QWORD *)v51 + 1);
  v54 = v53 - 1;
  *((_QWORD *)v51 + 1) = v53 - 1;
  if (v53 == 1)
  {
    v61 = *((_QWORD *)v51 + 2);
    v55 = *((_QWORD *)v51 + 3);
    *((_QWORD *)v51 + 3) = 0;
    v56 = v61 != 0;
  }
  else
  {
    v55 = 0;
    v56 = 1;
  }
  v57 = __ldxr((unsigned __int8 *)v51);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_80;
  }
  if (__stlxr(0, (unsigned __int8 *)v51))
LABEL_80:
    WTF::Lock::unlockSlow(v51);
  if (!v54)
  {
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    if (!v56)
      WTF::fastFree(v51, v18);
  }
LABEL_6:
  v20 = v71;
  if (!v71)
    goto LABEL_14;
  v21 = (*(uint64_t (**)(WTF *))(*(_QWORD *)v71 + 16))(v71);
  cf = 0;
  p_cf = (CFTypeRef *)*((_QWORD *)v20 + 2);
  v66 = 0x11040000000000FFLL;
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v21 + 248))(v21, &cf, &v66, 6, 1);
  if ((v66 & 0x8000000000000) != 0)
  {
    v62 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
    do
    {
      v63 = __ldaxr(v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v62));
    if (!v64)
    {
      atomic_store(1u, v62);
      WTF::fastFree((WTF *)v62, v22);
    }
  }
  v23 = v71;
  v71 = 0;
  if (!v23)
  {
LABEL_14:
    v66 = 0;
    goto LABEL_46;
  }
  (*(void (**)(uint64_t *__return_ptr, WTF *))(*(_QWORD *)v23 + 136))(&v66, v23);
  v25 = *((_QWORD *)v23 + 1);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_17:
  v28 = *(_QWORD *)(v25 + 8);
  v29 = v28 - 1;
  *(_QWORD *)(v25 + 8) = v28 - 1;
  if (v28 == 1)
  {
    v60 = *(_QWORD *)(v25 + 16);
    v30 = *(_QWORD *)(v25 + 24);
    *(_QWORD *)(v25 + 24) = 0;
    v31 = v60 != 0;
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  v32 = __ldxr((unsigned __int8 *)v25);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
  if (!v29)
  {
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    if (!v31)
      WTF::fastFree((WTF *)v25, v24);
  }
  v27 = v71;
  v71 = 0;
  if (v27)
    goto LABEL_30;
LABEL_46:
  if (!v66)
  {
    *a6 = 0;
    a6[1] = 0;
    return;
  }
  v40 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v66 + 48) + 16))(*(_QWORD *)(v66 + 48));
  v71 = 0;
  v72 = 0;
  v67 = &v71;
  cf = WTF::ScopedLambdaRefFunctor<unsigned long ()(std::span<unsigned char const,18446744073709551615ul>),WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebCore::encodeToVector<CGImage *&>(CGImage *&,WTF::String const&,std::optional<double>)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>::implFunction;
  p_cf = &cf;
  v70 = &v67;
  if (WebCore::encode(v40, this, a3, a4, &cf))
  {
    *a6 = v71;
    a6[1] = v72;
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    v42 = v71;
    if (v71)
    {
      v71 = 0;
      LODWORD(v72) = 0;
      WTF::fastFree(v42, v41);
    }
  }
  v43 = v66;
  v66 = 0;
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 8);
    if (__ldaxr((unsigned __int8 *)v44))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v44))
    {
      goto LABEL_57;
    }
    MEMORY[0x19AEA534C](v44);
LABEL_57:
    v46 = *(_QWORD *)(v44 + 8);
    v47 = v46 - 1;
    *(_QWORD *)(v44 + 8) = v46 - 1;
    if (v46 == 1)
    {
      v58 = *(_QWORD *)(v44 + 16);
      v48 = *(_QWORD *)(v44 + 24);
      *(_QWORD *)(v44 + 24) = 0;
      v49 = v58 != 0;
    }
    else
    {
      v48 = 0;
      v49 = 1;
    }
    v50 = __ldxr((unsigned __int8 *)v44);
    if (v50 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v44))
      {
        if (v47)
          return;
LABEL_65:
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
        if (!v49)
          WTF::fastFree((WTF *)v44, v41);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
    if (v47)
      return;
    goto LABEL_65;
  }
}

uint64_t WebCore::ImageBuffer::getPixelBuffer@<X0>(float *a1@<X0>, uint64_t a2@<X1>, int32x4_t *a3@<X2>, uint64_t a4@<X3>, WebCore::PixelBuffer **a5@<X8>)
{
  uint64_t result;
  WebCore::PixelBuffer *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::PixelBuffer *v11;
  int32x4_t v12;

  v12 = *a3;
  v12 = vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(v12), a1[6]));
  v10 = v12.i64[1];
  result = (uint64_t)(*(_QWORD *(**)(WebCore::PixelBuffer **__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a4 + 24))(&v11, a4, a2, &v10);
  v8 = v11;
  if (v11)
  {
    v9 = (*(uint64_t (**)(float *))(*(_QWORD *)a1 + 160))(a1);
    if (v9)
      result = (*(uint64_t (**)(uint64_t, int32x4_t *, WebCore::PixelBuffer *))(*(_QWORD *)v9 + 64))(v9, &v12, v11);
    else
      result = WebCore::PixelBuffer::zeroRange(v11, 0, *((_QWORD *)v11 + 6));
    v8 = v11;
  }
  *a5 = v8;
  return result;
}

uint64_t WebCore::ImageBuffer::putPixelBuffer(float *a1, uint64_t a2, int32x4_t *a3, int *a4, uint64_t a5)
{
  uint64_t result;
  float v11;
  int v12;
  _DWORD v13[2];
  int32x4_t v14;

  result = (*(uint64_t (**)(float *))(*(_QWORD *)a1 + 160))(a1);
  if (result)
  {
    v14 = *a3;
    v11 = a1[6];
    v14 = vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(v14), v11));
    v12 = llroundf(v11 * (float)a4[1]);
    v13[0] = llroundf(v11 * (float)*a4);
    v13[1] = v12;
    return (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, _DWORD *, uint64_t))(*(_QWORD *)result + 72))(result, a2, &v14, v13, a5);
  }
  return result;
}

uint64_t WebCore::ImageBuffer::releaseGraphicsContext(WebCore::ImageBuffer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t WebCore::ImageBuffer::setVolatile(WebCore::ImageBuffer *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
  else
    return 1;
}

uint64_t WebCore::ImageBuffer::setVolatilityState(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 136))(result, a2);
  return result;
}

uint64_t WebCore::ImageBuffer::setVolatileAndPurgeForTesting(WebCore::ImageBuffer *this)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[2];

  (*(void (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 104))(this);
  v2 = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 16))(this);
  v4[0] = 0;
  v4[1] = *((_QWORD *)this + 2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 280))(v2, v4);
  (*(void (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 104))(this);
  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  *((_BYTE *)this + 132) = 1;
  return result;
}

uint64_t WebCore::ImageBuffer::createFlusher@<X0>(WebCore::ImageBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  *a2 = 0;
  return result;
}

uint64_t WebCore::ImageBuffer::backendGeneration(WebCore::ImageBuffer *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t WebCore::ImageBuffer::transferToNewContext(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 104))(*(_QWORD *)(a1 + 112));
}

WTF::StringImpl *WebCore::ImageBuffer::debugDescription(WebCore::ImageBuffer *this)
{
  float v2;
  float v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  char v13;
  int v14;
  __int16 v15;
  int v16;
  double v17;
  WTF::StringImpl *v18;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  v14 = 0;
  v15 = 256;
  v16 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::operator<<();
  WTF::TextStream::operator<<();
  v2 = *((float *)this + 4);
  v3 = *((float *)this + 5);
  WTF::TextStream::operator<<();
  *(double *)&v18 = v2;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v17 = v3;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v4 = *((_QWORD *)this + 14);
  if (v4)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 184))(&v18);
    WTF::TextStream::operator<<();
    v6 = v18;
    *(double *)&v18 = 0.0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::release((WTF::TextStream *)&v10);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::ImageBufferAllocator::ImageBufferAllocator(_QWORD *this)
{
  *this = off_1E340D360;
  return this;
}

{
  *this = off_1E340D360;
  return this;
}

void WebCore::ImageBufferAllocator::createImageBuffer(float *a1@<X1>, CFTypeRef *a2@<X2>, int a3@<W3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (!a3 || !WebCore::s_canUseAcceleratedBuffers)
    goto LABEL_5;
  v7 = 0;
  v8 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferIOSurfaceBackend,WebCore::ImageBuffer>(a1, a2, 1, 0, (uint64_t)&v7, a4, 1.0);
  if (!*a4)
  {
    *a4 = 0;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v8 + 4));
LABEL_5:
    v7 = 0;
    v8 = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(a1, a2, 1, 0, a4, 1.0);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v8 + 4));
}

JSC::ArrayBuffer *WebCore::ImageBufferAllocator::createPixelBuffer@<X0>(JSC::ArrayBuffer *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  return WebCore::ByteArrayPixelBuffer::tryCreate(a1, a2, a3);
}

uint64_t WebCore::ImageBufferBackend::calculateMemoryCost(uint64_t this, const WebCore::IntSize *a2)
{
  unsigned int v2;
  unint64_t v3;

  v2 = *(_DWORD *)(this + 4);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v2 * (unint64_t)a2;
    if ((v3 & 0xFFFFFFFF00000000) == 0)
      return v3;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::ImageBufferBackend::ImageBufferBackend(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;

  *(_QWORD *)a1 = off_1E340D390;
  v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (const void *)a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
    CFRetain(v5);
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 12);
  return a1;
}

void WebCore::ImageBufferBackend::~ImageBufferBackend(WebCore::ImageBufferBackend *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E340D390;
  v2 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t WebCore::ImageBufferBackend::sinkIntoNativeImage(WebCore::ImageBufferBackend *this)
{
  return (*(uint64_t (**)(WebCore::ImageBufferBackend *))(*(_QWORD *)this + 40))(this);
}

void WebCore::ImageBufferBackend::getPixelBuffer(WebCore::ImageBufferBackend *this, const WebCore::IntRect *a2, const unsigned __int8 *a3, size_t *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned __int8 v20;
  const void *v21;
  int v22;
  const void *v23;
  CFTypeRef v24;
  CFTypeRef v25;
  unint64_t v26;
  unsigned __int8 v27[8];
  CFTypeRef cf;
  int v29;
  size_t v30;
  unsigned __int8 v31[8];
  CFTypeRef v32;
  int v33;
  const unsigned __int8 *v34;

  v9 = *((_DWORD *)this + 2);
  v8 = *((_DWORD *)this + 3);
  v10 = *(_DWORD *)a2;
  v11 = *((_DWORD *)a2 + 1);
  if (*((_DWORD *)a2 + 2) + *(_DWORD *)a2 < v9)
    v9 = *((_DWORD *)a2 + 2) + *(_DWORD *)a2;
  if (*((_DWORD *)a2 + 3) + v11 < v8)
    v8 = *((_DWORD *)a2 + 3) + v11;
  v12 = (v10 & ~(v10 >> 31)) < v9 && (v11 & ~(v11 >> 31)) < v8;
  if (v12)
    v13 = v10 & ~(v10 >> 31);
  else
    v13 = 0;
  if (v12)
    v14 = v11 & ~(v11 >> 31);
  else
    v14 = 0;
  if (!v12)
  {
    v9 = 0;
    v8 = 0;
  }
  v15 = (v9 - v13) | ((unint64_t)(v8 - v14) << 32);
  v16 = -v10;
  if (v10 >= 0)
    v16 = 0;
  if (v11 < 0)
    v17 = v16 | ((unint64_t)-v11 << 32);
  else
    v17 = v16;
  if (v15 != *((_QWORD *)a2 + 1))
    WebCore::PixelBuffer::zeroRange((WebCore::PixelBuffer *)a4, 0, a4[6]);
  v18 = (*(uint64_t (**)(WebCore::ImageBufferBackend *))(*(_QWORD *)this + 192))(this);
  v31[0] = 0;
  v19 = *((unsigned __int8 *)this + 32);
  if (v19 < 4)
    v20 = v19 + 1;
  else
    v20 = 1;
  v31[1] = v20;
  v21 = (const void *)*((_QWORD *)this + 3);
  v32 = v21;
  if (v21)
    CFRetain(v21);
  v33 = v18;
  v34 = &a3[4 * v13 + v18 * v14];
  v22 = 4 * *((_DWORD *)a2 + 2);
  *(_WORD *)v27 = *((_WORD *)a4 + 8);
  v23 = (const void *)a4[3];
  cf = v23;
  if (v23)
    CFRetain(v23);
  v29 = v22;
  v30 = a4[5] + (v22 * HIDWORD(v17)) + 4 * (int)v17;
  v26 = v15;
  WebCore::convertImagePixels(v31, v27, (int *)&v26);
  v24 = cf;
  cf = 0;
  if (v24)
    CFRelease(v24);
  v25 = v32;
  v32 = 0;
  if (v25)
    CFRelease(v25);
}

void WebCore::ImageBufferBackend::putPixelBuffer(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, unsigned __int8 a5, uint64_t a6)
{
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned __int8 v38;
  const void *v39;
  CFTypeRef v40;
  CFTypeRef v41;
  uint64_t v43;
  unsigned __int8 v44[8];
  CFTypeRef cf;
  int v46;
  uint64_t v47;
  __int16 v48;
  CFTypeRef v49;
  int v50;
  uint64_t v51;

  v9 = *(_QWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 36);
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2] + *a3;
  if (v14 >= v11)
    v14 = *(_DWORD *)(a2 + 32);
  if (a3[3] + v13 < v10)
    v10 = a3[3] + v13;
  v15 = (v12 & ~(v12 >> 31)) < v14 && (v13 & ~(v13 >> 31)) < v10;
  if (v15)
    v16 = v12 & ~(v12 >> 31);
  else
    v16 = 0;
  if (v15)
    v17 = v13 & ~(v13 >> 31);
  else
    v17 = 0;
  if (v15)
    v18 = v14;
  else
    v18 = 0;
  if (!v15)
    v10 = 0;
  v19 = v18 - v16;
  v20 = v10 - v17;
  if (v12 < 0)
    v21 = *a4 + v16 - v12;
  else
    v21 = *a4 + v16;
  if (v13 < 0)
    v22 = a4[1] + v17 - v13;
  else
    v22 = a4[1] + v17;
  v23 = v21 & ~(v21 >> 31);
  v24 = v19 + v21;
  if ((int)v9 < v24)
    v24 = *(_QWORD *)(a1 + 8);
  v25 = v20 + v22;
  v26 = HIDWORD(v9);
  if ((int)v26 >= v25)
    LODWORD(v26) = v25;
  v27 = v23 < v24 && (v22 & ~(v22 >> 31)) < (int)v26;
  if (v27)
    v28 = v23;
  else
    v28 = 0;
  if (v27)
    v29 = v22 & ~(v22 >> 31);
  else
    v29 = 0;
  if (v27)
    v30 = v24;
  else
    v30 = 0;
  if (!v27)
    LODWORD(v26) = 0;
  v31 = (v30 - v28);
  v32 = (v26 - v29);
  v33 = 4 * v11;
  v48 = *(_WORD *)(a2 + 16);
  v34 = *(const void **)(a2 + 24);
  v49 = v34;
  if (v34)
    CFRetain(v34);
  v35 = v31 | (v32 << 32);
  v50 = v33;
  v51 = *(_QWORD *)(a2 + 40) + (4 * v16) + (v33 * v17);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v44[0] = a5;
  v37 = *(unsigned __int8 *)(a1 + 32);
  if (v37 < 4)
    v38 = v37 + 1;
  else
    v38 = 1;
  v44[1] = v38;
  v39 = *(const void **)(a1 + 24);
  cf = v39;
  if (v39)
    CFRetain(v39);
  v46 = v36;
  v47 = a6 + (4 * v28) + (v36 * v29);
  v43 = v35;
  WebCore::convertImagePixels((unsigned __int8 *)&v48, v44, (int *)&v43);
  v40 = cf;
  cf = 0;
  if (v40)
    CFRelease(v40);
  v41 = v49;
  v49 = 0;
  if (v41)
    CFRelease(v41);
}

double WebCore::ImageBufferBackend::calculateBaseTransform@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double result;

  v2 = (double)-*(_DWORD *)(a1 + 4);
  *(double *)(a2 + 32) = v2 * -0.0 + 0.0;
  *(double *)(a2 + 40) = 0.0 - v2;
  v3 = *(float *)(a1 + 8);
  *(double *)a2 = v3;
  *(float64x2_t *)(a2 + 8) = vmulq_n_f64((float64x2_t)xmmword_1968DD9F0, v3);
  result = -v3;
  *(double *)(a2 + 24) = result;
  return result;
}

uint64_t WebCore::ImageBufferContextSwitcher::ImageBufferContextSwitcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;
  __int16 v11;
  double v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  WebCore::GraphicsContext *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20[44];

  v20[43] = *MEMORY[0x1E0C80C00];
  v7 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = off_1E340D468;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 40) = a6;
  if (*(float *)(a3 + 8) > 0.0 && *(float *)(a3 + 12) > 0.0)
  {
    if (v7)
    {
      v19 = *(_QWORD *)(v7 + 52);
      v11 = WebCore::Filter::renderingMode((WebCore::Filter *)v7);
      WebCore::GraphicsContext::createScaledImageBuffer((float32x4_t *)(a1 + 24), a2, (float *)&v19, a4, v11 | 0x100, 0, v20, v12);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 344))(v20, a2, a1 + 24, a4, 0);
    }
    WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=((uint64_t *)(a1 + 16), v20);
    v14 = v20[0];
    v20[0] = 0;
    if (v14)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v14 + 8), v13);
    if (*v8)
    {
      v15 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
      WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v20, v15);
      v16 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
      WebCore::GraphicsContext::mergeAllChanges(v16, (const WebCore::GraphicsContextState *)v20);
      WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v20, v17);
    }
    else
    {
      WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref((uint64_t *)(a1 + 8), v13);
    }
  }
  return a1;
}

uint64_t *WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v13;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (!v4)
    return a1;
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_4;
LABEL_5:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v13 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v13 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_9:
  if (!v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

WebCore::GraphicsContext *WebCore::ImageBufferContextSwitcher::drawingContext(WebCore::ImageBufferContextSwitcher *this, WebCore::GraphicsContext *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    return (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  else
    return a2;
}

uint64_t WebCore::ImageBufferContextSwitcher::beginClipAndDrawSourceImage(WebCore::ImageBufferContextSwitcher *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3, const WebCore::FloatRect *a4)
{
  WebCore::GraphicsContext *v5;
  uint64_t v6;

  v5 = a2;
  v6 = *((_QWORD *)this + 2);
  if (v6)
    v5 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t, WebCore::GraphicsContext *, const WebCore::FloatRect *, const WebCore::FloatRect *))(*(_QWORD *)v6 + 16))(v6, a2, a3, a4);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t, const WebCore::FloatRect *, const WebCore::FloatRect *))(*(_QWORD *)v5 + 96))(v5, 1, a3, a4);
  (*(void (**)(WebCore::GraphicsContext *, const WebCore::FloatRect *))(*(_QWORD *)v5 + 280))(v5, a3);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, const WebCore::FloatRect *))(*(_QWORD *)v5 + 456))(v5, a3);
}

uint64_t *WebCore::ImageBufferContextSwitcher::endClipAndDrawSourceImage(WebCore::ImageBufferContextSwitcher *this, WebCore::GraphicsContext *a2, const WebCore::DestinationColorSpace *a3)
{
  uint64_t v5;
  WebCore::GraphicsContext *v6;
  const WebCore::DestinationColorSpace *v7;

  v5 = *((_QWORD *)this + 2);
  v6 = a2;
  if (v5)
    v6 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t, const WebCore::DestinationColorSpace *))(*(_QWORD *)v6 + 104))(v6, 1, a3);
  return WebCore::ImageBufferContextSwitcher::endDrawSourceImage(this, a2, v7);
}

uint64_t *WebCore::ImageBufferContextSwitcher::endDrawSourceImage(WebCore::ImageBufferContextSwitcher *this, WebCore::GraphicsContext *a2, const WebCore::DestinationColorSpace *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t **v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t *result;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;

  if (!*((_QWORD *)this + 1))
    return (uint64_t *)WebCore::GraphicsContext::drawImageBuffer((uint64_t)a2, *((_QWORD *)this + 2));
  v16 = 0;
  v17 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v5 = off_1E340D360;
  v18 = v5;
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v8 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v8);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v8))
    goto LABEL_4;
LABEL_5:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_10:
  if (*((_QWORD *)this + 5))
    v11 = (uint64_t **)*((_QWORD *)this + 5);
  else
    v11 = &v16;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t, char *, uint64_t, uint64_t **))(*(_QWORD *)a2 + 400))(a2, v7, (char *)this + 24, v6, v11);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v12);
  v14 = v18;
  v18 = 0;
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  if (v17)
    WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::deallocateTable(v17, v13);
  result = v16;
  if (v16)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable(v16, v13);
  return result;
}

void WebCore::ImageDecoder::resetFactories(WebCore::ImageDecoder *this, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char **v5;
  char *v6;

  {
    WebCore::installedFactories(void)::factories = 0;
    *(_QWORD *)&dword_1EE2F8B98 = 0;
  }
  v2 = atomic_load(&WebCore::installedFactories(void)::registerDefaults);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WebCore::installedFactories(void)::registerDefaults, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedFactories(void)::$_0 &&>>);
  }
  WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this, a2);
  {
    WebCore::installedFactories(void)::factories = 0;
    *(_QWORD *)&dword_1EE2F8B98 = 0;
  }
  v3 = atomic_load(&WebCore::installedFactories(void)::registerDefaults);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WebCore::installedFactories(void)::registerDefaults, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedFactories(void)::$_0 &&>>);
  }
  WebCore::platformRegisterFactories();
}

uint64_t WebCore::ImageDecoder::create@<X0>(WTF::StringImpl *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  WebCore::FragmentedSharedBuffer *v8;
  WTF::StringImpl *v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;

  v8 = a1;
  v10 = *a2;
  if (*a2 && *((_DWORD *)v10 + 1))
  {
    *(_DWORD *)v10 += 2;
    v17 = v10;
    if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v17) & 1) != 0)
    {
      v16 = 1;
    }
    {
      v16 = WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes
         && WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v17) != 0;
    }
    else
    {
      v16 = 0;
      WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
    }
    a1 = v17;
    v17 = 0;
    if (a1)
    {
      if (*(_DWORD *)a1 == 2)
        a1 = (WTF::StringImpl *)WTF::StringImpl::destroy(a1, v15);
      else
        *(_DWORD *)a1 -= 2;
    }
    if (v16)
      goto LABEL_3;
  }
  WebCore::installedFactories(a1);
  if (!dword_1EE2F8B9C)
  {
LABEL_3:
    result = WebCore::ScalableImageDecoder::create((uint64_t)v8, &v17);
    if (v17)
    {
      *a5 = v17;
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x28);
      result = WebCore::ImageDecoderCG::ImageDecoderCG(v12, v8);
      *a5 = result;
    }
  }
  else
  {
    v13 = (_QWORD *)(WebCore::installedFactories(void)::factories + 16);
    v14 = 24 * dword_1EE2F8B9C;
    while (((*(uint64_t (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*(v13 - 1) + 16))(*(v13 - 1), a2) & 1) == 0)
    {
      v13 += 3;
      v14 -= 24;
      if (!v14)
        goto LABEL_3;
    }
    return (*(uint64_t (**)(_QWORD, WebCore::FragmentedSharedBuffer *, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)*v13 + 16))(*v13, v8, a2, a3, a4);
  }
  return result;
}

uint64_t WebCore::ImageDecoder::ImageDecoder(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E340D4B8;
  return this;
}

uint64_t WebCore::ImageDecoder::fetchFrameMetaDataAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  void *v15;
  char v16;
  int v17;

  v7 = a3;
  if (!*(_BYTE *)(a4 + 12))
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3);
LABEL_6:
    *(_QWORD *)(a5 + 4) = v13;
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(a5 + 16);
  if (!v10)
  {
    v13 = (*(uint64_t (**)(_QWORD))(*MEMORY[0x30] + 24))(MEMORY[0x30]);
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_9:
  ++*(_QWORD *)(v11 + 8);
  v14 = __ldxr((unsigned __int8 *)v11);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_14:
  *(_QWORD *)(a5 + 4) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 48) + 24))(*(_QWORD *)(v10 + 48));
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v10 + 8), v15);
LABEL_15:
  *(_QWORD *)(a5 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2);
  *(_BYTE *)(a5 + 56) = v16;
  *(_DWORD *)(a5 + 24) = v7;
  *(_OWORD *)(a5 + 28) = *(_OWORD *)a4;
  *(_BYTE *)(a5 + 72) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, a2);
  *(_BYTE *)(a5 + 44) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2))
    v17 = 2;
  else
    v17 = 1;
  *(_DWORD *)a5 = v17;
  return 1;
}

uint64_t WebCore::ImageFrame::clearImage(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  WebCore::CGSubimageCacheWithTimer *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WebCore::CGSubimageCacheWithTimer *v11;

  v1 = *(_QWORD *)(this + 16);
  if (!v1)
    return 0;
  v2 = this;
  v4 = *(_DWORD *)(this + 4);
  v3 = *(_DWORD *)(this + 8);
  if (v4 < 0)
    v4 = -v4;
  if (v3 < 0)
    v3 = -v3;
  v5 = v3 * (unint64_t)v4;
  if ((v5 & 0xFFFFFFFF00000000) == 0)
  {
    v6 = (WebCore::CGSubimageCacheWithTimer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 16))(*(_QWORD *)(v1 + 48));
    if (WebCore::CGSubimageCacheWithTimer::s_cache)
    {
      v10 = *(void **)v6;
      v11 = (WebCore::CGSubimageCacheWithTimer *)WebCore::CGSubimageCacheWithTimer::subimageCache(v6);
      WebCore::CGSubimageCacheWithTimer::clearImageAndSubimages(v11, v10);
    }
    v8 = (4 * v5);
    v9 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v9)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v9 + 8), v7);
    *(_BYTE *)(v2 + 28) = 1;
    *(_BYTE *)(v2 + 32) = 0;
    *(_BYTE *)(v2 + 40) = 0;
    return v8;
  }
  __break(0xC471u);
  return this;
}

void WebCore::ImageFrame::~ImageFrame(WebCore::ImageFrame *this)
{
  WebCore::NativeImage *v2;
  int v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v2 = (WebCore::NativeImage *)*((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_12;
  v4 = *((_DWORD *)this + 1);
  v3 = *((_DWORD *)this + 2);
  if (v4 < 0)
    v4 = -v4;
  if (v3 < 0)
    v3 = -v3;
  if (((v3 * (unint64_t)v4) & 0xFFFFFFFF00000000) != 0)
  {
    __break(0xC471u);
    return;
  }
  WebCore::NativeImage::clearSubimages(v2);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v6)
  {
    *((_BYTE *)this + 28) = 1;
    *((_BYTE *)this + 32) = 0;
    *((_BYTE *)this + 40) = 0;
LABEL_12:
    *((_QWORD *)this + 2) = 0;
    return;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v5);
  v8 = *((_QWORD *)this + 2);
  *((_BYTE *)this + 28) = 1;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 2) = 0;
  if (v8)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v8 + 8), v7);
}

uint64_t *WebCore::ImageFrame::defaultFrame(WebCore::ImageFrame *this)
{
  {
    WebCore::ImageFrame::defaultFrame(void)::sharedInstance = 0;
    dword_1EE2F8B40 = 0;
    qword_1EE2F8B48 = 0;
    dword_1EE2F8B50 = 0;
    byte_1EE2F8B54 = 0;
    byte_1EE2F8B58 = 0;
    byte_1EE2F8B60 = 0;
    byte_1EE2F8B64 = 1;
    byte_1EE2F8B68 = 0;
    byte_1EE2F8B70 = 0;
    qword_1EE2F8B78 = 0;
    byte_1EE2F8B80 = 1;
  }
  return &WebCore::ImageFrame::defaultFrame(void)::sharedInstance;
}

uint64_t WebCore::ImageFrame::decodingStatus(WebCore::ImageFrame *this)
{
  return *(unsigned int *)this;
}

uint64_t WebCore::ImageFrame::hasDecodedNativeImageCompatibleWithOptions(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;

  if (*(_DWORD *)result != 2)
    return 0;
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return v3;
  if (*(_BYTE *)(a2 + 4) && *(_DWORD *)a2 < *(_DWORD *)(result + 24))
    return 0;
  v3 = 0;
  if (!*(_BYTE *)(result + 28) || !*(_BYTE *)a3)
    return v3;
  if (!*(_BYTE *)(result + 40))
    return 1;
  v3 = *(unsigned __int8 *)(a3 + 12);
  if (!*(_BYTE *)(a3 + 12))
    return v3;
  if (*(_BYTE *)(result + 40) && *(_BYTE *)(a3 + 12))
  {
    v4 = *(_DWORD *)(a3 + 8);
    v5 = *(_DWORD *)(result + 36);
    if (*(_DWORD *)(result + 32) > v5)
      v5 = *(_DWORD *)(result + 32);
    if (*(_DWORD *)(a3 + 4) > v4)
      v4 = *(_DWORD *)(a3 + 4);
    return v5 >= v4;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::ImageBuffer::ensureBackendCreated(WebCore::ImageBuffer *this)
{
  return (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
}

uint64_t WebCore::ImageBufferBackend::surface(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::ImageBufferBackend::isInUse(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::ImageBufferBackend::setVolatile(WebCore::ImageBufferBackend *this)
{
  return 1;
}

uint64_t WebCore::ImageBufferBackend::setNonVolatile(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::ImageBufferBackend::volatilityState(WebCore::ImageBufferBackend *this)
{
  return 0;
}

void WebCore::ImageBufferBackend::createFlusher(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ImageBufferBackend::toBackendSharing(WebCore::ImageBufferBackend *this)
{
  return 0;
}

void WebCore::ImageBufferBackend::layerContentsDisplayDelegate(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ImageBufferContextSwitcher::~ImageBufferContextSwitcher(WebCore::ImageBufferContextSwitcher *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E340C8F0;
  *((_QWORD *)this + 1) = 0;
  if (v11)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v11 + 8), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E340C8F0;
  *((_QWORD *)this + 1) = 0;
  if (v11)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v11 + 8), a2);
  WTF::fastFree(this, a2);
}

BOOL WebCore::ImageBufferContextSwitcher::hasSourceImage(WebCore::ImageBufferContextSwitcher *this)
{
  uint64_t (*v1)();

  v1 = WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 2))
    v1 = 0;
  return v1 != 0;
}

void WebCore::ImageDecoder::uti(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::ImageDecoder::accessibilityDescription(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::DefaultSerializedImageBuffer::~DefaultSerializedImageBuffer(WebCore::DefaultSerializedImageBuffer *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E340D5C8;
  *((_QWORD *)this + 1) = 0;
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = v5 - 1;
  *(_QWORD *)(v3 + 8) = v5 - 1;
  if (v5 == 1)
  {
    v10 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v8 = v10 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v6)
      return;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v6)
    return;
LABEL_14:
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (!v8)
    WTF::fastFree((WTF *)v3, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E340D5C8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  WTF::fastFree(this, a2);
}

uint64_t WebCore::DefaultSerializedImageBuffer::memoryCost(WebCore::DefaultSerializedImageBuffer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 104);
}

uint64_t WebCore::SerializedImageBuffer::isRemoteSerializedImageBufferProxy(WebCore::SerializedImageBuffer *this)
{
  return 0;
}

uint64_t WebCore::DefaultSerializedImageBuffer::sinkIntoImageBuffer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(this + 8);
  if (!v3)
    goto LABEL_11;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    this = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *a2 = v3;
  return this;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashMap<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTraits<WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>::deallocateTable(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != -1)
        a1 = (_QWORD *)WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>::~KeyValuePair((uint64_t)a1, a2);
      a1 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t WTF::KeyValuePair<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::HashSet<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTableTraits>>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t *v3;
  WebCore::FilterImage *v4;
  WTF *v6;
  void *v7;

  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
    WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable(v3, a2);
  v4 = *(WebCore::FilterImage **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::FilterImage::~FilterImage(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    for (i = a1; ; ++i)
    {
      v5 = *i;
      if (*i != -1)
      {
        *i = 0;
        if (v5)
          break;
      }
LABEL_13:
      if (!--v3)
        return WTF::fastFree((WTF *)(a1 - 2), a2);
    }
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
LABEL_8:
      v8 = *(_QWORD *)(v6 + 8);
      v9 = v8 - 1;
      *(_QWORD *)(v6 + 8) = v8 - 1;
      if (v8 == 1)
      {
        v14 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        v11 = v14 != 0;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      v12 = __ldxr((unsigned __int8 *)v6);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
          goto LABEL_12;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_12:
      if (!v9)
      {
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, a2);
      }
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v6);
    goto LABEL_8;
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashMap<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>,WTF::DefaultHash<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>,WTF::HashTraits<WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != -1)
        a1 = WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>::~KeyValuePair(a1, a2);
      a1 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t *WTF::KeyValuePair<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,WTF::Ref<WebCore::FilterImage,WTF::RawPtrTraits<WebCore::FilterImage>,WTF::DefaultRefDerefTraits<WebCore::FilterImage>>>::~KeyValuePair(uint64_t *a1, void *a2)
{
  WebCore::FilterImage *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  WTF *v13;
  void *v14;
  uint64_t v15;

  v3 = (WebCore::FilterImage *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::FilterImage::~FilterImage(v3, a2);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_7;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_7:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v15 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v15 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          return a1;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      return a1;
LABEL_15:
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

void WebCore::createInProcessImageDecoderAVFObjC(const WTF::String *a1@<X0>, const WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t v7;

  WebCore::ProcessIdentity::ProcessIdentity(&v6);
  WebCore::ImageDecoderAVFObjC::create(a1, a2, (const WTF::MachSendRight *)&v6, &v7);
  *a3 = v7;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v6);
}

uint64_t WTF::Detail::CallableWrapper<BOOL (*)(WebCore::ImageDecoder::MediaType),BOOL,WebCore::ImageDecoder::MediaType>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::RefPtr<WebCore::ImageDecoder,WTF::RawPtrTraits<WebCore::ImageDecoder>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoder>> (*)(WebCore::FragmentedSharedBuffer &,WTF::String const&,WebCore::AlphaOption,WebCore::GammaAndColorProfileOption),WTF::RefPtr<WebCore::ImageDecoder,WTF::RawPtrTraits<WebCore::ImageDecoder>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoder>>,WebCore::FragmentedSharedBuffer &,WTF::String const&,WebCore::AlphaOption,WebCore::GammaAndColorProfileOption>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5);
}

uint64_t WebCore::ImageFrameAnimator::create@<X0>(WebCore::ImageFrameAnimator *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t result;
  unsigned int v7;

  v5 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v5 = this;
  *(_DWORD *)(v5 + 8) = WebCore::BitmapImageDescriptor::frameCount((WebCore::ImageFrameAnimator *)((char *)this + 40));
  v7 = 0;
  *(_DWORD *)(v5 + 12) = WebCore::BitmapImageDescriptor::imageMetadata<int>((uint64_t)this + 40, (unsigned int *)this + 22, &v7, 0x40u, (uint64_t (*)(_QWORD *))0x48, 1);
  *(_QWORD *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 28) = 2;
  *(_BYTE *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 40) = 0;
  result = WebCore::BitmapImageDescriptor::primaryFrameIndex((WebCore::ImageFrameAnimator *)((char *)this + 40));
  *(_QWORD *)(v5 + 44) = result;
  *(_QWORD *)(v5 + 56) = 0;
  *a2 = v5;
  return result;
}

uint64_t WebCore::ImageFrameAnimator::timerFired(WebCore::ImageFrameAnimator *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  WebCore::BitmapImageSource *v6;
  uint64_t v7;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(*(_QWORD *)this + 184);
  if (!v3
    || (result = WebCore::ImageFrameWorkQueue::isPendingDecodingAtIndex(v3, (*((_DWORD *)this + 11) + 1) % *((_DWORD *)this + 2), *((_DWORD *)this + 6), (uint64_t)this + 28), (result & 1) == 0))
  {
    v4 = *((_DWORD *)this + 2);
    v5 = (*((_DWORD *)this + 11) + 1) % v4;
    *((_DWORD *)this + 11) = v5;
    if ((_DWORD)v5 == v4 - 1)
      ++*((_DWORD *)this + 12);
    v6 = *(WebCore::BitmapImageSource **)this;
    if (*(_DWORD *)(*(_QWORD *)this + 224) >> 21 >= 0xFu)
    {
      WebCore::BitmapImageSource::destroyDecodedData(*(WebCore::BitmapImageSource **)this, 0);
      v6 = *(WebCore::BitmapImageSource **)this;
      v5 = *((unsigned int *)this + 11);
    }
    v7 = WebCore::BitmapImageSource::frameDecodingStatusAtIndex(v6, v5);
    return WebCore::BitmapImageSource::imageFrameAtIndexAvailable((uint64_t)v6, v5, 1, v7);
  }
  return result;
}

uint64_t WebCore::ImageFrameAnimator::imageFrameDecodeAtIndexHasFinished(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  WebCore::BitmapImageSource *v9;

  if (!a3)
    return 0;
  v5 = *(_DWORD *)(a1 + 8);
  if ((*(_DWORD *)(a1 + 44) + 1) % v5 != (_DWORD)a2 || *(double *)(a1 + 56) == 0.0)
    return 0;
  if (*(_QWORD *)(a1 + 16))
    return 1;
  *(_DWORD *)(a1 + 44) = a2;
  if (v5 - 1 == (_DWORD)a2)
    ++*(_DWORD *)(a1 + 48);
  v9 = *(WebCore::BitmapImageSource **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 224) >> 21 >= 0xFu)
  {
    WebCore::BitmapImageSource::destroyDecodedData(v9, 0);
    v9 = *(WebCore::BitmapImageSource **)a1;
    a2 = *(unsigned int *)(a1 + 44);
  }
  v6 = 1;
  WebCore::BitmapImageSource::imageFrameAtIndexAvailable((uint64_t)v9, a2, 1, a4);
  return v6;
}

uint64_t WebCore::ImageFrameAnimator::startAnimation(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  unint64_t StatusReg;
  unsigned int *v16;
  double v17;
  unsigned int v18;
  _QWORD *v19;
  WTF::MonotonicTime *v20;
  double v21;
  uint64_t v23;
  _DWORD *v24;
  int v25;

  if (*(_QWORD *)(a1 + 16))
    return 1;
  v5 = a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 12);
    if (v7 != -1 && *(_DWORD *)(v6 + 48) >= v7)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v8)
    goto LABEL_7;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_7;
  v23 = *(_QWORD *)(v9 + 32);
  if (!v23)
    goto LABEL_7;
  v24 = *(_DWORD **)(v23 + 8);
  if (!v24)
    goto LABEL_7;
  ++v24[2];
  a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 104))(v24);
  if (v24[2] == 1)
  {
    v25 = a1;
    a1 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    if (!v25)
      return 0;
    goto LABEL_7;
  }
  --v24[2];
  if ((a1 & 1) != 0)
  {
LABEL_7:
    *(_DWORD *)(v5 + 24) = a2;
    *(_OWORD *)(v5 + 28) = *a3;
    if (*(_BYTE *)a3 == 2)
      a1 = WebCore::BitmapImageSource::requestNativeImageAtIndexIfNeeded(*(_QWORD *)v5, (*(_DWORD *)(v5 + 44) + 1) % *(_DWORD *)(v5 + 8), a2, 1, a3);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    v11 = v10;
    if (*(double *)(v5 + 56) == 0.0)
      *(double *)(v5 + 56) = v10;
    v12 = WebCore::BitmapImageSource::frameDurationAtIndex(*(WebCore::BitmapImageSource **)v5, *(_DWORD *)(v5 + 44))
        + *(double *)(v5 + 56);
    if (v11 >= v12)
      v13 = v11;
    else
      v13 = v12;
    *(double *)(v5 + 56) = v13;
    v14 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v14 = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    v16 = *(unsigned int **)(StatusReg + 736);
    if (!v16)
      v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    v17 = v13 - v11;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)v14 = off_1E31F7378;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v19 = off_1E340D670;
    v19[1] = WebCore::ImageFrameAnimator::timerFired;
    v19[2] = 0;
    v19[3] = v5;
    *(_QWORD *)(v14 + 48) = v19;
    v20 = *(WTF::MonotonicTime **)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v14;
    if (v20)
    {
      v20 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v20 + 8))(v20);
      v14 = *(_QWORD *)(v5 + 16);
    }
    *(_QWORD *)(v14 + 24) = 0;
    WTF::MonotonicTime::now(v20);
    WebCore::TimerBase::setNextFireTime(v14, v17 + v21);
    return 1;
  }
  return 0;
}

uint64_t WebCore::ImageFrameAnimator::stopAnimation(WebCore::ImageFrameAnimator *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WebCore::BitmapImageSource *WebCore::ImageFrameAnimator::resetAnimation(WebCore::ImageFrameAnimator *this)
{
  uint64_t v2;
  WebCore::BitmapImageSource *result;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_DWORD *)this + 11) = WebCore::BitmapImageDescriptor::primaryFrameIndex((WebCore::BitmapImageDescriptor *)(*(_QWORD *)this + 40));
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = 0;
  result = *(WebCore::BitmapImageSource **)this;
  if (*(_DWORD *)(*(_QWORD *)this + 224) >> 21 >= 0xFu)
    return (WebCore::BitmapImageSource *)WebCore::BitmapImageSource::destroyDecodedData(result, 1);
  return result;
}

WebCore::ImageFrameWorkQueue *WebCore::ImageFrameWorkQueue::create@<X0>(WebCore::ImageFrameWorkQueue *this@<X0>, WebCore::ImageFrameWorkQueue **a2@<X8>)
{
  WebCore::ImageFrameWorkQueue *v5;
  WebCore::ImageFrameWorkQueue *result;

  v5 = (WebCore::ImageFrameWorkQueue *)WTF::fastMalloc((WTF *)0x130);
  result = WebCore::ImageFrameWorkQueue::ImageFrameWorkQueue(v5, this);
  *a2 = result;
  return result;
}

WebCore::ImageFrameWorkQueue *WebCore::ImageFrameWorkQueue::ImageFrameWorkQueue(WebCore::ImageFrameWorkQueue *this, WebCore::BitmapImageSource *a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;

  *(_DWORD *)this = 1;
  v4 = *((_QWORD *)a2 + 1);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 8;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  return this;
}

unsigned int *WebCore::ImageFrameWorkQueue::requestQueue(WebCore::ImageFrameWorkQueue *this)
{
  unsigned int *result;
  unsigned int **v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;

  v2 = (unsigned int **)((char *)this + 24);
  result = (unsigned int *)*((_QWORD *)this + 3);
  if (!result)
  {
    v3 = WTF::fastMalloc((WTF *)0x108);
    *(_DWORD *)v3 = 1;
    *(_WORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 6) = 1;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = v3 + 40;
    *(_QWORD *)(v3 + 32) = 8;
    v8 = (unsigned int *)v3;
    WTF::RefPtr<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,WTF::RawPtrTraits<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>,WTF::DefaultRefDerefTraits<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>>::operator=<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>(v2, &v8);
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        v9 = v5;
        WTF::ThreadSafeRefCounted<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v9, v4);
      }
    }
    return *v2;
  }
  return result;
}

unsigned int **WTF::RefPtr<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,WTF::RawPtrTraits<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>,WTF::DefaultRefDerefTraits<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>>::operator=<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = v4;
      WTF::ThreadSafeRefCounted<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v8, a2);
    }
  }
  return a1;
}

uint64_t *WebCore::ImageFrameWorkQueue::start(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::BitmapImageSource *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  if (!this[36])
  {
    v1 = (uint64_t)this;
    v2 = this[1];
    if (v2)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::MessagePort>((uint64_t)&v27, v2, this[2]);
      v3 = (WebCore::BitmapImageSource *)v27;
    }
    else
    {
      v3 = 0;
    }
    v30 = (uint64_t)v3;
    v4 = WebCore::BitmapImageSource::decoder(v3, 0);
    if (v4)
    {
      v6 = (unsigned int *)v4;
      v7 = (unsigned int *)(v4 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v30, v5);
      WTF::WorkQueue::create();
      v9 = v27;
      *(_QWORD *)&v27 = 0;
      v10 = *(_QWORD *)(v1 + 288);
      *(_QWORD *)(v1 + 288) = v9;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
        v11 = v27;
        *(_QWORD *)&v27 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      }
      v12 = *(_QWORD *)(v1 + 288);
      do
        v13 = __ldaxr((unsigned int *)v1);
      while (__stlxr(v13 + 1, (unsigned int *)v1));
      *(_QWORD *)&v27 = v1;
      v14 = *(_QWORD *)(v1 + 288);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
      *((_QWORD *)&v27 + 1) = v14;
      v15 = *(_QWORD *)(v1 + 8);
      if (v15)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::MessagePort>((uint64_t)&v30, v15, *(_QWORD *)(v1 + 16));
        v16 = v30;
      }
      else
      {
        v16 = 0;
      }
      *(_QWORD *)&v28 = v16;
      do
        v17 = __ldaxr(v7);
      while (__stlxr(v17 + 1, v7));
      *((_QWORD *)&v28 + 1) = v6;
      v18 = WebCore::ImageFrameWorkQueue::requestQueue((WebCore::ImageFrameWorkQueue *)v1);
      v19 = v18;
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 + 1, v18));
      v21 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v21 = off_1E340D698;
      *(_OWORD *)(v21 + 8) = v27;
      *(_QWORD *)(v21 + 24) = v28;
      v22 = *((_QWORD *)&v28 + 1);
      v27 = 0u;
      v28 = 0u;
      *(_QWORD *)(v21 + 32) = v22;
      *(_QWORD *)(v21 + 40) = v19;
      v29 = 0;
      v30 = v21;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 32))(v12, &v30);
      v24 = v30;
      v30 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      this = (uint64_t *)WebCore::ImageFrameWorkQueue::start(void)::$_0::~$_0((uint64_t)&v27, v23);
      do
      {
        v25 = __ldaxr(v7);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v7));
      if (!v26)
      {
        atomic_store(1u, v6 + 2);
        return (uint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    else
    {
      return WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v30, v5);
    }
  }
  return this;
}

uint64_t WebCore::ImageFrameWorkQueue::start(void)::$_0::~$_0(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  WebCore::ImageFrameWorkQueue *v24;

  v3 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v24 = (WebCore::ImageFrameWorkQueue *)v3;
      WTF::ThreadSafeRefCounted<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v24, a2);
    }
  }
  v6 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_15:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v23 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v23 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v14)
          goto LABEL_27;
LABEL_23:
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (!v16)
          WTF::fastFree((WTF *)v11, a2);
        goto LABEL_27;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      goto LABEL_27;
    goto LABEL_23;
  }
LABEL_27:
  v18 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 56))(v18);
  v19 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      v24 = (WebCore::ImageFrameWorkQueue *)v19;
      WTF::ThreadSafeRefCounted<WebCore::ImageFrameWorkQueue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v24, a2);
    }
  }
  return a1;
}

uint64_t *WebCore::ImageFrameWorkQueue::dispatch(WebCore::ImageFrameWorkQueue *a1, __int128 *a2)
{
  unsigned __int8 *v4;

  v4 = (unsigned __int8 *)WebCore::ImageFrameWorkQueue::requestQueue(a1);
  WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>::enqueue(v4, a2);
  WTF::Deque<WebCore::ImageFrameWorkQueue::Request,8ul>::append<WebCore::ImageFrameWorkQueue::Request const&>((uint64_t)a1 + 32, a2);
  return WebCore::ImageFrameWorkQueue::start((uint64_t *)a1);
}

uint64_t WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>::enqueue(unsigned __int8 *a1, __int128 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  uint64_t result;
  const void *v8;
  unsigned __int8 v9;
  int v10;
  unsigned __int8 *v11;

  v4 = a1 + 4;
  if (__ldaxr(a1 + 4))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](a1 + 4);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = a1 + 5;
  v11 = a1;
  result = WTF::Condition::wait<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>::enqueue(WebCore::ImageFrameWorkQueue::Request const&)::{lambda(void)#1}>((uint64_t)(a1 + 5), v4, (uint64_t *)&v11);
  if (a1[6])
  {
    result = WTF::Deque<WebCore::ImageFrameWorkQueue::Request,8ul>::append<WebCore::ImageFrameWorkQueue::Request const&>((uint64_t)(a1 + 8), a2);
    v9 = atomic_load(v6);
    if ((v9 & 1) != 0)
    {
      atomic_store(0, v6);
      result = WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(a1 + 5), v8);
    }
  }
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WTF::Deque<WebCore::ImageFrameWorkQueue::Request,8ul>::append<WebCore::ImageFrameWorkQueue::Request const&>(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_5;
  }
  else
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_5;
    }
    else if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_5;
    }
  }
  result = WTF::Deque<WebCore::ImageFrameWorkQueue::Request,8ul>::expandCapacity(result);
  v4 = *(_QWORD *)(v3 + 8);
LABEL_5:
  v6 = (_OWORD *)(*(_QWORD *)(v3 + 16) + 28 * v4);
  v7 = *a2;
  *(_OWORD *)((char *)v6 + 12) = *(__int128 *)((char *)a2 + 12);
  *v6 = v7;
  v8 = *(_QWORD *)(v3 + 8);
  if (v8 == *(unsigned int *)(v3 + 24) - 1)
    v9 = 0;
  else
    v9 = v8 + 1;
  *(_QWORD *)(v3 + 8) = v9;
  return result;
}

uint64_t *WebCore::ImageFrameWorkQueue::stop(WebCore::ImageFrameWorkQueue *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  void *v7;
  WTF *v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::MessagePort>((uint64_t)&v14, (uint64_t)v2, *((_QWORD *)this + 2));
    v3 = v14;
  }
  else
  {
    v3 = 0;
  }
  v13 = v3;
  v5 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5);
  while (v4 != v5)
  {
    WebCore::BitmapImageSource::destroyNativeImageAtIndex(v3, *(_DWORD *)(*((_QWORD *)this + 6) + 28 * v5));
    v12 = *((unsigned int *)this + 14);
    v5 += v12 + 1;
    do
      v5 -= v12;
    while (v5 >= v12);
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (v6)
  {
    WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>::close(v6, v2);
    WTF::RefPtr<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,WTF::RawPtrTraits<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>,WTF::DefaultRefDerefTraits<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>>::operator=((unsigned int **)this + 3, v7);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v8 = (WTF *)*((_QWORD *)this + 6);
  if ((WebCore::ImageFrameWorkQueue *)((char *)this + 64) != v8 && v8 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v8, v2);
  }
  v10 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  return WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v13, v2);
}

unsigned __int8 *WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>::close(unsigned __int8 *result, const void *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 v5;
  int v6;

  v2 = result;
  v3 = result + 4;
  if (__ldaxr(result + 4))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 4);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  if (v2[6])
  {
    v2[6] = 0;
    result = v2 + 5;
    v5 = atomic_load(v2 + 5);
    if ((v5 & 1) != 0)
    {
      atomic_store(0, result);
      result = (unsigned __int8 *)WTF::ParkingLot::unparkAll((WTF::ParkingLot *)result, a2);
    }
  }
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

unsigned int **WTF::RefPtr<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,WTF::RawPtrTraits<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>,WTF::DefaultRefDerefTraits<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>>>::operator=(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3;
      WTF::ThreadSafeRefCounted<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v7, a2);
    }
  }
  return a1;
}

BOOL WebCore::ImageFrameWorkQueue::isPendingDecodingAtIndex(_BOOL8 result, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(result + 32);
  v4 = *(_QWORD *)(result + 40);
  if (v5 == v4)
    return v5 != v4;
  v6 = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a4 + 4) > v6)
    v6 = *(_DWORD *)(a4 + 4);
  if (!*(_BYTE *)a4)
  {
LABEL_18:
    v5 = *(_QWORD *)(result + 40);
    return v5 != v4;
  }
  v7 = *(_QWORD *)(result + 48);
  if (!*(_DWORD *)(a4 + 12))
  {
    while (*(_DWORD *)(v7 + 28 * v5) != a2
         || *(_DWORD *)(v7 + 28 * v5 + 4) > a3
         || !*(_BYTE *)(v7 + 28 * v5 + 12)
         || *(_BYTE *)(v7 + 28 * v5 + 24))
    {
      v13 = *(unsigned int *)(result + 56);
      v5 += v13 + 1;
      do
        v5 -= v13;
      while (v5 >= v13);
      if (v4 == v5)
        goto LABEL_18;
    }
    return v5 != v4;
  }
  while (1)
  {
    if (*(_DWORD *)(v7 + 28 * v5) != a2 || *(_DWORD *)(v7 + 28 * v5 + 4) > a3 || !*(_BYTE *)(v7 + 28 * v5 + 12))
      goto LABEL_15;
    v8 = v7 + 28 * v5;
    v10 = *(unsigned __int8 *)(v8 + 24);
    v9 = (_BYTE *)(v8 + 24);
    if (!v10)
      return v5 != v4;
    if (!*v9)
      break;
    v11 = *(_DWORD *)(v7 + 28 * v5 + 16);
    if (v11 <= *(_DWORD *)(v7 + 28 * v5 + 20))
      v11 = *(_DWORD *)(v7 + 28 * v5 + 20);
    if (v11 >= v6)
      return v5 != v4;
LABEL_15:
    v12 = *(unsigned int *)(result + 56);
    v5 += v12 + 1;
    do
      v5 -= v12;
    while (v5 >= v12);
    if (v4 == v5)
      goto LABEL_18;
  }
  __break(1u);
  return result;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v4 = (a2 >> 8) & 0xF;
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v5 = (&WebCore::compositeOperatorNames)[2 * v4 + 1];
  if (v5)
  {
    if (v5 == (char *)1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v14;
    }
    v12 = v6;
  }
  else
  {
    v12 = 0;
  }
  WTF::TextStream::operator<<();
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v8 = (&WebCore::blendOperatorNames)[2 * (a2 & 0x1F) - 1];
  if (v8)
  {
    if (v8 == (char *)1)
    {
      v9 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v14;
    }
    v13 = v9;
  }
  else
  {
    v13 = 0;
  }
  WTF::TextStream::operator<<();
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2 <= 0x5Fu)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unsigned __int16)((unsigned __int16)a2 >> 12) <= 8uLL)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (((a2 >> 16) & 0xF) <= 4)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  return a1;
}

unint64_t WebCore::ImageResolution::densityCorrectedSize(float *a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float v10;
  int v11;
  float v12;
  unint64_t v13;

  if (*(_DWORD *)(a2 + 16) != 2)
  {
LABEL_10:
    v2 = 0;
    v5 = 0;
    return v5 | v2;
  }
  v2 = 0;
  v3 = *(float *)(a2 + 8);
  if (v3 <= 0.0)
    goto LABEL_11;
  v4 = *(float *)(a2 + 12);
  v5 = 0;
  if (v4 <= 0.0)
    return v5 | v2;
  v2 = 0;
  v6 = *(float *)a2;
  if (*(float *)a2 <= 0.0)
  {
LABEL_11:
    v5 = 0;
    return v5 | v2;
  }
  v7 = *(float *)(a2 + 4);
  v5 = 0;
  if (v7 > 0.0)
  {
    v8 = (float)(a1[1] * 72.0) / v4;
    if ((float)((float)(*a1 * 72.0) / v3) != v6 || v8 != v7)
      goto LABEL_10;
    v10 = roundf(v6);
    if (v10 >= 2147500000.0)
    {
      v11 = 0x7FFFFFFF;
    }
    else if (v10 <= -2147500000.0)
    {
      v11 = 0x80000000;
    }
    else
    {
      v11 = (int)v10;
    }
    v12 = roundf(v7);
    if (v12 >= 2147500000.0)
    {
      v13 = 0x7FFFFFFF00000000;
    }
    else if (v12 <= -2147500000.0)
    {
      v13 = 0x8000000000000000;
    }
    else
    {
      v13 = (unint64_t)(int)v12 << 32;
    }
    v5 = v13 | v11 & 0xFFFFFF00;
    v2 = v11;
  }
  return v5 | v2;
}

_QWORD *WebCore::ImageSource::primaryNativeImageForDrawing@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  int v4;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 128))(&v5);
  if (v5)
  {
    v4 = 0;
    *(_QWORD *)a2 = v5;
  }
  else
  {
    *(_DWORD *)a2 = 0;
    v4 = 1;
  }
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t WebCore::ImageSource::currentNativeImageForDrawing(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
}

WTF::JSONImpl::Value *WebCore::InbandGenericCue::toJSONString(WebCore::InbandGenericCue *this)
{
  WTF::JSONImpl::Value *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::JSONImpl::Value *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::JSONImpl::Value *v19;
  WTF::JSONImpl::Value *v20;
  double v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::JSONImpl::Value *v29;
  WTF::JSONImpl::Value *v30;
  double v31;
  WTF::StringImpl *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  WTF::JSONImpl::Value *v41;
  const WTF::String *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::JSONImpl::Value *v53;
  WTF::JSONImpl::Value *v54;
  WTF::StringImpl *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  WTF::JSONImpl::Value *v62;
  WTF::JSONImpl::Value *v63;
  WTF::StringImpl *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  _DWORD *v69;
  WTF::StringImpl *v70;
  WTF::JSONImpl::Value *v71;
  WTF::JSONImpl::Value *v72;
  WTF::StringImpl *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  _DWORD *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::JSONImpl::Value *v81;
  const WTF::String *v82;
  WTF::StringImpl *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  _DWORD *v88;
  WTF::StringImpl *v89;
  WTF::JSONImpl::Value *v90;
  const WTF::String *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  _DWORD *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::JSONImpl::Value *v102;
  const WTF::String *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  _DWORD *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::JSONImpl::Value *v113;
  const WTF::String *v114;
  WTF::StringImpl *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  _DWORD *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::JSONImpl::Value *v123;
  const WTF::String *v124;
  WTF::StringImpl *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  _DWORD *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::JSONImpl::Value *v133;
  const WTF::String *v134;
  WTF::StringImpl *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  _DWORD *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::JSONImpl::Value *v143;
  WTF::JSONImpl::Value *v144;
  WTF::StringImpl *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  _DWORD *v150;
  WTF::StringImpl *v151;
  WTF::JSONImpl::Value *v152;
  WTF::JSONImpl::Value *v153;
  WTF::StringImpl *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  _DWORD *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  WTF::JSONImpl::Value *v162;
  uint64_t v163;
  WTF::JSONImpl::Value *result;
  WTF::JSONImpl::Value *v165;
  const WTF::String *v166;
  WTF::StringImpl *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  _DWORD *v172;
  WTF::StringImpl *v173;
  _DWORD **v174;
  uint64_t v175;
  _DWORD *v176;
  _DWORD **v177;
  uint64_t v178;
  _DWORD *v179;
  _DWORD **v180;
  uint64_t v181;
  _DWORD *v182;
  _DWORD **v183;
  uint64_t v184;
  _DWORD *v185;
  _DWORD **v186;
  uint64_t v187;
  _DWORD *v188;
  _DWORD **v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD **v192;
  uint64_t v193;
  _DWORD *v194;
  _DWORD **v195;
  uint64_t v196;
  _DWORD *v197;
  _DWORD **v198;
  uint64_t v199;
  _DWORD *v200;
  _DWORD **v201;
  uint64_t v202;
  _DWORD *v203;
  _DWORD **v204;
  uint64_t v205;
  _DWORD *v206;
  _DWORD **v207;
  uint64_t v208;
  _DWORD *v209;
  _DWORD **v210;
  uint64_t v211;
  _DWORD *v212;
  _DWORD **v213;
  uint64_t v214;
  _DWORD *v215;
  _DWORD **v216;
  uint64_t v217;
  _DWORD *v218;
  _DWORD **v219;
  uint64_t v220;
  _DWORD *v221;
  _DWORD **v222;
  uint64_t v223;
  _DWORD *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::JSONImpl::Value *v227;
  _DWORD *v228;
  _QWORD v229[2];
  char v230;

  WTF::JSONImpl::Object::create(this);
  v2 = v227;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WebCore::InbandGenericCue *)((char *)this + 56), v3);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v227 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
  if (v230)
  {
    v5 = (uint64_t *)((char *)v2 + 24);
    v6 = *((unsigned int *)v2 + 9);
    if ((_DWORD)v6 == *((_DWORD *)v2 + 8))
    {
      v174 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)&v226);
      v6 = *((unsigned int *)v2 + 9);
      v175 = *((_QWORD *)v2 + 3);
      v176 = *v174;
      if (*v174)
        *v176 += 2;
      *(_QWORD *)(v175 + 8 * v6) = v176;
    }
    else
    {
      v7 = *v5;
      v8 = v226;
      if (v226)
        *(_DWORD *)v226 += 2;
      *(_QWORD *)(v7 + 8 * v6) = v8;
    }
    *((_DWORD *)v2 + 9) = v6 + 1;
  }
  v9 = v228;
  v228 = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  v10 = v226;
  v226 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v4);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v227;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v226 = (WTF::StringImpl *)v229[0];
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)this + 2));
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v11 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
  if (v230)
  {
    v13 = (uint64_t *)((char *)v11 + 24);
    v14 = *((unsigned int *)v11 + 9);
    if ((_DWORD)v14 == *((_DWORD *)v11 + 8))
    {
      v177 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v226);
      v14 = *((unsigned int *)v11 + 9);
      v178 = *((_QWORD *)v11 + 3);
      v179 = *v177;
      if (*v177)
        *v179 += 2;
      *(_QWORD *)(v178 + 8 * v14) = v179;
    }
    else
    {
      v15 = *v13;
      v16 = v226;
      if (v226)
        *(_DWORD *)v226 += 2;
      *(_QWORD *)(v15 + 8 * v14) = v16;
    }
    *((_DWORD *)v11 + 9) = v14 + 1;
  }
  v17 = v228;
  v228 = 0;
  if (v17)
  {
    if (*v17 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v17;
  }
  v18 = v226;
  v226 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v227;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v226 = (WTF::StringImpl *)v229[0];
  v20 = (WTF::JSONImpl::Value *)WTF::MediaTime::toDouble((WebCore::InbandGenericCue *)((char *)this + 16));
  WTF::JSONImpl::Value::create(v20, v21);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v19 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
  if (v230)
  {
    v23 = (uint64_t *)((char *)v19 + 24);
    v24 = *((unsigned int *)v19 + 9);
    if ((_DWORD)v24 == *((_DWORD *)v19 + 8))
    {
      v180 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v226);
      v24 = *((unsigned int *)v19 + 9);
      v181 = *((_QWORD *)v19 + 3);
      v182 = *v180;
      if (*v180)
        *v182 += 2;
      *(_QWORD *)(v181 + 8 * v24) = v182;
    }
    else
    {
      v25 = *v23;
      v26 = v226;
      if (v226)
        *(_DWORD *)v226 += 2;
      *(_QWORD *)(v25 + 8 * v24) = v26;
    }
    *((_DWORD *)v19 + 9) = v24 + 1;
  }
  v27 = v228;
  v228 = 0;
  if (v27)
  {
    if (*v27 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v27;
  }
  v28 = v226;
  v226 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v22);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v227;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v226 = (WTF::StringImpl *)v229[0];
  v30 = (WTF::JSONImpl::Value *)WTF::MediaTime::toDouble((WebCore::InbandGenericCue *)((char *)this + 32));
  WTF::JSONImpl::Value::create(v30, v31);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v29 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
  if (v230)
  {
    v33 = (uint64_t *)((char *)v29 + 24);
    v34 = *((unsigned int *)v29 + 9);
    if ((_DWORD)v34 == *((_DWORD *)v29 + 8))
    {
      v183 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v226);
      v34 = *((unsigned int *)v29 + 9);
      v184 = *((_QWORD *)v29 + 3);
      v185 = *v183;
      if (*v183)
        *v185 += 2;
      *(_QWORD *)(v184 + 8 * v34) = v185;
    }
    else
    {
      v35 = *v33;
      v36 = v226;
      if (v226)
        *(_DWORD *)v226 += 2;
      *(_QWORD *)(v35 + 8 * v34) = v36;
    }
    *((_DWORD *)v29 + 9) = v34 + 1;
  }
  v37 = v228;
  v228 = 0;
  if (v37)
  {
    if (*v37 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v37;
  }
  v38 = v226;
  v226 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v32);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = *((unsigned __int8 *)this + 138);
  if (v39 == 2)
  {
    v40 = 9;
  }
  else if (v39 == 1)
  {
    v40 = 8;
  }
  else if (*((_BYTE *)this + 138))
  {
    v40 = 1;
  }
  else
  {
    v40 = 14;
  }
  v41 = v227;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v226 = (WTF::StringImpl *)v229[0];
  v42 = (const WTF::String *)(v40 - 1);
  if (v40 == 1)
  {
    v43 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v43 = (WTF::StringImpl *)v229[0];
  }
  v225 = v43;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v225, v42);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v41 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
  if (v230)
  {
    v45 = (uint64_t *)((char *)v41 + 24);
    v46 = *((unsigned int *)v41 + 9);
    if ((_DWORD)v46 == *((_DWORD *)v41 + 8))
    {
      v186 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v226);
      v46 = *((unsigned int *)v41 + 9);
      v187 = *((_QWORD *)v41 + 3);
      v188 = *v186;
      if (*v186)
        *v188 += 2;
      *(_QWORD *)(v187 + 8 * v46) = v188;
    }
    else
    {
      v47 = *v45;
      v48 = v226;
      if (v226)
        *(_DWORD *)v226 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *((_DWORD *)v41 + 9) = v46 + 1;
  }
  v49 = v228;
  v228 = 0;
  if (v49)
  {
    if (*v49 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v49;
  }
  v50 = v225;
  v225 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v44);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = v226;
  v226 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v44);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = *((_QWORD *)this + 6);
  if (v52 && *(_DWORD *)(v52 + 4))
  {
    v81 = v227;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v226 = (WTF::StringImpl *)v229[0];
    WTF::JSONImpl::Value::create((WebCore::InbandGenericCue *)((char *)this + 48), v82);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v81 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
    if (v230)
    {
      v84 = (uint64_t *)((char *)v81 + 24);
      v85 = *((unsigned int *)v81 + 9);
      if ((_DWORD)v85 == *((_DWORD *)v81 + 8))
      {
        v219 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v226);
        v85 = *((unsigned int *)v81 + 9);
        v220 = *((_QWORD *)v81 + 3);
        v221 = *v219;
        if (*v219)
          *v221 += 2;
        *(_QWORD *)(v220 + 8 * v85) = v221;
      }
      else
      {
        v86 = *v84;
        v87 = v226;
        if (v226)
          *(_DWORD *)v226 += 2;
        *(_QWORD *)(v86 + 8 * v85) = v87;
      }
      *((_DWORD *)v81 + 9) = v85 + 1;
    }
    v88 = v228;
    v228 = 0;
    if (v88)
    {
      if (*v88 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v88;
    }
    v89 = v226;
    v226 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, v83);
      else
        *(_DWORD *)v89 -= 2;
    }
  }
  if (*((double *)this + 9) > 0.0)
  {
    v53 = v227;
    v54 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v226 = (WTF::StringImpl *)v229[0];
    WTF::JSONImpl::Value::create(v54, *((double *)this + 9));
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v53 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
    if (v230)
    {
      v56 = (uint64_t *)((char *)v53 + 24);
      v57 = *((unsigned int *)v53 + 9);
      if ((_DWORD)v57 == *((_DWORD *)v53 + 8))
      {
        v201 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v57 + 1, (unint64_t)&v226);
        v57 = *((unsigned int *)v53 + 9);
        v202 = *((_QWORD *)v53 + 3);
        v203 = *v201;
        if (*v201)
          *v203 += 2;
        *(_QWORD *)(v202 + 8 * v57) = v203;
      }
      else
      {
        v58 = *v56;
        v59 = v226;
        if (v226)
          *(_DWORD *)v226 += 2;
        *(_QWORD *)(v58 + 8 * v57) = v59;
      }
      *((_DWORD *)v53 + 9) = v57 + 1;
    }
    v60 = v228;
    v228 = 0;
    if (v60)
    {
      if (*v60 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v60;
    }
    v61 = v226;
    v226 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v55);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  if (*((double *)this + 11) > 0.0)
  {
    v62 = v227;
    v63 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v226 = (WTF::StringImpl *)v229[0];
    WTF::JSONImpl::Value::create(v63, *((double *)this + 11));
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v62 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
    if (v230)
    {
      v65 = (uint64_t *)((char *)v62 + 24);
      v66 = *((unsigned int *)v62 + 9);
      if ((_DWORD)v66 == *((_DWORD *)v62 + 8))
      {
        v204 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v226);
        v66 = *((unsigned int *)v62 + 9);
        v205 = *((_QWORD *)v62 + 3);
        v206 = *v204;
        if (*v204)
          *v206 += 2;
        *(_QWORD *)(v205 + 8 * v66) = v206;
      }
      else
      {
        v67 = *v65;
        v68 = v226;
        if (v226)
          *(_DWORD *)v226 += 2;
        *(_QWORD *)(v67 + 8 * v66) = v68;
      }
      *((_DWORD *)v62 + 9) = v66 + 1;
    }
    v69 = v228;
    v228 = 0;
    if (v69)
    {
      if (*v69 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v69;
    }
    v70 = v226;
    v226 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v64);
      else
        *(_DWORD *)v70 -= 2;
    }
  }
  if (*((double *)this + 10) > 0.0)
  {
    v71 = v227;
    v72 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v226 = (WTF::StringImpl *)v229[0];
    WTF::JSONImpl::Value::create(v72, *((double *)this + 10));
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v71 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
    if (v230)
    {
      v74 = (uint64_t *)((char *)v71 + 24);
      v75 = *((unsigned int *)v71 + 9);
      if ((_DWORD)v75 == *((_DWORD *)v71 + 8))
      {
        v207 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v74, v75 + 1, (unint64_t)&v226);
        v75 = *((unsigned int *)v71 + 9);
        v208 = *((_QWORD *)v71 + 3);
        v209 = *v207;
        if (*v207)
          *v209 += 2;
        *(_QWORD *)(v208 + 8 * v75) = v209;
      }
      else
      {
        v76 = *v74;
        v77 = v226;
        if (v226)
          *(_DWORD *)v226 += 2;
        *(_QWORD *)(v76 + 8 * v75) = v77;
      }
      *((_DWORD *)v71 + 9) = v75 + 1;
    }
    v78 = v228;
    v228 = 0;
    if (v78)
    {
      if (*v78 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v78;
    }
    v79 = v226;
    v226 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v73);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
  switch(*((_BYTE *)this + 136))
  {
    case 0:
      goto LABEL_148;
    case 1:
      v80 = 6;
      goto LABEL_131;
    case 2:
      v80 = 7;
      goto LABEL_131;
    case 3:
      v80 = 4;
      goto LABEL_131;
    default:
      v80 = 1;
LABEL_131:
      v90 = v227;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v226 = (WTF::StringImpl *)v229[0];
      v91 = (const WTF::String *)(v80 - 1);
      if (v80 == 1)
      {
        v92 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v92 = (WTF::StringImpl *)v229[0];
      }
      v225 = v92;
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v225, v91);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v90 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
      if (v230)
      {
        v94 = (uint64_t *)((char *)v90 + 24);
        v95 = *((unsigned int *)v90 + 9);
        if ((_DWORD)v95 == *((_DWORD *)v90 + 8))
        {
          v189 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v94, v95 + 1, (unint64_t)&v226);
          v95 = *((unsigned int *)v90 + 9);
          v190 = *((_QWORD *)v90 + 3);
          v191 = *v189;
          if (*v189)
            *v191 += 2;
          *(_QWORD *)(v190 + 8 * v95) = v191;
        }
        else
        {
          v96 = *v94;
          v97 = v226;
          if (v226)
            *(_DWORD *)v226 += 2;
          *(_QWORD *)(v96 + 8 * v95) = v97;
        }
        *((_DWORD *)v90 + 9) = v95 + 1;
      }
      v98 = v228;
      v228 = 0;
      if (v98)
      {
        if (*v98 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v98;
      }
      v99 = v225;
      v225 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
          WTF::StringImpl::destroy(v99, v93);
        else
          *(_DWORD *)v99 -= 2;
      }
      v100 = v226;
      v226 = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
          WTF::StringImpl::destroy(v100, v93);
        else
          *(_DWORD *)v100 -= 2;
      }
LABEL_148:
      switch(*((_BYTE *)this + 137))
      {
        case 0:
          goto LABEL_170;
        case 1:
          v101 = 6;
          goto LABEL_153;
        case 2:
          v101 = 7;
          goto LABEL_153;
        case 3:
          v101 = 4;
          goto LABEL_153;
        default:
          v101 = 1;
LABEL_153:
          v102 = v227;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v226 = (WTF::StringImpl *)v229[0];
          v103 = (const WTF::String *)(v101 - 1);
          if (v101 == 1)
          {
            v104 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v104 = (WTF::StringImpl *)v229[0];
          }
          v225 = v104;
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v225, v103);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v102 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
          if (v230)
          {
            v106 = (uint64_t *)((char *)v102 + 24);
            v107 = *((unsigned int *)v102 + 9);
            if ((_DWORD)v107 == *((_DWORD *)v102 + 8))
            {
              v192 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v107 + 1, (unint64_t)&v226);
              v107 = *((unsigned int *)v102 + 9);
              v193 = *((_QWORD *)v102 + 3);
              v194 = *v192;
              if (*v192)
                *v194 += 2;
              *(_QWORD *)(v193 + 8 * v107) = v194;
            }
            else
            {
              v108 = *v106;
              v109 = v226;
              if (v226)
                *(_DWORD *)v226 += 2;
              *(_QWORD *)(v108 + 8 * v107) = v109;
            }
            *((_DWORD *)v102 + 9) = v107 + 1;
          }
          v110 = v228;
          v228 = 0;
          if (v110)
          {
            if (*v110 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v110;
          }
          v111 = v225;
          v225 = 0;
          if (v111)
          {
            if (*(_DWORD *)v111 == 2)
              WTF::StringImpl::destroy(v111, v105);
            else
              *(_DWORD *)v111 -= 2;
          }
          v112 = v226;
          v226 = 0;
          if (v112)
          {
            if (*(_DWORD *)v112 == 2)
              WTF::StringImpl::destroy(v112, v105);
            else
              *(_DWORD *)v112 -= 2;
          }
LABEL_170:
          if ((*((_BYTE *)this + 118) & 4) != 0)
          {
            v113 = v227;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v226 = (WTF::StringImpl *)v229[0];
            WebCore::serializationForHTML((WebCore::InbandGenericCue *)((char *)this + 112), &v225);
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v225, v114);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v113 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
            if (v230)
            {
              v116 = (uint64_t *)((char *)v113 + 24);
              v117 = *((unsigned int *)v113 + 9);
              if ((_DWORD)v117 == *((_DWORD *)v113 + 8))
              {
                v210 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v116, v117 + 1, (unint64_t)&v226);
                v117 = *((unsigned int *)v113 + 9);
                v211 = *((_QWORD *)v113 + 3);
                v212 = *v210;
                if (*v210)
                  *v212 += 2;
                *(_QWORD *)(v211 + 8 * v117) = v212;
              }
              else
              {
                v118 = *v116;
                v119 = v226;
                if (v226)
                  *(_DWORD *)v226 += 2;
                *(_QWORD *)(v118 + 8 * v117) = v119;
              }
              *((_DWORD *)v113 + 9) = v117 + 1;
            }
            v120 = v228;
            v228 = 0;
            if (v120)
            {
              if (*v120 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v120;
            }
            v121 = v225;
            v225 = 0;
            if (v121)
            {
              if (*(_DWORD *)v121 == 2)
                WTF::StringImpl::destroy(v121, v115);
              else
                *(_DWORD *)v121 -= 2;
            }
            v122 = v226;
            v226 = 0;
            if (v122)
            {
              if (*(_DWORD *)v122 == 2)
                WTF::StringImpl::destroy(v122, v115);
              else
                *(_DWORD *)v122 -= 2;
            }
          }
          if ((*((_BYTE *)this + 126) & 4) != 0)
          {
            v123 = v227;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v226 = (WTF::StringImpl *)v229[0];
            WebCore::serializationForHTML((WebCore::InbandGenericCue *)((char *)this + 120), &v225);
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v225, v124);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v123 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
            if (v230)
            {
              v126 = (uint64_t *)((char *)v123 + 24);
              v127 = *((unsigned int *)v123 + 9);
              if ((_DWORD)v127 == *((_DWORD *)v123 + 8))
              {
                v213 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v126, v127 + 1, (unint64_t)&v226);
                v127 = *((unsigned int *)v123 + 9);
                v214 = *((_QWORD *)v123 + 3);
                v215 = *v213;
                if (*v213)
                  *v215 += 2;
                *(_QWORD *)(v214 + 8 * v127) = v215;
              }
              else
              {
                v128 = *v126;
                v129 = v226;
                if (v226)
                  *(_DWORD *)v226 += 2;
                *(_QWORD *)(v128 + 8 * v127) = v129;
              }
              *((_DWORD *)v123 + 9) = v127 + 1;
            }
            v130 = v228;
            v228 = 0;
            if (v130)
            {
              if (*v130 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v130;
            }
            v131 = v225;
            v225 = 0;
            if (v131)
            {
              if (*(_DWORD *)v131 == 2)
                WTF::StringImpl::destroy(v131, v125);
              else
                *(_DWORD *)v131 -= 2;
            }
            v132 = v226;
            v226 = 0;
            if (v132)
            {
              if (*(_DWORD *)v132 == 2)
                WTF::StringImpl::destroy(v132, v125);
              else
                *(_DWORD *)v132 -= 2;
            }
          }
          if ((*((_BYTE *)this + 134) & 4) != 0)
          {
            v133 = v227;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v226 = (WTF::StringImpl *)v229[0];
            WebCore::serializationForHTML((WebCore::InbandGenericCue *)((char *)this + 128), &v225);
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v225, v134);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v133 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
            if (v230)
            {
              v136 = (uint64_t *)((char *)v133 + 24);
              v137 = *((unsigned int *)v133 + 9);
              if ((_DWORD)v137 == *((_DWORD *)v133 + 8))
              {
                v216 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v226);
                v137 = *((unsigned int *)v133 + 9);
                v217 = *((_QWORD *)v133 + 3);
                v218 = *v216;
                if (*v216)
                  *v218 += 2;
                *(_QWORD *)(v217 + 8 * v137) = v218;
              }
              else
              {
                v138 = *v136;
                v139 = v226;
                if (v226)
                  *(_DWORD *)v226 += 2;
                *(_QWORD *)(v138 + 8 * v137) = v139;
              }
              *((_DWORD *)v133 + 9) = v137 + 1;
            }
            v140 = v228;
            v228 = 0;
            if (v140)
            {
              if (*v140 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v140;
            }
            v141 = v225;
            v225 = 0;
            if (v141)
            {
              if (*(_DWORD *)v141 == 2)
                WTF::StringImpl::destroy(v141, v135);
              else
                *(_DWORD *)v141 -= 2;
            }
            v142 = v226;
            v226 = 0;
            if (v142)
            {
              if (*(_DWORD *)v142 == 2)
                WTF::StringImpl::destroy(v142, v135);
              else
                *(_DWORD *)v142 -= 2;
            }
          }
          if (*((double *)this + 12) != 0.0)
          {
            v143 = v227;
            v144 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            v226 = (WTF::StringImpl *)v229[0];
            WTF::JSONImpl::Value::create(v144, *((double *)this + 12));
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v143 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
            if (v230)
            {
              v146 = (uint64_t *)((char *)v143 + 24);
              v147 = *((unsigned int *)v143 + 9);
              if ((_DWORD)v147 == *((_DWORD *)v143 + 8))
              {
                v195 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v146, v147 + 1, (unint64_t)&v226);
                v147 = *((unsigned int *)v143 + 9);
                v196 = *((_QWORD *)v143 + 3);
                v197 = *v195;
                if (*v195)
                  *v197 += 2;
                *(_QWORD *)(v196 + 8 * v147) = v197;
              }
              else
              {
                v148 = *v146;
                v149 = v226;
                if (v226)
                  *(_DWORD *)v226 += 2;
                *(_QWORD *)(v148 + 8 * v147) = v149;
              }
              *((_DWORD *)v143 + 9) = v147 + 1;
            }
            v150 = v228;
            v228 = 0;
            if (v150)
            {
              if (*v150 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v150;
            }
            v151 = v226;
            v226 = 0;
            if (v151)
            {
              if (*(_DWORD *)v151 == 2)
                WTF::StringImpl::destroy(v151, v145);
              else
                *(_DWORD *)v151 -= 2;
            }
          }
          if (*((double *)this + 13) != 0.0)
          {
            v152 = v227;
            v153 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            v226 = (WTF::StringImpl *)v229[0];
            WTF::JSONImpl::Value::create(v153, *((double *)this + 13));
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v152 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
            if (v230)
            {
              v155 = (uint64_t *)((char *)v152 + 24);
              v156 = *((unsigned int *)v152 + 9);
              if ((_DWORD)v156 == *((_DWORD *)v152 + 8))
              {
                v198 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v155, v156 + 1, (unint64_t)&v226);
                v156 = *((unsigned int *)v152 + 9);
                v199 = *((_QWORD *)v152 + 3);
                v200 = *v198;
                if (*v198)
                  *v200 += 2;
                *(_QWORD *)(v199 + 8 * v156) = v200;
              }
              else
              {
                v157 = *v155;
                v158 = v226;
                if (v226)
                  *(_DWORD *)v226 += 2;
                *(_QWORD *)(v157 + 8 * v156) = v158;
              }
              *((_DWORD *)v152 + 9) = v156 + 1;
            }
            v159 = v228;
            v228 = 0;
            if (v159)
            {
              if (*v159 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v159;
            }
            v160 = v226;
            v226 = 0;
            if (v160)
            {
              if (*(_DWORD *)v160 == 2)
                WTF::StringImpl::destroy(v160, v154);
              else
                *(_DWORD *)v160 -= 2;
            }
          }
          v163 = *((_QWORD *)this + 8);
          v162 = (WebCore::InbandGenericCue *)((char *)this + 64);
          v161 = v163;
          if (v163 && *(_DWORD *)(v161 + 4))
          {
            v165 = v227;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::JSONImpl::Value::create(v162, v166);
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v165 + 2, &v226, (const WTF::StringImpl *)&v228, (uint64_t)v229);
            if (v230)
            {
              v168 = (uint64_t *)((char *)v165 + 24);
              v169 = *((unsigned int *)v165 + 9);
              if ((_DWORD)v169 == *((_DWORD *)v165 + 8))
              {
                v222 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v168, v169 + 1, (unint64_t)&v226);
                v169 = *((unsigned int *)v165 + 9);
                v223 = *((_QWORD *)v165 + 3);
                v224 = *v222;
                if (*v222)
                  *v224 += 2;
                *(_QWORD *)(v223 + 8 * v169) = v224;
              }
              else
              {
                v170 = *v168;
                v171 = v226;
                if (v226)
                  *(_DWORD *)v226 += 2;
                *(_QWORD *)(v170 + 8 * v169) = v171;
              }
              *((_DWORD *)v165 + 9) = v169 + 1;
            }
            v172 = v228;
            v228 = 0;
            if (v172)
            {
              if (*v172 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v172;
            }
            v173 = v226;
            v226 = 0;
            if (v173)
            {
              if (*(_DWORD *)v173 == 2)
                WTF::StringImpl::destroy(v173, v167);
              else
                *(_DWORD *)v173 -= 2;
            }
          }
          WTF::JSONImpl::Value::toJSONString(v227);
          result = v227;
          v227 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)result;
          }
          return result;
      }
  }
}

uint64_t WebCore::GenericCueData::equalNotConsideringTimesOrId(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const WTF::StringImpl *v11;

  if (*(double *)(a1 + 96) != *(double *)(a2 + 96)
    || *(double *)(a1 + 88) != *(double *)(a2 + 88)
    || *(double *)(a1 + 72) != *(double *)(a2 + 72)
    || *(double *)(a1 + 64) != *(double *)(a2 + 64)
    || *(double *)(a1 + 80) != *(double *)(a2 + 80)
    || *(unsigned __int8 *)(a1 + 129) != *(unsigned __int8 *)(a2 + 129))
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a2 + 104);
  if ((v5 & 0x8000000000000) != 0)
  {
    if ((v6 & 0x8000000000000) == 0
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v5) != HIBYTE(v6)
      || BYTE6(v5) != BYTE6(v6))
    {
      return 0;
    }
  }
  else if (v5 != v6 || (v6 & 0x8000000000000) != 0)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a2 + 112);
  if ((v7 & 0x8000000000000) != 0)
  {
    if ((v8 & 0x8000000000000) == 0
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v7) != HIBYTE(v8)
      || BYTE6(v7) != BYTE6(v8))
    {
      return 0;
    }
  }
  else if (v7 != v8 || (v8 & 0x8000000000000) != 0)
  {
    return 0;
  }
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a2 + 120);
  if ((v9 & 0x8000000000000) != 0)
  {
    if ((v10 & 0x8000000000000) == 0
      || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v9) != HIBYTE(v10)
      || BYTE6(v9) != BYTE6(v10))
    {
      return 0;
    }
  }
  else if (v9 != v10 || (v10 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if (!WTF::equal(*(WTF **)(a1 + 56), *(const WTF::StringImpl **)(a2 + 56), a3)
    || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
  {
    return 0;
  }
  return WTF::equal(*(WTF **)(a1 + 48), *(const WTF::StringImpl **)(a2 + 48), v11);
}

int *WebCore::IntPoint::IntPoint(int *this, const WebCore::FloatPoint *a2)
{
  float v2;
  float v3;
  int v4;
  int v5;

  v3 = *(float *)a2;
  v2 = *((float *)a2 + 1);
  if (*(float *)a2 > -2147500000.0)
    v4 = (int)*(float *)a2;
  else
    v4 = 0x80000000;
  if (v3 < 2147500000.0)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  if (v3 < 2147500000.0 && v3 > -2147500000.0)
    v5 = (int)*(float *)a2;
  *this = v5;
  if (v2 < 2147500000.0 && v2 > -2147500000.0)
    goto LABEL_16;
  if (v2 >= 2147500000.0)
  {
    this[1] = 0x7FFFFFFF;
  }
  else
  {
    if (v2 > -2147500000.0)
    {
LABEL_16:
      this[1] = (int)v2;
      return this;
    }
    this[1] = 0x80000000;
  }
  return this;
}

{
  float v2;
  int v3;
  int v4;
  int v5;

  v2 = *((float *)a2 + 1);
  if (*(float *)a2 > -2147500000.0)
    v3 = (int)*(float *)a2;
  else
    v3 = 0x80000000;
  if (*(float *)a2 < 2147500000.0)
    v4 = v3;
  else
    v4 = 0x7FFFFFFF;
  *this = v4;
  if (v2 >= 2147500000.0)
  {
    v5 = 0x7FFFFFFF;
  }
  else if (v2 <= -2147500000.0)
  {
    v5 = 0x80000000;
  }
  else
  {
    v5 = (int)v2;
  }
  this[1] = v5;
  return this;
}

uint64_t WebCore::IntPoint::constrainedBetween(WebCore::IntPoint *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  LODWORD(v3) = *(_DWORD *)a3;
  LODWORD(v4) = *((_DWORD *)a3 + 1);
  if (*(_DWORD *)this < *(_DWORD *)a3)
    LODWORD(v3) = *(_DWORD *)this;
  v5 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 <= (int)v3)
    v3 = v3;
  else
    v3 = *(unsigned int *)a2;
  if (*((_DWORD *)this + 1) < (int)v4)
    LODWORD(v4) = *((_DWORD *)this + 1);
  if (v5 <= (int)v4)
    v4 = v4;
  else
    v4 = v5;
  return v3 | (v4 << 32);
}

uint64_t WebCore::IntPoint::constrainedWithin(WebCore::IntPoint *this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  LODWORD(v3) = *(_DWORD *)a2;
  LODWORD(v2) = *((_DWORD *)a2 + 1);
  v4 = *((_DWORD *)a2 + 2) + *(_DWORD *)a2;
  if (*(_DWORD *)this < v4)
    v4 = *(_DWORD *)this;
  if ((int)v3 <= v4)
    v3 = v4;
  else
    v3 = v3;
  if (*((_DWORD *)this + 1) >= *((_DWORD *)a2 + 3) + (int)v2)
    v5 = *((_DWORD *)a2 + 3) + v2;
  else
    v5 = *((_DWORD *)this + 1);
  if ((int)v2 <= v5)
    v2 = v5;
  else
    v2 = v2;
  return v3 | (v2 << 32);
}

int *WebCore::IntRect::IntRect(int *this, const WebCore::FloatRect *a2)
{
  float v2;
  int v3;
  int v4;
  int v5;
  int v6;
  float v7;
  float v8;
  int v9;
  int v10;
  int v11;

  v2 = *((float *)a2 + 1);
  v3 = (int)*(float *)a2;
  if (*(float *)a2 <= -2147500000.0)
    v3 = 0x80000000;
  if (*(float *)a2 < 2147500000.0)
    v4 = v3;
  else
    v4 = 0x7FFFFFFF;
  if (v2 > -2147500000.0)
    v5 = (int)v2;
  else
    v5 = 0x80000000;
  if (v2 < 2147500000.0)
    v6 = v5;
  else
    v6 = 0x7FFFFFFF;
  *this = v4;
  this[1] = v6;
  v8 = *((float *)a2 + 2);
  v7 = *((float *)a2 + 3);
  v9 = (int)v8;
  if (v8 <= -2147500000.0)
    v9 = 0x80000000;
  if (v8 < 2147500000.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  if (v7 >= 2147500000.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (v7 <= -2147500000.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v7;
  }
  this[2] = v10;
  this[3] = v11;
  return this;
}

{
  float v2;
  int v3;
  int v4;
  int v5;
  int v6;
  float v7;
  float v8;
  int v9;
  int v10;
  int v11;

  v2 = *((float *)a2 + 1);
  v3 = (int)*(float *)a2;
  if (*(float *)a2 <= -2147500000.0)
    v3 = 0x80000000;
  if (*(float *)a2 < 2147500000.0)
    v4 = v3;
  else
    v4 = 0x7FFFFFFF;
  if (v2 > -2147500000.0)
    v5 = (int)v2;
  else
    v5 = 0x80000000;
  if (v2 < 2147500000.0)
    v6 = v5;
  else
    v6 = 0x7FFFFFFF;
  *this = v4;
  this[1] = v6;
  v8 = *((float *)a2 + 2);
  v7 = *((float *)a2 + 3);
  v9 = (int)v8;
  if (v8 <= -2147500000.0)
    v9 = 0x80000000;
  if (v8 < 2147500000.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  if (v7 >= 2147500000.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (v7 <= -2147500000.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v7;
  }
  this[2] = v10;
  this[3] = v11;
  return this;
}

int *WebCore::IntRect::IntRect(int *this, const WebCore::LayoutRect *a2)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)a2 + 1);
  *this = *(_DWORD *)a2 / 64;
  this[1] = v2 / 64;
  v3 = *((_DWORD *)a2 + 3);
  this[2] = *((_DWORD *)a2 + 2) / 64;
  this[3] = v3 / 64;
  return this;
}

{
  int v2;
  int v3;

  v2 = *((_DWORD *)a2 + 1);
  *this = *(_DWORD *)a2 / 64;
  this[1] = v2 / 64;
  v3 = *((_DWORD *)a2 + 3);
  this[2] = *((_DWORD *)a2 + 2) / 64;
  this[3] = v3 / 64;
  return this;
}

BOOL WebCore::IntRect::intersects(WebCore::IntRect *this, const WebCore::IntRect *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v7;
  int v9;
  int v10;
  _BOOL4 v11;

  v2 = *((_DWORD *)this + 2);
  if (v2 < 1)
    return 0;
  v3 = *((_DWORD *)this + 3);
  if (v3 < 1)
    return 0;
  v5 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a2 + 3);
  if (v5 < 1 || v4 < 1)
    return 0;
  v7 = *(_DWORD *)this + v2;
  if (*(_DWORD *)this >= *(_DWORD *)a2 + v5 || *(_DWORD *)a2 >= v7)
    return 0;
  v9 = *((_DWORD *)this + 1);
  v10 = *((_DWORD *)a2 + 1);
  v11 = v10 < v9 + v3;
  return v9 < v10 + v4 && v11;
}

__n128 WebCore::IntRect::unite(int32x2_t *this, int32x2_t *a2)
{
  __n128 result;
  int v4;
  int v5;
  int32x2_t v6;

  result.n128_u64[0] = (unint64_t)a2[1];
  if (result.n128_i32[0] >= 1 && (int)HIDWORD(*(_QWORD *)&a2[1]) >= 1)
  {
    v4 = this[1].i32[0];
    if (v4 < 1 || (v5 = this[1].i32[1], v5 <= 0))
    {
      result = *(__n128 *)a2->i8;
      *(_OWORD *)this->i8 = *(_OWORD *)a2->i8;
    }
    else
    {
      v6 = vmin_s32(*a2, *this);
      result.n128_u64[0] = (unint64_t)vsub_s32(vmax_s32(vadd_s32(*this, (int32x2_t)__PAIR64__(v5, v4)), vadd_s32(*a2, (int32x2_t)result.n128_u64[0])), v6);
      *this = v6;
      this[1] = (int32x2_t)result.n128_u64[0];
    }
  }
  return result;
}

int32x4_t WebCore::IntRect::scale(int32x4_t *this, float a2)
{
  int32x4_t result;

  result = vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(*this), a2));
  *this = result;
  return result;
}

uint64_t WebCore::IntRect::toRectWithExtentsClippedToNumericLimits(WebCore::IntRect *this)
{
  return *(_QWORD *)this;
}

void WebCore::ImageSource::destroyDecodedData(WebCore::ImageSource *this)
{
  __break(0xC471u);
}

uint64_t WebCore::ImageSource::isAnimated(WebCore::ImageSource *this)
{
  return 0;
}

uint64_t WebCore::ImageSource::isAnimating(WebCore::ImageSource *this)
{
  return 0;
}

uint64_t WebCore::ImageSource::hasEverAnimated(WebCore::ImageSource *this)
{
  return 0;
}

uint64_t WebCore::ImageSource::isLargeForDecoding(WebCore::ImageSource *this)
{
  return 0;
}

void WebCore::ImageSource::stopDecodingWorkQueue(WebCore::ImageSource *this)
{
  __break(0xC471u);
}

void WebCore::ImageSource::decode()
{
  __break(0xC471u);
}

uint64_t WebCore::ImageSource::currentFrameIndex(WebCore::ImageSource *this)
{
  return (*(uint64_t (**)(WebCore::ImageSource *))(*(_QWORD *)this + 208))(this);
}

uint64_t WebCore::ImageSource::currentImageFrame(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t WebCore::ImageSource::currentNativeImage(WebCore::ImageSource *this)
{
  return (*(uint64_t (**)(WebCore::ImageSource *))(*(_QWORD *)this + 128))(this);
}

uint64_t WebCore::ImageSource::currentPreTransformedNativeImage(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t WebCore::ImageSource::nativeImageAtIndex(WebCore::ImageSource *this)
{
  return (*(uint64_t (**)(WebCore::ImageSource *))(*(_QWORD *)this + 128))(this);
}

uint64_t WebCore::ImageSource::sourceSize(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2);
}

uint64_t WebCore::ImageSource::hasDensityCorrectedSize(WebCore::ImageSource *this)
{
  return 0;
}

uint64_t WebCore::ImageSource::orientation(WebCore::ImageSource *this)
{
  return 1;
}

uint64_t WebCore::ImageSource::primaryFrameIndex(WebCore::ImageSource *this)
{
  return 0;
}

uint64_t WebCore::ImageSource::frameCount(WebCore::ImageSource *this)
{
  return 1;
}

void WebCore::ImageSource::uti(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ImageSource::filenameExtension(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ImageSource::accessibilityDescription(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ImageSource::hotSpot(WebCore::ImageSource *this)
{
  return 0;
}

uint64_t WebCore::ImageSource::subsamplingLevelForScaleFactor()
{
  return 0;
}

void WebCore::ImageSource::frameDurationAtIndex(WebCore::ImageSource *this)
{
  __break(0xC471u);
}

void WebCore::ImageSource::frameOrientationAtIndex(WebCore::ImageSource *this)
{
  __break(0xC471u);
}

void WebCore::ImageSource::frameDecodingStatusAtIndex(WebCore::ImageSource *this)
{
  __break(0xC471u);
}

uint64_t WebCore::ImageSource::decodeCountForTesting(WebCore::ImageSource *this)
{
  return 0;
}

uint64_t WebCore::ImageSource::blankDrawCountForTesting(WebCore::ImageSource *this)
{
  return 0;
}

void WebCore::ImageSource::setMinimumDecodingDurationForTesting()
{
  __break(0xC471u);
}

void WebCore::ImageSource::setClearDecoderAfterAsyncFrameRequestForTesting(WebCore::ImageSource *this)
{
  __break(0xC471u);
}

void WebCore::ImageSource::setAsyncDecodingEnabledForTesting(WebCore::ImageSource *this)
{
  __break(0xC471u);
}

uint64_t WebCore::ImageSource::isAsyncDecodingEnabledForTesting(WebCore::ImageSource *this)
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ImageFrameAnimator::*&)(void),WebCore::ImageFrameAnimator*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned __int8 *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageSource,(WTF::DestructionThread)0>::deref(unsigned __int8 *result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_8:
  if (!v5)
  {
    if (v6)
      result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (!v7)
      return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ImageFrameWorkQueue::start(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E340D698;
  WebCore::ImageFrameWorkQueue::start(void)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageFrameWorkQueue::start(void)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E340D698;
  WebCore::ImageFrameWorkQueue::start(void)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageFrameWorkQueue::start(void)::$_0,void>::call(uint64_t a1, const void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  WTF::MonotonicTime *v16;
  double v17;
  double v18;
  double v19;
  uint64_t IdentifierInternal;
  size_t Width;
  _QWORD *v22;
  CGImageRef v23;
  _QWORD *v24;
  double v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  CGImageRef v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  _QWORD *v48;
  uint64_t v49;
  CGImageRef image;
  _BYTE v51[28];

  v51[12] = 1;
  v51[16] = 0;
  v51[24] = 0;
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = (unsigned __int8 *)(v3 + 4);
    if (__ldaxr((unsigned __int8 *)(v3 + 4)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3 + 4);
LABEL_6:
    if (*(_BYTE *)(v3 + 6))
    {
      while (1)
      {
        v6 = *(_QWORD *)(v3 + 8);
        v7 = *(_QWORD *)(v3 + 16);
        v8 = v7;
        if (v6 > v7)
          v8 = v7 + *(unsigned int *)(v3 + 32);
        if (v8 != v6)
          break;
        v44 = 0x7FF0000000000000;
        LODWORD(v45) = 0;
        WTF::Condition::waitUntilUnchecked<WTF::Lock>(v3 + 5, (unsigned __int8 *)(v3 + 4), (WTF::TimeWithDynamicClockType *)&v44);
        if (!*(_BYTE *)(v3 + 6))
          goto LABEL_20;
      }
      if (v6 == v7)
      {
        __break(0xC471u);
        JUMPOUT(0x196193DD4);
      }
      v9 = (_OWORD *)(*(_QWORD *)(v3 + 24) + 28 * v6);
      v10 = *(_OWORD *)((char *)v9 + 12);
      *(_OWORD *)v51 = *v9;
      *(_OWORD *)&v51[12] = v10;
      v11 = *(_QWORD *)(v3 + 8);
      if (v11 == *(_QWORD *)(v3 + 16))
      {
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x196193DB4);
      }
      if (v11 == *(unsigned int *)(v3 + 32) - 1)
        v12 = 0;
      else
        v12 = v11 + 1;
      *(_QWORD *)(v3 + 8) = v12;
      v13 = atomic_load((unsigned __int8 *)(v3 + 5));
      if ((v13 & 1) != 0)
      {
        atomic_store(0, (unsigned __int8 *)(v3 + 5));
        WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(v3 + 5), a2);
      }
      v14 = 1;
    }
    else
    {
LABEL_20:
      v14 = 0;
    }
    v15 = __ldxr(v4);
    if (v15 != 1)
      break;
    if (__stlxr(0, v4))
      goto LABEL_26;
    if (!v14)
      goto LABEL_54;
LABEL_27:
    v16 = (WTF::MonotonicTime *)kdebug_trace();
    v17 = *(double *)(*(_QWORD *)(a1 + 8) + 296);
    v18 = 0.0;
    if (v17 > 0.0)
    {
      WTF::MonotonicTime::now(v16);
      v18 = v19;
    }
    (*(void (**)(CGImageRef *__return_ptr, _QWORD, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 32) + 176))(&image, *(_QWORD *)(a1 + 32), *(unsigned int *)v51, *(unsigned int *)&v51[4], &v51[12]);
    if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
      goto LABEL_59;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    Width = (size_t)image;
    if (!image || (Width = CGImageGetWidth(image), Width >> 31) || (Width = CGImageGetHeight(image), Width >> 31))
    {
      v24 = 0;
    }
    else
    {
      v22 = (_QWORD *)operator new();
      v23 = image;
      image = 0;
      *v22 = &off_1E340E810;
      v22[1] = v23;
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      Width = WTF::fastMalloc((WTF *)0x20);
      *(_BYTE *)Width = 0;
      *(_OWORD *)(Width + 8) = xmmword_19689B170;
      *(_QWORD *)(Width + 24) = v24;
      v24[2] = 0;
      v24[3] = 0;
      v24[4] = IdentifierInternal;
      v24[5] = 1;
      *v24 = off_1E340E858;
      v24[1] = Width;
      v24[6] = v22;
    }
    if (v17 > 0.0)
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)Width);
      if (v17 > v25 - v18)
        WTF::sleep();
    }
    v26 = *(unsigned int **)(a1 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v44 = (uint64_t)v26;
    v28 = *(_QWORD *)(a1 + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28);
    v45 = v28;
    v29 = *(_QWORD *)(a1 + 24);
    v30 = *(_QWORD *)(v29 + 8);
    if (__ldaxr((unsigned __int8 *)v30))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v30))
    {
      goto LABEL_43;
    }
    MEMORY[0x19AEA534C](v30);
LABEL_43:
    ++*(_QWORD *)(v30 + 8);
    v32 = __ldxr((unsigned __int8 *)v30);
    if (v32 != 1)
    {
      __clrex();
LABEL_47:
      WTF::Lock::unlockSlow((WTF::Lock *)v30);
      goto LABEL_48;
    }
    if (__stlxr(0, (unsigned __int8 *)v30))
      goto LABEL_47;
LABEL_48:
    v47[0] = *(_OWORD *)v51;
    *(_OWORD *)((char *)v47 + 12) = *(_OWORD *)&v51[12];
    v46 = v29;
    v48 = v24;
    v33 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v33 = off_1E340D6C0;
    *(_QWORD *)(v33 + 8) = v44;
    v34 = v45;
    v44 = 0;
    v45 = 0;
    *(_QWORD *)(v33 + 16) = v34;
    *(_QWORD *)(v33 + 24) = v46;
    v35 = *(_OWORD *)((char *)v47 + 12);
    *(_OWORD *)(v33 + 32) = v47[0];
    *(_OWORD *)(v33 + 44) = v35;
    v36 = v48;
    v46 = 0;
    v48 = 0;
    v49 = v33;
    *(_QWORD *)(v33 + 64) = v36;
    WTF::callOnMainThread();
    v38 = v49;
    v49 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#1}::~((uint64_t)&v44, v37);
    v39 = image;
    image = 0;
    if (v39)
      CFRelease(v39);
    kdebug_trace();
  }
  __clrex();
LABEL_26:
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 4));
  if (v14)
    goto LABEL_27;
LABEL_54:
  v40 = *(_QWORD *)(a1 + 24);
  v43 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v41 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v41 = off_1E340D6E8;
  *(_OWORD *)(v41 + 8) = v43;
  *(_QWORD *)(v41 + 24) = v40;
  v44 = v41;
  WTF::callOnMainThread();
  result = v44;
  v44 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#1}::~(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  WebCore::ImageFrameWorkQueue *v26;

  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v24 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v24 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v11)
    goto LABEL_35;
  v12 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_23:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v25 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v25 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      goto LABEL_35;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_30;
  if (v15)
    goto LABEL_35;
LABEL_31:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    WTF::fastFree((WTF *)v12, a2);
LABEL_35:
  v19 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
  v20 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      v26 = (WebCore::ImageFrameWorkQueue *)v20;
      WTF::ThreadSafeRefCounted<WebCore::ImageFrameWorkQueue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v26, a2);
    }
  }
  return a1;
}

uint64_t WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#2}::~(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  WebCore::ImageFrameWorkQueue *v17;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v16 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v16 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
  v12 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v17 = (WebCore::ImageFrameWorkQueue *)v12;
      WTF::ThreadSafeRefCounted<WebCore::ImageFrameWorkQueue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v17, a2);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E340D6C0;
  WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#1}::~((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E340D6C0;
  WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#1}::~((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t *result, void *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  int v21;

  v2 = (_QWORD *)result[1];
  if (v2[36] != result[2])
    return result;
  v3 = result;
  v4 = result[3];
  v5 = v2[1];
  if (!v5)
  {
    if (v4)
      return result;
LABEL_4:
    v6 = v3[1];
    v7 = *(_QWORD *)(v6 + 32);
    if (v7 == *(_QWORD *)(v6 + 40))
      return result;
    v8 = *(_QWORD *)(v6 + 48);
    v9 = *(unsigned int *)(v8 + 28 * v7);
    if ((_DWORD)v9 != *((_DWORD *)v3 + 8))
      return result;
    v10 = *(_DWORD *)(v8 + 28 * v7 + 4);
    if (v10 != *((_DWORD *)v3 + 9))
      return result;
    v11 = *((unsigned __int8 *)v3 + 40);
    if ((*(_BYTE *)(v8 + 28 * v7 + 8) == 0) == (*((_BYTE *)v3 + 40) != 0)
      || *(unsigned __int8 *)(v8 + 28 * v7 + 12) != *((unsigned __int8 *)v3 + 44))
    {
      return result;
    }
    v12 = *((unsigned __int8 *)v3 + 56);
    if (*(_BYTE *)(v8 + 28 * v7 + 24))
      v13 = v12 == 0;
    else
      v13 = 1;
    if (v13)
    {
      if ((*(_BYTE *)(v8 + 28 * v7 + 24) != 0) != (v12 != 0))
        return result;
    }
    else
    {
      v14 = v8 + 28 * v7;
      v16 = *(_DWORD *)(v14 + 16);
      v15 = *(_DWORD *)(v14 + 20);
      if (v16 != *((_DWORD *)v3 + 12) || v15 != *((_DWORD *)v3 + 13))
        return result;
    }
    if (v7 == *(unsigned int *)(v6 + 56) - 1)
      v18 = 0;
    else
      v18 = v7 + 1;
    *(_QWORD *)(v6 + 32) = v18;
    return WebCore::BitmapImageSource::imageFrameDecodeAtIndexHasFinished((uint64_t **)v3[3], v9, v10, v11 != 0, (uint64_t)v3 + 44, v3 + 8);
  }
  v19 = v2[2];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_30;
  }
  result = (uint64_t *)MEMORY[0x19AEA534C](v5);
LABEL_30:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v19 = 0;
  v21 = __ldxr((unsigned __int8 *)v5);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_36:
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v19)
    result = (uint64_t *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageSource,(WTF::DestructionThread)0>::deref(*(unsigned __int8 **)(v19 + 8), a2);
  if (v19 == v4)
    goto LABEL_4;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E340D6E8;
  WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#2}::~((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E340D6E8;
  WebCore::ImageFrameWorkQueue::start(void)::$_0::operator()(void)::{lambda(void)#2}::~((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Condition::wait<WTF::SynchronizedFixedQueue<WebCore::ImageFrameWorkQueue::Request,8ul>::enqueue(WebCore::ImageFrameWorkQueue::Request const&)::{lambda(void)#1}>(uint64_t result, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;

  v3 = *a3;
  if (*(_BYTE *)(*a3 + 6))
  {
    v6 = result;
    do
    {
      v7 = *(_QWORD *)(v3 + 8);
      v8 = *(_QWORD *)(v3 + 16);
      if (v7 > v8)
        v8 += *(unsigned int *)(v3 + 32);
      if (v8 - v7 < 8)
        break;
      v9 = 0x7FF0000000000000;
      v10 = 0;
      result = WTF::Condition::waitUntilUnchecked<WTF::Lock>(v6, a2, (WTF::TimeWithDynamicClockType *)&v9);
      v3 = *a3;
    }
    while (*(_BYTE *)(*a3 + 6));
  }
  return result;
}

uint64_t WTF::Deque<WebCore::ImageFrameWorkQueue::Request,8ul>::expandCapacity(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;

  v1 = *(unsigned int *)(result + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x9249249)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = *(WTF **)(result + 16);
    v5 = 28 * v2 + 28;
    result = WTF::fastMalloc((WTF *)(28 * v2 + 28));
    v7 = v5 / 0x1C;
    *(_DWORD *)(v3 + 24) = v5 / 0x1C;
    *(_QWORD *)(v3 + 16) = result;
    v8 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 <= v9)
    {
      if (*(_QWORD *)v3 != v9)
      {
        v20 = 28 * v8;
        v21 = (_OWORD *)(result + 28 * v8);
        v22 = (__int128 *)((char *)v4 + v20);
        v23 = 28 * v9 - v20;
        do
        {
          v24 = *v22;
          *(_OWORD *)((char *)v21 + 12) = *(__int128 *)((char *)v22 + 12);
          *v21 = v24;
          v21 = (_OWORD *)((char *)v21 + 28);
          v22 = (__int128 *)((char *)v22 + 28);
          v23 -= 28;
        }
        while (v23);
      }
    }
    else
    {
      if (v9)
      {
        v10 = 28 * v9;
        v11 = v4;
        do
        {
          v12 = *(_OWORD *)v11;
          *(_OWORD *)(result + 12) = *(_OWORD *)((char *)v11 + 12);
          *(_OWORD *)result = v12;
          result += 28;
          v11 = (WTF *)((char *)v11 + 28);
          v10 -= 28;
        }
        while (v10);
        v7 = *(_DWORD *)(v3 + 24);
        v8 = *(_QWORD *)v3;
        result = *(_QWORD *)(v3 + 16);
      }
      v13 = v8 - v1 + v7;
      if (v8 != v1)
      {
        v14 = 28 * v8;
        v15 = (__int128 *)((char *)v4 + 28 * v8);
        v16 = result + 28 * v7;
        v17 = v14 - 28 * v1;
        do
        {
          v18 = (_OWORD *)(v16 + v17);
          v19 = *v15;
          *(_OWORD *)((char *)v18 + 12) = *(__int128 *)((char *)v15 + 12);
          *v18 = v19;
          v15 = (__int128 *)((char *)v15 + 28);
          v17 += 28;
        }
        while (v17);
      }
      *(_QWORD *)v3 = v13;
    }
    if ((WTF *)(v3 + 32) != v4 && v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

int *WebCore::IntSize::IntSize(int *this, const WebCore::FloatSize *a2)
{
  float v2;
  float v3;
  int v4;
  int v5;

  v3 = *(float *)a2;
  v2 = *((float *)a2 + 1);
  if (*(float *)a2 > -2147500000.0)
    v4 = (int)*(float *)a2;
  else
    v4 = 0x80000000;
  if (v3 < 2147500000.0)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  if (v3 < 2147500000.0 && v3 > -2147500000.0)
    v5 = (int)*(float *)a2;
  *this = v5;
  if (v2 < 2147500000.0 && v2 > -2147500000.0)
    goto LABEL_16;
  if (v2 >= 2147500000.0)
  {
    this[1] = 0x7FFFFFFF;
  }
  else
  {
    if (v2 > -2147500000.0)
    {
LABEL_16:
      this[1] = (int)v2;
      return this;
    }
    this[1] = 0x80000000;
  }
  return this;
}

{
  float v2;
  int v3;
  int v4;
  int v5;

  v2 = *((float *)a2 + 1);
  if (*(float *)a2 > -2147500000.0)
    v3 = (int)*(float *)a2;
  else
    v3 = 0x80000000;
  if (*(float *)a2 < 2147500000.0)
    v4 = v3;
  else
    v4 = 0x7FFFFFFF;
  *this = v4;
  if (v2 >= 2147500000.0)
  {
    v5 = 0x7FFFFFFF;
  }
  else if (v2 <= -2147500000.0)
  {
    v5 = 0x80000000;
  }
  else
  {
    v5 = (int)v2;
  }
  this[1] = v5;
  return this;
}

WTF::StringImpl *WebCore::IntSize::toJSONObject@<X0>(WebCore::IntSize *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::JSONImpl::Value *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  _BYTE v30[16];
  char v31;

  WTF::JSONImpl::Object::create(this);
  v4 = *a2;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, (double)*(int *)this);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v28, (const WTF::StringImpl *)&v29, (uint64_t)v30);
  if (v31)
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v22 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v28);
      v8 = *(unsigned int *)(v4 + 36);
      v23 = *(_QWORD *)(v4 + 24);
      v24 = *v22;
      if (*v22)
        *v24 += 2;
      *(_QWORD *)(v23 + 8 * v8) = v24;
    }
    else
    {
      v9 = *v7;
      v10 = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v29;
  v29 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *a2;
  v14 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v14, (double)*((int *)this + 1));
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v13 + 16), &v28, (const WTF::StringImpl *)&v29, (uint64_t)v30);
  if (v31)
  {
    v16 = (uint64_t *)(v13 + 24);
    v17 = *(unsigned int *)(v13 + 36);
    if ((_DWORD)v17 == *(_DWORD *)(v13 + 32))
    {
      v25 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v28);
      v17 = *(unsigned int *)(v13 + 36);
      v26 = *(_QWORD *)(v13 + 24);
      v27 = *v25;
      if (*v25)
        *v27 += 2;
      *(_QWORD *)(v26 + 8 * v17) = v27;
    }
    else
    {
      v18 = *v16;
      v19 = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
    }
    *(_DWORD *)(v13 + 36) = v17 + 1;
  }
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v20;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::LayoutRect::intersects(WebCore::LayoutRect *this, const WebCore::LayoutRect *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;

  v2 = *((_DWORD *)this + 2);
  if (v2 < 1)
    return 0;
  v3 = *((_DWORD *)this + 3);
  if (v3 < 1)
    return 0;
  v5 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a2 + 3);
  if (v5 < 1 || v4 < 1)
    return 0;
  v7 = *(_DWORD *)this;
  v8 = *(_DWORD *)a2 + v5;
  if (__OFADD__(*(_DWORD *)a2, v5))
    v8 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  if (v7 >= v8)
    return 0;
  v9 = __OFADD__(v7, v2);
  v10 = v7 + v2;
  v11 = (v7 >> 31) + 0x7FFFFFFF;
  if (v9)
    v10 = v11;
  if (*(_DWORD *)a2 >= v10)
    return 0;
  v12 = *((_DWORD *)this + 1);
  v13 = *((_DWORD *)a2 + 1);
  v14 = v13 + v4;
  if (__OFADD__(v13, v4))
    v14 = (v13 >> 31) + 0x7FFFFFFF;
  if (v12 >= v14)
    return 0;
  v9 = __OFADD__(v12, v3);
  v15 = v12 + v3;
  if (v9)
    v15 = (v12 >> 31) + 0x7FFFFFFF;
  return (int)v13 < v15;
}

BOOL WebCore::LayoutRect::contains(WebCore::LayoutRect *this, const WebCore::LayoutRect *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v2 = *(_DWORD *)this;
  v3 = *(_DWORD *)a2;
  if (*(_DWORD *)this > *(_DWORD *)a2)
    return 0;
  v4 = *((_DWORD *)this + 2);
  v5 = __OFADD__(v2, v4);
  v6 = v2 + v4;
  v7 = (v2 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v7 = v6;
  v8 = *((_DWORD *)a2 + 2);
  v5 = __OFADD__(v3, v8);
  v9 = v3 + v8;
  v10 = (v3 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v10 = v9;
  if (v7 < v10)
    return 0;
  v11 = *((_DWORD *)this + 1);
  v12 = *((_DWORD *)a2 + 1);
  if ((int)v11 > (int)v12)
    return 0;
  v13 = *((_DWORD *)this + 3);
  v5 = __OFADD__(v11, v13);
  v14 = v11 + v13;
  v15 = (v11 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v15 = v14;
  v16 = *((_DWORD *)a2 + 3);
  v5 = __OFADD__(v12, v16);
  v17 = v12 + v16;
  v18 = (v12 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v18 = v17;
  return v15 >= v18;
}

int *WebCore::LayoutRect::intersect(int *this, const WebCore::LayoutRect *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v2 = *this;
  v3 = this[1];
  v4 = *(_DWORD *)a2;
  v5 = *((_DWORD *)a2 + 1);
  if (*this <= *(_DWORD *)a2)
    v6 = *(_DWORD *)a2;
  else
    v6 = *this;
  if ((int)v3 <= (int)v5)
    v7 = *((_DWORD *)a2 + 1);
  else
    v7 = this[1];
  v8 = this[2];
  v9 = this[3];
  v10 = __OFADD__(v2, v8);
  v11 = v2 + v8;
  v12 = (v2 >> 31) + 0x7FFFFFFF;
  if (!v10)
    v12 = v11;
  v13 = *((_DWORD *)a2 + 2);
  v14 = *((_DWORD *)a2 + 3);
  v10 = __OFADD__(v4, v13);
  v15 = v4 + v13;
  v16 = (v4 >> 31) + 0x7FFFFFFF;
  if (!v10)
    v16 = v15;
  if (v16 < v12)
    v12 = v16;
  v10 = __OFADD__(v3, v9);
  v17 = v3 + v9;
  v18 = (v3 >> 31) + 0x7FFFFFFF;
  if (!v10)
    v18 = v17;
  v10 = __OFADD__(v5, v14);
  v19 = v5 + v14;
  v20 = (v5 >> 31) + 0x7FFFFFFF;
  if (v10)
    v19 = v20;
  if (v19 < v18)
    v18 = v19;
  v21 = v6 < v12 && v7 < v18;
  if (v21)
  {
    v22 = v6;
  }
  else
  {
    v12 = 0;
    v18 = 0;
    v22 = 0;
  }
  if (v21)
    v23 = v7;
  else
    v23 = 0;
  v24 = v22 | (v23 << 32);
  v10 = __OFSUB__(v12, (_DWORD)v22);
  v25 = v12 - v22;
  LODWORD(v26) = (v12 >> 31) + 0x7FFFFFFF;
  if (v10)
    v26 = v26;
  else
    v26 = v25;
  v10 = __OFSUB__(v18, (_DWORD)v23);
  v27 = v18 - v23;
  LODWORD(v28) = (v18 >> 31) + 0x7FFFFFFF;
  if (v10)
    v28 = v28;
  else
    v28 = v27;
  *(_QWORD *)this = v24;
  *((_QWORD *)this + 1) = v26 | (v28 << 32);
  return this;
}

int *WebCore::LayoutRect::scale(int *this, float a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  double v5;
  int v6;
  int v7;
  double v8;
  int v9;
  int v10;
  double v11;
  int v12;
  double v13;
  int v14;

  v2 = this[1];
  v3 = *this == -1073741808 && v2 == -1073741808;
  if (!v3 || (this[2] == 2147483615 ? (v4 = this[3] == 2147483615) : (v4 = 0), !v4))
  {
    v5 = (float)((float)((float)*this * 0.015625) * a2) * 64.0;
    if (v5 > -2147483650.0)
      v6 = (int)v5;
    else
      v6 = 0x80000000;
    if (v5 < 2147483650.0)
      v7 = v6;
    else
      v7 = 0x7FFFFFFF;
    *this = v7;
    v8 = (float)((float)((float)v2 * 0.015625) * a2) * 64.0;
    if (v8 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFF;
    }
    else if (v8 <= -2147483650.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v8;
    }
    v10 = this[3];
    v11 = (float)((float)((float)this[2] * 0.015625) * a2) * 64.0;
    if (v11 > -2147483650.0)
      v12 = (int)v11;
    else
      v12 = 0x80000000;
    if (v11 >= 2147483650.0)
      v12 = 0x7FFFFFFF;
    this[1] = v9;
    this[2] = v12;
    v13 = (float)((float)((float)v10 * 0.015625) * a2) * 64.0;
    if (v13 >= 2147483650.0)
    {
      v14 = 0x7FFFFFFF;
    }
    else if (v13 <= -2147483650.0)
    {
      v14 = 0x80000000;
    }
    else
    {
      v14 = (int)v13;
    }
    this[3] = v14;
  }
  return this;
}

int *WebCore::LayoutRect::scale(int *this, float a2, float a3)
{
  int v3;
  BOOL v4;
  BOOL v5;
  double v6;
  int v7;
  int v8;
  double v9;
  int v10;
  int v11;
  double v12;
  int v13;
  double v14;
  int v15;

  v3 = this[1];
  v4 = *this == -1073741808 && v3 == -1073741808;
  if (!v4 || (this[2] == 2147483615 ? (v5 = this[3] == 2147483615) : (v5 = 0), !v5))
  {
    v6 = (float)((float)((float)*this * 0.015625) * a2) * 64.0;
    if (v6 > -2147483650.0)
      v7 = (int)v6;
    else
      v7 = 0x80000000;
    if (v6 < 2147483650.0)
      v8 = v7;
    else
      v8 = 0x7FFFFFFF;
    *this = v8;
    v9 = (float)((float)((float)v3 * 0.015625) * a3) * 64.0;
    if (v9 >= 2147483650.0)
    {
      v10 = 0x7FFFFFFF;
    }
    else if (v9 <= -2147483650.0)
    {
      v10 = 0x80000000;
    }
    else
    {
      v10 = (int)v9;
    }
    v11 = this[3];
    v12 = (float)((float)((float)this[2] * 0.015625) * a2) * 64.0;
    if (v12 > -2147483650.0)
      v13 = (int)v12;
    else
      v13 = 0x80000000;
    if (v12 >= 2147483650.0)
      v13 = 0x7FFFFFFF;
    this[1] = v10;
    this[2] = v13;
    v14 = (float)((float)((float)v11 * 0.015625) * a3) * 64.0;
    if (v14 >= 2147483650.0)
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147483650.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v14;
    }
    this[3] = v15;
  }
  return this;
}

uint64_t WebCore::LayoutRect::expandToInfiniteY(uint64_t this)
{
  *(_DWORD *)(this + 4) = -1073741808;
  *(_DWORD *)(this + 12) = 2147483615;
  return this;
}

_DWORD *WebCore::LayoutRect::expandToInfiniteX(_DWORD *this)
{
  *this = -1073741808;
  this[2] = 2147483615;
  return this;
}

unint64_t WebCore::unionRect(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  v1 = a1[3];
  if ((_DWORD)v1)
  {
    v3 = **(_DWORD **)a1;
    v2 = *(unsigned int *)(*(_QWORD *)a1 + 4);
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if ((_DWORD)v1 != 1)
    {
      v6 = v1 - 1;
      v7 = (_DWORD *)(*(_QWORD *)a1 + 16);
      do
      {
        v9 = v7[2];
        v8 = v7[3];
        if (v9 >= 1 && v8 >= 1)
        {
          if ((int)v4 < 1 || (v11 = HIDWORD(v4), v4 <= 0))
          {
            v3 = *v7;
            v2 = v7[1];
            v4 = *((_QWORD *)v7 + 1);
          }
          else
          {
            v12 = *v7;
            v13 = v7[1];
            if (*v7 >= (signed int)v3)
              v14 = v3;
            else
              v14 = *v7;
            if ((int)v13 >= (int)v2)
              v15 = v2;
            else
              v15 = v13;
            v16 = __OFADD__(v3, (_DWORD)v4);
            v17 = v3 + v4;
            v18 = (v3 >> 31) + 0x7FFFFFFF;
            if (!v16)
              v18 = v17;
            v16 = __OFADD__(v12, v9);
            v19 = v12 + v9;
            v20 = (v12 >> 31) + 0x7FFFFFFF;
            if (v16)
              v19 = v20;
            if (v18 <= v19)
              v18 = v19;
            v16 = __OFADD__((_DWORD)v2, (_DWORD)v11);
            v21 = v2 + v11;
            v22 = (v2 >> 31) + 0x7FFFFFFF;
            if (!v16)
              v22 = v21;
            v16 = __OFADD__(v13, v8);
            v23 = v13 + v8;
            if (v16)
              v23 = (v13 >> 31) + 0x7FFFFFFF;
            if ((int)v22 <= v23)
              v22 = v23;
            v16 = __OFSUB__(v18, v14);
            v24 = v18 - v14;
            LODWORD(v25) = (v18 >> 31) + 0x7FFFFFFF;
            if (v16)
              v25 = v25;
            else
              v25 = v24;
            v16 = __OFSUB__(v22, (_DWORD)v15);
            v26 = v22 - v15;
            LODWORD(v27) = (v22 >> 31) + 0x7FFFFFFF;
            if (v16)
              v27 = v27;
            else
              v27 = v26;
            v4 = v25 | (v27 << 32);
            v3 = v14;
            v2 = v15;
          }
        }
        v7 += 4;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  return v3 | (unint64_t)(v2 << 32);
}

uint64_t WebCore::enclosingLayoutRect(WebCore *this, const WebCore::FloatRect *a2)
{
  float v2;
  int v3;
  uint64_t v4;
  float v6;
  int v7;
  uint64_t v8;

  v2 = floorf(*(float *)this * 64.0);
  if (v2 > -2147500000.0)
    v3 = (int)v2;
  else
    v3 = 0x80000000;
  if (v2 < 2147500000.0)
    LODWORD(v4) = v3;
  else
    LODWORD(v4) = 0x7FFFFFFF;
  if (v2 >= 2147500000.0 || v2 <= -2147500000.0)
    v4 = v4;
  else
    v4 = (int)v2;
  v6 = floorf(*((float *)this + 1) * 64.0);
  if (v6 > -2147500000.0)
    v7 = (int)v6;
  else
    v7 = 0x80000000;
  if (v6 < 2147500000.0)
    LODWORD(v8) = v7;
  else
    LODWORD(v8) = 0x7FFFFFFF;
  if (v6 >= 2147500000.0 || v6 <= -2147500000.0)
    v8 = v8;
  else
    v8 = (int)v6;
  return v4 | (v8 << 32);
}

uint64_t WebCore::MIMESniffer::getMIMETypeFromContent@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unint64_t v6;
  _DWORD *v13;
  uint64_t *v14;
  _BYTE *v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t i;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  _DWORD *v50;

  v4 = (unsigned __int8 *)result;
  if (_MergedGlobals_227 == 1)
  {
    v6 = qword_1ECE83CC0;
    if (a2 < qword_1ECE83CC0 || qword_1ECE83CC0 != qword_1ECE83CB0)
      goto LABEL_6;
    v14 = &qword_1ECE83CA8;
    if (!qword_1ECE83CC0)
      goto LABEL_58;
    v15 = (_BYTE *)qword_1ECE83CB8;
    v16 = (const char *)qword_1ECE83CA8;
  }
  else
  {
    v16 = "FORM";
    v6 = 12;
    qword_1ECE83CA8 = (uint64_t)"FORM";
    qword_1ECE83CB0 = 12;
    v15 = &unk_1969F7C9D;
    qword_1ECE83CB8 = (uint64_t)&unk_1969F7C9D;
    qword_1ECE83CC0 = 12;
    qword_1ECE83CC8 = (uint64_t)"audio/aiff";
    qword_1ECE83CD0 = 11;
    qword_1ECE83CD8 = (uint64_t)"ID3";
    qword_1ECE83CE0 = 3;
    qword_1ECE83CE8 = (uint64_t)"\xFF\xFF\xFF";
    qword_1ECE83CF0 = 3;
    qword_1ECE83CF8 = (uint64_t)"audio/mpeg";
    qword_1ECE83D00 = 11;
    qword_1ECE83D08 = (uint64_t)"OggS";
    qword_1ECE83D10 = 5;
    qword_1ECE83D18 = (uint64_t)"\xFF\xFF\xFF\xFF\xFF";
    qword_1ECE83D20 = 5;
    qword_1ECE83D28 = (uint64_t)"application/ogg";
    qword_1ECE83D30 = 16;
    qword_1ECE83D38 = (uint64_t)&unk_1969F7CB0;
    qword_1ECE83D40 = 11;
    qword_1ECE83D48 = (uint64_t)"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF";
    qword_1ECE83D50 = 8;
    qword_1ECE83D58 = (uint64_t)"audio/midi";
    qword_1ECE83D60 = 11;
    qword_1ECE83D68 = (uint64_t)&unk_1969F7C80;
    qword_1ECE83D70 = 15;
    qword_1ECE83D78 = (uint64_t)&unk_1969F7C9D;
    qword_1ECE83D80 = 12;
    qword_1ECE83D88 = (uint64_t)"video/avi";
    qword_1ECE83D90 = 10;
    qword_1ECE83D98 = (uint64_t)"RIFF";
    qword_1ECE83DA0 = 12;
    qword_1ECE83DA8 = (uint64_t)&unk_1969F7C9D;
    qword_1ECE83DB0 = 12;
    qword_1ECE83DB8 = (uint64_t)"audio/wave";
    qword_1ECE83DC0 = 11;
    _MergedGlobals_227 = 1;
    if (a2 <= 0xB)
      goto LABEL_6;
  }
  v17 = 0;
  v18 = 1;
  v14 = &qword_1ECE83CA8;
  while (v16[v17] == (*(_BYTE *)(result + v17) & v15[v17]))
  {
    v17 = v18;
    v19 = v6 > v18++;
    if (!v19)
      goto LABEL_58;
  }
LABEL_6:
  if (a2 >= qword_1ECE83CF0 && qword_1ECE83CF0 == qword_1ECE83CE0)
  {
    v14 = &qword_1ECE83CD8;
    if (!qword_1ECE83CF0)
      goto LABEL_58;
    v20 = 0;
    v21 = 1;
    while (*(unsigned __int8 *)(qword_1ECE83CD8 + v20) == (*(_BYTE *)(result + v20) & *(_BYTE *)(qword_1ECE83CE8 + v20)))
    {
      v20 = v21;
      v19 = qword_1ECE83CF0 > (unint64_t)v21++;
      if (!v19)
        goto LABEL_58;
    }
  }
  if (a2 >= qword_1ECE83D20 && qword_1ECE83D20 == qword_1ECE83D10)
  {
    v14 = &qword_1ECE83D08;
    if (!qword_1ECE83D20)
      goto LABEL_58;
    v22 = 0;
    v23 = 1;
    while (*(unsigned __int8 *)(qword_1ECE83D08 + v22) == (*(_BYTE *)(result + v22) & *(_BYTE *)(qword_1ECE83D18 + v22)))
    {
      v22 = v23;
      v19 = qword_1ECE83D20 > (unint64_t)v23++;
      if (!v19)
        goto LABEL_58;
    }
  }
  if (a2 >= qword_1ECE83D50 && qword_1ECE83D50 == qword_1ECE83D40)
  {
    v14 = &qword_1ECE83D38;
    if (!qword_1ECE83D50)
      goto LABEL_58;
    v24 = 0;
    v25 = 1;
    while (*(unsigned __int8 *)(qword_1ECE83D38 + v24) == (*(_BYTE *)(result + v24) & *(_BYTE *)(qword_1ECE83D48 + v24)))
    {
      v24 = v25;
      v19 = qword_1ECE83D50 > (unint64_t)v25++;
      if (!v19)
        goto LABEL_58;
    }
  }
  if (a2 >= qword_1ECE83D80 && qword_1ECE83D80 == qword_1ECE83D70)
  {
    v14 = &qword_1ECE83D68;
    if (!qword_1ECE83D80)
      goto LABEL_58;
    v26 = 0;
    v27 = 1;
    while (*(unsigned __int8 *)(qword_1ECE83D68 + v26) == (*(_BYTE *)(result + v26) & *(_BYTE *)(qword_1ECE83D78 + v26)))
    {
      v26 = v27;
      v19 = qword_1ECE83D80 > (unint64_t)v27++;
      if (!v19)
        goto LABEL_58;
    }
  }
  if (a2 < qword_1ECE83DB0 || qword_1ECE83DB0 != qword_1ECE83DA0)
    goto LABEL_26;
  v14 = &qword_1ECE83D98;
  if (qword_1ECE83DB0)
  {
    v28 = 0;
    v29 = 1;
    while (*(unsigned __int8 *)(qword_1ECE83D98 + v28) == (*(_BYTE *)(result + v28) & *(_BYTE *)(qword_1ECE83DA8 + v28)))
    {
      v28 = v29;
      v19 = qword_1ECE83DB0 > (unint64_t)v29++;
      if (!v19)
        goto LABEL_58;
    }
LABEL_26:
    v13 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (!*MEMORY[0x1E0CBF6F0])
      goto LABEL_61;
    goto LABEL_27;
  }
LABEL_58:
  v30 = v14[5];
  if (!v30)
    goto LABEL_62;
  if (v30 == 1)
  {
    v13 = (_DWORD *)MEMORY[0x1E0CBEF70];
LABEL_27:
    *v13 += 2;
    goto LABEL_61;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = v50;
LABEL_61:
  *a3 = v13;
  if (v13)
    return result;
LABEL_62:
  *a3 = 0;
  if (a2 >= 0xC)
  {
    v31 = *v4;
    v32 = v4[3];
    if ((v32 & 3) == 0)
    {
      v33 = (v31 << 24) | (v4[1] << 16) | (v4[2] << 8) | v32;
      if (a2 >= v33 && v4[4] == 102 && v4[5] == 116 && v4[6] == 121 && v4[7] == 112)
      {
        if (v4[8] == 109 && v4[9] == 112 && v4[10] == 52)
          return WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (v33 >= 0x11)
        {
          v34 = 16;
          while (1)
          {
            if (v4[v34] == 109)
            {
              v35 = v34 + 1;
              if (a2 <= v35)
                goto LABEL_133;
              if (v4[v35] == 112)
              {
                v36 = v34 + 2;
                if (a2 <= v36)
                  goto LABEL_133;
                if (v4[v36] == 52)
                  return WTF::StringImpl::createWithoutCopyingNonEmpty();
              }
            }
            v34 += 4;
            if (v34 >= v33)
              goto LABEL_63;
          }
        }
      }
    }
LABEL_84:
    if (v31 == 26 && v4[1] == 69 && v4[2] == 223 && v4[3] == 163)
    {
      v37 = 38;
      if (a2 < 0x26)
        v37 = a2;
      if (v37 >= 5)
      {
        i = 4;
        while (1)
        {
          if (v4[i] == 66)
          {
            if (a2 <= i + 1)
              goto LABEL_133;
            if (v4[i + 1] == 130)
              break;
          }
LABEL_127:
          if (++i >= v37)
            goto LABEL_128;
        }
        v39 = i + 2;
        v40 = a2 - v39;
        if (a2 > v39)
        {
          if (v40 < 2)
          {
            v43 = 1;
LABEL_105:
            if (a2 == v39)
              goto LABEL_133;
          }
          else
          {
            if (v40 - 2 >= 6)
              v41 = 6;
            else
              v41 = v40 - 2;
            result = 128;
            v42 = -1;
            while ((result & v4[v39]) == 0)
            {
              result = result >> 1;
              if (v41 == ++v42)
              {
                v43 = v41 + 2;
                goto LABEL_105;
              }
            }
            v43 = v42 + 2;
          }
          if (v40 <= 1)
            v44 = 1;
          else
            v44 = a2 - v39;
          if (v40 <= 2)
            v45 = 2;
          else
            v45 = a2 - v39;
          v46 = v44 - 1;
          v47 = v45 - 2;
          if (v46 >= v45 - 2)
            v48 = v45 - 2;
          else
            v48 = v46;
          if (v48 >= (v43 - 1))
          {
            for (i = v39 + v43; a2 > i; ++i)
            {
              if (v4[i])
              {
                if (i >= a2 - 4)
                  goto LABEL_128;
                if (v4[i] == 119 && v4[i + 1] == 101 && v4[i + 2] == 98 && v4[i + 3] == 109)
                  return WTF::StringImpl::createWithoutCopyingNonEmpty();
                goto LABEL_127;
              }
            }
            goto LABEL_133;
          }
          if (v46 <= v47)
          {
LABEL_133:
            __break(1u);
            return WTF::StringImpl::createWithoutCopyingNonEmpty();
          }
        }
      }
    }
    goto LABEL_128;
  }
LABEL_63:
  if (a2 >= 4)
  {
    v31 = *v4;
    goto LABEL_84;
  }
LABEL_128:
  v49 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v49 += 2;
  *a3 = v49;
  return result;
}

char *WebCore::MIMETypeCache::supportedTypes(WebCore::MIMETypeCache *this)
{
  char *v1;
  char *result;

  v1 = (char *)this + 8;
  if (*((_BYTE *)this + 16))
    return v1;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  result = (char *)(*(uint64_t (**)(WebCore::MIMETypeCache *, char *))(*(_QWORD *)this + 56))(this, (char *)this + 8);
  if (*((_BYTE *)this + 16))
    return v1;
  __break(1u);
  return result;
}

uint64_t WebCore::MIMETypeCache::supportsContainerType(WebCore::MIMETypeCache *this, WTF::StringImpl **a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  unint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  int v14;

  result = (*(uint64_t (**)(WebCore::MIMETypeCache *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)result)
  {
    if (!*a2
      || !*((_DWORD *)*a2 + 1)
      || ((*(uint64_t (**)(WebCore::MIMETypeCache *, WTF::StringImpl **))(*(_QWORD *)this + 48))(this, a2) & 1) != 0)
    {
      return 0;
    }
    v5 = *a2;
    if (*a2)
    {
      v6 = *((_QWORD *)v5 + 1);
      v7 = *((unsigned int *)v5 + 1) | ((unint64_t)((*((_DWORD *)v5 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v6 = 0;
      v7 = 0x100000000;
    }
    if (((*(uint64_t (**)(WebCore::MIMETypeCache *, uint64_t, unint64_t))(*(_QWORD *)this + 40))(this, v6, v7) & 1) != 0)return 1;
    v9 = *(_QWORD *)(*(uint64_t (**)(WebCore::MIMETypeCache *))(*(_QWORD *)this + 32))(this);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = *((_DWORD *)*a2 + 4);
      if (v11 < 0x100)
        v12 = WTF::StringImpl::hashSlowCase(*a2);
      else
        v12 = v11 >> 8;
      for (i = 0; ; v12 = i + v14)
      {
        v14 = v12 & v10;
        result = *(_QWORD *)(v9 + 8 * (v12 & v10));
        if (!result)
          break;
        if (result != -1 && (WTF::equal((WTF *)result, *a2, v8) & 1) != 0)
          return 1;
        ++i;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::MIMETypeCache::canDecodeType(WebCore::MIMETypeCache *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  double v10;
  double v11;
  float v12;
  WTF::StringImpl *v13;
  float v14;
  int v15;
  WTF::StringImpl *v16;
  WebCore::MIMETypeCache *v17;
  double v18;
  double v19;
  float v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[3];
  _BYTE v24[12];
  int v25;
  WTF::StringImpl *v26;
  char v27;

  if (!*a2 || !*((_DWORD *)*a2 + 1))
    return 0;
  v7 = (uint64_t *)((char *)this + 24);
  if (*((_BYTE *)this + 32))
  {
    result = WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::find((uint64_t *)this + 3, a2, a3);
    if (!*((_BYTE *)this + 32))
      goto LABEL_34;
    v8 = *v7;
    if (*v7)
      v8 += 16 * *(unsigned int *)(v8 - 4);
    if (v8 != result)
      return *(unsigned __int8 *)(result + 8);
  }
  v27 = 0;
  v3 = 0;
  if ((*(unsigned int (**)(WebCore::MIMETypeCache *))(*(_QWORD *)this + 16))(this))
  {
    if (!*a2 || !*((_DWORD *)*a2 + 1))
    {
      v3 = 0;
      goto LABEL_14;
    }
    WebCore::ContentType::ContentType((uint64_t)v23, (const WTF::String *)a2);
    WebCore::ContentType::containerType((WebCore::ContentType *)v23, v10, v11, v12);
    if (WebCore::MIMETypeCache::supportsContainerType(this, &v26))
    {
      WebCore::ContentType::codecs((WebCore::ContentType *)v23, (uint64_t)v24, v14);
      v15 = v25;
      v17 = (WebCore::MIMETypeCache *)WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v16);
      if (!v15)
      {
        v3 = 2;
        goto LABEL_23;
      }
      if (WebCore::MIMETypeCache::shouldOverrideExtendedType(v17, (const WebCore::ContentType *)v23, v18, v19, v20)|| (*(unsigned int (**)(WebCore::MIMETypeCache *, WTF::StringImpl **))(*(_QWORD *)this + 64))(this, v23))
      {
        v3 = 1;
LABEL_23:
        v27 = v3;
LABEL_25:
        v21 = v26;
        v26 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v13);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = v23[0];
        v23[0] = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v13);
          else
            *(_DWORD *)v22 -= 2;
        }
        goto LABEL_14;
      }
    }
    v3 = 0;
    goto LABEL_25;
  }
LABEL_14:
  if (*((_BYTE *)this + 32)
    || (v23[0] = 0,
        std::optional<WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>,void>((uint64_t)v7, (WTF::StringImpl *)v23), result = (uint64_t)WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::~HashMap((WTF::StringImpl ***)v23, v9), *((_BYTE *)this + 32)))
  {
    WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::add<WebCore::MediaPlayerSupportsType&>((uint64_t)v23, v7, a2, &v27);
    return v3;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::find(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 == (WTF *)-1)
      goto LABEL_9;
    if (!v11)
      break;
    if ((WTF::equal(v11, *a2, a3) & 1) != 0)
      return v3 + 16 * v10;
LABEL_9:
    ++i;
  }
  if (!*a1)
    return 0;
  return *a1 + 16 * *(unsigned int *)(*a1 - 4);
}

uint64_t WebCore::MIMETypeCache::shouldOverrideExtendedType(WebCore::MIMETypeCache *this, const WebCore::ContentType *a2, double a3, double a4, float a5)
{
  WTF::StringImpl *v6;
  float v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  unsigned int v23;

  WebCore::ContentType::containerType(a2, a3, a4, a5);
  v8 = v21;
  if (!v21)
    return 0;
  if (*((_DWORD *)v21 + 1) != 10)
    goto LABEL_5;
  v15 = *((_QWORD *)v21 + 1);
  if ((*((_BYTE *)v21 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v15 & 0xFFDF) == 0x41
      && (*(_WORD *)(v15 + 2) & 0xFFDF) == 0x55
      && (*(_WORD *)(v15 + 4) & 0xFFDF) == 0x44
      && (*(_WORD *)(v15 + 6) & 0xFFDF) == 0x49
      && (*(_WORD *)(v15 + 8) & 0xFFDF) == 0x4F
      && (*(_WORD *)(v15 + 10) & 0xFFDF) == 0xF
      && (*(_WORD *)(v15 + 12) & 0xFFDF) == 0x4D
      && (*(_WORD *)(v15 + 14) & 0xFFDF) == 0x50
      && (*(_WORD *)(v15 + 16) & 0xFFDF) == 0x45)
    {
      v16 = *(unsigned __int16 *)(v15 + 18);
      goto LABEL_25;
    }
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  if ((*(_BYTE *)v15 & 0xDF) != 0x41
    || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x55
    || (*(_BYTE *)(v15 + 2) & 0xDF) != 0x44
    || (*(_BYTE *)(v15 + 3) & 0xDF) != 0x49
    || (*(_BYTE *)(v15 + 4) & 0xDF) != 0x4F
    || (*(_BYTE *)(v15 + 5) & 0xDF) != 0xF
    || (*(_BYTE *)(v15 + 6) & 0xDF) != 0x4D
    || (*(_BYTE *)(v15 + 7) & 0xDF) != 0x50
    || (*(_BYTE *)(v15 + 8) & 0xDF) != 0x45)
  {
    goto LABEL_5;
  }
  v16 = *(unsigned __int8 *)(v15 + 9);
LABEL_25:
  v11 = (v16 & 0xFFFFFFDF) == 71;
LABEL_6:
  v21 = 0;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::destroy(v8, v6);
    if (v11)
      goto LABEL_8;
    return 0;
  }
  *(_DWORD *)v8 -= 2;
  if (!v11)
    return 0;
LABEL_8:
  WebCore::ContentType::codecs(a2, (uint64_t)&v21, v7);
  v13 = v23;
  if (v23 == 1)
  {
    v9 = MEMORY[0x19AEA53F4](*(_QWORD *)v21, "mp3", 3);
    v13 = v23;
  }
  else
  {
    v9 = 0;
  }
  if (v13)
  {
    v17 = v21;
    v18 = 8 * v13;
    do
    {
      v19 = *(WTF::StringImpl **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          v20 = v18;
          WTF::StringImpl::destroy(v19, v12);
          v18 = v20;
        }
        else
        {
          *(_DWORD *)v19 -= 2;
        }
      }
      v17 = (WTF::StringImpl *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  v14 = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    WTF::fastFree(v14, v12);
  }
  return v9;
}

uint64_t std::optional<WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>,void>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v4 = *(WTF::StringImpl ***)a1;
    *(_QWORD *)a1 = v3;
    if (v4)
    {
      v5 = *((unsigned int *)v4 - 1);
      if ((_DWORD)v5)
      {
        v6 = v4;
        do
        {
          v7 = *v6;
          if (*v6 != (WTF::StringImpl *)-1)
          {
            *v6 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, a2);
              else
                *(_DWORD *)v7 -= 2;
            }
          }
          v6 += 2;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 2), a2);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v8;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

WTF::StringImpl ***WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::~HashMap(WTF::StringImpl ***a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

WTF *WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::add<WebCore::MediaPlayerSupportsType&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, _BYTE *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int i;
  unsigned int v14;
  WTF *v15;
  WTF *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF *)(v8 + 16 * (v11 & v9));
    result = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = v8 + 16 * v14;
LABEL_13:
    v11 = i + v14;
  }
  if (!result)
  {
    if (v12)
    {
      result = 0;
      *(_QWORD *)v12 = 0;
      *(_BYTE *)(v12 + 8) = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = (WTF *)v12;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *(_QWORD *)v15 = v17;
    *((_BYTE *)v15 + 8) = *a4;
    v18 = *a2;
    if (*a2)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_29;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_34:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v26, (WTF::StringImpl **)v15);
        v15 = result;
        v22 = *a2;
        if (*a2)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_38;
      }
LABEL_29:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_34;
    }
LABEL_38:
    v28 = v22 + 16 * v25;
    v27 = 1;
    goto LABEL_39;
  }
  result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a2;
  if (*a2)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v27 = 0;
  v28 = v20 + 16 * v21;
LABEL_39:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v27;
  return result;
}

WTF *WebCore::MIMETypeCache::addSupportedTypes(WTF *result, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = result;
  if (!*((_BYTE *)result + 16))
  {
    *((_QWORD *)result + 1) = 0;
    *((_BYTE *)result + 16) = 1;
  }
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v4;
    while (*((_BYTE *)v3 + 16))
    {
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)v3 + 1, v5++, a3, (uint64_t)v7);
      v6 -= 8;
      if (!v6)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t WebCore::MIMETypeCache::isStaticContainerType()
{
  return 0;
}

uint64_t WebCore::MIMETypeCache::isUnsupportedContainerType(WebCore::MIMETypeCache *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::MIMETypeCache::isAvailable(WebCore::MIMETypeCache *this)
{
  return 1;
}

BOOL WebCore::MIMETypeCache::isEmpty(WebCore::MIMETypeCache *this)
{
  uint64_t v1;

  if (!*((_BYTE *)this + 16))
    return 0;
  v1 = *((_QWORD *)this + 1);
  return !v1 || *(_DWORD *)(v1 - 12) == 0;
}

uint64_t WebCore::MIMETypeCache::canDecodeExtendedType(WebCore::MIMETypeCache *this, const WebCore::ContentType *a2)
{
  return 0;
}

uint64_t WebCore::MediaPlayer::playerPrivate(WebCore::MediaPlayer *this)
{
  return *((_QWORD *)this + 9);
}

{
  return *((_QWORD *)this + 9);
}

uint64_t WebCore::MediaPlayer::mediaEngine(WebCore *a1)
{
  int v1;
  unint64_t v2;
  uint64_t result;

  v1 = (int)a1;
  WebCore::installedMediaEngines(a1);
  if (!dword_1ECE90EB4)
    return 0;
  v2 = 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                                                             + 8 * v2)
                                               + 16))(*(_QWORD *)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                                                                  + 8 * v2));
    if ((_DWORD)result == v1)
      break;
    if (++v2 >= dword_1ECE90EB4)
      return 0;
  }
  if (v2 < dword_1ECE90EB4)
    return *(_QWORD *)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines + 8 * v2);
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::installedMediaEngines(WebCore *this)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;

  if (__ldaxr(WebCore::mediaEngineVectorLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::mediaEngineVectorLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::mediaEngineVectorLock);
LABEL_5:
  if ((WebCore::haveMediaEnginesVector(void)::haveVector & 1) != 0)
    goto LABEL_26;
  if ((byte_1ECE83C51 & 1) != 0)
  {
    if (qword_1ECE83C58)
    {
      v2 = WebCore::s_platformStrategies;
      v6 = WebCore::s_platformStrategies;
      v3 = atomic_load((unint64_t *)(WebCore::s_platformStrategies + 24));
      if (v3 != -1)
      {
        v8 = &v6;
        v7 = &v8;
        std::__call_once((std::once_flag::_State_type *)(WebCore::s_platformStrategies + 24), &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformStrategies::mediaStrategy(void)::{lambda(void)#1} &&>>);
      }
      if (*(_BYTE *)(*(_QWORD *)(v2 + 32) + 8))
        (*(void (**)(uint64_t, unint64_t (*)(unint64_t), uint64_t))(*(_QWORD *)qword_1ECE83C58 + 16))(qword_1ECE83C58, WebCore::addMediaEngine, 8);
    }
  }
  else
  {
    qword_1ECE83C58 = 0;
    byte_1ECE83C51 = 1;
  }
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    goto LABEL_14;
  }
  if ((_BYTE)WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings)
  {
LABEL_14:
    if (WebCore::PlatformMediaSessionManager::m_alternateWebMPlayerEnabled)
    {
      if (qword_1ECE83C58)
        (*(void (**)(uint64_t, unint64_t (*)(unint64_t), uint64_t))(*(_QWORD *)qword_1ECE83C58 + 16))(qword_1ECE83C58, WebCore::addMediaEngine, 9);
      else
        WebCore::MediaPlayerPrivateWebM::registerMediaEngine((void (*)(_QWORD *))WebCore::addMediaEngine);
    }
    if (qword_1ECE83C58)
      (*(void (**)(uint64_t, unint64_t (*)(unint64_t), _QWORD))(*(_QWORD *)qword_1ECE83C58
                                                                                                 + 16))(qword_1ECE83C58, WebCore::addMediaEngine, 0);
    else
      WebCore::MediaPlayerPrivateAVFoundationObjC::registerMediaEngine((void (*)(_QWORD *))WebCore::addMediaEngine);
    if (qword_1ECE83C58)
      (*(void (**)(uint64_t, unint64_t (*)(unint64_t), uint64_t))(*(_QWORD *)qword_1ECE83C58
                                                                                                  + 16))(qword_1ECE83C58, WebCore::addMediaEngine, 1);
    else
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::registerMediaEngine((void (*)(_QWORD *))WebCore::addMediaEngine);
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::registerMediaEngine((void (*)(_QWORD *))WebCore::addMediaEngine);
  }
  WebCore::haveMediaEnginesVector(void)::haveVector = 1;
LABEL_26:
  v4 = __ldxr(WebCore::mediaEngineVectorLock);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, WebCore::mediaEngineVectorLock))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::mediaEngineVectorLock);
  {
    WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines = 0;
    *(_QWORD *)&dword_1ECE90EB0 = 0;
  }
  return &WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
}

const WebCore::MediaPlayerFactory *WebCore::MediaPlayer::nextMediaEngine(WebCore::MediaPlayer *this, const WebCore::MediaPlayerFactory *a2)
{
  WebCore::MediaPlayer *v3;
  int v4;
  unint64_t v5;
  const WebCore::MediaPlayerFactory *result;
  const WebCore::MediaPlayerFactory *v7;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int j;
  uint64_t v18;

  v3 = this;
  while (!*((_BYTE *)v3 + 169))
  {
    this = (WebCore::MediaPlayer *)WebCore::installedMediaEngines(this);
    if (!dword_1ECE90EB4)
      return 0;
    if (!a2)
      return *(const WebCore::MediaPlayerFactory **)WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines;
    for (i = 0; ; ++i)
    {
      v9 = i + 1;
      if (*(const WebCore::MediaPlayerFactory **)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                                                 + 8 * i) == a2)
        break;
      if (dword_1ECE90EB4 == v9)
        return 0;
    }
    if (v9 >= dword_1ECE90EB4)
      return 0;
    a2 = *(const WebCore::MediaPlayerFactory **)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                                               + 8 * i
                                               + 8);
    ++*((_DWORD *)v3 + 24);
    v10 = *((_QWORD *)a2 + 1);
    if (!v10)
      return a2;
    if (!*(_QWORD *)(v10 + 8))
      return a2;
    v11 = *((_QWORD *)v3 + 11);
    if (!v11)
      return a2;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    for (j = 1; ; ++j)
    {
      v18 = *(_QWORD *)(v11 + 8 * v16);
      if (v18 != -1)
      {
        if (!v18)
          return a2;
        if (v18 == v10)
          break;
      }
      v16 = (v16 + j) & v12;
    }
  }
  v4 = *((unsigned __int8 *)v3 + 168);
  WebCore::installedMediaEngines(this);
  if (!dword_1ECE90EB4)
  {
LABEL_6:
    v7 = 0;
    goto LABEL_27;
  }
  v5 = 0;
  while (1)
  {
    result = (const WebCore::MediaPlayerFactory *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                                                                                                  + 8 * v5)
                                                                                    + 16))(*(_QWORD *)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines + 8 * v5));
    if ((_DWORD)result == v4)
      break;
    if (++v5 >= dword_1ECE90EB4)
      goto LABEL_6;
  }
  if (v5 < dword_1ECE90EB4)
  {
    v7 = *(const WebCore::MediaPlayerFactory **)(WebCore::mutableInstalledMediaEnginesVector(void)::installedEngines
                                               + 8 * v5);
LABEL_27:
    if (v7 == a2)
      return 0;
    else
      return v7;
  }
  __break(0xC471u);
  return result;
}

WebCore::MediaPlayer *WebCore::MediaPlayer::create@<X0>(WebCore::MediaPlayer *this@<X0>, WebCore::MediaPlayer **a2@<X8>)
{
  WebCore::MediaPlayer *v5;
  WebCore::MediaPlayer *result;

  v5 = (WebCore::MediaPlayer *)WTF::fastMalloc((WTF *)0x120);
  result = WebCore::MediaPlayer::MediaPlayer(v5, this);
  *a2 = result;
  return result;
}

uint64_t WebCore::MediaPlayer::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x120);
  result = WebCore::MediaPlayer::MediaPlayer(v6, a1, a2);
  *a3 = result;
  return result;
}

WebCore::MediaPlayer *WebCore::MediaPlayer::MediaPlayer(WebCore::MediaPlayer *this, WebCore::MediaPlayerClient *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t StatusReg;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_19689B170;
  *(_QWORD *)(v4 + 24) = this;
  *(_QWORD *)this = v4;
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
    goto LABEL_14;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a2;
  v7 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  if (!v7)
    goto LABEL_14;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
LABEL_14:
    do
      v10 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v10 + 1, (unsigned int *)v5));
  }
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 2) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v12 = *(unsigned int **)(StatusReg + 736);
  if (!v12)
    v12 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *((_QWORD *)this + 7) = v12;
  *((_QWORD *)this + 2) = off_1E31F7378;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = off_1E340E500;
  v14[1] = WebCore::MediaPlayer::reloadTimerFired;
  v14[2] = 0;
  v14[3] = this;
  *((_QWORD *)this + 8) = v14;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)v15 = off_1E340D798;
  *(_BYTE *)(v15 + 24) = 0;
  *(_OWORD *)(v15 + 32) = *(_OWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v15);
  *(_DWORD *)(v15 + 48) = 1;
  *(_QWORD *)v15 = off_1E340DD08;
  *((_QWORD *)this + 9) = v15;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  WTF::URL::invalidate((WebCore::MediaPlayer *)((char *)this + 104));
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_WORD *)this + 84) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_BYTE *)this + 208) = 2;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_DWORD *)this + 56) = 0;
  *((_BYTE *)this + 228) = 1;
  *(_DWORD *)((char *)this + 229) = 0;
  *(_WORD *)((char *)this + 233) = 1;
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 66) = 0;
  return this;
}

uint64_t WebCore::MediaPlayer::reloadTimerFired(WebCore::MediaPlayer *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 64))(*((_QWORD *)this + 9));
  return WebCore::MediaPlayer::loadWithNextMediaEngine(this, *((const WebCore::MediaPlayerFactory **)this + 10));
}

uint64_t WebCore::MediaPlayer::MediaPlayer(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t StatusReg;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)a1 = v6;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    goto LABEL_14;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a2;
  v9 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7;
  if (!v9)
    goto LABEL_14;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
LABEL_14:
    do
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
  }
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v14 = *(unsigned int **)(StatusReg + 736);
  if (!v14)
    v14 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 16) = off_1E31F7378;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v16 = off_1E340E500;
  v16[1] = WebCore::MediaPlayer::reloadTimerFired;
  v16[2] = 0;
  v16[3] = a1;
  *(_QWORD *)(a1 + 64) = v16;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)v17 = off_1E340D798;
  *(_BYTE *)(v17 + 24) = 0;
  *(_OWORD *)(v17 + 32) = *(_OWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v17);
  *(_DWORD *)(v17 + 48) = 1;
  *(_QWORD *)v17 = off_1E340DD08;
  *(_QWORD *)(a1 + 72) = v17;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 104));
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = a3;
  *(_BYTE *)(a1 + 169) = 1;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 2;
  *(_QWORD *)(a1 + 216) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 228) = 1;
  *(_DWORD *)(a1 + 229) = 0;
  *(_WORD *)(a1 + 233) = 1;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  return a1;
}

void WebCore::MediaPlayer::~MediaPlayer(WebCore::MediaPlayer *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WebCore::MediaStreamPrivate *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;

  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1248))(v2);
  WTF::MachSendRight::~MachSendRight((WebCore::MediaPlayer *)((char *)this + 280));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WebCore::MediaStreamPrivate *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v5, v3);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*((_DWORD *)v5 + 4);
    }
  }
  v6 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_14:
    v8 = *(_QWORD *)(v6 + 16) - 1;
    *(_QWORD *)(v6 + 16) = v8;
    if (!v8)
    {
      v9 = *(_QWORD *)(v6 + 8);
      v10 = __ldxr((unsigned __int8 *)v6);
      if (v10 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
        {
          if (v9)
            goto LABEL_22;
LABEL_21:
          WTF::fastFree((WTF *)v6, v3);
          goto LABEL_22;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (v9)
        goto LABEL_22;
      goto LABEL_21;
    }
    v23 = __ldxr((unsigned __int8 *)v6);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
LABEL_22:
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v3);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v3);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v3);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((_QWORD *)this + 11);
  if (v14)
  {
    v24 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v24)
    {
      for (i = 0; i != v24; ++i)
      {
        v26 = *(unsigned int **)(v14 + 8 * i);
        if (v26 != (unsigned int *)-1)
        {
          *(_QWORD *)(v14 + 8 * i) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              v29 = v24;
              WTF::fastFree((WTF *)v26, v3);
              v24 = v29;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v14 - 16), v3);
  }
  v15 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  *((_QWORD *)this + 2) = off_1E31F7378;
  v16 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  WebCore::TimerBase::~TimerBase((WebCore::MediaPlayer *)((char *)this + 16));
  v18 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v17);
    }
  }
}

uint64_t WebCore::MediaPlayer::invalidate(WebCore::MediaPlayer *this, void *a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  {
    result = qword_1EE2F8C50;
    if (qword_1EE2F8C50)
    {
      do
LABEL_8:
        v7 = __ldaxr((unsigned int *)result);
      while (__stlxr(v7 + 1, (unsigned int *)result));
      goto LABEL_9;
    }
  }
  else
  {
    WebCore::nullMediaPlayerClient(void)::client = (uint64_t)&off_1E340E220;
    qword_1EE2F8C50 = 0;
  }
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = &WebCore::nullMediaPlayerClient(void)::client;
  v4 = (unsigned int *)qword_1EE2F8C50;
  qword_1EE2F8C50 = result;
  if (!v4)
    goto LABEL_8;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  result = qword_1EE2F8C50;
  if (qword_1EE2F8C50)
    goto LABEL_8;
LABEL_9:
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = result;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      return WTF::fastFree((WTF *)v8, a2);
    }
  }
  return result;
}

