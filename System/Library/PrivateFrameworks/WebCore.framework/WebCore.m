uint64_t WebCore::SQLiteDatabase::useFastMalloc(void)::$_0::__invoke(int a1)
{
  return WTF::fastMalloc((WTF *)a1);
}

uint64_t WebCore::SQLiteDatabase::useFastMalloc(void)::$_2::__invoke(WTF *a1, const void *a2)
{
  return WTF::fastMallocSize(a1, a2);
}

uint64_t WebCore::SQLiteDatabase::useFastMalloc(void)::$_1::__invoke(WTF *a1, int a2)
{
  return WTF::fastRealloc(a1, (void *)a2);
}

uint64_t WebCore::SQLiteDatabase::useFastMalloc(void)::$_3::__invoke(int a1)
{
  return WTF::fastMallocGoodSize((WTF *)a1);
}

_QWORD *WebCore::Color::Color(_QWORD *result, _QWORD *a2)
{
  *result = 0;
  if (*a2)
  {
    *result = *a2;
    *a2 = 0;
  }
  return result;
}

{
  *result = 0;
  if (*a2)
  {
    *result = *a2;
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::LocalFrameView::viewType(WebCore::LocalFrameView *this)
{
  return 0;
}

uint64_t WebCore::ImageBuffer::context(WebCore::ImageBuffer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14));
}

__n128 WebCore::Region::Region(__n128 *a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;

  result = *a2;
  *a1 = *a2;
  v3 = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a1[1].n128_u64[0] = v3;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;
  unint64_t v3;

  result = *a2;
  *a1 = *a2;
  v3 = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  a1[1].n128_u64[0] = v3;
  return result;
}

uint64_t WebCore::Style::RuleFeatureSet::shrinkToFit(WebCore::Style::RuleFeatureSet *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _BOOL4 v29;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  _BOOL4 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  BOOL v43;
  _BOOL4 v44;
  uint64_t v46;
  BOOL v47;
  _BOOL4 v48;

  WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 40, *((unsigned int *)this + 13));
  WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 56, *((unsigned int *)this + 17));
  result = WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 112, *((unsigned int *)this + 31));
  v3 = *((_QWORD *)this + 9);
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_63:
    v5 = (_QWORD *)(v3 + 16 * v4);
    goto LABEL_8;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = (_QWORD *)(v3 + 16 * v4);
    goto LABEL_63;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 9);
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = (_QWORD *)*((_QWORD *)this + 9);
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_8:
  if (v3)
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v8 = 0;
  while (v6 != v8)
  {
    result = WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v6[1], (WTF::StringImpl *)*(unsigned int *)(v6[1] + 12));
    v41 = v6 + 2;
    v6 = v5;
    if (v41 != v5)
    {
      v6 = v41;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  v9 = *((_QWORD *)this + 10);
  if (!v9)
  {
    v12 = 0;
    v10 = 0;
LABEL_65:
    v11 = (_QWORD *)(v9 + 16 * v10);
    goto LABEL_18;
  }
  v10 = *(unsigned int *)(v9 - 4);
  v11 = (_QWORD *)(v9 + 16 * v10);
  if (!*(_DWORD *)(v9 - 12))
  {
    v12 = (_QWORD *)(v9 + 16 * v10);
    goto LABEL_65;
  }
  v12 = (_QWORD *)*((_QWORD *)this + 10);
  if ((_DWORD)v10)
  {
    v13 = 16 * v10;
    v12 = (_QWORD *)*((_QWORD *)this + 10);
    while ((unint64_t)(*v12 + 1) <= 1)
    {
      v12 += 2;
      v13 -= 16;
      if (!v13)
      {
        v12 = v11;
        break;
      }
    }
  }
LABEL_18:
  if (v9)
    v14 = (_QWORD *)(v9 + 16 * *(unsigned int *)(v9 - 4));
  else
    v14 = 0;
  while (v12 != v14)
  {
    result = WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v12[1], (WTF::StringImpl *)*(unsigned int *)(v12[1] + 12));
    v15 = v12 + 2;
    v12 = v11;
    if (v15 != v11)
    {
      v12 = v15;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        v12 += 2;
        if (v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
  }
  v16 = *((_QWORD *)this + 11);
  if (!v16)
  {
    v19 = 0;
    v17 = 0;
LABEL_67:
    v18 = (_QWORD *)(v16 + 16 * v17);
    goto LABEL_34;
  }
  v17 = *(unsigned int *)(v16 - 4);
  v18 = (_QWORD *)(v16 + 16 * v17);
  if (!*(_DWORD *)(v16 - 12))
  {
    v19 = (_QWORD *)(v16 + 16 * v17);
    goto LABEL_67;
  }
  v19 = (_QWORD *)*((_QWORD *)this + 11);
  if ((_DWORD)v17)
  {
    v20 = 16 * v17;
    v19 = (_QWORD *)*((_QWORD *)this + 11);
    while ((unint64_t)(*v19 + 1) <= 1)
    {
      v19 += 2;
      v20 -= 16;
      if (!v20)
      {
        v19 = v18;
        break;
      }
    }
  }
LABEL_34:
  if (v16)
    v21 = (_QWORD *)(v16 + 16 * *(unsigned int *)(v16 - 4));
  else
    v21 = 0;
  while (v19 != v21)
  {
    result = WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v19[1], *(unsigned int *)(v19[1] + 12));
    v22 = v19 + 2;
    v19 = v18;
    if (v22 != v18)
    {
      v19 = v22;
      while ((unint64_t)(*v19 + 1) <= 1)
      {
        v19 += 2;
        if (v19 == v18)
        {
          v19 = v18;
          break;
        }
      }
    }
  }
  v23 = *((_QWORD *)this + 12);
  if (!v23)
  {
    v26 = 0;
    LODWORD(v24) = 0;
LABEL_69:
    v25 = v23 + 24 * v24;
    goto LABEL_70;
  }
  v24 = *(unsigned int *)(v23 - 4);
  v25 = v23 + 24 * v24;
  if (!*(_DWORD *)(v23 - 12))
  {
    v26 = v23 + 24 * v24;
    goto LABEL_69;
  }
  v26 = *((_QWORD *)this + 12);
  if ((_DWORD)v24)
  {
    v27 = 24 * v24;
    v26 = *((_QWORD *)this + 12);
    while (1)
    {
      v28 = !(*(_DWORD *)v26 | *(unsigned __int8 *)(v26 + 4)) && *(_QWORD *)(v26 + 8) == 0;
      v29 = v28;
      if (*(_DWORD *)v26 != -1 && !v29)
        break;
      v26 += 24;
      v27 -= 24;
      if (!v27)
      {
        v26 = v25;
        break;
      }
    }
  }
LABEL_70:
  if (v23)
    v31 = v23 + 24 * *(unsigned int *)(v23 - 4);
  else
    v31 = 0;
  while (v26 != v31)
  {
    result = WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(*(_QWORD *)(v26 + 16), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(v26 + 16) + 12));
    v32 = v26 + 24;
    v26 = v25;
    if (v32 != v25)
    {
      v26 = v32;
      while (1)
      {
        v33 = !(*(_DWORD *)v26 | *(unsigned __int8 *)(v26 + 4)) && *(_QWORD *)(v26 + 8) == 0;
        v34 = v33;
        if (*(_DWORD *)v26 != -1 && !v34)
          break;
        v26 += 24;
        if (v26 == v25)
        {
          v26 = v25;
          break;
        }
      }
    }
  }
  v36 = *((_QWORD *)this + 13);
  if (!v36)
  {
    v37 = 0;
    LODWORD(v38) = 0;
LABEL_90:
    v39 = v36 + 24 * v38;
    goto LABEL_91;
  }
  v38 = *(unsigned int *)(v36 - 4);
  v39 = v36 + 24 * v38;
  if (!*(_DWORD *)(v36 - 12))
  {
    v37 = v36 + 24 * v38;
    goto LABEL_90;
  }
  v37 = v36;
  if ((_DWORD)v38)
  {
    v46 = 24 * v38;
    v37 = v36;
    while (1)
    {
      v47 = !(*(_DWORD *)v37 | *(unsigned __int8 *)(v37 + 4)) && *(_QWORD *)(v37 + 8) == 0;
      v48 = v47;
      if (*(_DWORD *)v37 != -1 && !v48)
        break;
      v37 += 24;
      v46 -= 24;
      if (!v46)
      {
        v37 = v39;
        break;
      }
    }
  }
LABEL_91:
  if (v36)
    v40 = v36 + 24 * *(unsigned int *)(v36 - 4);
  else
    v40 = 0;
  while (v37 != v40)
  {
    result = WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(*(_QWORD *)(v37 + 16), *(unsigned int *)(*(_QWORD *)(v37 + 16) + 12));
    v42 = v37 + 24;
    v37 = v39;
    if (v42 != v39)
    {
      v37 = v42;
      while (1)
      {
        v43 = !(*(_DWORD *)v37 | *(unsigned __int8 *)(v37 + 4)) && *(_QWORD *)(v37 + 8) == 0;
        v44 = v43;
        if (*(_DWORD *)v37 != -1 && !v44)
          break;
        v37 += 24;
        if (v37 == v39)
        {
          v37 = v39;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;

  if (*(unsigned int *)(result + 8) > (unint64_t)a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > (unint64_t)a2)
    {
      result = (uint64_t)WTF::VectorTypeOperations<WebCore::Style::RuleFeature>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 16 * (_QWORD)a2), (WTF::StringImpl *)(*(_QWORD *)result + 16 * v4));
      *(_DWORD *)(v3 + 12) = (_DWORD)a2;
      LODWORD(v4) = (_DWORD)a2;
    }
    v5 = *(WTF **)v3;
    if (a2)
    {
      if ((unint64_t)a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(16 * (_QWORD)a2));
      *(_DWORD *)(v3 + 8) = (_DWORD)a2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4)
      {
        v6 = result;
        if ((WTF *)result != v5)
        {
          v7 = (WTF *)((char *)v5 + 16 * v4);
          v8 = v5;
          do
          {
            v9 = *(_QWORD *)v8;
            *(_QWORD *)v8 = 0;
            *(_QWORD *)v6 = v9;
            *(_DWORD *)(v6 + 8) = *((_DWORD *)v8 + 2);
            *(_WORD *)(v6 + 12) = *((_WORD *)v8 + 6);
            result = *(_QWORD *)v8;
            *(_QWORD *)v8 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 1)
                result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, a2);
              else
                --*(_DWORD *)result;
            }
            v8 = (WTF *)((char *)v8 + 16);
            v6 += 16;
          }
          while (v8 != v7);
        }
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, a2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSSelectorParser::consumeCompoundSelector(WebCore::CSSSelectorParser *this, WebCore::CSSParserTokenRange *a2, uint64_t a3, WTF::AtomString *a4)
{
  WTF::StringImpl *v7;
  WTF::AtomString *v8;
  char v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  __int128 *v12;
  unsigned int v13;
  int v14;
  __int128 *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WebCore::MutableCSSSelector *v28;
  WTF *v29;
  void *v30;
  char v31;
  _BOOL4 v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t *v38;
  char v40;
  WTF *v41;
  void *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *result;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t *v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  _QWORD *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl **v57;
  BOOL v58;
  unsigned int v59;
  __int128 *v60;
  __int128 *v61;
  char v62;
  unsigned int v63;
  __int128 *v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl **v78;
  BOOL v79;
  int v80;
  WTF *v81;
  void *v82;
  WTF *v83;
  void *v84;
  void *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  WebCore::MutableCSSSelector *v94;
  __int128 v95;
  WebCore::QualifiedName::QualifiedNameImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;

  v95 = 0uLL;
  v9 = WebCore::CSSSelectorParser::consumeName((__int128 **)a3, (WTF::StringImpl **)&v95, (WTF::StringImpl **)&v95 + 1, a4);
  if ((v9 & 1) != 0)
  {
    v10 = 0;
    goto LABEL_5;
  }
  WebCore::CSSSelectorParser::consumeSimpleSelector((WebCore::CSSSelectorParser *)&v99, a2, a3, v8);
  v10 = v99;
  if (!v99)
  {
    *(_QWORD *)this = 0;
    goto LABEL_81;
  }
  if ((**(_DWORD **)v99 & 0x1F0) == 0x90)
    *(_WORD *)((char *)a2 + 31) = (**(_DWORD **)v99 >> 9) | 0x100;
  while (1)
  {
LABEL_5:
    v12 = *(__int128 **)a3;
    v11 = *(_QWORD *)(a3 + 8);
    if (*(_QWORD *)a3 >= v11)
    {
      v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    v13 = *(_DWORD *)v12 & 0x3F;
    if (v13 > 0x12)
    {
      if (v13 == 19)
      {
        WebCore::CSSSelectorParser::consumePseudo((uint64_t)&v99, a2, (__int128 **)a3);
      }
      else
      {
        if (v13 != 24)
          goto LABEL_58;
        WebCore::CSSSelectorParser::consumeAttribute((WebCore::CSSSelectorParser *)&v99, a2, (__int128 **)a3, v8);
      }
LABEL_49:
      v16 = (uint64_t)v99;
      goto LABEL_50;
    }
    if (v13 != 6)
    {
      if (v13 != 3)
        goto LABEL_58;
      WebCore::CSSSelectorParser::consumeId((WTF::StringImpl *)&v99, a2, (__int128 **)a3);
      goto LABEL_49;
    }
    v14 = *((unsigned __int16 *)v12 + 8);
    if (v14 != 46)
      break;
    if (*(_QWORD *)a3 != v11)
    {
      v15 = (__int128 *)(*(_QWORD *)a3 + 24);
      *(_QWORD *)a3 = v15;
LABEL_11:
      if ((unint64_t)v15 >= v11)
      {
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      goto LABEL_12;
    }
    v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v15 = *(__int128 **)a3;
      goto LABEL_11;
    }
LABEL_12:
    if ((*(_BYTE *)v15 & 0x3F) != 0)
      goto LABEL_176;
    v16 = WTF::fastMalloc((WTF *)0x10);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = 786433;
    v17[1] = 0;
    *(_QWORD *)v16 = v17;
    *(_QWORD *)(v16 + 8) = 0;
    *(_DWORD *)v17 = *(_DWORD *)v17 & 0xFFFFFE0F | 0x30;
    v18 = *(__int128 **)a3;
    if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    {
      v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    else
    {
      *(_QWORD *)a3 = (char *)v18 + 24;
    }
    if ((*(_DWORD *)v18 & 0x400000) != 0)
      WTF::AtomStringImpl::add();
    else
      WTF::AtomStringImpl::add();
    v19 = v99;
    v98 = v99;
    v20 = *(_QWORD *)v16;
    if (*(_BYTE *)a2 == 1)
    {
      v90 = *(_QWORD *)v16;
      WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)&v98);
      v20 = v90;
    }
    else
    {
      if (v99)
        *(_DWORD *)v99 += 2;
      v99 = v19;
    }
    v21 = *(_DWORD *)v20;
    if ((*(_DWORD *)v20 & 0x100000) == 0 && v99 != v98)
    {
      v92 = (int *)v20;
      WebCore::CSSSelector::createRareData(v20);
      v20 = (uint64_t)v92;
      v21 = *v92;
    }
    v22 = *(WTF::StringImpl **)(v20 + 8);
    if ((v21 & 0x100000) != 0)
    {
      v91 = v20;
      v86 = v99;
      v99 = 0;
      v87 = (WTF::StringImpl *)*((_QWORD *)v22 + 1);
      *((_QWORD *)v22 + 1) = v86;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
          WTF::StringImpl::destroy(v87, v7);
        else
          *(_DWORD *)v87 -= 2;
      }
      WTF::AtomString::operator=((WTF::StringImpl **)(*(_QWORD *)(v91 + 8) + 16), (WTF::StringImpl *)&v98);
    }
    else
    {
      if (v22)
      {
        v93 = v20;
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v7);
        else
          *(_DWORD *)v22 -= 2;
        v20 = v93;
      }
      v23 = v98;
      *(_QWORD *)(v20 + 8) = v98;
      *(_DWORD *)v23 += 2;
    }
    v24 = v99;
    v99 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v7);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v98;
    v98 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v7);
      else
        *(_DWORD *)v25 -= 2;
    }
LABEL_33:
    if (*((_BYTE *)a2 + 32)
      && *(_BYTE *)a2 != 4
      && (WebCore::isSimpleSelectorValidAfterPseudoElement(*(unsigned int **)v16, *((unsigned __int8 *)a2 + 31)) & 1) == 0)
    {
      *((_BYTE *)a2 + 25) = 1;
    }
    if ((**(_DWORD **)v16 & 0x1F0) == 0x90)
      *(_WORD *)((char *)a2 + 31) = (**(_DWORD **)v16 >> 9) | 0x100;
    if (v10)
    {
      v26 = v10;
      do
      {
        v27 = v26;
        v26 = (WTF::StringImpl *)*((_QWORD *)v26 + 1);
      }
      while (v26);
      **(_DWORD **)v27 &= 0xFFFFFFF0;
      v28 = (WebCore::MutableCSSSelector *)*((_QWORD *)v27 + 1);
      *((_QWORD *)v27 + 1) = v16;
      if (v28)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v28, v7);
        WTF::fastFree(v29, v30);
      }
    }
    else
    {
      v10 = (WTF::StringImpl *)v16;
    }
  }
  if (v14 != 38 || !*((_BYTE *)a2 + 1))
    goto LABEL_58;
  WebCore::CSSSelectorParser::consumeNesting((WebCore::CSSSelectorParser *)&v99, (WebCore::CSSParserTokenRange *)a3);
  v16 = (uint64_t)v99;
  v99 = 0;
  std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v99, v85);
LABEL_50:
  if (v16)
    goto LABEL_33;
LABEL_176:
  *((_BYTE *)a2 + 25) = 1;
LABEL_58:
  if (!*((_BYTE *)a2 + 26))
    *(_WORD *)((char *)a2 + 31) = 0;
  if (*((_BYTE *)a2 + 28))
    v31 = v9;
  else
    v31 = 1;
  if ((v31 & 1) != 0)
  {
    v32 = 0;
  }
  else
  {
    v61 = *(__int128 **)a3;
    v60 = *(__int128 **)(a3 + 8);
    v63 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    do
    {
      if (v61 < v60 || (v62 & 1) != 0)
      {
        if (v61 >= v60)
          v64 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v64 = v61;
        v65 = *(_DWORD *)v64;
      }
      else
      {
        v65 = v63 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v65;
        v62 = 1;
        v63 = v65;
      }
      v61 = (__int128 *)((char *)v61 + 24);
    }
    while ((v65 & 0x3F) == 0x10);
    v32 = (__int128 *)((char *)v61 - 24) == v60;
  }
  v33 = *((_BYTE *)a2 + 29);
  *((_BYTE *)a2 + 29) = v32;
  if (v10)
  {
    v34 = **(_DWORD **)v10;
    if ((v34 & 0x1F0) == 0x90)
    {
      v58 = (v34 >> 9) > 0x1Cu;
      v59 = (0x1C0A0800u >> (v34 >> 9)) & 1;
      if (v58)
        v35 = 0;
      else
        v35 = v59;
    }
    else
    {
      v35 = 0;
    }
    v36 = (WTF::StringImpl *)v95;
    if ((_QWORD)v95)
      goto LABEL_128;
    v37 = *((_QWORD *)a2 + 2);
    v79 = v37 == 0;
    v38 = (uint64_t *)(v37 + 112);
    if (v79 || v32)
      v38 = &WebCore::starAtomData;
    v36 = (WTF::StringImpl *)WebCore::starAtomData;
    if (*v38 == WebCore::starAtomData)
      v40 = v35;
    else
      v40 = 1;
    if ((v40 & 1) == 0)
    {
LABEL_78:
      v94 = v10;
      WebCore::CSSSelectorParser::splitCompoundAtImplicitShadowCrossingCombinator(this, (uint64_t *)&v94, a2);
      if (v94)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v94, v7);
        WTF::fastFree(v41, v42);
      }
      goto LABEL_80;
    }
    if (WebCore::starAtomData)
LABEL_128:
      *(_DWORD *)v36 += 2;
    v99 = v36;
    v66 = (WTF::StringImpl *)*((_QWORD *)&v95 + 1);
    if (*((_QWORD *)&v95 + 1))
    {
      if (!*(_DWORD *)(*((_QWORD *)&v95 + 1) + 4))
      {
        v68 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
        goto LABEL_133;
      }
      if (*((_QWORD *)&v95 + 1) != WebCore::starAtomData)
      {
        v89 = *((_QWORD *)a2 + 2);
        if (v89)
          v68 = (WTF::StringImpl **)WebCore::StyleSheetContents::namespaceURIFromPrefix(v89, (uint64_t)&v95 + 8);
        else
          v68 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        goto LABEL_133;
      }
      v71 = **((_DWORD **)&v95 + 1) + 2;
      **((_DWORD **)&v95 + 1) = v71;
      v98 = v66;
      v70 = v66;
LABEL_136:
      v72 = 0;
      *(_DWORD *)v70 = v71 + 2;
      goto LABEL_137;
    }
    v67 = *((_QWORD *)a2 + 2);
    v68 = (WTF::StringImpl **)&WebCore::starAtomData;
    if (v67)
    {
      v69 = (WTF::StringImpl **)(v67 + 112);
      if (!v32)
        v68 = v69;
    }
LABEL_133:
    v66 = *v68;
    if (*v68)
    {
      v70 = (WTF::StringImpl *)*((_QWORD *)&v95 + 1);
      *(_DWORD *)v66 += 2;
      v98 = v66;
      if (v70)
      {
        v71 = *(_DWORD *)v70;
        goto LABEL_136;
      }
      v72 = 1;
LABEL_137:
      v97 = v70;
      v73 = *((_QWORD *)a2 + 2);
      v74 = &WebCore::starAtomData;
      if (v73)
      {
        v75 = (uint64_t *)(v73 + 112);
        if (!*((_BYTE *)a2 + 29))
          v74 = v75;
      }
      if (v66 == (WTF::StringImpl *)*v74)
      {
        v76 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v76 += 2;
        v97 = v76;
        if ((v72 & 1) == 0)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v7);
          else
            *(_DWORD *)v70 -= 2;
        }
      }
      else
      {
        v76 = v70;
      }
      WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v96, &v97, &v99, &v98);
      v77 = **(_DWORD **)v10 & 0x1FFF0;
      if (v77 == 18560)
      {
        if (v95 != 0)
        {
LABEL_148:
          if (v76 == (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8])
          {
            v79 = v77 != 18560 && v36 == (WTF::StringImpl *)WebCore::starAtomData;
            v80 = v79;
          }
          else
          {
            v80 = 0;
          }
          WebCore::MutableCSSSelector::prependTagSelector((WebCore::CSSSelector::RareData ***)v10, &v96, v80);
        }
        v78 = (WTF::StringImpl **)v96;
      }
      else
      {
        v78 = (WTF::StringImpl **)v96;
        if (((v96 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::anyName) & ~v35) == 0)
          goto LABEL_148;
      }
      v96 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v78);
          WTF::fastFree(v83, v84);
        }
        else
        {
          --*(_DWORD *)v78;
        }
      }
      v97 = 0;
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, v7);
        else
          *(_DWORD *)v76 -= 2;
      }
      v98 = 0;
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v7);
      else
        *(_DWORD *)v66 -= 2;
    }
    else
    {
      *((_BYTE *)a2 + 25) = 1;
    }
    v99 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v7);
      else
        *(_DWORD *)v36 -= 2;
    }
    goto LABEL_78;
  }
  v45 = (WTF::StringImpl *)*((_QWORD *)&v95 + 1);
  if (!*((_QWORD *)&v95 + 1))
  {
    v46 = *((_QWORD *)a2 + 2);
    if (v32)
      v47 = &WebCore::starAtomData;
    else
      v47 = (uint64_t *)(v46 + 112);
    if (v46)
      v48 = (WTF::StringImpl **)v47;
    else
      v48 = (WTF::StringImpl **)&WebCore::starAtomData;
    goto LABEL_95;
  }
  if (*(_DWORD *)(*((_QWORD *)&v95 + 1) + 4))
  {
    if (*((_QWORD *)&v95 + 1) != WebCore::starAtomData)
    {
      v88 = *((_QWORD *)a2 + 2);
      if (v88)
        v48 = (WTF::StringImpl **)WebCore::StyleSheetContents::namespaceURIFromPrefix(v88, (uint64_t)&v95 + 8);
      else
        v48 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      goto LABEL_95;
    }
  }
  else
  {
    v48 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
LABEL_95:
    v45 = *v48;
    if (!*v48)
    {
      *((_BYTE *)a2 + 25) = 1;
      *(_QWORD *)this = 0;
      goto LABEL_80;
    }
  }
  *(_DWORD *)v45 += 2;
  v99 = v45;
  v49 = *((_QWORD *)a2 + 2);
  v50 = &WebCore::starAtomData;
  if (v49)
  {
    v51 = (uint64_t *)(v49 + 112);
    if (!*((_BYTE *)a2 + 29))
      v50 = v51;
  }
  if (v45 == (WTF::StringImpl *)*v50)
  {
    v52 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v52 += 2;
    v53 = (WTF::StringImpl *)*((_QWORD *)&v95 + 1);
    *((_QWORD *)&v95 + 1) = v52;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v7);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v98, (WTF::StringImpl **)&v95 + 1, (WTF::StringImpl **)&v95, &v99);
  v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v55 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v55 = *(_DWORD *)v55 & 0xFE000000 | 0xC0011;
  v56 = v98;
  *(_QWORD *)(v55 + 8) = v98;
  ++*(_DWORD *)v56;
  *v54 = v55;
  v54[1] = 0;
  *(_QWORD *)this = v54;
  v57 = (WTF::StringImpl **)v98;
  v98 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
      WTF::fastFree(v81, v82);
    }
    else
    {
      --*(_DWORD *)v57;
    }
  }
  if (*(_DWORD *)v45 == 2)
    WTF::StringImpl::destroy(v45, v7);
  else
    *(_DWORD *)v45 -= 2;
LABEL_80:
  *((_BYTE *)a2 + 29) = v33;
LABEL_81:
  v43 = (WTF::StringImpl *)v95;
  *(_QWORD *)&v95 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v7);
    else
      *(_DWORD *)v43 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)&v95 + 1);
  *((_QWORD *)&v95 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::MutableCSSSelector **WebCore::CSSSelectorParser::consumeSimpleSelector(WebCore::CSSSelectorParser *this, WebCore::CSSParserTokenRange *a2, uint64_t a3, WTF::AtomString *a4)
{
  __int128 *v6;
  WebCore::MutableCSSSelector *v7;
  unsigned int v8;
  int v9;
  void *v10;
  WebCore::MutableCSSSelector *v12;
  WebCore::MutableCSSSelector *v13;

  v6 = *(__int128 **)a3;
  if (*(_QWORD *)a3 >= *(_QWORD *)(a3 + 8))
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v7 = 0;
  v13 = 0;
  v8 = *(_DWORD *)v6 & 0x3F;
  if (v8 > 0x12)
  {
    if (v8 == 19)
    {
      WebCore::CSSSelectorParser::consumePseudo((uint64_t)&v12, a2, (__int128 **)a3);
    }
    else
    {
      if (v8 != 24)
        goto LABEL_9;
      WebCore::CSSSelectorParser::consumeAttribute((WebCore::CSSSelectorParser *)&v12, a2, (__int128 **)a3, a4);
    }
  }
  else if (v8 == 6)
  {
    v9 = *((unsigned __int16 *)v6 + 8);
    if (v9 == 46)
    {
      WebCore::CSSSelectorParser::consumeClass((WTF::StringImpl *)&v12, a2, a3);
    }
    else
    {
      if (v9 != 38 || !*((_BYTE *)a2 + 1))
      {
        v7 = 0;
        goto LABEL_9;
      }
      WebCore::CSSSelectorParser::consumeNesting((WebCore::CSSSelectorParser *)&v12, (WebCore::CSSParserTokenRange *)a3);
    }
  }
  else
  {
    if (v8 != 3)
      goto LABEL_9;
    WebCore::CSSSelectorParser::consumeId((WTF::StringImpl *)&v12, a2, (__int128 **)a3);
  }
  v7 = v12;
  v12 = 0;
  v13 = v7;
  std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v12, v10);
  if (v7)
  {
    if (*((_BYTE *)a2 + 32)
      && *(_BYTE *)a2 != 4
      && (WebCore::isSimpleSelectorValidAfterPseudoElement(*(unsigned int **)v7, *((unsigned __int8 *)a2 + 31)) & 1) == 0)
    {
      *((_BYTE *)a2 + 25) = 1;
    }
    v13 = 0;
  }
  else
  {
    *((_BYTE *)a2 + 25) = 1;
  }
LABEL_9:
  *(_QWORD *)this = v7;
  return std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v13, a2);
}

void WebCore::CSSSelector::hasExplicitNestingParent(WebCore::CSSSelector *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  _DWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v25);
  if ((_QWORD)v26 == *((_QWORD *)&v25 + 1)
    || (v3 = *((_QWORD *)&v27 + 1),
        v2 = v27,
        (v4 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + ((((_QWORD)v27 + *((_QWORD *)&v27 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
LABEL_37:
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v4 + 8 * (((_WORD)v27 + WORD4(v27)) & 0x1FF)) = this;
    v5 = __CFADD__(v3, 1);
    v6 = v3 + 1;
    *((_QWORD *)&v27 + 1) = v6;
    if (!v5)
    {
      do
      {
        v7 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)&v25 + 1) + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v2 & 0x1FF));
        *(_QWORD *)&v27 = ++v2;
        *((_QWORD *)&v27 + 1) = v6 - 1;
        if (v2 >= 0x400)
        {
          operator delete(**((void ***)&v25 + 1));
          v2 = v27 - 512;
          *((_QWORD *)&v25 + 1) += 8;
          *(_QWORD *)&v27 = v27 - 512;
        }
        v8 = *v7;
        v9 = (*v7 >> 4) & 0x1F;
        if (v9 == 14 || v9 == 17)
          break;
        if ((v8 & 0x100000) != 0)
        {
          v15 = *(_QWORD **)(*((_QWORD *)v7 + 1) + 56);
          if (v15)
          {
            v16 = (_DWORD *)*v15;
            if (v16)
            {
              v17 = *((_QWORD *)&v27 + 1);
              while (1)
              {
                v18 = *((_QWORD *)&v25 + 1);
                v19 = v26;
                v20 = (((_QWORD)v26 - *((_QWORD *)&v25 + 1)) << 6) - 1;
                if ((_QWORD)v26 == *((_QWORD *)&v25 + 1))
                  v20 = 0;
                if (v20 == v2 + v17)
                {
                  v24 = v16;
                  std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v25);
                  v16 = v24;
                  v17 = *((_QWORD *)&v27 + 1);
                  v18 = *((_QWORD *)&v25 + 1);
                  v19 = v26;
                }
                if (v19 == v18)
                  goto LABEL_37;
                v2 = v27;
                v21 = *(_QWORD *)(v18 + (((unint64_t)(v27 + v17) >> 6) & 0x3FFFFFFFFFFFFF8));
                if (!v21)
                  goto LABEL_37;
                *(_QWORD *)(v21 + 8 * (((_WORD)v27 + (_WORD)v17++) & 0x1FF)) = v16;
                *((_QWORD *)&v27 + 1) = v17;
                do
                {
                  v23 = *v16;
                  v16 += 4;
                  v22 = v23;
                }
                while ((v23 & 0x80000) == 0);
                if ((v22 & 0x20000) != 0)
                {
                  v8 = *v7;
                  break;
                }
              }
            }
          }
        }
        v6 = *((_QWORD *)&v27 + 1);
        if ((v8 & 0x80000) == 0)
        {
          v11 = *((_QWORD *)&v25 + 1);
          v12 = v26;
          v13 = (((_QWORD)v26 - *((_QWORD *)&v25 + 1)) << 6) - 1;
          if ((_QWORD)v26 == *((_QWORD *)&v25 + 1))
            v13 = 0;
          if (v13 == *((_QWORD *)&v27 + 1) + v2)
          {
            std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v25);
            v6 = *((_QWORD *)&v27 + 1);
            v11 = *((_QWORD *)&v25 + 1);
            v12 = v26;
          }
          if (v12 == v11)
            goto LABEL_37;
          v2 = v27;
          v14 = *(_QWORD *)(v11 + (((unint64_t)(v27 + v6) >> 6) & 0x3FFFFFFFFFFFFF8));
          if (!v14)
            goto LABEL_37;
          *(_QWORD *)(v14 + 8 * (((_WORD)v27 + (_WORD)v6++) & 0x1FF)) = v7 + 4;
          *((_QWORD *)&v27 + 1) = v6;
        }
      }
      while (v6);
    }
    std::deque<WebCore::CSSSelector const*>::~deque[abi:sn180100]((void **)&v25);
  }
}

void std::deque<WebCore::CSSSelector const*>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  char *v18;
  void **v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    goto LABEL_13;
  }
  v6 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v7 = v5 - v6;
  v8 = (v5 - v6) >> 3;
  v9 = *(char **)(a1 + 24);
  v10 = (uint64_t)&v9[-*(_QWORD *)a1];
  if (v8 < (unint64_t)(v10 >> 3))
  {
    if (v9 != v5)
    {
      v23 = (char *)operator new(0x1000uLL);
      std::__split_buffer<WebCore::CSSSelector const**>::push_back[abi:sn180100]((char **)a1, &v23);
      return;
    }
    v23 = (char *)operator new(0x1000uLL);
    std::__split_buffer<WebCore::CSSSelector const**>::push_front((void **)a1, &v23);
LABEL_13:
    v19 = *(void ***)(a1 + 8);
    v23 = (char *)*v19;
    *(_QWORD *)(a1 + 8) = v19 + 1;
    std::__split_buffer<WebCore::CSSSelector const**>::push_back[abi:sn180100]((char **)a1, &v23);
    return;
  }
  v11 = v10 >> 2;
  if (v9 == *(char **)a1)
    v12 = 1;
  else
    v12 = v11;
  v27 = a1 + 24;
  if (v12 >> 61)
    goto LABEL_29;
  v13 = (char *)operator new(8 * v12);
  v14 = &v13[8 * v8];
  v23 = v13;
  v24 = v14;
  v15 = &v13[8 * v12];
  v26 = v15;
  v16 = operator new(0x1000uLL);
  if (v8 == v12)
  {
    v22 = v16;
    if (v7 >= 1)
    {
      v20 = v8 + 2;
      if (v8 >= -1)
        v20 = v8 + 1;
      v14 -= 8 * (v20 >> 1);
      v24 = v14;
      goto LABEL_20;
    }
    if (v5 == v6)
      v21 = 1;
    else
      v21 = v7 >> 2;
    if (!(v21 >> 61))
    {
      v14 = (char *)operator new(8 * v21);
      v15 = &v14[8 * v21];
      v23 = v14;
      v24 = v14;
      v26 = v15;
      operator delete(v13);
      v6 = *(char **)(a1 + 8);
      v5 = *(char **)(a1 + 16);
      v13 = v14;
LABEL_20:
      v16 = v22;
      goto LABEL_8;
    }
LABEL_29:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
LABEL_8:
  *(_QWORD *)v14 = v16;
  v17 = v14 + 8;
  v25 = v14 + 8;
  if (v5 != v6)
  {
    do
    {
      v5 -= 8;
      std::__split_buffer<WebCore::CSSSelector const**>::push_front((void **)&v23, v5);
    }
    while (v5 != *(char **)(a1 + 8));
    v13 = v23;
    v14 = v24;
    v17 = v25;
    v15 = v26;
  }
  v18 = *(char **)a1;
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 24) = v15;
  if (v18)
    operator delete(v18);
}

uint64_t WebCore::CSSSelectorParser::consumeName(__int128 **this, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::AtomString *a4)
{
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 *v12;
  int v13;
  int v14;
  uint64_t v16;
  WTF::StringImpl *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 *v29;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;

  v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v8 += 2;
  v9 = *a2;
  *a2 = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *v7;
  if (*v7)
    *(_DWORD *)v10 += 2;
  v11 = *a3;
  *a3 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *this;
  if (*this >= this[1])
  {
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v13 = *(_DWORD *)v12 & 0x3F;
  if (v13 != 6)
  {
    if (v13)
      return 0;
    if ((*(_DWORD *)v12 & 0x400000) != 0)
      WTF::AtomStringImpl::add();
    else
      WTF::AtomStringImpl::add();
    v16 = v37[0];
    goto LABEL_21;
  }
  v14 = *((unsigned __int16 *)v12 + 8);
  if (v14 == 42)
  {
    v16 = WebCore::starAtomData;
    if (WebCore::starAtomData)
      *(_DWORD *)WebCore::starAtomData += 2;
LABEL_21:
    v17 = *a2;
    *a2 = (WTF::StringImpl *)v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *this;
    v19 = this[1];
    if (*this == v19)
    {
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      }
    }
    else
    {
      *this = (__int128 *)((char *)v18 + 24);
      v18 = v19;
    }
LABEL_26:
    v20 = *this;
    if (*this >= v18)
    {
      v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v20 & 0x3F) != 6)
      return 1;
    v21 = *this;
    if (*this >= v18)
    {
      v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if (*((_WORD *)v21 + 8) != 124)
      return 1;
    WTF::AtomString::operator=(a3, (WTF::StringImpl *)a2);
    v23 = *this;
    v22 = this[1];
    v24 = (__int128 *)((char *)*this + 24);
    if (v24 >= v22)
    {
      v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v23 = *this;
      }
    }
    if ((*(_BYTE *)v24 & 0x3F) != 0)
    {
      v25 = (__int128 *)((char *)v23 + 24);
      if (v25 >= v22)
      {
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v25 & 0x3F) != 6)
        goto LABEL_55;
      v26 = (__int128 *)((char *)*this + 24);
      if (v26 >= v22)
      {
        v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if (*((_WORD *)v26 + 8) != 42)
      {
LABEL_55:
        v28 = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
        WTF::AtomString::operator=(a2, MEMORY[0x1E0CBF2F8]);
        WTF::AtomString::operator=(a3, v28);
        return 0;
      }
      if (*this == v22)
      {
        {
LABEL_43:
          WTF::AtomString::operator=(a2, (WTF::StringImpl *)&WebCore::starAtomData);
          return 1;
        }
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        v27 = (uint64_t)*this;
      }
      else
      {
        v27 = (uint64_t)*this + 24;
        *this = (__int128 *)v27;
      }
      if ((__int128 *)v27 == v22)
      {
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        }
      }
      else
      {
        *this = (__int128 *)(v27 + 24);
      }
      goto LABEL_43;
    }
    if (v23 == v22)
    {
      {
        v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        goto LABEL_60;
      }
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v29 = *this;
    }
    else
    {
      v29 = (__int128 *)((char *)v23 + 24);
      *this = v29;
    }
    if (v29 == v22)
    {
      v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    else
    {
      *this = (__int128 *)((char *)v29 + 24);
    }
LABEL_60:
    v30 = *((_QWORD *)v29 + 1);
    v31 = *((unsigned int *)v29 + 1) | ((unint64_t)((*(_DWORD *)v29 >> 22) & 1) << 32);
    v37[0] = v30;
    v37[1] = v31;
    WTF::StringView::toAtomString((WTF::StringView *)v37, &v38);
    v33 = v38;
    v38 = 0;
    v34 = *a2;
    *a2 = v33;
    if (v34)
    {
      v35 = *(_DWORD *)v34 - 2;
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::destroy(v34, v32);
        v34 = v38;
        v38 = 0;
        if (!v34)
          return 1;
        v35 = *(_DWORD *)v34 - 2;
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::destroy(v34, v36);
          return 1;
        }
      }
      *(_DWORD *)v34 = v35;
    }
    return 1;
  }
  if (v14 == 124)
  {
    WTF::AtomString::operator=(a2, MEMORY[0x1E0CBF3B8]);
    v18 = this[1];
    goto LABEL_26;
  }
  return 0;
}

WTF::StringImpl *WebCore::CSSSelector::setValue(WTF::StringImpl **this, const WTF::AtomString *a2, int a3)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::AtomString *v10;
  const WTF::AtomString *v11;
  WTF::StringImpl *v12;
  const WTF::AtomString *v13;
  WebCore::CSSSelector *v14;
  WebCore::CSSSelector *v15;
  WebCore::CSSSelector *v16;
  WebCore::CSSSelector *v17;
  WTF::StringImpl *v18;

  if (a3)
  {
    v10 = a2;
    v14 = (WebCore::CSSSelector *)this;
    WTF::AtomString::convertToASCIILowercase(a2);
    a2 = v10;
    this = (WTF::StringImpl **)v14;
  }
  else
  {
    v3 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v3 += 2;
    v18 = v3;
  }
  v4 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 0x100000) == 0 && v18 != *(WTF::StringImpl **)a2)
  {
    v11 = a2;
    v15 = (WebCore::CSSSelector *)this;
    WebCore::CSSSelector::createRareData((uint64_t)this);
    a2 = v11;
    this = (WTF::StringImpl **)v15;
    v4 = *(_DWORD *)v15;
  }
  v5 = this[1];
  if ((v4 & 0x100000) != 0)
  {
    v12 = a2;
    v16 = (WebCore::CSSSelector *)this;
    v8 = v18;
    v18 = 0;
    v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    WTF::AtomString::operator=((WTF::StringImpl **)(*((_QWORD *)v16 + 1) + 16), v12);
  }
  else
  {
    if (v5)
    {
      v13 = a2;
      v17 = (WebCore::CSSSelector *)this;
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
      a2 = v13;
      this = (WTF::StringImpl **)v17;
    }
    v6 = *(_DWORD **)a2;
    this[1] = *(WTF::StringImpl **)a2;
    *v6 += 2;
  }
  result = v18;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  return result;
}

__int128 *WebCore::CSSParserTokenRange::consumeBlock(__int128 **this)
{
  __int128 *v1;
  __int128 *v2;
  char v3;
  __int128 *v4;
  int v5;
  __int128 *v6;
  char v7;
  __int128 *v8;
  int v9;
  int v10;
  int v11;

  v2 = *this;
  v1 = this[1];
  if (*this >= v1)
    v3 = 1;
  else
  if (*this >= v1)
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v4 = *this;
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v3 = 1;
    v2 = *this;
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  v5 = 0;
  v6 = (__int128 *)((char *)v4 + 24);
  v7 = v3;
  do
  {
    if (v2 == v1)
    {
      v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v7 & 1) != 0)
      {
        v8 = v1;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v8 = *this;
        v3 = 1;
      }
      v7 = 1;
    }
    else
    {
      v8 = (__int128 *)((char *)v2 + 24);
      *this = (__int128 *)((char *)v2 + 24);
    }
    v9 = *(_DWORD *)v2 >> 6;
    if (v9 == 2)
      v10 = -1;
    else
      v10 = 0;
    if (v9 == 1)
      v11 = 1;
    else
      v11 = v10;
    v5 += v11;
    if (!v5)
      break;
    v2 = v8;
  }
  while (v8 < v1);
  if ((v3 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
  }
  if (v6 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    return v1;
  else
    return v6;
}

uint64_t WebCore::CSSSelector::setAttribute(uint64_t a1, _DWORD **a2, int a3)
{
  _DWORD *v6;
  uint64_t result;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl **v10;
  WTF *v11;
  void *v12;

  v6 = *(_DWORD **)(a1 + 8);
  if ((*(_BYTE *)(a1 + 2) & 0x10) != 0)
  {
    result = *(_QWORD *)(a1 + 8);
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)result = 1;
    if (v6)
      *v6 += 2;
    *(_QWORD *)(result + 8) = v6;
    *(_QWORD *)(result + 16) = v6;
    *(_QWORD *)(result + 24) = 0;
    v8 = WebCore::anyName;
    if (WebCore::anyName)
      ++*(_DWORD *)WebCore::anyName;
    *(_QWORD *)(result + 32) = v8;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(a1 + 8) = result;
    *(_DWORD *)a1 |= 0x100000u;
  }
  v9 = *a2;
  if (*a2)
    ++*v9;
  v10 = *(WTF::StringImpl ***)(result + 32);
  *(_QWORD *)(result + 32) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
      result = WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFF7FFFFF | ((a3 == 1) << 23);
  return result;
}

uint64_t WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorTypeOperations<WebCore::Style::RuleFeatureWithInvalidationSelector>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 24 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 24 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v3 + 8) = 24 * (int)a2 / 0x18u;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4)
      {
        v6 = result;
        if ((WTF *)result != v5)
        {
          v7 = (WTF *)((char *)v5 + 24 * v4);
          v8 = v5;
          do
          {
            v9 = *(_QWORD *)v8;
            *(_QWORD *)v8 = 0;
            *(_QWORD *)v6 = v9;
            *(_DWORD *)(v6 + 8) = *((_DWORD *)v8 + 2);
            *(_WORD *)(v6 + 12) = *((_WORD *)v8 + 6);
            *(_QWORD *)(v6 + 16) = *((_QWORD *)v8 + 2);
            result = *(_QWORD *)v8;
            *(_QWORD *)v8 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 1)
                result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)a2);
              else
                --*(_DWORD *)result;
            }
            v8 = (WTF *)((char *)v8 + 24);
            v6 += 24;
          }
          while (v8 != v7);
        }
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      v10 = (uint64_t *)(*(_QWORD *)result + 12 * a2);
      v11 = 12 * v4 - 12 * a2;
      do
      {
        result = *v10;
        *v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)a2);
          else
            --*(_DWORD *)result;
        }
        v10 = (uint64_t *)((char *)v10 + 12);
        v11 -= 12;
      }
      while (v11);
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >= 0x15555556)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(12 * a2));
      *(_DWORD *)(v3 + 8) = 12 * (int)a2 / 0xCu;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4)
      {
        v6 = result;
        if ((WTF *)result != v5)
        {
          v7 = (WTF *)((char *)v5 + 12 * v4);
          v8 = v5;
          do
          {
            v9 = *(_QWORD *)v8;
            *(_QWORD *)v8 = 0;
            *(_QWORD *)v6 = v9;
            *(_DWORD *)(v6 + 8) = *((_DWORD *)v8 + 2);
            result = *(_QWORD *)v8;
            *(_QWORD *)v8 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 1)
                result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)a2);
              else
                --*(_DWORD *)result;
            }
            v8 = (WTF *)((char *)v8 + 12);
            v6 += 12;
          }
          while (v8 != v7);
        }
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WebCore::CSSSelector::setSelectorList(uint64_t a1, uint64_t *a2)
{
  _DWORD *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;

  v3 = *(_DWORD **)(a1 + 8);
  if ((*(_BYTE *)(a1 + 2) & 0x10) != 0)
  {
    result = *(_QWORD *)(a1 + 8);
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)result = 1;
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 8) = v3;
    *(_QWORD *)(result + 16) = v3;
    *(_QWORD *)(result + 24) = 0;
    v6 = WebCore::anyName;
    if (WebCore::anyName)
      ++*(_DWORD *)WebCore::anyName;
    *(_QWORD *)(result + 32) = v6;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(a1 + 8) = result;
    *(_DWORD *)a1 |= 0x100000u;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(WTF **)(result + 56);
  *(_QWORD *)(result + 56) = v7;
  if (v8)
  {
    v9 = *(WTF::StringImpl **)v8;
    *(_QWORD *)v8 = 0;
    if (v9)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v8, v9);
    return WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebCore::CSSSelector::createRareData(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  if ((*(_BYTE *)(this + 2) & 0x10) == 0)
  {
    v1 = this;
    v2 = *(_DWORD **)(this + 8);
    this = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)this = 1;
    if (v2)
      *v2 += 2;
    *(_QWORD *)(this + 8) = v2;
    *(_QWORD *)(this + 16) = v2;
    *(_QWORD *)(this + 24) = 0;
    v3 = WebCore::anyName;
    if (WebCore::anyName)
      ++*(_DWORD *)WebCore::anyName;
    *(_QWORD *)(this + 32) = v3;
    *(_QWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 48) = 0;
    *(_QWORD *)(this + 56) = 0;
    *(_QWORD *)(v1 + 8) = this;
    *(_DWORD *)v1 |= 0x100000u;
  }
  return this;
}

uint64_t WebCore::StyleSheetContents::namespaceURIFromPrefix(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
  {
    v3 = 0;
    for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v3 + v5)
    {
      v5 = i & *(_DWORD *)(v2 - 8);
      v6 = *(_QWORD *)(v2 + 16 * v5);
      if (!v6)
        break;
      if (v6 != -1 && v6 == *(_QWORD *)a2)
      {
        v8 = *(unsigned int *)(v2 - 4);
        goto LABEL_10;
      }
      ++v3;
    }
    v8 = *(unsigned int *)(v2 - 4);
    v5 = v8;
LABEL_10:
    v9 = v2 + 16 * v5;
    v2 += 16 * v8;
  }
  else
  {
    v9 = 0;
  }
  if (v9 == v2)
    return MEMORY[0x1E0CBF2F8];
  else
    return v9 + 8;
}

WTF::StringImpl *WebCore::CSSTokenizer::tryCreate@<X0>(unsigned int **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  WTF **v6;
  unsigned int *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t (*v19)();
  int v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  WTF *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36[2];
  uint64_t v37;
  WTF::StringImpl *v38;

  v5 = WTF::fastMalloc((WTF *)0x368);
  *(_QWORD *)v5 = v5 + 16;
  *(_QWORD *)(v5 + 8) = 8;
  *(_QWORD *)(v5 + 48) = v5 + 64;
  v6 = (WTF **)(v5 + 48);
  *(_QWORD *)(v5 + 56) = 32;
  *(_OWORD *)(v5 + 832) = 0u;
  v7 = *this;
  if (*this)
  {
    WTF::StringImpl::replace();
    v8 = v36[0];
  }
  else
  {
    v8 = 0;
  }
  v38 = v8;
  WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
  v10 = v36[0];
  v36[0] = 0;
  result = v38;
  v38 = v10;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v9);
      result = v36[0];
      v36[0] = 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  if (v38 != (WTF::StringImpl *)v7)
  {
    result = (WTF::StringImpl *)WebCore::CSSTokenizer::registerString((WebCore::CSSTokenizer *)v5, (const WTF::String *)&v38);
    v7 = (unsigned int *)v38;
  }
  *(_QWORD *)(v5 + 848) = 0;
  if (v7)
  {
    v12 = v7[1];
    *v7 += 2;
    *(_QWORD *)(v5 + 856) = v12;
    *(_QWORD *)(v5 + 864) = v7;
    v38 = 0;
    if (*v7 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, v9);
    else
      *v7 -= 2;
  }
  else
  {
    *(_QWORD *)(v5 + 864) = 0;
    *(_QWORD *)(v5 + 856) = 0;
  }
  if (*this && (v13 = (*this)[1]) != 0)
  {
    if (v13 < 0x63)
    {
LABEL_15:
      v14 = *(_QWORD *)(v5 + 848);
      v15 = *(_QWORD *)(v5 + 856);
      while (1)
      {
        if (v14 >= v15)
        {
          v18 = 0;
          *(_QWORD *)(v5 + 848) = v14 + 1;
        }
        else
        {
          v16 = *(_QWORD *)(v5 + 864);
          if (*(_DWORD *)(v16 + 4) <= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x1940BC73CLL);
          }
          v17 = *(_QWORD *)(v16 + 8);
          if ((*(_BYTE *)(v16 + 16) & 4) != 0)
            v18 = *(unsigned __int8 *)(v17 + v14);
          else
            v18 = *(unsigned __int16 *)(v17 + 2 * v14);
          *(_QWORD *)(v5 + 848) = v14 + 1;
          if (v18 > 0x7F)
          {
            result = (WTF::StringImpl *)((WTF::StringImpl *(*)(WTF::StringImpl **__return_ptr, uint64_t))WebCore::CSSTokenizer::nameStart)(v36, v5);
LABEL_23:
            v20 = (uint64_t)v36[0] & 0x3F;
            if (v20 == 30)
              goto LABEL_12;
            if (v20 == 31)
              goto LABEL_27;
            goto LABEL_25;
          }
        }
        v19 = WebCore::CSSTokenizer::codePoints[2 * v18];
        if (v19)
        {
          result = (WTF::StringImpl *)((WTF::StringImpl *(*)(WTF::StringImpl **__return_ptr, uint64_t))v19)(v36, v5);
          goto LABEL_23;
        }
        v36[0] = (WTF::StringImpl *)6;
        v36[1] = 0;
        LOWORD(v37) = v18;
LABEL_25:
        v21 = *(_DWORD *)(v5 + 60);
        if (v21 == *(_DWORD *)(v5 + 56))
        {
          if (!WTF::Vector<WebCore::CSSParserToken,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,WebCore::CSSParserToken&>((uint64_t)v6, (unint64_t)v36))goto LABEL_40;
        }
        else
        {
          v22 = *(_QWORD *)(v5 + 48) + 24 * v21;
          v23 = *(_OWORD *)v36;
          *(_QWORD *)(v22 + 16) = v37;
          *(_OWORD *)v22 = v23;
          ++*(_DWORD *)(v5 + 60);
        }
LABEL_27:
        v15 = *(_QWORD *)(v5 + 856);
        v14 = *(_QWORD *)(v5 + 848);
      }
    }
    if (v13 <= 0x20000000)
    {
      v24 = (WTF *)(24 * (v13 / 3uLL));
      WTF::tryFastMalloc(v24);
      v25 = v36[0];
      if (v36[0])
      {
        *(_DWORD *)(v5 + 56) = v24 / 0x18;
        *(_QWORD *)(v5 + 48) = v25;
        goto LABEL_15;
      }
    }
LABEL_40:
    *a2 = 0;
    v26 = *(WTF::StringImpl **)(v5 + 864);
    *(_QWORD *)(v5 + 864) = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v9);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = (WTF::StringImpl ***)(v5 + 832);
    v28 = *(unsigned int *)(v5 + 844);
    if ((_DWORD)v28)
    {
      v33 = *v27;
      v34 = 8 * v28;
      do
      {
        v35 = *v33;
        *v33 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v9);
          else
            *(_DWORD *)v35 -= 2;
        }
        ++v33;
        v34 -= 8;
      }
      while (v34);
    }
    v29 = (WTF *)*v27;
    if (*v27)
    {
      *(_QWORD *)(v5 + 832) = 0;
      *(_DWORD *)(v5 + 840) = 0;
      WTF::fastFree(v29, v9);
    }
    v30 = *v6;
    if ((WTF *)(v5 + 64) != *v6 && v30 != 0)
    {
      *(_QWORD *)(v5 + 48) = 0;
      *(_DWORD *)(v5 + 56) = 0;
      WTF::fastFree(v30, v9);
    }
    v32 = *(WTF **)v5;
    if (v5 + 16 != *(_QWORD *)v5)
    {
      if (v32)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
        WTF::fastFree(v32, v9);
      }
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v5, v9);
  }
  else
  {
LABEL_12:
    *a2 = v5;
  }
  return result;
}

_QWORD *WebCore::CSSTokenizer::whiteSpace@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v2 = result[107];
  v3 = result[106];
  v4 = result[108];
  v5 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    if (v3 < v2)
    {
      v6 = *(unsigned int *)(v4 + 4);
      if (v3 <= v6)
        v7 = v6;
      else
        v7 = result[106];
      v8 = result[106];
      while (v7 != v8)
      {
        v9 = *(unsigned __int8 *)(v5 + v8);
        v10 = v9 > 0x20;
        v11 = (1 << v9) & 0x100003600;
        if (v10 || v11 == 0)
          goto LABEL_14;
        result[106] = ++v8;
        if (v2 == v8)
          goto LABEL_13;
      }
LABEL_31:
      __break(1u);
    }
  }
  else if (v3 < v2)
  {
    v13 = *(unsigned int *)(v4 + 4);
    if (v3 <= v13)
      v14 = v13;
    else
      v14 = result[106];
    v8 = result[106];
    while (v14 != v8)
    {
      v15 = *(unsigned __int16 *)(v5 + 2 * v8);
      v10 = v15 > 0x20;
      v16 = (1 << v15) & 0x100003600;
      if (v10 || v16 == 0)
        goto LABEL_14;
      result[106] = ++v8;
      if (v2 == v8)
      {
LABEL_13:
        v8 = v2;
        goto LABEL_14;
      }
    }
    goto LABEL_31;
  }
  v8 = v3;
LABEL_14:
  if (v2 < v3)
    LODWORD(v3) = v2;
  if (v2 >= v8)
    LODWORD(v2) = v8;
  *(_QWORD *)a2 = (*(unsigned __int8 *)(a2 + 3) << 24) | 0x10u;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = v2 - v3 + 1;
  return result;
}

uint64_t WebCore::CSSTokenizer::nameStart@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int i;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  int v28;

  --*(_QWORD *)(a1 + 848);
  result = (uint64_t)WebCore::CSSTokenizer::consumeName((WebCore::CSSTokenizer *)a1, a2);
  v8 = result;
  v9 = v6;
  v10 = *(_QWORD *)(a1 + 848);
  v11 = *(_QWORD *)(a1 + 856);
  if (v10 >= v11)
    goto LABEL_12;
  v12 = *(_QWORD *)(a1 + 864);
  v13 = *(unsigned int *)(v12 + 4);
  if (v13 <= v10)
  {
    result = 1161;
    __break(0xC471u);
    goto LABEL_46;
  }
  v7 = *(_DWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(_QWORD *)(a1 + 848);
  v16 = (v7 & 4) != 0 ? *(unsigned __int8 *)(v14 + v15) : *(unsigned __int16 *)(v14 + 2 * v15);
  if (v16 == 40)
  {
    result = a1 + 848;
    *(_QWORD *)(a1 + 848) = ++v10;
    if ((_DWORD)v6 == 3)
    {
      if ((v6 & 0xFF00000000) == 0)
        goto LABEL_47;
      if ((*(_BYTE *)v8 & 0xDF) == 0x55 && (*(_BYTE *)(v8 + 1) & 0xDF) == 0x52)
      {
        for (i = *(unsigned __int8 *)(v8 + 2); (i & 0xFFFFFFDF) == 0x4C; i = *(unsigned __int16 *)(v8 + 4))
        {
          v12 = *(_QWORD *)(v12 + 8);
          if ((v7 & 4) != 0)
          {
            if (v10 >= v11)
              goto LABEL_31;
            if (v10 > v13)
              v13 = v10;
            LOBYTE(v7) = 1;
            while (v13 != v10)
            {
              v21 = *(unsigned __int8 *)(v12 + v10);
              v22 = v21 > 0x20;
              v23 = (1 << v21) & 0x100003600;
              if (!v22 && v23 != 0)
              {
                *(_QWORD *)result = ++v10;
                if (v11 != v10)
                  continue;
              }
              goto LABEL_31;
            }
          }
          else
          {
            if (v10 >= v11)
            {
LABEL_31:
              result = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)result, 0);
              if ((_DWORD)result != 34 && (_DWORD)result != 39)
                return WebCore::CSSTokenizer::consumeURLToken(a3, a1);
              break;
            }
            if (v10 > v13)
              v13 = v10;
            LOBYTE(v7) = 1;
            while (v13 != v10)
            {
              v25 = *(unsigned __int16 *)(v12 + 2 * v10);
              v22 = v25 > 0x20;
              v26 = (1 << v25) & 0x100003600;
              if (!v22 && v26 != 0)
              {
                *(_QWORD *)result = ++v10;
                if (v11 != v10)
                  continue;
              }
              goto LABEL_31;
            }
          }
LABEL_46:
          __break(1u);
LABEL_47:
          if ((*(_WORD *)v8 & 0xFFDF) != 0x55 || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0x52)
            break;
        }
      }
    }
    v28 = 22;
    v17 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
    {
      result = (uint64_t)WTF::Vector<WebCore::CSSParserTokenType,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSParserTokenType&>(a1, (unint64_t)&v28);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v17) = 22;
      *(_DWORD *)(a1 + 12) = v17 + 1;
    }
    v18 = *(unsigned __int8 *)(a3 + 3);
    if ((v9 & 0xFF00000000) != 0)
      v19 = 4194369;
    else
      v19 = 65;
  }
  else
  {
LABEL_12:
    v18 = *(unsigned __int8 *)(a3 + 3);
    v19 = ((v6 & 0xFF00000000) != 0) << 22;
  }
  *(_QWORD *)(a3 + 8) = v8;
  *(_DWORD *)a3 = v19 | (v18 << 24);
  *(_DWORD *)(a3 + 4) = v9;
  *(_DWORD *)(a3 + 16) = -1;
  return result;
}

const char *WebCore::CSSTokenizer::consumeName(WebCore::CSSTokenizer *this, WTF::StringImpl *a2)
{
  unsigned int v3;
  WebCore::CSSTokenizerInputStream *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  _DWORD **v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  uint64_t v73;
  unsigned __int8 *i;
  unsigned int v75;
  int v76;
  unsigned int v77;
  BOOL v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  _BYTE *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unsigned __int16 *v95;
  int v96;
  int v97;
  char v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  BOOL v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  _WORD *v108;
  __int16 v109;
  int v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  unsigned int v114;
  char v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  unsigned int v118;
  char v119;
  __int16 v120;

  v3 = 0;
  v4 = (WebCore::CSSTokenizer *)((char *)this + 848);
  v5 = *((_QWORD *)this + 106);
  v6 = *((_QWORD *)this + 107);
  while (1)
  {
    v7 = v3;
    v8 = v5 + v3;
    if (v8 >= v6)
    {
      v12 = 0;
    }
    else
    {
      v9 = *((_QWORD *)this + 108);
      v10 = (v5 + v7);
      if (*(_DWORD *)(v9 + 4) <= v10)
      {
        __break(0xC471u);
        goto LABEL_68;
      }
      v11 = *(_QWORD *)(v9 + 8);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      {
        v12 = *(unsigned __int8 *)(v11 + v10);
        if (v12 > 0x7F)
          goto LABEL_2;
      }
      else
      {
        v12 = *(unsigned __int16 *)(v11 + 2 * v10);
        if (v12 > 0x7F)
          goto LABEL_2;
      }
    }
    if (v12 != 95 && (v12 | 0x20) - 97 >= 0x1A && v12 != 45 && v12 - 48 >= 0xA)
      break;
LABEL_2:
    v3 = v7 + 1;
  }
  if (!v12)
  {
    if (v6 >= v5)
      v13 = *((_QWORD *)this + 106);
    else
      v13 = *((_QWORD *)this + 107);
    if ((int)v13 + (int)v7 < v6)
      goto LABEL_36;
LABEL_20:
    *((_QWORD *)this + 106) = v8;
    v14 = *((_QWORD *)this + 108);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      v16 = *(unsigned int *)(v14 + 4) | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v15 = 0;
      v16 = 0x100000000;
    }
    if (v16 <= v13)
      return "";
    if ((int)v16 - (int)v13 <= v7)
    {
      if (!(_DWORD)v13)
        return (const char *)v15;
      v7 = (v16 - v13);
    }
    v17 = v16 - (unint64_t)v13;
    if ((v16 & 0x100000000) != 0)
    {
      if (v17 >= v7)
      {
        v15 += v13;
        return (const char *)v15;
      }
    }
    else if (v17 >= v7)
    {
      v15 += 2 * v13;
      return (const char *)v15;
    }
LABEL_68:
    __break(1u);
    return "";
  }
  if (v12 != 92)
  {
    if (v6 >= v5)
      v13 = *((_QWORD *)this + 106);
    else
      v13 = *((_QWORD *)this + 107);
    goto LABEL_20;
  }
LABEL_36:
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 1;
  while (1)
  {
    if (v5 >= v6)
    {
      v21 = 0;
    }
    else
    {
      v19 = *((_QWORD *)this + 108);
      if (*(_DWORD *)(v19 + 4) <= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1940BCF18);
      }
      v20 = *(_QWORD *)(v19 + 8);
      v21 = (*(_BYTE *)(v19 + 16) & 4) != 0
          ? *(unsigned __int8 *)(v20 + v5)
          : *(unsigned __int16 *)(v20 + 2 * v5);
    }
    v22 = v5 + 1;
    *(_QWORD *)v4 = v5 + 1;
    if (v21 <= 0x7F && v21 != 95 && (v21 | 0x20) - 97 >= 0x1A && v21 != 45 && v21 - 48 > 9)
      break;
    LOWORD(v116) = v21;
    if (!v113)
      goto LABEL_49;
    v23 = v114;
    if (v114 >= *((_DWORD *)v113 + 1) || v112 != 0)
      goto LABEL_49;
    if ((*((_BYTE *)v113 + 16) & 4) == 0)
    {
      v25 = *((_QWORD *)v113 + 1);
      ++v114;
      *(_WORD *)(v25 + 2 * v23) = v21;
      goto LABEL_50;
    }
    if (v21 > 0xFF)
    {
LABEL_49:
      WTF::StringBuilder::append();
      goto LABEL_50;
    }
    v30 = *((_QWORD *)v113 + 1);
    ++v114;
    *(_BYTE *)(v30 + v23) = v21;
LABEL_50:
    v5 = *((_QWORD *)this + 106);
    v6 = *((_QWORD *)this + 107);
  }
  if (v22 >= v6)
  {
    v29 = 0;
  }
  else
  {
    v26 = *((_QWORD *)this + 108);
    if (*(_DWORD *)(v26 + 4) <= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1940BD1ECLL);
    }
    v27 = *(_QWORD *)(v26 + 8);
    v28 = (v5 + 1);
    if ((*(_BYTE *)(v26 + 16) & 4) != 0)
      v29 = *(unsigned __int8 *)(v27 + v28);
    else
      v29 = *(unsigned __int16 *)(v27 + 2 * v28);
  }
  if (v21 == 92 && (v29 > 0xD || ((1 << v29) & 0x3400) == 0))
  {
    if (v22 >= v6)
    {
      v34 = 0;
    }
    else
    {
      v31 = *((_QWORD *)this + 108);
      if (*(_DWORD *)(v31 + 4) <= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1940BD23CLL);
      }
      v32 = *(_QWORD *)(v31 + 8);
      v33 = (v5 + 1);
      if ((*(_BYTE *)(v31 + 16) & 4) != 0)
        v34 = *(unsigned __int8 *)(v32 + v33);
      else
        v34 = *(unsigned __int16 *)(v32 + 2 * v33);
    }
    *(_QWORD *)v4 = v5 + 2;
    if (v34 - 48 >= 0xA && (v34 | 0x20) - 97 > 5)
    {
      if (v34)
        v36 = v34;
      else
        v36 = 65533;
      goto LABEL_202;
    }
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v34;
    WTF::StringBuilder::append();
    v36 = 5;
    while (2)
    {
      v37 = *((_QWORD *)this + 106);
      v38 = *((_QWORD *)this + 107);
      if (v37 >= v38)
      {
LABEL_138:
        if (v37 < v38)
        {
          v58 = *((_QWORD *)this + 108);
          if (*(_DWORD *)(v58 + 4) <= v37)
          {
            __break(0xC471u);
            JUMPOUT(0x1940BD68CLL);
          }
          v59 = *(_QWORD *)(v58 + 8);
          v60 = (*(_BYTE *)(v58 + 16) & 4) != 0
              ? *(unsigned __int8 *)(v59 + v37)
              : *(unsigned __int16 *)(v59 + 2 * v37);
          if (v60 <= 0x20)
          {
            if (((1 << v60) & 0x100001600) != 0)
              goto LABEL_144;
            if (v60 == 13)
            {
              v97 = WebCore::CSSTokenizerInputStream::peek(v4, 1u);
              v37 = *(_QWORD *)v4;
              if (v97 == 10)
                v61 = v37 + 2;
              else
LABEL_144:
                v61 = v37 + 1;
              *(_QWORD *)v4 = v61;
            }
          }
        }
        v62 = v117;
        if (!v117)
        {
          v63 = v116;
          v64 = v118;
          if (v116)
            goto LABEL_148;
          goto LABEL_149;
        }
        v64 = v118;
        v63 = v117;
LABEL_148:
        if ((*((_BYTE *)v63 + 16) & 4) != 0)
        {
LABEL_149:
          if (!v64)
            goto LABEL_188;
          if ((v64 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1940BD6ACLL);
          }
          v65 = v116;
          if (!v116)
            v65 = v117;
          v66 = *((_QWORD *)v65 + 1);
          if (v66)
          {
            v67 = 0;
            while (1)
            {
              v68 = *(unsigned __int8 *)(v66 + v67);
              if ((v68 - 9) >= 5 && v68 != 32)
                break;
              if (v64 == ++v67)
                goto LABEL_187;
            }
            if (v68 != 43)
            {
              v69 = (unsigned __int8 *)(v66 + v67);
              v70 = v64 - v67;
LABEL_161:
              if ((v68 - 48) >= 0xA && (v68 | 0x20u) - 97 > 5)
                goto LABEL_187;
              v71 = 0;
              v72 = 0;
              v73 = v70 - 1;
              for (i = v69 + 1; ; ++i)
              {
                v75 = v68 - 48;
                v76 = (v68 | 0x20) - 87;
                if (v75 < 0xA)
                  v76 = v75;
                v77 = v71 >> 28;
                if (!(v71 >> 28))
                  v71 *= 16;
                v78 = __CFADD__(v71, v76);
                v79 = v71 + v76;
                v80 = v78;
                if (!v78)
                  v71 = v79;
                if (v77)
                  v81 = 1;
                else
                  v81 = v80;
                if (v81)
                  v72 = 1;
                if (!v73)
                  break;
                v68 = *i;
                if ((v68 - 48) >= 0xA && (v68 | 0x20u) - 97 > 5)
                {
                  if (!v72)
                  {
                    v82 = 0;
                    while (1)
                    {
                      v83 = i[v82];
                      if ((v83 - 9) >= 5 && v83 != 32)
                        break;
                      if (v73 == ++v82)
                        goto LABEL_191;
                    }
                  }
                  goto LABEL_187;
                }
                --v73;
              }
              if (v72)
                goto LABEL_187;
LABEL_191:
              v84 = v71 & 0xFFFFFF00;
              LODWORD(v66) = v71;
LABEL_192:
              v64 = 0x100000000;
LABEL_193:
              v85 = v84 | v66;
              if ((v64 & 0x100000000) != 0)
              {
                v36 = v85 | v64;
                v86 = 1114111;
                if (v36 - 1 < 0x10FFFF && (v36 & 0xFFFFF800) != 0xD800)
                  goto LABEL_196;
              }
              else
              {
                v62 = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
              }
              if (v36 >> 11 == 27 || v36 > v86)
                v111 = 65533;
              else
                v111 = v36;
              if (v36)
                v36 = v111;
              else
                v36 = 65533;
LABEL_196:
              v117 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, v35);
                else
                  *(_DWORD *)v62 -= 2;
              }
              v87 = v116;
              v116 = 0;
              if (v87)
              {
                if (*(_DWORD *)v87 == 2)
                  WTF::StringImpl::destroy(v87, v35);
                else
                  *(_DWORD *)v87 -= 2;
              }
LABEL_202:
              v88 = v113;
              if (v113 || (v88 = v112) != 0)
              {
                if (v36 <= 0xFF && (*((_DWORD *)v88 + 4) & 4) != 0)
                  goto LABEL_206;
LABEL_264:
                v108 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v112);
                if (v108)
                {
                  if (HIWORD(v36))
                  {
                    v109 = v36 & 0x3FF | 0xDC00;
                    v36 = (v36 >> 10) - 10304;
                    v108[1] = v109;
                  }
                  *v108 = v36;
                }
              }
              else
              {
                if (v36 > 0xFF)
                  goto LABEL_264;
LABEL_206:
                v89 = (_BYTE *)MEMORY[0x19AEA4824](&v112);
                if (v89)
                  *v89 = v36;
              }
              goto LABEL_50;
            }
            if (v64 - 1 != v67)
            {
              v70 = ~v67 + v64;
              v69 = (unsigned __int8 *)(v66 + v67 + 1);
              v68 = *v69;
              goto LABEL_161;
            }
LABEL_187:
            v64 = 0;
LABEL_188:
            LODWORD(v66) = 0;
LABEL_189:
            v84 = 0;
            goto LABEL_193;
          }
        }
        else
        {
          if (!v64)
            goto LABEL_188;
          if ((v64 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1940BD728);
          }
          v90 = v116;
          if (!v116)
            v90 = v117;
          v66 = *((_QWORD *)v90 + 1);
          if (v66)
          {
            v91 = 0;
            v92 = 2 * v64;
            while (1)
            {
              v93 = *(unsigned __int16 *)(v66 + v91);
              if ((v93 - 9) >= 5 && v93 != 32)
                break;
              --v64;
              v91 += 2;
              if (v92 == v91)
                goto LABEL_187;
            }
            if (v93 == 43)
            {
              if (v92 - 2 == v91)
                goto LABEL_187;
              --v64;
              v94 = v66 + v91;
              v96 = *(unsigned __int16 *)(v94 + 2);
              v95 = (unsigned __int16 *)(v94 + 2);
              v93 = v96;
            }
            else
            {
              v95 = (unsigned __int16 *)(v66 + v91);
            }
            if ((v93 - 48) < 0xA || (v93 | 0x20u) - 97 <= 5)
            {
              LODWORD(v66) = 0;
              v98 = 0;
              while (1)
              {
                --v64;
                ++v95;
                v99 = v93 - 48;
                v100 = (v93 | 0x20) - 87;
                if (v99 < 0xA)
                  v100 = v99;
                v101 = v66 >> 28;
                if (!(v66 >> 28))
                  LODWORD(v66) = 16 * v66;
                v102 = __CFADD__((_DWORD)v66, v100);
                v103 = v66 + v100;
                v104 = v102;
                if (!v102)
                  LODWORD(v66) = v103;
                if (v101)
                  v105 = 1;
                else
                  v105 = v104;
                if (v105)
                  v98 = 1;
                if (!v64)
                  break;
                v93 = *v95;
                if ((v93 - 48) >= 0xA && (v93 | 0x20u) - 97 > 5)
                {
                  if (!v98)
                  {
                    v106 = 0;
                    while (1)
                    {
                      v107 = v95[v106];
                      if ((v107 - 9) >= 5 && v107 != 32)
                        break;
                      if (v64 == ++v106)
                        goto LABEL_260;
                    }
                  }
                  goto LABEL_187;
                }
              }
              if (v98)
                goto LABEL_187;
LABEL_260:
              v84 = v66 & 0xFFFFFF00;
              LODWORD(v66) = v66;
              goto LABEL_192;
            }
            goto LABEL_187;
          }
        }
        v64 = 0;
        goto LABEL_189;
      }
      v39 = *((_QWORD *)this + 108);
      if (*(_DWORD *)(v39 + 4) <= v37)
      {
        __break(0xC471u);
        JUMPOUT(0x1940BD21CLL);
      }
      v40 = *(_QWORD *)(v39 + 8);
      v41 = *((_QWORD *)this + 106);
      if ((*(_BYTE *)(v39 + 16) & 4) != 0)
      {
        v42 = *(unsigned __int8 *)(v40 + v41);
        if (v42 - 48 >= 0xA && (v42 | 0x20) - 97 > 5)
          goto LABEL_138;
      }
      else
      {
        v42 = *(unsigned __int16 *)(v40 + 2 * v41);
        if (v42 - 48 >= 0xA && (v42 | 0x20) - 97 >= 6)
          goto LABEL_138;
      }
      *(_QWORD *)v4 = v37 + 1;
      v120 = v42;
      if (v117 && ((v44 = v118, v118 < *((_DWORD *)v117 + 1)) ? (v45 = v116 == 0) : (v45 = 0), v45))
      {
        if ((*((_BYTE *)v117 + 16) & 4) != 0)
        {
          if (v42 > 0xFF)
            goto LABEL_94;
          v48 = *((_QWORD *)v117 + 1);
          ++v118;
          *(_BYTE *)(v48 + v44) = v42;
        }
        else
        {
          v46 = *((_QWORD *)v117 + 1);
          ++v118;
          *(_WORD *)(v46 + 2 * v44) = v42;
        }
      }
      else
      {
LABEL_94:
        WTF::StringBuilder::append();
      }
      if (!--v36)
      {
        v37 = *((_QWORD *)this + 106);
        v38 = *((_QWORD *)this + 107);
        goto LABEL_138;
      }
      continue;
    }
  }
  *(_QWORD *)v4 = v5;
  v49 = v112;
  if (v112
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v112),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v112),
        (v49 = v112) != 0))
  {
    *(_DWORD *)v49 += 2;
  }
  v116 = v49;
  v50 = *((unsigned int *)this + 211);
  if ((_DWORD)v50 == *((_DWORD *)this + 210))
  {
    v54 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 832, v50 + 1, (unint64_t)&v116);
    v55 = *((unsigned int *)this + 211);
    v56 = *((_QWORD *)this + 104);
    v57 = *v54;
    if (*v54)
      *v57 += 2;
    *(_QWORD *)(v56 + 8 * v55) = v57;
    *((_DWORD *)this + 211) = v55 + 1;
    v49 = v116;
  }
  else
  {
    v51 = *((_QWORD *)this + 104);
    if (v49)
      *(_DWORD *)v49 += 2;
    *(_QWORD *)(v51 + 8 * v50) = v49;
    *((_DWORD *)this + 211) = v50 + 1;
  }
  if (v49)
  {
    v15 = *((_QWORD *)v49 + 1);
    v116 = 0;
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, a2);
    else
      *(_DWORD *)v49 -= 2;
  }
  else
  {
    v15 = 0;
  }
  v52 = v113;
  v113 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, a2);
    else
      *(_DWORD *)v52 -= 2;
  }
  v53 = v112;
  v112 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, a2);
    else
      *(_DWORD *)v53 -= 2;
  }
  return (const char *)v15;
}

void WebCore::CSSTokenizer::colon(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = (*(unsigned __int8 *)(a1 + 3) << 24) | 0x13u;
  *(_QWORD *)(a1 + 8) = 0;
}

void WebCore::CSSTokenizer::semiColon(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = (*(unsigned __int8 *)(a1 + 3) << 24) | 0x14u;
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t WebCore::CSSTokenizer::asciiDigit@<X0>(_QWORD *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;

  v5 = a1[106] - 1;
  a1[106] = v5;
  v6 = a1[107];
  if (v6 >= v5)
    LODWORD(v7) = v5;
  else
    v7 = a1[107];
  v8 = a1[108];
  if (v5 >= v6)
  {
    v10 = *(_DWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 8);
    v9 = *(_DWORD *)(v8 + 4);
    goto LABEL_10;
  }
  v9 = *(_DWORD *)(v8 + 4);
  if (v9 <= v5)
  {
    __break(0xC471u);
    goto LABEL_119;
  }
  v10 = *(_DWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 8);
  if ((v10 & 4) != 0)
    v12 = *(unsigned __int8 *)(v11 + v5);
  else
    v12 = *(unsigned __int16 *)(v11 + 2 * v5);
  if (v12 == 45)
  {
    v14 = 1024;
LABEL_125:
    v13 = 1;
    goto LABEL_11;
  }
  if (v12 == 43)
  {
    v14 = 512;
    goto LABEL_125;
  }
LABEL_10:
  v13 = 0;
  v14 = 0;
LABEL_11:
  v15 = v5 + v13;
  if ((v10 & 4) != 0)
  {
    if (v15 < v6)
    {
      while (v15 < v9)
      {
        if (*(unsigned __int8 *)(v11 + v15) - 48 <= 9)
        {
          v13 = (v13 + 1);
          v15 = v5 + v13;
          if (v5 + v13 < v6)
            continue;
        }
        goto LABEL_16;
      }
      goto LABEL_119;
    }
  }
  else if (v15 < v6)
  {
    v54 = v13;
    while (1)
    {
      if (v15 >= v9)
        goto LABEL_119;
      if (*(unsigned __int16 *)(v11 + 2 * v15) - 48 > 9)
        break;
      v54 = (v54 + 1);
      v15 = v5 + v54;
      v13 = v54;
      if (v5 + v54 >= v6)
        goto LABEL_16;
    }
    v13 = v54;
  }
LABEL_16:
  v16 = a1 + 106;
  if (v5 + v13 >= v6)
    goto LABEL_38;
  v17 = (v13 + v5);
  if (v9 <= v17)
  {
LABEL_120:
    __break(0xC471u);
    JUMPOUT(0x1940BDCF8);
  }
  if ((v10 & 4) != 0)
    v18 = *(unsigned __int8 *)(v11 + v17);
  else
    v18 = *(unsigned __int16 *)(v11 + 2 * v17);
  if (v18 != 46)
  {
    v24 = 0;
    goto LABEL_45;
  }
  v19 = (v13 + 1);
  if (v5 + v19 >= v6)
    goto LABEL_38;
  v20 = (v19 + v5);
  if (v9 <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x1940BDD84);
  }
  if ((v10 & 4) == 0)
  {
    if (*(unsigned __int16 *)(v11 + 2 * v20) - 48 < 0xA)
    {
      v22 = (v13 + 2);
      v23 = v5 + v22;
      if (v5 + v22 < v6)
      {
        while (v23 < v9)
        {
          if (*(unsigned __int16 *)(v11 + 2 * v23) - 48 > 9)
            goto LABEL_39;
          v22 = (v22 + 1);
          v23 = v5 + v22;
          v13 = v22;
          if (v5 + v22 >= v6)
            goto LABEL_40;
        }
        goto LABEL_119;
      }
LABEL_39:
      v13 = v22;
      goto LABEL_40;
    }
LABEL_38:
    v24 = 0;
LABEL_46:
    result = v13;
    goto LABEL_47;
  }
  if (*(unsigned __int8 *)(v11 + v20) - 48 > 9)
    goto LABEL_38;
  v13 = (v13 + 2);
  for (i = v5 + v13; i < v6; i = v5 + v13)
  {
    if (i >= v9)
      goto LABEL_119;
    if (*(unsigned __int8 *)(v11 + i) - 48 > 9)
      break;
    v13 = (v13 + 1);
  }
LABEL_40:
  if (v5 + v13 >= v6)
  {
    v24 = 1;
    goto LABEL_46;
  }
  v25 = (v13 + v5);
  if (v9 <= v25)
  {
    __break(0xC471u);
    JUMPOUT(0x1940BDE44);
  }
  if ((v10 & 4) != 0)
    v18 = *(unsigned __int8 *)(v11 + v25);
  else
    v18 = *(unsigned __int16 *)(v11 + 2 * v25);
  v24 = 1;
LABEL_45:
  if ((v18 & 0xFFFFFFDF) != 0x45)
    goto LABEL_46;
  v55 = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 106), (int)v13 + 1);
  if ((v55 - 48) <= 9)
  {
    result = WebCore::CSSTokenizerInputStream::skipWhilePredicate<&(BOOL WTF::isASCIIDigit<char16_t>(char16_t))>(a1 + 106, (v13 + 1));
    goto LABEL_152;
  }
  if (v55 != 45 && v55 != 43
    || WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 106), (int)v13 + 2)- 48 > 9)
  {
    goto LABEL_46;
  }
  result = (v13 + 3);
  v56 = a1[106];
  v57 = v56 + result;
  v58 = a1[108];
  v59 = *(_QWORD *)(v58 + 8);
  v60 = *(unsigned int *)(v58 + 4);
  v61 = a1[107];
  if ((*(_BYTE *)(v58 + 16) & 4) != 0)
  {
    if (v57 < v61)
    {
      v24 = 1;
      while (v57 < v60)
      {
        if (*(unsigned __int8 *)(v59 + v57) - 48 > 9)
          goto LABEL_152;
        result = (result + 1);
        v57 = v56 + result;
        if (v56 + result >= v61)
          goto LABEL_47;
      }
      goto LABEL_119;
    }
    goto LABEL_152;
  }
  if (v57 >= v61)
  {
LABEL_152:
    v24 = 1;
    goto LABEL_47;
  }
  v63 = (v13 + 3);
  v24 = 1;
  while (1)
  {
    if (v57 >= v60)
      goto LABEL_119;
    if (*(unsigned __int16 *)(v59 + 2 * v57) - 48 > 9)
      break;
    v63 = (v63 + 1);
    v57 = v56 + v63;
    result = v63;
    if (v56 + v63 >= v61)
      goto LABEL_47;
  }
  v24 = 1;
  result = v63;
LABEL_47:
  if ((_DWORD)result)
  {
    v27 = a1[108];
    v28 = *(unsigned int *)(v27 + 4);
    v29 = a1[106];
    v30 = result;
    if ((*(_BYTE *)(v27 + 16) & 4) != 0)
    {
      v31 = v28 >= v29;
      v32 = v28 - v29;
      if (!v31 || v32 < result)
        goto LABEL_119;
      result = WTF::charactersToDouble();
    }
    else
    {
      v31 = v28 >= v29;
      v53 = v28 - v29;
      if (!v31 || v53 < result)
        goto LABEL_119;
      result = WTF::charactersToDouble();
    }
  }
  else
  {
    v30 = 0;
  }
  v33 = a1[106] + v30;
  a1[106] = v33;
  v34 = a1[107];
  if (v34 >= v33)
    LODWORD(v35) = v33;
  else
    v35 = a1[107];
  v36 = a1[108];
  if (v36)
  {
    v37 = *(const char **)(v36 + 8);
    v38 = *(unsigned int *)(v36 + 4) | ((unint64_t)((*(_DWORD *)(v36 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v37 = 0;
    v38 = 0x100000000;
  }
  if (v38 <= v7)
  {
    v35 = 0x100000000;
    v37 = "";
  }
  else
  {
    LODWORD(v35) = v35 - v7;
    if ((int)v38 - (int)v7 <= v35)
    {
      if (!(_DWORD)v7)
      {
        v35 = v38;
        goto LABEL_63;
      }
      LODWORD(v35) = v38 - v7;
    }
    v35 = v35;
    v39 = v38 - (unint64_t)v7;
    if ((v38 & 0x100000000) != 0)
    {
      if (v39 >= v35)
      {
        v37 += v7;
        v35 = v35 | 0x100000000;
        goto LABEL_63;
      }
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    if (v39 < v35)
      goto LABEL_119;
    v37 += 2 * v7;
  }
LABEL_63:
  v40 = *(unsigned __int8 *)(a3 + 3);
  *(_QWORD *)(a3 + 16) = 0;
  v41 = v14 | (v24 << 8) | (v40 << 24) | (HIDWORD(v35) << 22);
  *(_QWORD *)(a3 + 8) = v37;
  *(_DWORD *)a3 = v41 | 0x807;
  *(_DWORD *)(a3 + 4) = v35;
  if (v33 >= v34)
  {
    v43 = 0;
  }
  else
  {
    if (*(_DWORD *)(v36 + 4) <= v33)
    {
      __break(0xC471u);
      JUMPOUT(0x1940BDD58);
    }
    v42 = *(_QWORD *)(v36 + 8);
    if ((*(_BYTE *)(v36 + 16) & 4) != 0)
      v43 = *(unsigned __int8 *)(v42 + v33);
    else
      v43 = *(unsigned __int16 *)(v42 + 2 * v33);
  }
  *v16 = v33 + 1;
  if (v33 + 1 >= v34)
  {
    v46 = 0;
  }
  else
  {
    if (*(_DWORD *)(v36 + 4) <= (v33 + 1))
    {
      __break(0xC471u);
      JUMPOUT(0x1940BDD18);
    }
    v44 = *(_QWORD *)(v36 + 8);
    v45 = (v33 + 1);
    if ((*(_BYTE *)(v36 + 16) & 4) != 0)
      v46 = *(unsigned __int8 *)(v44 + v45);
    else
      v46 = *(unsigned __int16 *)(v44 + 2 * v45);
  }
  if (v43 > 0x7F || v43 == 95 || (v43 | 0x20) - 97 < 0x1A)
    goto LABEL_100;
  if (v43 == 45)
  {
    if (v46 == 45 || v46 > 0x7F || v46 == 95 || (v46 | 0x20) - 97 < 0x1A)
      goto LABEL_100;
    v62 = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 106), 0);
    result = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 106), 1u);
    if (v62 == 92 && (result > 0xD || ((1 << result) & 0x3400) == 0))
    {
      v33 = *v16 - 1;
LABEL_100:
      a1[106] = v33;
      v51 = (unsigned __int8 *)WebCore::CSSTokenizer::consumeName((WebCore::CSSTokenizer *)a1, a2);
      return WebCore::CSSParserToken::convertToDimensionWithUnit((unsigned int *)a3, v51, v52);
    }
  }
  else if (v43 == 92 && (v46 > 0xD || ((1 << v46) & 0x3400) == 0))
  {
    goto LABEL_100;
  }
  v47 = a1[106];
  a1[106] = v47 - 1;
  if ((unint64_t)(v47 - 1) < a1[107])
  {
    v48 = a1[108];
    if (*(_DWORD *)(v48 + 4) <= (v47 - 1))
    {
      __break(0xC471u);
      JUMPOUT(0x1940BDD38);
    }
    v49 = *(_QWORD *)(v48 + 8);
    v50 = (v47 - 1);
    if ((*(_BYTE *)(v48 + 16) & 4) != 0)
    {
      if (*(_BYTE *)(v49 + v50) != 37)
        return result;
      goto LABEL_80;
    }
    if (*(_WORD *)(v49 + 2 * v50) == 37)
    {
LABEL_80:
      *v16 = v47;
      *(_DWORD *)a3 = v41 | 0x1808;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSTokenizer::stringStart@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WebCore::CSSTokenizerInputStream *v6;
  WTF::StringImpl *result;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  char v27;

  v6 = (WebCore::CSSTokenizerInputStream *)(a1 + 848);
  result = (WTF::StringImpl *)WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 848), 0);
  if ((_DWORD)result != a2)
  {
    v8 = 0;
    while (1)
    {
      if ((unsigned __int16)result <= 0xBu)
      {
        if (!(_WORD)result)
          goto LABEL_19;
        if ((unsigned __int16)result == 10)
        {
LABEL_17:
          *(_QWORD *)v6 += v8;
          *(_QWORD *)a3 = (*(unsigned __int8 *)(a3 + 3) << 24) | 0x1Du;
          *(_QWORD *)(a3 + 8) = 0;
          return result;
        }
      }
      else
      {
        if ((unsigned __int16)result - 12 < 2)
          goto LABEL_17;
        if ((unsigned __int16)result == 92)
        {
LABEL_19:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 1;
          v14 = WebCore::CSSTokenizer::consume((WebCore::CSSTokenizer *)a1);
          if (v14 == a2 || !v14)
          {
LABEL_30:
            WTF::StringBuilder::toString((WTF::StringBuilder *)&v24, &v23);
            v17 = WebCore::CSSTokenizer::registerString((WebCore::CSSTokenizer *)a1, (const WTF::String *)&v23);
            if (((unint64_t)v15 & 0xFF00000000) != 0)
              v18 = 4194332;
            else
              v18 = 28;
            v19 = *(unsigned __int8 *)(a3 + 3);
            *(_QWORD *)(a3 + 8) = v17;
            *(_DWORD *)a3 = v18 | (v19 << 24);
            *(_DWORD *)(a3 + 4) = (_DWORD)v15;
            *(_DWORD *)(a3 + 16) = -1;
            v20 = v23;
            v23 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v15);
              else
                *(_DWORD *)v20 -= 2;
            }
          }
          else
          {
            while ((unsigned __int16)v14 > 0xDu || ((1 << v14) & 0x3400) == 0)
            {
              if ((unsigned __int16)v14 == 92)
              {
                if (WebCore::CSSTokenizerInputStream::nextInputChar(v6))
                {
                  v16 = WebCore::CSSTokenizerInputStream::peek(v6, 0);
                  if (v16 <= 0xD && ((1 << v16) & 0x3400) != 0)
                  {
                    WebCore::CSSTokenizer::consumeSingleWhitespaceIfNext(a1);
                  }
                  else
                  {
                    v22 = WebCore::CSSTokenizer::consumeEscape((WebCore::CSSTokenizer *)a1);
                    WTF::StringBuilder::append<char32_t>((WTF::StringBuilder *)&v24, v22);
                  }
                }
              }
              else
              {
                WTF::StringBuilder::append((uint64_t)&v24, (unsigned __int16)v14);
              }
              v14 = WebCore::CSSTokenizer::consume((WebCore::CSSTokenizer *)a1);
              if (v14 == a2 || !v14)
                goto LABEL_30;
            }
            --*(_QWORD *)v6;
            *(_QWORD *)a3 = (*(unsigned __int8 *)(a3 + 3) << 24) | 0x1Du;
            *(_QWORD *)(a3 + 8) = 0;
          }
          v21 = v25;
          v25 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v15);
            else
              *(_DWORD *)v21 -= 2;
          }
          result = v24;
          v24 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
            else
              *(_DWORD *)result -= 2;
          }
          return result;
        }
      }
      result = (WTF::StringImpl *)WebCore::CSSTokenizerInputStream::peek(v6, ++v8);
      if ((_DWORD)result == a2)
        goto LABEL_10;
    }
  }
  v8 = 0;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 848);
  if (*(_QWORD *)(a1 + 856) >= v9)
    v10 = *(_QWORD *)(a1 + 848);
  else
    v10 = *(_QWORD *)(a1 + 856);
  *(_QWORD *)(a1 + 848) = v9 + v8 + 1;
  result = (WTF::StringImpl *)WebCore::CSSTokenizerInputStream::rangeAt(*(const char **)(a1 + 864), v10, v8);
  v12 = *(unsigned __int8 *)(a3 + 3);
  if ((v11 & 0xFF00000000) != 0)
    v13 = 4194332;
  else
    v13 = 28;
  *(_QWORD *)(a3 + 8) = result;
  *(_DWORD *)a3 = v13 | (v12 << 24);
  *(_DWORD *)(a3 + 4) = v11;
  *(_DWORD *)(a3 + 16) = -1;
  return result;
}

uint64_t WebCore::CSSTokenizerInputStream::peek(WebCore::CSSTokenizerInputStream *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (*(_QWORD *)this + (unint64_t)a2 >= *((_QWORD *)this + 1))
    return 0;
  v2 = *((_QWORD *)this + 2);
  v3 = *(_QWORD *)this + a2;
  if (*(_DWORD *)(v2 + 4) <= v3)
  {
    result = 1161;
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      return *(unsigned __int8 *)(v4 + v3);
    else
      return *(unsigned __int16 *)(v4 + 2 * v3);
  }
  return result;
}

uint64_t WebCore::CSSTokenizer::consume(WebCore::CSSTokenizer *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((_QWORD *)this + 106);
  if (v1 >= *((_QWORD *)this + 107))
  {
    v5 = 0;
LABEL_5:
    *((_QWORD *)this + 106) = v1 + 1;
    return v5;
  }
  v2 = *((_QWORD *)this + 108);
  if (*(_DWORD *)(v2 + 4) > v1)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *((_QWORD *)this + 106);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      v5 = *(unsigned __int8 *)(v3 + v4);
    else
      v5 = *(unsigned __int16 *)(v3 + 2 * v4);
    goto LABEL_5;
  }
  result = 1161;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSTokenizer::plusOrFullStop@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WebCore::CSSTokenizerInputStream *v6;
  uint64_t result;

  v6 = (WebCore::CSSTokenizerInputStream *)(a1 + 106);
  result = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 106), 0);
  if ((a2 - 48) < 0xA)
    goto LABEL_11;
  if (a2 != 43 && a2 != 45)
  {
    if (a2 == 46 && (result - 48) < 0xA)
      goto LABEL_11;
LABEL_10:
    *(_QWORD *)a3 = (*(unsigned __int8 *)(a3 + 3) << 24) | 6u;
    *(_QWORD *)(a3 + 8) = 0;
    *(_WORD *)(a3 + 16) = a2;
    return result;
  }
  if ((result - 48) >= 0xA)
  {
    if ((_DWORD)result != 46)
      goto LABEL_10;
    result = WebCore::CSSTokenizerInputStream::peek(v6, 1u);
    if ((result - 48) > 9)
      goto LABEL_10;
  }
LABEL_11:
  --a1[106];
  return WebCore::CSSTokenizer::consumeNumericToken((WebCore::CSSTokenizer *)a3, a1);
}

uint64_t WebCore::CSSTokenizer::consumeEscape(WebCore::CSSTokenizer *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v25;
  int v27;
  WebCore::CSSTokenizerInputStream *v28;

  v2 = *((_QWORD *)this + 106);
  if (v2 >= *((_QWORD *)this + 107))
  {
    v6 = 0;
  }
  else
  {
    v3 = *((_QWORD *)this + 108);
    if (*(_DWORD *)(v3 + 4) <= v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1940BE544);
    }
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *((_QWORD *)this + 106);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      v6 = *(unsigned __int8 *)(v4 + v5);
    else
      v6 = *(unsigned __int16 *)(v4 + 2 * v5);
  }
  v7 = (unint64_t *)((char *)this + 848);
  *((_QWORD *)this + 106) = v2 + 1;
  if (v6 - 48 >= 0xA && (v6 | 0x20) - 97 > 5)
  {
    if (v6)
      return v6;
    else
      return 65533;
  }
  WTF::StringBuilder::append();
  v8 = 5;
  while (1)
  {
    v9 = *((_QWORD *)this + 106);
    v10 = *((_QWORD *)this + 107);
    if (v9 >= v10)
      break;
    v11 = *((_QWORD *)this + 108);
    if (*(_DWORD *)(v11 + 4) <= v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1940BE524);
    }
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *((_QWORD *)this + 106);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      v14 = *(unsigned __int8 *)(v12 + v13);
      if ((v14 - 48) >= 0xA && (v14 | 0x20u) - 97 > 5)
        break;
    }
    else
    {
      v16 = *(unsigned __int16 *)(v12 + 2 * v13);
      if ((v16 - 48) >= 0xA && (v16 | 0x20u) - 97 >= 6)
        break;
    }
    *v7 = v9 + 1;
    WTF::StringBuilder::append();
    if (!--v8)
    {
      v9 = *((_QWORD *)this + 106);
      v10 = *((_QWORD *)this + 107);
      break;
    }
  }
  if (v9 < v10)
  {
    v19 = *((_QWORD *)this + 108);
    if (*(_DWORD *)(v19 + 4) <= v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1940BE708);
    }
    v20 = *(_QWORD *)(v19 + 8);
    v21 = (*(_BYTE *)(v19 + 16) & 4) != 0
        ? *(unsigned __int8 *)(v20 + v9)
        : *(unsigned __int16 *)(v20 + 2 * v9);
    if (v21 <= 0x20)
    {
      if (((1 << v21) & 0x100001600) != 0)
        goto LABEL_36;
      if (v21 == 13)
      {
        v27 = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizer *)((char *)this + 848), 1u);
        v9 = *v7;
        if (v27 == 10)
        {
          v22 = v9 + 2;
          goto LABEL_37;
        }
LABEL_36:
        v22 = v9 + 1;
LABEL_37:
        *v7 = v22;
      }
    }
  }
  v23 = WTF::parseInteger<unsigned int,unsigned char>(0, 0, 16, 0);
  if ((v23 & 0xFF00000000) != 0)
  {
    if (v23 >> 11 == 27 || WORD1(v23) > 0x10u)
      v25 = 65533;
    else
      v25 = v23;
    if ((_DWORD)v23)
      return v25;
    else
      return 65533;
  }
  v28 = (WebCore::CSSTokenizerInputStream *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::CSSTokenizerInputStream::nextInputChar(v28);
}

uint64_t WebCore::CSSTokenizerInputStream::nextInputChar(WebCore::CSSTokenizerInputStream *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*(_QWORD *)this >= *((_QWORD *)this + 1))
    return 0;
  v1 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v1 + 4) <= *(_QWORD *)this)
  {
    result = 1161;
    __break(0xC471u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 8);
    v3 = *(_QWORD *)this;
    if ((*(_BYTE *)(v1 + 16) & 4) != 0)
      return *(unsigned __int8 *)(v2 + v3);
    else
      return *(unsigned __int16 *)(v2 + 2 * v3);
  }
  return result;
}

WTF::StringBuilder *WTF::StringBuilder::toString@<X0>(WTF::StringBuilder *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  WTF::StringBuilder *v4;

  v3 = *(_DWORD **)this;
  if (*(_QWORD *)this
    || (v4 = this,
        WTF::StringBuilder::shrinkToFit(this),
        this = (WTF::StringBuilder *)WTF::StringBuilder::reifyString(v4),
        (v3 = *(_DWORD **)v4) != 0))
  {
    *v3 += 2;
  }
  *a2 = v3;
  return this;
}

uint64_t WebCore::CSSTokenizer::registerString(WebCore::CSSTokenizer *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = *((unsigned int *)this + 211);
  if ((_DWORD)v3 == *((_DWORD *)this + 210))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)this + 832, (unint64_t)a2);
  }
  else
  {
    v4 = *((_QWORD *)this + 104);
    v5 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v5 += 2;
    *(_QWORD *)(v4 + 8 * v3) = v5;
    *((_DWORD *)this + 211) = v3 + 1;
  }
  if (*(_QWORD *)a2)
    return *(_QWORD *)(*(_QWORD *)a2 + 8);
  else
    return 0;
}

void WebCore::CSSTokenizer::comma(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = (*(unsigned __int8 *)(a1 + 3) << 24) | 0x15u;
  *(_QWORD *)(a1 + 8) = 0;
}

_DWORD *WebCore::CSSTokenizer::leftBrace@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v5 = 26;
  v2 = result[3];
  if ((_DWORD)v2 == result[2])
  {
    v4 = a2;
    result = WTF::Vector<WebCore::CSSParserTokenType,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSParserTokenType&>((uint64_t)result, (unint64_t)&v5);
    a2 = v4;
    v3 = v5 & 0x3F | 0x40;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 4 * v2) = 26;
    result[3] = v2 + 1;
    v3 = 90;
  }
  *(_QWORD *)a2 = v3 | (*(unsigned __int8 *)(a2 + 3) << 24);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t WebCore::CSSTokenizer::rightBrace@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2 && *(_DWORD *)(*(_QWORD *)result + 4 * v2 - 4) == 26)
  {
    *(_DWORD *)(result + 12) = v2 - 1;
    v3 = 155;
  }
  else
  {
    v3 = 27;
  }
  *(_QWORD *)a2 = v3 | (*(unsigned __int8 *)(a2 + 3) << 24);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

BOOL WebCore::CSSParserToken::convertToDimensionWithUnit(unsigned int *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BOOL8 result;
  unsigned int v17;
  int v18;

  v6 = *a1;
  v7 = a1[1];
  if ((v7 - 1) >= 0xF)
  {
    v9 = a3 & 0xFF00000000;
    goto LABEL_21;
  }
  v8 = *((_QWORD *)a1 + 1);
  v9 = a3 & 0xFF00000000;
  if ((v6 & 0x400000) != 0)
  {
    if (!v9)
    {
      *a1 = v6 & 0xFFFFFFC0 | 9;
      v14 = a3;
      v13 = a3;
      v12 = a2;
      goto LABEL_23;
    }
    if ((unsigned __int8 *)(v8 + v7) != a2)
    {
      *a1 = v6 & 0xFFFFFFC0 | 9;
      v14 = a3;
      v13 = a3;
      v12 = a2;
      goto LABEL_13;
    }
    v10 = 0x100000000;
    goto LABEL_6;
  }
  if (v9 || (unsigned __int8 *)(v8 + 2 * v7) != a2)
  {
LABEL_21:
    v12 = a2;
    v13 = a3;
    goto LABEL_12;
  }
  v10 = 0;
LABEL_6:
  v11 = (a3 + v7) | a3 & 0xFFFFFF0000000000 | v10;
  if (v8)
    v12 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  else
    v12 = a2;
  if (v8)
    v13 = v11;
  else
    v13 = a3;
LABEL_12:
  *a1 = v6 & 0xFFFFFFC0 | 9;
  v14 = a3;
  if (v9)
  {
LABEL_13:
    v15 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>(a2, v14);
    goto LABEL_14;
  }
LABEL_23:
  v15 = WebCore::cssPrimitiveValueUnitFromTrie<char16_t>((unsigned __int16 *)a2, v14);
LABEL_14:
  *a1 = *a1 & 0xFFFC07FF | ((v15 & 0x7F) << 11);
  result = WTF::operator==(v12, v13, a2, a3);
  v17 = *a1;
  v18 = (v7 & 0xF) << 18;
  if (result)
    v18 = 0;
  *((_QWORD *)a1 + 1) = v12;
  *a1 = v18 | (((v13 & 0xFF00000000) != 0) << 22) | v17 & 0xFF03FFFF;
  a1[1] = v13;
  return result;
}

BOOL WTF::operator==(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v4;
  _BOOL8 result;
  uint64_t v6;
  uint8x8_t *v7;
  unsigned int v8;
  int16x8_t *v9;
  int16x8_t *v10;
  unsigned int v11;
  __int32 v12;
  __int32 v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint16x8_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8x8_t *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint8x16_t v37;
  unsigned int v38;
  uint8x16_t v39;
  BOOL v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint16x8_t v46;
  unsigned int v47;
  uint16x8_t v48;
  BOOL v49;
  uint16x8_t v50;
  unsigned int v51;
  uint16x8_t v52;
  BOOL v53;
  uint16x8_t v54;
  unsigned int v55;
  uint16x8_t v56;
  BOOL v57;

  v4 = a1;
  result = (_DWORD)a2 == (_DWORD)a4 && a1 == a3;
  if (v4 == a3 || (_DWORD)a2 != (_DWORD)a4)
    return result;
  if (!(_DWORD)a2)
    return 1;
  v6 = a4 & 0xFF00000000;
  v7 = (uint8x8_t *)a4;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (v6)
    {
      if (!(_DWORD)a4)
        goto LABEL_58;
      if (*(_WORD *)v4 != *a3)
        return 0;
      v4 += 2;
      LODWORD(v6) = a4 - 1;
      v7 = (uint8x8_t *)(a3 + 1);
      if ((a4 - 1) < 8)
      {
        if (v6 >= 4)
        {
          v20 = (v7->u32[0] | ((unint64_t)v7->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v14 = ((v20 | (v20 << 8)) & 0xFF00FF00FF00FFLL) == *(_QWORD *)v4;
          v21 = v6 & 3;
          v22 = (*(unsigned int *)((char *)v7->u32 + v21) | ((unint64_t)*(unsigned int *)((char *)v7->u32 + v21) << 16)) & 0xFFFF0000FFFFLL;
          v23 = (v22 | (v22 << 8)) & 0xFF00FF00FF00FFLL;
          v24 = *(_QWORD *)&v4[2 * v21];
          return v14 && v23 == v24;
        }
        goto LABEL_59;
      }
      v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v4, (int16x8_t)vmovl_u8(*v7));
      v46.i16[0] = vminvq_u16(v46);
      if (v46.i32[0])
      {
        v47 = v6 & 7;
        do
        {
          v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&v4[2 * v47], (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v7 + v47)));
          v48.i16[0] = vminvq_u16(v48);
          result = v48.i32[0] != 0;
          v47 += 8;
          if (v48.i32[0])
            v49 = v47 >= v6;
          else
            v49 = 1;
        }
        while (!v49);
        return result;
      }
      return 0;
    }
    if (!(_DWORD)a4)
      goto LABEL_58;
    if (*(unsigned __int16 *)v4 != *(unsigned __int16 *)a3)
      return 0;
    v18 = a4 - 1;
    if ((_DWORD)a4 != 1)
    {
      v9 = (int16x8_t *)(v4 + 2);
      v10 = (int16x8_t *)(a3 + 2);
      if ((_DWORD)a4 == 2)
        goto LABEL_14;
      switch(31 - __clz(a4 - 2))
      {
        case 0u:
          v12 = v9->i32[0];
          v13 = v10->i32[0];
          return v12 == v13;
        case 1u:
          if (v9->i32[0] != v10->i32[0])
            return 0;
          v12 = *(_DWORD *)&v4[2 * a4 - 4];
          v17 = &a3[2 * a4];
LABEL_28:
          v13 = *((_DWORD *)v17 - 1);
          return v12 == v13;
        case 2u:
          if (v9->i64[0] != v10->i64[0])
            return 0;
          v15 = *(_QWORD *)&v4[2 * a4 - 8];
          v16 = &a3[2 * a4];
          return v15 == *((_QWORD *)v16 - 1);
        case 3u:
          v19 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v4[2 * a4 - 16], *(int16x8_t *)&a3[2 * a4 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v4 + 2), *(int16x8_t *)(a3 + 2)));
          v19.i16[0] = vminvq_u16(v19);
          return v19.i32[0] != 0;
        default:
          v54 = (uint16x8_t)vceqq_s16(*v9, *v10);
          v54.i16[0] = vminvq_u16(v54);
          if (!v54.i32[0])
            return 0;
          if (v18 < 8)
            return 1;
          v55 = v18 & 7;
          do
          {
            v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v9 + 2 * v55), *(int16x8_t *)((char *)v10 + 2 * v55));
            v56.i16[0] = vminvq_u16(v56);
            result = v56.i32[0] != 0;
            v55 += 8;
            if (v56.i32[0])
              v57 = v55 >= v18;
            else
              v57 = 1;
          }
          while (!v57);
          break;
      }
      return result;
    }
    return 1;
  }
  if (!v6)
  {
    if (!(_DWORD)a4)
      goto LABEL_58;
    if (*(_WORD *)a3 != *v4)
      return 0;
    v25 = (uint8x8_t *)(v4 + 1);
    v26 = a4 - 1;
    v4 = a3 + 2;
    if ((a4 - 1) < 8)
    {
      if (v26 >= 4)
      {
        v27 = (v25->u32[0] | ((unint64_t)v25->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v14 = ((v27 | (v27 << 8)) & 0xFF00FF00FF00FFLL) == *(_QWORD *)v4;
        v28 = v26 & 3;
        v29 = (*(unsigned int *)((char *)v25->u32 + v28) | ((unint64_t)*(unsigned int *)((char *)v25->u32 + v28) << 16)) & 0xFFFF0000FFFFLL;
        v30 = (v29 | (v29 << 8)) & 0xFF00FF00FF00FFLL;
        v31 = *(_QWORD *)&v4[2 * v28];
        return v14 && v30 == v31;
      }
      if (v26 >= 2)
      {
        v41 = (v25->u16[0] | (v25->u16[0] << 8)) & 0xFF00FF;
        v42 = *(_DWORD *)v4;
        v43 = v26 & 1;
        v44 = (*(unsigned __int16 *)((char *)v25->u16 + v43) | (*(unsigned __int16 *)((char *)v25->u16 + v43) << 8)) & 0xFF00FF;
        v45 = *(_DWORD *)&v4[2 * v43];
        return v41 == v42 && v44 == v45;
      }
      if ((_DWORD)a4 != 2)
        return 1;
      v13 = v25->u8[0];
      goto LABEL_105;
    }
    v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v4, (int16x8_t)vmovl_u8(*v25));
    v50.i16[0] = vminvq_u16(v50);
    if (v50.i32[0])
    {
      v51 = v26 & 7;
      do
      {
        v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&v4[2 * v51], (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v25 + v51)));
        v52.i16[0] = vminvq_u16(v52);
        result = v52.i32[0] != 0;
        v51 += 8;
        if (v52.i32[0])
          v53 = v51 >= v26;
        else
          v53 = 1;
      }
      while (!v53);
      return result;
    }
    return 0;
  }
  if (!(_DWORD)a4)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    if (v6 >= 2)
    {
      v32 = (v7->u16[0] | (v7->u16[0] << 8)) & 0xFF00FF;
      v33 = *(_DWORD *)v4;
      v34 = v6 & 1;
      v35 = (*(unsigned __int16 *)((char *)v7->u16 + v34) | (*(unsigned __int16 *)((char *)v7->u16 + v34) << 8)) & 0xFF00FF;
      v36 = *(_DWORD *)&v4[2 * v34];
      return v32 == v33 && v35 == v36;
    }
    if ((_DWORD)v6 != 1)
      return 1;
    v13 = v7->u8[0];
LABEL_105:
    v12 = *(unsigned __int16 *)v4;
    return v12 == v13;
  }
  if (*v4 != *a3)
    return 0;
  v8 = a4 - 1;
  if ((_DWORD)a4 == 1)
    return 1;
  v9 = (int16x8_t *)(v4 + 1);
  v10 = (int16x8_t *)(a3 + 1);
  if ((_DWORD)a4 == 2)
  {
    v12 = v9->u8[0];
    v13 = v10->u8[0];
    return v12 == v13;
  }
  v11 = 32 - __clz(a4 - 2);
  if (v11 == 1)
  {
LABEL_14:
    v12 = v9->u16[0];
    v13 = v10->u16[0];
    return v12 == v13;
  }
  switch(v11)
  {
    case 2u:
      if (v9->u16[0] != v10->u16[0])
        return 0;
      v12 = *(unsigned __int16 *)&v4[a4 - 2];
      v13 = *(unsigned __int16 *)&a3[a4 - 2];
      return v12 == v13;
    case 3u:
      if (v9->i32[0] != v10->i32[0])
        return 0;
      v12 = *(_DWORD *)&v4[a4 - 4];
      v17 = &a3[a4];
      goto LABEL_28;
    case 4u:
      if (v9->i64[0] != v10->i64[0])
        return 0;
      v15 = *(_QWORD *)&v4[a4 - 8];
      v16 = &a3[a4];
      return v15 == *((_QWORD *)v16 - 1);
    case 5u:
      v19 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v4[a4 - 16], *(int8x16_t *)&a3[a4 - 16]), vceqq_s8(*(int8x16_t *)(v4 + 1), *(int8x16_t *)(a3 + 1)));
      v19.i8[0] = vminvq_u8((uint8x16_t)v19);
      return v19.i32[0] != 0;
    default:
      v37 = (uint8x16_t)vceqq_s8(*(int8x16_t *)v9, *(int8x16_t *)v10);
      v37.i8[0] = vminvq_u8(v37);
      if (!v37.i32[0])
        return 0;
      if (v8 < 0x10)
        return 1;
      v38 = v8 & 0xF;
      do
      {
        v39 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v9 + v38), *(int8x16_t *)((char *)v10 + v38));
        v39.i8[0] = vminvq_u8(v39);
        result = v39.i32[0] != 0;
        v38 += 16;
        if (v39.i32[0])
          v40 = v38 >= v8;
        else
          v40 = 1;
      }
      while (!v40);
      break;
  }
  return result;
}

uint64_t WebCore::CSSTokenizer::consumeIdentLikeToken(WebCore::CSSTokenizer *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int i;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  int v27;

  result = (uint64_t)WebCore::CSSTokenizer::consumeName((WebCore::CSSTokenizer *)a2, (WTF::StringImpl *)a2);
  v7 = result;
  v8 = v5;
  v9 = *(_QWORD *)(a2 + 848);
  v10 = *(_QWORD *)(a2 + 856);
  if (v9 >= v10)
    goto LABEL_12;
  v11 = *(_QWORD *)(a2 + 864);
  v12 = *(unsigned int *)(v11 + 4);
  if (v12 <= v9)
  {
    result = 1161;
    __break(0xC471u);
    goto LABEL_46;
  }
  v6 = *(_DWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(a2 + 848);
  v15 = (v6 & 4) != 0 ? *(unsigned __int8 *)(v13 + v14) : *(unsigned __int16 *)(v13 + 2 * v14);
  if (v15 == 40)
  {
    result = a2 + 848;
    *(_QWORD *)(a2 + 848) = ++v9;
    if ((_DWORD)v5 == 3)
    {
      if ((v5 & 0xFF00000000) == 0)
        goto LABEL_47;
      if ((*(_BYTE *)v7 & 0xDF) == 0x55 && (*(_BYTE *)(v7 + 1) & 0xDF) == 0x52)
      {
        for (i = *(unsigned __int8 *)(v7 + 2); (i & 0xFFFFFFDF) == 0x4C; i = *(unsigned __int16 *)(v7 + 4))
        {
          v11 = *(_QWORD *)(v11 + 8);
          if ((v6 & 4) != 0)
          {
            if (v9 >= v10)
              goto LABEL_31;
            if (v9 > v12)
              v12 = v9;
            LOBYTE(v6) = 1;
            while (v12 != v9)
            {
              v20 = *(unsigned __int8 *)(v11 + v9);
              v21 = v20 > 0x20;
              v22 = (1 << v20) & 0x100003600;
              if (!v21 && v22 != 0)
              {
                *(_QWORD *)result = ++v9;
                if (v10 != v9)
                  continue;
              }
              goto LABEL_31;
            }
          }
          else
          {
            if (v9 >= v10)
            {
LABEL_31:
              result = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)result, 0);
              if ((_DWORD)result != 34 && (_DWORD)result != 39)
                return WebCore::CSSTokenizer::consumeURLToken((uint64_t)this, a2);
              break;
            }
            if (v9 > v12)
              v12 = v9;
            LOBYTE(v6) = 1;
            while (v12 != v9)
            {
              v24 = *(unsigned __int16 *)(v11 + 2 * v9);
              v21 = v24 > 0x20;
              v25 = (1 << v24) & 0x100003600;
              if (!v21 && v25 != 0)
              {
                *(_QWORD *)result = ++v9;
                if (v10 != v9)
                  continue;
              }
              goto LABEL_31;
            }
          }
LABEL_46:
          __break(1u);
LABEL_47:
          if ((*(_WORD *)v7 & 0xFFDF) != 0x55 || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x52)
            break;
        }
      }
    }
    v27 = 22;
    v16 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v16 == *(_DWORD *)(a2 + 8))
    {
      result = (uint64_t)WTF::Vector<WebCore::CSSParserTokenType,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSParserTokenType&>(a2, (unint64_t)&v27);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = 22;
      *(_DWORD *)(a2 + 12) = v16 + 1;
    }
    v17 = *((unsigned __int8 *)this + 3);
    if ((v8 & 0xFF00000000) != 0)
      v18 = 4194369;
    else
      v18 = 65;
  }
  else
  {
LABEL_12:
    v17 = *((unsigned __int8 *)this + 3);
    v18 = ((v5 & 0xFF00000000) != 0) << 22;
  }
  *((_QWORD *)this + 1) = v7;
  *(_DWORD *)this = v18 | (v17 << 24);
  *((_DWORD *)this + 1) = v8;
  *((_DWORD *)this + 4) = -1;
  return result;
}

uint64_t WebCore::CSSTokenizer::hyphenMinus@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  WebCore::CSSTokenizerInputStream *v6;
  int v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;

  v6 = (WebCore::CSSTokenizerInputStream *)(a1 + 106);
  v7 = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 106), 0);
  if (a2 - 48 < 0xA)
    goto LABEL_29;
  if (a2 == 43 || a2 == 45)
  {
    if ((v7 - 48) < 0xA
      || v7 == 46 && WebCore::CSSTokenizerInputStream::peek(v6, 1u) - 48 <= 9)
    {
LABEL_29:
      --a1[106];
      return WebCore::CSSTokenizer::consumeNumericToken((WebCore::CSSTokenizer *)a3, a1);
    }
  }
  else if (a2 == 46 && (v7 - 48) < 0xA)
  {
    goto LABEL_29;
  }
  result = WebCore::CSSTokenizerInputStream::peek(v6, 0);
  if ((_DWORD)result != 45 || (result = WebCore::CSSTokenizerInputStream::peek(v6, 1u), (_DWORD)result != 62))
  {
    v9 = a1[106];
    if (v9 >= a1[107])
    {
      v13 = 0;
    }
    else
    {
      v10 = a1[108];
      if (*(_DWORD *)(v10 + 4) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1940BF448);
      }
      v11 = *(_QWORD *)(v10 + 8);
      v12 = a1[106];
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        v13 = *(unsigned __int8 *)(v11 + v12);
      else
        v13 = *(unsigned __int16 *)(v11 + 2 * v12);
    }
    if (a2 > 0x7F || a2 == 95 || (a2 | 0x20) - 97 < 0x1A)
      goto LABEL_28;
    if (a2 == 45)
    {
      if (v13 == 45 || v13 > 0x7F || v13 == 95 || (v13 | 0x20) - 97 < 0x1A)
        goto LABEL_28;
      v14 = WebCore::CSSTokenizerInputStream::peek(v6, 0);
      result = WebCore::CSSTokenizerInputStream::peek(v6, 1u);
      if (v14 == 92 && (result > 0xD || ((1 << result) & 0x3400) == 0))
      {
        v9 = *(_QWORD *)v6;
LABEL_28:
        a1[106] = v9 - 1;
        return WebCore::CSSTokenizer::consumeIdentLikeToken((WebCore::CSSTokenizer *)a3, (uint64_t)a1);
      }
    }
    else if (a2 == 92 && (v13 > 0xD || ((1 << v13) & 0x3400) == 0))
    {
      goto LABEL_28;
    }
    *(_QWORD *)a3 = (*(unsigned __int8 *)(a3 + 3) << 24) | 6u;
    *(_QWORD *)(a3 + 8) = 0;
    *(_WORD *)(a3 + 16) = a2;
    return result;
  }
  *(_QWORD *)v6 += 2;
  *(_QWORD *)a3 = (*(unsigned __int8 *)(a3 + 3) << 24) | 0x12u;
  *(_QWORD *)(a3 + 8) = 0;
  return result;
}

uint64_t WebCore::CSSTokenizer::reverseSolidus@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  BOOL v7;

  result = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 848), 0);
  if (a2 == 92 && (result <= 0xD ? (v7 = ((1 << result) & 0x3400) == 0) : (v7 = 1), v7))
  {
    --*(_QWORD *)(a1 + 848);
    return WebCore::CSSTokenizer::consumeIdentLikeToken((WebCore::CSSTokenizer *)a3, a1);
  }
  else
  {
    *(_QWORD *)a3 = (*(unsigned __int8 *)(a3 + 3) << 24) | 6u;
    *(_QWORD *)(a3 + 8) = 0;
    *(_WORD *)(a3 + 16) = a2;
  }
  return result;
}

uint64_t WebCore::CSSTokenizer::consumeNumericToken(WebCore::CSSTokenizer *this, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t i;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;

  v4 = a2[107];
  v5 = a2[106];
  if (v4 >= v5)
    v6 = a2[106];
  else
    v6 = a2[107];
  v7 = a2[108];
  if (v5 >= v4)
  {
    v9 = *(_DWORD *)(v7 + 16);
    v10 = *(_QWORD *)(v7 + 8);
    v8 = *(_DWORD *)(v7 + 4);
    goto LABEL_10;
  }
  v8 = *(_DWORD *)(v7 + 4);
  if (v8 <= v5)
  {
    __break(0xC471u);
    goto LABEL_119;
  }
  v9 = *(_DWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 8);
  v11 = a2[106];
  if ((v9 & 4) != 0)
    v12 = *(unsigned __int8 *)(v10 + v11);
  else
    v12 = *(unsigned __int16 *)(v10 + 2 * v11);
  if (v12 == 45)
  {
    v14 = 1024;
LABEL_125:
    v13 = 1;
    goto LABEL_11;
  }
  if (v12 == 43)
  {
    v14 = 512;
    goto LABEL_125;
  }
LABEL_10:
  v13 = 0;
  v14 = 0;
LABEL_11:
  v15 = v5 + v13;
  v16 = v15 >= v4;
  if ((v9 & 4) != 0)
  {
    while (!v16)
    {
      if (v15 >= v8)
        goto LABEL_119;
      if (*(unsigned __int8 *)(v10 + v15) - 48 > 9)
        break;
      v13 = (v13 + 1);
      v15 = v5 + v13;
      v16 = v5 + v13 >= v4;
    }
  }
  else if (v15 < v4)
  {
    v17 = v13;
    while (1)
    {
      if (v15 >= v8)
        goto LABEL_119;
      if (*(unsigned __int16 *)(v10 + 2 * v15) - 48 > 9)
        break;
      v17 = (v17 + 1);
      v15 = v5 + v17;
      v13 = v17;
      if (v5 + v17 >= v4)
        goto LABEL_25;
    }
    v13 = v17;
  }
LABEL_25:
  v18 = a2 + 106;
  if (v5 + v13 >= v4)
    goto LABEL_46;
  v19 = (v13 + v5);
  if (v8 <= v19)
  {
LABEL_120:
    __break(0xC471u);
    JUMPOUT(0x1940BFAACLL);
  }
  if ((v9 & 4) != 0)
    v20 = *(unsigned __int8 *)(v10 + v19);
  else
    v20 = *(unsigned __int16 *)(v10 + 2 * v19);
  if (v20 != 46)
  {
    v26 = 0;
    goto LABEL_53;
  }
  v21 = (v13 + 1);
  if (v5 + v21 >= v4)
    goto LABEL_46;
  v22 = (v21 + v5);
  if (v8 <= v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1940BFB38);
  }
  if ((v9 & 4) == 0)
  {
    if (*(unsigned __int16 *)(v10 + 2 * v22) - 48 < 0xA)
    {
      v24 = (v13 + 2);
      v25 = v5 + v24;
      if (v5 + v24 < v4)
      {
        while (v25 < v8)
        {
          if (*(unsigned __int16 *)(v10 + 2 * v25) - 48 > 9)
            goto LABEL_47;
          v24 = (v24 + 1);
          v25 = v5 + v24;
          v13 = v24;
          if (v5 + v24 >= v4)
            goto LABEL_48;
        }
        goto LABEL_119;
      }
LABEL_47:
      v13 = v24;
      goto LABEL_48;
    }
LABEL_46:
    v26 = 0;
LABEL_54:
    result = v13;
    goto LABEL_55;
  }
  if (*(unsigned __int8 *)(v10 + v22) - 48 > 9)
    goto LABEL_46;
  v13 = (v13 + 2);
  for (i = v5 + v13; i < v4; i = v5 + v13)
  {
    if (i >= v8)
      goto LABEL_119;
    if (*(unsigned __int8 *)(v10 + i) - 48 > 9)
      break;
    v13 = (v13 + 1);
  }
LABEL_48:
  if (v5 + v13 >= v4)
  {
    v26 = 1;
    goto LABEL_54;
  }
  v27 = (v13 + v5);
  if (v8 <= v27)
  {
    __break(0xC471u);
    JUMPOUT(0x1940BFBF8);
  }
  if ((v9 & 4) != 0)
    v20 = *(unsigned __int8 *)(v10 + v27);
  else
    v20 = *(unsigned __int16 *)(v10 + 2 * v27);
  v26 = 1;
LABEL_53:
  if ((v20 & 0xFFFFFFDF) != 0x45)
    goto LABEL_54;
  v56 = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a2 + 106), (int)v13 + 1);
  if ((v56 - 48) <= 9)
  {
    result = WebCore::CSSTokenizerInputStream::skipWhilePredicate<&(BOOL WTF::isASCIIDigit<char16_t>(char16_t))>(a2 + 106, (v13 + 1));
    goto LABEL_152;
  }
  if (v56 != 45 && v56 != 43
    || WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a2 + 106), (int)v13 + 2)- 48 > 9)
  {
    goto LABEL_54;
  }
  result = (v13 + 3);
  v57 = a2[106];
  v58 = v57 + result;
  v59 = a2[108];
  v60 = *(_QWORD *)(v59 + 8);
  v61 = *(unsigned int *)(v59 + 4);
  v62 = a2[107];
  if ((*(_BYTE *)(v59 + 16) & 4) != 0)
  {
    if (v58 < v62)
    {
      v26 = 1;
      while (v58 < v61)
      {
        if (*(unsigned __int8 *)(v60 + v58) - 48 > 9)
          goto LABEL_152;
        result = (result + 1);
        v58 = v57 + result;
        if (v57 + result >= v62)
          goto LABEL_55;
      }
      goto LABEL_119;
    }
    goto LABEL_152;
  }
  if (v58 >= v62)
  {
LABEL_152:
    v26 = 1;
    goto LABEL_55;
  }
  v64 = (v13 + 3);
  v26 = 1;
  while (1)
  {
    if (v58 >= v61)
      goto LABEL_119;
    if (*(unsigned __int16 *)(v60 + 2 * v58) - 48 > 9)
      break;
    v64 = (v64 + 1);
    v58 = v57 + v64;
    result = v64;
    if (v57 + v64 >= v62)
      goto LABEL_55;
  }
  v26 = 1;
  result = v64;
LABEL_55:
  if ((_DWORD)result)
  {
    v29 = a2[108];
    v30 = *(unsigned int *)(v29 + 4);
    v31 = a2[106];
    v32 = result;
    if ((*(_BYTE *)(v29 + 16) & 4) != 0)
    {
      v16 = v30 >= v31;
      v33 = v30 - v31;
      if (!v16 || v33 < result)
        goto LABEL_119;
      result = WTF::charactersToDouble();
    }
    else
    {
      v16 = v30 >= v31;
      v55 = v30 - v31;
      if (!v16 || v55 < result)
        goto LABEL_119;
      result = WTF::charactersToDouble();
    }
  }
  else
  {
    v32 = 0;
  }
  v34 = a2[106] + v32;
  a2[106] = v34;
  v35 = a2[107];
  if (v35 >= v34)
    LODWORD(v36) = v34;
  else
    v36 = a2[107];
  v37 = a2[108];
  if (v37)
  {
    v38 = *(const char **)(v37 + 8);
    v39 = *(unsigned int *)(v37 + 4) | ((unint64_t)((*(_DWORD *)(v37 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v38 = 0;
    v39 = 0x100000000;
  }
  if (v39 <= v6)
  {
    v36 = 0x100000000;
    v38 = "";
  }
  else
  {
    LODWORD(v36) = v36 - v6;
    if ((int)v39 - (int)v6 > v36)
      goto LABEL_68;
    if ((_DWORD)v6)
    {
      LODWORD(v36) = v39 - v6;
LABEL_68:
      v36 = v36;
      v40 = v39 - (unint64_t)v6;
      if ((v39 & 0x100000000) != 0)
      {
        if (v40 >= v36)
        {
          v38 += v6;
          v36 = v36 | 0x100000000;
          goto LABEL_71;
        }
        goto LABEL_119;
      }
      if (v40 >= v36)
      {
        v38 += 2 * v6;
        goto LABEL_71;
      }
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    v36 = v39;
  }
LABEL_71:
  v41 = *((unsigned __int8 *)this + 3);
  *((_QWORD *)this + 2) = 0;
  v42 = v14 | (v26 << 8) | (v41 << 24) | (HIDWORD(v36) << 22);
  *((_QWORD *)this + 1) = v38;
  *(_DWORD *)this = v42 | 0x807;
  *((_DWORD *)this + 1) = v36;
  if (v34 >= v35)
  {
    v44 = 0;
  }
  else
  {
    if (*(_DWORD *)(v37 + 4) <= v34)
    {
      __break(0xC471u);
      JUMPOUT(0x1940BFB0CLL);
    }
    v43 = *(_QWORD *)(v37 + 8);
    if ((*(_BYTE *)(v37 + 16) & 4) != 0)
      v44 = *(unsigned __int8 *)(v43 + v34);
    else
      v44 = *(unsigned __int16 *)(v43 + 2 * v34);
  }
  *v18 = v34 + 1;
  if (v34 + 1 >= v35)
  {
    v47 = 0;
  }
  else
  {
    if (*(_DWORD *)(v37 + 4) <= (v34 + 1))
    {
      __break(0xC471u);
      JUMPOUT(0x1940BFACCLL);
    }
    v45 = *(_QWORD *)(v37 + 8);
    v46 = (v34 + 1);
    if ((*(_BYTE *)(v37 + 16) & 4) != 0)
      v47 = *(unsigned __int8 *)(v45 + v46);
    else
      v47 = *(unsigned __int16 *)(v45 + 2 * v46);
  }
  if (v44 > 0x7F || v44 == 95 || (v44 | 0x20) - 97 < 0x1A)
    goto LABEL_107;
  if (v44 == 45)
  {
    if (v47 == 45 || v47 > 0x7F || v47 == 95 || (v47 | 0x20) - 97 < 0x1A)
      goto LABEL_107;
    v63 = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a2 + 106), 0);
    result = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a2 + 106), 1u);
    if (v63 == 92 && (result > 0xD || ((1 << result) & 0x3400) == 0))
    {
      v34 = *v18 - 1;
LABEL_107:
      a2[106] = v34;
      v53 = (unsigned __int8 *)WebCore::CSSTokenizer::consumeName((WebCore::CSSTokenizer *)a2, (WTF::StringImpl *)a2);
      return WebCore::CSSParserToken::convertToDimensionWithUnit((unsigned int *)this, v53, v54);
    }
  }
  else if (v44 == 92 && (v47 > 0xD || ((1 << v47) & 0x3400) == 0))
  {
    goto LABEL_107;
  }
  v48 = a2[106];
  a2[106] = v48 - 1;
  if ((unint64_t)(v48 - 1) < a2[107])
  {
    v49 = a2[108];
    if (*(_DWORD *)(v49 + 4) <= (v48 - 1))
    {
      __break(0xC471u);
      JUMPOUT(0x1940BFAECLL);
    }
    v50 = *(_QWORD *)(v49 + 8);
    v51 = (v48 - 1);
    if ((*(_BYTE *)(v49 + 16) & 4) != 0)
      v52 = *(unsigned __int8 *)(v50 + v51);
    else
      v52 = *(unsigned __int16 *)(v50 + 2 * v51);
    if (v52 == 37)
    {
      *v18 = v48;
      *(_DWORD *)this = v42 | 0x1808;
    }
  }
  return result;
}

uint64_t WebCore::CSSTokenizer::rightParenthesis@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2 && *(_DWORD *)(*(_QWORD *)result + 4 * v2 - 4) == 22)
  {
    *(_DWORD *)(result + 12) = v2 - 1;
    v3 = 151;
  }
  else
  {
    v3 = 23;
  }
  *(_QWORD *)a2 = v3 | (*(unsigned __int8 *)(a2 + 3) << 24);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t WebCore::CSSTokenizer::rightBracket@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2 && *(_DWORD *)(*(_QWORD *)result + 4 * v2 - 4) == 24)
  {
    *(_DWORD *)(result + 12) = v2 - 1;
    v3 = 153;
  }
  else
  {
    v3 = 25;
  }
  *(_QWORD *)a2 = v3 | (*(unsigned __int8 *)(a2 + 3) << 24);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

_DWORD *WebCore::CSSTokenizer::leftBracket@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v5 = 24;
  v2 = result[3];
  if ((_DWORD)v2 == result[2])
  {
    v4 = a2;
    result = WTF::Vector<WebCore::CSSParserTokenType,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSParserTokenType&>((uint64_t)result, (unint64_t)&v5);
    a2 = v4;
    v3 = v5 & 0x3F | 0x40;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 4 * v2) = 24;
    result[3] = v2 + 1;
    v3 = 88;
  }
  *(_QWORD *)a2 = v3 | (*(unsigned __int8 *)(a2 + 3) << 24);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

void WebCore::CSSTokenizer::endOfFile(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = (*(unsigned __int8 *)(a1 + 3) << 24) | 0x1Eu;
  *(_QWORD *)(a1 + 8) = 0;
}

_DWORD *WebCore::CSSTokenizer::leftParenthesis@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v5 = 22;
  v2 = result[3];
  if ((_DWORD)v2 == result[2])
  {
    v4 = a2;
    result = WTF::Vector<WebCore::CSSParserTokenType,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSParserTokenType&>((uint64_t)result, (unint64_t)&v5);
    a2 = v4;
    v3 = v5 & 0x3F | 0x40;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 4 * v2) = 22;
    result[3] = v2 + 1;
    v3 = 86;
  }
  *(_QWORD *)a2 = v3 | (*(unsigned __int8 *)(a2 + 3) << 24);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::CSSParserToken,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    if (WTF::Vector<WebCore::CSSParserToken,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(a1, a2))return *(_QWORD *)a1 + a3 - v5;
    else
      return 0;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    if (WTF::Vector<WebCore::CSSParserToken,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(a1, a2))return a3;
    else
      return 0;
  }
}

uint64_t *WebCore::Color::data@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *this;
  if ((*this & 0x4000000000000) != 0)
  {
    if ((v2 & 0x8000000000000) != 0)
    {
      *(_BYTE *)(a2 + 7) = 0;
      *(_WORD *)(a2 + 5) = 0;
      *(_BYTE *)a2 = BYTE6(v2) & 1;
      *(_BYTE *)(a2 + 1) = (v2 & 0x2000000000000) != 0;
      *(_BYTE *)(a2 + 4) = HIBYTE(v2);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
      *(_DWORD *)(a2 + 24) = 1;
    }
    else
    {
      *(_BYTE *)a2 = BYTE6(v2) & 1;
      *(_BYTE *)(a2 + 1) = (v2 & 0x2000000000000) != 0;
      *(_DWORD *)(a2 + 4) = v2;
      *(_DWORD *)(a2 + 24) = 0;
    }
    *(_BYTE *)(a2 + 28) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 28) = 0;
  }
  return this;
}

_QWORD *WebCore::Color::Color(_QWORD *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  *a1 = 0;
  if (*(_BYTE *)(a2 + 28))
  {
    v6 = 0;
    if (*(_BYTE *)a2)
    {
      v6 = 1;
      v3 = 3;
    }
    else
    {
      v3 = 2;
    }
    if (*(_BYTE *)(a2 + 1))
      goto LABEL_10;
    while (1)
    {
      v7[0] = a1;
      v7[1] = &v6;
      v7[2] = a1;
      v7[3] = &v6;
      v4 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v4 != -1)
        break;
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
      v6 = v3;
    }
    v8 = v7;
    ((void (*)(_QWORD **, uint64_t))off_1E340AF78[v4])(&v8, a2 + 4);
  }
  return a1;
}

{
  char v3;
  uint64_t v4;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  *a1 = 0;
  if (*(_BYTE *)(a2 + 28))
  {
    v6 = 0;
    if (*(_BYTE *)a2)
    {
      v6 = 1;
      v3 = 3;
    }
    else
    {
      v3 = 2;
    }
    if (*(_BYTE *)(a2 + 1))
      goto LABEL_10;
    while (1)
    {
      v7[0] = a1;
      v7[1] = &v6;
      v7[2] = a1;
      v7[3] = &v6;
      v4 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v4 != -1)
        break;
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
      v6 = v3;
    }
    v8 = v7;
    ((void (*)(_QWORD **, uint64_t))off_1E340AF78[v4])(&v8, a2 + 4);
  }
  return a1;
}

double WebCore::HTTPHeaderMap::HTTPHeaderMap(WebCore::HTTPHeaderMap *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

WebCore::ResourceRequestBase *WebCore::ResourceRequestBase::url(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return this;
}

float64x2_t WebCore::FloatRect::FloatRect(float32x4_t *this, const CGRect *a2)
{
  float64x2_t result;

  result = (float64x2_t)a2->size;
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)a2->origin), result);
  return result;
}

{
  float64x2_t result;

  result = (float64x2_t)a2->size;
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)a2->origin), result);
  return result;
}

uint64_t WebCore::ResourceLoader::frameLoader(WebCore::ResourceLoader *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(_QWORD *)(v1 + 280);
  else
    return 0;
}

uint64_t WebCore::SubresourceLoader::isSubresourceLoader(WebCore::SubresourceLoader *this)
{
  return 1;
}

uint64_t WebCore::LocalFrameView::renderView(WebCore::LocalFrameView *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1)
    return *(_QWORD *)(v1 + 1944);
  else
    return 0;
}

WTF *WebCore::Style::RuleSetBuilder::addStyleRuleWithSelectorList(WTF *result, const WebCore::CSSSelector *a2, WTF *a3)
{
  WTF *v4;
  uint64_t v5;
  int v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  unsigned int v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  unint64_t v21;
  int CanMatchPseudoElement;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  const WebCore::CSSSelector *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int *v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  int v39;
  unsigned __int16 v40;
  uint64_t v41;
  WTF *v42;
  int v43;
  __int16 v44;
  WTF::StringImpl *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  int i;
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  void *v95;
  int v96;
  int v97;
  BOOL v98;
  BOOL v99;
  int v100;
  WTF *v101;
  WTF *v102;
  WTF *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v109;
  WTF *v110;
  unint64_t v111;
  __int128 v112;
  WTF *v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD v125[2];

  if (*(_QWORD *)a2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = (WTF *)&v115;
    v8 = (WTF *)&v118;
    v9 = (WTF *)&v121;
    v10 = (WTF *)&v124;
    do
    {
      v11 = v7;
      v12 = *(_DWORD *)(*(_QWORD *)v4 + 680);
      v13 = *((unsigned __int8 *)v4 + 140);
      ++*(_DWORD *)a3;
      v14 = v111 & 0xFFE0000000000000 | (v6 << 16) | ((unint64_t)(v12 & 0x1FFFFF) << 32) | (unsigned __int16)v5;
      v110 = a3;
      v111 = v14;
      v15 = *((_QWORD *)a3 + 2);
      v16 = (int *)(v15 + 16 * (unsigned __int16)v5);
      v17 = *v16;
      v109 = v6;
      v18 = v10;
      if ((*v16 & 0x80000) != 0)
      {
        v57 = (v17 >> 4) & 0x1F;
        v19 = v9;
        if (v57 != 1)
        {
          if ((*v16 & 0x1F0) == 0x80
            && ((v97 = (v17 >> 9), (v97 - 29) <= 0x33)
              ? (v98 = ((1 << (v97 - 29)) & 0x8000000020001) == 0)
              : (v98 = 1),
                v98 ? (v99 = v97 == 13) : (v99 = 1),
                v99))
          {
            v20 = 0x60000000000000;
          }
          else
          {
            v58 = 0x60000000000000;
            if (v57 != 3)
              v58 = 0;
            v36 = v57 == 2;
            v20 = 0x40000000000000;
            if (!v36)
              v20 = v58;
          }
          goto LABEL_6;
        }
        v87 = *(_QWORD *)(v15 + 16 * (unsigned __int16)v5 + 8);
        v88 = *(_QWORD *)(v87 + 32);
        if (v88 == WebCore::starAtomData || v88 == WebCore::HTMLNames::xhtmlNamespaceURI)
        {
          v36 = v87 == WebCore::anyName;
          v20 = 0x80000000000000;
          if (v36)
            v20 = 0x20000000000000;
          goto LABEL_6;
        }
      }
      else
      {
        v19 = v9;
      }
      v20 = 0;
LABEL_6:
      v21 = v20 | v14 & 0xFF1FFFFFFFFFFFFFLL;
      v111 = v21;
      CanMatchPseudoElement = WebCore::Style::selectorCanMatchPseudoElement(v16, a2);
      v24 = 0x100000000000000;
      if (!CanMatchPseudoElement)
        v24 = 0;
      v25 = v24 | v21 & 0xFEFFFFFFFFFFFFFFLL;
      v111 = v25;
      v26 = WebCore::Style::computeContainsUncommonAttributeSelector((unsigned int *)v16, 1, v23);
      v28 = 0x200000000000000;
      if (!v26)
        v28 = 0;
      v29 = v28 | v25 & 0xFDFFFFFFFFFFFFFFLL;
      v111 = v29;
      v30 = 3;
      v31 = v16;
      v9 = v19;
      v10 = v18;
      v7 = v11;
      while (1)
      {
        v32 = *v31;
        v33 = (*v31 >> 9);
        v34 = v30 & 0xFFFFFFFD;
        if (v33 != 46)
          v34 = v30;
        if (v33 == 80)
          v35 = v30 & 0xFFFFFFFE;
        else
          v35 = v34;
        if ((*v31 & 0x1F0) == 0x80)
          v30 = v35;
        if ((v32 & 0xF) != 0)
          break;
        if ((v32 & 0x80000) != 0)
          goto LABEL_28;
LABEL_26:
        v31 += 4;
      }
      if ((v32 & 0x80000) == 0)
      {
        v36 = (*v31 & 0xFu) <= 2 && v30 == 3;
        if (v36)
        {
          v30 = 3;
          goto LABEL_26;
        }
      }
LABEL_28:
      v111 = v29 & 0xF3FFFFFFFFFFFFFFLL | ((unint64_t)(v30 & 3) << 58);
      v37 = WebCore::Style::determinePropertyAllowlist((uint64_t)v16, v27);
      v40 = v111;
      v111 = ((unint64_t)(v13 != 0) << 62) | ((unint64_t)(v37 & 3) << 60) | v111 & 0xFFFFFFFFFFFFFFFLL | 0x8000000000000000;
      v41 = v40;
      v42 = (WTF *)*((_QWORD *)v110 + 2);
      v113 = v11;
      v114 = 8;
      v116 = v8;
      v117 = 8;
      v119 = v9;
      v120 = 8;
      v122 = v10;
      v123 = 8;
      v43 = *((_DWORD *)v42 + 4 * v41);
      if ((v43 & 0x80000) == 0)
      {
        v44 = v43 & 0xF | 0x100;
        v45 = (WTF *)((char *)v42 + 16 * v41 + 16);
        do
        {
          if ((_BYTE)v44)
          {
            v42 = (WTF *)(v44 - 1);
            if (v42 >= 2)
            {
              if (v44 - 3 < 5)
                v44 = 256;
            }
            else
            {
              v37 = WebCore::SelectorFilter::collectSimpleSelectorHash((uint64_t)&v113, v45);
              v44 = 0;
            }
          }
          else if ((v44 & 0xFF00) == 0)
          {
            v37 = WebCore::SelectorFilter::collectSimpleSelectorHash((uint64_t)&v113, v45);
          }
          v46 = *(_DWORD *)v45;
          v45 = (WTF::StringImpl *)((char *)v45 + 16);
          v44 = v44 & 0xFF00 | v46 & 0xF;
        }
        while ((v46 & 0x80000) == 0);
        if (HIDWORD(v114))
        {
          v47 = 0;
          v42 = v113;
          v48 = 4 * HIDWORD(v114);
          while (1)
          {
            v39 = *(_DWORD *)v42;
            if (!v47)
              break;
            if (LODWORD(v125[0]) != v39)
            {
              if (v47 == 1)
                break;
              if (DWORD1(v125[0]) == v39)
                goto LABEL_81;
              if (v47 == 2)
                break;
              if (DWORD2(v125[0]) != v39)
              {
                if (v47 == 3)
                {
                  HIDWORD(v125[0]) = *(_DWORD *)v42;
                  v37 = (uint64_t)v122;
                  goto LABEL_45;
                }
                if (HIDWORD(v125[0]) != v39)
                  goto LABEL_157;
              }
            }
LABEL_81:
            v42 = (WTF *)((char *)v42 + 4);
            v48 -= 4;
            if (!v48)
              goto LABEL_40;
          }
          *((_DWORD *)v125 + v47++) = v39;
          goto LABEL_81;
        }
      }
      v47 = 0;
LABEL_40:
      v37 = (uint64_t)v122;
      if (HIDWORD(v123))
      {
        v42 = 0;
        v48 = 4 * HIDWORD(v123);
        while (1)
        {
          v39 = *(_DWORD *)((char *)v42 + v37);
          if (!v47)
            goto LABEL_89;
          if (LODWORD(v125[0]) != v39)
            break;
LABEL_90:
          if (v47 == 4)
            goto LABEL_45;
          v42 = (WTF *)((char *)v42 + 4);
          if ((WTF *)v48 == v42)
            goto LABEL_41;
        }
        if (v47 != 1)
        {
          if (DWORD1(v125[0]) == v39)
            goto LABEL_90;
LABEL_158:
          if (v47 != 2)
          {
            if (DWORD2(v125[0]) == v39)
              goto LABEL_90;
            if (v47 != 3)
            {
              if (HIDWORD(v125[0]) != v39)
                goto LABEL_157;
              goto LABEL_90;
            }
          }
        }
LABEL_89:
        *((_DWORD *)v125 + v47++) = v39;
        goto LABEL_90;
      }
LABEL_41:
      if (HIDWORD(v117))
      {
        v42 = v116;
        v48 = 4 * HIDWORD(v117);
        while (1)
        {
          v39 = *(_DWORD *)v42;
          if (!v47)
            goto LABEL_99;
          if (LODWORD(v125[0]) != v39)
            break;
LABEL_100:
          if (v47 == 4)
            goto LABEL_45;
          v42 = (WTF *)((char *)v42 + 4);
          v48 -= 4;
          if (!v48)
            goto LABEL_42;
        }
        if (v47 != 1)
        {
          if (DWORD1(v125[0]) == v39)
            goto LABEL_100;
          if (v47 != 2)
          {
            if (DWORD2(v125[0]) == v39)
              goto LABEL_100;
            if (v47 != 3)
            {
              if (HIDWORD(v125[0]) != v39)
                goto LABEL_157;
              goto LABEL_100;
            }
          }
        }
LABEL_99:
        *((_DWORD *)v125 + v47++) = v39;
        goto LABEL_100;
      }
LABEL_42:
      v48 = HIDWORD(v120);
      if (HIDWORD(v120))
      {
        v42 = v119;
        v48 = 4 * HIDWORD(v120);
        while (1)
        {
          v39 = *(_DWORD *)v42;
          if (!v47)
            goto LABEL_109;
          if (LODWORD(v125[0]) != v39)
            break;
LABEL_110:
          if (v47 == 4)
            goto LABEL_45;
          v42 = (WTF *)((char *)v42 + 4);
          v48 -= 4;
          if (!v48)
            goto LABEL_43;
        }
        if (v47 != 1)
        {
          if (DWORD1(v125[0]) == v39)
            goto LABEL_110;
          if (v47 != 2)
          {
            if (DWORD2(v125[0]) == v39)
              goto LABEL_110;
            if (v47 != 3)
            {
              if (HIDWORD(v125[0]) != v39)
                goto LABEL_157;
              goto LABEL_110;
            }
          }
        }
LABEL_109:
        *((_DWORD *)v125 + v47++) = v39;
        goto LABEL_110;
      }
LABEL_43:
      if (v47 >= 4)
      {
LABEL_157:
        __break(1u);
        goto LABEL_158;
      }
      *((_DWORD *)v125 + v47) = 0;
LABEL_45:
      v49 = v125[0];
      if (v10 != (WTF *)v37 && v37)
      {
        v122 = 0;
        LODWORD(v123) = 0;
        v104 = v125[0];
        WTF::fastFree((WTF *)v37, v38);
        v49 = v104;
      }
      v50 = v119;
      if (v9 != v119 && v119)
      {
        v119 = 0;
        LODWORD(v120) = 0;
        v105 = v49;
        WTF::fastFree(v50, v38);
        v49 = v105;
      }
      v51 = v116;
      if (v8 != v116 && v116)
      {
        v116 = 0;
        LODWORD(v117) = 0;
        v106 = v49;
        WTF::fastFree(v51, v38);
        v49 = v106;
      }
      result = v113;
      if (v11 != v113 && v113)
      {
        v113 = 0;
        LODWORD(v114) = 0;
        v107 = v49;
        result = (WTF *)WTF::fastFree(result, v38);
        v49 = v107;
      }
      v112 = v49;
      v52 = *((unsigned int *)v4 + 9);
      if ((_DWORD)v52)
      {
        v102 = v11;
        v103 = v9;
        v101 = v8;
        v59 = v52 - 1;
        v60 = *((_QWORD *)v4 + 3);
        v61 = v60 + 32 * (v52 - 1);
        v62 = v61 + 8;
        v63 = HIDWORD(v111);
        v64 = *(unsigned int *)(v61 + 20);
        if ((_DWORD)v64 == *(_DWORD *)(v61 + 16))
        {
          v100 = HIDWORD(v111);
          v90 = v10;
          v91 = v64 + (v64 >> 2);
          if (v91 >= 0x10)
            v92 = v91 + 1;
          else
            v92 = 16;
          if (v92 <= v64 + 1)
            v93 = v64 + 1;
          else
            v93 = v92;
          if (v93 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v94 = *(void **)v62;
          v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
          *(_DWORD *)(v62 + 8) = v93;
          *(_QWORD *)v62 = v95;
          memcpy(v95, v94, 8 * v64);
          v10 = v90;
          if (v94)
          {
            if (*(void **)v62 == v94)
            {
              *(_QWORD *)v62 = 0;
              *(_DWORD *)(v62 + 8) = 0;
            }
            WTF::fastFree((WTF *)v94, v38);
          }
          v64 = *(unsigned int *)(v62 + 12);
          v65 = (uint64_t *)(*(_QWORD *)v62 + 8 * v64);
          v63 = v100;
        }
        else
        {
          v65 = (uint64_t *)(*(_QWORD *)v62 + 8 * v64);
        }
        *v65 = *(_QWORD *)&v63 & 0x1FFFFFLL;
        *(_DWORD *)(v62 + 12) = v64 + 1;
        v66 = v60 + 32 * v59;
        v67 = (uint64_t)v110;
        ++*(_DWORD *)v110;
        v70 = *(_QWORD *)(v66 + 24);
        v69 = (uint64_t *)(v66 + 24);
        v68 = v70;
        if (v70
          || (WTF::HashTable<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>,WTF::HashTraits<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>,WTF::HashTraits<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>>::rehash(v69, 8u), (v68 = *v69) != 0))
        {
          v71 = *(_DWORD *)(v68 - 8);
        }
        else
        {
          v71 = 0;
        }
        v8 = v101;
        v7 = v102;
        v72 = 0;
        v73 = (~(v67 << 32) + v67) ^ ((unint64_t)(~(v67 << 32) + v67) >> 22);
        v74 = 9 * ((v73 + ~(v73 << 13)) ^ ((v73 + ~(v73 << 13)) >> 8));
        v75 = (v74 ^ (v74 >> 15)) + ~((v74 ^ (v74 >> 15)) << 27);
        v76 = (v75 >> 31) ^ v75;
        for (i = 1; ; ++i)
        {
          v78 = v76 & v71;
          v79 = (uint64_t *)(v68 + 8 * v78);
          v80 = *v79;
          if (!*v79)
            break;
          if (v80 != -1)
          {
            v79 = v72;
            if (v80 == v67)
            {
              if (*(_DWORD *)v67 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v67, (WTF::StringImpl *)v38);
              else
                --*(_DWORD *)v67;
              v9 = v103;
              goto LABEL_50;
            }
          }
          v76 = i + v78;
          v72 = v79;
        }
        if (v72)
        {
          *v72 = 0;
          --*(_DWORD *)(*v69 - 16);
          *v72 = v67;
        }
        else
        {
          *v79 = v67;
        }
        v84 = *v69;
        v9 = v103;
        if (*v69)
          v85 = *(_DWORD *)(v84 - 12) + 1;
        else
          v85 = 1;
        *(_DWORD *)(v84 - 12) = v85;
        v81 = *v69;
        if (*v69)
          v96 = *(_DWORD *)(v81 - 12);
        else
          v96 = 0;
        v82 = (*(_DWORD *)(v81 - 16) + v96);
        v83 = *(unsigned int *)(v81 - 4);
        if (v83 <= 0x400)
        {
          if (3 * v83 > 4 * v82)
            goto LABEL_50;
          if ((_DWORD)v83)
LABEL_174:
            v86 = (_DWORD)v83 << (6 * *(_DWORD *)(v81 - 12) >= (2 * v83));
          else
            v86 = 8;
          WTF::HashTable<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>,WTF::HashTraits<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>,WTF::HashTraits<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>>::rehash(v69, v86);
          goto LABEL_50;
        }
        if (v83 <= 2 * v82)
          goto LABEL_174;
      }
LABEL_50:
      WebCore::Style::RuleSet::addRule(*(_QWORD *)v4, &v110, *((_DWORD *)v4 + 26), (WTF *)*((unsigned int *)v4 + 33), *((unsigned int *)v4 + 34));
      result = v110;
      v110 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          --*(_DWORD *)result;
      }
      v6 = v109 + 1;
      v53 = *(_QWORD *)a2 + 16 * v5;
      v54 = (int *)v53;
      do
      {
        v56 = *v54;
        v54 += 4;
        v55 = v56;
        v53 += 16;
      }
      while ((v56 & 0x80000) == 0);
      if ((v55 & 0x20000) != 0)
        v5 = -1;
      else
        v5 = (v53 - *(_QWORD *)a2) >> 4;
    }
    while (v5 != -1);
  }
  return result;
}

uint64_t WebCore::Style::computeContainsUncommonAttributeSelector(unsigned int *a1, int a2, BOOL a3)
{
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v10;
  BOOL v11;
  uint64_t result;
  WebCore::Style **v13;
  WebCore::Style *v14;
  int v15;
  int v16;

  while (1)
  {
    v5 = *a1;
    v6 = (*a1 >> 4) & 0x1F;
    v7 = v6 > 0xC;
    v8 = (1 << v6) & 0x1CF0;
    if (!v7 && v8 != 0)
    {
      v10 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 32);
      v11 = WebCore::HTMLNames::readonlyAttr == v10 || WebCore::HTMLNames::typeAttr == v10;
      result = 1;
      if (!v11 || ((a2 ^ 1) & 1) != 0)
        return result;
    }
    if ((v5 & 0x100000) != 0)
    {
      v13 = *(WebCore::Style ***)(*((_QWORD *)a1 + 1) + 56);
      if (v13)
      {
        v14 = *v13;
        if (*v13)
        {
          while ((WebCore::Style::computeContainsUncommonAttributeSelector(v14, (const WebCore::CSSSelector *)(a2 & 1), a3) & 1) == 0)
          {
            do
            {
              v16 = *(_DWORD *)v14;
              v14 = (WebCore::Style *)((char *)v14 + 16);
              v15 = v16;
            }
            while ((v16 & 0x80000) == 0);
            if ((v15 & 0x20000) != 0)
              goto LABEL_12;
          }
          return 1;
        }
      }
    }
LABEL_12:
    a2 = ((v5 & 0xF) == 0) & a2;
    a1 += 4;
    if ((v5 & 0x80000) != 0)
      return 0;
  }
}

uint64_t WebCore::Style::selectorCanMatchPseudoElement(int *a1, const WebCore::CSSSelector *a2)
{
  int v3;
  int v4;
  _BOOL8 v5;
  WebCore::Style **v6;
  int v7;
  WebCore::Style *v8;
  int v9;

  do
  {
    v3 = *a1;
    v4 = *a1 & 0x1F0;
    v5 = v4 == 144;
    if (v4 == 144)
      break;
    if ((v3 & 0x100000) != 0)
    {
      v6 = *(WebCore::Style ***)(*((_QWORD *)a1 + 1) + 56);
      if (v6)
      {
        v8 = *v6;
        if (*v6)
        {
          while ((WebCore::Style::selectorCanMatchPseudoElement(v8, a2) & 1) == 0)
          {
            do
            {
              v9 = *(_DWORD *)v8;
              v8 = (WebCore::Style *)((char *)v8 + 16);
              v7 = v9;
            }
            while ((v9 & 0x80000) == 0);
            if ((v7 & 0x20000) != 0)
              goto LABEL_3;
          }
          return 1;
        }
      }
    }
LABEL_3:
    a1 += 4;
  }
  while ((v3 & 0x80000) == 0);
  return v5;
}

uint64_t WebCore::SelectorFilter::collectHashes(WebCore::SelectorFilter *this, const WebCore::CSSSelector *a2)
{
  __int16 v2;
  WTF::StringImpl *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v13;
  int v14;
  uint64_t v15;
  int v16;
  WTF *v17;
  int v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  _BYTE v30[32];
  WTF *v31;
  uint64_t v32;
  _BYTE v33[32];
  WTF *v34;
  uint64_t v35;
  _BYTE v36[32];
  WTF *v37;
  uint64_t v38;
  _BYTE v39[32];
  uint64_t v40;
  void *v41;

  v28 = (WTF *)v30;
  v29 = 8;
  v31 = (WTF *)v33;
  v32 = 8;
  v34 = (WTF *)v36;
  v35 = 8;
  v37 = (WTF *)v39;
  v38 = 8;
  if ((*(_DWORD *)this & 0x80000) == 0)
  {
    v2 = *(_DWORD *)this & 0xF | 0x100;
    v3 = (WebCore::SelectorFilter *)((char *)this + 16);
    do
    {
      if ((_BYTE)v2)
      {
        if (v2 - 1 >= 2)
        {
          if (v2 - 3 < 5)
            v2 = 256;
        }
        else
        {
          this = (WebCore::SelectorFilter *)WebCore::SelectorFilter::collectSimpleSelectorHash((uint64_t)&v28, v3);
          v2 = 0;
        }
      }
      else if ((v2 & 0xFF00) == 0)
      {
        this = (WebCore::SelectorFilter *)WebCore::SelectorFilter::collectSimpleSelectorHash((uint64_t)&v28, v3);
      }
      v4 = *(_DWORD *)v3;
      v3 = (WTF::StringImpl *)((char *)v3 + 16);
      v2 = v2 & 0xFF00 | v4 & 0xF;
    }
    while ((v4 & 0x80000) == 0);
    if (HIDWORD(v29))
    {
      v5 = 0;
      v13 = v28;
      v6 = 4 * HIDWORD(v29);
      while (1)
      {
        v14 = *(_DWORD *)v13;
        if (!v5)
          break;
        if ((_DWORD)v40 != v14)
        {
          if (v5 == 1)
            break;
          if (HIDWORD(v40) == v14)
            goto LABEL_28;
          if (v5 == 2)
            break;
          if ((_DWORD)v41 != v14)
          {
            if (v5 == 3)
            {
              HIDWORD(v41) = *(_DWORD *)v13;
              this = v37;
              goto LABEL_18;
            }
            if (HIDWORD(v41) != v14)
              goto LABEL_35;
          }
        }
LABEL_28:
        v13 = (WTF *)((char *)v13 + 4);
        v6 -= 4;
        if (!v6)
          goto LABEL_13;
      }
      *((_DWORD *)&v40 + v5++) = v14;
      goto LABEL_28;
    }
  }
  v5 = 0;
LABEL_13:
  this = v37;
  v6 = HIDWORD(v38);
  if (HIDWORD(v38))
    goto LABEL_36;
LABEL_14:
  if (HIDWORD(v32))
  {
    v17 = v31;
    v6 = 4 * HIDWORD(v32);
    while (1)
    {
      v18 = *(_DWORD *)v17;
      if (!v5)
        goto LABEL_54;
      if ((_DWORD)v40 != v18)
        break;
LABEL_55:
      if (v5 == 4)
        goto LABEL_18;
      v17 = (WTF *)((char *)v17 + 4);
      v6 -= 4;
      if (!v6)
        goto LABEL_15;
    }
    if (v5 != 1)
    {
      if (HIDWORD(v40) == v18)
        goto LABEL_55;
      if (v5 != 2)
      {
        if ((_DWORD)v41 == v18)
          goto LABEL_55;
        if (v5 != 3)
        {
          if (HIDWORD(v41) != v18)
            goto LABEL_35;
          goto LABEL_55;
        }
      }
    }
LABEL_54:
    *((_DWORD *)&v40 + v5++) = v18;
    goto LABEL_55;
  }
LABEL_15:
  v6 = HIDWORD(v35);
  if (HIDWORD(v35))
  {
    v19 = v34;
    v6 = 4 * HIDWORD(v35);
    while (1)
    {
      v20 = *(_DWORD *)v19;
      if (!v5)
        goto LABEL_68;
      if ((_DWORD)v40 != v20)
        break;
LABEL_69:
      if (v5 == 4)
        goto LABEL_18;
      v19 = (WTF *)((char *)v19 + 4);
      v6 -= 4;
      if (!v6)
        goto LABEL_16;
    }
    if (v5 != 1)
    {
      if (HIDWORD(v40) == v20)
        goto LABEL_69;
      if (v5 != 2)
      {
        if ((_DWORD)v41 == v20)
          goto LABEL_69;
        if (v5 != 3)
        {
          if (HIDWORD(v41) != v20)
            goto LABEL_35;
          goto LABEL_69;
        }
      }
    }
LABEL_68:
    *((_DWORD *)&v40 + v5++) = v20;
    goto LABEL_69;
  }
LABEL_16:
  if (v5 >= 4)
  {
LABEL_35:
    while (2)
    {
      __break(1u);
LABEL_36:
      v15 = 0;
      v6 *= 4;
      while (1)
      {
        v16 = *(_DWORD *)((char *)this + v15);
        if (!v5)
          goto LABEL_40;
        if ((_DWORD)v40 != v16)
          break;
LABEL_41:
        if (v5 == 4)
          goto LABEL_18;
        v15 += 4;
        if (v6 == v15)
          goto LABEL_14;
      }
      if (v5 != 1)
      {
        if (HIDWORD(v40) == v16)
          goto LABEL_41;
        if (v5 != 2)
        {
          if ((_DWORD)v41 == v16)
            goto LABEL_41;
          if (v5 != 3)
          {
            if (HIDWORD(v41) != v16)
              continue;
            goto LABEL_41;
          }
        }
      }
      break;
    }
LABEL_40:
    *((_DWORD *)&v40 + v5++) = v16;
    goto LABEL_41;
  }
  *((_DWORD *)&v40 + v5) = 0;
LABEL_18:
  v8 = v40;
  v7 = v41;
  if (v39 != (_BYTE *)this && this)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    v21 = v40;
    v22 = v41;
    WTF::fastFree(this, v41);
    v7 = v22;
    v8 = v21;
  }
  v9 = v34;
  if (v36 != (_BYTE *)v34 && v34)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    v23 = v8;
    v24 = v7;
    WTF::fastFree(v9, v7);
    v7 = v24;
    v8 = v23;
  }
  v10 = v31;
  if (v33 != (_BYTE *)v31 && v31)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    v25 = v8;
    v26 = v7;
    WTF::fastFree(v10, v7);
    v7 = v26;
    v8 = v25;
  }
  v11 = v28;
  if (v30 != (_BYTE *)v28 && v28)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    v27 = v8;
    WTF::fastFree(v11, v7);
    return v27;
  }
  return v8;
}

uint64_t WebCore::Style::determinePropertyAllowlist(uint64_t this, const WebCore::CSSSelector *a2)
{
  _BYTE *v2;
  _QWORD *v3;
  _DWORD *i;
  int v5;
  WebCore::Style **v6;
  _QWORD *v7;
  WebCore::Style *v8;
  int v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Style *v15;
  _QWORD *v16;
  _QWORD v17[2];

  if (this)
  {
    v2 = &unk_1EE2F9000;
    v3 = &unk_1EE2F9000;
    for (i = (_DWORD *)this; ; i += 4)
    {
      v5 = *i;
      if ((*i & 0x1F0) == 0x90)
      {
        if ((v5 & 0x1FE00) == 0x1600)
          return 2;
        v7 = i + 2;
        if ((v5 & 0x100000) != 0)
          v7 = (_QWORD *)(*v7 + 8);
        if ((v2[2912] & 1) == 0)
        {
          v17[0] = "cue";
          v17[1] = 4;
          v12 = i;
          v14 = this;
          v16 = v7;
          WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::cue(void)::cue, (uint64_t)v17);
          this = v14;
          v7 = v16;
          i = v12;
          v3 = (_QWORD *)&unk_1EE2F9000;
          v2 = &unk_1EE2F9000;
        }
        if (*v7 == v3[363])
          return 2;
        v5 = *i;
      }
      if ((v5 & 0x1FFF0) == 0x2090)
        return WebCore::Style::propertyAllowlistForPseudoId(5);
      if ((*(_BYTE *)(this + 2) & 0x10) != 0)
      {
        v6 = *(WebCore::Style ***)(*(_QWORD *)(this + 8) + 56);
        if (v6)
        {
          if (*v6)
            break;
        }
      }
LABEL_6:
      if ((v5 & 0x80000) != 0)
        return 0;
    }
    v11 = i;
    v13 = this;
    v8 = *v6;
    while (1)
    {
      v15 = v8;
      this = WebCore::Style::determinePropertyAllowlist(v8, a2);
      if ((_DWORD)this)
        break;
      v8 = v15;
      do
      {
        v10 = *(_DWORD *)v8;
        v8 = (WebCore::Style *)((char *)v8 + 16);
        v9 = v10;
      }
      while ((v10 & 0x80000) == 0);
      if ((v9 & 0x20000) != 0)
      {
        i = v11;
        this = v13;
        v5 = *v11;
        v2 = (_BYTE *)&unk_1EE2F9000;
        v3 = (_QWORD *)&unk_1EE2F9000;
        goto LABEL_6;
      }
    }
  }
  return this;
}

WTF *WebCore::Style::RuleSet::addRule(uint64_t a1, _QWORD *a2, int a3, WTF *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  WTF *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  int j;
  unsigned int v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  __int16 v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  unsigned __int16 *v60;
  _DWORD *v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  int v85;
  uint64_t v86;
  WTF::StringImpl **v87;
  WTF *v88;
  uint64_t v89;
  WTF *v90;
  uint64_t k;
  _DWORD *v92;
  WTF *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  uint64_t m;
  WTF::StringImpl *v101;
  WTF *v102;
  WTF::StringImpl *v103;
  WTF *v104;
  uint64_t v105;
  uint64_t n;
  WTF::StringImpl *v107;
  WTF *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  _QWORD *v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  _QWORD *v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int i;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  WTF *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  WTF::StringImpl **v140;
  WTF::StringImpl *v141;
  unsigned int v142;
  int ii;
  unsigned int v144;
  WTF::StringImpl **v145;
  WTF::StringImpl *v146;
  __int16 v147;
  _DWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _WORD *v152;
  unsigned __int16 *v153;
  _DWORD *v154;
  uint64_t v155;
  int v156;
  WTF *v157;
  WTF::StringImpl *v158;
  int v159;
  unsigned int v160;
  WTF::StringImpl *v161;
  int v162;
  unsigned int v163;
  WTF::StringImpl *v164;
  WTF *v165;
  uint64_t v166;
  WTF *v167;
  uint64_t v168;
  _DWORD *v169;
  WTF *v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  WTF::StringImpl **v182;
  WTF::StringImpl **v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  unsigned int v186;
  int v187;
  int v188;
  uint64_t v189;
  WTF::StringImpl **v190;
  WTF *v191;
  uint64_t v192;
  WTF *v193;
  uint64_t jj;
  _DWORD *v195;
  WTF *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WTF *v201;
  uint64_t v202;
  WTF *v203;
  uint64_t kk;
  _DWORD *v205;
  WTF *v206;
  WTF::StringImpl *v207;
  WTF *v208;
  uint64_t v209;
  WTF *v210;
  uint64_t mm;
  _DWORD *v212;
  WTF *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  WTF *v218;
  WTF *v219;
  WTF *v220;
  WTF *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _DWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  WTF *v231;
  int *v232;
  WTF::StringImpl *v233;
  int *v234;
  unsigned int v235;
  _QWORD *v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  unsigned int i1;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  unsigned int v244;
  uint64_t *v245;
  WTF::StringImpl **v246;
  uint64_t *v247;
  unint64_t v248;
  WTF *result;
  WTF *v250;
  WTF *v251;
  uint64_t v252;
  int v253;
  WTF::StringImpl **v254;
  WTF::StringImpl *v255;
  unsigned int v256;
  int v257;
  unsigned int v258;
  WTF::StringImpl **v259;
  WTF::StringImpl *v260;
  __int16 v261;
  uint64_t v262;
  _DWORD *v263;
  uint64_t v264;
  uint64_t v265;
  _DWORD *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  uint64_t v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  WTF *v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  unint64_t v278;
  unsigned int v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  WTF::StringImpl *v285;
  uint64_t v286;
  int v287;
  _QWORD *v288;
  int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unint64_t v294;
  int v295;
  unsigned int v296;
  uint64_t v297;
  int v298;
  int v299;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  _QWORD *v303;
  WTF *v304;
  uint64_t v305;
  uint64_t v306;
  WTF *v307;
  uint64_t v308;
  _DWORD *v309;
  WTF *v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  unint64_t v316;
  unsigned int v317;
  uint64_t v318;
  __int16 v319;
  _DWORD *v320;
  uint64_t v321;
  uint64_t v322;
  __int16 *v323;
  __int16 *v324;
  _DWORD *v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  WebCore::QualifiedName::QualifiedNameImpl *v334;
  int *v335;
  WebCore::QualifiedName::QualifiedNameImpl *v336;
  BOOL v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  _DWORD *v341;
  __int128 v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  unsigned int nn;
  uint64_t v348;
  uint64_t v349;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _DWORD *v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t v357;
  _DWORD *v358;
  __int128 v359;
  uint64_t v360;
  WTF *v361;
  void *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _DWORD *v366;
  _QWORD *v367;
  uint64_t v368;
  uint64_t v369;
  _DWORD *v370;
  __int128 v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  uint64_t v375;
  _DWORD *v376;
  __int128 v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _DWORD *v382;
  _QWORD *v383;
  uint64_t v384;
  uint64_t v385;
  _DWORD *v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _DWORD *v391;
  uint64_t v392;
  uint64_t v393;
  __int16 v394;
  uint64_t v395;
  _DWORD *v396;
  unsigned int v397;
  _DWORD *v398;
  _DWORD *v399;
  unsigned int v400;
  _DWORD *v401;
  uint64_t v402;
  uint64_t v403;
  _DWORD *v404;
  __int128 v405;
  WTF *v406;
  uint64_t v407;
  _DWORD *v408;
  uint64_t v409;
  uint64_t v410;
  _DWORD *v411;
  __int128 v412;
  uint64_t v413;
  uint64_t v414;
  _DWORD *v415;
  __int128 v416;
  _DWORD *v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  WTF *v422;
  WTF *v423;
  char *v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  WTF *v428;
  uint64_t v429;
  unint64_t v430;
  WTF *v431;
  WTF *v432;
  WTF *v433;
  WTF *v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  WTF *v441;
  uint64_t v442;
  _DWORD *v443;
  int v444;
  __int16 v445;
  uint64_t v446;
  unsigned int v447;
  WTF::StringImpl *v448;
  _DWORD *v449;
  WTF::StringImpl *v450;
  uint64_t v451;
  WebCore::QualifiedName::QualifiedNameImpl *v452;
  WTF *v453[2];
  WTF *v454[2];
  WTF *v455[2];
  __int128 v456;
  __int128 v457;

  v7 = (uint64_t)a2;
  v8 = a1;
  v9 = (*(_DWORD *)(a1 + 680) + 1);
  *(_DWORD *)(a1 + 680) = v9;
  if (a3)
  {
    v11 = *(unsigned int *)(a1 + 716);
    v12 = *(unsigned int *)(a1 + 712);
    if (v12 < v9)
    {
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= v9)
        v15 = v9;
      else
        v15 = v14;
      if (v15 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1940C1C48);
      }
      v16 = *(void **)(a1 + 704);
      v17 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(v8 + 712) = v15;
      *(_QWORD *)(v8 + 704) = v17;
      memcpy(v17, v16, 4 * v11);
      if (v16)
      {
        if (*(void **)(v8 + 704) == v16)
        {
          *(_QWORD *)(v8 + 704) = 0;
          *(_DWORD *)(v8 + 712) = 0;
        }
        WTF::fastFree((WTF *)v16, a2);
      }
    }
    *(_DWORD *)(v8 + 716) = v9;
    v18 = *(_QWORD *)(v8 + 704);
    v19 = 4 * v9 - 4 * v11;
    if (v19 >= 1)
    {
      bzero((void *)(v18 + 4 * v11), 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
      LODWORD(v9) = *(_DWORD *)(v8 + 716);
    }
    if (!(_DWORD)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1940C1C30);
    }
    *(_DWORD *)(v18 + 4 * v9 - 4) = a3;
  }
  if ((_DWORD)a4)
  {
    v20 = *(unsigned int *)(v8 + 764);
    v21 = *(unsigned int *)(v8 + 680);
    v22 = *(unsigned int *)(v8 + 760);
    if (v22 < v21)
    {
      v23 = v22 + (v22 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v21)
        v25 = *(unsigned int *)(v8 + 680);
      else
        v25 = v24;
      if (v25 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1940C1C50);
      }
      v26 = *(void **)(v8 + 752);
      v27 = (void *)WTF::fastMalloc((WTF *)(4 * v25));
      *(_DWORD *)(v8 + 760) = v25;
      *(_QWORD *)(v8 + 752) = v27;
      memcpy(v27, v26, 4 * v20);
      if (v26)
      {
        if (*(void **)(v8 + 752) == v26)
        {
          *(_QWORD *)(v8 + 752) = 0;
          *(_DWORD *)(v8 + 760) = 0;
        }
        WTF::fastFree((WTF *)v26, a2);
      }
    }
    *(_DWORD *)(v8 + 764) = v21;
    v28 = *(_QWORD *)(v8 + 752);
    v29 = 4 * v21 - 4 * v20;
    if (v29 >= 1)
    {
      bzero((void *)(v28 + 4 * v20), 4 * (((unint64_t)v29 >> 2) - ((unint64_t)v29 > 3)) + 4);
      LODWORD(v21) = *(_DWORD *)(v8 + 764);
    }
    if (!(_DWORD)v21)
    {
      __break(0xC471u);
      JUMPOUT(0x1940C1C38);
    }
    *(_DWORD *)(v28 + 4 * v21 - 4) = (_DWORD)a4;
  }
  if ((_DWORD)a5)
  {
    v30 = *(unsigned int *)(v8 + 796);
    v31 = *(unsigned int *)(v8 + 680);
    v32 = *(unsigned int *)(v8 + 792);
    if (v32 < v31)
    {
      v33 = v32 + (v32 >> 2);
      if (v33 >= 0x10)
        v34 = v33 + 1;
      else
        v34 = 16;
      if (v34 <= v31)
        v35 = *(unsigned int *)(v8 + 680);
      else
        v35 = v34;
      if (v35 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1940C1C58);
      }
      v36 = *(void **)(v8 + 784);
      v37 = (void *)WTF::fastMalloc((WTF *)(4 * v35));
      *(_DWORD *)(v8 + 792) = v35;
      *(_QWORD *)(v8 + 784) = v37;
      memcpy(v37, v36, 4 * v30);
      if (v36)
      {
        if (*(void **)(v8 + 784) == v36)
        {
          *(_QWORD *)(v8 + 784) = 0;
          *(_DWORD *)(v8 + 792) = 0;
        }
        WTF::fastFree((WTF *)v36, a2);
      }
    }
    *(_DWORD *)(v8 + 796) = v31;
    a4 = *(WTF **)(v8 + 784);
    v38 = 4 * v31 - 4 * v30;
    if (v38 >= 1)
    {
      bzero((char *)a4 + 4 * v30, 4 * (((unint64_t)v38 >> 2) - ((unint64_t)v38 > 3)) + 4);
      LODWORD(v31) = *(_DWORD *)(v8 + 796);
    }
    if (!(_DWORD)v31)
    {
      __break(0xC471u);
      JUMPOUT(0x1940C1C40);
    }
    *((_DWORD *)a4 + v31 - 1) = a5;
  }
  v39 = *(unsigned int *)(v8 + 796);
  v40 = *(_QWORD *)(v7 + 8);
  v419 = v7 + 8;
  v41 = HIDWORD(v40) & 0x1FFFFF;
  v441 = 0;
  v442 = 0;
  v440 = v8;
  v430 = v7;
  if (v41 < v39)
  {
    for (i = *(_DWORD *)(*(_QWORD *)(v8 + 784) + 4 * v41); i; i = *(_DWORD *)(v130 + 16 * v44 + 8))
    {
      v44 = (i - 1);
      v62 = *(unsigned int *)(v8 + 780);
      if (v62 <= v44)
      {
        __break(0xC471u);
        goto LABEL_205;
      }
      v130 = *(_QWORD *)(v8 + 768);
      a2 = (_QWORD *)(v130 + 16 * v44);
      v131 = HIDWORD(v442);
      if (HIDWORD(v442) == (_DWORD)v442)
      {
        WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>> const&>((uint64_t)&v441, (unint64_t)a2);
      }
      else
      {
        v41 = (HIDWORD(v442) + 1);
        v39 = (int64_t)v441;
        v132 = (_DWORD *)*a2;
        *v132 = *(_DWORD *)*a2 + 1;
        *(_QWORD *)(v39 + 8 * v131) = v132;
        HIDWORD(v442) = v131 + 1;
      }
    }
    WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverse(&v441, (WTF::StringImpl *)a2);
    LOWORD(v40) = *(_WORD *)v419;
  }
  LOBYTE(v452) = 0;
  *(_OWORD *)v453 = 0u;
  *(_OWORD *)v454 = 0u;
  *(_OWORD *)v455 = 0u;
  v456 = 0u;
  v457 = 0u;
  WebCore::Style::RuleFeatureSet::recursivelyCollectFeaturesFromSelector(v8 + 472, (uint64_t)&v452, (unsigned int *)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 16 * (unsigned __int16)v40), 0, 0, 0);
  if (HIDWORD(v442))
  {
    v133 = v441;
    v134 = 8 * HIDWORD(v442);
    do
    {
      v449 = (_DWORD *)(v8 + 472);
      v450 = (WTF::StringImpl *)&v452;
      WebCore::Style::RuleFeatureSet::collectFeatures(WebCore::Style::RuleData const&,WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebCore::CSSSelectorList>((uint64_t *)&v449, *(unsigned int **)(*(_QWORD *)v133 + 24));
      v135 = *(_QWORD *)v133;
      v133 = (WTF *)((char *)v133 + 8);
      WebCore::Style::RuleFeatureSet::collectFeatures(WebCore::Style::RuleData const&,WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebCore::CSSSelectorList>((uint64_t *)&v449, *(unsigned int **)(v135 + 32));
      v134 -= 8;
    }
    while (v134);
  }
  if ((_BYTE)v452)
  {
    v118 = (_QWORD *)(v8 + 512);
    v119 = *(_DWORD **)v7;
    *v119 = **(_DWORD **)v7 + 1;
    v449 = v119;
    LODWORD(v450) = *(_QWORD *)(v7 + 8);
    v120 = *(unsigned int *)(v8 + 524);
    if ((_DWORD)v120 == *(_DWORD *)(v8 + 520))
    {
      v126 = WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v118, v120 + 1, (unint64_t)&v449);
      v127 = *(_QWORD *)(v8 + 512) + 12 * *(unsigned int *)(v8 + 524);
      v128 = *(_QWORD *)v126;
      *(_QWORD *)v126 = 0;
      *(_QWORD *)v127 = v128;
      *(_DWORD *)(v127 + 8) = *(_DWORD *)(v126 + 8);
    }
    else
    {
      v121 = *v118 + 12 * v120;
      v449 = 0;
      *(_QWORD *)v121 = v119;
      *(_DWORD *)(v121 + 8) = (_DWORD)v450;
    }
    ++*(_DWORD *)(v8 + 524);
    v122 = v449;
    v449 = 0;
    if (v122)
    {
      if (*v122 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v122, (WTF::StringImpl *)a2);
      else
        --*v122;
    }
  }
  if ((*(_BYTE *)(v7 + 15) & 2) != 0)
  {
    v113 = (_QWORD *)(v8 + 528);
    v114 = *(_DWORD **)v7;
    *v114 = **(_DWORD **)v7 + 1;
    v449 = v114;
    LODWORD(v450) = *(_QWORD *)(v7 + 8);
    v115 = *(unsigned int *)(v8 + 540);
    if ((_DWORD)v115 == *(_DWORD *)(v8 + 536))
    {
      v123 = WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v113, v115 + 1, (unint64_t)&v449);
      v124 = *(_QWORD *)(v8 + 528) + 12 * *(unsigned int *)(v8 + 540);
      v125 = *(_QWORD *)v123;
      *(_QWORD *)v123 = 0;
      *(_QWORD *)v124 = v125;
      *(_DWORD *)(v124 + 8) = *(_DWORD *)(v123 + 8);
    }
    else
    {
      v116 = *v113 + 12 * v115;
      v449 = 0;
      *(_QWORD *)v116 = v114;
      *(_DWORD *)(v116 + 8) = (_DWORD)v450;
    }
    ++*(_DWORD *)(v8 + 540);
    v117 = v449;
    v449 = 0;
    if (v117)
    {
      if (*v117 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v117, (WTF::StringImpl *)a2);
      else
        --*v117;
    }
  }
  if (!HIDWORD(v453[1]))
  {
LABEL_170:
    if (!HIDWORD(v454[1]))
      goto LABEL_346;
    a5 = v8 + 600;
    v112 = v454[0];
    v424 = (char *)&v450 + 4;
    v426 = (char *)(v8 + 632);
    v428 = (WTF *)((char *)v454[0] + 16 * HIDWORD(v454[1]));
    v420 = v8 + 600;
    goto LABEL_208;
  }
  a4 = v453[0];
  v42 = (WTF *)((char *)v453[0] + 16 * HIDWORD(v453[1]));
  v43 = (char *)(v8 + 632);
  v426 = (char *)&v450 + 4;
  v428 = v42;
  v424 = (char *)(v8 + 632);
  while (2)
  {
    v44 = *(_QWORD *)a4 + 8;
    if ((*(_BYTE *)(*(_QWORD *)a4 + 2) & 0x10) != 0)
      v44 = *(_QWORD *)v44 + 8;
    v45 = *(_QWORD *)(v8 + 544);
    if (v45
      || (v46 = WTF::fastZeroedMalloc((WTF *)0x90),
          *(_QWORD *)(v8 + 544) = v46 + 16,
          *(_DWORD *)(v46 + 12) = 8,
          *(_DWORD *)(*(_QWORD *)(v8 + 544) - 8) = 7,
          *(_DWORD *)(*(_QWORD *)(v8 + 544) - 16) = 0,
          *(_DWORD *)(*(_QWORD *)(v8 + 544) - 12) = 0,
          (v45 = *(_QWORD *)(v8 + 544)) != 0))
    {
      v47 = *(_DWORD *)(v45 - 8);
    }
    else
    {
      v47 = 0;
    }
    v48 = 0;
    v49 = *(WTF::StringImpl **)v44;
    v50 = *(_DWORD *)(*(_QWORD *)v44 + 16) >> 8;
    for (j = 1; ; ++j)
    {
      v52 = v50 & v47;
      v53 = (WTF::StringImpl **)(v45 + 16 * v52);
      v54 = *v53;
      if (*v53 == (WTF::StringImpl *)-1)
      {
        v48 = (WTF::StringImpl **)(v45 + 16 * v52);
        goto LABEL_65;
      }
      if (!v54)
        break;
      if (v54 == v49)
        goto LABEL_69;
LABEL_65:
      v50 = j + v52;
    }
    if (v48)
    {
      *v48 = 0;
      v48[1] = 0;
      --*(_DWORD *)(*(_QWORD *)(v8 + 544) - 16);
      v49 = *(WTF::StringImpl **)v44;
      v53 = v48;
    }
    if (v49)
      *(_DWORD *)v49 += 2;
    *v53 = v49;
    v63 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v63 = 0;
    *((_QWORD *)v63 + 1) = 0;
    v64 = v53[1];
    v53[1] = v63;
    if (v64)
    {
      v65 = *((unsigned int *)v64 + 3);
      if ((_DWORD)v65)
      {
        v44 = *(_QWORD *)v64;
        v66 = 16 * v65;
        do
        {
          v67 = *(WTF::StringImpl **)v44;
          *(_QWORD *)v44 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v67, (WTF::StringImpl *)a2);
            else
              --*(_DWORD *)v67;
          }
          v44 += 16;
          v66 -= 16;
        }
        while (v66);
      }
      v68 = *(WTF **)v64;
      if (*(_QWORD *)v64)
      {
        *(_QWORD *)v64 = 0;
        *((_DWORD *)v64 + 2) = 0;
        WTF::fastFree(v68, a2);
      }
      WTF::fastFree(v64, a2);
    }
    v69 = *(_QWORD *)(v8 + 544);
    if (v69)
      v70 = *(_DWORD *)(v69 - 12) + 1;
    else
      v70 = 1;
    *(_DWORD *)(v69 - 12) = v70;
    v71 = *(_QWORD *)(v8 + 544);
    if (v71)
      v72 = *(_DWORD *)(v71 - 12);
    else
      v72 = 0;
    v73 = (*(_DWORD *)(v71 - 16) + v72);
    v74 = *(unsigned int *)(v71 - 4);
    if (v74 > 0x400)
    {
      if (v74 <= 2 * v73)
        goto LABEL_167;
    }
    else if (3 * v74 <= 4 * v73)
    {
      if (!(_DWORD)v74)
      {
        v431 = (WTF *)(v71 - 16);
        v44 = *(unsigned int *)(v71 - 12);
        v75 = 8;
        goto LABEL_101;
      }
LABEL_167:
      v431 = (WTF *)(v71 - 16);
      v44 = *(unsigned int *)(v71 - 12);
      v75 = (_DWORD)v74 << (6 * (int)v44 >= (2 * v74));
LABEL_101:
      v434 = a4;
      v76 = WTF::fastZeroedMalloc((WTF *)(16 * v75 + 16));
      *(_QWORD *)(v8 + 544) = v76 + 16;
      *(_DWORD *)(v76 + 12) = v75;
      *(_DWORD *)(*(_QWORD *)(v8 + 544) - 8) = v75 - 1;
      *(_DWORD *)(*(_QWORD *)(v8 + 544) - 16) = 0;
      *(_DWORD *)(*(_QWORD *)(v8 + 544) - 12) = v44;
      if ((_DWORD)v74)
      {
        v78 = 0;
        v79 = 0;
        v437 = v74;
        while (1)
        {
          while (1)
          {
            v80 = (WTF::StringImpl **)(v71 + 16 * v78);
            v81 = *v80;
            if (!*v80)
              break;
            if (v81 != (WTF::StringImpl *)-1)
            {
              v82 = *(_QWORD *)(v440 + 544);
              if (v82)
                v83 = *(_DWORD *)(v82 - 8);
              else
                v83 = 0;
              v84 = 0;
              v85 = *((_DWORD *)v81 + 4) >> 8;
              do
              {
                v86 = v85 & v83;
                v85 = ++v84 + v86;
              }
              while (*(_QWORD *)(v82 + 16 * v86));
              v87 = (WTF::StringImpl **)(v82 + 16 * v86);
              v44 = (uint64_t)(v87 + 1);
              v88 = v87[1];
              v87[1] = 0;
              if (v88)
              {
                v89 = *((unsigned int *)v88 + 3);
                if ((_DWORD)v89)
                {
                  v90 = *(WTF **)v88;
                  for (k = 16 * v89; k; k -= 16)
                  {
                    while (1)
                    {
                      v92 = *(_DWORD **)v90;
                      *(_QWORD *)v90 = 0;
                      if (v92)
                        break;
LABEL_120:
                      v90 = (WTF *)((char *)v90 + 16);
                      k -= 16;
                      if (!k)
                        goto LABEL_123;
                    }
                    if (*v92 != 1)
                    {
                      --*v92;
                      goto LABEL_120;
                    }
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v92, v77);
                    v90 = (WTF *)((char *)v90 + 16);
                  }
                }
LABEL_123:
                v93 = *(WTF **)v88;
                if (*(_QWORD *)v88)
                {
                  *(_QWORD *)v88 = 0;
                  *((_DWORD *)v88 + 2) = 0;
                  WTF::fastFree(v93, v77);
                }
                WTF::fastFree(v88, v77);
                v94 = *v87;
                *v87 = 0;
                if (v94)
                {
                  if (*(_DWORD *)v94 == 2)
                    WTF::StringImpl::destroy(v94, v77);
                  else
                    *(_DWORD *)v94 -= 2;
                }
              }
              else
              {
                *v87 = 0;
              }
              v95 = *v80;
              *v80 = 0;
              *v87 = v95;
              v96 = v71 + 16 * v78;
              v97 = *(_QWORD *)(v96 + 8);
              *(_QWORD *)(v96 + 8) = 0;
              *(_QWORD *)v44 = v97;
              v98 = *(WTF **)(v96 + 8);
              *(_QWORD *)(v96 + 8) = 0;
              if (v98)
              {
                v99 = *((unsigned int *)v98 + 3);
                if ((_DWORD)v99)
                {
                  v44 = *(_QWORD *)v98;
                  for (m = 16 * v99; m; m -= 16)
                  {
                    while (1)
                    {
                      v101 = *(WTF::StringImpl **)v44;
                      *(_QWORD *)v44 = 0;
                      if (v101)
                        break;
LABEL_134:
                      v44 += 16;
                      m -= 16;
                      if (!m)
                        goto LABEL_137;
                    }
                    if (*(_DWORD *)v101 != 1)
                    {
                      --*(_DWORD *)v101;
                      goto LABEL_134;
                    }
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v101, v77);
                    v44 += 16;
                  }
                }
LABEL_137:
                v102 = *(WTF **)v98;
                if (*(_QWORD *)v98)
                {
                  *(_QWORD *)v98 = 0;
                  *((_DWORD *)v98 + 2) = 0;
                  WTF::fastFree(v102, v77);
                }
                WTF::fastFree(v98, v77);
              }
              v103 = *v80;
              *v80 = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 2)
                  WTF::StringImpl::destroy(v103, v77);
                else
                  *(_DWORD *)v103 -= 2;
              }
              if (v80 == v53)
                v79 = v87;
              v74 = v437;
            }
LABEL_107:
            if (++v78 == v74)
              goto LABEL_169;
          }
          v104 = v80[1];
          v80[1] = 0;
          if (v104)
          {
            v105 = *((unsigned int *)v104 + 3);
            if ((_DWORD)v105)
            {
              v44 = *(_QWORD *)v104;
              for (n = 16 * v105; n; n -= 16)
              {
                while (1)
                {
                  v107 = *(WTF::StringImpl **)v44;
                  *(_QWORD *)v44 = 0;
                  if (v107)
                    break;
LABEL_150:
                  v44 += 16;
                  n -= 16;
                  if (!n)
                    goto LABEL_153;
                }
                if (*(_DWORD *)v107 != 1)
                {
                  --*(_DWORD *)v107;
                  goto LABEL_150;
                }
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v107, v77);
                v44 += 16;
              }
            }
LABEL_153:
            v108 = *(WTF **)v104;
            if (*(_QWORD *)v104)
            {
              *(_QWORD *)v104 = 0;
              *((_DWORD *)v104 + 2) = 0;
              WTF::fastFree(v108, v77);
            }
            WTF::fastFree(v104, v77);
            v81 = *v80;
          }
          *v80 = 0;
          if (!v81)
            goto LABEL_107;
          if (*(_DWORD *)v81 == 2)
          {
            WTF::StringImpl::destroy(v81, v77);
            goto LABEL_107;
          }
          *(_DWORD *)v81 -= 2;
          if (++v78 == v74)
            goto LABEL_169;
        }
      }
      v79 = 0;
LABEL_169:
      WTF::fastFree(v431, v77);
      v53 = v79;
      v8 = v440;
      a4 = v434;
      v42 = v428;
      v43 = v424;
    }
LABEL_69:
    a5 = (uint64_t)v53[1];
    v55 = *((_WORD *)a4 + 4);
    v7 = v430;
    v56 = *(_DWORD **)v430;
    *v56 = **(_DWORD **)v430 + 1;
    v449 = v56;
    LODWORD(v450) = *(_QWORD *)(v430 + 8);
    WORD2(v450) = v55;
    v57 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v57 == *(_DWORD *)(a5 + 8))
    {
      v109 = WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v57 + 1, (unint64_t)&v449);
      v110 = *(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 12);
      v111 = *(_QWORD *)v109;
      *(_QWORD *)v109 = 0;
      *(_QWORD *)v110 = v111;
      *(_DWORD *)(v110 + 8) = *(_DWORD *)(v109 + 8);
      v59 = (_WORD *)(v110 + 12);
      v60 = (unsigned __int16 *)(v109 + 12);
    }
    else
    {
      v39 = *(_QWORD *)a5;
      v58 = *(_QWORD *)a5 + 16 * v57;
      v449 = 0;
      *(_QWORD *)v58 = v56;
      *(_DWORD *)(v58 + 8) = (_DWORD)v450;
      v59 = (_WORD *)(v58 + 12);
      v60 = (unsigned __int16 *)&v450 + 2;
    }
    v41 = *v60;
    *v59 = v41;
    ++*(_DWORD *)(a5 + 12);
    v61 = v449;
    v449 = 0;
    if (v61)
    {
      if (*v61 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v61, (WTF::StringImpl *)a2);
      else
        --*v61;
    }
    v62 = *((unsigned __int8 *)a4 + 8);
    if (v62 < 0x13)
    {
      v43[v62] = 1;
      a4 = (WTF *)((char *)a4 + 16);
      if (a4 == v42)
        goto LABEL_170;
      continue;
    }
    break;
  }
  while (1)
  {
LABEL_205:
    __break(1u);
LABEL_206:
    if (v41 <= 2 * v39)
      goto LABEL_344;
    while (1)
    {
      v112 = (WTF *)(v44 + 16);
      if (v112 == v428)
        break;
LABEL_208:
      v136 = *(_QWORD *)v112 + 8;
      if ((*(_BYTE *)(*(_QWORD *)v112 + 2) & 0x10) != 0)
        v136 = *(_QWORD *)v136 + 8;
      v137 = *(_QWORD *)(v8 + 552);
      v432 = v112;
      if (v137
        || (v138 = WTF::fastZeroedMalloc((WTF *)0x90),
            *(_QWORD *)(v8 + 552) = v138 + 16,
            *(_DWORD *)(v138 + 12) = 8,
            *(_DWORD *)(*(_QWORD *)(v8 + 552) - 8) = 7,
            *(_DWORD *)(*(_QWORD *)(v8 + 552) - 16) = 0,
            *(_DWORD *)(*(_QWORD *)(v8 + 552) - 12) = 0,
            (v137 = *(_QWORD *)(v8 + 552)) != 0))
      {
        v139 = *(_DWORD *)(v137 - 8);
      }
      else
      {
        v139 = 0;
      }
      v140 = 0;
      v435 = v136;
      v141 = *(WTF::StringImpl **)v136;
      v142 = *(_DWORD *)(*(_QWORD *)v136 + 16) >> 8;
      for (ii = 1; ; ++ii)
      {
        v144 = v142 & v139;
        v145 = (WTF::StringImpl **)(v137 + 16 * v144);
        v146 = *v145;
        if (*v145 == (WTF::StringImpl *)-1)
        {
          v140 = (WTF::StringImpl **)(v137 + 16 * v144);
          goto LABEL_215;
        }
        if (!v146)
          break;
        if (v146 == v141)
          goto LABEL_219;
LABEL_215:
        v142 = ii + v144;
      }
      if (v140)
      {
        *v140 = 0;
        v140[1] = 0;
        --*(_DWORD *)(*(_QWORD *)(v8 + 552) - 16);
        v141 = *(WTF::StringImpl **)v136;
        v145 = v140;
      }
      if (v141)
        *(_DWORD *)v141 += 2;
      *v145 = v141;
      v164 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v164 = 0;
      *((_QWORD *)v164 + 1) = 0;
      v165 = v145[1];
      v145[1] = v164;
      if (v165)
      {
        v166 = *((unsigned int *)v165 + 3);
        if ((_DWORD)v166)
        {
          v167 = *(WTF **)v165;
          v168 = 16 * v166;
          do
          {
            v169 = *(_DWORD **)v167;
            *(_QWORD *)v167 = 0;
            if (v169)
            {
              if (*v169 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v169, (WTF::StringImpl *)a2);
              else
                --*v169;
            }
            v167 = (WTF *)((char *)v167 + 16);
            v168 -= 16;
          }
          while (v168);
        }
        v170 = *(WTF **)v165;
        if (*(_QWORD *)v165)
        {
          *(_QWORD *)v165 = 0;
          *((_DWORD *)v165 + 2) = 0;
          WTF::fastFree(v170, a2);
        }
        WTF::fastFree(v165, a2);
      }
      v171 = *(_QWORD *)(v8 + 552);
      if (v171)
        v172 = *(_DWORD *)(v171 - 12) + 1;
      else
        v172 = 1;
      *(_DWORD *)(v171 - 12) = v172;
      v173 = *(_QWORD *)(v8 + 552);
      if (v173)
        v174 = *(_DWORD *)(v173 - 12);
      else
        v174 = 0;
      v175 = (*(_DWORD *)(v173 - 16) + v174);
      v176 = *(unsigned int *)(v173 - 4);
      if (v176 > 0x400)
      {
        if (v176 <= 2 * v175)
          goto LABEL_338;
      }
      else if (3 * v176 <= 4 * v175)
      {
        if (!(_DWORD)v176)
        {
          v422 = (WTF *)(v173 - 16);
          v177 = *(_DWORD *)(v173 - 12);
          v178 = 8;
          goto LABEL_267;
        }
LABEL_338:
        v422 = (WTF *)(v173 - 16);
        v177 = *(_DWORD *)(v173 - 12);
        v178 = (_DWORD)v176 << (6 * v177 >= (2 * v176));
LABEL_267:
        v179 = WTF::fastZeroedMalloc((WTF *)(16 * v178 + 16));
        *(_QWORD *)(v8 + 552) = v179 + 16;
        *(_DWORD *)(v179 + 12) = v178;
        *(_DWORD *)(*(_QWORD *)(v8 + 552) - 8) = v178 - 1;
        *(_DWORD *)(*(_QWORD *)(v8 + 552) - 16) = 0;
        *(_DWORD *)(*(_QWORD *)(v8 + 552) - 12) = v177;
        if ((_DWORD)v176)
        {
          v181 = 0;
          v182 = 0;
          v438 = v176;
          while (1)
          {
            while (1)
            {
              v183 = (WTF::StringImpl **)(v173 + 16 * v181);
              v184 = *v183;
              if (!*v183)
                break;
              if (v184 != (WTF::StringImpl *)-1)
              {
                v185 = *(_QWORD *)(v8 + 552);
                if (v185)
                  v186 = *(_DWORD *)(v185 - 8);
                else
                  v186 = 0;
                v187 = 0;
                v188 = *((_DWORD *)v184 + 4) >> 8;
                do
                {
                  v189 = v188 & v186;
                  v188 = ++v187 + v189;
                }
                while (*(_QWORD *)(v185 + 16 * v189));
                v190 = (WTF::StringImpl **)(v185 + 16 * v189);
                v191 = v190[1];
                v190[1] = 0;
                if (v191)
                {
                  v192 = *((unsigned int *)v191 + 3);
                  if ((_DWORD)v192)
                  {
                    v193 = *(WTF **)v191;
                    for (jj = 16 * v192; jj; jj -= 16)
                    {
                      while (1)
                      {
                        v195 = *(_DWORD **)v193;
                        *(_QWORD *)v193 = 0;
                        if (v195)
                          break;
LABEL_285:
                        v193 = (WTF *)((char *)v193 + 16);
                        jj -= 16;
                        if (!jj)
                          goto LABEL_288;
                      }
                      if (*v195 != 1)
                      {
                        --*v195;
                        goto LABEL_285;
                      }
                      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v195, v180);
                      v193 = (WTF *)((char *)v193 + 16);
                    }
                  }
LABEL_288:
                  v196 = *(WTF **)v191;
                  if (*(_QWORD *)v191)
                  {
                    *(_QWORD *)v191 = 0;
                    *((_DWORD *)v191 + 2) = 0;
                    WTF::fastFree(v196, v180);
                  }
                  WTF::fastFree(v191, v180);
                  v197 = *v190;
                  *v190 = 0;
                  v176 = v438;
                  v8 = v440;
                  if (v197)
                  {
                    if (*(_DWORD *)v197 == 2)
                      WTF::StringImpl::destroy(v197, v180);
                    else
                      *(_DWORD *)v197 -= 2;
                  }
                }
                else
                {
                  *v190 = 0;
                }
                v198 = *v183;
                *v183 = 0;
                *v190 = v198;
                v199 = v173 + 16 * v181;
                v200 = *(WTF::StringImpl **)(v199 + 8);
                *(_QWORD *)(v199 + 8) = 0;
                v190[1] = v200;
                v201 = *(WTF **)(v199 + 8);
                *(_QWORD *)(v199 + 8) = 0;
                if (v201)
                {
                  v202 = *((unsigned int *)v201 + 3);
                  if ((_DWORD)v202)
                  {
                    v203 = *(WTF **)v201;
                    for (kk = 16 * v202; kk; kk -= 16)
                    {
                      while (1)
                      {
                        v205 = *(_DWORD **)v203;
                        *(_QWORD *)v203 = 0;
                        if (v205)
                          break;
LABEL_299:
                        v203 = (WTF *)((char *)v203 + 16);
                        kk -= 16;
                        if (!kk)
                          goto LABEL_302;
                      }
                      if (*v205 != 1)
                      {
                        --*v205;
                        goto LABEL_299;
                      }
                      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v205, v180);
                      v203 = (WTF *)((char *)v203 + 16);
                    }
                  }
LABEL_302:
                  v206 = *(WTF **)v201;
                  if (*(_QWORD *)v201)
                  {
                    *(_QWORD *)v201 = 0;
                    *((_DWORD *)v201 + 2) = 0;
                    WTF::fastFree(v206, v180);
                  }
                  WTF::fastFree(v201, v180);
                  v176 = v438;
                }
                v207 = *v183;
                *v183 = 0;
                if (v207)
                {
                  if (*(_DWORD *)v207 == 2)
                    WTF::StringImpl::destroy(v207, v180);
                  else
                    *(_DWORD *)v207 -= 2;
                }
                if (v183 == v145)
                  v182 = v190;
              }
LABEL_272:
              if (++v181 == v176)
                goto LABEL_343;
            }
            v208 = v183[1];
            v183[1] = 0;
            if (v208)
            {
              v209 = *((unsigned int *)v208 + 3);
              if ((_DWORD)v209)
              {
                v210 = *(WTF **)v208;
                for (mm = 16 * v209; mm; mm -= 16)
                {
                  while (1)
                  {
                    v212 = *(_DWORD **)v210;
                    *(_QWORD *)v210 = 0;
                    if (v212)
                      break;
LABEL_315:
                    v210 = (WTF *)((char *)v210 + 16);
                    mm -= 16;
                    if (!mm)
                      goto LABEL_318;
                  }
                  if (*v212 != 1)
                  {
                    --*v212;
                    goto LABEL_315;
                  }
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v212, v180);
                  v210 = (WTF *)((char *)v210 + 16);
                }
              }
LABEL_318:
              v213 = *(WTF **)v208;
              if (*(_QWORD *)v208)
              {
                *(_QWORD *)v208 = 0;
                *((_DWORD *)v208 + 2) = 0;
                WTF::fastFree(v213, v180);
              }
              WTF::fastFree(v208, v180);
              v184 = *v183;
            }
            *v183 = 0;
            if (!v184)
              goto LABEL_272;
            if (*(_DWORD *)v184 == 2)
            {
              WTF::StringImpl::destroy(v184, v180);
              goto LABEL_272;
            }
            *(_DWORD *)v184 -= 2;
            if (++v181 == v176)
              goto LABEL_343;
          }
        }
        v182 = 0;
LABEL_343:
        WTF::fastFree(v422, v180);
        v145 = v182;
        v7 = v430;
        a5 = v420;
      }
LABEL_219:
      a4 = v145[1];
      v44 = (uint64_t)v432;
      v147 = *((_WORD *)v432 + 4);
      v148 = *(_DWORD **)v7;
      *v148 = **(_DWORD **)v7 + 1;
      v449 = v148;
      v149 = *(_QWORD *)(v7 + 8);
      LODWORD(v450) = v149;
      WORD2(v450) = v147;
      v150 = *((unsigned int *)a4 + 3);
      if ((_DWORD)v150 == *((_DWORD *)a4 + 2))
      {
        v214 = WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a4, v150 + 1, (unint64_t)&v449);
        v215 = *(_QWORD *)a4 + 16 * *((unsigned int *)a4 + 3);
        v216 = *(_QWORD *)v214;
        *(_QWORD *)v214 = 0;
        *(_QWORD *)v215 = v216;
        *(_DWORD *)(v215 + 8) = *(_DWORD *)(v214 + 8);
        v152 = (_WORD *)(v215 + 12);
        v153 = (unsigned __int16 *)(v214 + 12);
      }
      else
      {
        v39 = *(_QWORD *)a4;
        v151 = *(_QWORD *)a4 + 16 * v150;
        v449 = 0;
        *(_QWORD *)v151 = v148;
        *(_DWORD *)(v151 + 8) = (_DWORD)v450;
        v152 = (_WORD *)(v151 + 12);
        v153 = (unsigned __int16 *)v424;
      }
      v41 = *v153;
      *v152 = v41;
      ++*((_DWORD *)a4 + 3);
      v154 = v449;
      v449 = 0;
      if (v154)
      {
        if (*v154 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v154, (WTF::StringImpl *)a2);
        else
          --*v154;
      }
      v62 = *((unsigned __int8 *)v432 + 8);
      if (v62 >= 0x13)
        goto LABEL_205;
      v426[v62] = 1;
      if ((_DWORD)v62 == 17)
      {
        v155 = *(_QWORD *)a5;
        if (*(_QWORD *)a5
          || (WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)a5, 8u, 0), (v155 = *(_QWORD *)a5) != 0))
        {
          v156 = *(_DWORD *)(v155 - 8);
        }
        else
        {
          v156 = 0;
        }
        v157 = 0;
        v158 = *(WTF::StringImpl **)v435;
        v159 = 1;
        v160 = (*(_DWORD *)(*(_QWORD *)v435 + 16) >> 8) & v156;
        a4 = (WTF *)(v155 + 8 * v160);
        v161 = *(WTF::StringImpl **)a4;
        if (*(_QWORD *)a4)
        {
          while (1)
          {
            if (v161 != (WTF::StringImpl *)-1)
            {
              a4 = v157;
              if (v161 == v158)
                break;
            }
            v217 = v159 + v160;
            ++v159;
            v157 = a4;
            v160 = v217 & v156;
            a4 = (WTF *)(v155 + 8 * v160);
            v161 = *(WTF::StringImpl **)a4;
            if (!*(_QWORD *)a4)
              goto LABEL_229;
          }
        }
        else
        {
LABEL_229:
          if (v157)
          {
            v161 = 0;
            *(_QWORD *)v157 = 0;
            --*(_DWORD *)(*(_QWORD *)a5 - 16);
            v158 = *(WTF::StringImpl **)v435;
            a4 = v157;
          }
          if (v158)
            *(_DWORD *)v158 += 2;
          *(_QWORD *)a4 = v158;
          if (v161)
          {
            if (*(_DWORD *)v161 == 2)
              WTF::StringImpl::destroy(v161, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v161 -= 2;
          }
          if (*(_QWORD *)a5)
          {
            ++*(_DWORD *)(*(_QWORD *)a5 - 12);
            v62 = *(_QWORD *)a5;
            if (*(_QWORD *)a5)
              goto LABEL_238;
          }
          else
          {
            MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
            v62 = *(_QWORD *)a5;
            if (*(_QWORD *)a5)
            {
LABEL_238:
              v162 = *(_DWORD *)(v62 - 12);
              goto LABEL_239;
            }
          }
          v162 = 0;
LABEL_239:
          v39 = (*(_DWORD *)(v62 - 16) + v162);
          v41 = *(unsigned int *)(v62 - 4);
          if (v41 > 0x400)
            goto LABEL_206;
          if (3 * v41 <= 4 * v39)
          {
            if (!(_DWORD)v41)
            {
              v163 = 8;
              goto LABEL_345;
            }
LABEL_344:
            v163 = (_DWORD)v41 << (6 * *(_DWORD *)(v62 - 12) >= (2 * v41));
LABEL_345:
            WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)a5, v163, (WTF::StringImpl **)a4);
          }
        }
      }
    }
LABEL_346:
    if (!HIDWORD(v455[1]))
      goto LABEL_347;
    v250 = v455[0];
    v251 = (WTF *)((char *)v455[0] + 16 * HIDWORD(v455[1]));
    a5 = v440 + 560;
    v8 = 24;
LABEL_404:
    v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v250 + 8) + 32);
    v252 = *(_QWORD *)a5;
    if (*(_QWORD *)a5
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)a5, 8u, 0), (v252 = *(_QWORD *)a5) != 0))
    {
      v253 = *(_DWORD *)(v252 - 8);
    }
    else
    {
      v253 = 0;
    }
    v254 = 0;
    v255 = *(WTF::StringImpl **)(v44 + 40);
    v256 = *((_DWORD *)v255 + 4) >> 8;
    v257 = 1;
    while (2)
    {
      v258 = v256 & v253;
      v259 = (WTF::StringImpl **)(v252 + 16 * v258);
      v260 = *v259;
      if (*v259 == (WTF::StringImpl *)-1)
      {
        v254 = (WTF::StringImpl **)(v252 + 16 * v258);
LABEL_409:
        v256 = v257 + v258;
        ++v257;
        continue;
      }
      break;
    }
    if (v260)
    {
      if (v260 == v255)
        goto LABEL_413;
      goto LABEL_409;
    }
    if (v254)
    {
      *v254 = 0;
      v254[1] = 0;
      --*(_DWORD *)(*(_QWORD *)a5 - 16);
      v255 = *(WTF::StringImpl **)(v44 + 40);
      v259 = v254;
    }
    if (v255)
      *(_DWORD *)v255 += 2;
    *v259 = v255;
    v267 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v267 = 0;
    *((_QWORD *)v267 + 1) = 0;
    v268 = v259[1];
    v259[1] = v267;
    if (v268)
    {
      v269 = *((unsigned int *)v268 + 3);
      if ((_DWORD)v269)
      {
        v44 = *(_QWORD *)v268;
        v270 = 24 * v269;
        do
        {
          v271 = *(WTF::StringImpl **)v44;
          *(_QWORD *)v44 = 0;
          if (v271)
          {
            if (*(_DWORD *)v271 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v271, (WTF::StringImpl *)a2);
            else
              --*(_DWORD *)v271;
          }
          v44 += 24;
          v270 -= 24;
        }
        while (v270);
      }
      v272 = *(WTF **)v268;
      if (*(_QWORD *)v268)
      {
        *(_QWORD *)v268 = 0;
        *((_DWORD *)v268 + 2) = 0;
        WTF::fastFree(v272, a2);
      }
      WTF::fastFree(v268, a2);
      v7 = v430;
    }
    v273 = *(_QWORD *)a5;
    if (*(_QWORD *)a5)
      v274 = *(_DWORD *)(v273 - 12) + 1;
    else
      v274 = 1;
    *(_DWORD *)(v273 - 12) = v274;
    v275 = *(_QWORD *)a5;
    if (*(_QWORD *)a5)
      v276 = *(_DWORD *)(v275 - 12);
    else
      v276 = 0;
    v277 = (*(_DWORD *)(v275 - 16) + v276);
    v278 = *(unsigned int *)(v275 - 4);
    if (v278 > 0x400)
    {
      if (v278 <= 2 * v277)
        goto LABEL_551;
    }
    else if (3 * v278 <= 4 * v277)
    {
      if (!(_DWORD)v278)
      {
        v279 = 8;
        goto LABEL_447;
      }
LABEL_551:
      v279 = (_DWORD)v278 << (6 * *(_DWORD *)(v275 - 12) >= (2 * v278));
LABEL_447:
      v259 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)a5, v279, v259);
    }
LABEL_413:
    a4 = v259[1];
    v261 = *((_WORD *)v250 + 4);
    v262 = *(_QWORD *)v250;
    v263 = *(_DWORD **)v7;
    *v263 = **(_DWORD **)v7 + 1;
    v449 = v263;
    v264 = *(_QWORD *)(v7 + 8);
    LODWORD(v450) = v264;
    WORD2(v450) = v261;
    v451 = v262;
    v265 = *((unsigned int *)a4 + 3);
    if ((_DWORD)v265 == *((_DWORD *)a4 + 2))
    {
      v280 = WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a4, v265 + 1, (unint64_t)&v449);
      v281 = *(_QWORD *)a4 + 24 * *((unsigned int *)a4 + 3);
      v282 = *(_QWORD *)v280;
      *(_QWORD *)v280 = 0;
      *(_QWORD *)v281 = v282;
      *(_DWORD *)(v281 + 8) = *(_DWORD *)(v280 + 8);
      *(_WORD *)(v281 + 12) = *(_WORD *)(v280 + 12);
      v41 = *(_QWORD *)(v280 + 16);
      *(_QWORD *)(v281 + 16) = v41;
    }
    else
    {
      v39 = *(_QWORD *)a4;
      v41 = *(_QWORD *)a4 + 24 * v265;
      v449 = 0;
      *(_QWORD *)v41 = v263;
      *(_DWORD *)(v41 + 8) = (_DWORD)v450;
      *(_WORD *)(v41 + 12) = WORD2(v450);
      *(_QWORD *)(v41 + 16) = v451;
    }
    ++*((_DWORD *)a4 + 3);
    v266 = v449;
    v449 = 0;
    if (v266)
    {
      if (*v266 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v266, (WTF::StringImpl *)a2);
      else
        --*v266;
    }
    v62 = *((unsigned __int8 *)v250 + 8);
    if ((_DWORD)v62 == 17)
    {
      WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)(v440 + 608), (WTF::StringImpl *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v250 + 8) + 32) + 40), (uint64_t)&v449);
      v62 = *((unsigned __int8 *)v250 + 8);
    }
    if (v62 < 0x13)
    {
      *(_BYTE *)(v440 + 632 + v62) = 1;
      v250 = (WTF *)((char *)v250 + 16);
      if (v250 != v251)
        goto LABEL_404;
LABEL_347:
      if (!HIDWORD(v456))
        goto LABEL_348;
      v284 = v456;
      v44 = v456 + 16 * HIDWORD(v456);
      a5 = v440 + 568;
      a4 = (WTF *)(v440 + 624);
      v7 = 0xFFFFFFFFLL;
      v8 = 24;
LABEL_462:
      WebCore::Style::makePseudoClassInvalidationKey((uint64_t)&v449, (WTF::StringImpl *)(**(_DWORD **)v284 >> 9), *(int **)v284);
      v286 = *(_QWORD *)a5;
      if (*(_QWORD *)a5
        || (WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash((uint64_t *)a5, 8u, 0), (v286 = *(_QWORD *)a5) != 0))
      {
        v287 = *(_DWORD *)(v286 - 8);
      }
      else
      {
        v287 = 0;
      }
      v288 = 0;
      v289 = (int)v449;
      v290 = 9 * (((_DWORD)v449 + ~((_DWORD)v449 << 15)) ^ (((_DWORD)v449 + ~((_DWORD)v449 << 15)) >> 10));
      v291 = (v290 ^ (v290 >> 6)) + ~((v290 ^ (v290 >> 6)) << 11);
      v292 = ~(BYTE4(v449) << 15) + BYTE4(v449);
      v293 = (9 * (v292 ^ (v292 >> 10))) ^ ((9 * (v292 ^ (v292 >> 10))) >> 6);
      v294 = (0xD7862706ELL
            * (unint64_t)(277951225 * (v291 ^ HIWORD(v291))
                               + 95187966
                               * ((0xD7862706ELL
                                               * (unint64_t)(95187966 * (*((_DWORD *)v450 + 4) >> 8)
                                                                  + 277951225
                                                                  * ((v293 + ~(v293 << 11)) ^ ((v293 + ~(v293 << 11)) >> 16)))) >> 4))) >> 4;
      v295 = 1;
      while (2)
      {
        v296 = v294 & v287;
        v297 = v286 + 24 * v296;
        v298 = *(_DWORD *)v297;
        v299 = *(unsigned __int8 *)(v297 + 4);
        if (*(_DWORD *)v297 | v299)
        {
          if (v298 == -1)
          {
            v288 = (_QWORD *)(v286 + 24 * v296);
          }
          else
          {
LABEL_469:
            if (v298 == (_DWORD)v449 && v299 == BYTE4(v449) && *(_QWORD *)(v297 + 8) == (_QWORD)v450)
              goto LABEL_504;
          }
          LODWORD(v294) = v295 + v296;
          ++v295;
          continue;
        }
        break;
      }
      if (*(_QWORD *)(v297 + 8))
        goto LABEL_469;
      if (v288)
      {
        *v288 = 0;
        v288[1] = 0;
        v288[2] = 0;
        --*(_DWORD *)(*(_QWORD *)a5 - 16);
        v297 = (uint64_t)v288;
      }
      *(_DWORD *)v297 = v289;
      *(_BYTE *)(v297 + 4) = BYTE4(v449);
      v301 = v450;
      v450 = 0;
      v302 = *(WTF::StringImpl **)(v297 + 8);
      *(_QWORD *)(v297 + 8) = v301;
      if (v302)
      {
        if (*(_DWORD *)v302 == 2)
          WTF::StringImpl::destroy(v302, v285);
        else
          *(_DWORD *)v302 -= 2;
      }
      v303 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v303 = 0;
      v303[1] = 0;
      v304 = *(WTF **)(v297 + 16);
      *(_QWORD *)(v297 + 16) = v303;
      if (v304)
      {
        v305 = v44;
        v306 = *((unsigned int *)v304 + 3);
        if ((_DWORD)v306)
        {
          v307 = *(WTF **)v304;
          v308 = 16 * v306;
          do
          {
            v309 = *(_DWORD **)v307;
            *(_QWORD *)v307 = 0;
            if (v309)
            {
              if (*v309 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v309, v285);
              else
                --*v309;
            }
            v307 = (WTF *)((char *)v307 + 16);
            v308 -= 16;
          }
          while (v308);
        }
        v310 = *(WTF **)v304;
        if (*(_QWORD *)v304)
        {
          *(_QWORD *)v304 = 0;
          *((_DWORD *)v304 + 2) = 0;
          WTF::fastFree(v310, v285);
        }
        WTF::fastFree(v304, v285);
        v44 = v305;
      }
      v311 = *(_QWORD *)a5;
      v312 = *(_QWORD *)a5 ? *(_DWORD *)(v311 - 12) + 1 : 1;
      *(_DWORD *)(v311 - 12) = v312;
      v313 = *(_QWORD *)a5;
      v314 = *(_QWORD *)a5 ? *(_DWORD *)(v313 - 12) : 0;
      v315 = (*(_DWORD *)(v313 - 16) + v314);
      v316 = *(unsigned int *)(v313 - 4);
      if (v316 > 0x400)
      {
        if (v316 <= 2 * v315)
          goto LABEL_565;
      }
      else if (3 * v316 <= 4 * v315)
      {
        if (!(_DWORD)v316)
        {
          v317 = 8;
          goto LABEL_503;
        }
LABEL_565:
        v317 = (_DWORD)v316 << (6 * *(_DWORD *)(v313 - 12) >= (2 * v316));
LABEL_503:
        v297 = WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash((uint64_t *)a5, v317, (int *)v297);
      }
LABEL_504:
      v318 = *(_QWORD *)(v297 + 16);
      v319 = *(_WORD *)(v284 + 8);
      v320 = *(_DWORD **)v430;
      *v320 = **(_DWORD **)v430 + 1;
      v443 = v320;
      v444 = *(_QWORD *)(v430 + 8);
      v445 = v319;
      v321 = *(unsigned int *)(v318 + 12);
      if ((_DWORD)v321 == *(_DWORD *)(v318 + 8))
      {
        v326 = WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v318, v321 + 1, (unint64_t)&v443);
        v327 = *(_QWORD *)v318 + 16 * *(unsigned int *)(v318 + 12);
        v328 = *(_QWORD *)v326;
        *(_QWORD *)v326 = 0;
        *(_QWORD *)v327 = v328;
        *(_DWORD *)(v327 + 8) = *(_DWORD *)(v326 + 8);
        v323 = (__int16 *)(v327 + 12);
        v324 = (__int16 *)(v326 + 12);
      }
      else
      {
        v322 = *(_QWORD *)v318 + 16 * v321;
        v443 = 0;
        *(_QWORD *)v322 = v320;
        *(_DWORD *)(v322 + 8) = v444;
        v323 = (__int16 *)(v322 + 12);
        v324 = &v445;
      }
      *v323 = *v324;
      ++*(_DWORD *)(v318 + 12);
      v325 = v443;
      v443 = 0;
      if (v325)
      {
        if (*v325 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v325, v285);
        else
          --*v325;
      }
      if (v450)
      {
        if (*(_DWORD *)v450 == 2)
          WTF::StringImpl::destroy(v450, v285);
        else
          *(_DWORD *)v450 -= 2;
      }
      if (*(_BYTE *)(v284 + 8) == 17)
      {
        LOBYTE(v443) = **(_DWORD **)v284 >> 9;
        WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::add((uint64_t *)(v440 + 616), &v443, (uint64_t)&v449);
      }
      LOBYTE(v443) = **(_DWORD **)v284 >> 9;
      WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::add((uint64_t *)a4, &v443, (uint64_t)&v449);
      v62 = *(unsigned __int8 *)(v284 + 8);
      if (v62 < 0x13)
        break;
    }
  }
  *(_BYTE *)(v440 + 632 + v62) = 1;
  v284 += 16;
  if (v284 != v44)
    goto LABEL_462;
LABEL_348:
  a5 = v457;
  if (HIDWORD(v457))
  {
    a4 = (WTF *)(v440 + 576);
    v44 = 1;
    v392 = v457 + 16 * HIDWORD(v457);
    while (1)
    {
      WebCore::Style::makePseudoClassInvalidationKey((uint64_t)&v447, (WTF::StringImpl *)0x22, *(int **)a5);
      WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::ensure<WebCore::Style::RuleFeatureSet::collectFeatures(WebCore::Style::RuleData const&,WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_4>((uint64_t)&v449, (uint64_t *)a4, &v447);
      v393 = *((_QWORD *)v449 + 2);
      v394 = *(_WORD *)(a5 + 8);
      v395 = *(_QWORD *)a5;
      v396 = *(_DWORD **)v430;
      *v396 = **(_DWORD **)v430 + 1;
      v443 = v396;
      v444 = *(_QWORD *)(v430 + 8);
      v445 = v394;
      v446 = v395;
      v397 = *(_DWORD *)(v393 + 12);
      if (v397 == *(_DWORD *)(v393 + 8))
      {
        WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleFeatureWithInvalidationSelector>(v393, (unint64_t)&v443);
      }
      else
      {
        v39 = *(_QWORD *)v393;
        v41 = *(_QWORD *)v393 + 24 * v397;
        v443 = 0;
        *(_QWORD *)v41 = v396;
        *(_DWORD *)(v41 + 8) = v444;
        *(_WORD *)(v41 + 12) = v445;
        *(_QWORD *)(v41 + 16) = v446;
        ++*(_DWORD *)(v393 + 12);
      }
      v398 = v443;
      v443 = 0;
      if (v398)
      {
        if (*v398 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v398, (WTF::StringImpl *)a2);
        else
          --*v398;
      }
      if (v448)
      {
        if (*(_DWORD *)v448 == 2)
          WTF::StringImpl::destroy(v448, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v448 -= 2;
      }
      if (*(_BYTE *)(a5 + 10))
      {
        v399 = *(_DWORD **)v430;
        *v399 = **(_DWORD **)v430 + 1;
        v449 = v399;
        LODWORD(v450) = *(_QWORD *)(v430 + 8);
        v400 = *(_DWORD *)(v440 + 596);
        if (v400 == *(_DWORD *)(v440 + 592))
        {
          WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleAndSelector>(v440 + 584, (unint64_t)&v449);
        }
        else
        {
          v39 = *(_QWORD *)(v440 + 584);
          v41 = v39 + 12 * v400;
          v449 = 0;
          *(_QWORD *)v41 = v399;
          *(_DWORD *)(v41 + 8) = (_DWORD)v450;
          ++*(_DWORD *)(v440 + 596);
        }
        v401 = v449;
        v449 = 0;
        if (v401)
        {
          if (*v401 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v401, (WTF::StringImpl *)a2);
          else
            --*v401;
        }
      }
      v62 = *(unsigned __int8 *)(a5 + 8);
      if (v62 >= 0x13)
        goto LABEL_205;
      *(_BYTE *)(v440 + v62 + 632) = 1;
      a5 += 16;
      if (a5 == v392)
      {
        a5 = v457;
        break;
      }
    }
  }
  if (a5)
  {
    *(_QWORD *)&v457 = 0;
    DWORD2(v457) = 0;
    WTF::fastFree((WTF *)a5, a2);
  }
  v218 = (WTF *)v456;
  if ((_QWORD)v456)
  {
    *(_QWORD *)&v456 = 0;
    DWORD2(v456) = 0;
    WTF::fastFree(v218, a2);
  }
  v219 = v455[0];
  if (v455[0])
  {
    v455[0] = 0;
    LODWORD(v455[1]) = 0;
    WTF::fastFree(v219, a2);
  }
  v220 = v454[0];
  if (v454[0])
  {
    v454[0] = 0;
    LODWORD(v454[1]) = 0;
    WTF::fastFree(v220, a2);
  }
  v221 = v453[0];
  if (v453[0])
  {
    v453[0] = 0;
    LODWORD(v453[1]) = 0;
    WTF::fastFree(v221, a2);
  }
  v433 = 0;
  v436 = 0;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v427 = 0;
  v429 = 0;
  v425 = 0;
  v439 = 0;
  v225 = 0;
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v229 = 0;
  v230 = *(_QWORD *)(*(_QWORD *)v430 + 16) + 16 * *(unsigned __int16 *)(v430 + 8);
  v231 = (WTF *)(v440 + 16);
  v232 = &dword_1ECE90000;
  v233 = (WTF::StringImpl *)&WebCore::HTMLNames::styleAttr;
  v234 = &webThreadDelegateMessageScopeCount;
  while (2)
  {
    v235 = *(_DWORD *)v230;
    switch((*(_DWORD *)v230 >> 4) & 0x1F)
    {
      case 1:
        if (*(_QWORD *)(*(_QWORD *)(v230 + 8) + 24) != *((_QWORD *)v232 + 358))
          v222 = v230;
        goto LABEL_374;
      case 2:
        v436 = v230;
        goto LABEL_374;
      case 3:
        v236 = (_QWORD *)(v230 + 8);
        if ((v235 & 0x100000) != 0)
          v236 = (_QWORD *)(*v236 + 8);
        if (v223)
        {
          if (v229)
          {
            v344 = *(_QWORD *)v231;
            if (*(_QWORD *)v231)
            {
              v345 = 0;
              v346 = *v236;
              for (nn = *(_DWORD *)(v346 + 16) >> 8; ; nn = v345 + v348)
              {
                v348 = nn & *(_DWORD *)(v344 - 8);
                v349 = *(_QWORD *)(v344 + 16 * v348);
                if (!v349)
                {
                  LODWORD(v344) = 0;
                  goto LABEL_571;
                }
                if (v349 != -1 && v349 == v346)
                  break;
                ++v345;
              }
              v344 = *(_QWORD *)(v344 + 16 * v348 + 8);
              if (v344)
                LODWORD(v344) = *(_DWORD *)(v344 + 12);
            }
LABEL_571:
            if (v344 < v229)
            {
              v223 = v230;
              v229 = v344;
            }
          }
        }
        else
        {
          v237 = *(_QWORD *)v231;
          if (*(_QWORD *)v231)
          {
            v238 = 0;
            v239 = *v236;
            for (i1 = *(_DWORD *)(v239 + 16) >> 8; ; i1 = v238 + v241)
            {
              v241 = i1 & *(_DWORD *)(v237 - 8);
              v242 = *(_QWORD *)(v237 + 16 * v241);
              if (!v242)
                break;
              v243 = v242 != -1 && v242 == v239;
              if (v243)
              {
                v329 = *(_QWORD *)(v237 + 16 * v241 + 8);
                if (!v329)
                  break;
                v229 = *(_DWORD *)(v329 + 12);
                goto LABEL_373;
              }
              ++v238;
            }
          }
          v229 = 0;
LABEL_373:
          v223 = v230;
        }
        goto LABEL_374;
      case 4:
      case 5:
      case 6:
      case 7:
      case 0xA:
      case 0xB:
      case 0xC:
        v418 = v229;
        v421 = v224;
        v423 = v231;
        v333 = *(_QWORD *)(*(_QWORD *)(v230 + 8) + 32);
        if (*(_QWORD *)(v333 + 40) == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24))
        {
          v232 = &dword_1ECE90000;
          v233 = (WTF::StringImpl *)&WebCore::HTMLNames::styleAttr;
        }
        else
        {
          WebCore::SVGElement::animatableAttributeForName(v333 + 24, &v452);
          v334 = v452;
          v335 = v234;
          v336 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v234 + 254);
          if (v452)
          {
            if (*(_DWORD *)v452 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v452);
              WTF::fastFree(v361, v362);
            }
            else
            {
              --*(_DWORD *)v452;
            }
          }
          v337 = v334 == v336;
          v224 = v421;
          v231 = v423;
          if (v337)
            v224 = v230;
          v235 = *(_DWORD *)v230;
          v232 = &dword_1ECE90000;
          v233 = (WTF::StringImpl *)&WebCore::HTMLNames::styleAttr;
          v234 = v335;
        }
        v229 = v418;
        goto LABEL_374;
      case 8:
        v244 = (v235 >> 9);
        if (v244 > 0x23)
        {
          if ((v235 >> 9) > 0x2Du)
          {
            if (v244 == 68)
            {
              v425 = v230;
            }
            else if (v244 == 80 || v244 == 46)
            {
LABEL_384:
              v429 = v230;
            }
          }
          else
          {
            v243 = v244 == 36;
            v330 = v439;
            if (v243)
              v330 = v230;
            v439 = v330;
          }
        }
        else
        {
          if (v244 - 29 >= 2)
          {
            if (v244 != 13)
              goto LABEL_374;
            goto LABEL_384;
          }
          v433 = (WTF *)v230;
        }
LABEL_374:
        v230 += 16;
        if ((v235 & 0x8000F) == 0)
          continue;
        v245 = (uint64_t *)v231;
        if (!*(_BYTE *)(v440 + 800))
          *(_BYTE *)(v440 + 800) = WebCore::Style::isHostSelectorMatchingInShadowTree((int *)(*(_QWORD *)(*(_QWORD *)v430 + 16) + 16* *(unsigned __int16 *)(v430 + 8)), (const WebCore::CSSSelector *)&WebCore::HTMLNames::styleAttr);
        if (v228)
        {
          v383 = (_QWORD *)(v440 + 120);
          v402 = *(unsigned int *)(v440 + 132);
          if ((_DWORD)v402 != *(_DWORD *)(v440 + 128))
          {
            v403 = *v383 + 32 * v402;
            v404 = *(_DWORD **)v430;
            if (*(_QWORD *)v430)
              ++*v404;
            *(_QWORD *)v403 = v404;
            v405 = *(_OWORD *)v419;
            *(_QWORD *)(v403 + 24) = *(_QWORD *)(v419 + 16);
            *(_OWORD *)(v403 + 8) = v405;
            ++*(_DWORD *)(v440 + 132);
            goto LABEL_399;
          }
LABEL_612:
          WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleData&>((uint64_t)v383, v430);
          goto LABEL_399;
        }
        if (v226)
        {
          *(_DWORD *)(v430 + 16) = 0;
          v383 = (_QWORD *)(v440 + 216);
          v409 = *(unsigned int *)(v440 + 228);
          if ((_DWORD)v409 != *(_DWORD *)(v440 + 224))
          {
            v410 = *v383 + 32 * v409;
            v411 = *(_DWORD **)v430;
            if (*(_QWORD *)v430)
              ++*v411;
            *(_QWORD *)v410 = v411;
            v412 = *(_OWORD *)v419;
            *(_QWORD *)(v410 + 24) = *(_QWORD *)(v419 + 16);
            *(_OWORD *)(v410 + 8) = v412;
            ++*(_DWORD *)(v440 + 228);
            goto LABEL_399;
          }
          goto LABEL_612;
        }
        if (v227)
        {
          *(_DWORD *)(v430 + 16) = 0;
LABEL_655:
          v383 = (_QWORD *)(v440 + 264);
          v413 = *(unsigned int *)(v440 + 276);
          if ((_DWORD)v413 != *(_DWORD *)(v440 + 272))
          {
            v414 = *v383 + 32 * v413;
            v415 = *(_DWORD **)v430;
            if (*(_QWORD *)v430)
              ++*v415;
            *(_QWORD *)v414 = v415;
            v416 = *(_OWORD *)v419;
            *(_QWORD *)(v414 + 24) = *(_QWORD *)(v419 + 16);
            *(_OWORD *)(v414 + 8) = v416;
            ++*(_DWORD *)(v440 + 276);
            goto LABEL_399;
          }
          goto LABEL_612;
        }
        if (v225)
        {
          *(_DWORD *)(v430 + 16) = 0;
          if ((*v225 & 0x80000) != 0 || (v283 = v225[4], (v283 & 0x1F0) != 0x90) || (v283 & 0x1FE00) != 0x2200)
          {
            v246 = (WTF::StringImpl **)(v225 + 2);
            if ((*v225 & 0x100000) != 0)
              v246 = (WTF::StringImpl **)((char *)*v246 + 8);
            v247 = (uint64_t *)(v440 + 56);
            goto LABEL_397;
          }
          goto LABEL_655;
        }
        if (v439)
        {
          v367 = (_QWORD *)(v440 + 168);
          v368 = *(unsigned int *)(v440 + 180);
          if ((_DWORD)v368 == *(_DWORD *)(v440 + 176))
          {
            v379 = WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v367, v368 + 1, v430);
            v380 = *(unsigned int *)(v440 + 180);
            v381 = *(_QWORD *)(v440 + 168);
            v382 = *(_DWORD **)v379;
            if (*(_QWORD *)v379)
              ++*v382;
            v369 = v381 + 32 * v380;
            *(_QWORD *)v369 = v382;
            v371 = *(_OWORD *)(v379 + 8);
            v372 = *(_QWORD *)(v379 + 24);
          }
          else
          {
            v369 = *v367 + 32 * v368;
            v370 = *(_DWORD **)v430;
            if (*(_QWORD *)v430)
              ++*v370;
            *(_QWORD *)v369 = v370;
            v371 = *(_OWORD *)v419;
            v372 = *(_QWORD *)(v419 + 16);
          }
          *(_QWORD *)(v369 + 24) = v372;
          *(_OWORD *)(v369 + 8) = v371;
          ++*(_DWORD *)(v440 + 180);
          goto LABEL_399;
        }
        if (v436)
        {
          v246 = (WTF::StringImpl **)(v436 + 8);
          if ((*(_BYTE *)(v436 + 2) & 0x10) != 0)
            v246 = (WTF::StringImpl **)((char *)*v246 + 8);
          v247 = (uint64_t *)(v440 + 8);
LABEL_397:
          v248 = v430;
LABEL_398:
          WebCore::Style::RuleSet::addToRuleSet(v246, v247, v248);
          goto LABEL_399;
        }
        if (v223)
        {
          v246 = (WTF::StringImpl **)(v223 + 8);
          if ((*(_BYTE *)(v223 + 2) & 0x10) != 0)
            v246 = (WTF::StringImpl **)((char *)*v246 + 8);
          v247 = v245;
          goto LABEL_397;
        }
        if (v224)
        {
          WebCore::Style::RuleSet::addToRuleSet((WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v224 + 8) + 32) + 24), (uint64_t *)(v440 + 24), v430);
          v246 = (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v224 + 8) + 32) + 40);
          v247 = (uint64_t *)(v440 + 32);
          goto LABEL_397;
        }
        if (v429)
        {
          v383 = (_QWORD *)(v440 + 72);
          v384 = *(unsigned int *)(v440 + 84);
          if ((_DWORD)v384 != *(_DWORD *)(v440 + 80))
          {
            v385 = *v383 + 32 * v384;
            v386 = *(_DWORD **)v430;
            if (*(_QWORD *)v430)
              ++*v386;
            *(_QWORD *)v385 = v386;
            v387 = *(_OWORD *)v419;
            *(_QWORD *)(v385 + 24) = *(_QWORD *)(v419 + 16);
            *(_OWORD *)(v385 + 8) = v387;
            ++*(_DWORD *)(v440 + 84);
            goto LABEL_399;
          }
          goto LABEL_612;
        }
        if (v433)
        {
          v355 = (_QWORD *)(v440 + 312);
          v356 = *(unsigned int *)(v440 + 324);
          if ((_DWORD)v356 == *(_DWORD *)(v440 + 320))
          {
            v363 = WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v355, v356 + 1, v430);
            v364 = *(unsigned int *)(v440 + 324);
            v365 = *(_QWORD *)(v440 + 312);
            v366 = *(_DWORD **)v363;
            if (*(_QWORD *)v363)
              ++*v366;
            v357 = v365 + 32 * v364;
            *(_QWORD *)v357 = v366;
            v359 = *(_OWORD *)(v363 + 8);
            v360 = *(_QWORD *)(v363 + 24);
          }
          else
          {
            v357 = *v355 + 32 * v356;
            v358 = *(_DWORD **)v430;
            if (*(_QWORD *)v430)
              ++*v358;
            *(_QWORD *)v357 = v358;
            v359 = *(_OWORD *)v419;
            v360 = *(_QWORD *)(v419 + 16);
          }
          *(_QWORD *)(v357 + 24) = v360;
          *(_OWORD *)(v357 + 8) = v359;
          ++*(_DWORD *)(v440 + 324);
          goto LABEL_399;
        }
        if (v427)
        {
          v417 = *(_DWORD **)(*(_QWORD *)(v427 + 8) + 48);
          if (!*v417)
          {
            __break(0xC471u);
            JUMPOUT(0x1940C3710);
          }
          v246 = (WTF::StringImpl **)(v417 + 2);
          v247 = (uint64_t *)(v440 + 64);
          v248 = v430;
          goto LABEL_398;
        }
        if (v425)
        {
          v373 = (_QWORD *)(v440 + 360);
          v374 = *(unsigned int *)(v440 + 372);
          if ((_DWORD)v374 == *(_DWORD *)(v440 + 368))
          {
            v388 = WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v373, v374 + 1, v430);
            v389 = *(unsigned int *)(v440 + 372);
            v390 = *(_QWORD *)(v440 + 360);
            v391 = *(_DWORD **)v388;
            if (*(_QWORD *)v388)
              ++*v391;
            v375 = v390 + 32 * v389;
            *(_QWORD *)v375 = v391;
            v377 = *(_OWORD *)(v388 + 8);
            v378 = *(_QWORD *)(v388 + 24);
          }
          else
          {
            v375 = *v373 + 32 * v374;
            v376 = *(_DWORD **)v430;
            if (*(_QWORD *)v430)
              ++*v376;
            *(_QWORD *)v375 = v376;
            v377 = *(_OWORD *)v419;
            v378 = *(_QWORD *)(v419 + 16);
          }
          *(_QWORD *)(v375 + 24) = v378;
          *(_OWORD *)(v375 + 8) = v377;
          ++*(_DWORD *)(v440 + 372);
        }
        else
        {
          if (v222)
          {
            WebCore::Style::RuleSet::addToRuleSet((WTF::StringImpl **)(*(_QWORD *)(v222 + 8) + 24), (uint64_t *)(v440 + 40), v430);
            v246 = (WTF::StringImpl **)(*(_QWORD *)(v222 + 8) + 40);
            v247 = (uint64_t *)(v440 + 48);
            goto LABEL_397;
          }
          v338 = (_QWORD *)(v440 + 408);
          v339 = *(unsigned int *)(v440 + 420);
          if ((_DWORD)v339 == *(_DWORD *)(v440 + 416))
          {
            v351 = WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v338, v339 + 1, v430);
            v352 = *(unsigned int *)(v440 + 420);
            v353 = *(_QWORD *)(v440 + 408);
            v354 = *(_DWORD **)v351;
            if (*(_QWORD *)v351)
              ++*v354;
            v340 = v353 + 32 * v352;
            *(_QWORD *)v340 = v354;
            v342 = *(_OWORD *)(v351 + 8);
            v343 = *(_QWORD *)(v351 + 24);
          }
          else
          {
            v340 = *v338 + 32 * v339;
            v341 = *(_DWORD **)v430;
            if (*(_QWORD *)v430)
              ++*v341;
            *(_QWORD *)v340 = v341;
            v342 = *(_OWORD *)v419;
            v343 = *(_QWORD *)(v419 + 16);
          }
          *(_QWORD *)(v340 + 24) = v343;
          *(_OWORD *)(v340 + 8) = v342;
          ++*(_DWORD *)(v440 + 420);
        }
LABEL_399:
        if (HIDWORD(v442))
        {
          v406 = v441;
          v407 = 8 * HIDWORD(v442);
          do
          {
            v408 = *(_DWORD **)v406;
            *(_QWORD *)v406 = 0;
            if (v408)
            {
              if (*v408 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v408, v233);
              else
                --*v408;
            }
            v406 = (WTF *)((char *)v406 + 8);
            v407 -= 8;
          }
          while (v407);
        }
        result = v441;
        if (v441)
        {
          v441 = 0;
          LODWORD(v442) = 0;
          return (WTF *)WTF::fastFree(result, v233);
        }
        return result;
      case 9:
        if ((v235 >> 9) - 26 >= 2)
        {
          switch((v235 >> 9))
          {
            case 0xBu:
              v228 = v230;
              break;
            case 0x11u:
              v227 = v230;
              break;
            case 0x13u:
              v226 = v230;
              break;
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
              v331 = *(_QWORD *)(*(_QWORD *)(v230 + 8) + 48);
              if (!*(_DWORD *)v331)
              {
                __break(0xC471u);
                JUMPOUT(0x1940C36BCLL);
              }
              v243 = *(_QWORD *)(v331 + 8) == *((_QWORD *)v232 + 358);
              v332 = v427;
              if (!v243)
                v332 = v230;
              v427 = v332;
              break;
            default:
              goto LABEL_374;
          }
        }
        else
        {
          v225 = (_DWORD *)v230;
        }
        goto LABEL_374;
      default:
        goto LABEL_374;
    }
  }
}

__n128 WebCore::Style::RuleSet::addToRuleSet(WTF::StringImpl **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  WTF *v36;
  uint64_t v38;
  _QWORD *v39;
  _DWORD *v40;
  __n128 *v41;
  __n128 result;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;

  if (!*a1)
    return result;
  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = *a1;
  v10 = *((_DWORD *)*a1 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v12 = v10 & v7;
    v13 = (WTF::StringImpl **)(v6 + 16 * v12);
    v14 = *v13;
    if (!*v13)
      break;
    if (v14 == (WTF::StringImpl *)-1)
    {
      v8 = (WTF::StringImpl **)(v6 + 16 * v12);
    }
    else if (v14 == v9)
    {
      goto LABEL_34;
    }
    v10 = i + v12;
  }
  if (v8)
  {
    *v8 = 0;
    v8[1] = 0;
    --*(_DWORD *)(*a2 - 16);
    v9 = *a1;
    v13 = v8;
  }
  if (v9)
    *(_DWORD *)v9 += 2;
  *v13 = v9;
  v15 = v13[1];
  v13[1] = 0;
  if (v15)
  {
    v16 = *((unsigned int *)v15 + 3);
    if ((_DWORD)v16)
    {
      v17 = *(WTF **)v15;
      v18 = 32 * v16;
      do
      {
        v19 = *(_DWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*v19 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v19, (WTF::StringImpl *)a2);
          else
            --*v19;
        }
        v17 = (WTF *)((char *)v17 + 32);
        v18 -= 32;
      }
      while (v18);
    }
    v20 = *(WTF **)v15;
    if ((WTF::StringImpl *)((char *)v15 + 16) != *(WTF::StringImpl **)v15 && v20 != 0)
    {
      *(_QWORD *)v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      WTF::fastFree(v20, a2);
    }
    WTF::fastFree(v15, a2);
  }
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_34;
    goto LABEL_64;
  }
  if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v45 = 8;
      goto LABEL_67;
    }
LABEL_64:
    v45 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
LABEL_67:
    v13 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a2, v45, v13);
  }
LABEL_34:
  v28 = (uint64_t)v13[1];
  if (!v28)
  {
    v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v29 = (char *)v29 + 16;
    *((_QWORD *)v29 + 1) = 1;
    v31 = v13[1];
    v13[1] = v29;
    if (v31)
    {
      v32 = *((unsigned int *)v31 + 3);
      if ((_DWORD)v32)
      {
        v33 = *(WTF **)v31;
        v34 = 32 * v32;
        do
        {
          v35 = *(_DWORD **)v33;
          *(_QWORD *)v33 = 0;
          if (v35)
          {
            if (*v35 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v35, v30);
            else
              --*v35;
          }
          v33 = (WTF *)((char *)v33 + 32);
          v34 -= 32;
        }
        while (v34);
      }
      v36 = *(WTF **)v31;
      if ((WTF::StringImpl *)((char *)v31 + 16) != *(WTF::StringImpl **)v31 && v36 != 0)
      {
        *(_QWORD *)v31 = 0;
        *((_DWORD *)v31 + 2) = 0;
        WTF::fastFree(v36, v30);
      }
      WTF::fastFree(v31, v30);
      v28 = (uint64_t)v13[1];
    }
    else
    {
      v28 = (uint64_t)v29;
    }
  }
  v38 = *(unsigned int *)(v28 + 12);
  if ((_DWORD)v38 == *(_DWORD *)(v28 + 8))
  {
    a3 = WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28, v38 + 1, a3);
    v43 = *(unsigned int *)(v28 + 12);
    v44 = *(_QWORD *)v28;
    v40 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      ++*v40;
    v39 = (_QWORD *)(v44 + 32 * v43);
  }
  else
  {
    v39 = (_QWORD *)(*(_QWORD *)v28 + 32 * v38);
    v40 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      ++*v40;
  }
  *v39 = v40;
  v41 = (__n128 *)(v39 + 1);
  result = *(__n128 *)(a3 + 8);
  v41[1].n128_u64[0] = *(_QWORD *)(a3 + 24);
  *v41 = result;
  ++*(_DWORD *)(v28 + 12);
  return result;
}

uint64_t WebCore::Style::isHostSelectorMatchingInShadowTree(int *a1, const WebCore::CSSSelector *a2)
{
  int v3;
  char v4;
  int v5;
  int v6;
  _BOOL4 v7;
  WebCore::Style **v8;
  WebCore::Style *v9;
  int v10;
  int v11;
  char v12;

  v3 = 0;
  v4 = 1;
  while (1)
  {
    v5 = *a1;
    v6 = (*a1 & 0x1FFF0) == 0x4880 ? 1 : v3;
    if ((v5 & 0x100000) != 0)
    {
      v8 = *(WebCore::Style ***)(*((_QWORD *)a1 + 1) + 56);
      if (v8)
      {
        v9 = *v8;
        if (*v8)
          break;
      }
    }
LABEL_6:
    if ((v5 & 0x80000) != 0)
    {
      v12 = (v4 ^ 1) & v6;
      return v12 & 1;
    }
    a1 += 4;
    v7 = (v5 & 0xF) == 0;
    v4 &= v7;
    v3 = v7 & v6;
  }
  while ((WebCore::Style::isHostSelectorMatchingInShadowTree(v9, a2) & 1) == 0)
  {
    do
    {
      v11 = *(_DWORD *)v9;
      v9 = (WebCore::Style *)((char *)v9 + 16);
      v10 = v11;
    }
    while ((v11 & 0x80000) == 0);
    if ((v10 & 0x20000) != 0)
      goto LABEL_6;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t WebCore::Style::RuleFeatureSet::recursivelyCollectFeaturesFromSelector(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5, uint64_t a6)
{
  int v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl **v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  int i;
  unsigned int v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  WebCore::Style **v62;
  int v63;
  unsigned int v66;
  int v67;
  int v68;
  unsigned __int8 HasPseudoClassMatchElement;
  int v70;
  int v71;
  WebCore::Style *v72;
  int v73;
  int v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  char v82;
  char v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t *v89;
  uint64_t v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  int v96;
  uint64_t v97;
  unsigned int v98;
  __int128 v101;

  v7 = a5;
  v10 = 0;
  while (2)
  {
    v11 = a4;
    v12 = v10;
LABEL_3:
    v13 = *a3;
    v14 = a6;
    switch((*a3 >> 4) & 0x1F)
    {
      case 2u:
        v87 = (WTF::StringImpl *)(a3 + 2);
        v88 = (WTF::StringImpl *)(a3 + 2);
        if ((v13 & 0x100000) != 0)
          v88 = (WTF::StringImpl *)(*(_QWORD *)v87 + 8);
        WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)a1, v88, (uint64_t)&v101);
        if ((v11 - 1) <= 1u)
        {
          v7 = a5;
          if ((*((_BYTE *)a3 + 2) & 0x10) != 0)
            v87 = (WTF::StringImpl *)(*(_QWORD *)v87 + 8);
          WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)(a1 + 8), v87, (uint64_t)&v101);
          goto LABEL_41;
        }
        v7 = a5;
        if ((v11 - 10) < 7u
          || (v14 = a6, v11 <= 0x12u) && (v14 = a6, ((1 << v11) & 0x60020) != 0))
        {
          v89 = (uint64_t *)(a2 + 8);
          *(_QWORD *)&v101 = a3;
          BYTE8(v101) = v11;
          BYTE9(v101) = a5;
          v90 = *(unsigned int *)(a2 + 20);
          if ((_DWORD)v90 == *(_DWORD *)(a2 + 16))
          {
            v91 = (__int128 *)WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v101);
            v90 = *(unsigned int *)(a2 + 20);
            v92 = *(_QWORD *)(a2 + 8);
            v93 = *v91;
          }
          else
          {
            v92 = *v89;
            v93 = v101;
          }
          *(_OWORD *)(v92 + 16 * v90) = v93;
          ++*(_DWORD *)(a2 + 20);
          goto LABEL_41;
        }
        goto LABEL_42;
      case 3u:
        v55 = (uint64_t *)(a2 + 24);
        *(_QWORD *)&v101 = a3;
        BYTE8(v101) = v11;
        BYTE9(v101) = v7;
        v56 = *(unsigned int *)(a2 + 36);
        if ((_DWORD)v56 == *(_DWORD *)(a2 + 32))
        {
          v57 = (__int128 *)WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, v56 + 1, (unint64_t)&v101);
          v56 = *(unsigned int *)(a2 + 36);
          v58 = *(_QWORD *)(a2 + 24);
          v59 = *v57;
        }
        else
        {
          v58 = *v55;
          v59 = v101;
        }
        *(_OWORD *)(v58 + 16 * v56) = v59;
        ++*(_DWORD *)(a2 + 36);
        goto LABEL_41;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
        v16 = (uint64_t *)(a1 + 16);
        v15 = *(_QWORD *)(a1 + 16);
        v17 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 32);
        if (v15
          || (WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(a1 + 16), 8u, 0), (v15 = *v16) != 0))
        {
          v18 = *(_DWORD *)(v15 - 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = 0;
        v20 = (uint64_t *)(a1 + 24);
        v21 = *(WTF::StringImpl **)(v17 + 40);
        v22 = *((_DWORD *)v21 + 4) >> 8;
        v23 = 1;
        while (2)
        {
          v24 = v22 & v18;
          v25 = (WTF::StringImpl **)(v15 + 8 * v24);
          v26 = *v25;
          if (!*v25)
          {
            if (v19)
            {
              *v19 = 0;
              --*(_DWORD *)(*v16 - 16);
              v21 = *(WTF::StringImpl **)(v17 + 40);
              v25 = v19;
            }
            if (v21)
              *(_DWORD *)v21 += 2;
            *v25 = v21;
            v27 = *v16;
            if (*v16)
              v28 = *(_DWORD *)(v27 - 12) + 1;
            else
              v28 = 1;
            *(_DWORD *)(v27 - 12) = v28;
            v29 = *v16;
            if (*v16)
              v30 = *(_DWORD *)(v29 - 12);
            else
              v30 = 0;
            v31 = (*(_DWORD *)(v29 - 16) + v30);
            v32 = *(unsigned int *)(v29 - 4);
            if (v32 > 0x400)
            {
              if (v32 > 2 * v31)
                break;
            }
            else
            {
              if (3 * v32 > 4 * v31)
                break;
              if (!(_DWORD)v32)
              {
                v84 = 8;
LABEL_141:
                WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(v16, v84, v25);
                break;
              }
            }
            v84 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
            goto LABEL_141;
          }
          if (v26 == (WTF::StringImpl *)-1 || (v25 = v19, v26 != v21))
          {
            v22 = v23 + v24;
            ++v23;
            v19 = v25;
            continue;
          }
          break;
        }
        v33 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 32);
        v34 = *v20;
        if (*v20
          || (WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(a1 + 24), 8u, 0), (v34 = *v20) != 0))
        {
          v35 = *(_DWORD *)(v34 - 8);
        }
        else
        {
          v35 = 0;
        }
        v36 = 0;
        v37 = *(WTF::StringImpl **)(v33 + 24);
        v38 = *((_DWORD *)v37 + 4) >> 8;
        for (i = 1; ; ++i)
        {
          v40 = v38 & v35;
          v41 = (WTF::StringImpl **)(v34 + 8 * v40);
          v42 = *v41;
          if (!*v41)
            break;
          if (v42 != (WTF::StringImpl *)-1)
          {
            v41 = v36;
            if (v42 == v37)
              goto LABEL_38;
          }
          v38 = i + v40;
          v36 = v41;
        }
        if (v36)
        {
          *v36 = 0;
          --*(_DWORD *)(*v20 - 16);
          v37 = *(WTF::StringImpl **)(v33 + 24);
          v41 = v36;
        }
        if (v37)
          *(_DWORD *)v37 += 2;
        *v41 = v37;
        v43 = *v20;
        if (*v20)
          v44 = *(_DWORD *)(v43 - 12) + 1;
        else
          v44 = 1;
        *(_DWORD *)(v43 - 12) = v44;
        v45 = *v20;
        if (*v20)
          v46 = *(_DWORD *)(v45 - 12);
        else
          v46 = 0;
        v47 = (*(_DWORD *)(v45 - 16) + v46);
        v48 = *(unsigned int *)(v45 - 4);
        if (v48 > 0x400)
        {
          if (v48 <= 2 * v47)
            goto LABEL_142;
        }
        else if (3 * v48 <= 4 * v47)
        {
          if ((_DWORD)v48)
LABEL_142:
            v85 = (_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48));
          else
            v85 = 8;
          WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(v20, v85, v41);
        }
LABEL_38:
        *(_QWORD *)&v101 = a3;
        BYTE8(v101) = v11;
        v7 = a5;
        BYTE9(v101) = a5;
        v49 = *(unsigned int *)(a2 + 52);
        if ((_DWORD)v49 == *(_DWORD *)(a2 + 48))
        {
          v50 = (__int128 *)WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 40, v49 + 1, (unint64_t)&v101);
          v49 = *(unsigned int *)(a2 + 52);
          v51 = *(_QWORD *)(a2 + 40);
          v52 = *v50;
        }
        else
        {
          v51 = *(_QWORD *)(a2 + 40);
          v52 = v101;
        }
        *(_OWORD *)(v51 + 16 * v49) = v52;
        ++*(_DWORD *)(a2 + 52);
LABEL_41:
        v14 = a6;
LABEL_42:
        v53 = *a3;
        if (!*(_BYTE *)a2
          && ((*a3 & 0xF) - 3 < 2
           || (*a3 & 0x1F0) == 0x80
           && (v53 >> 9) <= 0x38u
           && ((1 << (v53 >> 9)) & 0x1F8300019000000) != 0))
        {
          *(_BYTE *)a2 = 1;
          LODWORD(v53) = *a3;
        }
        if ((v53 & 0x100000) != 0)
        {
          v62 = *(WebCore::Style ***)(*((_QWORD *)a3 + 1) + 56);
          if (v62)
          {
            v72 = *v62;
            if (*v62)
            {
              v98 = ((v53 & 0x1FFF0) == 25728) ^ v7;
              if (v11 == 2)
                v82 = 9;
              else
                v82 = 5;
              if (v11 == 1)
                v83 = 8;
              else
                v83 = v82;
              while (1)
              {
                v66 = *a3;
                v67 = (*a3 >> 4) & 0x1F;
                if (v67 != 8)
                  break;
                v68 = (v66 >> 9);
                HasPseudoClassMatchElement = v83;
                if ((v68 - 51) >= 2)
                {
                  if (v68 == 36)
                    goto LABEL_167;
                  if (v68 == 34)
                  {
                    if ((_BYTE)v11)
                      HasPseudoClassMatchElement = 15;
                    else
                      HasPseudoClassMatchElement = WebCore::Style::computeHasPseudoClassMatchElement(v72, (const WebCore::CSSSelector *)a2);
                    v7 = a5;
                    goto LABEL_87;
                  }
LABEL_86:
                  HasPseudoClassMatchElement = v11;
                }
LABEL_87:
                v70 = WebCore::Style::RuleFeatureSet::recursivelyCollectFeaturesFromSelector(a1, a2, v72, HasPseudoClassMatchElement, v98, v14);
                if ((*a3 & 0x1FFF0) == 0x4480)
                {
                  *(_QWORD *)&v101 = v72;
                  BYTE8(v101) = HasPseudoClassMatchElement;
                  BYTE9(v101) = v7;
                  v96 = v70;
                  BYTE10(v101) = v70;
                  v97 = *(unsigned int *)(a2 + 84);
                  if ((_DWORD)v97 == *(_DWORD *)(a2 + 80))
                  {
                    WTF::Vector<std::optional<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<unsigned long>>(a2 + 72, (unint64_t)&v101);
                  }
                  else
                  {
                    *(_OWORD *)(*(_QWORD *)(a2 + 72) + 16 * v97) = v101;
                    ++*(_DWORD *)(a2 + 84);
                  }
                  v70 = v96;
                  v7 = a5;
                }
                if (v70)
                  v12 = 1;
                else
                  v12 = v12;
                do
                {
                  v73 = *(_DWORD *)v72;
                  v72 = (WebCore::Style *)((char *)v72 + 16);
                  v71 = v73;
                }
                while ((v73 & 0x80000) == 0);
                if ((v71 & 0x20000) != 0)
                {
                  LODWORD(v53) = *a3;
                  goto LABEL_46;
                }
              }
              v94 = v66 & 0x1FE00;
              if (v67 == 9 && v94 == 9728)
              {
LABEL_167:
                HasPseudoClassMatchElement = 17;
                goto LABEL_87;
              }
              goto LABEL_86;
            }
          }
        }
LABEL_46:
        if ((v53 & 0x80000) == 0)
        {
          a3 += 4;
          v54 = v53 & 0xF;
          if ((v11 - 10) > 6u)
          {
            if (v11 <= 0x12u && ((1 << v11) & 0x60039) != 0)
            {
              v60 = v54 - 1;
              a4 = 1;
              v61 = 2;
              v10 = v12;
              switch(v60)
              {
                case 0:
                  goto LABEL_58;
                case 1:
                  continue;
                case 2:
                  if ((_BYTE)v11)
                    v86 = 4;
                  else
                    v86 = 3;
                  if (v11 == 5)
                    a4 = 5;
                  else
                    a4 = v86;
                  v10 = v12;
                  continue;
                case 3:
                  a4 = 4;
                  v10 = v12;
                  if (v11 == 5)
                  {
                    a4 = 5;
                    v10 = v12;
                  }
                  continue;
                case 4:
                case 5:
                  a4 = 17;
                  v10 = v12;
                  continue;
                case 6:
                  goto LABEL_170;
                default:
                  goto LABEL_49;
              }
            }
            v75 = v54 - 1;
            a4 = 17;
            v61 = 2;
            v10 = v12;
            switch(v75)
            {
              case 0:
              case 1:
                goto LABEL_58;
              case 2:
              case 3:
                if (v11 == 1)
                  a4 = 6;
                else
                  a4 = 7;
                v10 = v12;
                continue;
              case 4:
              case 5:
                continue;
              case 6:
LABEL_170:
                a4 = 18;
                v10 = v12;
                continue;
              default:
                goto LABEL_49;
            }
          }
          if ((_DWORD)a6)
          {
            if ((v54 - 1) >= 2)
            {
              if ((v54 - 3) > 1)
                goto LABEL_49;
              v10 = 1;
              a4 = 14;
              v61 = v11;
              switch((char)v11)
              {
                case 10:
                case 11:
                case 13:
                  goto LABEL_58;
                case 12:
                  continue;
                case 14:
                case 16:
                  goto LABEL_98;
                case 15:
                  goto LABEL_145;
                default:
                  goto LABEL_3;
              }
              goto LABEL_3;
            }
            v10 = 1;
LABEL_145:
            a4 = 16;
          }
          else
          {
LABEL_49:
            if (v11 < 0xEu)
              goto LABEL_57;
            if (v11 > 0x12u)
              goto LABEL_3;
            if (((1 << v11) & 0x68000) == 0)
            {
              if (((1 << v11) & 0x14000) != 0)
LABEL_98:
                v12 = 1;
              goto LABEL_3;
            }
LABEL_57:
            v61 = v11;
LABEL_58:
            a4 = v61;
            v10 = v12;
          }
          continue;
        }
        return v12 & 1;
      case 8u:
        v63 = (v13 >> 9);
        if (((v63 - 34) > 0x30 || ((1 << (v63 - 34)) & 0x1000000010101) == 0)
          && v63 != 6)
        {
          v77 = (uint64_t *)(a2 + 56);
          *(_QWORD *)&v101 = a3;
          BYTE8(v101) = v11;
          BYTE9(v101) = v7;
          v78 = *(unsigned int *)(a2 + 68);
          if ((_DWORD)v78 == *(_DWORD *)(a2 + 64))
          {
            v79 = (__int128 *)WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v78 + 1, (unint64_t)&v101);
            v78 = *(unsigned int *)(a2 + 68);
            v80 = *(_QWORD *)(a2 + 56);
            v81 = *v79;
          }
          else
          {
            v80 = *v77;
            v81 = v101;
          }
          *(_OWORD *)(v80 + 16 * v78) = v81;
          ++*(_DWORD *)(a2 + 68);
          goto LABEL_41;
        }
        v14 = a6;
        if ((v11 - 10) <= 6u)
          v14 = 1;
        goto LABEL_42;
      case 9u:
        v76 = (v13 >> 9);
        if (v76 == 12)
        {
          *(_BYTE *)(a1 + 180) = 1;
        }
        else
        {
          v14 = a6;
          if (v76 != 13)
            goto LABEL_42;
          *(_BYTE *)(a1 + 179) = 1;
        }
        goto LABEL_41;
      default:
        goto LABEL_42;
    }
  }
}

WTF::StringImpl *WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  int v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(a1, 8u, 0), (v6 = *a1) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *(WTF::StringImpl **)a2;
  v11 = 1;
  v12 = (*(_DWORD *)(*(_QWORD *)a2 + 16) >> 8) & v8;
  v13 = (WTF::StringImpl **)(v6 + 8 * v12);
  result = *v13;
  if (!*v13)
  {
LABEL_4:
    if (v9)
    {
      result = 0;
      *v9 = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = *(WTF::StringImpl **)a2;
      v13 = v9;
    }
    if (v10)
      *(_DWORD *)v10 += 2;
    *v13 = v10;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    if (*a1)
    {
      ++*(_DWORD *)(*a1 - 12);
      v15 = *a1;
      if (*a1)
      {
LABEL_13:
        v16 = *(_DWORD *)(v15 - 12);
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v15 = *a1;
      if (*a1)
        goto LABEL_13;
    }
    v16 = 0;
LABEL_14:
    v17 = (*(_DWORD *)(v15 - 16) + v16);
    v18 = *(unsigned int *)(v15 - 4);
    if (v18 > 0x400)
    {
      if (v18 > 2 * v17)
        goto LABEL_16;
    }
    else
    {
      if (3 * v18 > 4 * v17)
      {
LABEL_16:
        v19 = v15 + 8 * v18;
        v20 = 1;
        goto LABEL_17;
      }
      if (!(_DWORD)v18)
      {
        v23 = 8;
        goto LABEL_37;
      }
    }
    v23 = (_DWORD)v18 << (6 * *(_DWORD *)(v15 - 12) >= (2 * v18));
LABEL_37:
    result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v23, v13);
    v13 = (WTF::StringImpl **)result;
    v15 = *a1;
    if (*a1)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_16;
  }
  while (1)
  {
    if (result == (WTF::StringImpl *)-1)
    {
      v9 = v13;
      goto LABEL_20;
    }
    if (result == v10)
      break;
LABEL_20:
    v21 = v11 + v12;
    ++v11;
    v12 = v21 & v8;
    v13 = (WTF::StringImpl **)(v6 + 8 * v12);
    result = *v13;
    if (!*v13)
      goto LABEL_4;
  }
  if ((v7 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v6 - 4);
  v20 = 0;
  v19 = v6 + 8 * v22;
LABEL_17:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v20;
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = 16 * v10;
      v14 = v5;
      do
      {
        v15 = *(_OWORD *)v14;
        v14 = (WTF *)((char *)v14 + 16);
        *v11++ = v15;
        v13 -= 16;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::SelectorFilter::collectSimpleSelectorHash(uint64_t result, WTF::StringImpl *a2)
{
  unsigned int v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  int *v6;
  unsigned int v7;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;

  v2 = *(_DWORD *)a2;
  switch((*(_DWORD *)a2 >> 4) & 0x1F)
  {
    case 1:
      v13 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 40);
      if (v13 != WebCore::starAtomData)
      {
        v14 = 13 * (*(_DWORD *)(v13 + 16) >> 8);
        v24 = v14;
        v15 = *(unsigned int *)(result + 108);
        if ((_DWORD)v15 == *(_DWORD *)(result + 104))
        {
          result += 96;
          goto LABEL_42;
        }
        *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v15) = v14;
        ++*(_DWORD *)(result + 108);
      }
      break;
    case 2:
      if ((v2 & 0x100000) != 0)
        v19 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      else
        v19 = a2;
      v20 = *((_QWORD *)v19 + 1);
      if (v20 && *(_DWORD *)(v20 + 4))
      {
        v21 = 17 * (*(_DWORD *)(v20 + 16) >> 8);
        v24 = v21;
        v22 = *(unsigned int *)(result + 12);
        if ((_DWORD)v22 == *(_DWORD *)(result + 8))
          goto LABEL_42;
        *(_DWORD *)(*(_QWORD *)result + 4 * v22) = v21;
        ++*(_DWORD *)(result + 12);
      }
      break;
    case 3:
      if ((v2 & 0x100000) != 0)
        v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      else
        v3 = a2;
      v4 = *((_QWORD *)v3 + 1);
      if (v4 && *(_DWORD *)(v4 + 4))
      {
        v11 = 19 * (*(_DWORD *)(v4 + 16) >> 8);
        v24 = v11;
        v12 = *(unsigned int *)(result + 60);
        if ((_DWORD)v12 == *(_DWORD *)(result + 56))
        {
          result += 48;
LABEL_42:
          result = (uint64_t)WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>(result, (unint64_t)&v24);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(result + 48) + 4 * v12) = v11;
          ++*(_DWORD *)(result + 60);
        }
      }
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 0xA:
    case 0xB:
    case 0xC:
      v16 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 40);
      if (v16)
        *(_DWORD *)v16 += 2;
      if (*(WTF::StringImpl **)(WebCore::HTMLNames::classAttr + 24) == v16
        || *(WTF::StringImpl **)(WebCore::HTMLNames::idAttr + 24) == v16
        || *(WTF::StringImpl **)(WebCore::HTMLNames::styleAttr + 24) == v16)
      {
        if (!v16)
          return result;
      }
      else
      {
        v17 = 23 * (*((_DWORD *)v16 + 4) >> 8);
        v24 = v17;
        v18 = *(unsigned int *)(result + 156);
        if ((_DWORD)v18 == *(_DWORD *)(result + 152))
        {
          v23 = v16;
          result = (uint64_t)WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>(result + 144, (unint64_t)&v24);
          v16 = v23;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(result + 144) + 4 * v18) = v17;
          ++*(_DWORD *)(result + 156);
        }
      }
      if (*(_DWORD *)v16 == 2)
        result = WTF::StringImpl::destroy(v16, a2);
      else
        *(_DWORD *)v16 -= 2;
      break;
    case 8:
      v5 = (v2 >> 9);
      if (v5 == 42 || v5 == 82)
      {
        v6 = **(int ***)(*((_QWORD *)a2 + 1) + 56);
        if (v6)
        {
          v7 = *v6;
          if ((*v6 & 0x20000) != 0)
            goto LABEL_14;
          v8 = (unsigned int *)(v6 + 4);
          v9 = 1;
          do
          {
            v9 += (v7 >> 19) & 1;
            v10 = *v8;
            v8 += 4;
            v7 = v10;
          }
          while ((v10 & 0x20000) == 0);
          if (v9 == 1)
LABEL_14:
            result = WebCore::SelectorFilter::collectSelectorHashes(result, v6, 1);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 32 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 2)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 1;
    goto LABEL_12;
  }
  if (!(v9 >> 27))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(32 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 32 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF *v25;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  WTF *v36;
  WTF::StringImpl *v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  _DWORD *v43;
  WTF *v44;
  WTF::StringImpl **result;
  uint64_t v48;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v48 = v6;
    do
    {
      v12 = (WTF::StringImpl **)(v5 + 16 * v10);
      v13 = *v12;
      if (*v12)
      {
        if (v13 != (WTF::StringImpl *)-1)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = *((_DWORD *)v13 + 4) >> 8;
          do
          {
            v18 = v17 & v15;
            v17 = ++v16 + v18;
          }
          while (*(_QWORD *)(v14 + 16 * v18));
          v19 = (WTF::StringImpl **)(v14 + 16 * v18);
          v20 = v19[1];
          v19[1] = 0;
          if (v20)
          {
            v21 = *((unsigned int *)v20 + 3);
            if ((_DWORD)v21)
            {
              v22 = *(WTF **)v20;
              v23 = 32 * v21;
              do
              {
                v24 = *(_DWORD **)v22;
                *(_QWORD *)v22 = 0;
                if (v24)
                {
                  if (*v24 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v24, v9);
                  else
                    --*v24;
                }
                v22 = (WTF *)((char *)v22 + 32);
                v23 -= 32;
              }
              while (v23);
            }
            v25 = *(WTF **)v20;
            if ((WTF *)((char *)v20 + 16) != *(WTF **)v20 && v25 != 0)
            {
              *(_QWORD *)v20 = 0;
              *((_DWORD *)v20 + 2) = 0;
              WTF::fastFree(v25, v9);
            }
            WTF::fastFree(v20, v9);
            v27 = *v19;
            *v19 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v9);
              else
                *(_DWORD *)v27 -= 2;
            }
          }
          else
          {
            *v19 = 0;
          }
          v28 = *v12;
          *v12 = 0;
          *v19 = v28;
          v29 = v5 + 16 * v10;
          v30 = *(WTF::StringImpl **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          v19[1] = v30;
          v31 = *(WTF **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            v32 = *((unsigned int *)v31 + 3);
            if ((_DWORD)v32)
            {
              v33 = *(WTF **)v31;
              v34 = 32 * v32;
              do
              {
                v35 = *(_DWORD **)v33;
                *(_QWORD *)v33 = 0;
                if (v35)
                {
                  if (*v35 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v35, v9);
                  else
                    --*v35;
                }
                v33 = (WTF *)((char *)v33 + 32);
                v34 -= 32;
              }
              while (v34);
            }
            v36 = *(WTF **)v31;
            if ((WTF *)((char *)v31 + 16) != *(WTF **)v31 && v36 != 0)
            {
              *(_QWORD *)v31 = 0;
              *((_DWORD *)v31 + 2) = 0;
              WTF::fastFree(v36, v9);
            }
            WTF::fastFree(v31, v9);
          }
          v38 = *v12;
          *v12 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v9);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (v12 == a3)
            v11 = v19;
        }
      }
      else
      {
        v39 = v12[1];
        v12[1] = 0;
        if (v39)
        {
          v40 = *((unsigned int *)v39 + 3);
          if ((_DWORD)v40)
          {
            v41 = *(WTF **)v39;
            v42 = 32 * v40;
            do
            {
              v43 = *(_DWORD **)v41;
              *(_QWORD *)v41 = 0;
              if (v43)
              {
                if (*v43 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v43, v9);
                else
                  --*v43;
              }
              v41 = (WTF *)((char *)v41 + 32);
              v42 -= 32;
            }
            while (v42);
          }
          v44 = *(WTF **)v39;
          if ((WTF *)((char *)v39 + 16) != *(WTF **)v39 && v44 != 0)
          {
            *(_QWORD *)v39 = 0;
            *((_DWORD *)v39 + 2) = 0;
            WTF::fastFree(v44, v9);
          }
          WTF::fastFree(v39, v9);
          v13 = *v12;
        }
        *v12 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v9);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      ++v10;
    }
    while (v10 != v48);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **result;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v14 = (WTF::StringImpl **)(v6 + 8 * v11);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != (WTF::StringImpl *)-1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = *((_DWORD *)v15 + 4) >> 8;
          do
          {
            v20 = v19 & v17;
            v19 = ++v18 + v20;
          }
          while (*(_QWORD *)(v16 + 8 * v20));
          v21 = (WTF::StringImpl **)(v16 + 8 * v20);
          *v21 = 0;
          v22 = *v14;
          *v14 = 0;
          *v21 = v22;
          v23 = *v14;
          *v14 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v14 == a3)
            v12 = v21;
        }
      }
      else
      {
        *v14 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

BOOL WebCore::Style::propertyAllowlistForPseudoId(int a1)
{
  return a1 == 5;
}

__n128 WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleData&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  __n128 result;

  v3 = WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD **)v3;
  if (*(_QWORD *)v3)
    ++*v6;
  v7 = v5 + 32 * v4;
  *(_QWORD *)v7 = v6;
  result = *(__n128 *)(v3 + 8);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v3 + 24);
  *(__n128 *)(v7 + 8) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_QWORD *)(a2 + 8) >= 2uLL)
  {
    v3 = result;
    WTF::AtomStringImpl::add();
    result = v3;
    v2 = v4;
  }
  else
  {
    v2 = *MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  *result = v2;
  return result;
}

void JSC::SourceProvider::cachedBytecode(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

float32x2_t WebCore::FloatSize::FloatSize(float32x2_t *this, float64x2_t *a2)
{
  float32x2_t result;

  result = vcvt_f32_f64(*a2);
  *this = result;
  return result;
}

{
  float32x2_t result;

  result = vcvt_f32_f64(*a2);
  *this = result;
  return result;
}

uint64_t WebCore::DisplayList::Restore::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
}

uint64_t WebCore::DisplayList::Save::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
}

_QWORD *WebCore::Region::Region(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

_QWORD *WebCore::DestinationColorSpace::DestinationColorSpace(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

double WebCore::EventRegion::EventRegion(WebCore::EventRegion *this)
{
  double result;

  *((_BYTE *)this + 112) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 73) = 0u;
  return result;
}

{
  double result;

  *((_BYTE *)this + 112) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 73) = 0u;
  return result;
}

uint64_t WebCore::PlatformCALayerClient::platformCALayerDelegatesDisplay()
{
  return 0;
}

float32x4_t WebCore::FloatRect::scale(float32x4_t *this, double a2, float a3)
{
  float32x4_t result;

  *((float *)&a2 + 1) = a3;
  result = vmulq_f32(*this, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  *this = result;
  return result;
}

BOOL `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerDelegatesDisplay(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 192) && *(_QWORD *)(a1 + 56) == a2;
}

_QWORD *WebCore::Color::Color(_QWORD *this, const WebCore::Color *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)a2;
  *this = *(_QWORD *)a2;
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)a2;
  *this = *(_QWORD *)a2;
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

WebCore::MutableCSSSelector *WebCore::CSSSelectorParser::consumeComplexSelector(WebCore::CSSSelectorParser *this, WebCore::CSSParserTokenRange *a2, __int128 **a3, WTF::AtomString *a4)
{
  WebCore::MutableCSSSelector *result;
  WTF::AtomString *v8;
  WebCore::MutableCSSSelector *v9;
  WebCore::MutableCSSSelector *v10;
  int v11;
  _BOOL4 v12;
  BOOL v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  int v18;
  void *v19;
  WebCore::MutableCSSSelector *v20;
  int v21;
  unsigned int *v22;
  WebCore::MutableCSSSelector *v23;
  unsigned int v24;
  BOOL v26;
  WebCore::MutableCSSSelector *v27;
  WTF *v28;
  void *v29;
  int v30;
  int v31;
  __int128 *v32;
  __int128 *v33;
  int v34;
  __int128 *v35;
  __int128 *v36;
  char v37;
  unsigned int v38;
  int v39;
  WebCore::MutableCSSSelector *v40;
  WTF *v41;
  void *v42;
  BOOL v45;
  WTF *v47;
  void *v48;
  WebCore::MutableCSSSelector *v49;
  WebCore::MutableCSSSelector *v50;

  result = WebCore::CSSSelectorParser::consumeCompoundSelector((WebCore::CSSSelectorParser *)&v50, a2, (uint64_t)a3, a4);
  v9 = v50;
  if (v50)
  {
    v10 = v50;
    do
    {
      v11 = **(_DWORD **)v10;
      v12 = (v11 & 0x1F0) == 0x90 && ((v11 & 0x1FE00) != 0x3400 || *(_BYTE *)a2 != 4);
      v10 = (WebCore::MutableCSSSelector *)*((_QWORD *)v10 + 1);
      if (v10)
        v13 = !v12;
      else
        v13 = 0;
    }
    while (v13);
    while (1)
    {
      v15 = *a3;
      v14 = a3[1];
      if (*a3 >= v14)
      {
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v15 = *a3;
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      else
      {
        v16 = *a3;
      }
      v17 = *(_DWORD *)v16 & 0x3F;
      if (v17 == 16)
      {
        if (v15 != v14)
        {
          *a3 = (__int128 *)((char *)v15 + 24);
          goto LABEL_34;
        }
        v30 = 1;
        {
LABEL_95:
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          goto LABEL_34;
        }
        while (1)
        {
LABEL_34:
          v15 = *a3;
          v31 = (*a3 >= v14) | v30;
          if (*a3 >= v14)
            v32 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          else
            v32 = *a3;
          if (*a3 >= v14 && (v30 & 1) == 0)
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v31 = 1;
            v15 = *a3;
            v32 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          if ((*(_DWORD *)v32 & 0x3F) != 0x10)
            break;
          if (v15 == v14)
          {
            v30 = 1;
            if ((v31 & 1) == 0)
              goto LABEL_95;
          }
          else
          {
            *a3 = (__int128 *)((char *)v15 + 24);
            v30 = v31;
          }
        }
      }
      if (v15 >= v14)
      {
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v15 & 0x3F) != 6)
        goto LABEL_104;
      v33 = *a3;
      if (*a3 >= v14)
      {
        v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      v34 = *((unsigned __int16 *)v33 + 8);
      if (v34 == 43 || v34 == 126 || v34 == 62)
      {
        v35 = *a3;
        if (*a3 == v14)
        {
          v37 = 1;
          {
            v36 = v14;
          }
          else
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v36 = *a3;
          }
        }
        else
        {
          v36 = (__int128 *)((char *)v35 + 24);
          *a3 = (__int128 *)((char *)v35 + 24);
        }
        while (1)
        {
          if (v36 < v14 || (v37 & 1) != 0)
          {
            if (v36 >= v14)
              v36 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v38 = *(_DWORD *)v36;
          }
          else
          {
            v38 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v38;
            v37 = 1;
          }
          if ((v38 & 0x3F) != 0x10)
            break;
          v36 = (__int128 *)((char *)*a3 + 24);
          *a3 = v36;
        }
        v39 = v34 == 126 ? 4 : 2;
        v18 = v34 == 43 ? 3 : v39;
      }
      else
      {
LABEL_104:
        if (v17 != 16)
          goto LABEL_64;
        v18 = 1;
      }
      result = WebCore::CSSSelectorParser::consumeCompoundSelector((WebCore::CSSSelectorParser *)&v49, a2, (uint64_t)a3, v8);
      v20 = v49;
      if (!v49)
        break;
      if (v12)
      {
        *(_QWORD *)this = 0;
        WebCore::MutableCSSSelector::~MutableCSSSelector(v20, v19);
        WTF::fastFree(v47, v48);
LABEL_70:
        WebCore::MutableCSSSelector::~MutableCSSSelector(v9, v19);
        return (WebCore::MutableCSSSelector *)WTF::fastFree(v41, v42);
      }
      v21 = *(unsigned __int8 *)a2;
      v22 = *(unsigned int **)v49;
      v23 = (WebCore::MutableCSSSelector *)*((_QWORD *)v49 + 1);
      v24 = **(_DWORD **)v49;
      v26 = v21 != 4 || (v24 & 0x1FE00) != 13312;
      LOBYTE(v12) = (**(_DWORD **)v49 & 0x1F0) == 0x90 && v26;
      if (v23)
      {
        do
        {
          v27 = v23;
          v22 = *(unsigned int **)v23;
          v23 = (WebCore::MutableCSSSelector *)*((_QWORD *)v23 + 1);
          v24 = *v22;
          v45 = (v21 != 4 || (*v22 & 0x1FE00) != 13312) && (*v22 & 0x1F0) == 144;
          LOBYTE(v12) = v12 || v45;
        }
        while (v23);
      }
      else
      {
        v27 = v49;
      }
      *v22 = v24 & 0xFFFFFFF0 | v18;
      result = (WebCore::MutableCSSSelector *)*((_QWORD *)v27 + 1);
      *((_QWORD *)v27 + 1) = v9;
      if (result)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(result, v19);
        result = (WebCore::MutableCSSSelector *)WTF::fastFree(v28, v29);
      }
      v50 = v20;
      v9 = v20;
    }
    if (v18 == 1)
      v40 = v9;
    else
      v40 = 0;
    *(_QWORD *)this = v40;
    if (v18 != 1)
      goto LABEL_70;
  }
  else
  {
LABEL_64:
    *(_QWORD *)this = v9;
  }
  return result;
}

uint64_t WebCore::CSSSelectorParser::consumeCombinator(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v7;
  __int128 *v8;
  unsigned int v9;
  uint64_t v10;
  __int128 *v11;
  int v12;
  __int128 *v13;
  __int128 *v14;
  char v15;
  unsigned int v16;

  v3 = *this;
  v2 = this[1];
  if (*this >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v3 = *this;
    }
  }
  else
  {
    v4 = *this;
  }
  if ((*(_DWORD *)v4 & 0x3F) == 0x10)
  {
    if (v3 == v2)
    {
      v7 = 1;
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      }
    }
    else
    {
      *this = (__int128 *)((char *)v3 + 24);
    }
    while (1)
    {
      v3 = *this;
      if (*this < v2 || (v7 & 1) != 0)
      {
        v8 = v3 >= v2 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : *this;
        v9 = *(_DWORD *)v8;
        v10 = v7;
      }
      else
      {
        v9 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
        v10 = 1;
        v3 = *this;
      }
      if ((v9 & 0x3F) != 0x10)
        break;
      if (v3 == v2)
      {
        v7 = 1;
        if ((v10 & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      else
      {
        *this = (__int128 *)((char *)v3 + 24);
        v7 = v10;
      }
    }
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (v3 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v3 & 0x3F) == 6)
  {
    v11 = *this;
    if (*this >= v2)
    {
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v12 = *((unsigned __int16 *)v11 + 8);
    if (v12 == 43 || v12 == 126 || v12 == 62)
    {
      v13 = *this;
      if (*this == v2)
      {
        v15 = 1;
        {
          v14 = v2;
        }
        else
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v14 = *this;
        }
      }
      else
      {
        v14 = (__int128 *)((char *)v13 + 24);
        *this = (__int128 *)((char *)v13 + 24);
      }
      while (1)
      {
        if (v14 < v2 || (v15 & 1) != 0)
        {
          if (v14 >= v2)
            v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v16 = *(_DWORD *)v14;
        }
        else
        {
          v16 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
          v15 = 1;
        }
        if ((v16 & 0x3F) != 0x10)
          break;
        v14 = (__int128 *)((char *)*this + 24);
        *this = v14;
      }
      if (v12 == 126)
        LODWORD(v5) = 4;
      else
        LODWORD(v5) = 2;
      if (v12 == 43)
        return 3;
      else
        return v5;
    }
  }
  return v5;
}

uint64_t WebCore::ScrollView::contentsSize(WebCore::ScrollView *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t PAL::DDScannerResultFunction(PAL *this)
{
  return qword_1ECE7E2A0;
}

double WebCore::FloatRect::operator CGRect(uint64_t a1)
{
  return *(float *)a1;
}

double WebCore::FloatPoint::operator CGPoint(uint64_t a1)
{
  return *(float *)a1;
}

void WebCore::IOSurface::~IOSurface(WebCore::IOSurface *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    CFRelease(v2);
  WTF::MachSendRight::~MachSendRight((WebCore::IOSurface *)((char *)this + 40));
  if (*((_BYTE *)this + 16))
  {
    v3 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
      CFRelease(v3);
  }
}

{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    CFRelease(v2);
  WTF::MachSendRight::~MachSendRight((WebCore::IOSurface *)((char *)this + 40));
  if (*((_BYTE *)this + 16))
  {
    v3 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
      CFRelease(v3);
  }
}

uint64_t WebCore::CrossOriginAccessControlCheckDisabler::crossOriginAccessControlCheckEnabled(WebCore::CrossOriginAccessControlCheckDisabler *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t WebCore::operator==()
{
  return CGColorSpaceEqualToColorSpace();
}

uint64_t WebCore::ScrollView::fixedLayoutSize(WebCore::ScrollView *this)
{
  return *((_QWORD *)this + 31);
}

uint64_t WebCore::DisplayList::Clip::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 456))(a2, a1);
}

uint64_t WebCore::FrameLoader::frame(WebCore::FrameLoader *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8);
}

uint64_t WebCore::FrameLoader::frameID(WebCore::FrameLoader *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 32);
}

uint64_t WebCore::Page::setInitialScaleIgnoringContentSize(uint64_t this, float a2)
{
  *(float *)(this + 460) = a2;
  return this;
}

uint64_t WebCore::SecurityOrigin::toRawString@<X0>(WebCore::SecurityOrigin *this@<X0>, _QWORD *a2@<X8>)
{
  return WebCore::SecurityOriginData::toString((WebCore::SecurityOrigin *)((char *)this + 8), a2);
}

unint64_t WebCore::consumeHTMLEntity(uint64_t a1, int a2)
{
  void *v2;
  unint64_t v3;
  WTF *v4;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  _BYTE v10[128];

  v7 = a1;
  v8 = (WTF *)v10;
  v9 = 64;
  v3 = WebCore::consumeHTMLEntity<WebCore::SegmentedStringSource>((WebCore::SegmentedStringSource *)&v7, a2);
  v4 = v8;
  if (v10 != (_BYTE *)v8 && v8 != 0)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v4, v2);
  }
  return v3;
}

unint64_t WebCore::consumeHTMLEntity<WebCore::SegmentedStringSource>(WebCore::SegmentedStringSource *this, int a2)
{
  int v3;
  unint64_t v4;
  __int16 v5;
  unint64_t v6;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  if (!*(_DWORD *)(*(_QWORD *)this + 12))
    goto LABEL_18;
  v3 = *(unsigned __int16 *)(*(_QWORD *)this + 66);
  if ((v3 | 0x20u) - 97 > 0x19)
  {
    if (v3 != 35)
    {
LABEL_20:
      v6 = 0;
      v5 = 0;
      LOBYTE(v4) = 0;
      return (unsigned __int16)v5 & 0xFF00 | v6 | v4;
    }
    WebCore::SegmentedStringSource::advance(this);
    if (*(_DWORD *)(*(_QWORD *)this + 12))
    {
      v8 = *(unsigned __int16 *)(*(_QWORD *)this + 66);
      if ((v8 - 48) <= 9)
      {
        v4 = WebCore::consumeDecimalHTMLEntity<WebCore::SegmentedStringSource>(this);
        goto LABEL_4;
      }
      if ((v8 & 0xFFFFFFDF) != 0x58)
        goto LABEL_19;
      WebCore::SegmentedStringSource::advance(this);
      if (*(_DWORD *)(*(_QWORD *)this + 12))
      {
        v9 = *(unsigned __int16 *)(*(_QWORD *)this + 66);
        v10 = v9 - 48;
        v11 = (v9 | 0x20) - 97;
        if (v10 < 0xA || v11 <= 5)
        {
          v4 = WebCore::consumeHexHTMLEntity<WebCore::SegmentedStringSource>(this);
          goto LABEL_4;
        }
LABEL_19:
        WebCore::SegmentedStringSource::pushEverythingBack(this);
        goto LABEL_20;
      }
    }
    WebCore::SegmentedStringSource::pushEverythingBack(this);
LABEL_18:
    v6 = 0;
    LOBYTE(v4) = 0;
    v5 = 256;
    return (unsigned __int16)v5 & 0xFF00 | v6 | v4;
  }
  v4 = WebCore::consumeNamedHTMLEntity<WebCore::SegmentedStringSource>(this, a2);
LABEL_4:
  v5 = v4 & 0xFF00;
  v6 = v4 & 0xFFFFFFFFFFFF0000;
  return (unsigned __int16)v5 & 0xFF00 | v6 | v4;
}

unint64_t WebCore::consumeNamedHTMLEntity<WebCore::SegmentedStringSource>(WebCore::SegmentedStringSource *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void (*v24)(_QWORD *);
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t *v28;
  void *v29;
  char *v30;
  __int16 v31;

  v27 = 0;
  v28 = 0;
  v29 = &WebCore::staticEntityTable;
  v30 = (char *)&WebCore::staticEntityTable + 26760;
  v4 = (uint64_t)a1 + 8;
  v5 = *(_QWORD *)a1;
  while (1)
  {
    v6 = *(unsigned __int16 *)(v5 + 66);
    WebCore::HTMLEntitySearch::advance(&v27, v6);
    if (!v29)
      break;
    v7 = *(_WORD *)(v5 + 66);
    v31 = v7;
    v8 = *((unsigned int *)a1 + 5);
    if ((_DWORD)v8 == *((_DWORD *)a1 + 4))
    {
      WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t>(v4, (unint64_t)&v31);
      v5 = *(_QWORD *)a1;
    }
    else
    {
      *(_WORD *)(*((_QWORD *)a1 + 1) + 2 * v8) = v7;
      *((_DWORD *)a1 + 5) = v8 + 1;
    }
    if ((*(_BYTE *)(v5 + 80) & 2) != 0)
    {
      v9 = (unsigned __int8 *)(*(_QWORD *)(v5 + 16) + 1);
      *(_QWORD *)(v5 + 16) = v9;
      *(_WORD *)(v5 + 66) = *v9;
      v10 = *(_DWORD *)(v5 + 12) - 1;
      *(_DWORD *)(v5 + 12) = v10;
      if (v10 == 1)
        WebCore::SegmentedString::updateAdvanceFunctionPointersForSingleCharacterSubstring(v5);
    }
    else
    {
      v24 = *(void (**)(_QWORD *))(v5 + 88);
      v25 = *(_QWORD *)(v5 + 96);
      v26 = (_QWORD *)(v5 + (v25 >> 1));
      if ((v25 & 1) != 0)
        v24 = *(void (**)(_QWORD *))(*v26 + v24);
      v24(v26);
    }
    v5 = *(_QWORD *)a1;
    if (!*(_DWORD *)(*(_QWORD *)a1 + 12))
      goto LABEL_9;
  }
  if (*(_DWORD *)(v5 + 12))
    goto LABEL_12;
LABEL_9:
  if (v6 != 59)
  {
    WebCore::SegmentedStringSource::pushEverythingBack(a1);
    v11 = 0;
    v12 = 256;
    return v12 | v11;
  }
LABEL_12:
  v13 = v28;
  if (!v28)
    goto LABEL_36;
  v14 = *((unsigned __int8 *)v28 + 8);
  v15 = ((v14 >> 5) & 1) + (v14 & 0x1F);
  if (v27 != v15)
  {
    WebCore::SegmentedStringSource::pushBackButKeep((unsigned int *)a1, v15);
    v6 = *(unsigned __int16 *)(*(_QWORD *)a1 + 66);
    LOBYTE(v14) = *((_BYTE *)v13 + 8);
  }
  if ((v14 & 0x20) != 0 || !a2 || v6 - 48 >= 0xA && (unsigned __int16)((v6 | 0x20) - 97) >= 0x1Au && v6 != 61)
  {
    v16 = WORD1(*v13) & 0x1F;
    LODWORD(v17) = ((*v13 & 0x1FFFFF) >> 10) + 55232;
    v18 = HIDWORD(*v13) << 16;
    if ((*v13 & 0xFFFF00000000) == 0)
      LODWORD(v18) = 0;
    v19 = 2;
    if ((*v13 & 0xFFFF00000000) != 0)
      v19 = 3;
    v20 = 1;
    v21 = (unsigned __int16)WORD2(*v13);
    if ((*v13 & 0xFFFF00000000) != 0)
      v20 = 2;
    else
      v21 = 0;
    if (v16)
    {
      v22 = *v13 & 0x3FF | 0xDC00;
    }
    else
    {
      LODWORD(v18) = 0;
      LODWORD(v22) = v21;
    }
    if (v16)
    {
      v11 = v19;
    }
    else
    {
      v17 = *v13;
      v11 = v20;
    }
    v12 = ((_DWORD)v17 << 16) | ((unint64_t)(v22 | v18) << 32);
  }
  else
  {
LABEL_36:
    WebCore::SegmentedStringSource::pushEverythingBack(a1);
    v11 = 0;
    v12 = 0;
  }
  return v12 | v11;
}

unsigned int *WebCore::HTMLEntitySearch::advance(unsigned int *result, unsigned int a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  char *v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  char *v10;
  char v11;
  int v12;
  char v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  int v18;
  unsigned __int16 *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char v29;
  unsigned int v30;

  v3 = (unint64_t *)(result + 4);
  v2 = *result;
  if ((_DWORD)v2)
  {
    v5 = (char *)*((_QWORD *)result + 2);
    v4 = *((_QWORD *)result + 3);
    if (v5 != (char *)v4)
    {
      v6 = v5[8];
      v7 = v2 + 1;
      if ((int)v2 + 1 > (v6 & 0x1Fu))
      {
        if ((v5[8] & 0x20) == 0 || v2 > (v6 & 0x1Fu))
        {
          if ((unint64_t)(v5 + 12) < v4)
          {
LABEL_53:
            v10 = (char *)*((_QWORD *)result + 3);
            while (1)
            {
              v27 = (v10 - v5) / 24;
              v28 = &v5[12 * v27];
              v29 = v28[8];
              if (v7 > (v29 & 0x1Fu))
              {
                if ((v28[8] & 0x20) == 0 || v2 > (v29 & 0x1Fu))
                  goto LABEL_57;
                v30 = 59;
              }
              else
              {
                v30 = (unsigned __int16)WebCore::staticEntityStringStorage[v2 + (*(_WORD *)&v5[12 * v27 + 6] & 0x3FFF)];
              }
              if (v30 >= a2)
              {
                v10 = v28;
                v28 = v5;
                goto LABEL_58;
              }
LABEL_57:
              v5 = v28;
LABEL_58:
              if (v28 + 12 >= v10)
                goto LABEL_18;
            }
          }
          goto LABEL_11;
        }
        v8 = 59;
      }
      else
      {
        v8 = (unsigned __int16)WebCore::staticEntityStringStorage[(*((_WORD *)v5 + 3) & 0x3FFF) + v2];
      }
      if (v8 != a2)
      {
        if (v8 < a2 && (unint64_t)(v5 + 12) < v4)
          goto LABEL_53;
LABEL_11:
        *v3 = v4;
LABEL_12:
        *((_QWORD *)result + 3) = v4;
        v10 = (char *)v4;
LABEL_13:
        v11 = v10[8];
        if (v7 > (v11 & 0x1Fu))
        {
          if ((v10[8] & 0x20) == 0 || v2 > (v11 & 0x1Fu))
            goto LABEL_16;
          v12 = 59;
        }
        else
        {
          v12 = (unsigned __int16)WebCore::staticEntityStringStorage[(*((_WORD *)v10 + 3) & 0x3FFF) + v2];
        }
        if (v12 != a2)
        {
LABEL_16:
          *v3 = 0;
          *((_QWORD *)result + 3) = 0;
          return result;
        }
        goto LABEL_30;
      }
    }
    v10 = (char *)*((_QWORD *)result + 2);
LABEL_18:
    *v3 = (unint64_t)v10;
    if (v10 == (char *)v4)
    {
      v7 = v2 + 1;
      goto LABEL_12;
    }
    v13 = *(_BYTE *)(v4 + 8);
    v7 = v2 + 1;
    if ((int)v2 + 1 > (v13 & 0x1Fu))
    {
      if ((*(_BYTE *)(v4 + 8) & 0x20) == 0 || v2 > (v13 & 0x1Fu))
        goto LABEL_27;
      v14 = 59;
    }
    else
    {
      v14 = (unsigned __int16)WebCore::staticEntityStringStorage[(*(_WORD *)(v4 + 6) & 0x3FFF) + v2];
    }
    if (v14 == a2)
    {
      v21 = (char *)v4;
LABEL_29:
      *((_QWORD *)result + 3) = v21;
      if (v10 != v21)
        goto LABEL_30;
      goto LABEL_13;
    }
    if (v14 >= a2 && (unint64_t)(v10 + 12) < v4)
    {
      v21 = v10;
      while (1)
      {
        v22 = (uint64_t)(v4 - (_QWORD)v21) / 24;
        v23 = (unint64_t)&v21[12 * v22];
        v24 = *(_BYTE *)(v23 + 8);
        if (v7 <= (v24 & 0x1Fu))
          break;
        v26 = 0;
        if ((*(_BYTE *)(v23 + 8) & 0x20) != 0 && v2 <= (v24 & 0x1Fu))
        {
          v25 = 59;
LABEL_38:
          if (v25 == a2)
            v26 = 1;
          else
            v26 = 2 * (v25 >= a2);
        }
        if (v26 == 2)
          v4 = v23;
        else
          v21 = (char *)v23;
        if ((unint64_t)(v21 + 12) >= v4)
          goto LABEL_29;
      }
      v25 = (unsigned __int16)WebCore::staticEntityStringStorage[v2 + (*(_WORD *)&v21[12 * v22 + 6] & 0x3FFF)];
      goto LABEL_38;
    }
LABEL_27:
    v4 = (unint64_t)v10;
    goto LABEL_12;
  }
  v17 = -97;
  if (a2 - 65 < 0x1A)
  {
    v17 = -65;
    v19 = (unsigned __int16 *)&WebCore::uppercaseOffset;
    v18 = -64;
  }
  else
  {
    if (a2 - 97 > 0x19)
      goto LABEL_16;
    v18 = -96;
    v19 = (unsigned __int16 *)&WebCore::lowercaseOffset;
  }
  v10 = (char *)&WebCore::staticEntityTable + 12 * v19[v17 + a2];
  v20 = (char *)&WebCore::staticEntityTable + 12 * v19[v18 + a2] - 12;
  *((_QWORD *)result + 2) = v10;
  *((_QWORD *)result + 3) = v20;
LABEL_30:
  v16 = v2 + 1;
  *result = v16;
  if (v16 == ((v10[8] >> 5) & 1) + (v10[8] & 0x1F))
    *((_QWORD *)result + 1) = v10;
  return result;
}

WTF::StringImpl *WebCore::SegmentedStringSource::pushEverythingBack(WebCore::SegmentedStringSource *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  v2 = *(_QWORD *)this;
  WTF::String::String();
  WebCore::SegmentedString::pushBack(v2, (WTF::StringImpl *)&v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  if (*((_DWORD *)this + 4))
  {
    if (*((_DWORD *)this + 5))
      *((_DWORD *)this + 5) = 0;
    result = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if ((WebCore::SegmentedStringSource *)((char *)this + 24) != result && result)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(result, v3);
      result = (WTF::StringImpl *)*((_QWORD *)this + 1);
    }
    if (!result)
    {
      *((_QWORD *)this + 1) = (char *)this + 24;
      *((_DWORD *)this + 4) = 64;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SegmentedString::pushBack(uint64_t a1, WTF::StringImpl *a2)
{
  int v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _WORD *v16;
  WTF::StringImpl *result;
  uint64_t (*v18)(uint64_t);

  v4 = *(_DWORD *)(a1 + 12);
  v5 = (__int128 *)(a1 + 8);
  *(_DWORD *)(a1 + 68) += *(_DWORD *)(a1 + 8) - v4;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (uint64_t *)(a1 + 32);
    if (v6)
    {
      if (v7 + 1 != v6)
        goto LABEL_8;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 56);
      if (v7)
      {
        if (v7 != v6 - 1)
          goto LABEL_7;
      }
      else if ((_DWORD)v6)
      {
        goto LABEL_7;
      }
    }
    WTF::Deque<WebCore::SegmentedString::Substring,0ul>::expandCapacity(a1 + 32);
    v6 = *v8;
    if (*v8)
    {
LABEL_8:
      v9 = v6 - 1;
      *(_QWORD *)(a1 + 32) = v9;
      v10 = *(_QWORD *)(a1 + 48) + 32 * v9;
      v11 = *(WTF::StringImpl **)a1;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)v10 = v11;
      v12 = *v5;
      *(_WORD *)(v10 + 24) = *((_WORD *)v5 + 8);
      *(_OWORD *)(v10 + 8) = v12;
      goto LABEL_9;
    }
    LODWORD(v6) = *(_DWORD *)(a1 + 56);
LABEL_7:
    v6 = v6;
    goto LABEL_8;
  }
LABEL_9:
  v13 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 4);
    if (v14)
    {
      v15 = (*(_DWORD *)(v13 + 16) >> 2) & 1;
      v16 = *(_WORD **)(v13 + 8);
      goto LABEL_12;
    }
  }
  else
  {
    v14 = 0;
  }
  v16 = 0;
  v15 = 1;
LABEL_12:
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v13;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 12) = v14;
  *(_QWORD *)(a1 + 16) = v16;
  *(_BYTE *)(a1 + 24) = v15;
  *(_BYTE *)(a1 + 25) = 1;
  *(_DWORD *)(a1 + 68) -= v14;
  if (v15)
  {
    *(_WORD *)(a1 + 66) = *(unsigned __int8 *)v16;
    if (v14 >= 2)
    {
      *(_BYTE *)(a1 + 80) = 3;
      return result;
    }
    goto LABEL_21;
  }
  *(_WORD *)(a1 + 66) = *v16;
  if (v14 <= 1)
  {
LABEL_21:
    *(_BYTE *)(a1 + 80) = 0;
    if (v14)
    {
      *(_QWORD *)(a1 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *(_QWORD *)(a1 + 96) = 0;
      v18 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    }
    else
    {
      v18 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advanceEmpty;
      *(_QWORD *)(a1 + 88) = WebCore::SegmentedString::advanceEmpty;
      *(_QWORD *)(a1 + 96) = 0;
    }
    goto LABEL_23;
  }
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
  *(_QWORD *)(a1 + 96) = 0;
  v18 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
LABEL_23:
  *(_QWORD *)(a1 + 104) = v18;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t WTF::Deque<WebCore::SegmentedString::Substring,0ul>::expandCapacity(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  __int128 v24;
  uint64_t v25;

  v1 = *(unsigned int *)(result + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x7FFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = *(WTF **)(result + 16);
    v5 = v2 + 1;
    result = WTF::fastMalloc((WTF *)(32 * (v2 + 1)));
    *(_DWORD *)(v3 + 24) = v5;
    *(_QWORD *)(v3 + 16) = result;
    v7 = *(_QWORD *)v3;
    v8 = *(_QWORD *)(v3 + 8);
    v9 = (WTF *)((char *)v4 + 32 * v8);
    if (*(_QWORD *)v3 > v8)
    {
      if (v8)
      {
        v15 = result;
        v16 = v4;
        do
        {
          v17 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          v18 = v15;
          *(_QWORD *)v15 = v17;
          v19 = *(_OWORD *)((char *)v16 + 8);
          *(_WORD *)(v15 + 24) = *((_WORD *)v16 + 12);
          *(_OWORD *)(v15 + 8) = v19;
          WebCore::ContentType::~ContentType((WTF::StringImpl **)v16, v6);
          v16 = (WTF *)(v20 + 32);
          v15 = v18 + 32;
        }
        while (v16 != v9);
        v5 = *(_DWORD *)(v3 + 24);
        v7 = *(_QWORD *)v3;
        result = *(_QWORD *)(v3 + 16);
      }
      v10 = v7 - v1 + v5;
      if (v7 != v1)
      {
        v21 = (char *)v4 + 32 * v1;
        v22 = result + 32 * v10;
        result = (uint64_t)v4 + 32 * v7;
        do
        {
          v23 = *(WTF::StringImpl **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v22 = v23;
          v24 = *(_OWORD *)(result + 8);
          *(_WORD *)(v22 + 24) = *(_WORD *)(result + 24);
          *(_OWORD *)(v22 + 8) = v24;
          WebCore::ContentType::~ContentType((WTF::StringImpl **)result, v6);
          result = v25 + 32;
          v22 += 32;
        }
        while ((char *)result != v21);
      }
      *(_QWORD *)v3 = v10;
    }
    else if (*(_QWORD *)v3 != v8)
    {
      v11 = result + 32 * v7;
      result = (uint64_t)v4 + 32 * v7;
      do
      {
        v12 = *(WTF::StringImpl **)result;
        *(_QWORD *)result = 0;
        *(_QWORD *)v11 = v12;
        v13 = *(_OWORD *)(result + 8);
        *(_WORD *)(v11 + 24) = *(_WORD *)(result + 24);
        *(_OWORD *)(v11 + 8) = v13;
        WebCore::ContentType::~ContentType((WTF::StringImpl **)result, v6);
        result = v14 + 32;
        v11 += 32;
      }
      while ((WTF *)result != v9);
    }
    if (v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

void WebCore::AdvanceInternalState::~AdvanceInternalState(WebCore::AdvanceInternalState *this, void *a2)
{
  WTF *v3;
  WTF **v5;
  WebCore::Font *v6;
  WebCore::Font *v7;
  WebCore::Font *v8;
  WebCore::Font *v9;
  WTF *v10;
  void *v11;

  v3 = (WTF *)*((_QWORD *)this + 8);
  if ((WebCore::AdvanceInternalState *)((char *)this + 80) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v3, a2);
  }
  v5 = (WTF **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Font::~Font(v5);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = (WebCore::Font *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    WTF::RefCounted<WebCore::Font>::deref(v6);
  v7 = (WebCore::Font *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    WTF::RefCounted<WebCore::Font>::deref(v7);
  v8 = (WebCore::Font *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    WTF::RefCounted<WebCore::Font>::deref(v8);
  v9 = *(WebCore::Font **)this;
  *(_QWORD *)this = 0;
  if (v9)
    WTF::RefCounted<WebCore::Font>::deref(v9);
}

uint64_t WebCore::MutableStyleProperties::setProperty(WebCore::MutableStyleProperties *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  __int16 *v18;
  __int16 *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t CustomCSSPropertyWithName;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v28;
  WebCore::CSSValueContainingVector *v29;
  uint64_t v30;
  const WebCore::CSSLinearGradientValue **v31;

  v5 = *a2;
  if (!a3)
  {
    if ((v5 & 0x3FF) != 1)
    {
      v6 = *((_QWORD *)this + 2);
      LODWORD(v7) = *((_DWORD *)this + 7);
      do
      {
        v7 = (v7 - 1);
        if ((int)v7 < 0)
          goto LABEL_31;
      }
      while ((*(_WORD *)(v6 + 16 * v7) & 0x3FF) != (v5 & 0x3FF));
      if (*((_DWORD *)this + 7) > v7)
      {
        v8 = (unsigned __int16 *)(v6 + 16 * v7);
        goto LABEL_8;
      }
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x1940C6844);
    }
    v21 = *((_QWORD *)a2 + 1);
    if (v21)
    {
      if (((*(unsigned __int16 *)(v21 + 4) | (*(unsigned __int8 *)(v21 + 6) << 16)) & 0x3F800) != 0xE800)
        goto LABEL_47;
      CustomCSSPropertyWithName = WebCore::MutableStyleProperties::findCustomCSSPropertyWithName(this, *(const WTF::String **)(v21 + 8));
      if (CustomCSSPropertyWithName)
      {
        v8 = (unsigned __int16 *)CustomCSSPropertyWithName;
        v5 = *a2;
        goto LABEL_8;
      }
    }
LABEL_31:
    v23 = (uint64_t *)((char *)this + 16);
    v24 = *((unsigned int *)this + 7);
    if ((_DWORD)v24 == *((_DWORD *)this + 6))
    {
      v28 = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)a2);
      v24 = *((unsigned int *)this + 7);
      v25 = *((_QWORD *)this + 2);
      *(_WORD *)(v25 + 16 * v24) = *(_WORD *)v28;
      v26 = *(_DWORD **)(v28 + 8);
      if (!v26)
        goto LABEL_34;
    }
    else
    {
      v25 = *v23;
      *(_WORD *)(*v23 + 16 * v24) = *a2;
      v26 = (_DWORD *)*((_QWORD *)a2 + 1);
      if (!v26)
      {
LABEL_34:
        *(_QWORD *)(v25 + 16 * v24 + 8) = v26;
        ++*((_DWORD *)this + 7);
        return 1;
      }
    }
    *v26 += 2;
    goto LABEL_34;
  }
  v8 = a3;
LABEL_8:
  if (WebCore::CSSProperty::isInLogicalPropertyGroup(v5 & 0x3FF))
  {
    v17 = *((_QWORD *)this + 2);
    v18 = (__int16 *)(v17 + 16 * *((unsigned int *)this + 7));
    v19 = (__int16 *)(v8 + 8);
    while (v19 != v18)
    {
      v20 = *v19;
      v19 += 8;
      if ((WebCore::CSSProperty::areInSameLogicalPropertyGroupWithDifferentMappingLogic(v5 & 0x3FF, v20 & 0x3FF) & 1) != 0)
      {
        WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t)this + 16, (WTF::StringImpl *)(((uint64_t)v8 - v17) >> 4));
        goto LABEL_31;
      }
    }
  }
  if (*v8 != v5)
    goto LABEL_17;
  v11 = *((_QWORD *)v8 + 1);
  v9 = *((_QWORD *)a2 + 1);
  if (v11)
    v12 = v9 == 0;
  else
    v12 = 1;
  if (v12)
  {
    if (v11 | v9)
      goto LABEL_17;
  }
  else
  {
    v13 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
    v14 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
    if (((v14 ^ v13) & 0x3F800) != 0)
    {
      if ((v13 & 0x3F800) == 0x1D800)
      {
        v29 = (WebCore::CSSValueContainingVector *)*((_QWORD *)v8 + 1);
      }
      else
      {
        if ((v14 & 0x3F800) != 0x1D800)
          goto LABEL_16;
        v29 = (WebCore::CSSValueContainingVector *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)v8 + 1);
      }
      if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v29, (const WebCore::CSSValue *)v9, v10) & 1) == 0)
      {
LABEL_16:
        LOWORD(v5) = *a2;
LABEL_17:
        *v8 = v5;
        v15 = (_DWORD *)*((_QWORD *)a2 + 1);
        if (v15)
          *v15 += 2;
        v16 = (_DWORD *)*((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = v15;
        if (v16)
        {
          if (*v16 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, (WTF::StringImpl *)v9);
          else
            *v16 -= 2;
        }
        return 1;
      }
    }
    else
    {
      v30 = *((_QWORD *)a2 + 1);
      v31 = (const WebCore::CSSLinearGradientValue **)&v30;
      if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v11, &v31, v10) & 1) == 0)goto LABEL_16;
    }
  }
  return 0;
}

BOOL WebCore::CSSValueContainingVector::itemsEqual(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  WebCore::CSSValueContainingVector *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  WebCore::CSSValueContainingVector *v24;
  WebCore::CSSValueContainingVector *v25;
  WebCore::CSSValueContainingVector *v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 8))
    return 0;
  if (!(_DWORD)v2)
    return 1;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  v8 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
  if (((v8 ^ v7) & 0x3F800) != 0)
  {
    if ((v7 & 0x3F800) == 0x1D800)
    {
      v11 = *(WebCore::CSSValueContainingVector **)(a1 + 16);
    }
    else
    {
      if ((v8 & 0x3F800) != 0x1D800)
        return 0;
      v11 = (WebCore::CSSValueContainingVector *)v6;
      v6 = v5;
    }
    if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v11, (const WebCore::CSSValue *)v6) & 1) == 0)
      return 0;
  }
  else
  {
    v32 = v6;
    v33 = &v32;
    if (!_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v5, &v33))return 0;
  }
  v9 = v2 < 2;
  if ((_DWORD)v2 == 1)
    return v9;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16);
  v15 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
  if (((v15 ^ v14) & 0x3F800) != 0)
  {
    if ((v14 & 0x3F800) == 0x1D800)
    {
      v24 = *(WebCore::CSSValueContainingVector **)(a1 + 24);
    }
    else
    {
      if ((v15 & 0x3F800) != 0x1D800)
        return v9;
      v24 = *(WebCore::CSSValueContainingVector **)(a2 + 24);
      v13 = *(_QWORD *)(a1 + 24);
    }
    if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v24, (const WebCore::CSSValue *)v13) & 1) == 0)
      return v9;
  }
  else
  {
    v32 = *(_QWORD *)(a2 + 24);
    v33 = &v32;
    if (!_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, &v33))return v9;
  }
  v9 = v2 < 3;
  if ((_DWORD)v2 == 2)
    return v9;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
  v19 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
  if (((v19 ^ v18) & 0x3F800) != 0)
  {
    if ((v18 & 0x3F800) == 0x1D800)
    {
      v25 = *(WebCore::CSSValueContainingVector **)(a1 + 32);
    }
    else
    {
      if ((v19 & 0x3F800) != 0x1D800)
        return v9;
      v25 = *(WebCore::CSSValueContainingVector **)(a2 + 32);
      v17 = *(_QWORD *)(a1 + 32);
    }
    if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v25, (const WebCore::CSSValue *)v17) & 1) == 0)
      return v9;
  }
  else
  {
    v32 = *(_QWORD *)(a2 + 32);
    v33 = &v32;
    if (!_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v16, &v33))return v9;
  }
  v9 = v2 < 4;
  if ((_DWORD)v2 != 3)
  {
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a2 + 40);
    v22 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
    v23 = *(unsigned __int16 *)(v21 + 4) | (*(unsigned __int8 *)(v21 + 6) << 16);
    if (((v23 ^ v22) & 0x3F800) != 0)
    {
      if ((v22 & 0x3F800) == 0x1D800)
      {
        v26 = *(WebCore::CSSValueContainingVector **)(a1 + 40);
      }
      else
      {
        if ((v23 & 0x3F800) != 0x1D800)
          return v9;
        v26 = *(WebCore::CSSValueContainingVector **)(a2 + 40);
        v21 = *(_QWORD *)(a1 + 40);
      }
      if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v26, (const WebCore::CSSValue *)v21) & 1) == 0)
        return v9;
    }
    else
    {
      v32 = *(_QWORD *)(a2 + 40);
      v33 = &v32;
      if (!_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v20, &v33))return v9;
    }
    v9 = v2 < 5;
    if ((_DWORD)v2 != 4)
    {
      for (i = 0; v2 - 4 != i; ++i)
      {
        if (i + 4 >= (unint64_t)*(unsigned int *)(a1 + 8)
          || i + 4 >= (unint64_t)*(unsigned int *)(a2 + 8))
        {
          __break(0xC471u);
          JUMPOUT(0x1940C6BDCLL);
        }
        v28 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * i);
        v30 = *(unsigned __int16 *)(v28 + 4) | (*(unsigned __int8 *)(v28 + 6) << 16);
        v31 = *(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16);
        if (((v31 ^ v30) & 0x3F800) != 0)
        {
          if ((v30 & 0x3F800) == 0x1D800)
          {
            if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(*(WebCore::CSSValueContainingVector **)(*(_QWORD *)(a1 + 48) + 8 * i), (const WebCore::CSSValue *)v29) & 1) == 0)return v9;
          }
          else if ((v31 & 0x3F800) != 0x1D800
                 || !WebCore::CSSValueContainingVector::containsSingleEqualItem(*(WebCore::CSSValueContainingVector **)(*(_QWORD *)(a2 + 48) + 8 * i), *(const WebCore::CSSValue **)(*(_QWORD *)(a1 + 48) + 8 * i)))
          {
            return v9;
          }
        }
        else
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * i);
          v33 = &v32;
          if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v28, &v33) & 1) == 0)return v9;
        }
        v9 = i + 5 >= v2;
      }
    }
  }
  return v9;
}

uint64_t WebCore::CSSValueContainingVector::addDerivedHash(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  BOOL v13;
  _DWORD *v14;
  _QWORD *v15;

  v2 = *a2 + ((*(unsigned __int16 *)(a1 + 4) >> 9) & 3);
  *a2 = (v2 ^ (v2 << 16)) + ((v2 ^ (v2 << 16)) >> 11);
  v3 = *(_DWORD *)(a1 + 8);
  if (!v3)
    return 1;
  v6 = 0;
  v7 = 0;
  v8 = a1 + 16;
  while (v6 <= 3)
  {
    v9 = v8 + 8 * v7;
LABEL_5:
    v10 = *(_QWORD *)v9;
    v11 = *a2
        + (((*(unsigned __int16 *)(*(_QWORD *)v9 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v9 + 6) << 16)) >> 11) & 0x7F);
    *a2 = (v11 ^ (v11 << 16)) + ((v11 ^ (v11 << 16)) >> 11);
    v14 = a2;
    v15 = &v14;
    result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7addHashERN3WTF6HasherEE3__0EEDcOT_EUlRS8_E_EES7_S9_(v10, &v15);
    v6 = v7 + 1;
    v7 = (v7 + 1);
    if ((_DWORD)result)
      v13 = v3 == v6;
    else
      v13 = 1;
    if (v13)
      return result;
  }
  if (*(_DWORD *)(a1 + 8) > v6)
  {
    v9 = *(_QWORD *)(a1 + 48) + 8 * (v7 - 4);
    goto LABEL_5;
  }
  result = 148;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ImmutableStyleProperties::createDeduplicating@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned __int16 *v6;
  uint64_t v8;
  unsigned int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  unsigned int *v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  __int16 *v52;
  uint64_t v53;
  WebCore::CSSValueContainingVector **v54;
  uint64_t v55;
  unsigned int *v56;
  unint64_t v57;
  __int16 v58;
  BOOL v59;
  int v60;
  int v61;
  char v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  _DWORD *v73;
  unsigned int v74;
  WebCore::CSSValueContainingVector *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  unint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  _DWORD *v86;
  char v87;
  unsigned __int16 *v88;
  _QWORD *v89;
  unsigned int v90;
  unsigned __int16 v91;
  char v92;
  unsigned int *v93;
  unsigned int **v94;

  v4 = (int)a3;
  v5 = a2;
  v6 = (unsigned __int16 *)result;
  if ((_MergedGlobals_164 & 1) != 0)
  {
    v8 = qword_1ECE82A18;
    if (qword_1ECE82A18 && *(_DWORD *)(qword_1ECE82A18 - 12) >= 0x400u)
    {
      do
      {
        while (1)
        {
          v76 = v8;
          result = WTF::weakRandomNumber<unsigned int>();
          v8 = qword_1ECE82A18;
          if (qword_1ECE82A18)
            break;
          if ((*(_DWORD *)v76 + 1) >= 2)
          {
            v77 = 0;
            goto LABEL_122;
          }
        }
      }
      while ((*(_DWORD *)(v76 + 16 * (*(_DWORD *)(qword_1ECE82A18 - 8) & result)) + 1) < 2);
      v76 += 16 * (*(_DWORD *)(qword_1ECE82A18 - 8) & result);
      v77 = qword_1ECE82A18 + 16 * *(unsigned int *)(qword_1ECE82A18 - 4);
      if (v77 == v76)
        goto LABEL_4;
LABEL_122:
      if (v77 != v76)
      {
        *(_DWORD *)v76 = -1;
        v78 = *(unsigned int **)(v76 + 8);
        *(_QWORD *)(v76 + 8) = 0;
        if (v78)
        {
          if (*v78 == 1)
          {
            v83 = v78[1];
            if (v83 >= 0x10)
            {
              v84 = 0;
              v85 = (unsigned int *)((char *)v78 + ((v83 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v86 = (_DWORD *)(*v85 | ((unint64_t)*((unsigned __int8 *)v85 + 4) << 32));
                if (*v86 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v86, (WTF::StringImpl *)a2);
                else
                  *v86 -= 2;
                ++v84;
                v85 = (unsigned int *)((char *)v85 + 5);
              }
              while (v84 < (unint64_t)v78[1] >> 4);
            }
            result = WTF::fastFree((WTF *)v78, (void *)a2);
          }
          else
          {
            --*v78;
          }
        }
        v79 = qword_1ECE82A18;
        ++*(_DWORD *)(qword_1ECE82A18 - 16);
        if (v79)
          v80 = *(_DWORD *)(v79 - 12) - 1;
        else
          v80 = -1;
        *(_DWORD *)(v79 - 12) = v80;
        if (qword_1ECE82A18)
        {
          v81 = *(_DWORD *)(qword_1ECE82A18 - 4);
          if (6 * *(_DWORD *)(qword_1ECE82A18 - 12) < v81 && v81 >= 9)
            result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v81 >> 1, 0);
        }
      }
    }
  }
  else
  {
    qword_1ECE82A18 = 0;
    _MergedGlobals_164 = 1;
  }
LABEL_4:
  v91 = 0;
  v92 = 0;
  v9 = ((v4 - 1640531527) ^ ((v4 - 1640531527) << 16))
     + (((v4 - 1640531527) ^ ((v4 - 1640531527) << 16)) >> 11);
  if (!v5)
  {
LABEL_10:
    v17 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
    v18 = (v17 ^ (4 * v17)) + ((v17 ^ (4 * v17)) >> 15);
    v19 = v18 ^ (v18 << 10);
    if (v19)
      v20 = v19;
    else
      v20 = 0x800000;
    if ((_MergedGlobals_164 & 1) != 0)
    {
      v21 = qword_1ECE82A18;
      if (qword_1ECE82A18)
        goto LABEL_16;
    }
    else
    {
      qword_1ECE82A18 = 0;
      _MergedGlobals_164 = 1;
    }
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(8u, 0);
    v21 = qword_1ECE82A18;
    if (!qword_1ECE82A18)
    {
      v22 = 0;
LABEL_17:
      v23 = v22 & v20;
      v24 = v21 + 16 * (v22 & v20);
      v25 = *(_DWORD *)v24;
      if (*(_DWORD *)v24)
      {
        v89 = a4;
        v26 = 0;
        v27 = 1;
        while (v25 != v20)
        {
          if (v25 == -1)
            v26 = (_QWORD *)v24;
          v23 = (v23 + v27) & v22;
          v24 = v21 + 16 * v23;
          v25 = *(_DWORD *)v24;
          ++v27;
          if (!*(_DWORD *)v24)
          {
            if (v26)
            {
              *v26 = 0;
              v26[1] = 0;
              --*(_DWORD *)(v21 - 16);
              v24 = (uint64_t)v26;
            }
            goto LABEL_25;
          }
        }
        v88 = v6;
        v49 = *(_QWORD *)(v24 + 8);
        v50 = *(_DWORD *)(v49 + 4);
        v87 = v4;
        if (v5 == v50 >> 4 && (*(_DWORD *)(v49 + 4) & 7) == v4)
        {
          if (v50 < 0x10)
          {
LABEL_60:
            a4 = v89;
            goto LABEL_44;
          }
          v52 = (__int16 *)(v49 + 8);
          if (v5 <= 1)
            v53 = 1;
          else
            v53 = v5;
          v54 = (WebCore::CSSValueContainingVector **)(v88 + 4);
          v55 = v49 + 8;
          while (1)
          {
            v56 = (unsigned int *)(v55 + (((unint64_t)*(unsigned int *)(v49 + 4) >> 3) & 0x1FFFFFFE));
            v57 = *v56 | ((unint64_t)*((unsigned __int8 *)v56 + 4) << 32);
            v58 = *v52;
            if (v57)
              *(_DWORD *)v57 += 2;
            if ((*v52 & 0x7C00 | ((WebCore::isInheritedPropertyTable[v58 & 0x3FF] != 0) << 15) | v58 & 0x3FF) != *((unsigned __int16 *)v54 - 4))
              break;
            a2 = (unint64_t)*v54;
            if (v57)
              v59 = a2 == 0;
            else
              v59 = 1;
            if (v59)
            {
              if (v57)
                goto LABEL_110;
              if (a2)
                goto LABEL_79;
            }
            else
            {
              v60 = *(unsigned __int16 *)(v57 + 4) | (*(unsigned __int8 *)(v57 + 6) << 16);
              v61 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
              if (((v61 ^ v60) & 0x3F800) != 0)
              {
                if ((v60 & 0x3F800) == 0x1D800)
                {
                  v75 = (WebCore::CSSValueContainingVector *)v57;
                }
                else
                {
                  if ((v61 & 0x3F800) != 0x1D800)
                    goto LABEL_110;
                  v75 = *v54;
                  a2 = v57;
                }
                result = WebCore::CSSValueContainingVector::containsSingleEqualItem(v75, (const WebCore::CSSValue *)a2, a3);
              }
              else
              {
                v93 = (unsigned int *)*v54;
                v94 = &v93;
                result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v57, (const WebCore::CSSLinearGradientValue ***)&v94, a3);
              }
              v62 = result;
              if (*(_DWORD *)v57 == 2)
              {
                result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v57, (WTF::StringImpl *)a2);
                if ((v62 & 1) == 0)
                  goto LABEL_79;
              }
              else
              {
                *(_DWORD *)v57 -= 2;
                if ((result & 1) == 0)
                  goto LABEL_79;
              }
            }
            v54 += 2;
            v55 += 5;
            ++v52;
            if (!--v53)
              goto LABEL_60;
          }
          if (!v57)
            goto LABEL_79;
LABEL_110:
          if (*(_DWORD *)v57 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v57, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v57 -= 2;
        }
LABEL_79:
        result = WTF::fastMalloc((WTF *)(7 * v5 + 8));
        v41 = (_DWORD *)result;
        *(_DWORD *)result = 1;
        *(_DWORD *)(result + 4) = v87 & 7 | (16 * v5);
        if (v5)
        {
          v64 = 0;
          v65 = result + 8;
          v66 = 2 * (v5 & 0xFFFFFFF);
          a4 = v89;
          v67 = (uint64_t *)(v88 + 4);
          do
          {
            *(_WORD *)(v65 + 2 * v64) = *((_WORD *)v67 - 4);
            result = *v67;
            if (*v67)
              *(_DWORD *)result += 2;
            v68 = v65 + v66;
            *(_DWORD *)v68 = result;
            *(_BYTE *)(v68 + 4) = BYTE4(result);
            v69 = *(_DWORD *)result;
            *(_DWORD *)result += 2;
            if (v69)
              *(_DWORD *)result = v69;
            else
              result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v63);
            ++v64;
            v66 += 5;
            v67 += 2;
          }
          while (v5 != v64);
        }
        else
        {
          a4 = v89;
        }
        goto LABEL_45;
      }
LABEL_25:
      *(_DWORD *)v24 = v20;
      result = WTF::fastMalloc((WTF *)(7 * v5 + 8));
      v29 = result;
      *(_DWORD *)result = 1;
      *(_DWORD *)(result + 4) = v4 & 7 | (16 * v5);
      if (v5)
      {
        v30 = v5;
        v31 = (_WORD *)(result + 8);
        v32 = result + 8 + 2 * (v5 & 0xFFFFFFF);
        v33 = (uint64_t *)(v6 + 4);
        do
        {
          *v31 = *((_WORD *)v33 - 4);
          result = *v33;
          if (*v33)
            *(_DWORD *)result += 2;
          *(_DWORD *)v32 = result;
          *(_BYTE *)(v32 + 4) = BYTE4(result);
          v34 = *(_DWORD *)result;
          *(_DWORD *)result += 2;
          if (v34)
            *(_DWORD *)result = v34;
          else
            result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v28);
          v32 += 5;
          v33 += 2;
          ++v31;
          --v30;
        }
        while (v30);
      }
      v35 = *(unsigned int **)(v24 + 8);
      *(_QWORD *)(v24 + 8) = v29;
      if (v35)
      {
        if (*v35 == 1)
        {
          v70 = v35[1];
          if (v70 >= 0x10)
          {
            v71 = 0;
            v72 = (unsigned int *)((char *)v35 + ((v70 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v73 = (_DWORD *)(*v72 | ((unint64_t)*((unsigned __int8 *)v72 + 4) << 32));
              if (*v73 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v73, v28);
              else
                *v73 -= 2;
              ++v71;
              v72 = (unsigned int *)((char *)v72 + 5);
            }
            while (v71 < (unint64_t)v35[1] >> 4);
          }
          result = WTF::fastFree((WTF *)v35, v28);
        }
        else
        {
          --*v35;
        }
      }
      if (qword_1ECE82A18)
        v36 = *(_DWORD *)(qword_1ECE82A18 - 12) + 1;
      else
        v36 = 1;
      *(_DWORD *)(qword_1ECE82A18 - 12) = v36;
      if (qword_1ECE82A18)
        v37 = *(_DWORD *)(qword_1ECE82A18 - 12);
      else
        v37 = 0;
      v38 = (*(_DWORD *)(qword_1ECE82A18 - 16) + v37);
      v39 = *(unsigned int *)(qword_1ECE82A18 - 4);
      if (v39 > 0x400)
      {
        if (v39 > 2 * v38)
          goto LABEL_44;
      }
      else
      {
        if (3 * v39 > 4 * v38)
        {
LABEL_44:
          v41 = *(_DWORD **)(v24 + 8);
          ++*v41;
          goto LABEL_45;
        }
        if (!(_DWORD)v39)
        {
          v40 = 8;
LABEL_43:
          result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v40, v24);
          v24 = result;
          goto LABEL_44;
        }
      }
      v40 = (_DWORD)v39 << (6 * *(_DWORD *)(qword_1ECE82A18 - 12) >= (2 * v39));
      goto LABEL_43;
    }
LABEL_16:
    v22 = *(_DWORD *)(v21 - 8);
    goto LABEL_17;
  }
  v10 = v6;
  v11 = v5;
  while (1)
  {
    v12 = *((_QWORD *)v10 + 1);
    v13 = ((*(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16)) >> 11) & 0x7F;
    v90 = ((v9 + v13) ^ ((v9 + v13) << 16)) + (((v9 + v13) ^ ((v9 + v13) << 16)) >> 11);
    v93 = &v90;
    v94 = &v93;
    result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7addHashERN3WTF6HasherEE3__0EEDcOT_EUlRS8_E_EES7_S9_(v12, &v94);
    if (!(_DWORD)result)
      break;
    v14 = *v10;
    v10 += 8;
    v15 = (v90 + (v14 & 0x3FF)) ^ ((v90 + (v14 & 0x3FF)) << 16);
    v16 = v15 + ((v14 >> 13) & 1) + (v15 >> 11);
    v9 = (v16 ^ (v16 << 16)) + ((v16 ^ (v16 << 16)) >> 11);
    v90 = v9;
    if (v10 >= &v6[8 * v5])
    {
      if (v92)
      {
        v74 = (v9 + v91) ^ ((v9 + v91) << 11);
        v9 = v74 + (v74 >> 17);
      }
      goto LABEL_10;
    }
  }
  v41 = (_DWORD *)WTF::fastMalloc((WTF *)(7 * v5 + 8));
  v43 = 0;
  v44 = v41 + 2;
  *v41 = 1;
  v41[1] = v4 & 7 | (16 * v5);
  v45 = 2 * (v5 & 0xFFFFFFF);
  v46 = (uint64_t *)(v6 + 4);
  do
  {
    *((_WORD *)v44 + v43) = *((_WORD *)v46 - 4);
    result = *v46;
    if (*v46)
      *(_DWORD *)result += 2;
    v47 = (char *)v44 + v45;
    *(_DWORD *)v47 = result;
    v47[4] = BYTE4(result);
    v48 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    if (v48)
      *(_DWORD *)result = v48;
    else
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v42);
    ++v43;
    v45 += 5;
    v46 += 2;
  }
  while (v11 != v43);
LABEL_45:
  *a4 = v41;
  return result;
}

uint64_t WebCore::CSSPrimitiveValue::addDerivedHash(uint64_t a1, unsigned int *a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  unsigned __int8 v29;
  __int128 v30;

  v2 = *a2 + (*(_WORD *)(a1 + 4) & 0x7F);
  v3 = (v2 ^ (v2 << 16)) + ((v2 ^ (v2 << 16)) >> 11);
  *a2 = v3;
  v4 = 0;
  switch(*(_WORD *)(a1 + 4) & 0x7F)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x51:
      v5 = *(_QWORD *)(a1 + 8);
      v6 = (v5 >> 5) & 0x7FFF800 ^ ((v3 + (unsigned __int16)v5) << 16) ^ (v3 + (unsigned __int16)v5);
      v7 = (v5 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(v5) + (v6 >> 11)) << 16) ^ (v6 + WORD2(v5) + (v6 >> 11));
      goto LABEL_3;
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x3F:
    case 0x4D:
      v13 = *(_QWORD *)(a1 + 8);
      if (!v13)
        return 1;
      v14 = *(_DWORD *)(v13 + 4);
      *(_DWORD *)v13 += 2;
      v15 = v14 & 0xFFFFFFFE;
      if ((v14 & 0xFFFFFFFE) == 0)
        goto LABEL_26;
      v16 = 0;
      v17 = *a2;
      break;
    case 0x16:
    case 0x4A:
    case 0x4B:
      return v4;
    case 0x18:
      v10 = *(_QWORD *)(a1 + 8);
      if ((v10 & 0x8000000000000) != 0)
      {
        v30 = *(_OWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 4);
        v29 = HIBYTE(v10);
        v28 = BYTE6(v10);
        WTF::add<WebCore::ColorComponents<float,4ul>,WebCore::ColorSpace,WTF::OptionSet<WebCore::Color::FlagsIncludingPrivate>>(a2, &v30, &v29, &v28);
      }
      else
      {
        v8 = ((v10 >> 5) & 0x7FFF800 ^ ((v3 + (unsigned __int16)v10) << 16) ^ (v3 + (unsigned __int16)v10))
           + (((v10 >> 5) & 0x7FFF800 ^ ((v3 + (unsigned __int16)v10) << 16) ^ (v3 + (unsigned __int16)v10)) >> 11);
        *a2 = v8;
        if (BYTE6(v10))
        {
          v11 = HIWORD(v10);
          do
          {
            v12 = (v8 + (v11 & -(char)v11)) ^ ((v8 + (v11 & -(char)v11)) << 16);
            v8 = v12 + (v12 >> 11);
            LODWORD(v11) = (v11 - 1) & v11;
          }
          while ((_BYTE)v11);
LABEL_4:
          *a2 = v8;
        }
      }
      return 1;
    case 0x4C:
    case 0x4E:
      WTF::add<unsigned long>(a2, *(_QWORD *)(a1 + 8));
      return 1;
    case 0x4F:
    case 0x50:
      v7 = (v3 + *(unsigned __int16 *)(a1 + 8)) ^ ((v3 + *(unsigned __int16 *)(a1 + 8)) << 16);
LABEL_3:
      v8 = v7 + (v7 >> 11);
      goto LABEL_4;
    default:
      return 1;
  }
  do
  {
    v18 = *(unsigned int *)(v13 + 4);
    v19 = v16 + 1;
    if (v16 >= v18 || v16 + 1 >= v18)
    {
      if (v16 >= v18)
      {
        v21 = 0;
      }
      else
      {
        v27 = *(_QWORD *)(v13 + 8);
        if ((*(_BYTE *)(v13 + 16) & 4) != 0)
          v21 = *(unsigned __int8 *)(v27 + v16);
        else
          v21 = *(unsigned __int16 *)(v27 + 2 * v16);
      }
      if (v16 + 1 >= v18)
      {
        v23 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v20 = *(_QWORD *)(v13 + 8);
      if ((*(_BYTE *)(v13 + 16) & 4) != 0)
        v21 = *(unsigned __int8 *)(v20 + v16);
      else
        v21 = *(unsigned __int16 *)(v20 + 2 * v16);
    }
    v22 = *(_QWORD *)(v13 + 8);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
      v23 = *(unsigned __int8 *)(v22 + v16 + 1);
    else
      v23 = *(unsigned __int16 *)(v22 + 2 * v16 + 2);
LABEL_22:
    v24 = (v21 << 11) ^ ((v17 + v23) << 16) ^ (v17 + v23);
    v17 = v24 + (v24 >> 11);
    *a2 = v17;
    v16 = v19 + 1;
  }
  while (v19 + 1 < v15);
LABEL_26:
  if ((v14 & 1) != 0)
  {
    if (*(_DWORD *)(v13 + 4) <= v15)
    {
      v26 = 0;
    }
    else
    {
      v25 = *(_QWORD *)(v13 + 8);
      if ((*(_BYTE *)(v13 + 16) & 4) != 0)
        v26 = *(unsigned __int8 *)(v25 + v15);
      else
        v26 = *(unsigned __int16 *)(v25 + 2 * v15);
    }
    *a2 = ((*a2 + v26) ^ ((*a2 + v26) << 16)) + (((*a2 + v26) ^ ((*a2 + v26) << 16)) >> 11);
  }
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v13, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v13 -= 2;
  return 1;
}

uint64_t WebCore::CSSProperty::isInLogicalPropertyGroup(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 354;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 95:
    case 96:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

float WebCore::FloatRect::FloatRect(float *a1, int *a2)
{
  float v2;
  float result;
  float v4;

  v2 = (float)a2[1];
  *a1 = (float)*a2;
  a1[1] = v2;
  result = (float)a2[2];
  v4 = (float)a2[3];
  a1[2] = result;
  a1[3] = v4;
  return result;
}

uint64_t WebCore::SourceBrush::pattern(WebCore::SourceBrush *this)
{
  if (*((_DWORD *)this + 20) == 2)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeCounterStyleNameInPrelude@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v6 = *(__int128 **)result;
  v5 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result == v5)
  {
    v8 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v7 = *(__int128 **)result;
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v7 = (__int128 *)((char *)v6 + 24);
    *(_QWORD *)result = (char *)v6 + 24;
  }
  while (1)
  {
    if ((unint64_t)v7 < v5 || (v8 & 1) != 0)
    {
      if ((unint64_t)v7 >= v5)
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v9 = *(_DWORD *)v7;
    }
    else
    {
      v9 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
      v8 = 1;
    }
    if ((v9 & 0x3F) != 0x10)
      break;
    v7 = (__int128 *)(*(_QWORD *)result + 24);
    *(_QWORD *)result = v7;
  }
  if (*(_QWORD *)result != v5)
    goto LABEL_14;
  v10 = *(_DWORD *)v6;
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_14;
  v11 = *((unsigned int *)v6 + 1);
  v12 = *((_QWORD *)v6 + 1);
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), v11 | ((unint64_t)((v10 >> 22) & 1) << 32));
  if ((unsigned __int16)result - 1 < 5
    || (unsigned __int16)result == 395
    || (unsigned __int16)result == 6
    || a2 != 4
    && ((unsigned __int16)result - 272 < 4 || (unsigned __int16)result - 354 <= 1))
  {
LABEL_14:
    *a3 = 0;
  }
  else
  {
    v13 = (v10 >> 22) & 1;
    v14[0] = v12;
    v14[1] = v11 | (v13 << 32);
    if ((unsigned __int16)result - 272 <= 0x5D)
    {
      return WTF::StringView::convertToASCIILowercaseAtom((WTF::StringView *)v14);
    }
    else
    {
      if ((_DWORD)v13)
        result = WTF::AtomStringImpl::add();
      else
        result = WTF::AtomStringImpl::add();
      *a3 = v14[2];
    }
  }
  return result;
}

__int128 **WebCore::CSSParserTokenRange::consumeComponentValue(__int128 **this)
{
  int v1;
  __int128 *v2;
  __int128 *v3;
  char v4;
  int v5;
  int v6;
  int v7;

  v1 = 0;
  v3 = *this;
  v2 = this[1];
  do
  {
    if (v3 == v2)
    {
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v4 & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v4 = 1;
    }
    else
    {
      *this = (__int128 *)((char *)v3 + 24);
    }
    v5 = *(_DWORD *)v3 >> 6;
    if (v5 == 2)
      v6 = -1;
    else
      v6 = 0;
    if (v5 == 1)
      v7 = 1;
    else
      v7 = v6;
    v1 += v7;
    if (!v1)
      break;
    v3 = *this;
  }
  while (*this < v2);
  return this;
}

uint64_t WebCore::CSSParserImpl::consumeBlockContent(uint64_t result, const WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserTokenRange *a3, unsigned int a4, char a5, char a6)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  __int128 *v11;
  int v12;
  __int128 *v14;
  WebCore::CSSParserTokenRange *v15;
  __int128 *v16;
  __int128 *v17;
  char v18;
  unsigned int v19;
  int v20;
  char v21;
  __int128 *v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  const WebCore::CSSParserTokenRange *v44;
  const WebCore::CSSParserTokenRange *v45;
  uint64_t v46;
  const WebCore::CSSParserTokenRange *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  __int128 v67;
  _QWORD v68[2];
  WebCore::CSSParserTokenRange *v69;
  __int128 v70;

  v8 = result;
  *(_QWORD *)&v70 = a2;
  *((_QWORD *)&v70 + 1) = a3;
  v9 = *(_QWORD *)(result + 88);
  if (v9)
  {
    v44 = a3;
    v45 = a2;
    v46 = *(_QWORD *)(v9 + 8);
    if (v46 && (a4 == 8 ? (v10 = 1) : (v10 = a4 == 1), a4 == 8 || a4 == 1))
    {
      if ((a6 & 1) == 0)
      {
        v47 = *(const WebCore::CSSParserTokenRange **)(v46 + 32);
        if (v47 == a2)
        {
          v49 = 0;
        }
        else
        {
          v48 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v47) >> 3) - 1;
          if (v48 >= *(unsigned int *)(v46 + 28))
          {
            __break(0xC471u);
LABEL_153:
            JUMPOUT(0x1940C8160);
          }
          v49 = *(unsigned int *)(*(_QWORD *)(v46 + 16) + 4 * v48);
        }
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v46 + 8) + 40))(*(_QWORD *)(v46 + 8), v49);
        v46 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 8);
      }
      v50 = *(_QWORD *)(v46 + 40) + 12 * *(unsigned int *)(v46 + 52);
      v51 = *(_QWORD *)(v46 + 56);
      if (v51 >= v50)
      {
        v10 = 1;
      }
      else
      {
        v52 = -1431655765 * (((unint64_t)v45 - *(_QWORD *)(v46 + 32)) >> 3);
        v53 = v51 + 12;
        do
        {
          if (*(_DWORD *)(v53 - 4) >= v52)
            break;
          *(_QWORD *)(v46 + 56) = v53;
          v26 = v53 >= v50;
          v53 += 12;
        }
        while (!v26);
      }
    }
    else
    {
      v10 = 0;
    }
    a2 = v45;
    a3 = v44;
  }
  else
  {
    v10 = 0;
  }
  v68[1] = &v70;
  v69 = (WebCore::CSSParserTokenRange *)&v70;
  v68[0] = v8;
  if (a2 != a3)
  {
    do
    {
      v67 = v70;
      v66[0] = &v70;
      v66[1] = &v67;
      v66[2] = &v69;
      v11 = (__int128 *)a2;
      if (a2 >= a3)
      {
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      v12 = *(_DWORD *)v11 & 0x3F;
      if (v12 > 15)
      {
        if (v12 == 20 || v12 == 16)
        {
          if (a2 == a3)
          {
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            }
          }
          else
          {
            *(_QWORD *)&v70 = (char *)a2 + 24;
          }
          goto LABEL_13;
        }
LABEL_86:
        if (!*(_DWORD *)(v8 + 8)
          && (!*(_BYTE *)v8 && !*(_DWORD *)(v8 + 4) || (*(_WORD *)(*(_QWORD *)(v8 + 64) + 51) & 0x200) == 0)
          || (a5 & 1) != 0
          || (result = WebCore::CSSParserImpl::consumeBlockContent(WebCore::CSSParserTokenRange,WebCore::StyleRuleType,WebCore::CSSParserImpl::OnlyDeclarations,WebCore::CSSParserImpl::ParsingStyleDeclarationsInRuleList)::$_2::operator()(v68),
              (result & 1) == 0))
        {
          result = WebCore::CSSParserImpl::consumeBlockContent(WebCore::CSSParserTokenRange,WebCore::StyleRuleType,WebCore::CSSParserImpl::OnlyDeclarations,WebCore::CSSParserImpl::ParsingStyleDeclarationsInRuleList)::$_3::operator()((uint64_t)v66);
        }
        goto LABEL_13;
      }
      if (!v12)
      {
        v14 = (__int128 *)a2;
        if (a2 >= a3)
        {
          v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if (v10)
        {
          v37 = *(_QWORD *)(v8 + 88);
          if (v37)
            v38 = *(_QWORD *)(v37 + 8);
          else
            v38 = 0;
          WebCore::CSSParserObserverWrapper::yieldCommentsBefore(v38, a2);
        }
        v15 = v69;
        v17 = *(__int128 **)v69;
        v16 = (__int128 *)*((_QWORD *)v69 + 1);
        if (*(__int128 **)v69 != v16)
        {
          do
          {
            if (v17 < v16 || (v18 & 1) != 0)
            {
              if (v17 >= v16)
                v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v19 = *(_DWORD *)v17;
            }
            else
            {
              v19 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
              v18 = 1;
            }
            if ((v19 & 0x3F) == 0x14)
              break;
            v20 = 0;
            v17 = *(__int128 **)v15;
            v21 = v18;
            do
            {
              if (v17 == v16)
              {
                v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                if ((v21 & 1) != 0)
                {
                  v17 = v16;
                }
                else
                {
                  *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                  *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                  v17 = *(__int128 **)v15;
                  v18 = 1;
                }
                v21 = 1;
              }
              else
              {
                v22 = v17;
                v17 = (__int128 *)((char *)v17 + 24);
                *(_QWORD *)v15 = v17;
              }
              v23 = *(_DWORD *)v22 >> 6;
              if (v23 == 2)
                v24 = -1;
              else
                v24 = 0;
              if (v23 == 1)
                v25 = 1;
              else
                v25 = v24;
              v20 += v25;
              if (v20)
                v26 = v17 >= v16;
              else
                v26 = 1;
            }
            while (!v26);
          }
          while (v17 != v16);
        }
        v27 = (__int128 *)v70;
        if ((unint64_t)v70 >= *((_QWORD *)&v70 + 1))
          v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
        if (v14 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
          v28 = (__int128 *)*((_QWORD *)&v70 + 1);
        else
          v28 = v14;
        if (v27 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
          v29 = (__int128 *)*((_QWORD *)&v70 + 1);
        else
          v29 = v27;
        result = WebCore::CSSParserImpl::consumeDeclaration(v8, v28, v29, a4);
        if (v10)
        {
          v39 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 8);
          v40 = *(_QWORD *)(v39 + 40) + 12 * *(unsigned int *)(v39 + 52);
          v41 = *(_QWORD *)(v39 + 56);
          if (v41 < v40)
          {
            v42 = -1431655765 * (((_QWORD)v70 - *(_QWORD *)(v39 + 32)) >> 3) + 1;
            v43 = v41 + 12;
            do
            {
              if (*(_DWORD *)(v43 - 4) >= v42)
                break;
              *(_QWORD *)(v39 + 56) = v43;
              v26 = v43 >= v40;
              v43 += 12;
            }
            while (!v26);
          }
        }
        if ((result & 1) == 0)
        {
          if ((v70 = v67, !*(_DWORD *)(v8 + 8))
            && (!*(_BYTE *)v8 && !*(_DWORD *)(v8 + 4) || (*(_WORD *)(*(_QWORD *)(v8 + 64) + 51) & 0x200) == 0)
            || (a5 & 1) != 0
            || (result = WebCore::CSSParserImpl::consumeBlockContent(WebCore::CSSParserTokenRange,WebCore::StyleRuleType,WebCore::CSSParserImpl::OnlyDeclarations,WebCore::CSSParserImpl::ParsingStyleDeclarationsInRuleList)::$_2::operator()(v68),
                (result & 1) == 0))
          {
            v70 = v67;
            while (1)
            {
              result = (uint64_t)v69;
              v30 = *(__int128 **)v69;
              v31 = *((_QWORD *)v69 + 1);
              if (*(_QWORD *)v69 == v31)
                break;
              if ((unint64_t)v30 >= v31)
              {
                v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                {
                  *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                  *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                  v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                }
              }
              if ((*(_DWORD *)v30 & 0x3F) == 0x14)
                break;
              WebCore::CSSParserTokenRange::consumeComponentValue((__int128 **)v69);
            }
          }
        }
        goto LABEL_13;
      }
      if (v12 != 2)
        goto LABEL_86;
      if ((*(_DWORD *)(v8 + 8)
         || (*(_BYTE *)v8 || *(_DWORD *)(v8 + 4)) && (*(_WORD *)(*(_QWORD *)(v8 + 64) + 51) & 0x200) != 0)
        && (a5 & 1) == 0)
      {
        WebCore::CSSParserImpl::consumeAtRule(&v65, v8, &v70, 4);
        result = v65;
        if (v65)
        {
          v54 = *(_BYTE *)(v65 + 4) & 0x1F;
          v55 = v54 > 0x18;
          v56 = (1 << v54) & 0x1851010;
          if (v55 || v56 == 0)
            goto LABEL_82;
          v58 = *(_DWORD *)(v8 + 60);
          if (!v58)
          {
            __break(0xC471u);
            goto LABEL_153;
          }
          v59 = *(_QWORD *)(v8 + 48) + 4128 * v58;
          v60 = (uint64_t *)(v59 - 16);
          v64 = v65;
          v65 = 0;
          v61 = *(unsigned int *)(v59 - 4);
          if ((_DWORD)v61 == *(_DWORD *)(v59 - 8))
          {
            WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>>((uint64_t)v60, (unint64_t)&v64);
          }
          else
          {
            v62 = *v60;
            v64 = 0;
            *(_QWORD *)(v62 + 8 * v61) = result;
            *(_DWORD *)(v59 - 4) = v61 + 1;
          }
          result = v64;
          v64 = 0;
          if (result)
          {
LABEL_82:
            if (*(_DWORD *)result == 1)
              result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, v32);
            else
              --*(_DWORD *)result;
          }
        }
      }
      else
      {
        WebCore::CSSParserImpl::consumeAtRule(&v65, v8, &v70, 8);
        result = v65;
        if (v65)
          goto LABEL_82;
      }
LABEL_13:
      a3 = (const WebCore::CSSParserTokenRange *)*((_QWORD *)&v70 + 1);
      a2 = (const WebCore::CSSParserTokenRange *)v70;
    }
    while ((_QWORD)v70 != *((_QWORD *)&v70 + 1));
  }
  if (v10)
  {
    v33 = *(_QWORD *)(v8 + 88);
    v34 = v33 ? *(_QWORD *)(v33 + 8) : 0;
    result = WebCore::CSSParserObserverWrapper::yieldCommentsBefore(v34, a2);
    if ((a6 & 1) == 0)
    {
      v35 = *(_QWORD *)(v8 + 88);
      if (v35)
      {
        v35 = *(_QWORD *)(v35 + 8);
        v36 = v35 + 8;
      }
      else
      {
        v36 = 8;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v70 + 1) - *(_QWORD *)(v35 + 32)) >> 3) >= *(unsigned int *)(v35 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1940C8168);
      }
      return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v36 + 48))(*(_QWORD *)v36, *(unsigned int *)(*(_QWORD *)(v35 + 16)- 0x5555555555555554 * ((uint64_t)(*((_QWORD *)&v70 + 1) - *(_QWORD *)(v35 + 32)) >> 3)));
    }
  }
  return result;
}

BOOL WebCore::CSSParserImpl::consumeDeclaration(uint64_t a1, __int128 *a2, __int128 *a3, unsigned int a4)
{
  __int128 *v8;
  char v9;
  unsigned int v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  unsigned int v15;
  WebCore::CSSParserTokenRange *v16;
  uint64_t v17;
  __int128 *v18;
  char v19;
  unsigned int v20;
  __int128 *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  WebCore::CSSParserTokenRange *v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;

  *(_QWORD *)&v41 = a2;
  *((_QWORD *)&v41 + 1) = a3;
  if (a3 == a2)
  {
    v10 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v9 = 1;
    {
      v10 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10;
    }
    v8 = a2;
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v8 = (__int128 *)((char *)a2 + 24);
    *(_QWORD *)&v41 = (char *)a2 + 24;
    v10 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v11 = a2;
  }
  v12 = (__int128 *)v41;
  do
  {
    v13 = v12;
    if (v8 < a3 || (v9 & 1) != 0)
    {
      if (v8 >= a3)
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v14 = v8;
      v15 = *(_DWORD *)v14;
    }
    else
    {
      v15 = v10 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
      v9 = 1;
      v10 = v15;
    }
    v12 = (__int128 *)((char *)v8 + 24);
    v8 = (__int128 *)((char *)v8 + 24);
  }
  while ((v15 & 0x3F) == 0x10);
  *(_QWORD *)&v41 = v13;
  LODWORD(v17) = WebCore::cssPropertyID(*((_QWORD *)v11 + 1), (const char *)(*((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32)));
  v18 = (__int128 *)((char *)v12 - 24);
  if ((__int128 *)((char *)v12 - 24) == a3)
  {
    v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
    v12 = a3;
  }
  else
  {
    *(_QWORD *)&v41 = v12;
  }
  if ((*(_DWORD *)v18 & 0x3F) != 0x13)
    return 0;
  v20 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v12 < a3 || (v19 & 1) != 0)
    {
      v21 = v12 >= a3 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v12;
      v22 = *(_DWORD *)v21;
    }
    else
    {
      v22 = v20 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v22;
      v19 = 1;
      v20 = v22;
    }
    if ((v22 & 0x3F) != 0x10)
      break;
    v12 = (__int128 *)((char *)v12 + 24);
    *(_QWORD *)&v41 = v12;
  }
  v23 = WebCore::CSSParserImpl::consumeTrailingImportantAndWhitespace((WebCore::CSSParserImpl *)&v41, v16);
  v24 = *(_DWORD *)(a1 + 60);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1940C8538);
  }
  v25 = (WebCore::CSSParserTokenRange *)v23;
  v26 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4128 * v24 - 4116);
  if (WebCore::isExposed(v17, (unsigned int *)(*(_QWORD *)(a1 + 64) + 54)))
    v17 = v17;
  else
    v17 = 0;
  if (!(_DWORD)v17 && (*(_DWORD *)v11 & 0x3F) == 0 && *((_DWORD *)v11 + 1) >= 3u)
  {
    v27 = *((_QWORD *)v11 + 1);
    if ((*(_DWORD *)v11 & 0x400000) != 0)
    {
      if (*(_BYTE *)v27 == 45 && *(_BYTE *)(v27 + 1) == 45)
      {
        WTF::AtomStringImpl::add();
LABEL_33:
        v40 = (WTF::StringImpl *)v42;
        WebCore::CSSParserImpl::consumeCustomPropertyValue(a1, (char *)v41, *((char **)&v41 + 1), (WebCore::CSSCustomPropertyValue *)&v40, (int)v25);
        v29 = v40;
        v40 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v28);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
    }
    else if (*(_WORD *)v27 == 45 && *(_WORD *)(v27 + 2) == 45)
    {
      WTF::AtomStringImpl::add();
      goto LABEL_33;
    }
  }
  if ((_DWORD)v25 && a4 <= 0x13 && ((1 << a4) & 0x80920) != 0)
  {
    v32 = *(_DWORD *)(a1 + 60);
    if (!v32)
      goto LABEL_73;
  }
  else
  {
    if ((_DWORD)v17)
    {
      v42 = v41;
      v30 = *(_DWORD *)(a1 + 60);
      if (!v30)
      {
        __break(0xC471u);
        JUMPOUT(0x1940C8548);
      }
      WebCore::CSSPropertyParser::parseValue(v17, v25, &v42, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48) + 4128 * v30 - 4128, a4);
    }
    v31 = *(_QWORD *)(a1 + 88);
    if (v31)
    {
      v34 = *(_QWORD *)(v31 + 8);
      if (v34)
      {
        if (a4 == 8 || a4 == 1)
        {
          v35 = *(_QWORD *)(v34 + 32);
          v36 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v35) >> 3);
          v37 = *(unsigned int *)(v34 + 28);
          if (v36 >= v37)
          {
            __break(0xC471u);
            JUMPOUT(0x1940C8588);
          }
          v38 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - v35) >> 3);
          if (v38 >= v37)
          {
            __break(0xC471u);
            JUMPOUT(0x1940C8590);
          }
          v39 = *(_DWORD *)(a1 + 60);
          if (!v39)
          {
LABEL_73:
            __break(0xC471u);
            JUMPOUT(0x1940C8420);
          }
          (*(void (**)(_QWORD, _QWORD, _QWORD, WebCore::CSSParserTokenRange *, BOOL))(**(_QWORD **)(v34 + 8)
                                                                                               + 64))(*(_QWORD *)(v34 + 8), *(unsigned int *)(*(_QWORD *)(v34 + 16) + 4 * v36), *(unsigned int *)(*(_QWORD *)(v34 + 16) + 4 * v38), v25, v26 != *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4128 * v39 - 4116));
        }
      }
    }
    v32 = *(_DWORD *)(a1 + 60);
    if (!v32)
    {
      __break(0xC471u);
      JUMPOUT(0x1940C8540);
    }
  }
  return v26 != *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4128 * v32 - 4116);
}

uint64_t WebCore::isExposed(int a1, unsigned int *a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;

  result = 0;
  if (a1 && ((a1 - 304) > 0x1E || ((1 << (a1 - 48)) & 0x7C010001) == 0))
  {
    result = 1;
    if (a2)
    {
      v4 = a1 - 23;
      v5 = *a2;
      switch(v4)
      {
        case 0:
          result = (v5 >> 9) & 1;
          break;
        case 11:
          result = (v5 >> 28) & 1;
          break;
        case 14:
        case 15:
          result = (v5 >> 21) & 1;
          break;
        case 16:
          result = (v5 >> 1) & 1;
          break;
        case 17:
        case 89:
        case 152:
        case 172:
        case 181:
        case 185:
        case 220:
        case 221:
        case 223:
          result = (v5 >> 5) & 1;
          break;
        case 22:
        case 180:
          result = (v5 >> 3) & 1;
          break;
        case 31:
        case 196:
        case 197:
        case 266:
        case 267:
        case 268:
        case 509:
        case 516:
          result = (v5 >> 27) & 1;
          break;
        case 46:
        case 47:
          result = (v5 >> 13) & 1;
          break;
        case 79:
          result = (v5 >> 4) & 1;
          break;
        case 86:
          result = (v5 >> 6) & 1;
          break;
        case 90:
          result = (v5 >> 7) & 1;
          break;
        case 123:
          result = (v5 >> 10) & 1;
          break;
        case 135:
          result = (v5 >> 11) & 1;
          break;
        case 149:
          result = (v5 >> 25) & 1;
          break;
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 489:
          result = (v5 >> 12) & 1;
          break;
        case 167:
          result = (v5 >> 14) & 1;
          break;
        case 192:
          result = v5 & 1;
          break;
        case 198:
          result = (v5 >> 15) & 1;
          break;
        case 199:
          result = HIWORD(v5) & 1;
          break;
        case 200:
          result = (v5 >> 17) & 1;
          break;
        case 206:
          result = (v5 >> 8) & 1;
          break;
        case 229:
        case 230:
          result = (v5 >> 18) & 1;
          break;
        case 239:
          result = (v5 >> 19) & 1;
          break;
        case 241:
          result = (v5 >> 20) & 1;
          break;
        case 248:
          result = (v5 >> 22) & 1;
          break;
        case 269:
          result = (v5 >> 29) & 1;
          break;
        case 278:
          result = (v5 >> 2) & 1;
          break;
        case 315:
          result = HIBYTE(v5) & 1;
          break;
        case 328:
          result = (v5 >> 23) & 1;
          break;
        case 396:
        case 397:
        case 398:
        case 399:
        case 492:
          result = (v5 >> 26) & 1;
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  unsigned int v10;

  result = 0;
  if ((a1 - 304) <= 0x1E && ((1 << (a1 - 48)) & 0x7C010001) != 0 || !a1)
    return result;
  v4 = *a2;
  result = 1;
  if (a1 > 202)
  {
    if (a1 <= 263)
    {
      if (a1 > 228)
      {
        switch(a1)
        {
          case 243:
          case 244:
          case 246:
            goto LABEL_25;
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
            return result;
          case 252:
          case 253:
            result = (v4 >> 18) & 1;
            break;
          default:
            v5 = (v4 >> 8) & 1;
            v7 = (v4 >> 19) & 1;
            if (a1 != 262)
              v7 = 1;
            v8 = a1 == 229;
            goto LABEL_36;
        }
      }
      else
      {
        switch(a1)
        {
          case 203:
            goto LABEL_55;
          case 204:
          case 208:
            goto LABEL_25;
          case 215:
            result = v4 & 1;
            break;
          case 219:
          case 220:
            return (v4 >> 27) & 1;
          case 221:
            result = (v4 >> 15) & 1;
            break;
          case 222:
            result = HIWORD(v4) & 1;
            break;
          case 223:
            result = (v4 >> 17) & 1;
            break;
          default:
            return result;
        }
      }
      return result;
    }
    if (a1 > 350)
    {
      if (a1 <= 511)
      {
        switch(a1)
        {
          case 419:
          case 420:
          case 421:
          case 422:
            return (v4 >> 26) & 1;
          default:
            v9 = a1 == 351;
            v10 = (v4 >> 23) & 1;
            goto LABEL_65;
        }
      }
      if (a1 > 531)
      {
        if (a1 == 532 || a1 == 539)
          return (v4 >> 27) & 1;
      }
      else if (a1 == 512)
      {
        return (v4 >> 12) & 1;
      }
      else if (a1 == 515)
      {
        return (v4 >> 26) & 1;
      }
      return result;
    }
    if (a1 > 288)
    {
      switch(a1)
      {
        case 289:
        case 290:
        case 291:
          return (v4 >> 27) & 1;
        case 292:
          result = (v4 >> 29) & 1;
          break;
        default:
          if (a1 == 301)
          {
            result = (v4 >> 2) & 1;
          }
          else if (a1 == 338)
          {
            result = HIBYTE(v4) & 1;
          }
          break;
      }
      return result;
    }
    v5 = (v4 >> 20) & 1;
    v7 = (v4 >> 22) & 1;
    if (a1 != 271)
      v7 = 1;
    v8 = a1 == 264;
LABEL_36:
    if (v8)
      return v5;
    else
      return v7;
  }
  if (a1 <= 111)
  {
    if (a1 > 53)
    {
      if (a1 <= 69)
      {
        v5 = (v4 >> 27) & 1;
        v7 = (v4 >> 13) & 1;
        if (a1 != 69)
          v7 = 1;
        v8 = a1 == 54;
        goto LABEL_36;
      }
      switch(a1)
      {
        case 'F':
          return (v4 >> 13) & 1;
        case 'f':
          return (v4 >> 4) & 1;
        case 'm':
          return (v4 >> 6) & 1;
      }
    }
    else
    {
      switch(a1)
      {
        case '"':
          result = (v4 >> 28) & 1;
          break;
        case '#':
        case '$':
        case ')':
        case '*':
        case '+':
        case ',':
          return result;
        case '%':
        case '&':
          result = (v4 >> 21) & 1;
          break;
        case '\'':
          result = (v4 >> 1) & 1;
          break;
        case '(':
LABEL_25:
          result = (v4 >> 5) & 1;
          break;
        case '-':
LABEL_55:
          result = (v4 >> 3) & 1;
          break;
        default:
          v9 = a1 == 23;
          v10 = (v4 >> 9) & 1;
LABEL_65:
          if (v9)
            result = v10;
          else
            result = 1;
          break;
      }
    }
  }
  else
  {
    if (a1 <= 157)
    {
      v5 = (v4 >> 5) & 1;
      v6 = (v4 >> 7) & 1;
      v7 = (v4 >> 10) & 1;
      if (a1 != 146)
        v7 = 1;
      if (a1 == 113)
        v7 = v6;
      v8 = a1 == 112;
      goto LABEL_36;
    }
    switch(a1)
    {
      case 172:
        result = (v4 >> 25) & 1;
        break;
      case 173:
      case 174:
      case 176:
      case 177:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
        return result;
      case 175:
        goto LABEL_25;
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
        return (v4 >> 12) & 1;
      case 190:
        result = (v4 >> 14) & 1;
        break;
      default:
        v5 = (v4 >> 11) & 1;
        v7 = (v4 >> 5) & 1;
        if (a1 != 195)
          v7 = 1;
        v8 = a1 == 158;
        goto LABEL_36;
    }
  }
  return result;
}

uint64_t WebCore::CSSPropertyNamesHash::hash(WebCore::CSSPropertyNamesHash *this, const char *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  switch((int)a2)
  {
    case 1:
      return v24
           + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
    case 2:
      goto LABEL_33;
    case 3:
      goto LABEL_32;
    case 4:
      goto LABEL_31;
    case 5:
      goto LABEL_30;
    case 6:
      goto LABEL_29;
    case 7:
      goto LABEL_28;
    case 8:
      goto LABEL_27;
    case 9:
      goto LABEL_26;
    case 10:
      goto LABEL_25;
    case 11:
      goto LABEL_24;
    case 12:
      goto LABEL_23;
    case 13:
      goto LABEL_22;
    case 14:
      goto LABEL_21;
    case 15:
      goto LABEL_20;
    case 16:
      goto LABEL_19;
    case 17:
      goto LABEL_18;
    case 18:
      goto LABEL_17;
    case 19:
      goto LABEL_16;
    case 20:
      goto LABEL_15;
    case 21:
      goto LABEL_14;
    case 22:
      goto LABEL_13;
    case 23:
      goto LABEL_12;
    case 24:
      goto LABEL_11;
    case 25:
      goto LABEL_10;
    case 26:
      goto LABEL_9;
    case 27:
      goto LABEL_8;
    case 28:
      goto LABEL_7;
    case 29:
      goto LABEL_6;
    case 30:
      goto LABEL_5;
    case 31:
      goto LABEL_4;
    case 32:
      goto LABEL_3;
    case 33:
      goto LABEL_2;
    default:
      LODWORD(v26) = WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 33)];
LABEL_2:
      HIDWORD(v26) = v26
                   + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 32)];
LABEL_3:
      LODWORD(v27) = HIDWORD(v26)
                   + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 31)];
LABEL_4:
      HIDWORD(v27) = v27
                   + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 30)];
LABEL_5:
      LODWORD(v28) = HIDWORD(v27)
                   + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 29)];
LABEL_6:
      HIDWORD(v28) = v28
                   + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 28)];
LABEL_7:
      LODWORD(v29) = HIDWORD(v28)
                   + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 27)];
LABEL_8:
      HIDWORD(v29) = v29
                   + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 26)];
LABEL_9:
      LODWORD(v30) = HIDWORD(v29)
                   + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 25)];
LABEL_10:
      HIDWORD(v30) = v30
                   + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                + 24)];
LABEL_11:
      v2 = HIDWORD(v30)
         + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 23)];
LABEL_12:
      v3 = v2
         + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 22)];
LABEL_13:
      v4 = v3
         + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 21)];
LABEL_14:
      v5 = v4
         + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 20)];
LABEL_15:
      v6 = v5
         + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 19)];
LABEL_16:
      v7 = v6
         + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 18)];
LABEL_17:
      v8 = v7
         + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 17)];
LABEL_18:
      v9 = v8
         + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 16)];
LABEL_19:
      v10 = v9
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 15)
                                                                                     + 1];
LABEL_20:
      v11 = v10
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 14)];
LABEL_21:
      v12 = v11
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 13)];
LABEL_22:
      v13 = v12
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 12)];
LABEL_23:
      v14 = v13
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 11)];
LABEL_24:
      v15 = v14
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 10)];
LABEL_25:
      v16 = v15
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 9)];
LABEL_26:
      v17 = v16
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 8)];
LABEL_27:
      v18 = v17
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 7)];
LABEL_28:
      v19 = v18
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 6)];
LABEL_29:
      v20 = v19
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 5)];
LABEL_30:
      v21 = v20
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 4)];
LABEL_31:
      v22 = v21
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 3)];
LABEL_32:
      v23 = v22
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 2)];
LABEL_33:
      v24 = v23
          + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 1)];
      return v24
           + WebCore::CSSPropertyNamesHash::hash(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
  }
}

uint64_t WebCore::CSSPropertyParser::parseValue(uint64_t a1, WebCore::CSSParserTokenRange *a2, __int128 *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10;
  char *v11;
  __int128 *v12;
  __int128 *v13;
  char v14;
  unsigned int v15;
  __int128 *v16;
  unsigned int v17;
  __int128 *v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  int *v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t result;
  char *v29;
  int v30;
  int *v31;
  WTF::StringImpl *v32;
  char v33;
  int v34;
  __int16 v35;
  int *v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  const WebCore::CSSParserContext *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD **v57;
  _DWORD *v58;
  __int128 v59;
  const WebCore::CSSParserContext *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  int *v64;
  int *v65;

  v10 = *(_DWORD *)(a5 + 12);
  v59 = *a3;
  v60 = (const WebCore::CSSParserContext *)a4;
  v61 = a5;
  v11 = (char *)*((_QWORD *)&v59 + 1);
  v12 = (__int128 *)*((_QWORD *)&v59 + 1);
  v13 = (__int128 *)v59;
  v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if ((unint64_t)v13 < *((_QWORD *)&v59 + 1) || (v14 & 1) != 0)
    {
      v16 = (unint64_t)v13 >= *((_QWORD *)&v59 + 1)
          ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
          : v13;
      v17 = *(_DWORD *)v16;
    }
    else
    {
      v17 = v15 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v14 = 1;
      v15 = v17;
    }
    if ((v17 & 0x3F) != 0x10)
      break;
    v13 = (__int128 *)((char *)v13 + 24);
    *(_QWORD *)&v59 = v13;
  }
  if (a6 <= 10)
  {
    if (a6 == 8)
    {
      if ((a1 - 47) < 7
        || (_DWORD)a1 == 460
        || (WebCore::CSSPropertyParser::parseValueStart((uint64_t)&v59, a1, a2) & 1) == 0)
      {
        goto LABEL_116;
      }
      return 1;
    }
    if (a6 == 5)
    {
      if (!WebCore::CSSPropertyParser::parseFontFaceDescriptor((uint64_t)&v59, a1))
        goto LABEL_116;
      return 1;
    }
    goto LABEL_17;
  }
  if (a6 != 11)
  {
    if (a6 == 21)
    {
      if ((WebCore::CSSPropertyParser::parsePropertyDescriptor((uint64_t)&v59, a1) & 1) == 0)
        goto LABEL_116;
      return 1;
    }
    if (a6 == 19)
    {
      if ((WebCore::CSSPropertyParser::parseFontPaletteValuesDescriptor(&v59, a1) & 1) == 0)
        goto LABEL_116;
      return 1;
    }
LABEL_17:
    if (v13 == *((__int128 **)&v59 + 1))
    {
      v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v14 & 1) == 0)
      {
        v15 = v15 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
      }
      v14 = 1;
    }
    else
    {
      v12 = (__int128 *)((char *)v13 + 24);
    }
    do
    {
      if ((unint64_t)v12 < *((_QWORD *)&v59 + 1) || (v14 & 1) != 0)
      {
        if ((unint64_t)v12 >= *((_QWORD *)&v59 + 1))
          v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v18 = v12;
        v19 = *(_DWORD *)v18;
      }
      else
      {
        v19 = v15 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
        v14 = 1;
        v15 = v19;
      }
      v12 = (__int128 *)((char *)v12 + 24);
    }
    while ((v19 & 0x3F) == 0x10);
    if ((*(_DWORD *)v13 & 0x3F) != 0)
      goto LABEL_27;
    v29 = (char *)v12 - 24;
    v30 = *((_DWORD *)v13 + 4);
    if (v30 < 0)
    {
      v30 = WebCore::cssValueKeywordID(*((_QWORD *)v13 + 1), *((unsigned int *)v13 + 1) | ((unint64_t)((*(_DWORD *)v13 >> 22) & 1) << 32));
      *((_DWORD *)v13 + 4) = v30;
    }
    if (v29 != v11 || (unsigned __int16)v30 - 1 > 4)
    {
LABEL_27:
      v63 = v59;
      if ((a1 - 459) <= 0x5E)
      {
        WebCore::CSSPropertyParser::parseShorthand((WebCore::CSSParserTokenRange **)&v59, (WTF::StringImpl *)a1, a2);
        if ((v33 & 1) != 0)
          return 1;
        v34 = 1;
LABEL_94:
        v42 = WebCore::classifyVariableRange((__int128 *)v63, *((__int128 **)&v63 + 1));
        if ((v42 & 0xFF000000000000) == 0 || (v42 & 0xFF00000000) == 0)
          goto LABEL_116;
        v43 = v60;
        v44 = WTF::fastCompactMalloc((WTF *)0x40);
        v45 = WTF::fastMalloc((WTF *)0x60);
        v46 = WebCore::CSSVariableData::CSSVariableData(v45, (char **)&v63, v43);
        *(_DWORD *)v44 = 2;
        v47 = (((*(unsigned __int8 *)(v44 + 6) >> 2) & 0x3F) << 18) | 0x10000;
        *(_WORD *)(v44 + 4) = -16384;
        *(_BYTE *)(v44 + 6) = BYTE2(v47);
        v64 = 0;
        *(_QWORD *)(v44 + 8) = v46;
        *(_QWORD *)(v44 + 16) = 0;
        *(_BYTE *)(v44 + 24) = 0;
        *(_BYTE *)(v44 + 40) = 0;
        *(_QWORD *)(v44 + 48) = 0;
        *(_QWORD *)(v44 + 56) = 0;
        WebCore::CSSVariableReferenceValue::cacheSimpleReference((WebCore::CSSVariableReferenceValue *)v44);
        WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref((uint64_t *)&v64, v48);
        if (v34)
        {
          v49 = WTF::fastCompactMalloc((WTF *)0x28);
          *(_DWORD *)v49 = 2;
          v50 = (*(unsigned __int8 *)(v49 + 6) << 16) & 0xFC0000 | 0x10000;
          *(_WORD *)(v49 + 4) = 28672;
          *(_BYTE *)(v49 + 6) = BYTE2(v50);
          *(_WORD *)(v49 + 8) = a1;
          *(_QWORD *)(v49 + 24) = 0;
          *(_QWORD *)(v49 + 32) = 0;
          *(_QWORD *)(v49 + 16) = v44;
          v51 = WebCore::shorthandForProperty(a1);
          if ((_DWORD)v20)
          {
            v52 = (unsigned __int16 *)v51;
            v53 = 2 * v20;
            do
            {
              v54 = *v52;
              *(_DWORD *)v49 += 2;
              v64 = (int *)v49;
              WebCore::CSSPropertyParser::addProperty((uint64_t)&v59, v54, a1, &v64, (int)a2, 0);
              if (v64)
              {
                if (*v64 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, v20);
                else
                  *v64 -= 2;
              }
              ++v52;
              v53 -= 2;
            }
            while (v53);
          }
          if (*(_DWORD *)v49 != 2)
          {
            *(_DWORD *)v49 -= 2;
            return 1;
          }
          v27 = (int *)v49;
          goto LABEL_111;
        }
        v64 = (int *)v44;
        goto LABEL_108;
      }
LABEL_28:
      WebCore::CSSPropertyParsing::parseStyleProperty(&v62, &v59, a1, 0, a4);
      v21 = (int *)v62;
      if (v62)
      {
        if ((_QWORD)v59 == *((_QWORD *)&v59 + 1))
        {
          v22 = v61;
          if ((*(_WORD *)(v62 + 4) & 0x100) != 0)
          {
            v21 = WebCore::staticCSSValuePool;
            WebCore::staticCSSValuePool[0] += 2;
            if ((_DWORD)a2)
              v35 = 0x2000;
            else
              v35 = 0;
            v24 = v35 & 0xFC00 | a1 & 0x3FF | ((WebCore::isInheritedPropertyTable[a1] != 0) << 15) | 0x4000;
            LOWORD(v64) = v24;
          }
          else
          {
            if ((_DWORD)a2)
              v23 = 0x2000;
            else
              v23 = 0;
            v24 = v23 & 0xFC00 | a1 & 0x3FF | ((WebCore::isInheritedPropertyTable[a1] != 0) << 15);
            LOWORD(v64) = v24;
            v62 = 0;
          }
          v65 = v21;
          v25 = *(unsigned int *)(v61 + 12);
          if ((_DWORD)v25 == *(_DWORD *)(v61 + 8))
          {
            WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSProperty>(v61, (unint64_t)&v64);
            v41 = v65;
            v65 = 0;
            if (v41)
            {
              if (*v41 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, v20);
              else
                *v41 -= 2;
            }
          }
          else
          {
            v26 = *(_QWORD *)v61 + 16 * v25;
            *(_WORD *)v26 = v24;
            *(_QWORD *)(v26 + 8) = v21;
            ++*(_DWORD *)(v22 + 12);
          }
          v27 = (int *)v62;
          v62 = 0;
          if (!v27)
            return 1;
          goto LABEL_38;
        }
        v62 = 0;
        if (*v21 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v20);
        else
          *v21 -= 2;
      }
      v34 = 0;
      goto LABEL_94;
    }
    v31 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v30 + 3088];
    *v31 += 2;
    WebCore::shorthandForProperty(a1);
    if ((_DWORD)v32)
    {
      v37 = WebCore::shorthandForProperty(a1);
      if ((_DWORD)v20)
      {
        v38 = (unsigned __int16 *)v37;
        v39 = 2 * v20;
        do
        {
          v40 = *v38;
          *v31 += 2;
          v64 = v31;
          WebCore::CSSPropertyParser::addProperty((uint64_t)&v59, v40, a1, &v64, (int)a2, 0);
          if (v64)
          {
            if (*v64 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, v20);
            else
              *v64 -= 2;
          }
          ++v38;
          v39 -= 2;
        }
        while (v39);
      }
      if (*v31 != 2)
      {
        *v31 -= 2;
        return 1;
      }
      v27 = v31;
      goto LABEL_111;
    }
    if ((int)a1 <= 193)
    {
      if ((a1 - 112) <= 0x3F && ((1 << (a1 - 112)) & 0x8000000300004001) != 0
        || (_DWORD)a1 == 40
        || (_DWORD)a1 == 67)
      {
        goto LABEL_129;
      }
    }
    else if ((a1 - 194) <= 0x34 && ((1 << (a1 + 62)) & 0x1E002800004403) != 0
           || (_DWORD)a1 == 286)
    {
LABEL_129:
      if (*v31 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v32);
      else
        *v31 -= 2;
      v63 = v59;
      goto LABEL_28;
    }
    v64 = v31;
LABEL_108:
    WebCore::CSSPropertyParser::addProperty((uint64_t)&v59, a1, 0, &v64, (int)a2, 0);
    v27 = v64;
    if (!v64)
      return 1;
LABEL_38:
    if (*v27 != 2)
    {
      *v27 -= 2;
      return 1;
    }
LABEL_111:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v20);
    return 1;
  }
  WebCore::CSSPropertyParsing::parseCounterStyleDescriptor((uint64_t)&v59, a1, a4, (WTF::StringImpl **)&v64);
  v36 = v64;
  if (v64)
  {
    if ((_QWORD)v59 != *((_QWORD *)&v59 + 1))
    {
      v64 = 0;
      if (*v36 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, a2);
      else
        *v36 -= 2;
      goto LABEL_116;
    }
    WebCore::CSSPropertyParser::addProperty((uint64_t)&v59, a1, 0, &v64, 0, 0);
    v27 = v64;
    v64 = 0;
    if (!v27)
      return 1;
    goto LABEL_38;
  }
LABEL_116:
  v55 = *(unsigned int *)(a5 + 12);
  if (v55 != v10)
  {
    v56 = 16 * v55 - 16 * v10;
    v57 = (_DWORD **)(*(_QWORD *)a5 + 16 * v10 + 8);
    do
    {
      v58 = *v57;
      *v57 = 0;
      if (v58)
      {
        if (*v58 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v58, a2);
        else
          *v58 -= 2;
      }
      v57 += 2;
      v56 -= 16;
    }
    while (v56);
  }
  result = 0;
  *(_DWORD *)(a5 + 12) = v10;
  return result;
}

uint64_t WebCore::cssValueKeywordID(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t result;
  uint64_t v33;
  int v34;
  unint64_t v35;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  BOOL v41;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t __n;
  unsigned __int8 v60;
  _BYTE v61[6];
  uint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if ((a2 - 55) < 0xFFFFFFCA)
    return 0;
  v2 = a2;
  if ((a2 & 0xFF00000000) == 0)
  {
    v33 = 0;
    while (1)
    {
      if (a2 == v33)
        goto LABEL_81;
      v34 = *(unsigned __int16 *)(a1 + 2 * v33);
      if ((v34 - 1) > 0x7E)
        return 0;
      if (v33 == 55)
        goto LABEL_81;
      v61[v33++ - 1] = v34 | (32 * ((v34 - 65) < 0x1A));
      if (a2 == v33)
      {
        if (v60 == 45)
          goto LABEL_82;
        goto LABEL_78;
      }
    }
  }
  v3 = 0;
  v4 = MEMORY[0x1E0CBF868];
  do
  {
    if (a2 == v3)
    {
      while (1)
      {
LABEL_81:
        __break(1u);
LABEL_82:
        v35 = v2 - 7;
        if (v2 < 7)
          return WebCore::findCSSValueKeyword((const char *)&v60, v2);
        if (*(_DWORD *)v61 != 1819308129 || *(unsigned __int16 *)&v61[4] != 11621)
          return WebCore::findCSSValueKeyword((const char *)&v60, v2);
        if (v35 >= 6)
          break;
        if (v35 >= 3)
          goto LABEL_93;
LABEL_99:
        memmove(&v62, &v61[5], v2 - 6);
        qmemcpy(v61, "webkit", sizeof(v61));
        ++v2;
LABEL_78:
        if (v2 < 0x38)
          return WebCore::findCSSValueKeyword((const char *)&v60, v2);
      }
      if ((_DWORD)v62 == 1953724787 && WORD2(v62) == 28005)
        return WebCore::findCSSValueKeyword((const char *)&v60, v2);
LABEL_93:
      v38 = (unsigned __int16)v62 == 24944 && BYTE2(v62) == 121;
      if (v38 || v35 >= 8 && v62 == 0x7373656C65726977)
        return WebCore::findCSSValueKeyword((const char *)&v60, v2);
      goto LABEL_99;
    }
    if (*(char *)(a1 + v3) < 1)
      return 0;
    if (v3 == 55)
      goto LABEL_81;
    v61[v3 - 1] = *(_BYTE *)(v4 + *(unsigned __int8 *)(a1 + v3));
    ++v3;
  }
  while (a2 != v3);
  v5 = v60;
  if (v60 != 45)
    goto LABEL_9;
  __n = v60;
  v39 = a2 - 7;
  if (a2 < 7uLL
    || (*(_DWORD *)v61 == 1819308129 ? (v40 = *(unsigned __int16 *)&v61[4] == 11621) : (v40 = 0), !v40))
  {
LABEL_105:
    v5 = v60;
    goto LABEL_10;
  }
  if (v39 < 6)
  {
    if (v39 < 3)
      goto LABEL_119;
  }
  else
  {
    v41 = (_DWORD)v62 == 1953724787 && WORD2(v62) == 28005;
    v5 = v60;
    if (v41)
      goto LABEL_10;
  }
  if ((unsigned __int16)v62 == 24944 && BYTE2(v62) == 121)
    goto LABEL_105;
  v5 = v60;
  if (v39 >= 8 && v62 == 0x7373656C65726977)
    goto LABEL_10;
LABEL_119:
  memmove(&v62, &v61[5], a2 - 6);
  v5 = __n;
  qmemcpy(v61, "webkit", sizeof(v61));
  ++v2;
LABEL_9:
  if (v2 >= 0x38)
    goto LABEL_81;
LABEL_10:
  if ((v2 - 1) > 0x35)
    return 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  switch((int)v2)
  {
    case 1:
      goto LABEL_16;
    case 2:
      goto LABEL_15;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_13;
    case 5:
      goto LABEL_12;
    case 6:
      goto LABEL_71;
    case 7:
      goto LABEL_70;
    case 8:
      goto LABEL_69;
    case 9:
      goto LABEL_68;
    case 10:
      goto LABEL_67;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_65;
    case 13:
      goto LABEL_64;
    case 14:
      goto LABEL_63;
    case 15:
      goto LABEL_62;
    case 16:
      goto LABEL_61;
    case 17:
      goto LABEL_60;
    case 18:
      goto LABEL_59;
    case 19:
      goto LABEL_58;
    case 20:
      goto LABEL_57;
    case 21:
      goto LABEL_56;
    case 22:
      goto LABEL_55;
    case 23:
      goto LABEL_54;
    case 24:
      goto LABEL_53;
    case 25:
      goto LABEL_52;
    case 26:
      goto LABEL_51;
    case 27:
      goto LABEL_50;
    case 28:
      goto LABEL_49;
    case 29:
      goto LABEL_48;
    case 30:
      goto LABEL_47;
    case 31:
      goto LABEL_46;
    case 32:
      goto LABEL_45;
    case 33:
      goto LABEL_44;
    case 34:
      goto LABEL_43;
    case 35:
      goto LABEL_42;
    case 36:
      goto LABEL_41;
    case 37:
      goto LABEL_40;
    case 38:
      goto LABEL_39;
    case 39:
      goto LABEL_38;
    case 40:
      goto LABEL_37;
    case 41:
      goto LABEL_36;
    case 42:
      goto LABEL_35;
    case 43:
      goto LABEL_34;
    case 44:
      goto LABEL_33;
    case 45:
      goto LABEL_32;
    case 46:
      goto LABEL_31;
    case 47:
      goto LABEL_30;
    case 48:
      goto LABEL_29;
    case 49:
      goto LABEL_28;
    case 50:
      goto LABEL_27;
    case 51:
      goto LABEL_26;
    case 52:
      goto LABEL_25;
    case 53:
      goto LABEL_24;
    default:
      v43 = WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v101];
LABEL_24:
      LODWORD(v44) = v43 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v100];
LABEL_25:
      HIDWORD(v44) = v44 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v99];
LABEL_26:
      LODWORD(v45) = HIDWORD(v44) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v98];
LABEL_27:
      HIDWORD(v45) = v45 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v97];
LABEL_28:
      LODWORD(v46) = HIDWORD(v45) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v96];
LABEL_29:
      HIDWORD(v46) = v46 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v95];
LABEL_30:
      LODWORD(v47) = HIDWORD(v46) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v94];
LABEL_31:
      HIDWORD(v47) = v47 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v93];
LABEL_32:
      LODWORD(v48) = HIDWORD(v47) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v92];
LABEL_33:
      HIDWORD(v48) = v48 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v91];
LABEL_34:
      LODWORD(v49) = HIDWORD(v48) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v90];
LABEL_35:
      HIDWORD(v49) = v49 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v89];
LABEL_36:
      LODWORD(v50) = HIDWORD(v49) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v88];
LABEL_37:
      HIDWORD(v50) = v50 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v87];
LABEL_38:
      LODWORD(v51) = HIDWORD(v50) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v86];
LABEL_39:
      HIDWORD(v51) = v51 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v85];
LABEL_40:
      LODWORD(v52) = HIDWORD(v51) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v84];
LABEL_41:
      HIDWORD(v52) = v52 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v83];
LABEL_42:
      LODWORD(v53) = HIDWORD(v52) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v82];
LABEL_43:
      HIDWORD(v53) = v53 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v81];
LABEL_44:
      LODWORD(v54) = HIDWORD(v53) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v80];
LABEL_45:
      HIDWORD(v54) = v54 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v79];
LABEL_46:
      LODWORD(v55) = HIDWORD(v54) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v78];
LABEL_47:
      HIDWORD(v55) = v55 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v77];
LABEL_48:
      LODWORD(v56) = HIDWORD(v55) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v76];
LABEL_49:
      HIDWORD(v56) = v56 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v75];
LABEL_50:
      LODWORD(v57) = HIDWORD(v56) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v74];
LABEL_51:
      HIDWORD(v57) = v57 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v73];
LABEL_52:
      LODWORD(v58) = HIDWORD(v57) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v72];
LABEL_53:
      HIDWORD(v58) = v58 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v71];
LABEL_54:
      v6 = HIDWORD(v58) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v70];
LABEL_55:
      v7 = v6 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v69];
LABEL_56:
      v8 = v7 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v68];
LABEL_57:
      v9 = v8 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v67];
LABEL_58:
      v10 = v9 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v66];
LABEL_59:
      v11 = v10 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v65];
LABEL_60:
      v12 = v11 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v64];
LABEL_61:
      v13 = v12 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v63];
LABEL_62:
      v14 = v13 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[HIBYTE(v62)];
LABEL_63:
      v15 = v14 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE6(v62)];
LABEL_64:
      v16 = v15 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE5(v62) + 1];
LABEL_65:
      v17 = v16 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE4(v62)];
LABEL_66:
      v18 = v17 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE3(v62) + 1];
LABEL_67:
      v19 = v18 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE2(v62)];
LABEL_68:
      v20 = v19 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE1(v62)];
LABEL_69:
      v21 = v20 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v62];
LABEL_70:
      v22 = v21 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[5]];
LABEL_71:
      v23 = v22 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[4]];
LABEL_12:
      v24 = v23 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[3]];
LABEL_13:
      v25 = v24 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[2] + 5];
LABEL_14:
      v26 = v25 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[1]];
LABEL_15:
      v27 = v26 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[0]];
LABEL_16:
      v28 = v27 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v5 + 1];
      if (v28 > 0x66C4)
        return 0;
      v29 = WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::lookup[v28];
      if (v29 < 0)
        return 0;
      v30 = (unsigned __int16)v29;
      v31 = (&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * (unsigned __int16)v29];
      if ((_DWORD)v5 != *v31 || strncmp(v61, v31 + 1, (v2 - 1)) || v31[v2])
        return 0;
      result = LOWORD((&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * v30 + 1]);
      break;
  }
  return result;
}

WTF *WebCore::createStyleProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  _QWORD *v7;
  unint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  WTF *result;
  uint64_t v18;
  _DWORD **v19;
  _DWORD *v20;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl **v26;
  WTF *v27;
  int v28;
  unsigned int v29;
  _BYTE v30[4096];
  unint64_t v31;
  _OWORD v32[4];
  uint64_t v33;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = (_QWORD *)v2;
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v8 = v5[3];
  v31 = v8;
  v27 = (WTF *)v30;
  v28 = 256;
  v29 = v8;
  if (v8 >= 0x101)
  {
    if (v8 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1940C9B54);
    }
    v25 = v8;
    v9 = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
    v28 = v25;
    v27 = v9;
    v8 = v29;
  }
  else
  {
    v9 = (WTF *)v30;
  }
  bzero(v9, 16 * v8);
  v26 = 0;
  WebCore::filterProperties((_DWORD *)1, v6, (uint64_t)&v27, &v31, (uint64_t)v32, (uint64_t *)&v26);
  WebCore::filterProperties(0, v6, (uint64_t)&v27, &v31, (uint64_t)v32, (uint64_t *)&v26);
  WebCore::ImmutableStyleProperties::createDeduplicating((uint64_t)v27 + 16 * v31, v29 - v31, v4, v7);
  if (v6[2])
  {
    v11 = v6[3];
    if ((_DWORD)v11)
    {
      v12 = 16 * v11;
      v13 = (_DWORD **)(*(_QWORD *)v6 + 8);
      do
      {
        v14 = *v13;
        *v13 = 0;
        if (v14)
        {
          if (*v14 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v10);
          else
            *v14 -= 2;
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
      v6[3] = 0;
    }
    v15 = *(WTF **)v6;
    if (v6 + 4 != *(unsigned int **)v6)
    {
      if (!v15)
      {
LABEL_41:
        *(_QWORD *)v6 = v6 + 4;
        v6[2] = 256;
        goto LABEL_14;
      }
      *(_QWORD *)v6 = 0;
      v6[2] = 0;
      WTF::fastFree(v15, v10);
      v15 = *(WTF **)v6;
    }
    if (v15)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_14:
  v16 = (uint64_t)v26;
  if (v26)
  {
    v22 = *((unsigned int *)v26 - 1);
    if ((_DWORD)v22)
    {
      v23 = v26;
      do
      {
        v24 = *v23;
        if (*v23 != (WTF::StringImpl *)-1)
        {
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v10);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        ++v23;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v16 - 16), v10);
  }
  result = v27;
  if (v29)
  {
    v18 = 16 * v29;
    v19 = (_DWORD **)((char *)v27 + 8);
    do
    {
      v20 = *v19;
      *v19 = 0;
      if (v20)
      {
        if (*v20 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v10);
        else
          *v20 -= 2;
      }
      v19 += 2;
      v18 -= 16;
    }
    while (v18);
    result = v27;
  }
  if (v30 != (_BYTE *)result && result != 0)
  {
    v27 = 0;
    v28 = 0;
    return (WTF *)WTF::fastFree(result, v10);
  }
  return result;
}

WTF *WTF::VectorTypeOperations<WebCore::CSSParserImpl::NestingContext>::destruct(WTF *result, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((unsigned int *)v3 + 1031);
      if ((_DWORD)v4)
      {
        v11 = (_DWORD **)*((_QWORD *)v3 + 514);
        v12 = 8 * v4;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*v13 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
            else
              --*v13;
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v5 = (WTF *)*((_QWORD *)v3 + 514);
      if (v5)
      {
        *((_QWORD *)v3 + 514) = 0;
        *((_DWORD *)v3 + 1030) = 0;
        WTF::fastFree(v5, a2);
      }
      v6 = *((unsigned int *)v3 + 3);
      if ((_DWORD)v6)
      {
        v8 = 16 * v6;
        v9 = (_DWORD **)(*(_QWORD *)v3 + 8);
        do
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (*v10 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
            else
              *v10 -= 2;
          }
          v9 += 2;
          v8 -= 16;
        }
        while (v8);
      }
      result = *(WTF **)v3;
      if ((WTF *)((char *)v3 + 16) != *(WTF **)v3 && result != 0)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v3 = (WTF *)((char *)v3 + 4128);
    }
    while (v3 != a2);
  }
  return result;
}

__int128 *WebCore::CSSParserTokenRange::consumeBlockCheckingForEditability(__int128 **a1, uint64_t a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  char v6;
  int v7;
  int v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  int v18;
  int v19;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v3 = *a1;
    }
  }
  else
  {
    v4 = *a1;
  }
  v5 = (__int128 *)((char *)v4 + 24);
  v7 = 0;
  if (a2)
  {
    v8 = *(unsigned __int8 *)(a2 + 124);
    while (1)
    {
      if (v3 == v2)
      {
        v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v9 & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v6 = 1;
        }
        v9 = 1;
      }
      else
      {
        *a1 = (__int128 *)((char *)v3 + 24);
      }
      v10 = *(_DWORD *)v3;
      v11 = *(_DWORD *)v3 >> 6;
      if (v11 == 2)
        v12 = -1;
      else
        v12 = 0;
      if (v11 == 1)
        v13 = 1;
      else
        v13 = v12;
      v7 += v13;
      if (v8 | *(_DWORD *)v3 & 0x3F)
        goto LABEL_14;
      if (*((_DWORD *)v3 + 1) != 19)
        break;
      v14 = *((_QWORD *)v3 + 1);
      if ((v10 & 0x400000) != 0)
      {
        if ((*(_BYTE *)v14 & 0xDF) != 0xD
          || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x57
          || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x45
          || (*(_BYTE *)(v14 + 3) & 0xDF) != 0x42
          || (*(_BYTE *)(v14 + 4) & 0xDF) != 0x4B
          || (*(_BYTE *)(v14 + 5) & 0xDF) != 0x49
          || (*(_BYTE *)(v14 + 6) & 0xDF) != 0x54
          || (*(_BYTE *)(v14 + 7) & 0xDF) != 0xD
          || (*(_BYTE *)(v14 + 8) & 0xDF) != 0x55
          || (*(_BYTE *)(v14 + 9) & 0xDF) != 0x53
          || (*(_BYTE *)(v14 + 10) & 0xDF) != 0x45
          || (*(_BYTE *)(v14 + 11) & 0xDF) != 0x52
          || (*(_BYTE *)(v14 + 12) & 0xDF) != 0xD
          || (*(_BYTE *)(v14 + 13) & 0xDF) != 0x4D
          || (*(_BYTE *)(v14 + 14) & 0xDF) != 0x4F
          || (*(_BYTE *)(v14 + 15) & 0xDF) != 0x44
          || (*(_BYTE *)(v14 + 16) & 0xDF) != 0x49
          || (*(_BYTE *)(v14 + 17) & 0xDF) != 0x46)
        {
          break;
        }
        v15 = *(unsigned __int8 *)(v14 + 18);
      }
      else
      {
        if ((*(_WORD *)v14 & 0xFFDF) != 0xD
          || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x57
          || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x45
          || (*(_WORD *)(v14 + 6) & 0xFFDF) != 0x42
          || (*(_WORD *)(v14 + 8) & 0xFFDF) != 0x4B
          || (*(_WORD *)(v14 + 10) & 0xFFDF) != 0x49
          || (*(_WORD *)(v14 + 12) & 0xFFDF) != 0x54
          || (*(_WORD *)(v14 + 14) & 0xFFDF) != 0xD
          || (*(_WORD *)(v14 + 16) & 0xFFDF) != 0x55
          || (*(_WORD *)(v14 + 18) & 0xFFDF) != 0x53
          || (*(_WORD *)(v14 + 20) & 0xFFDF) != 0x45
          || (*(_WORD *)(v14 + 22) & 0xFFDF) != 0x52
          || (*(_WORD *)(v14 + 24) & 0xFFDF) != 0xD
          || (*(_WORD *)(v14 + 26) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v14 + 28) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v14 + 30) & 0xFFDF) != 0x44
          || (*(_WORD *)(v14 + 32) & 0xFFDF) != 0x49
          || (*(_WORD *)(v14 + 34) & 0xFFDF) != 0x46)
        {
          break;
        }
        v15 = *(unsigned __int16 *)(v14 + 36);
      }
      if ((v15 & 0xFFFFFFDF) != 0x59)
        break;
      v8 = 1;
      *(_BYTE *)(a2 + 124) = 1;
LABEL_14:
      if (v7)
      {
        v3 = *a1;
        if (*a1 < v2)
          continue;
      }
      goto LABEL_76;
    }
    v8 = 0;
    goto LABEL_14;
  }
  do
  {
    if (v3 == v2)
    {
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v16 & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v6 = 1;
      }
      v16 = 1;
    }
    else
    {
      *a1 = (__int128 *)((char *)v3 + 24);
    }
    v17 = *(_DWORD *)v3 >> 6;
    if (v17 == 2)
      v18 = -1;
    else
      v18 = 0;
    if (v17 == 1)
      v19 = 1;
    else
      v19 = v18;
    v7 += v19;
    if (!v7)
      break;
    v3 = *a1;
  }
  while (*a1 < v2);
LABEL_76:
  if ((v6 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
  }
  if (v5 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    return v2;
  else
    return v5;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeDisplay@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  int v3;
  uint64_t v4;
  unint64_t v6;
  __int128 *v7;
  unint64_t v8;
  __int128 *v9;
  unint64_t v10;
  __int128 *v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int *v17;
  int *v18;
  int *v19;
  __int128 *v20;
  BOOL v21;
  unint64_t v23;
  __int128 *v24;
  __int128 *v25;
  char v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  int *v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  int *v38;

  v3 = (int)a2;
  v4 = this;
  v7 = *(__int128 **)this;
  v6 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)this >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v20 = *(__int128 **)this;
  if (*(_QWORD *)this >= v6)
  {
    v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v20 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v20 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v20 + 1), *((unsigned int *)v20 + 1) | ((unint64_t)((*(_DWORD *)v20 >> 22) & 1) << 32));
    *((_DWORD *)v20 + 4) = this;
  }
  v21 = (unsigned __int16)this - 368 > 0x19 || ((1 << (this - 112)) & 0x305BFFB) == 0;
  if (v21 && (unsigned __int16)this != 6)
  {
LABEL_3:
    v9 = *(__int128 **)v4;
    v8 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 == v8)
      goto LABEL_16;
    if (*(_QWORD *)v4 >= v8)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) == 0)
    {
      this = *((unsigned int *)v9 + 4);
      if ((this & 0x80000000) != 0)
      {
        this = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = this;
      }
      v31 = (unsigned __int16)this;
      if ((unsigned __int16)this - 389 < 2)
      {
        WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)v4, a2, &v38);
        this = (uint64_t)v38;
        if (v38)
        {
          if (*v38 == 2)
            this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v32);
          else
            *v38 -= 2;
        }
        v30 = 382;
        if (v31 == 389)
          v30 = 383;
        goto LABEL_52;
      }
    }
    v11 = *(__int128 **)v4;
    v10 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 == v10)
    {
      v12 = 0;
      v13 = 0;
LABEL_8:
      v14 = 388;
LABEL_9:
      if (v12)
      {
        if (v13 != 367)
        {
          v15 = v14 - 382;
          if (v13 == 366)
          {
            v14 = 383;
            switch(v15)
            {
              case 0u:
                goto LABEL_51;
              case 3u:
                goto LABEL_55;
              case 5u:
                goto LABEL_87;
              default:
                goto LABEL_86;
            }
          }
          else
          {
            v14 = 383;
            switch(v15)
            {
              case 0u:
                goto LABEL_51;
              case 3u:
LABEL_55:
                v14 = 386;
                break;
              case 5u:
LABEL_87:
                v14 = 369;
                break;
              default:
LABEL_86:
                v14 = 366;
                break;
            }
          }
          goto LABEL_51;
        }
        if (v14 - 391 < 3)
          goto LABEL_50;
        if (v14 == 87)
        {
          v14 = 391;
          goto LABEL_50;
        }
      }
      else if (v14 - 391 < 3 || v14 == 87)
      {
LABEL_50:
        if (v3 == 4)
        {
LABEL_51:
          v30 = v14;
LABEL_52:
          v19 = &WebCore::staticCSSValuePool[4 * v30 + 3088];
          *v19 += 2;
          goto LABEL_53;
        }
LABEL_16:
        v19 = 0;
LABEL_53:
        *a3 = v19;
        return this;
      }
      if (v14 == 388)
      {
        v14 = 367;
      }
      else if (v14 >= 0x48E)
      {
        __break(0xC471u);
        JUMPOUT(0x1940CA564);
      }
      goto LABEL_51;
    }
    v16 = 0;
    v14 = 0;
    v12 = 0;
    v13 = 0;
    v17 = WebCore::staticCSSValuePool;
    v18 = &dword_1ECE90000;
    while (1)
    {
      if ((unint64_t)v11 >= v10)
      {
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v18[312] & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          *((_BYTE *)v18 + 1248) = 1;
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v11 & 0x3F) != 0)
        goto LABEL_16;
      this = *((unsigned int *)v11 + 4);
      if ((this & 0x80000000) != 0)
      {
        v33 = v17;
        this = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        v17 = v33;
        *((_DWORD *)v11 + 4) = this;
      }
      if ((unsigned __int16)this - 366 > 0x16)
        goto LABEL_98;
      v34 = 1 << (this - 110);
      if ((v34 & 0x690010) == 0)
        break;
LABEL_73:
      if (v16)
        goto LABEL_16;
      v35 = v17;
      v16 = 1;
      v14 = (unsigned __int16)this;
LABEL_75:
      this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)v4, a2);
      v17 = v35;
      if ((this & 0xFF0000) != 0)
      {
        if ((unsigned __int16)this >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1940CA688);
        }
        this = (uint64_t)&v35[4 * (unsigned __int16)this + 3088];
        v36 = *(_DWORD *)this;
        *(_DWORD *)this += 2;
        if (v36)
        {
          *(_DWORD *)this = v36;
        }
        else
        {
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, a2);
          v17 = v35;
        }
      }
      v11 = *(__int128 **)v4;
      v10 = *(_QWORD *)(v4 + 8);
      v18 = &dword_1ECE90000;
      if (*(_QWORD *)v4 == v10)
      {
        if (v16)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if ((v34 & 3) != 0)
    {
      if (v12)
        goto LABEL_16;
      v35 = v17;
      v12 = 1;
      v13 = (unsigned __int16)this;
      goto LABEL_75;
    }
LABEL_98:
    if ((unsigned __int16)this != 87)
      goto LABEL_16;
    goto LABEL_73;
  }
  v24 = *(__int128 **)v4;
  v23 = *(_QWORD *)(v4 + 8);
  if (*(_QWORD *)v4 == v23)
  {
    v26 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v25 = *(__int128 **)v4;
    v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v25 = (__int128 *)((char *)v24 + 24);
    *(_QWORD *)v4 = (char *)v24 + 24;
  }
  while (1)
  {
    if ((unint64_t)v25 < v23 || (v26 & 1) != 0)
    {
      if ((unint64_t)v25 >= v23)
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v27 = *(_DWORD *)v25;
    }
    else
    {
      v27 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
      v26 = 1;
    }
    if ((v27 & 0x3F) != 0x10)
      break;
    v25 = (__int128 *)(*(_QWORD *)v4 + 24);
    *(_QWORD *)v4 = v25;
  }
  if ((*(_DWORD *)v24 & 0x3F) != 0)
  {
    LOWORD(v28) = 0;
  }
  else
  {
    v28 = *((_DWORD *)v24 + 4);
    if (v28 < 0)
    {
      v28 = WebCore::cssValueKeywordID(*((_QWORD *)v24 + 1), *((unsigned int *)v24 + 1) | ((unint64_t)((*(_DWORD *)v24 >> 22) & 1) << 32));
      *((_DWORD *)v24 + 4) = v28;
    }
    if ((unsigned __int16)v28 >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1940CA650);
    }
  }
  this = (uint64_t)&WebCore::staticCSSValuePool[4 * (unsigned __int16)v28 + 3088];
  v29 = *(_DWORD *)this;
  *(_DWORD *)this += 2;
  if ((*(_WORD *)(this + 4) & 0x7F) == 0x50
    && ((v37 = *(unsigned __int16 *)(this + 8), (v37 - 391) < 3) || v37 == 87)
    && v3 != 4)
  {
    *a3 = 0;
    if (v29)
      *(_DWORD *)this = v29;
    else
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, a2);
  }
  else
  {
    *a3 = (int *)this;
  }
  return this;
}

void WebCore::CSSPropertyParserHelpers::consumeCounterStyleSystem(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  __int128 *v11;
  unint64_t v12;
  __int128 *v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t v16;
  __int128 *v17;
  int v18;
  unint64_t v19;
  __int128 *v20;
  __int128 *v21;
  char v22;
  unsigned int v23;
  int v24;
  int *v25;
  int v26;
  __int128 *v27;
  __int128 *v28;
  char v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  __int128 *v33;
  __int128 *v34;
  char v35;
  unsigned int v36;
  int v37;
  int *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  __int128 *v44;
  __int128 *v45;
  char v46;
  unsigned int v47;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  int v54;
  int *v55;

  v8 = *this;
  v7 = this[1];
  if (*this >= v7)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v8 & 0x3F) == 0)
  {
    v9 = *this;
    if (*this >= v7)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) == 0)
    {
      v18 = *((_DWORD *)v9 + 4);
      if (v18 < 0)
      {
        v18 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = v18;
      }
      if ((unsigned __int16)v18 - 977 < 2
        || (unsigned __int16)v18 - 979 < 2
        || (unsigned __int16)v18 == 728)
      {
        v20 = *this;
        v19 = (unint64_t)this[1];
        if (*this == (__int128 *)v19)
        {
          v22 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          v21 = *this;
          v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v21 = (__int128 *)((char *)v20 + 24);
          *this = (__int128 *)((char *)v20 + 24);
        }
        while (1)
        {
          if ((unint64_t)v21 < v19 || (v22 & 1) != 0)
          {
            if ((unint64_t)v21 >= v19)
              v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v23 = *(_DWORD *)v21;
          }
          else
          {
            v23 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v23;
            v22 = 1;
          }
          if ((v23 & 0x3F) != 0x10)
            break;
          v21 = (__int128 *)((char *)*this + 24);
          *this = v21;
        }
        if ((*(_DWORD *)v20 & 0x3F) == 0)
        {
          v24 = *((_DWORD *)v20 + 4);
          if (v24 < 0)
          {
            v24 = WebCore::cssValueKeywordID(*((_QWORD *)v20 + 1), *((unsigned int *)v20 + 1) | ((unint64_t)((*(_DWORD *)v20 >> 22) & 1) << 32));
            *((_DWORD *)v20 + 4) = v24;
          }
          if ((unsigned __int16)v24 >= 0x48Eu)
          {
            __break(0xC471u);
            JUMPOUT(0x1940CAD64);
          }
          goto LABEL_51;
        }
        goto LABEL_50;
      }
    }
  }
  v10 = *((unsigned __int8 *)a2 + 48);
  v11 = *this;
  if (v10 == 4)
  {
    v12 = (unint64_t)this[1];
    if ((unint64_t)v11 >= v12)
    {
      v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v11 = *this;
      }
    }
    else
    {
      v13 = *this;
    }
    if ((*(_BYTE *)v13 & 0x3F) == 0)
    {
      if ((unint64_t)v11 >= v12)
      {
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v11 & 0x3F) != 0)
      {
        v11 = *this;
      }
      else
      {
        v26 = *((_DWORD *)v11 + 4);
        if (v26 < 0)
        {
          v26 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
          *((_DWORD *)v11 + 4) = v26;
        }
        v11 = *this;
        if ((unsigned __int16)v26 - 981 <= 6)
        {
          v27 = this[1];
          if (v11 == v27)
          {
            v29 = 1;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
            v28 = *this;
            v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v28 = (__int128 *)((char *)v11 + 24);
            *this = (__int128 *)((char *)v11 + 24);
          }
          while (1)
          {
            if (v28 < v27 || (v29 & 1) != 0)
            {
              if (v28 >= v27)
                v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v30 = *(_DWORD *)v28;
            }
            else
            {
              v30 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
              v29 = 1;
            }
            if ((v30 & 0x3F) != 0x10)
              break;
            v28 = (__int128 *)((char *)*this + 24);
            *this = v28;
          }
          if ((*(_DWORD *)v11 & 0x3F) == 0)
          {
            v24 = *((_DWORD *)v11 + 4);
            if (v24 < 0)
            {
              v24 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
              *((_DWORD *)v11 + 4) = v24;
            }
            if ((unsigned __int16)v24 >= 0x48Eu)
            {
              __break(0xC471u);
              JUMPOUT(0x1940CAB20);
            }
            goto LABEL_51;
          }
LABEL_50:
          LOWORD(v24) = 0;
LABEL_51:
          v25 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v24 + 3088];
          *v25 += 2;
          *a3 = v25;
          return;
        }
      }
    }
  }
  v14 = (unint64_t)this[1];
  if ((unint64_t)v11 >= v14)
  {
    v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v11 = *this;
    }
  }
  else
  {
    v15 = v11;
  }
  if ((*(_BYTE *)v15 & 0x3F) == 0)
  {
    if ((unint64_t)v11 >= v14)
    {
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      v11 = *this;
    }
    else
    {
      v43 = *((_DWORD *)v11 + 4);
      if (v43 < 0)
      {
        v43 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v43;
      }
      v11 = *this;
      if ((unsigned __int16)v43 == 458)
      {
        v44 = this[1];
        if (v11 == v44)
        {
          v46 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          v45 = *this;
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v45 = (__int128 *)((char *)v11 + 24);
          *this = (__int128 *)((char *)v11 + 24);
        }
        while (1)
        {
          if (v45 < v44 || (v46 & 1) != 0)
          {
            if (v45 >= v44)
              v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v47 = *(_DWORD *)v45;
          }
          else
          {
            v47 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v47;
            v46 = 1;
          }
          if ((v47 & 0x3F) != 0x10)
            break;
          v45 = (__int128 *)((char *)*this + 24);
          *this = v45;
        }
        if ((*(_DWORD *)v11 & 0x3F) != 0)
        {
          LOWORD(v48) = 0;
        }
        else
        {
          v48 = *((_DWORD *)v11 + 4);
          if (v48 < 0)
          {
            v48 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
            *((_DWORD *)v11 + 4) = v48;
          }
          if ((unsigned __int16)v48 >= 0x48Eu)
          {
            __break(0xC471u);
            JUMPOUT(0x1940CAE0CLL);
          }
        }
        v38 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v48 + 3088];
        *v38 += 2;
        if (*this == this[1])
        {
          *a3 = v38;
          return;
        }
        WebCore::CSSPropertyParserHelpers::consumeInteger(this, &v55);
        v50 = (uint64_t)v55;
        if (v55)
        {
          v55 = 0;
          v51 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v51 = 2;
          v52 = (*(unsigned __int8 *)(v51 + 6) << 16) & 0xFC0000 | 0x10000;
          *(_BYTE *)(v51 + 7) = 1;
          *(_QWORD *)(v51 + 8) = v38;
          *(_QWORD *)(v51 + 16) = v50;
          *(_WORD *)(v51 + 4) = -18432;
          *(_BYTE *)(v51 + 6) = BYTE2(v52);
          *a3 = v51;
          v53 = v55;
          v55 = 0;
          if (!v53)
            return;
          if (*v53 != 2)
          {
            *v53 -= 2;
            return;
          }
        }
        else
        {
          *a3 = 0;
          v54 = *v38 - 2;
          if (*v38 != 2)
          {
LABEL_119:
            *v38 = v54;
            return;
          }
          v53 = v38;
        }
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v53, v49);
        return;
      }
    }
  }
  v16 = (unint64_t)this[1];
  if ((unint64_t)v11 >= v16)
  {
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v11 & 0x3F) != 0)
    goto LABEL_19;
  v17 = *this;
  if ((unint64_t)*this >= v16)
  {
    v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v17 & 0x3F) != 0)
    goto LABEL_19;
  v31 = *((_DWORD *)v17 + 4);
  if (v31 < 0)
  {
    v31 = WebCore::cssValueKeywordID(*((_QWORD *)v17 + 1), *((unsigned int *)v17 + 1) | ((unint64_t)((*(_DWORD *)v17 >> 22) & 1) << 32));
    *((_DWORD *)v17 + 4) = v31;
  }
  if ((unsigned __int16)v31 != 988)
  {
LABEL_19:
    *a3 = 0;
  }
  else
  {
    v33 = *this;
    v32 = (unint64_t)this[1];
    if (*this == (__int128 *)v32)
    {
      v35 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v34 = *this;
      v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v34 = (__int128 *)((char *)v33 + 24);
      *this = (__int128 *)((char *)v33 + 24);
    }
    while (1)
    {
      if ((unint64_t)v34 < v32 || (v35 & 1) != 0)
      {
        if ((unint64_t)v34 >= v32)
          v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v36 = *(_DWORD *)v34;
      }
      else
      {
        v36 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v36;
        v35 = 1;
      }
      if ((v36 & 0x3F) != 0x10)
        break;
      v34 = (__int128 *)((char *)*this + 24);
      *this = v34;
    }
    if ((*(_DWORD *)v33 & 0x3F) != 0)
    {
      LOWORD(v37) = 0;
    }
    else
    {
      v37 = *((_DWORD *)v33 + 4);
      if (v37 < 0)
      {
        v37 = WebCore::cssValueKeywordID(*((_QWORD *)v33 + 1), *((unsigned int *)v33 + 1) | ((unint64_t)((*(_DWORD *)v33 >> 22) & 1) << 32));
        *((_DWORD *)v33 + 4) = v37;
      }
      if ((unsigned __int16)v37 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1940CADB0);
      }
    }
    v38 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v37 + 3088];
    *v38 += 2;
    WebCore::CSSPropertyParserHelpers::consumeCounterStyleName(this, (uint64_t *)&v55);
    v40 = (uint64_t)v55;
    if (v55)
    {
      v41 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v41 = 2;
      v42 = (*(unsigned __int8 *)(v41 + 6) << 16) & 0xFC0000;
      *(_BYTE *)(v41 + 7) = 1;
      *(_QWORD *)(v41 + 8) = v38;
      *(_QWORD *)(v41 + 16) = v40;
      *(_WORD *)(v41 + 4) = -18432;
      *(_BYTE *)(v41 + 6) = (v42 | 0x10000u) >> 16;
      *a3 = v41;
      return;
    }
    *a3 = 0;
    v54 = *v38 - 2;
    if (*v38 != 2)
      goto LABEL_119;
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v39);
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeCounterStyleName@<X0>(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  int v12;
  WTF::StringImpl *v13;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
  {
    v6 = 0;
  }
  else
  {
    result = *((unsigned int *)v5 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
      *((_DWORD *)v5 + 4) = result;
    }
    v6 = (unsigned __int16)result;
    if ((unsigned __int16)result == 6)
      goto LABEL_16;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)this, (WebCore::CSSParserTokenRange *)((v6 - 272) < 0x5E), &v13);
  v8 = v13;
  if (!v13)
  {
LABEL_16:
    *a2 = 0;
    return result;
  }
  v13 = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 2;
  v11 = *(_BYTE *)(v9 + 6);
  *(_WORD *)(v9 + 4) = 63;
  *(_BYTE *)(v9 + 6) = v11 & 0xFC;
  *(_QWORD *)(v9 + 8) = v8;
  v12 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  *a2 = v9;
  if (v12)
    *(_DWORD *)v8 = v12;
  else
    WTF::StringImpl::destroy(v8, v10);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeShadow(WebCore::CSSPropertyParserHelpers *this, unsigned int **a2, const WebCore::CSSParserContext *a3, unsigned __int8 a4)
{
  unsigned int *v7;
  WebCore::CSSParserTokenRange *v8;
  uint64_t result;
  int *v10;
  unsigned __int8 v11;

  v11 = a4;
  v7 = *a2;
  if (*a2 >= a2[1])
  {
    v7 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id(v7) == 6)
    result = WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)a2, v8, &v10);
  else
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithoutSingleValueOptimization<WTF::RefPtr<WebCore::CSSShadowValue,WTF::RawPtrTraits<WebCore::CSSShadowValue>,WTF::DefaultRefDerefTraits<WebCore::CSSShadowValue>> (&)(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,BOOL,BOOL),WebCore::CSSParserContext const&,BOOL &,BOOL &>((__int128 **)a2, (void (*)(_DWORD **__return_ptr, __int128 **, uint64_t, _QWORD, _QWORD))WebCore::CSSPropertyParserHelpers::consumeSingleShadow, (uint64_t)a3, &v11, &v11, &v10);
  *(_QWORD *)this = v10;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeContent@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v7;
  WTF::StringImpl *v8;
  __int128 *v9;
  __int128 *v10;
  WTF *v11;
  unsigned int v12;
  WTF *v13;
  uint64_t result;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int *v25;
  __int128 *v26;
  __int128 *v27;
  char v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF *v31;
  int v32;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  int v39;
  int v40;
  int v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  _BYTE v45[32];
  _BYTE *v46;
  int v47;
  int v48;
  _BYTE v49[32];
  _DWORD *v50;
  _DWORD *v51;
  WTF *v52;
  int v53;
  int v54;
  _BYTE v55[32];
  _DWORD *v56;
  _DWORD *v57;
  int *v58;
  int *v59;
  uint64_t v60;
  _BYTE v61[32];
  WTF *v62;
  uint64_t v63;
  _BYTE v64[32];
  int **v65[2];

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v23 = *((_DWORD *)v7 + 4);
  if (v23 < 0)
  {
    v23 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v23;
  }
  if ((unsigned __int16)v23 == 90 || (unsigned __int16)v23 == 6)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
    if ((result & 0xFF0000) != 0)
    {
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1940CB740);
      }
      v25 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
      *v25 += 2;
    }
    else
    {
      v25 = 0;
    }
    *a3 = v25;
  }
  else
  {
LABEL_3:
    v65[0] = (int **)this;
    v65[1] = (int **)a2;
    v62 = (WTF *)v64;
    v63 = 4;
    if ((WebCore::CSSPropertyParserHelpers::consumeContent(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&)::$_0::operator()(v65, (uint64_t)&v62, 0) & 1) != 0)
    {
      v10 = *this;
      v9 = this[1];
      if (*this >= v9)
      {
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v10 & 0x3F) == 6 && *((_WORD *)v10 + 8) == 47)
      {
        v26 = *this;
        if (*this == v9)
        {
          v28 = 1;
          {
            v27 = v9;
          }
          else
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v27 = *this;
          }
        }
        else
        {
          v27 = (__int128 *)((char *)v26 + 24);
          *this = (__int128 *)((char *)v26 + 24);
        }
        while (1)
        {
          if (v27 < v9 || (v28 & 1) != 0)
          {
            if (v27 >= v9)
              v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v29 = *(_DWORD *)v27;
          }
          else
          {
            v29 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29;
            v28 = 1;
          }
          if ((v29 & 0x3F) != 0x10)
            break;
          v27 = (__int128 *)((char *)*this + 24);
          *this = v27;
        }
        v59 = (int *)v61;
        v60 = 4;
        if ((WebCore::CSSPropertyParserHelpers::consumeContent(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&)::$_0::operator()(v65, (uint64_t)&v59, 1) & 1) != 0)
        {
          v52 = (WTF *)v55;
          v53 = 4;
          v31 = v62;
          if (v62 == (WTF *)v64)
          {
            v32 = HIDWORD(v63);
            memcpy(v55, v64, 8 * HIDWORD(v63));
          }
          else
          {
            v62 = (WTF *)v64;
            v52 = v31;
            v40 = v63;
            v32 = HIDWORD(v63);
            LODWORD(v63) = 4;
            v53 = v40;
          }
          HIDWORD(v63) = 0;
          v54 = v32;
          WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v52, (uint64_t *)&v56);
          v57 = v56;
          v46 = v49;
          v47 = 4;
          v33 = (uint64_t)v59;
          if (v59 == (int *)v61)
          {
            v34 = HIDWORD(v60);
            memcpy(v49, v61, 8 * HIDWORD(v60));
          }
          else
          {
            v59 = (int *)v61;
            v46 = (_BYTE *)v33;
            v41 = v60;
            v34 = HIDWORD(v60);
            LODWORD(v60) = 4;
            v47 = v41;
          }
          HIDWORD(v60) = 0;
          v48 = v34;
          WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v46, (uint64_t *)&v50);
          v51 = v50;
          WebCore::CSSValuePair::createSlashSeparated((uint64_t *)&v57, (uint64_t *)&v51, (uint64_t *)&v58);
          *a3 = v58;
          v58 = 0;
          v36 = v51;
          v51 = 0;
          if (v36)
          {
            if (*v36 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v35);
            else
              *v36 -= 2;
          }
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v35);
          v38 = v57;
          v57 = 0;
          if (v38)
          {
            if (*v38 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v37);
            else
              *v38 -= 2;
          }
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v37);
        }
        else
        {
          *a3 = 0;
        }
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v30);
      }
      else
      {
        v42 = (WTF *)v45;
        v43 = 4;
        v11 = v62;
        if (v62 == (WTF *)v64)
        {
          v12 = HIDWORD(v63);
          memcpy(v45, v64, 8 * HIDWORD(v63));
        }
        else
        {
          v62 = (WTF *)v64;
          v42 = v11;
          v39 = v63;
          v12 = HIDWORD(v63);
          LODWORD(v63) = 4;
          v43 = v39;
        }
        HIDWORD(v63) = 0;
        v44 = v12;
        WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v42, (uint64_t *)&v59);
        *a3 = v59;
        if (v44)
        {
          v20 = v42;
          v21 = 8 * v44;
          do
          {
            v22 = *(_DWORD **)v20;
            *(_QWORD *)v20 = 0;
            if (v22)
            {
              if (*v22 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v8);
              else
                *v22 -= 2;
            }
            v20 = (WTF *)((char *)v20 + 8);
            v21 -= 8;
          }
          while (v21);
        }
        v13 = v42;
        if (v45 != (_BYTE *)v42 && v42 != 0)
        {
          v42 = 0;
          v43 = 0;
          WTF::fastFree(v13, v8);
        }
      }
    }
    else
    {
      *a3 = 0;
    }
    if (HIDWORD(v63))
    {
      v17 = v62;
      v18 = 8 * HIDWORD(v63);
      do
      {
        v19 = *(_DWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v8);
          else
            *v19 -= 2;
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
    result = (uint64_t)v62;
    if (v64 != (_BYTE *)v62 && v62 != 0)
    {
      v62 = 0;
      LODWORD(v63) = 0;
      return WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeCursor@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, const WebCore::CSSParserContext *a3@<X2>, _QWORD *a4@<X8>)
{
  char v4;
  WTF::StringImpl *v8;
  __int128 *v9;
  WTF *result;
  WTF *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  unint64_t v19;
  char v20;
  double v21;
  double v22;
  WTF::StringImpl *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  char v28;
  _DWORD *v29;
  WTF *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  int v35;
  WTF *v37;
  int v38;
  int v39;
  _BYTE v40[32];
  _DWORD *v41;
  _DWORD *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  _BYTE v48[32];

  v4 = (char)a3;
  v46 = (WTF *)v48;
  v47 = 4;
  while (1)
  {
    WebCore::CSSPropertyParserHelpers::consumeImage((WTF::StringImpl *)&v45, this, (uint64_t)a2, 5);
    if (!v45)
      break;
    LOBYTE(v43) = 0;
    v44 = 0;
    v19 = WebCore::CSSPropertyParserHelpers::consumeNumberRaw(this, 0);
    if (v20)
    {
      v21 = *(double *)&v19;
      v22 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::consumeNumberRaw(this, 0));
      if (!(_BYTE)v8)
        goto LABEL_49;
      if (!v44)
        v44 = 1;
      v43 = (int)v21 | ((unint64_t)(int)v22 << 32);
    }
    v41 = (_DWORD *)v45;
    v45 = 0;
    WebCore::CSSCursorImageValue::create((uint64_t *)&v41, (uint64_t *)&v43, (*(_WORD *)((_BYTE *)a2 + 51) & 4) != 0, (uint64_t *)&v42);
    v24 = HIDWORD(v47);
    if (HIDWORD(v47) == (_DWORD)v47)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v46, HIDWORD(v47) + 1);
      v24 = HIDWORD(v47);
    }
    v25 = (uint64_t)v42;
    v42 = 0;
    *((_QWORD *)v46 + HIDWORD(v47)) = v25;
    HIDWORD(v47) = v24 + 1;
    v26 = v42;
    v42 = 0;
    if (v26)
    {
      if (*v26 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v23);
      else
        *v26 -= 2;
    }
    v27 = v41;
    v41 = 0;
    if (v27)
    {
      if (*v27 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v23);
      else
        *v27 -= 2;
    }
    if (!WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(this, v23))
    {
LABEL_49:
      v28 = 0;
      *a4 = 0;
      goto LABEL_50;
    }
    v28 = 1;
LABEL_50:
    v29 = (_DWORD *)v45;
    v45 = 0;
    if (v29)
    {
      if (*v29 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v8);
      else
        *v29 -= 2;
    }
    if ((v28 & 1) == 0)
      goto LABEL_6;
  }
  v9 = *this;
  if (*this >= this[1])
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) != 0)
  {
LABEL_5:
    *a4 = 0;
  }
  else
  {
    v15 = *((_DWORD *)v9 + 4);
    if (v15 < 0)
    {
      v15 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
      *((_DWORD *)v9 + 4) = v15;
    }
    if ((unsigned __int16)v15 == 459)
    {
      if ((v4 & 1) == 0)
        goto LABEL_5;
      v17 = &WebCore::staticCSSValuePool[4680];
      *v17 += 2;
      WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
    }
    else
    {
      if ((unsigned __int16)v15 - 394 >= 0x26
        && (unsigned __int16)v15 != 236
        && (unsigned __int16)v15 != 6)
      {
        goto LABEL_5;
      }
      v16 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, v8);
      if ((v16 & 0xFF0000) != 0)
      {
        if ((unsigned __int16)v16 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1940CBBA0);
        }
        v17 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v16 + 3088];
        *v17 += 2;
      }
      else
      {
        v17 = 0;
      }
    }
    v18 = HIDWORD(v47);
    if (!HIDWORD(v47))
    {
      *a4 = v17;
      goto LABEL_7;
    }
    v43 = (unint64_t)v17;
    if (HIDWORD(v47) == (_DWORD)v47)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v46, (unint64_t)&v43);
      v34 = (_DWORD *)v43;
      v43 = 0;
      if (v34)
      {
        if (*v34 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v33);
        else
          *v34 -= 2;
      }
    }
    else
    {
      *((_QWORD *)v46 + HIDWORD(v47)) = v17;
      HIDWORD(v47) = v18 + 1;
    }
    v37 = (WTF *)v40;
    v38 = 4;
    v30 = v46;
    if (v46 == (WTF *)v48)
    {
      v31 = HIDWORD(v47);
      memcpy(v40, v48, 8 * HIDWORD(v47));
    }
    else
    {
      v46 = (WTF *)v48;
      v37 = v30;
      v35 = v47;
      v31 = HIDWORD(v47);
      LODWORD(v47) = 4;
      v38 = v35;
    }
    HIDWORD(v47) = 0;
    v39 = v31;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v37, (uint64_t *)&v43);
    *a4 = v43;
    WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v32);
  }
LABEL_6:
  if (HIDWORD(v47))
  {
    v12 = v46;
    v13 = 8 * HIDWORD(v47);
    do
    {
      v14 = *(_DWORD **)v12;
      *(_QWORD *)v12 = 0;
      if (v14)
      {
        if (*v14 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v8);
        else
          *v14 -= 2;
      }
      v12 = (WTF *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
  }
LABEL_7:
  result = v46;
  if (v48 != (_BYTE *)v46 && v46 != 0)
  {
    v46 = 0;
    LODWORD(v47) = 0;
    return (WTF *)WTF::fastFree(result, v8);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSelfPositionOverflowPosition@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WebCore::CSSPropertyParserHelpers *a3@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  WebCore::CSSParserTokenRange *v11;
  uint64_t result;
  int *v13;
  int *v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  int *v19;
  int *v20;

  v7 = *this;
  v6 = this[1];
  if (*this >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v15 = *((_DWORD *)v7 + 4);
  if (v15 < 0)
  {
    v15 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v15;
  }
  if ((unsigned __int16)v15 > 0x1F2u)
  {
    if ((unsigned __int16)v15 != 499)
    {
      if ((unsigned __int16)v15 != 931 && (unsigned __int16)v15 != 933)
        goto LABEL_47;
      return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeBaselineKeyword(a3, (WebCore::CSSParserTokenRange *)this);
    }
  }
  else if ((unsigned __int16)v15 != 90 && (unsigned __int16)v15 != 394)
  {
    if ((unsigned __int16)v15 != 248)
    {
LABEL_47:
      v6 = this[1];
LABEL_3:
      v8 = *this;
      if (*this >= v6)
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0)
        goto LABEL_5;
      v16 = *((_DWORD *)v8 + 4);
      if (v16 < 0)
      {
        v16 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
        *((_DWORD *)v8 + 4) = v16;
      }
      if ((v16 & 0xFFFE) != 0x208)
LABEL_5:
        v20 = 0;
      else
        WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, &v20);
      v9 = *this;
      if (*this >= this[1])
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v9 & 0x3F) != 0)
      {
        LOWORD(v10) = 0;
      }
      else
      {
        v10 = *((_DWORD *)v9 + 4);
        if (v10 < 0)
        {
          v10 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
          *((_DWORD *)v9 + 4) = v10;
        }
      }
      if (((unsigned int (*)(_QWORD))a2)((unsigned __int16)v10))
      {
        result = WebCore::CSSPropertyParserHelpers::consumeIdent(this, v11, &v19);
        v13 = v19;
        v14 = v20;
        if (v20)
        {
          result = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)result = 2;
          v18 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
          *(_BYTE *)(result + 7) = 1;
          *(_QWORD *)(result + 8) = v14;
          *(_QWORD *)(result + 16) = v13;
          *(_WORD *)(result + 4) = -18432;
          *(_BYTE *)(result + 6) = (v18 | 0x10000u) >> 16;
          v13 = (int *)result;
        }
        *(_QWORD *)a3 = v13;
      }
      else
      {
        *(_QWORD *)a3 = 0;
        result = (uint64_t)v20;
        if (v20)
        {
          if (*v20 == 2)
            return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v11);
          else
            *v20 -= 2;
        }
      }
      return result;
    }
    return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeBaselineKeyword(a3, (WebCore::CSSParserTokenRange *)this);
  }
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if ((result & 0xFF0000) != 0)
  {
    if ((unsigned __int16)result >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1940CBEF4);
    }
    v17 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v17 += 2;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)a3 = v17;
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeCounterStyleAdditiveSymbols@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v6;
  _DWORD *result;
  _BYTE *v8;
  _DWORD *v9;
  _BYTE v10[8];

  v10[0] = 0;
  v10[4] = 0;
  v8 = v10;
  WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithoutSingleValueOptimization<WebCore::CSSPropertyParserHelpers::consumeCounterStyleAdditiveSymbols(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&)::$_0,WebCore::CSSParserContext const&>(&v9, (uint64_t)this, (uint64_t *)&v8, (uint64_t)a2);
  result = v9;
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    if (!v9)
    {
      *a3 = 0;
      return result;
    }
    if (v9[2])
    {
      *a3 = v9;
      return result;
    }
    *a3 = 0;
  }
  else
  {
    *a3 = 0;
    if (!result)
      return result;
  }
  if (*result == 2)
    return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
  *result -= 2;
  return result;
}

uint64_t WebCore::CSSPropertyParser::parseValueStart(uint64_t a1, uint64_t a2, WebCore::CSSParserTokenRange *a3)
{
  WebCore::CSSParserTokenRange *v6;
  unint64_t v7;
  __int128 *v8;
  char v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  int *v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t result;
  char *v22;
  int v23;
  int *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unsigned __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  int *v47;
  int *v48;

  v6 = *(WebCore::CSSParserTokenRange **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v7)
  {
    v10 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v9 = 1;
    {
      v10 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10;
    }
    v8 = (__int128 *)v6;
    v6 = (WebCore::CSSParserTokenRange *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v8 = (__int128 *)((char *)v6 + 24);
    v10 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  do
  {
    if ((unint64_t)v8 < v7 || (v9 & 1) != 0)
    {
      if ((unint64_t)v8 >= v7)
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v11 = v8;
      v12 = *(_DWORD *)v11;
    }
    else
    {
      v12 = v10 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
      v9 = 1;
      v10 = v12;
    }
    v8 = (__int128 *)((char *)v8 + 24);
  }
  while ((v12 & 0x3F) == 0x10);
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v22 = (char *)v8 - 24;
    v23 = *((_DWORD *)v6 + 4);
    if (v23 < 0)
    {
      v23 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = v23;
    }
    if (v22 == (char *)v7 && (unsigned __int16)v23 - 1 <= 4)
    {
      v24 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v23 + 3088];
      *v24 += 2;
      WebCore::shorthandForProperty(a2);
      if (v25)
      {
        v44 = v7;
        v38 = WebCore::shorthandForProperty(a2);
        if ((_DWORD)v39)
        {
          v40 = (unsigned __int16 *)v38;
          v41 = 2 * v39;
          do
          {
            v42 = *v40;
            *v24 += 2;
            v47 = v24;
            WebCore::CSSPropertyParser::addProperty(a1, v42, a2, &v47, (int)a3, 0);
            if (v47)
            {
              if (*v47 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v39);
              else
                *v47 -= 2;
            }
            ++v40;
            v41 -= 2;
          }
          while (v41);
        }
        if (*v24 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v39);
        else
          *v24 -= 2;
        v7 = v44;
        goto LABEL_35;
      }
      if ((WebCore::CSSProperty::isDescriptorOnly(a2) & 1) == 0)
      {
        v47 = v24;
        WebCore::CSSPropertyParser::addProperty(a1, a2, 0, &v47, (int)a3, 0);
        if (v47)
        {
          if (*v47 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v27);
          else
            *v47 -= 2;
        }
LABEL_35:
        *(_QWORD *)a1 = v7;
        *(_QWORD *)(a1 + 8) = v7;
        return 1;
      }
      if (*v24 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v26);
      else
        *v24 -= 2;
    }
  }
  v46 = *(_OWORD *)a1;
  if ((a2 - 459) <= 0x5E)
  {
    WebCore::CSSPropertyParser::parseShorthand((WebCore::CSSParserTokenRange **)a1, (WTF::StringImpl *)a2, a3);
    if ((v28 & 1) != 0)
      return 1;
  }
  else
  {
    WebCore::CSSPropertyParsing::parseStyleProperty(&v45, a1, a2, 0, *(_QWORD *)(a1 + 16));
    v14 = (int *)v45;
    if (v45)
    {
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v15 = *(_QWORD *)(a1 + 24);
        if ((*(_WORD *)(v45 + 4) & 0x100) != 0)
        {
          v14 = WebCore::staticCSSValuePool;
          WebCore::staticCSSValuePool[0] += 2;
          if ((_DWORD)a3)
            v37 = 0x2000;
          else
            v37 = 0;
          v17 = v37 & 0xFC00 | a2 & 0x3FF | ((WebCore::isInheritedPropertyTable[a2] != 0) << 15) | 0x4000;
          LOWORD(v47) = v17;
        }
        else
        {
          if ((_DWORD)a3)
            v16 = 0x2000;
          else
            v16 = 0;
          v17 = v16 & 0xFC00 | a2 & 0x3FF | ((WebCore::isInheritedPropertyTable[a2] != 0) << 15);
          LOWORD(v47) = v17;
          v45 = 0;
        }
        v48 = v14;
        v18 = *(unsigned int *)(v15 + 12);
        if ((_DWORD)v18 == *(_DWORD *)(v15 + 8))
        {
          WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSProperty>(v15, (unint64_t)&v47);
          v43 = v48;
          v48 = 0;
          if (v43)
          {
            if (*v43 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, v13);
            else
              *v43 -= 2;
          }
        }
        else
        {
          v19 = *(_QWORD *)v15 + 16 * v18;
          *(_WORD *)v19 = v17;
          *(_QWORD *)(v19 + 8) = v14;
          ++*(_DWORD *)(v15 + 12);
        }
        v20 = (int *)v45;
        v45 = 0;
        if (!v20)
          return 1;
        goto LABEL_22;
      }
      v45 = 0;
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v13);
      else
        *v14 -= 2;
    }
  }
  v29 = WebCore::classifyVariableRange((__int128 *)v46, *((__int128 **)&v46 + 1));
  result = 0;
  if ((v29 & 0xFF000000000000) != 0 && (v29 & 0xFF00000000) != 0)
  {
    WebCore::CSSVariableReferenceValue::create((char **)&v46, *(const WebCore::CSSParserTokenRange **)(a1 + 16), &v45);
    if ((unsigned __int16)(a2 - 459) <= 0x5Eu)
    {
      v30 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v30 = 2;
      v31 = (*(unsigned __int8 *)(v30 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_WORD *)(v30 + 4) = 28672;
      *(_BYTE *)(v30 + 6) = BYTE2(v31);
      *(_WORD *)(v30 + 8) = a2;
      v32 = v45;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0;
      *(_QWORD *)(v30 + 16) = v32;
      v33 = WebCore::shorthandForProperty(a2);
      if ((_DWORD)v13)
      {
        v34 = (unsigned __int16 *)v33;
        v35 = 2 * v13;
        do
        {
          v36 = *v34;
          *(_DWORD *)v30 += 2;
          v47 = (int *)v30;
          WebCore::CSSPropertyParser::addProperty(a1, v36, a2, &v47, (int)a3, 0);
          if (v47)
          {
            if (*v47 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v13);
            else
              *v47 -= 2;
          }
          ++v34;
          v35 -= 2;
        }
        while (v35);
      }
      if (*(_DWORD *)v30 != 2)
      {
        *(_DWORD *)v30 -= 2;
        return 1;
      }
      v20 = (int *)v30;
      goto LABEL_57;
    }
    v47 = (int *)v45;
    WebCore::CSSPropertyParser::addProperty(a1, a2, 0, &v47, (int)a3, 0);
    v20 = v47;
    if (!v47)
      return 1;
LABEL_22:
    if (*v20 != 2)
    {
      *v20 -= 2;
      return 1;
    }
LABEL_57:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v13);
    return 1;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::isSelfPositionKeyword(int a1)
{
  uint64_t result;
  _BOOL4 v4;

  result = 1;
  if ((a1 - 500) > 0x12 || ((1 << (a1 + 12)) & 0x40003) == 0)
  {
    v4 = a1 == 519 || (a1 - 511) < 2;
    return a1 == 260 || v4;
  }
  return result;
}

BOOL WebCore::CSSPropertyParser::parseFontFaceDescriptor(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v5;
  int *v6;
  uint64_t v7;
  _BOOL8 v8;
  int *v9;

  if ((a2 - 459) > 0x5E)
  {
    WebCore::CSSPropertyParsing::parseFontFaceDescriptor((__int128 **)a1, a2, *(_QWORD *)(a1 + 16), (WTF::StringImpl **)&v9);
    v6 = v9;
    if (v9)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)a1 == v7;
      if (*(_QWORD *)a1 == v7)
      {
        WebCore::CSSPropertyParser::addProperty(a1, a2, 0, &v9, 0, 0);
        v6 = v9;
        v9 = 0;
        if (!v6)
          return 1;
      }
      else
      {
        v9 = 0;
      }
      if (*v6 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v5);
      else
        *v6 -= 2;
      return v8;
    }
  }
  else if ((_DWORD)a2 == 494)
  {
    return WebCore::CSSPropertyParser::consumeFontVariantShorthand((__int128 **)a1, 0);
  }
  return 0;
}

WTF *WebCore::CSSParserImpl::consumeKeyframeKeyList@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, WTF **a3@<X8>)
{
  char v5;
  unsigned int v6;
  __int128 *v7;
  unsigned int v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  unsigned int v12;
  int v13;
  int v14;
  double v15;
  double v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  WTF *v23;
  WTF *result;
  int v25;
  int v26;
  int v27;
  double v28;
  WTF *v29;
  WTF *v30;

  v29 = 0;
  v30 = 0;
  while (1)
  {
    v6 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    do
    {
      if (a1 < a2 || (v5 & 1) != 0)
      {
        if (a1 >= a2)
          v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v7 = a1;
        v8 = *(_DWORD *)v7;
      }
      else
      {
        v8 = v6 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8;
        v5 = 1;
        v6 = v8;
      }
      a1 = (__int128 *)((char *)a1 + 24);
    }
    while ((v8 & 0x3F) == 0x10);
    v9 = (__int128 *)((char *)a1 - 24);
    if ((__int128 *)((char *)a1 - 24) == a2)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v5 & 1) == 0)
      {
        v6 = v6 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v6;
      }
      v5 = 1;
      a1 = a2;
    }
    v10 = (__int128 *)((char *)a1 - 24);
    do
    {
      v11 = (__int128 *)((char *)v10 + 24);
      if ((__int128 *)((char *)v10 + 24) < a2 || (v5 & 1) != 0)
      {
        if (v11 >= a2)
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v11;
      }
      else
      {
        v12 = v6 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v5 = 1;
        v6 = v12;
      }
      v10 = (__int128 *)((char *)v10 + 24);
    }
    while ((v12 & 0x3F) == 0x10);
    v13 = *(_DWORD *)v9;
    v14 = *(_DWORD *)v9 & 0x3F;
    if (v14 == 8)
    {
      v15 = *((double *)v9 + 2);
      if (v15 < 0.0 || v15 > 100.0)
      {
LABEL_31:
        *a3 = 0;
        a3[1] = 0;
        goto LABEL_36;
      }
      v17 = v15 / 100.0;
      v28 = v17;
      v18 = HIDWORD(v30);
      if (HIDWORD(v30) == (_DWORD)v30)
      {
        v19 = (_QWORD *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v29, HIDWORD(v30) + 1, (unint64_t)&v28);
        v18 = HIDWORD(v30);
        *((_QWORD *)v29 + HIDWORD(v30)) = *v19;
      }
      else
      {
        *((double *)v29 + HIDWORD(v30)) = v17;
      }
      HIDWORD(v30) = v18 + 1;
    }
    else
    {
      if (v14)
        goto LABEL_31;
      v20 = *((_QWORD *)v9 + 1);
      v21 = *((_DWORD *)v9 + 1);
      if (v21 == 4)
      {
        if ((v13 & 0x400000) != 0)
        {
          if ((*(_BYTE *)v20 & 0xDF) != 0x46
            || (*(_BYTE *)(v20 + 1) & 0xDF) != 0x52
            || (*(_BYTE *)(v20 + 2) & 0xDF) != 0x4F)
          {
            goto LABEL_31;
          }
          v25 = *(unsigned __int8 *)(v20 + 3);
        }
        else
        {
          if ((*(_WORD *)v20 & 0xFFDF) != 0x46
            || (*(_WORD *)(v20 + 2) & 0xFFDF) != 0x52
            || (*(_WORD *)(v20 + 4) & 0xFFDF) != 0x4F)
          {
            goto LABEL_31;
          }
          v25 = *(unsigned __int16 *)(v20 + 6);
        }
        if ((v25 & 0xFFFFFFDF) != 0x4D)
          goto LABEL_31;
        LODWORD(v28) = 0;
        if (HIDWORD(v30) == (_DWORD)v30)
        {
LABEL_57:
          WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)&v29, (int *)&v28);
          goto LABEL_26;
        }
        v26 = HIDWORD(v30) + 1;
        *((_QWORD *)v29 + HIDWORD(v30)) = 0;
      }
      else
      {
        if (v21 != 2)
          goto LABEL_31;
        if ((v13 & 0x400000) != 0)
        {
          if ((*(_BYTE *)v20 & 0xDF) != 0x54)
            goto LABEL_31;
          v27 = *(unsigned __int8 *)(v20 + 1);
        }
        else
        {
          if ((*(_WORD *)v20 & 0xFFDF) != 0x54)
            goto LABEL_31;
          v27 = *(unsigned __int16 *)(v20 + 2);
        }
        if ((v27 & 0xFFFFFFDF) != 0x4F)
          goto LABEL_31;
        LODWORD(v28) = 1;
        if (HIDWORD(v30) == (_DWORD)v30)
          goto LABEL_57;
        v26 = HIDWORD(v30) + 1;
        *((_QWORD *)v29 + HIDWORD(v30)) = 0x3FF0000000000000;
      }
      HIDWORD(v30) = v26;
    }
LABEL_26:
    if (v10 == a2)
      break;
    a1 = (__int128 *)((char *)v10 + 24);
    if ((*(_DWORD *)v10 & 0x3F) != 0x15)
      goto LABEL_31;
  }
  v22 = v29;
  if (v30 > HIDWORD(v30))
  {
    if (HIDWORD(v30))
    {
      LODWORD(v30) = HIDWORD(v30);
      v22 = (WTF *)WTF::fastRealloc(v29, (void *)(8 * HIDWORD(v30)));
    }
    else if (v29)
    {
      v29 = 0;
      LODWORD(v30) = 0;
      WTF::fastFree(v22, a2);
      v22 = v29;
    }
  }
  v29 = 0;
  *a3 = v22;
  v23 = v30;
  HIDWORD(v30) = 0;
  a3[1] = v23;
LABEL_36:
  result = v29;
  if (v29)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 8 * v8);
    if (v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeTextTransform@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  unsigned int v16;
  WTF *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF *v23;
  uint64_t v24;
  _DWORD *v25;
  WTF *v26;
  uint64_t v27;
  _DWORD *v28;
  char v29;
  char v30;
  unint64_t v31;
  __int128 *v32;
  __int128 *v33;
  char v34;
  unsigned int v35;
  WTF **v36;
  int *v37;
  int v38;
  char v39;
  WTF *v40;
  uint64_t v41;
  _BYTE v42[32];
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  _QWORD v46[4];

  v6 = *this;
  v5 = this[1];
  if (*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) == 0)
  {
    v7 = *this;
    if (*this >= v5)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v7 & 0x3F) == 0)
    {
      result = *((unsigned int *)v7 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
        *((_DWORD *)v7 + 4) = result;
      }
      if ((unsigned __int16)result == 6)
      {
        v32 = *this;
        v31 = (unint64_t)this[1];
        if (*this == (__int128 *)v31)
        {
          v34 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          v33 = *this;
          v32 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v33 = (__int128 *)((char *)v32 + 24);
          *this = (__int128 *)((char *)v32 + 24);
        }
        while (1)
        {
          if ((unint64_t)v33 < v31 || (v34 & 1) != 0)
          {
            if ((unint64_t)v33 >= v31)
              v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v35 = *(_DWORD *)v33;
          }
          else
          {
            v35 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v35;
            v34 = 1;
          }
          if ((v35 & 0x3F) != 0x10)
            break;
          v33 = (__int128 *)((char *)*this + 24);
          *this = v33;
        }
        if ((*(_DWORD *)v32 & 0x3F) == 0 && (v32[1] & 0x80000000) != 0)
        {
          result = WebCore::cssValueKeywordID(*((_QWORD *)v32 + 1), *((unsigned int *)v32 + 1) | ((unint64_t)((*(_DWORD *)v32 >> 22) & 1) << 32));
          *((_DWORD *)v32 + 4) = result;
        }
        dword_1ECE8BC48 += 2;
        *a3 = &WebCore::staticCSSValuePool[3112];
        return result;
      }
    }
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
    v14 = result & 0xFF0000;
    if ((v10 & 1) != 0 || (v12 & 1) != 0)
    {
      if (!v14)
        goto LABEL_128;
      if (!(((unsigned __int16)result != 438) | v8 & 1))
      {
        v8 = 1;
        goto LABEL_20;
      }
      if (((unsigned __int16)result != 85) | v9 & 1)
      {
        v30 = v10 | v11 | v12;
        if ((unsigned __int16)result != 436 || (((v10 | v11) | v12) & 1) != 0)
          goto LABEL_124;
        v11 = 0;
        v12 = 0;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    if ((v8 & 1) != 0)
      break;
    if ((v9 & 1) != 0)
    {
      if (!v14)
        goto LABEL_128;
      if ((unsigned __int16)result == 438)
      {
LABEL_69:
        v10 = 0;
        v12 = 0;
        goto LABEL_70;
      }
      if (!(((unsigned __int16)result != 436) | v11 & 1))
      {
        v11 = 0;
        v8 = 0;
        v12 = 0;
LABEL_18:
        v9 = 1;
LABEL_19:
        v10 = 1;
        goto LABEL_20;
      }
      v30 = v11;
      if (((unsigned __int16)result != 435) | v11 & 1)
        goto LABEL_124;
      if (*this == this[1])
        goto LABEL_107;
      result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
      if ((result & 0xFF0000) == 0 || (unsigned __int16)result != 438)
        goto LABEL_128;
LABEL_131:
      v10 = 0;
      v12 = 0;
      v11 = 1;
LABEL_70:
      v8 = 1;
LABEL_14:
      v9 = 1;
      goto LABEL_20;
    }
    if (!v14)
      goto LABEL_128;
    v12 = 0;
    v29 = 1;
    if ((unsigned __int16)result == 85)
    {
      v8 = 0;
      v9 = 1;
      v10 = 0;
    }
    else
    {
      if ((unsigned __int16)result != 438)
      {
        if (((unsigned __int16)result != 436) | v11 & 1)
        {
          v30 = v11;
          if (((unsigned __int16)result != 435) | v11 & 1)
            goto LABEL_124;
          if (*this == this[1])
          {
LABEL_112:
            v39 = 0;
            goto LABEL_108;
          }
          result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
          if ((result & 0xFF0000) == 0)
            goto LABEL_128;
          v12 = 0;
          v11 = 1;
          if ((unsigned __int16)result == 85)
          {
            v8 = 0;
            v9 = 1;
            v10 = 0;
            goto LABEL_20;
          }
          v29 = 1;
          if ((unsigned __int16)result != 438)
            goto LABEL_128;
        }
        else
        {
          v11 = 0;
          v29 = 0;
          v12 = 1;
        }
      }
      v9 = 0;
      v8 = v29;
      v10 = v12;
      v12 = 0;
    }
LABEL_20:
    if (*this == this[1])
    {
      v44 = (WTF *)v46;
      v45 = 4;
      if ((v11 & 1) != 0)
      {
        v15 = 0x12DCu;
      }
      else if ((v10 & 1) != 0)
      {
        v15 = 0x12E0u;
      }
      else
      {
        if ((v12 & 1) == 0)
        {
          v16 = 0;
          if ((v9 & 1) != 0)
            goto LABEL_101;
LABEL_25:
          if ((v8 & 1) != 0)
            goto LABEL_102;
          goto LABEL_26;
        }
        v15 = 0x12E4u;
      }
      WebCore::staticCSSValuePool[v15] += 2;
      v46[0] = &WebCore::staticCSSValuePool[v15];
      v16 = 1;
      HIDWORD(v45) = 1;
      if ((v9 & 1) != 0)
        goto LABEL_101;
      goto LABEL_25;
    }
  }
  if ((v9 & 1) == 0)
  {
    if (!v14)
      goto LABEL_128;
    if ((unsigned __int16)result == 85)
      goto LABEL_69;
    if (!(((unsigned __int16)result != 436) | v11 & 1))
    {
      v11 = 0;
      v9 = 0;
      v12 = 0;
      v8 = 1;
      goto LABEL_19;
    }
    v30 = v11;
    if (((unsigned __int16)result != 435) | v11 & 1)
      goto LABEL_124;
    if (*this == this[1])
      goto LABEL_112;
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
    if ((result & 0xFF0000) == 0 || (unsigned __int16)result != 85)
      goto LABEL_128;
    goto LABEL_131;
  }
  if (!v14)
    goto LABEL_128;
  if (!(((unsigned __int16)result != 436) | v11 & 1))
  {
    v11 = 0;
    v12 = 0;
    v8 = 1;
    goto LABEL_18;
  }
  v30 = v11;
  if (((unsigned __int16)result != 435) | v11 & 1)
  {
LABEL_124:
    if ((unsigned __int16)result != 437 || (v30 & 1) != 0)
      goto LABEL_128;
    v12 = 1;
    goto LABEL_20;
  }
  if (*this != this[1])
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
LABEL_128:
    *a3 = 0;
    return result;
  }
LABEL_107:
  v39 = 1;
LABEL_108:
  WebCore::staticCSSValuePool[4828] += 2;
  v44 = (WTF *)v46;
  v46[0] = &WebCore::staticCSSValuePool[4828];
  v45 = 0x100000004;
  v16 = 1;
  if ((v39 & 1) == 0)
    goto LABEL_25;
LABEL_101:
  v36 = &v44 + v16;
  dword_1ECE8C138 += 2;
  ++v16;
  v36[2] = (WTF *)&WebCore::staticCSSValuePool[3428];
  HIDWORD(v45) = v16;
  if ((v8 & 1) == 0)
  {
LABEL_26:
    v40 = (WTF *)v42;
    v41 = 4;
    v17 = (WTF *)v46;
LABEL_27:
    memcpy(v42, v17, 8 * HIDWORD(v45));
    goto LABEL_28;
  }
LABEL_102:
  v37 = &WebCore::staticCSSValuePool[4840];
  *v37 += 2;
  v46[v16] = v37;
  HIDWORD(v45) = v16 + 1;
  v17 = v44;
  v40 = (WTF *)v42;
  v41 = 4;
  if (v44 == (WTF *)v46)
    goto LABEL_27;
  v44 = (WTF *)v46;
  v40 = v17;
  v38 = v45;
  LODWORD(v45) = 4;
  LODWORD(v41) = v38;
LABEL_28:
  v18 = HIDWORD(v45);
  HIDWORD(v45) = 0;
  HIDWORD(v41) = v18;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v40, &v43);
  *a3 = v43;
  if (HIDWORD(v41))
  {
    v23 = v40;
    v24 = 8 * HIDWORD(v41);
    do
    {
      v25 = *(_DWORD **)v23;
      *(_QWORD *)v23 = 0;
      if (v25)
      {
        if (*v25 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v19);
        else
          *v25 -= 2;
      }
      v23 = (WTF *)((char *)v23 + 8);
      v24 -= 8;
    }
    while (v24);
  }
  v20 = v40;
  if (v42 != (_BYTE *)v40 && v40 != 0)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree(v20, v19);
  }
  if (HIDWORD(v45))
  {
    v26 = v44;
    v27 = 8 * HIDWORD(v45);
    do
    {
      v28 = *(_DWORD **)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v19);
        else
          *v28 -= 2;
      }
      v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  result = (uint64_t)v44;
  if (v46 != (_QWORD *)v44 && v44 != 0)
  {
    v44 = 0;
    LODWORD(v45) = 0;
    return WTF::fastFree((WTF *)result, v19);
  }
  return result;
}

uint64_t WebCore::consumeWebkitLineClamp(WebCore *this, WebCore::CSSParserTokenRange *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = WebCore::CSSPropertyParserHelpers::consumePercent(a2, 1u, &v6);
  v5 = v6;
  if (!v6)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIntegerType<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>(&v6, (uint64_t)a2);
    v5 = v6;
  }
  *(_QWORD *)this = v5;
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeTextIndent@<X0>(_QWORD *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  WTF::StringImpl *result;
  uint64_t v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v3 = (uint64_t)a2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v19 = 0;
  do
  {
    if (v6
      || (WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a1, v3, 0, 0, 0, 0, 0, (uint64_t *)&v18),
          (a2 = v18) == 0))
    {
      if ((v7 & 1) == 0
        && (result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)904>((uint64_t)a1),
            result >> 16))
      {
        v7 = 1;
      }
      else
      {
        if ((v8 & 1) != 0
          || (result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)1159>((uint64_t)a1),
              result < 0x10000))
        {
          v10 = 0;
          goto LABEL_13;
        }
        v8 = 1;
      }
    }
    else
    {
      WTF::RefPtr<WebCore::CSSValueContainingVector const,WTF::RawPtrTraits<WebCore::CSSValueContainingVector const>,WTF::DefaultRefDerefTraits<WebCore::CSSValueContainingVector const>>::operator=(&v19, v18);
      result = v18;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
    v6 = v19;
  }
  while (*a1 != a1[1]);
  if (!v19)
  {
    *a3 = 0;
    return result;
  }
  if (((v8 | v7) & 1) == 0)
  {
    v19 = 0;
    v10 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v10 = 2;
    v11 = (*(unsigned __int8 *)(v10 + 6) << 16) & 0xFC0000;
    *(_DWORD *)(v10 + 8) = 1;
    *(_WORD *)(v10 + 4) = -10240;
    *(_BYTE *)(v10 + 6) = (v11 | 0x10000u) >> 16;
    *(_QWORD *)(v10 + 16) = v6;
    goto LABEL_13;
  }
  v19 = 0;
  if (v7 & 1 | ((v8 & 1) == 0))
  {
    if ((v8 & 1) != 0)
    {
      v12 = &WebCore::staticCSSValuePool[7724];
      *v12 += 2;
      v13 = &WebCore::staticCSSValuePool[6704];
      *v13 += 2;
      v10 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v10 = 2;
      v14 = (*(unsigned __int8 *)(v10 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v10 + 8) = 3;
      *(_WORD *)(v10 + 4) = -10240;
      *(_BYTE *)(v10 + 6) = (v14 | 0x10000u) >> 16;
      *(_QWORD *)(v10 + 16) = v6;
      *(_QWORD *)(v10 + 24) = v12;
      *(_QWORD *)(v10 + 32) = v13;
      goto LABEL_13;
    }
    v15 = 0x1A30u;
  }
  else
  {
    v15 = 0x1E2Cu;
  }
  v16 = &WebCore::staticCSSValuePool[v15];
  WebCore::staticCSSValuePool[v15] += 2;
  v10 = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)v10 = 2;
  v17 = (*(unsigned __int8 *)(v10 + 6) << 16) & 0xFC0000;
  *(_DWORD *)(v10 + 8) = 2;
  *(_WORD *)(v10 + 4) = -10240;
  *(_BYTE *)(v10 + 6) = BYTE2(v17) | 1;
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v16;
LABEL_13:
  *a3 = v10;
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WTF::RefPtr<WebCore::CSSValueContainingVector const,WTF::RawPtrTraits<WebCore::CSSValueContainingVector const>,WTF::DefaultRefDerefTraits<WebCore::CSSValueContainingVector const>>::operator=(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (a2)
    *(_DWORD *)a2 += 2;
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeContentDistributionOverflowPosition@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v6;
  unsigned __int16 v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  unsigned __int16 v15;
  int v16;
  uint64_t result;
  char v18;
  int v19;
  uint64_t v20;
  __int128 *v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  char v25;
  unsigned int v26;
  int v27;
  __int128 *v28;

  v6 = *this;
  if (*this >= this[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v19 = *((_DWORD *)v6 + 4);
  if (v19 < 0)
  {
    v19 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v19;
  }
  if ((unsigned __int16)v19 > 0x3A2u)
  {
    if ((unsigned __int16)v19 != 931 && (unsigned __int16)v19 != 933)
      goto LABEL_39;
    goto LABEL_28;
  }
  if ((unsigned __int16)v19 == 248)
  {
LABEL_28:
    v20 = WebCore::CSSPropertyParserHelpers::consumeBaselineKeywordRaw((WebCore::CSSPropertyParserHelpers *)this, a2);
    if ((v20 & 0xFF0000) == 0)
      goto LABEL_31;
    goto LABEL_29;
  }
  if ((unsigned __int16)v19 == 90)
  {
    v21 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
    LOWORD(v20) = (unsigned __int16)WebCore::CSSParserToken::id((unsigned int *)v21);
LABEL_29:
    v15 = v20;
    LOWORD(v16) = 0;
    goto LABEL_30;
  }
LABEL_39:
  if ((unsigned __int16)v19 - 513 >= 2 && (unsigned __int16)v19 != 515 && (unsigned __int16)v19 != 499)
  {
    if ((v19 & 0xFFFE) == 0x208)
    {
      v28 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
      v7 = (unsigned __int16)WebCore::CSSParserToken::id((unsigned int *)v28);
      goto LABEL_4;
    }
LABEL_3:
    v7 = 0;
LABEL_4:
    v8 = (unsigned int *)*this;
    if (*this >= this[1])
    {
      v8 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v9 = WebCore::CSSParserToken::id(v8);
    if (((unsigned int (*)(unsigned int *))a2)(v9))
    {
      v10 = (unsigned int *)*this;
      v11 = (unint64_t)this[1];
      if (*this == (__int128 *)v11)
      {
        v13 = 1;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
        v12 = *this;
        v10 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v12 = (__int128 *)(v10 + 6);
        *this = (__int128 *)(v10 + 6);
      }
      while (1)
      {
        if ((unint64_t)v12 < v11 || (v13 & 1) != 0)
        {
          if ((unint64_t)v12 >= v11)
            v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v14 = *(_DWORD *)v12;
        }
        else
        {
          v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
          v13 = 1;
        }
        if ((v14 & 0x3F) != 0x10)
          break;
        v12 = (__int128 *)((char *)*this + 24);
        *this = v12;
      }
      v15 = (unsigned __int16)WebCore::CSSParserToken::id(v10);
      LOWORD(v16) = 0;
      goto LABEL_15;
    }
LABEL_31:
    result = 0;
    goto LABEL_16;
  }
  v23 = *this;
  v22 = (unint64_t)this[1];
  if (*this == (__int128 *)v22)
  {
    v25 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
    v24 = *this;
    v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v24 = (__int128 *)((char *)v23 + 24);
    *this = (__int128 *)((char *)v23 + 24);
  }
  while (1)
  {
    if ((unint64_t)v24 < v22 || (v25 & 1) != 0)
    {
      if ((unint64_t)v24 >= v22)
        v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v26 = *(_DWORD *)v24;
    }
    else
    {
      v26 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v26;
      v25 = 1;
    }
    if ((v26 & 0x3F) != 0x10)
      break;
    v24 = (__int128 *)((char *)*this + 24);
    *this = v24;
  }
  if ((*(_DWORD *)v23 & 0x3F) != 0)
  {
    LOWORD(v16) = 0;
  }
  else
  {
    v16 = *((_DWORD *)v23 + 4);
    if (v16 < 0)
    {
      v27 = WebCore::cssValueKeywordID(*((_QWORD *)v23 + 1), *((unsigned int *)v23 + 1) | ((unint64_t)((*(_DWORD *)v23 >> 22) & 1) << 32));
      LOWORD(v16) = v27;
      *((_DWORD *)v23 + 4) = v27;
    }
  }
  v15 = 0;
LABEL_30:
  v7 = 0;
LABEL_15:
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v18 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = -10240;
  *(_BYTE *)(result + 6) = v18 & 0xFC;
  *(_WORD *)(result + 8) = v16;
  *(_WORD *)(result + 10) = v15;
  *(_WORD *)(result + 12) = v7;
LABEL_16:
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::isContentPositionOrLeftOrRightKeyword(int a1)
{
  _BOOL4 v1;
  unsigned int v2;

  v1 = (a1 & 0xFFFE) == 258;
  if (a1 == 260)
    v1 = 1;
  v2 = (a1 - 511) < 2 || v1;
  if ((a1 & 0xFFFE) == 0x1F4)
    return 1;
  else
    return v2;
}

__int128 *WebCore::CSSPropertyParserHelpers::consumeBorderRadiusCorner@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *result;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  result = WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent(a1, a2, 1u, 1, 0, 0, 0, (uint64_t *)&v14);
  if (v14)
  {
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent(a1, a2, 1u, 1, 0, 0, 0, (uint64_t *)&v13);
    v8 = (uint64_t)v13;
    v7 = v14;
    if (!v13)
    {
      if (v14)
      {
        *v14 += 2;
        v8 = (uint64_t)v7;
      }
      else
      {
        v8 = 0;
      }
    }
    v13 = 0;
    v14 = 0;
    v9 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v9 = 2;
    v11 = (*(unsigned __int8 *)(v9 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_BYTE *)(v9 + 7) = 1;
    *(_QWORD *)(v9 + 8) = v7;
    *(_QWORD *)(v9 + 16) = v8;
    *(_WORD *)(v9 + 4) = -18432;
    *(_BYTE *)(v9 + 6) = BYTE2(v11);
    *a3 = v9;
    v12 = v13;
    v13 = 0;
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v10);
      else
        *v12 -= 2;
    }
    result = (__int128 *)v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (__int128 *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParser::consumeBorderSpacing(WebCore::CSSPropertyParser *this, int a2)
{
  int *v4;
  int *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int *v9;
  int *v11;
  int *v12;
  int *v13;

  WebCore::CSSPropertyParserHelpers::consumeLength((uint64_t)this, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48), 1u, 0, &v13);
  v4 = v13;
  if (!v13)
    return 0;
  *v13 += 2;
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    v5 = v4;
LABEL_4:
    v12 = v4;
    v13 = 0;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 305, 482, &v12, a2, 0);
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v6);
      else
        *v12 -= 2;
    }
    v12 = v5;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 306, 482, &v12, a2, 0);
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v7);
      else
        *v12 -= 2;
    }
    v8 = 1;
    goto LABEL_11;
  }
  WebCore::CSSPropertyParserHelpers::consumeLength((uint64_t)this, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48), 1u, 0, &v12);
  v5 = v12;
  v12 = 0;
  if (*v4 == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, v7);
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*v11 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v7);
      else
        *v11 -= 2;
    }
  }
  else
  {
    *v4 -= 2;
  }
  if (!v5)
    goto LABEL_22;
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    v4 = v13;
    goto LABEL_4;
  }
  if (*v5 == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v7);
LABEL_22:
    v8 = 0;
    goto LABEL_11;
  }
  v8 = 0;
  *v5 -= 2;
LABEL_11:
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v7);
    else
      *v9 -= 2;
  }
  return v8;
}

BOOL WebCore::CSSPropertyParser::consumeFontVariantShorthand(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  int v2;
  __int128 *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  WTF *v9;
  WTF *v10;
  char v11;
  int v12;
  int *v13;
  WTF *v14;
  WTF *v15;
  int v16;
  int v17;
  int v18;
  int *v19;
  WTF::StringImpl *v20;
  int *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  uint64_t v24;
  WTF *v25;
  WTF *v27;
  WTF *v30;
  uint64_t v31;
  _DWORD *v32;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  unsigned int v38;
  int *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int *v47;
  WTF::StringImpl *v48;
  int v49;
  int v50;
  int *v51;
  int v52;
  char v53;
  WTF *v54;
  uint64_t v55;
  _BYTE v56[32];
  int *v57;
  WTF *v58;
  uint64_t v59;
  _BYTE v60[32];
  int *v61;
  int *v62;
  int *v63;
  int *v64;
  int *v65;
  int *v66;
  int v67;
  int v68;
  _BYTE v69[32];
  uint64_t v70[2];

  v2 = (int)a2;
  v4 = *this;
  if (*this >= this[1])
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) == 0)
  {
    v36 = *((_DWORD *)v4 + 4);
    if (v36 < 0)
    {
      v36 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
      *((_DWORD *)v4 + 4) = v36;
    }
    if ((unsigned __int16)v36 == 90 || (unsigned __int16)v36 == 6)
    {
      v38 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
      if (v38 < 0x10000)
      {
        v39 = 0;
      }
      else
      {
        if ((unsigned __int16)v38 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1940CE31CLL);
        }
        v39 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v38 + 3088];
        *v39 += 2;
      }
      v57 = v39;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 24, 494, &v57, v2, 0);
      if (v57)
      {
        if (*v57 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v40);
        else
          *v57 -= 2;
      }
      v57 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 21, 494, &v57, v2, 0);
      if (v57)
      {
        if (*v57 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v41);
        else
          *v57 -= 2;
      }
      v57 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 20, 494, &v57, v2, 0);
      if (v57)
      {
        if (*v57 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v42);
        else
          *v57 -= 2;
      }
      v57 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 25, 494, &v57, v2, 0);
      if (v57)
      {
        if (*v57 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v43);
        else
          *v57 -= 2;
      }
      v57 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 22, 494, &v57, v2, 0);
      if (v57)
      {
        if (*v57 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v44);
        else
          *v57 -= 2;
      }
      v57 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 26, 494, &v57, v2, 0);
      if (v57)
      {
        if (*v57 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v45);
        else
          *v57 -= 2;
      }
      v57 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 23, 494, &v57, v2, 0);
      if (v57)
      {
        if (*v57 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v46);
        else
          *v57 -= 2;
      }
      return *this == this[1];
    }
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v51 = 0;
  v8 = 0;
  v65 = 0;
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  v9 = (WTF *)v60;
  LODWORD(v57) = 0;
  v58 = (WTF *)v60;
  v59 = 4;
  v10 = (WTF *)v56;
  v53 = 0;
  v52 = 0;
  v54 = (WTF *)v56;
  v11 = 1;
  v12 = 1;
  v55 = 4;
  do
  {
    v13 = v5;
    if (!v8)
    {
      WebCore::CSSPropertyParsing::consumeFontVariantCaps((uint64_t)this, &v66);
      if (v66)
      {
        v8 = v66;
        goto LABEL_13;
      }
    }
    if (!v51)
    {
      WebCore::CSSPropertyParsing::consumeFontVariantPosition((uint64_t)this, &v66);
      if (v66)
      {
        v51 = v66;
        goto LABEL_13;
      }
    }
    if (!v7)
    {
      WebCore::CSSPropertyParserHelpers::consumeFontVariantAlternates(this, a2, (uint64_t *)&v66);
      if (v66)
      {
        v7 = v66;
        goto LABEL_13;
      }
    }
    v50 = v12;
    v14 = v10;
    v15 = v9;
    v16 = WebCore::CSSFontVariantLigaturesParser::consumeLigature((WebCore::CSSFontVariantLigaturesParser *)&v57, this);
    v17 = WebCore::CSSFontVariantNumericParser::consumeNumeric((WebCore::CSSFontVariantNumericParser *)&v52, this);
    if (!v16)
    {
      v11 = 0;
      v9 = v15;
      v10 = v14;
      v12 = v50;
      goto LABEL_13;
    }
    if (!v17)
    {
      v9 = v15;
      v10 = v14;
      v12 = 0;
LABEL_13:
      v5 = v13;
      continue;
    }
    if (v16 == 1 || v17 == 1)
    {
      v9 = v15;
      v10 = v14;
      v5 = v13;
LABEL_136:
      v24 = 0;
      v65 = v8;
      v63 = v51;
      v64 = v7;
      v61 = v5;
      v62 = v6;
      goto LABEL_27;
    }
    v9 = v15;
    v5 = v13;
    if (v6 || (WebCore::CSSPropertyParserHelpers::consumeFontVariantEastAsian((uint64_t)this, a2, &v66), v5 = v13, !v66))
    {
      v10 = v14;
      if ((*((_BYTE *)this[2] + 55) & 2) == 0)
        goto LABEL_136;
      v12 = v50;
      if (v5)
        goto LABEL_136;
      WebCore::CSSPropertyParsing::consumeFontVariantEmoji((uint64_t)this, &v66);
      v5 = v66;
      if (!v66)
        goto LABEL_136;
    }
    else
    {
      v6 = v66;
      v10 = v14;
      v12 = v50;
    }
  }
  while (*this != this[1]);
  v65 = v8;
  v63 = v51;
  v64 = v7;
  v61 = v5;
  v62 = v6;
  v18 = HIDWORD(v59);
  if (HIDWORD(v59))
  {
    v66 = (int *)v69;
    v67 = 4;
    v47 = (int *)v58;
    if (v58 == v9)
    {
      memcpy(v69, v9, 8 * HIDWORD(v59));
    }
    else
    {
      v58 = v9;
      v66 = v47;
      v49 = v59;
      LODWORD(v59) = 4;
      v67 = v49;
    }
    HIDWORD(v59) = 0;
    v68 = v18;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v66, v70);
    v19 = (int *)v70[0];
    WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v48);
  }
  else
  {
    v19 = &WebCore::staticCSSValuePool[3448];
    dword_1ECE8C188 += 2;
  }
  v66 = v19;
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 24, 494, &v66, v2, v11 & 1);
  if (v66)
  {
    if (*v66 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v66, v20);
    else
      *v66 -= 2;
  }
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 21, 494, &v65, v2, 0);
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 20, 494, &v64, v2, 0);
  WebCore::CSSFontVariantNumericParser::finalizeValue((WTF *)&v52, v70);
  v21 = (int *)v70[0];
  v70[0] = 0;
  v66 = v21;
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 25, 494, &v66, v2, v12 & 1);
  if (v66)
  {
    if (*v66 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v66, v22);
    else
      *v66 -= 2;
  }
  v23 = (_DWORD *)v70[0];
  v70[0] = 0;
  if (v23)
  {
    if (*v23 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v22);
    else
      *v23 -= 2;
  }
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 22, 494, &v62, v2, 0);
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 26, 494, &v63, v2, 0);
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 23, 494, &v61, v2, 0);
  v24 = 1;
LABEL_27:
  if (HIDWORD(v55))
  {
    v30 = v54;
    v31 = 8 * HIDWORD(v55);
    do
    {
      v32 = *(_DWORD **)v30;
      *(_QWORD *)v30 = 0;
      if (v32)
      {
        if (*v32 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, a2);
        else
          *v32 -= 2;
      }
      v30 = (WTF *)((char *)v30 + 8);
      v31 -= 8;
    }
    while (v31);
  }
  v25 = v54;
  if (v10 != v54 && v54 != 0)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree(v25, a2);
  }
  if (HIDWORD(v59))
  {
    v33 = v58;
    v34 = 8 * HIDWORD(v59);
    do
    {
      v35 = *(_DWORD **)v33;
      *(_QWORD *)v33 = 0;
      if (v35)
      {
        if (*v35 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, a2);
        else
          *v35 -= 2;
      }
      v33 = (WTF *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  v27 = v58;
  if (v9 != v58 && v58 != 0)
  {
    v58 = 0;
    LODWORD(v59) = 0;
    WTF::fastFree(v27, a2);
  }
  if (v61)
  {
    if (*v61 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, a2);
    else
      *v61 -= 2;
  }
  if (v62)
  {
    if (*v62 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, a2);
    else
      *v62 -= 2;
  }
  if (v63)
  {
    if (*v63 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v63, a2);
    else
      *v63 -= 2;
  }
  if (v64)
  {
    if (*v64 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, a2);
    else
      *v64 -= 2;
  }
  if (v65)
  {
    if (*v65 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, a2);
    else
      *v65 -= 2;
  }
  return v24;
}

float32x2_t WebCore::FloatPoint::FloatPoint(float32x2_t *a1, int32x2_t *a2)
{
  float32x2_t result;

  result = vcvt_f32_s32(*a2);
  *a1 = result;
  return result;
}

{
  float32x2_t result;

  result = vcvt_f32_s32(*a2);
  *a1 = result;
  return result;
}

const char *WebCore::CSSTokenizer::commercialAt@<X0>(WebCore::CSSTokenizer *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  const char *result;
  uint64_t v6;
  int v7;
  int v8;

  if (WebCore::CSSTokenizer::nextCharsAreIdentifier(a1))
  {
    result = WebCore::CSSTokenizer::consumeName(a1, v4);
    if ((v6 & 0xFF00000000) != 0)
      v7 = 4194306;
    else
      v7 = 2;
    v8 = v7 | (*(unsigned __int8 *)(a2 + 3) << 24);
    *(_DWORD *)(a2 + 16) = -1;
  }
  else
  {
    LODWORD(v6) = 0;
    result = 0;
    v8 = (*(unsigned __int8 *)(a2 + 3) << 24) | 6;
    *(_WORD *)(a2 + 16) = 64;
  }
  *(_QWORD *)(a2 + 8) = result;
  *(_DWORD *)a2 = v8;
  *(_DWORD *)(a2 + 4) = v6;
  return result;
}

const char *WebCore::CSSTokenizer::hash@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  WebCore::CSSTokenizerInputStream *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  const char *result;
  uint64_t v12;
  int v13;
  int v14;

  v6 = (WebCore::CSSTokenizerInputStream *)(a1 + 848);
  v7 = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 848), 0);
  if (v7 > 0x7F
    || (v8 = v7, v7 == 95)
    || (v7 | 0x20) - 97 < 0x1A
    || v7 == 45
    || v7 - 48 < 0xA
    || (result = (const char *)WebCore::CSSTokenizerInputStream::peek(v6, 1u), v8 == 92)
    && (result > 0xD || ((1 << (char)result) & 0x3400) == 0))
  {
    v9 = WebCore::CSSTokenizer::nextCharsAreIdentifier((WebCore::CSSTokenizer *)a1) ^ 1;
    result = WebCore::CSSTokenizer::consumeName((WebCore::CSSTokenizer *)a1, v10);
    v13 = *(unsigned __int8 *)(a3 + 3);
    *(_DWORD *)(a3 + 16) = v9;
    if ((v12 & 0xFF00000000) != 0)
      v14 = 4194307;
    else
      v14 = 3;
    *(_QWORD *)(a3 + 8) = result;
    *(_DWORD *)a3 = v14 | (v13 << 24);
    *(_DWORD *)(a3 + 4) = v12;
  }
  else
  {
    *(_QWORD *)a3 = (*(unsigned __int8 *)(a3 + 3) << 24) | 6u;
    *(_QWORD *)(a3 + 8) = 0;
    *(_WORD *)(a3 + 16) = a2;
  }
  return result;
}

uint64_t WebCore::CSSTokenizer::nextCharsAreIdentifier(WebCore::CSSTokenizer *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  WebCore::CSSTokenizerInputStream *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  BOOL v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v1 = *((_QWORD *)this + 106);
  v2 = *((_QWORD *)this + 107);
  if (v1 >= v2)
  {
    v6 = 0;
  }
  else
  {
    v3 = *((_QWORD *)this + 108);
    if (*(_DWORD *)(v3 + 4) <= v1)
    {
      __break(0xC471u);
      JUMPOUT(0x1940CE678);
    }
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *((_QWORD *)this + 106);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      v6 = *(unsigned __int8 *)(v4 + v5);
    else
      v6 = *(unsigned __int16 *)(v4 + 2 * v5);
  }
  v7 = (WebCore::CSSTokenizer *)((char *)this + 848);
  v8 = v1 + 1;
  *((_QWORD *)this + 106) = v8;
  if (v8 >= v2)
  {
    v11 = 0;
  }
  else
  {
    v9 = *((_QWORD *)this + 108);
    if (*(_DWORD *)(v9 + 4) <= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1940CE658);
    }
    v10 = *(_QWORD *)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      v11 = *(unsigned __int8 *)(v10 + v8);
    else
      v11 = *(unsigned __int16 *)(v10 + 2 * v8);
  }
  result = 1;
  if (v6 <= 0x7F && v6 != 95 && (v6 | 0x20) - 97 >= 0x1A)
  {
    if (v6 == 45)
    {
      if (v11 != 45 && v11 <= 0x7F && v11 != 95 && (unsigned __int16)((v11 | 0x20) - 97) >= 0x1Au)
      {
        v15 = WebCore::CSSTokenizerInputStream::peek(v7, 0);
        v16 = WebCore::CSSTokenizerInputStream::peek(v7, 1u);
        result = 0;
        if (v15 == 92)
        {
          if (v16 >= 0xE)
            result = 1;
          else
            result = (0xBFFu >> v16) & 1;
        }
      }
    }
    else
    {
      v13 = v11 >= 0xE;
      v14 = (0xBFFu >> v11) & 1;
      if (v13)
        v14 = 1;
      if (v6 == 92)
        result = v14;
      else
        result = 0;
    }
  }
  --*(_QWORD *)v7;
  return result;
}

uint64_t WebCore::AuthenticationChallengeBase::protectionSpace(WebCore::AuthenticationChallengeBase *this)
{
  return (uint64_t)this + 8;
}

double WebCore::FloatSize::operator CGSize(uint64_t a1)
{
  return *(float *)a1;
}

__n128 WebCore::Region::Region(__n128 *a1, __n128 *a2, unint64_t *a3)
{
  __n128 result;
  unint64_t v4;

  result = *a2;
  *a1 = *a2;
  v4 = *a3;
  *a3 = 0;
  a1[1].n128_u64[0] = v4;
  return result;
}

{
  __n128 result;
  unint64_t v4;

  result = *a2;
  *a1 = *a2;
  v4 = *a3;
  *a3 = 0;
  a1[1].n128_u64[0] = v4;
  return result;
}

uint64_t PAL::RVItemFunction(PAL *this)
{
  return qword_1ECE7EA38;
}

uint64_t WebCore::TileGrid::platformCALayerDrawsContent(WebCore::TileGrid *this)
{
  return 1;
}

uint64_t PAL::VKCImageAnalysisFunction(PAL *this)
{
  return qword_1ECE7EEA0;
}

uint64_t WebCore::Editor::client(WebCore::Editor *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

BOOL WebCore::IntRect::isValid(WebCore::IntRect *this)
{
  if (__OFADD__(*(_DWORD *)this, *((_DWORD *)this + 2)))
    return 0;
  return !__OFADD__(*((_DWORD *)this + 1), *((_DWORD *)this + 3));
}

uint64_t WebCore::GraphicsContext::fillRect(WebCore::GraphicsContext *this, const WebCore::FloatRect *a2, WebCore::Gradient *a3)
{
  (*(void (**)(WebCore::GraphicsContext *, const WebCore::FloatRect *))(*(_QWORD *)this + 456))(this, a2);
  return WebCore::Gradient::paint(a3, this);
}

double WebCore::GraphicsContextCG::clip(WebCore::GraphicsContextCG *this, const WebCore::FloatRect *a2)
{
  double result;
  CGRect v3;

  *((_BYTE *)this + 744) |= 8u;
  v3.origin.x = *(float *)a2;
  v3.origin.y = *((float *)a2 + 1);
  v3.size.width = *((float *)a2 + 2);
  v3.size.height = *((float *)a2 + 3);
  CGContextClipToRect(*((CGContextRef *)this + 90), v3);
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(WebCore::ScrollingTreeScrollingNode *this)
{
  return (uint64_t)this + 160;
}

uint64_t WebCore::isInAuxiliaryProcess(WebCore *this)
{
  return byte_1ECE90D3F;
}

double WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(WebCore::RenderLayerScrollableArea *this)
{
  int v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  WebCore::RenderBox *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  WebCore::RenderBox *v25;
  int v26;
  WebCore::RenderBox *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WebCore::RenderBox *v31;
  int v32;
  int v33;
  int v34;
  __int16 v35;
  int v36;
  WebCore::RenderBox *v37;
  int v38;
  int v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  WebCore::RenderBox *v43;
  int v44;
  int v45;
  int v46;
  WebCore::RenderBox *v47;
  int v48;
  int v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  double result;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  void *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _QWORD v84[2];
  char v85;
  __int128 v86;
  char v87;

  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v2)
    v3 = (*(_BYTE *)(v2 + 45) & 4) == 0;
  else
    v3 = 1;
  if (v3)
    return result;
  v5 = *((_QWORD *)this + 13);
  *((_BYTE *)this + 76) = 0;
  if ((*(_BYTE *)(v2 + 45) & 4) != 0)
    v6 = (WebCore::RenderBox *)v2;
  else
    v6 = 0;
  v7 = *((_QWORD *)v6 + 24);
  if (v7)
    v8 = *(_QWORD *)(v7 + 12);
  else
    WebCore::RenderBox::flippedClientBoxRect(v6);
  *((_DWORD *)this + 22) = ((int)(v8 - (v7 & 0xFFFFFFC0) + 32) >> 6) + (int)v8 / 64;
  *((_DWORD *)this + 23) = ((int)(HIDWORD(v8) - (v1 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v8) / 64;
  WebCore::RenderLayerScrollableArea::computeScrollOrigin(this);
  WebCore::RenderLayerScrollableArea::computeHasCompositedScrollableOverflow((uint64_t)this, 1);
  WebCore::RenderLayer::updateSelfPaintingLayer(*((_QWORD *)this + 12));
  WebCore::RenderLayerScrollableArea::updateSnapOffsets(this);
  if (((*(_BYTE *)(v2 + 45) & 1) != 0
     || (v9 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8)) == 0
     || v2 != (*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL)
     || (*(_WORD *)(v9 + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
    && !WebCore::RenderLayerScrollableArea::isUserScrollInProgress(this))
  {
    v10 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 416))(this);
    v11 = *((_QWORD *)this + 4);
    v12 = v11 + v10;
    v13 = ((v11 & 0xFFFFFFFF00000000) + v10) >> 32;
    v14 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 496))(this);
    v15 = v14;
    v16 = HIDWORD(v14);
    v17 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 528))(this);
    v18 = v17 + (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 536))(this) + v16;
    v19 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 488))(this);
    v20 = v15 - v19;
    v21 = v18 - HIDWORD(v19);
    if (v12 < v15 - (int)v19)
      v20 = v12;
    v22 = v20 & ~(v20 >> 31);
    if ((int)v13 < v21)
      v21 = v13;
    v23 = v22 | ((unint64_t)(v21 & ~(v21 >> 31)) << 32);
    v84[0] = v23;
    v24 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 416))(this);
    if (v23 != (((*((_QWORD *)this + 4) & 0xFFFFFFFF00000000) + v24) & 0xFFFFFFFF00000000 | (*((_QWORD *)this + 4)
                                                                                                + v24)))
    {
      v86 = xmmword_1968DF820;
      WebCore::RenderLayerScrollableArea::scrollToOffset(this, (WebCore::IntPoint *)v84, &v86);
    }
  }
  v25 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
  v26 = *((_BYTE *)v25 + 45) & 4;
  if ((*((_BYTE *)v25 + 45) & 4) != 0)
    v27 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
  else
    v27 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v27 + 11) + 32) + 148) & 0x1FC000) != 0x20000)
  {
    v29 = *((_QWORD *)this + 16);
    v28 = *((_QWORD *)this + 17);
    if (*((_BYTE *)this + 76))
    {
      WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
      v25 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
      v26 = *((_BYTE *)v25 + 45) & 4;
    }
    v30 = *((_DWORD *)this + 22);
    if (v26)
      v31 = v25;
    else
      v31 = 0;
    v32 = WebCore::RenderBox::clientWidth(v31);
    v34 = ((int)(v32 - (v33 & 0xFFFFFFC0) + 32) >> 6) + v32 / 64;
    if (*((_BYTE *)this + 76))
    {
      v83 = v34;
      WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
      v34 = v83;
    }
    v35 = v30 > v34;
    v36 = *((_DWORD *)this + 23);
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
      v37 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
    else
      v37 = 0;
    v38 = WebCore::RenderBox::clientHeight(v37);
    WebCore::RenderLayerScrollableArea::updateScrollbarPresenceAndState(this, v35 | 0x100, (v36 > ((int)(v38 - (v39 & 0xFFFFFFC0) + 32) >> 6) + v38 / 64) | 0x100);
    if (WebCore::RenderBox::hasAutoScrollbar((uint64_t)v27, 0))
    {
      v59 = (v29 != 0) ^ (*((_QWORD *)this + 16) != 0);
      if ((WebCore::RenderBox::hasAutoScrollbar((uint64_t)v27, 1) & 1) == 0)
      {
        if (!(_DWORD)v59)
        {
LABEL_38:
          v40 = (_DWORD *)*((_QWORD *)this + 16);
          if (v40)
          {
            v74 = WebCore::RenderBox::clientWidth(v27);
            v76 = ((int)(v74 - (v75 & 0xFFFFFFC0) + 32) >> 6) + v74 / 64;
            v77 = *((_DWORD *)this + 22);
            if (v40[22] != v76 || v40[23] != v77)
            {
              v40[22] = v76;
              v40[23] = v77;
              (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 312))(v40);
            }
          }
          v41 = (_DWORD *)*((_QWORD *)this + 17);
          if (v41)
          {
            v69 = WebCore::RenderBox::clientHeight(v27);
            v71 = ((int)(v69 - (v70 & 0xFFFFFFC0) + 32) >> 6) + v69 / 64;
            v72 = *((_DWORD *)this + 23);
            if (v41[22] != v71 || v41[23] != v72)
            {
              v41[22] = v71;
              v41[23] = v72;
              (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 312))(v41);
            }
          }
          WebCore::RenderLayerScrollableArea::updateScrollbarSteps(this);
          if (*((_BYTE *)this + 76))
            WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
          v42 = *((_DWORD *)this + 22);
          if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
            v43 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
          else
            v43 = 0;
          v44 = WebCore::RenderBox::clientWidth(v43);
          if (v42 <= ((int)(v44 - (v45 & 0xFFFFFFC0) + 32) >> 6) + v44 / 64)
            goto LABEL_128;
          v58 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
          if ((*(_BYTE *)(v58 + 45) & 4) == 0)
            v58 = 0;
          if ((*(_BYTE *)(v58 + 22) & 1) != 0 && ((*(_DWORD *)(v58 + 96) >> 10) & 7u) - 3 < 2)
          {
            v51 = 1;
          }
          else
          {
LABEL_128:
            if (*((_BYTE *)this + 76))
              WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
            v46 = *((_DWORD *)this + 23);
            if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
              v47 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
            else
              v47 = 0;
            v48 = WebCore::RenderBox::clientHeight(v47);
            if (v46 <= ((int)(v48 - (v49 & 0xFFFFFFC0) + 32) >> 6) + v48 / 64)
              goto LABEL_55;
            v50 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
            if ((*(_BYTE *)(v50 + 45) & 4) == 0)
              v50 = 0;
            if ((*(_BYTE *)(v50 + 22) & 1) != 0)
              v51 = ((unsigned __int16)*(_DWORD *)(v50 + 96) >> 13) - 3 < 2;
            else
LABEL_55:
              v51 = 0;
          }
          WebCore::RenderLayerScrollableArea::updateScrollableAreaSet(this, v51);
          goto LABEL_57;
        }
        v60 = 0;
        v59 = 1;
LABEL_77:
        WebCore::RenderLayer::updateSelfPaintingLayer(*((_QWORD *)this + 12));
        v61 = *(_DWORD **)(*((_QWORD *)this + 12) + 32);
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v61 + 3) + 8) + 40)
                                                                                               + 8)
                                                                                   + 1944)
                                                                       + 24)
                                                           + 8)
                                               + 40)
                                   + 8)
                       + 3382))
        {
          LOBYTE(v86) = 0;
          v87 = 0;
          LOBYTE(v84[0]) = 0;
          v85 = 0;
          WebCore::RenderObject::issueRepaint((uint64_t)v61, &v86, 0, 0, (uint64_t)v84);
        }
        v62 = *((_QWORD *)v61 + 12);
        if (((v62 & 0x1C00) == 0x1000 || (v62 & 0xE000) == 0x8000) && !*((_BYTE *)this + 77))
        {
          *((_BYTE *)this + 77) = 1;
          v63 = v61[5];
          if ((v63 & 8) == 0)
          {
            v61[5] = v63 | 8;
            if ((v63 & 0x8000) != 0)
            {
              if ((*((_BYTE *)v61 + 45) & 0x10) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1940CF040);
              }
              v78 = *((_QWORD *)v61 + 18);
              if (v78)
              {
                v79 = *(_DWORD *)(v78 + 8) + 1;
                *(_DWORD *)(v78 + 8) = v79;
              }
              else
              {
                v79 = MEMORY[8];
              }
              *(_QWORD *)(v78 + 24) = *(_QWORD *)(v78 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
              if (!v79)
              {
                __break(0xC471u);
                JUMPOUT(0x1940CF06CLL);
              }
              *(_DWORD *)(v78 + 8) = v79 - 1;
            }
          }
          if ((*((_BYTE *)v61 + 45) & 0x40) != 0)
          {
            ++v61[4];
            (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v61 + 1680))(v61, v59, v60);
            (*(void (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v61 + 1656))(v61, 1, 0);
            v64 = v61[4];
            if (!v64)
            {
              __break(0xC471u);
              JUMPOUT(0x1940CF000);
            }
            v61[4] = v64 - 1;
          }
          else
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 688))(v61);
          }
          *((_BYTE *)this + 77) = 0;
        }
        v65 = *((_QWORD *)v61 + 4);
        if (v65)
        {
          v66 = *(_QWORD *)(v65 + 8);
          if (v66)
          {
            if (*(char *)(v66 + 45) < 0)
            {
              v67 = *(_DWORD *)(v66 + 16) + 1;
              *(_DWORD *)(v66 + 16) = v67;
              if ((*((_BYTE *)v61 + 45) & 4) != 0)
              {
                if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
                  v68 = *(void **)(*((_QWORD *)this + 12) + 32);
                else
                  v68 = 0;
                WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v66 + 200), v68);
                v67 = *(_DWORD *)(v66 + 16);
              }
              if (!v67)
              {
                __break(0xC471u);
                JUMPOUT(0x1940CF020);
              }
              *(_DWORD *)(v66 + 16) = v67 - 1;
            }
          }
        }
        goto LABEL_38;
      }
    }
    else
    {
      if (!WebCore::RenderBox::hasAutoScrollbar((uint64_t)v27, 1))
        goto LABEL_38;
      v59 = 0;
    }
    v60 = (v28 != 0) ^ (*((_QWORD *)this + 17) != 0);
    if ((v59 & 1) == 0 && (v28 != 0) == (*((_QWORD *)this + 17) != 0))
      goto LABEL_38;
    goto LABEL_77;
  }
LABEL_57:
  v52 = *((_QWORD *)this + 13);
  if (v5 != v52)
  {
    *(float *)&v86 = (float)(int)v52;
    *((float *)&v86 + 1) = (float)SHIDWORD(v52);
    WebCore::ScrollableArea::scrollToPositionWithoutAnimation(this, (float *)&v86, 1);
  }
  v53 = *((_QWORD *)this + 12);
  if (*(_QWORD *)(v53 + 256))
  {
    *(_DWORD *)(v53 + 12) |= 0x40u;
    WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v53, 2);
    v73 = *((_QWORD *)this + 12);
    *(_DWORD *)(v73 + 12) |= 0x80u;
    WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v73, 2);
  }
  if (WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(this))
  {
    v57 = *((_QWORD *)this + 12);
    *(_DWORD *)(v57 + 12) |= 8u;
    WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v57, 1);
  }
  WebCore::ScrollableArea::resnapAfterLayout((uint64_t)this);
  v55 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v55 + 24) + 8) + 40)
                                                        + 8)
                                            + 528)
                                + 8)
                    + 24);
    if (v80)
    {
      v81 = *(_QWORD *)(v80 + 8);
      if (v81)
      {
        v82 = *(_QWORD *)(*(_QWORD *)(v81 + 80) + 8);
        if (v82)
          return WebCore::InspectorInstrumentation::didAddOrRemoveScrollbarsImpl(v82, v55);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBox::clientWidth(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;

  v2 = *((_DWORD *)this + 40);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  return v10 & ~(v10 >> 31);
}

unint64_t WebCore::RenderBox::flippedClientBoxRect(WebCore::RenderBox *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v23;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;

  v2 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 992))(this);
  v4 = v2;
  v5 = HIDWORD(v3);
  v6 = *((_DWORD *)this + 40);
  v7 = *((_DWORD *)this + 41);
  v8 = v6 - HIDWORD(v3);
  v9 = (v6 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v6, HIDWORD(v3)))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  v10 = __OFSUB__(v8, HIDWORD(v2));
  v11 = v8 - HIDWORD(v2);
  v12 = (v8 >> 31) + 0x7FFFFFFF;
  if (v10)
    v13 = v12;
  else
    v13 = v11;
  v14 = v7 - v2;
  v15 = (v7 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v7, (_DWORD)v2))
    v14 = (v7 >> 31) + 0x7FFFFFFF;
  v10 = __OFSUB__(v14, (_DWORD)v3);
  v16 = v14 - v3;
  v17 = (v14 >> 31) + 0x7FFFFFFF;
  if (v10)
    v18 = v17;
  else
    v18 = v16;
  v19 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v20 = v19 > 5;
  v21 = (1 << v19) & 0x2A;
  if (v20 || v21 == 0)
  {
    v23 = *((_DWORD *)this + 5);
  }
  else
  {
    v23 = *((_DWORD *)this + 5);
    v25 = HIDWORD(v3) + v13;
    if (__OFADD__(HIDWORD(v3), v13))
      v25 = (HIDWORD(v3) >> 31) + 0x7FFFFFFF;
    v10 = __OFSUB__(v6, v25);
    v26 = v6 - v25;
    if (v10)
      v26 = v9;
    v27 = (v2 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v2, v18))
      v27 = v2 + v18;
    v10 = __OFSUB__(v7, v27);
    v28 = v7 - v27;
    if (v10)
      v28 = v15;
    if ((v23 & 0x1000) != 0)
    {
      LODWORD(v5) = v26;
      v4 = v2;
    }
    else
    {
      v4 = v28;
    }
  }
  if ((v23 & 0x10000) != 0)
  {
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  }
  return v5 | (unint64_t)(v4 << 32);
}

WebCore::ScrollbarTheme *WebCore::RenderBox::horizontalScrollbarHeight(WebCore::RenderBox *this)
{
  uint64_t v1;
  WebCore::RenderLayerScrollableArea *v2;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 18);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderLayerScrollableArea **)(v1 + 264);
  if (!v2)
    return 0;
  if ((*((_BYTE *)this + 22) & 1) == 0)
    return 0;
  if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v2 + 400))(v2))
  {
    v6 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v2 + 400))(v2);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6) & 1) != 0)
      return 0;
  }
  if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v2 + 392))(v2))
  {
    v7 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v2 + 392))(v2);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 272))(v7) & 1) != 0)
      return 0;
  }
  v5 = (*((_DWORD *)this + 24) >> 10) & 7;
  if (v5 == 1)
  {
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 1) == 0)
      return WebCore::RenderLayerScrollableArea::horizontalScrollbarHeight(v2, 0, (*((_DWORD *)this + 5) & 0x1000) == 0);
    return 0;
  }
  if ((v5 - 3) >= 2)
    return 0;
  return WebCore::RenderLayerScrollableArea::horizontalScrollbarHeight(v2, 0, (*((_DWORD *)this + 5) & 0x1000) == 0);
}

uint64_t WebCore::RenderBlock::borderBottom(WebCore::RenderBlock *this)
{
  uint64_t v1;
  float v2;
  double v3;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  WebCore::RenderBlock *v10;

  if ((*((_DWORD *)this + 31) & 0xE000) != 0x2000
    || (v10 = this, v7 = WebCore::RenderBlock::intrinsicBorderForFieldset(this), this = v10, !v7))
  {
    v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v2 = 0.0;
    if ((*(_BYTE *)(v1 + 196) & 0xE) != 0)
    {
      v6 = *(_QWORD *)(v1 + 200);
      if (*(_BYTE *)(v6 + 5) && *(_BYTE *)(v6 + 68) == 4)
      {
        if (*(_BYTE *)(v6 + 70))
          v2 = *(float *)(v6 + 64);
        else
          v2 = (float)*(int *)(v6 + 64);
      }
      else
      {
        v2 = *(float *)(v1 + 192);
      }
    }
    v3 = v2 * 64.0;
    if (v3 >= 2147483650.0 || v3 <= -2147483650.0)
    {
      if (v3 >= 2147483650.0)
        return 0x7FFFFFFFLL;
      if (v3 <= -2147483650.0)
        return 0x80000000;
    }
    return (int)v3;
  }
  v8 = WebCore::RenderBoxModelObject::borderBottom(v10);
  v9 = WebCore::RenderBlock::intrinsicBorderForFieldset(v10);
  if (__OFADD__(v8, v9))
    return (v8 >> 31) + 0x7FFFFFFF;
  else
    return v8 + v9;
}

uint64_t WebCore::RenderBox::contentWidth(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t (*v20)(WebCore::RenderBox *);
  WebCore::RenderBox *v21;
  unsigned int v22;
  int v23;
  int v24;

  v2 = *((_DWORD *)this + 40);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  v11 = v10 & ~(v10 >> 31);
  v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 944))(this);
  if (__OFSUB__(v11, v12))
    v13 = 0x7FFFFFFF;
  else
    v13 = v11 - v12;
  v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 952))(this);
  v15 = v13 - v14;
  if (__OFSUB__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v20 = *(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352);
    v21 = this;
    v22 = v15;
    v23 = v20(v21);
    v15 = v22;
    v24 = v23 << 6;
    if (v23 > 0x1FFFFFF)
      v24 = 0x7FFFFFFF;
    if (v23 >= -33554432)
      v16 = v24;
    else
      v16 = 0x80000000;
  }
  else
  {
    v16 = 0;
  }
  v9 = __OFSUB__(v15, v16);
  v17 = v15 - v16;
  v18 = (v15 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v18 = v17;
  return v18 & ~(v18 >> 31);
}

uint64_t WebCore::RenderBlock::borderLeft(WebCore::RenderBlock *this)
{
  int v1;
  BOOL v2;
  uint64_t v3;
  float v4;
  double v5;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  WebCore::RenderBlock *v12;

  v1 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v2 = v1 == 4 || v1 == 2;
  if (!v2 || (v12 = this, v9 = WebCore::RenderBlock::intrinsicBorderForFieldset(this), this = v12, !v9))
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v4 = 0.0;
    if ((*(_BYTE *)(v3 + 124) & 0xE) != 0)
    {
      v8 = *(_QWORD *)(v3 + 200);
      if (*(_BYTE *)(v8 + 5) && *(_BYTE *)(v8 + 76) == 4)
      {
        if (*(_BYTE *)(v8 + 78))
          v4 = *(float *)(v8 + 72);
        else
          v4 = (float)*(int *)(v8 + 72);
      }
      else
      {
        v4 = *(float *)(v3 + 120);
      }
    }
    v5 = v4 * 64.0;
    if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
    {
      if (v5 >= 2147483650.0)
        return 0x7FFFFFFFLL;
      if (v5 <= -2147483650.0)
        return 0x80000000;
    }
    return (int)v5;
  }
  v10 = WebCore::RenderBoxModelObject::borderLeft(v12);
  v11 = WebCore::RenderBlock::intrinsicBorderForFieldset(v12);
  if (__OFADD__(v10, v11))
    return (v10 >> 31) + 0x7FFFFFFF;
  else
    return v10 + v11;
}

uint64_t WebCore::RenderBlock::borderRight(WebCore::RenderBlock *this)
{
  int v1;
  BOOL v2;
  uint64_t v3;
  float v4;
  double v5;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  WebCore::RenderBlock *v12;

  v1 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v2 = v1 == 5 || v1 == 3;
  if (!v2 || (v12 = this, v9 = WebCore::RenderBlock::intrinsicBorderForFieldset(this), this = v12, !v9))
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v4 = 0.0;
    if ((*(_BYTE *)(v3 + 148) & 0xE) != 0)
    {
      v8 = *(_QWORD *)(v3 + 200);
      if (*(_BYTE *)(v8 + 5) && *(_BYTE *)(v8 + 60) == 4)
      {
        if (*(_BYTE *)(v8 + 62))
          v4 = *(float *)(v8 + 56);
        else
          v4 = (float)*(int *)(v8 + 56);
      }
      else
      {
        v4 = *(float *)(v3 + 144);
      }
    }
    v5 = v4 * 64.0;
    if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
    {
      if (v5 >= 2147483650.0)
        return 0x7FFFFFFFLL;
      if (v5 <= -2147483650.0)
        return 0x80000000;
    }
    return (int)v5;
  }
  v10 = WebCore::RenderBoxModelObject::borderRight(v12);
  v11 = WebCore::RenderBlock::intrinsicBorderForFieldset(v12);
  if (__OFADD__(v10, v11))
    return (v10 >> 31) + 0x7FFFFFFF;
  else
    return v10 + v11;
}

WebCore::ScrollbarTheme *WebCore::RenderBox::verticalScrollbarWidth(WebCore::RenderBox *this)
{
  uint64_t v1;
  WebCore::RenderLayerScrollableArea *v2;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 18);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderLayerScrollableArea **)(v1 + 264);
  if (!v2)
    return 0;
  if ((*((_BYTE *)this + 22) & 1) == 0)
    return 0;
  if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v2 + 400))(v2))
  {
    v6 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v2 + 400))(v2);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6) & 1) != 0)
      return 0;
  }
  if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v2 + 392))(v2))
  {
    v7 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v2 + 392))(v2);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 272))(v7) & 1) != 0)
      return 0;
  }
  v5 = (unsigned __int16)*((_DWORD *)this + 24) >> 13;
  if (v5 == 1)
  {
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 1) == 0)
      return WebCore::RenderLayerScrollableArea::verticalScrollbarWidth(v2, 0, (*((_DWORD *)this + 5) & 0x1000) == 0);
    return 0;
  }
  if ((v5 - 3) >= 2)
    return 0;
  return WebCore::RenderLayerScrollableArea::verticalScrollbarWidth(v2, 0, (*((_DWORD *)this + 5) & 0x1000) == 0);
}

uint64_t WebCore::RenderBoxModelObject::paddingLeft(WebCore::RenderBoxModelObject *this)
{
  unsigned __int8 *v1;
  int v2;
  float v3;
  float v4;
  double v5;
  float v8;
  float v9;
  int v11;
  unsigned __int8 *v12;

  v1 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v2 = v1[100];
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v12 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v11 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v1 = v12;
    v2 = v12[100];
    v3 = (float)v11 * 0.015625;
  }
  else
  {
    v3 = 0.0;
  }
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v8 = *((float *)v1 + 24);
      if (!v1[102])
        v8 = (float)SLODWORD(v8);
      v9 = (float)(v3 * v8) / 100.0;
    }
    else
    {
      if (v2 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 96), v3);
    }
    v5 = v9 * 64.0;
    if (v5 < 2147483650.0 && v5 > -2147483650.0)
      return (int)v5;
    if (v5 < 2147483650.0)
    {
LABEL_28:
      if (v5 <= -2147483650.0)
        return 0x80000000;
      return (int)v5;
    }
    return 0x7FFFFFFFLL;
  }
  v4 = *((float *)v1 + 24);
  if (!v1[102])
    v4 = (float)SLODWORD(v4);
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 < 2147483650.0)
      goto LABEL_28;
    return 0x7FFFFFFFLL;
  }
  return (int)v5;
}

uint64_t WebCore::RenderLayerScrollableArea::horizontalScrollbar(WebCore::RenderLayerScrollableArea *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t WebCore::RenderBoxModelObject::paddingRight(WebCore::RenderBoxModelObject *this)
{
  unsigned __int8 *v1;
  int v2;
  float v3;
  float v4;
  double v5;
  float v8;
  float v9;
  int v11;
  unsigned __int8 *v12;

  v1 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v2 = v1[84];
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v12 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v11 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v1 = v12;
    v2 = v12[84];
    v3 = (float)v11 * 0.015625;
  }
  else
  {
    v3 = 0.0;
  }
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v8 = *((float *)v1 + 20);
      if (!v1[86])
        v8 = (float)SLODWORD(v8);
      v9 = (float)(v3 * v8) / 100.0;
    }
    else
    {
      if (v2 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 80), v3);
    }
    v5 = v9 * 64.0;
    if (v5 < 2147483650.0 && v5 > -2147483650.0)
      return (int)v5;
    if (v5 < 2147483650.0)
    {
LABEL_28:
      if (v5 <= -2147483650.0)
        return 0x80000000;
      return (int)v5;
    }
    return 0x7FFFFFFFLL;
  }
  v4 = *((float *)v1 + 20);
  if (!v1[86])
    v4 = (float)SLODWORD(v4);
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 < 2147483650.0)
      goto LABEL_28;
    return 0x7FFFFFFFLL;
  }
  return (int)v5;
}

uint64_t WebCore::RenderLayerScrollableArea::verticalScrollbar(WebCore::RenderLayerScrollableArea *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t WebCore::RenderBox::overflowClipRect(_QWORD *a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::RenderLayerScrollableArea *v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v6 = a1[20];
  v7 = *a2;
  v8 = a2[1];
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 1016))(a1);
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 1000))(a1);
  LODWORD(v11) = v7 + v9;
  if (__OFADD__(v7, v9))
    v11 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v11 = v11;
  LODWORD(v12) = v8 + v10;
  if (__OFADD__(v8, v10))
    v12 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v12 = v12;
  v33 = v11 | (v12 << 32);
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 1016))(a1);
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 1024))(a1);
  if (__OFADD__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v15 = v13 + v14;
  v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 1000))(a1);
  v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 1008))(a1);
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
    v18 = (v16 >> 31) + 0x7FFFFFFF;
  LODWORD(v19) = v6 - v15;
  if (__OFSUB__((_DWORD)v6, v15))
    v19 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v19 = v19;
  v20 = __OFSUB__(HIDWORD(v6), v18);
  LODWORD(v21) = HIDWORD(v6) - v18;
  if (v20)
    v21 = ((HIDWORD(v6) >> 31) + 0x7FFFFFFF);
  else
    v21 = v21;
  v34 = v19 | (v21 << 32);
  v22 = (a1[12] >> 10) & 7;
  v23 = a1[12] & 0xE000;
  if (v22 == 2)
  {
    if (!v23)
      WebCore::LayoutRect::expandToInfiniteY((uint64_t)&v33);
  }
  else if (v23 == 0x4000 && !v22)
  {
    WebCore::LayoutRect::expandToInfiniteX(&v33);
  }
  v24 = a1[18];
  if (v24)
  {
    v26 = *(WebCore::RenderLayerScrollableArea **)(v24 + 264);
    if (v26)
    {
      v27 = WebCore::RenderLayerScrollableArea::verticalScrollbarWidth(v26, a4, (*((_DWORD *)a1 + 5) & 0x1000) == 0);
      v28 = WebCore::RenderLayerScrollableArea::horizontalScrollbarHeight(v26, a4, (*((_DWORD *)a1 + 5) & 0x1000) == 0);
      if (v27 <= 0x2000000)
        v29 = -64 * v27;
      else
        v29 = 0x80000000;
      if (v27 < -33554431)
        v29 = 0x7FFFFFFF;
      v20 = __OFADD__((_DWORD)v34, v29);
      v30 = v34 + v29;
      if (v20)
        v30 = (v34 >> 31) + 0x7FFFFFFF;
      LODWORD(v34) = v30;
      if (v28 <= 0x2000000)
        v31 = -64 * v28;
      else
        v31 = 0x80000000;
      if (v28 < -33554431)
        v31 = 0x7FFFFFFF;
      v20 = __OFADD__(HIDWORD(v34), v31);
      v32 = HIDWORD(v34) + v31;
      if (v20)
        v32 = (HIDWORD(v34) >> 31) + 0x7FFFFFFF;
      HIDWORD(v34) = v32;
    }
  }
  return v33;
}

uint64_t WebCore::RenderBlock::borderTop(WebCore::RenderBlock *this)
{
  uint64_t v2;
  float v3;
  double v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;

  if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 < 5
    || (*(_WORD *)((_BYTE *)this + 69) & 0x400) == 0
    || (v8 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this)) == 0|| !*(_DWORD *)(v8 + 8))
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v3 = 0.0;
    if ((*(_BYTE *)(v2 + 172) & 0xE) != 0)
    {
      v7 = *(_QWORD *)(v2 + 200);
      if (*(_BYTE *)(v7 + 5) && *(_BYTE *)(v7 + 52) == 4)
      {
        if (*(_BYTE *)(v7 + 54))
          v3 = *(float *)(v7 + 48);
        else
          v3 = (float)*(int *)(v7 + 48);
      }
      else
      {
        v3 = *(float *)(v2 + 168);
      }
    }
    v4 = v3 * 64.0;
    if (v4 >= 2147483650.0 || v4 <= -2147483650.0)
    {
      if (v4 >= 2147483650.0)
        return 0x7FFFFFFFLL;
      if (v4 <= -2147483650.0)
        return 0x80000000;
    }
    return (int)v4;
  }
  v9 = WebCore::RenderBoxModelObject::borderTop(this);
  v10 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
  if (__OFADD__(v9, v10))
    return (v9 >> 31) + 0x7FFFFFFF;
  else
    return v9 + v10;
}

WebCore::ScrollbarTheme *WebCore::RenderLayerScrollableArea::verticalScrollbarWidth(WebCore::RenderLayerScrollableArea *this, int a2, int a3)
{
  WebCore::ScrollbarTheme *result;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  WebCore::Widget *v10;
  uint64_t v11;
  uint64_t *v12;
  WebCore::ScrollbarTheme *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  result = (WebCore::ScrollbarTheme *)*((_QWORD *)this + 17);
  if (!result)
    goto LABEL_29;
  result = (WebCore::ScrollbarTheme *)(*(uint64_t (**)(WebCore::ScrollbarTheme *))(*(_QWORD *)result + 272))(result);
  if (!(_DWORD)result)
    goto LABEL_29;
  if (!a2)
    return 0;
  result = (WebCore::ScrollbarTheme *)WebCore::Scrollbar::shouldParticipateInHitTesting(*((WebCore::Scrollbar **)this
                                                                                        + 17));
  if ((_DWORD)result)
  {
LABEL_29:
    if (*((_QWORD *)this + 17))
      v6 = 1;
    else
      v6 = a3 == 0;
    if (v6)
    {
      v10 = (WebCore::Widget *)*((_QWORD *)this + 17);
LABEL_18:
      if (v10 && !WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(this))
      {
        WebCore::Widget::frameRect(v10);
        return (WebCore::ScrollbarTheme *)v11;
      }
      return 0;
    }
    v7 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
    if (v7)
      v8 = (*(_BYTE *)(v7 + 45) & 4) == 0;
    else
      v8 = 1;
    if (v8 || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 584) & 1) != 0)
      return 0;
    v12 = WebCore::ScrollbarTheme::theme(result);
    v13 = (WebCore::ScrollbarTheme *)(*(uint64_t (**)(uint64_t *))(*v12 + 64))(v12);
    if ((_DWORD)v13)
    {
      v10 = (WebCore::Widget *)*((_QWORD *)this + 17);
      goto LABEL_18;
    }
    v14 = WebCore::ScrollbarTheme::theme(v13);
    v15 = 0;
    v16 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
    if (v16 && (*(_BYTE *)(v16 + 45) & 4) != 0)
      v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 40) + 586);
    return (WebCore::ScrollbarTheme *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 40))(v14, v15, 1);
  }
  return result;
}

WebCore::ScrollbarTheme *WebCore::RenderLayerScrollableArea::horizontalScrollbarHeight(WebCore::RenderLayerScrollableArea *this, int a2, char a3)
{
  WebCore::ScrollbarTheme *result;
  WebCore::Widget *v6;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  WebCore::ScrollbarTheme *v11;
  WebCore::Widget *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  result = (WebCore::ScrollbarTheme *)*((_QWORD *)this + 16);
  if (result)
  {
    result = (WebCore::ScrollbarTheme *)(*(uint64_t (**)(WebCore::ScrollbarTheme *))(*(_QWORD *)result + 272))(result);
    if ((_DWORD)result)
    {
      if (!a2)
        return 0;
      result = (WebCore::ScrollbarTheme *)WebCore::Scrollbar::shouldParticipateInHitTesting(*((WebCore::Scrollbar **)this
                                                                                            + 16));
      if (!(_DWORD)result)
        return result;
    }
  }
  v6 = (WebCore::Widget *)*((_QWORD *)this + 16);
  if (v6 || (a3 & 1) != 0)
  {
LABEL_4:
    if (v6)
    {
      v12 = v6;
      if (!WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(this))
      {
        WebCore::Widget::frameRect(v12);
        return (WebCore::ScrollbarTheme *)HIDWORD(v13);
      }
    }
    return 0;
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v8)
    v9 = (*(_BYTE *)(v8 + 45) & 4) == 0;
  else
    v9 = 1;
  if (v9 || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 40) + 584) & 1) != 0)
    return 0;
  v10 = WebCore::ScrollbarTheme::theme(result);
  v11 = (WebCore::ScrollbarTheme *)(*(uint64_t (**)(uint64_t *))(*v10 + 64))(v10);
  if ((_DWORD)v11)
  {
    v6 = (WebCore::Widget *)*((_QWORD *)this + 16);
    goto LABEL_4;
  }
  v14 = WebCore::ScrollbarTheme::theme(v11);
  v15 = 0;
  v16 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v16 && (*(_BYTE *)(v16 + 45) & 4) != 0)
    v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 40) + 586);
  return (WebCore::ScrollbarTheme *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 40))(v14, v15, 1);
}

BOOL WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *((_QWORD *)this + 12);
  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v2 + 104);
  v4 = (*(_BYTE *)(v3 + 239) & 4) == 0 && (*(_BYTE *)(v2 + 120) & 0x30) == 0;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 664) & 0x80000000) != 0)
  {
    if (v4 && (*(_BYTE *)(v2 + 45) & 4) != 0 && (*(_BYTE *)(v2 + 22) & 1) != 0)
    {
      v7 = *(_QWORD *)(v2 + 96);
      if (((v7 >> 10) & 7) - 3 < 2 || ((unsigned __int16)v7 >> 13) - 3 <= 1)
        return (*(_BYTE *)(v1 + 28) & 1) == 0;
    }
  }
  else if (v4 && (*(_BYTE *)(v2 + 45) & 4) != 0 && (*(_BYTE *)(v2 + 22) & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 + 96);
    if (((v5 >> 10) & 7) - 3 < 2 || ((unsigned __int16)v5 >> 13) - 3 <= 1)
      return (*(unsigned __int8 *)(v3 + 234) >> 6) & 1;
  }
  return 0;
}

uint64_t WebCore::ScrollbarTheme::usesOverlayScrollbars(WebCore::ScrollbarTheme *this)
{
  return 0;
}

uint64_t WebCore::Scrollbar::isOverlayScrollbar(WebCore::Scrollbar *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 64))(*((_QWORD *)this + 10));
}

uint64_t WebCore::RenderLayerScrollableArea::scrollPosition(WebCore::RenderLayerScrollableArea *this)
{
  return *((_QWORD *)this + 13);
}

WTF *WebCore::ScrollableArea::clearSnapOffsets(WTF *this)
{
  uint64_t v1;
  void *v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  char *v7;
  WTF *v8;
  uint64_t v9;
  char *v10;
  WTF *v11;
  char *v12;
  char *v13;
  WTF *v14[2];
  WTF *v15[2];
  WTF *v16[2];
  WTF *v17[2];
  uint64_t v18;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v18 = 0;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)v15 = 0u;
    WebCore::ScrollingEffectsController::setSnapOffsetsInfo((WTF **)(v1 + 24), (uint64_t)v14);
    v3 = v17[1];
    if (v17[1])
    {
      v17[1] = 0;
      LODWORD(v18) = 0;
      WTF::fastFree(v3, v2);
    }
    v4 = v16[1];
    if (v16[1])
    {
      v16[1] = 0;
      LODWORD(v17[0]) = 0;
      WTF::fastFree(v4, v2);
    }
    v5 = v15[1];
    if (HIDWORD(v16[0]))
    {
      v6 = 40 * HIDWORD(v16[0]);
      v7 = (char *)v15[1] + 24;
      do
      {
        v8 = *(WTF **)v7;
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)v7 = 0;
          *((_DWORD *)v7 + 2) = 0;
          v12 = v7;
          WTF::fastFree(v8, v2);
          v7 = v12;
        }
        v7 += 40;
        v6 -= 40;
      }
      while (v6);
      v5 = v15[1];
    }
    if (v5)
    {
      v15[1] = 0;
      LODWORD(v16[0]) = 0;
      WTF::fastFree(v5, v2);
    }
    this = v14[1];
    if (HIDWORD(v15[0]))
    {
      v9 = 40 * HIDWORD(v15[0]);
      v10 = (char *)v14[1] + 24;
      do
      {
        v11 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          v13 = v10;
          WTF::fastFree(v11, v2);
          v10 = v13;
        }
        v10 += 40;
        v9 -= 40;
      }
      while (v9);
      this = v14[1];
    }
    if (this)
    {
      v14[1] = 0;
      LODWORD(v15[0]) = 0;
      return (WTF *)WTF::fastFree(this, v2);
    }
  }
  return this;
}

WTF *WebCore::ScrollingEffectsController::setSnapOffsetsInfo(WTF **a1, uint64_t a2)
{
  WTF *result;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScrollingEffectsController *v6;

  result = a1[10];
  if (*(_DWORD *)(a2 + 20) | *(_DWORD *)(a2 + 36))
  {
    v6 = (WebCore::ScrollingEffectsController *)a1;
    if (result)
    {
      return WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::operator=((uint64_t)result + 24, a2);
    }
    else
    {
      v4 = WTF::fastMalloc((WTF *)0x78);
      *(_QWORD *)v4 = off_1E3406D00;
      *(_QWORD *)(v4 + 8) = v6;
      *(_DWORD *)(v4 + 16) = 3;
      *(_BYTE *)(v4 + 24) = 0;
      *(_BYTE *)(v4 + 100) = 0;
      *(_BYTE *)(v4 + 104) = 0;
      *(_BYTE *)(v4 + 108) = 0;
      *(_QWORD *)(v4 + 112) = 0;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_BYTE *)(v4 + 96) = 0;
      v5 = *((_QWORD *)v6 + 10);
      *((_QWORD *)v6 + 10) = v4;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v4 = *((_QWORD *)v6 + 10);
      }
      WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::operator=(v4 + 24, a2);
      return (WTF *)WebCore::ScrollingEffectsController::updateActiveScrollSnapIndexForClientOffset((uint64_t)v6);
    }
  }
  else
  {
    a1[10] = 0;
    if (result)
      return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::computeScrollDimensions(WebCore::RenderLayerScrollableArea *this)
{
  int v1;
  WebCore::RenderBox *v3;
  uint64_t v4;
  uint64_t v5;

  *((_BYTE *)this + 76) = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
    v3 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
  else
    v3 = 0;
  v4 = *((_QWORD *)v3 + 24);
  if (v4)
    v5 = *(_QWORD *)(v4 + 12);
  else
    WebCore::RenderBox::flippedClientBoxRect(v3);
  *((_DWORD *)this + 22) = ((int)(v5 - (v4 & 0xFFFFFFC0) + 32) >> 6) + (int)v5 / 64;
  *((_DWORD *)this + 23) = ((int)(HIDWORD(v5) - (v1 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v5) / 64;
  WebCore::RenderLayerScrollableArea::computeScrollOrigin(this);
  return WebCore::RenderLayerScrollableArea::computeHasCompositedScrollableOverflow((uint64_t)this, 1);
}

uint64_t WebCore::RenderLayerScrollableArea::computeScrollOrigin(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  signed int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v25;
  uint64_t result;
  signed int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  float v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;

  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
    v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 192);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 4);
    v4 = *(_QWORD *)(v3 + 12);
  }
  else
  {
    LODWORD(v5) = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v2);
  }
  v6 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  v7 = v6 > 5;
  v8 = (1 << v6) & 0x2A;
  v9 = v7 || v8 == 0;
  if (!v9 && (*(_BYTE *)(v2 + 21) & 0x10) != 0)
  {
    v44 = *(_DWORD *)(v2 + 160);
    v45 = v5 + v4;
    if (__OFADD__((_DWORD)v5, (_DWORD)v4))
      v45 = (v5 >> 31) + 0x7FFFFFFF;
    v41 = __OFSUB__(v44, v45);
    v46 = v44 - v45;
    v47 = (v44 >> 31) + 0x7FFFFFFF;
    if (v41)
      LODWORD(v5) = v47;
    else
      LODWORD(v5) = v46;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1016))(v2);
  v11 = v5 - v10;
  if (__OFSUB__((_DWORD)v5, v10))
    v11 = (v5 >> 31) + 0x7FFFFFFF;
  v12 = v11 / 64;
  v13 = -v11 < 0;
  v14 = -v11 & 0x3F;
  v15 = v11 & 0x3F;
  if (!v13)
    v15 = -v14;
  v16 = v12 + ((v15 + 32) >> 6);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
    v17 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  else
    v17 = 0;
  v18 = *(_QWORD *)(v17 + 192);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 4);
    v20 = *(_QWORD *)(v18 + 12);
  }
  else
  {
    v19 = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v17);
  }
  v21 = -v16;
  v22 = (unsigned __int16)*(_DWORD *)(v17 + 124) >> 13;
  v7 = v22 > 5;
  v23 = (1 << v22) & 0x2A;
  if (!v7 && v23 != 0)
  {
    if ((*(_BYTE *)(v17 + 21) & 0x10) != 0)
    {
      v19 &= 0xFFFFFFFF00000000;
    }
    else
    {
      v39 = *(_DWORD *)(v17 + 164);
      v40 = (HIDWORD(v19) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v19), HIDWORD(v20)))
        v40 = HIDWORD(v19) + HIDWORD(v20);
      v41 = __OFSUB__(v39, v40);
      v42 = v39 - v40;
      LODWORD(v43) = (v39 >> 31) + 0x7FFFFFFF;
      if (v41)
        v43 = v43;
      else
        v43 = v42;
      v19 = v43 << 32;
    }
  }
  v25 = HIDWORD(v19);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1000))(v2);
  v27 = v25 - result;
  if (__OFSUB__((_DWORD)v25, (_DWORD)result))
    v27 = (v25 >> 31) + 0x7FFFFFFF;
  v28 = v27 / 64;
  v13 = -v27 < 0;
  v29 = -v27 & 0x3F;
  v30 = v27 & 0x3F;
  if (!v13)
    v30 = -v29;
  v31 = -(v28 + ((v30 + 32) >> 6));
  if (*((_DWORD *)this + 8) != (_DWORD)v21 || *((_DWORD *)this + 9) != (_DWORD)v31)
  {
    *((_QWORD *)this + 4) = v21 | (v31 << 32);
    *((_BYTE *)this + 47) = 1;
  }
  v33 = *((_QWORD *)this + 16);
  if (v33)
  {
    v34 = *(_QWORD **)(v33 + 64);
    result = (*(uint64_t (**)(_QWORD *))(*v34 + 416))(v34);
    v35 = v34[4];
    if (*(_BYTE *)(v33 + 72) == 1)
    {
      v35 = ((v35 & 0xFFFFFFFF00000000) + result) >> 32;
    }
    else if (*(_BYTE *)(v33 + 72))
    {
      LODWORD(v35) = 0;
    }
    else
    {
      LODWORD(v35) = v35 + result;
    }
    v36 = (float)(int)v35;
    if (*(float *)(v33 + 96) != (float)(int)v35)
    {
      v37 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v33 + 80) + 160))(*(_QWORD *)(v33 + 80), v33);
      *(float *)(v33 + 96) = v36;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 304))(v33);
      if (*(_DWORD *)(v33 + 120) == 8)
      {
        v38 = *(_DWORD *)(v33 + 124);
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v33 + 80) + 160))(*(_QWORD *)(v33 + 80), v33);
        *(_DWORD *)(v33 + 124) = v38 - v37 + result;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderTable::borderRight(WebCore::RenderTable *this, void *a2)
{
  uint64_t result;

  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 2:
    case 4:
      result = WebCore::RenderTable::borderAfter(this, a2);
      break;
    case 3:
    case 5:
      result = WebCore::RenderTable::borderBefore(this, a2);
      break;
    default:
      if ((*((_BYTE *)this + 123) & 4) != 0)
        result = *((unsigned int *)this + 85);
      else
        result = *((unsigned int *)this + 86);
      break;
  }
  return result;
}

uint64_t WebCore::RenderTable::borderLeft(WebCore::RenderTable *this, void *a2)
{
  uint64_t result;

  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 2:
    case 4:
      result = WebCore::RenderTable::borderBefore(this, a2);
      break;
    case 3:
    case 5:
      result = WebCore::RenderTable::borderAfter(this, a2);
      break;
    default:
      if ((*((_BYTE *)this + 123) & 4) != 0)
        result = *((unsigned int *)this + 86);
      else
        result = *((unsigned int *)this + 85);
      break;
  }
  return result;
}

uint64_t WebCore::Scrollbar::offsetDidChange(WebCore::Scrollbar *this)
{
  _QWORD *v2;
  uint64_t result;
  unint64_t v4;
  float v5;
  int v6;
  int v7;

  v2 = (_QWORD *)*((_QWORD *)this + 8);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 416))(v2);
  v4 = v2[4];
  if (*((_BYTE *)this + 72) == 1)
  {
    v4 = ((v4 & 0xFFFFFFFF00000000) + result) >> 32;
  }
  else if (*((_BYTE *)this + 72))
  {
    LODWORD(v4) = 0;
  }
  else
  {
    LODWORD(v4) = v4 + result;
  }
  v5 = (float)(int)v4;
  if (*((float *)this + 24) != (float)(int)v4)
  {
    v6 = (*(uint64_t (**)(_QWORD, WebCore::Scrollbar *))(**((_QWORD **)this + 10) + 160))(*((_QWORD *)this + 10), this);
    *((float *)this + 24) = v5;
    result = (*(uint64_t (**)(WebCore::Scrollbar *))(*(_QWORD *)this + 304))(this);
    if (*((_DWORD *)this + 30) == 8)
    {
      v7 = *((_DWORD *)this + 31);
      result = (*(uint64_t (**)(_QWORD, WebCore::Scrollbar *))(**((_QWORD **)this + 10) + 160))(*((_QWORD *)this + 10), this);
      *((_DWORD *)this + 31) = v7 - v6 + result;
    }
  }
  return result;
}

uint64_t WebCore::RenderBox::allowedLayoutOverflow@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  int v7;

  *a2 = 0;
  a2[4] = 0;
  v2 = a2 + 4;
  a2[8] = 0;
  v3 = a2 + 8;
  a2[12] = 0;
  v4 = a2 + 12;
  a2[16] = 0;
  a2[20] = 0;
  a2[24] = 0;
  v5 = a2 + 24;
  a2[28] = 0;
  v6 = a2 + 28;
  if ((*(_BYTE *)(this + 21) & 0x10) != 0)
  {
    a2[28] = 1;
    *((_DWORD *)a2 + 6) = 0;
    if ((*(_DWORD *)(this + 120) & 0x4000000) != 0)
    {
      v2 = a2 + 20;
      a2 += 16;
    }
  }
  else
  {
    a2[4] = 1;
    *(_DWORD *)a2 = 0;
    v7 = *(_DWORD *)(this + 120);
    if ((v7 & 0x4000000) != 0)
      v2 = v4;
    else
      v2 = v6;
    if ((v7 & 0x4000000) != 0)
      a2 = v3;
    else
      a2 = v5;
  }
  *v2 = 1;
  *(_DWORD *)a2 = 0;
  return this;
}

uint64_t WebCore::RenderTableCell::borderHalfRight(WebCore::RenderTableCell *this, int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1940D0A74);
      }
    }
  }
  switch((unsigned __int16)*(_DWORD *)(v2 + 124) >> 13)
  {
    case 2:
    case 4:
      result = WebCore::RenderTableCell::borderHalfAfter(this, a2);
      break;
    case 3:
    case 5:
      result = WebCore::RenderTableCell::borderHalfBefore(this, a2);
      break;
    default:
      if ((*(_BYTE *)(v2 + 123) & 4) != 0)
        result = WebCore::RenderTableCell::borderHalfStart(this, a2);
      else
        result = WebCore::RenderTableCell::borderHalfEnd(this, a2);
      break;
  }
  return result;
}

uint64_t WebCore::RenderTableCell::borderHalfLeft(WebCore::RenderTableCell *this, int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1940D0AF4);
      }
    }
  }
  switch((unsigned __int16)*(_DWORD *)(v2 + 124) >> 13)
  {
    case 2:
    case 4:
      result = WebCore::RenderTableCell::borderHalfBefore(this, a2);
      break;
    case 3:
    case 5:
      result = WebCore::RenderTableCell::borderHalfAfter(this, a2);
      break;
    default:
      if ((*(_BYTE *)(v2 + 123) & 4) != 0)
        result = WebCore::RenderTableCell::borderHalfEnd(this, a2);
      else
        result = WebCore::RenderTableCell::borderHalfStart(this, a2);
      break;
  }
  return result;
}

int32x2_t WebCore::IntSize::IntSize(int32x2_t *this, float64x2_t *a2)
{
  int32x2_t result;

  result = vmovn_s64(vcvtq_s64_f64(*a2));
  *this = result;
  return result;
}

{
  int32x2_t result;

  result = vmovn_s64(vcvtq_s64_f64(*a2));
  *this = result;
  return result;
}

void WebCore::SQLiteStatement::~SQLiteStatement(sqlite3_stmt **this)
{
  sqlite3_stmt *v2;
  unsigned int v4;

  sqlite3_finalize(this[1]);
  v2 = *this;
  *this = 0;
  if (v2)
  {
    if (atomic_load((unsigned int *)v2))
    {
      do
        v4 = __ldaxr((unsigned int *)v2);
      while (__stlxr(v4 - 1, (unsigned int *)v2));
    }
    else
    {
      __break(0xC471u);
    }
  }
}

{
  sqlite3_stmt *v2;
  unsigned int v4;

  sqlite3_finalize(this[1]);
  v2 = *this;
  *this = 0;
  if (v2)
  {
    if (atomic_load((unsigned int *)v2))
    {
      do
        v4 = __ldaxr((unsigned int *)v2);
      while (__stlxr(v4 - 1, (unsigned int *)v2));
    }
    else
    {
      __break(0xC471u);
    }
  }
}

uint64_t WebCore::ResourceLoader::didReceiveData(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
}

double WebCore::LocalFrameView::setSizeForCSSDefaultViewportUnits(uint64_t a1, float a2, float a3)
{
  return WebCore::LocalFrameView::setOverrideSizeForCSSDefaultViewportUnits(a1, (void *)(LODWORD(a2) | 0x100000000), LODWORD(a3) | 0x100000000);
}

uint64_t WebCore::LocalFrameView::setSizeForCSSSmallViewportUnits(uint64_t a1, float a2, float a3)
{
  return WebCore::LocalFrameView::setOverrideSizeForCSSSmallViewportUnits(a1, (void *)(LODWORD(a2) | 0x100000000), LODWORD(a3) | 0x100000000);
}

uint64_t WebCore::LocalFrameView::setSizeForCSSLargeViewportUnits(uint64_t a1, float a2, float a3)
{
  return WebCore::LocalFrameView::setOverrideSizeForCSSLargeViewportUnits(a1, (void *)(LODWORD(a2) | 0x100000000), LODWORD(a3) | 0x100000000);
}

uint64_t WebCore::RenderBlock::containsFloats(WebCore::RenderBlock *this)
{
  return 0;
}

uint64_t WebCore::WebRTCProvider::webRTCAvailable(WebCore::WebRTCProvider *this)
{
  return 1;
}

uint64_t WebCore::DisplayList::Translate::apply(float *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, *a1, a1[1]);
}

void JSC::AssemblerBuffer::putInt(JSC::AssemblerBuffer *this, int a2)
{
  unsigned int v4;

  v4 = *((_DWORD *)this + 36);
  if (v4 + 4 > *((_DWORD *)this + 34))
  {
    JSC::AssemblerBuffer::outOfLineGrow(this);
    v4 = *((_DWORD *)this + 36);
  }
  *(_DWORD *)(*(_QWORD *)this + v4) = a2;
  *((_DWORD *)this + 36) += 4;
}

void *WebCore::RegisterAllocator::deallocateRegister(uint64_t *a1, unsigned __int8 a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a2;
  v4 = *((unsigned int *)a1 + 15);
  v5 = a1[6];
  if ((_DWORD)v4)
  {
    v6 = v4 - 1;
    do
    {
      if (*(unsigned __int8 *)(v5 + v6) == a2)
        break;
      --v6;
    }
    while (v6 != -1);
  }
  else
  {
    v6 = -1;
  }
  result = memmove((void *)(v5 + v6), (const void *)(v5 + v6 + 1), v4 - (v6 + 1));
  --*((_DWORD *)a1 + 15);
  v9 = *a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    v10 = *a1;
    do
    {
      if (*(unsigned __int8 *)(a1[2] + v10) == v3)
      {
        __break(0xC471u);
        JUMPOUT(0x1940D0D78);
      }
      v11 = *((unsigned int *)a1 + 6);
      v10 += v11 + 1;
      do
        v10 -= v11;
      while (v10 >= v11);
    }
    while (v8 != v10);
  }
  if (v9)
  {
    if (v8 + 1 != v9)
      goto LABEL_16;
  }
  else
  {
    v12 = *((unsigned int *)a1 + 6);
    if (v8)
    {
      if (v8 != v12 - 1)
        goto LABEL_16;
    }
    else if ((_DWORD)v12)
    {
      v8 = 0;
      goto LABEL_16;
    }
  }
  result = WTF::Deque<JSC::ARM64Registers::RegisterID,16ul>::expandCapacity(a1);
  v8 = a1[1];
LABEL_16:
  *(_BYTE *)(a1[2] + v8) = v3;
  if (v8 == *((unsigned int *)a1 + 6) - 1)
    v13 = 0;
  else
    v13 = v8 + 1;
  a1[1] = v13;
  return result;
}

void JSC::MacroAssemblerARM64::branch64(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned __int8 v5;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  int v17;
  int v18;

  v5 = a2;
  if (a4 == 31)
  {
    if (!a2 && a3 != 31)
    {
      v8 = (_DWORD *)(a1 + 32);
      LOBYTE(a4) = a3;
      goto LABEL_19;
    }
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    v17 = a3;
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    v18 = *(char *)(a1 + 272);
    if (v18 != 31)
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v18 | 0x910003E0);
    LOBYTE(a4) = 16;
    a3 = v17;
  }
  v8 = (_DWORD *)(a1 + 32);
  if (a3 != 31)
  {
    v9 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0xEB00001F;
    v10 = *(_DWORD *)(a1 + 200);
    if (v10 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      v10 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v10) = v9;
    *(_DWORD *)(a1 + 200) += 4;
    goto LABEL_6;
  }
LABEL_19:
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), ((a4 & 0x1F) << 16) | 0xEB2063FF);
LABEL_6:
  if (*(_BYTE *)(a1 + 328))
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1);
  v11 = v8[42];
  if (v11 + 4 > v8[40])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 6));
    v11 = v8[42];
  }
  *(_DWORD *)(*((_QWORD *)v8 + 3) + v11) = v5 | 0x54000000;
  v12 = v8[42];
  v13 = v12 + 4;
  v8[42] = v12 + 4;
  v14 = v12 + 8;
  v15 = v12 + 4;
  if (v14 > v8[40])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 6));
    v15 = v8[42];
  }
  *(_DWORD *)(*((_QWORD *)v8 + 3) + v15) = -721215457;
  v8[42] += 4;
  if (*(_BYTE *)(a1 + 328))
    v16 = -122;
  else
    v16 = -126;
  *(_DWORD *)a5 = v13;
  *(_DWORD *)(a5 + 4) = 0;
  *(_BYTE *)(a5 + 8) = v16;
  *(_BYTE *)(a5 + 9) = v5;
  *(_WORD *)(a5 + 10) = -256;
}

double JSC::AssemblerBuffer::outOfLineGrow(JSC::AssemblerBuffer *this)
{
  double result;

  *(_QWORD *)&result = JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::grow((uint64_t)this, 0).n128_u64[0];
  return result;
}

uint64_t WebCore::RegisterAllocator::allocateRegisterWithPreference(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char v14;
  char v15;

  v14 = 1;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
LABEL_7:
    v7 = a1[1];
    if (v2 > v3)
      v7 = v3 + *((unsigned int *)a1 + 6);
    if (v7 == v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D10FCLL);
    }
    if (v2 == v3)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D111CLL);
    }
    v8 = *(_BYTE *)(a1[2] + v2);
    v15 = v8;
    if (v2 == *((unsigned int *)a1 + 6) - 1)
      v9 = 0;
    else
      v9 = v2 + 1;
    *a1 = v9;
    v10 = *((unsigned int *)a1 + 15);
    if ((_DWORD)v10 == *((_DWORD *)a1 + 14))
    {
      WTF::Vector<JSC::ARM64Registers::RegisterID,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::RegisterID&>((uint64_t)(a1 + 6), (unint64_t)&v15);
      return v15;
    }
    v11 = v10 + 1;
    v12 = a1[6];
  }
  else
  {
    v4 = a1[2];
    v5 = *a1;
    while (*(_BYTE *)(v4 + v5) != 1)
    {
      v6 = *((unsigned int *)a1 + 6);
      v5 += v6 + 1;
      do
        v5 -= v6;
      while (v5 >= v6);
      if (v3 == v5)
        goto LABEL_7;
    }
    if (v2 > v5)
    {
      memmove((void *)(v4 + v5), (const void *)(v4 + v5 + 1), v3 - (v5 + 1));
      a1[1] = (a1[1] + *((unsigned int *)a1 + 6) - 1) % *((unsigned int *)a1 + 6);
    }
    else
    {
      memmove((void *)(v4 + v2 + 1), (const void *)(v4 + v2), v5 - v2);
      *a1 = (*a1 + 1) % *((unsigned int *)a1 + 6);
    }
    v10 = *((unsigned int *)a1 + 15);
    if ((_DWORD)v10 == *((_DWORD *)a1 + 14))
    {
      WTF::Vector<JSC::ARM64Registers::RegisterID,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::RegisterID&>((uint64_t)(a1 + 6), (unint64_t)&v14);
      return v14;
    }
    v11 = v10 + 1;
    v12 = a1[6];
    v8 = 1;
  }
  *(_BYTE *)(v12 + v10) = v8;
  *((_DWORD *)a1 + 15) = v11;
  return v8;
}

void WebCore::MemoryCache::prune(WebCore::MemoryCache *this)
{
  unsigned int v2;

  if ((WTF::isMainThread(this) & 1) != 0)
  {
    v2 = *((_DWORD *)this + 7);
    if (v2 + *((_DWORD *)this + 6) > *((_DWORD *)this + 1) || v2 > *((_DWORD *)this + 3))
    {
      WebCore::MemoryCache::pruneDeadResources(this);
      WebCore::MemoryCache::pruneLiveResources(this, 0);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

unsigned int *WebCore::MessagePortChannelProvider::setSharedProvider(unsigned int *a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;

  if ((WTF::isMainThread((WTF *)a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D1270);
  }
  {
    if (WebCore::globalProvider(void)::globalProvider && *(_QWORD *)(WebCore::globalProvider(void)::globalProvider + 8))
    {
      __break(0xC471u);
      JUMPOUT(0x1940D1290);
    }
  }
  else
  {
    WebCore::globalProvider(void)::globalProvider = 0;
  }
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 2, (uint64_t)a1);
  v3 = (unsigned int *)*((_QWORD *)a1 + 1);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  result = (unsigned int *)WebCore::globalProvider(void)::globalProvider;
  WebCore::globalProvider(void)::globalProvider = (uint64_t)v3;
  if (result)
  {
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v2);
    }
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLAny>(uint64_t result, objc_class *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v13;
  int v14;
  _BYTE v15[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v15, v7);
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, a2);
      v8 = *(_QWORD *)(v7 + 16);
      if (!v8)
        return MEMORY[0x19AEA32A0](v15);
    }
    v9 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v9 + 64))(v9))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v8, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v15);
    }
    v10 = v9[43];
    if (*(_QWORD *)(v7 + 24) == v8)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v10 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v10)
      goto LABEL_12;
    v11 = (unsigned __int8 *)(v10 + 40);
    if (__ldaxr((unsigned __int8 *)(v10 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v10 + 40);
LABEL_20:
    v13 = *(unsigned __int8 *)(v10 + 41);
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
      {
LABEL_25:
        if (!v13)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 40));
    goto LABEL_25;
  }
  return result;
}

void WebCore::DeferredPromise::callFunction(uint64_t a1, uint64_t *a2, int a3, objc_class *a4)
{
  uint64_t v4;
  uint64_t v9;
  _BOOL8 active;
  uint64_t v11;
  JSC::JSPromise *v12;
  JSValue v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSPromise *v17;
  JSValue v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  JSC::JSPromise *v25;
  JSValue v26;
  WebCore::WorkerOrWorkletScriptController *v27;
  uint64_t v28[2];
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4 && *(_QWORD *)v4 && (*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v9 = a2[7];
    active = WebCore::ActiveDOMCallback::activeDOMObjectsAreSuspended((WebCore::ActiveDOMCallback *)a1);
    if (active
      || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType
      && WTF::isMainThread((WTF *)active)
      && WebCore::ScriptDisallowedScope::s_count)
    {
      JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)1>::Strong(&v32, a2[7], (uint64_t)a4);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      if (v19)
        v20 = v19 - 96;
      else
        v20 = 0;
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 104))(v20);
      ++*(_DWORD *)(a1 + 16);
      v28[0] = a1;
      v28[1] = a1;
      v29 = a3;
      JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)1>::Strong(&v30, &v32);
      WTF::Function<void ()(void)>::Function<WebCore::DeferredPromise::callFunction(JSC::JSGlobalObject &,WebCore::DeferredPromise::ResolveMode,JSC::JSValue)::$_1,void>(&v31, v28);
      WebCore::EventLoopTaskGroup::queueTask(v21, 11, &v31);
      v22 = v31;
      v31 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      WebCore::DeferredPromise::callFunction(JSC::JSGlobalObject &,WebCore::DeferredPromise::ResolveMode,JSC::JSValue)::$_1::~$_1((uint64_t)v28);
      JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)1>::~Strong(&v32);
    }
    else
    {
      if (a3)
      {
        if (a3 == 1)
        {
          v24 = **(_QWORD **)(a1 + 24);
          if ((v24 & 0xFFFE000000000002) != 0)
          {
            v25 = 0;
          }
          else if (*(_BYTE *)(v24 + 5) == 68)
          {
            v25 = **(JSC::JSPromise ***)(a1 + 24);
          }
          else
          {
            v25 = 0;
          }
          v26.super.isa = a4;
          JSC::JSPromise::reject(v25, (JSC::JSGlobalObject *)a2, v26);
        }
        else if (a3 == 2)
        {
          v16 = **(_QWORD **)(a1 + 24);
          if ((v16 & 0xFFFE000000000002) != 0)
          {
            v17 = 0;
          }
          else if (*(_BYTE *)(v16 + 5) == 68)
          {
            v17 = **(JSC::JSPromise ***)(a1 + 24);
          }
          else
          {
            v17 = 0;
          }
          v18.super.isa = a4;
          JSC::JSPromise::rejectAsHandled(v17, (JSC::JSGlobalObject *)a2, v18);
        }
      }
      else
      {
        v11 = **(_QWORD **)(a1 + 24);
        if ((v11 & 0xFFFE000000000002) != 0)
        {
          v12 = 0;
        }
        else if (*(_BYTE *)(v11 + 5) == 68)
        {
          v12 = **(JSC::JSPromise ***)(a1 + 24);
        }
        else
        {
          v12 = 0;
        }
        v13.super.isa = a4;
        JSC::JSPromise::resolve(v12, (JSC::JSGlobalObject *)a2, v13);
      }
      if (!*(_DWORD *)(a1 + 40))
      {
        WebCore::DOMGuardedObject::removeFromGlobalObject(a1);
        v14 = *(_QWORD *)(a1 + 24);
        if (v14)
        {
          *(_QWORD *)(v14 + 8) = 3;
          *(_QWORD *)(a1 + 24) = 0;
        }
      }
    }
    v15 = *(_QWORD *)(v9 + 16);
    if (v15)
    {
      v23 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a2);
      if ((*(unsigned int (**)(_QWORD *))(*v23 + 64))(v23))
      {
        v27 = (WebCore::WorkerOrWorkletScriptController *)v23[43];
        if (*(_QWORD *)(v9 + 24) == v15 || v27 && WebCore::WorkerOrWorkletScriptController::isTerminatingExecution(v27))
        {
          *(_BYTE *)(*((_QWORD *)v27 + 1) + 93442) = 1;
          *(_BYTE *)(a1 + 44) = 1;
        }
      }
      WebCore::reportException((JSC::JSGlobalObject *)a2, v15, 0, 0, 0);
    }
  }
}

void *WebCore::NetworkStateNotifier::singleton(WebCore::NetworkStateNotifier *this)
{
  uint64_t IsEnabled;

  IsEnabled = WebThreadIsEnabled();
  if ((IsEnabled & 1) == 0 && (WTF::isMainThread((WTF *)IsEnabled) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D1720);
  }
  {
    WebCore::NetworkStateNotifier::NetworkStateNotifier((WebCore::NetworkStateNotifier *)&WebCore::NetworkStateNotifier::singleton(void)::networkStateNotifier);
  }
  return &WebCore::NetworkStateNotifier::singleton(void)::networkStateNotifier;
}

uint64_t WebThreadIsEnabled()
{
  return webThreadStarted;
}

WebCore::NetworkStateNotifier *WebCore::NetworkStateNotifier::NetworkStateNotifier(WebCore::NetworkStateNotifier *this)
{
  WebCore::TimerBase *v2;
  _QWORD *v3;

  *(_WORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = (WebCore::NetworkStateNotifier *)((char *)this + 24);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E341DAD0;
  WebCore::TimerBase::TimerBase(v2);
  *((_QWORD *)this + 3) = off_1E31F7378;
  *((_QWORD *)this + 9) = v3;
  *((_QWORD *)this + 10) = 0;
  return this;
}

WebCore::ScriptElement *WebCore::HTMLScriptElement::create@<X0>(WebCore::HTMLScriptElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::Document *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int v6;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  WebCore::ScriptElement *result;

  v6 = (int)a3;
  v10 = bmalloc::api::isoAllocate();
  v11 = (_QWORD *)v10;
  *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v10 + 24) = 0x101C00000002;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v12 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v12;
  *(_QWORD *)(v10 + 96) = v12;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_1E33CC900;
  *(_QWORD *)(v10 + 112) = &unk_1E33CCE50;
  result = WebCore::ScriptElement::ScriptElement((WebCore::ScriptElement *)(v10 + 112), (WebCore::Element *)v10, v6, a4);
  *v11 = off_1E33CC900;
  *(_QWORD *)result = &unk_1E33CCE50;
  *a5 = v11;
  return result;
}

WebCore::ScriptElement *WebCore::ScriptElement::ScriptElement(WebCore::ScriptElement *this, WebCore::Element *a2, int a3, int a4)
{
  unsigned int *v8;
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  WTF *v12;
  uint64_t v13;
  WTF::RunLoop *isMainThread;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v29;
  void *v30;
  uint64_t v31;

  *(_QWORD *)this = off_1E33A7350;
  v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 1) = v8;
  *((_DWORD *)this + 4) = -1;
  if (a4)
    v10 = 4;
  else
    v10 = 0;
  if (a3)
    v11 = 0;
  else
    v11 = 256;
  *(_WORD *)((char *)this + 21) = v11 | a3 | v10 | *(_WORD *)((_BYTE *)this + 21) & 0xE000;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v12 = (WTF *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *((_QWORD *)this + 10) = v13;
  isMainThread = (WTF::RunLoop *)WTF::isMainThread(v12);
  if ((_DWORD)isMainThread)
  {
    {
      v15 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v15 = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  else
  {
    v15 = 0;
  }
  *((_QWORD *)this + 11) = v15;
  v16 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v16 += 2;
  *((_QWORD *)this + 12) = v16;
  v17 = (unsigned int *)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(isMainThread);
    JSC::VM::create();
    v17 = (unsigned int *)v31;
    WebCore::g_commonVMOrNull = v31;
    if (__ldaxr((unsigned int *)(v31 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v31 + 1096)))
    {
      goto LABEL_33;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v31 + 192));
LABEL_33:
    if (webThreadStarted == 1)
      *(_BYTE *)(*(_QWORD *)(v31 + 112) + 5) = 1;
    WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v31 + 584));
    WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v31, 0);
    goto LABEL_16;
  }
  do
LABEL_16:
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *((_BYTE *)this + 20) = JSC::computeNewSourceTaintedOriginFromStack();
  if (a3)
  {
    v20 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
    *(_DWORD *)(v20 + 24) += 2;
    v21 = *(_QWORD *)(v20 + 728);
    if (v21)
    {
      v22 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
      if (v22)
      {
        v23 = v22;
        v24 = v22[2];
        v22[2] = v24 + 1;
        if (!*(_DWORD *)(v20 + 3272))
        {
          *((_DWORD *)this + 4) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v22 + 168))(v22);
          v24 = v23[2] - 1;
        }
        if (v24)
          v23[2] = v24;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
      }
    }
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20, v19);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  do
  {
    v25 = __ldaxr(v17);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v17));
  if (!v26)
  {
    atomic_store(1u, v17);
    v29 = (WTF *)MEMORY[0x19AEA3AF8](v17);
    WTF::fastFree(v29, v30);
  }
  return this;
}

unint64_t WebCore::HTMLDocumentParser::textPosition(WebCore::HTMLDocumentParser *this)
{
  return *((unsigned int *)this + 49) | ((unint64_t)(*((_DWORD *)this + 32)
                                                                        + *((_DWORD *)this + 47)
                                                                        - (*((_DWORD *)this + 33)
                                                                         + *((_DWORD *)this + 48))) << 32);
}

uint64_t WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::allocateTable(a2);
  *a1 = result;
  *(_DWORD *)(result - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v57 = v5;
    v54 = v4;
    do
    {
      v11 = (_QWORD *)(v4 + 56 * v9);
      if (*v11 != -1)
      {
        if (WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::isEmptyBucket((WTF **)(v4 + 56 * v9)))
        {
          v48 = v4 + 56 * v9;
          v49 = *(unsigned int **)(v48 + 48);
          *(_QWORD *)(v48 + 48) = 0;
          if (v49)
          {
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              atomic_store(1u, v49);
              WTF::fastFree((WTF *)v49, v8);
            }
          }
          v52 = (WTF::StringImpl *)v11[5];
          v11[5] = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v52 -= 2;
          }
          v53 = (WTF::StringImpl *)*v11;
          *v11 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v53 -= 2;
          }
        }
        else
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = *(_DWORD *)(*v11 + 16);
          if (v14 < 0x100)
            v15 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v11);
          else
            v15 = v14 >> 8;
          v16 = (WTF::StringImpl *)v11[5];
          v17 = *((_DWORD *)v16 + 4);
          v58 = v10;
          if (v17 < 0x100)
            v18 = WTF::StringImpl::hashSlowCase(v16);
          else
            v18 = v17 >> 8;
          v19 = v13 & ((0xD7862706ELL * (unint64_t)(277951225 * v15 + 95187966 * v18)) >> 4);
          v20 = 1;
          do
          {
            v21 = v12 + 56 * v19;
            v59 = 0;
            WTF::URL::invalidate((WTF::URL *)&v59);
            v22 = v59;
            if (WTF::equal(*(WTF **)v21, v59, v23))
              v25 = WTF::equal(*(WTF **)(v21 + 40), 0, v24);
            else
              v25 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v22 -= 2;
            }
            v26 = v19;
            v19 = (v19 + v20++) & v13;
          }
          while (!v25);
          v27 = v12 + 56 * v26;
          v30 = *(unsigned int **)(v27 + 48);
          v29 = (_QWORD *)(v27 + 48);
          v28 = v30;
          *v29 = 0;
          v4 = v54;
          v10 = v58;
          if (v30)
          {
            do
            {
              v31 = __ldaxr(v28);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v28));
            if (!v32)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v8);
            }
          }
          v33 = *(WTF::StringImpl **)(v21 + 40);
          *(_QWORD *)(v21 + 40) = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v33 -= 2;
          }
          v34 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = (WTF::StringImpl *)*v11;
          *v11 = 0;
          *(_QWORD *)v21 = v35;
          v36 = *(_DWORD *)(v21 + 8) & 0xFFFFFFFE | v11[1] & 1;
          *(_DWORD *)(v21 + 8) = v36;
          v37 = v36 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v11 + 2) >> 1) & 1));
          *(_DWORD *)(v21 + 8) = v37;
          v38 = v37 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v11 + 2) >> 2) & 1));
          *(_DWORD *)(v21 + 8) = v38;
          v39 = v38 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v11 + 2) >> 3) & 7));
          *(_DWORD *)(v21 + 8) = v39;
          *(_DWORD *)(v21 + 8) = v11[1] & 0xFFFFFFC0 | v39 & 0x3F;
          *(_OWORD *)(v21 + 12) = *(_OWORD *)((char *)v11 + 12);
          *(_QWORD *)(v21 + 28) = *(_QWORD *)((char *)v11 + 28);
          *(_DWORD *)(v21 + 36) = *((_DWORD *)v11 + 9);
          *((_DWORD *)v11 + 2) &= ~1u;
          v40 = v11[5];
          v11[5] = 0;
          *(_QWORD *)(v21 + 40) = v40;
          v41 = v54 + 56 * v9;
          v42 = *(_QWORD *)(v41 + 48);
          *(_QWORD *)(v41 + 48) = 0;
          *v29 = v42;
          v43 = *(unsigned int **)(v41 + 48);
          *(_QWORD *)(v41 + 48) = 0;
          if (v43)
          {
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              atomic_store(1u, v43);
              WTF::fastFree((WTF *)v43, v8);
            }
          }
          v46 = (WTF::StringImpl *)v11[5];
          v11[5] = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v46 -= 2;
          }
          v47 = (WTF::StringImpl *)*v11;
          *v11 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v47 -= 2;
          }
          if (v11 == a3)
            v10 = v21;
        }
      }
      ++v9;
    }
    while (v9 != v57);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::MemoryCache::add(WebCore::MemoryCache *this, WebCore::CachedResource *a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  __int128 v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  WTF **v9;
  void *v10;
  WTF *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  WTF **v25;
  const WTF::StringImpl *v26;
  WTF **v27;
  int v28;
  const WTF::StringImpl *v29;
  uint64_t v30;
  WebCore::MemoryCache *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t *v47;
  WebCore::MemoryCache *v48;
  WebCore::CachedResource *v49;
  WTF::StringImpl *v50;
  __int128 v51;
  __int128 v52;
  WTF::StringImpl *v53;
  WTF *v54;
  __int128 v55;
  __int128 v56;

  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D22A4);
  }
  if (*(_BYTE *)this)
    return 0;
  if ((*((_BYTE *)a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
    *((_BYTE *)a2 + 344) |= 1u;
  }
  result = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 31), "GET", 3);
  if ((_DWORD)result)
  {
    if ((*((_BYTE *)a2 + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
      *((_BYTE *)a2 + 344) |= 1u;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 20);
    if (v5)
      *(_DWORD *)v5 += 2;
    v50 = v5;
    v6 = *(_OWORD *)((char *)a2 + 184);
    v51 = *(_OWORD *)((char *)a2 + 168);
    v52 = v6;
    v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 40);
    if (v7)
      *(_DWORD *)v7 += 2;
    v53 = v7;
    v8 = WebCore::MemoryCache::ensureSessionResourceMap((uint64_t *)this, *((_QWORD *)a2 + 52));
    v9 = WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>>>,std::pair<WTF::URL,WTF::String>>(*v8, &v50);
    if (v9)
    {
      v11 = v9[6];
      if (v11)
      {
        do
          v12 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v12 + 1, (unsigned int *)v11));
        v13 = *((_QWORD *)v11 + 1);
        do
        {
          v14 = __ldaxr((unsigned int *)v11);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)v11));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)v11);
          WTF::fastFree(v11, v10);
        }
        if (v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1940D22C4);
        }
      }
    }
    v48 = this;
    v49 = a2;
    v16 = *v8;
    if (*v8
      || (WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::expand(v8, 0), (v16 = *v8) != 0))
    {
      v17 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = v50;
    v19 = *((_DWORD *)v50 + 4);
    if (v19 < 0x100)
      v20 = WTF::StringImpl::hashSlowCase(v50);
    else
      v20 = v19 >> 8;
    v21 = v53;
    v22 = *((_DWORD *)v53 + 4);
    if (v22 < 0x100)
      v23 = WTF::StringImpl::hashSlowCase(v53);
    else
      v23 = v22 >> 8;
    v24 = v17 & ((0xD7862706ELL * (unint64_t)(277951225 * v20 + 95187966 * v23)) >> 4);
    v25 = (WTF **)(v16 + 56 * v24);
    if ((WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::isEmptyBucket(v25) & 1) == 0)
    {
      v47 = v8;
      v27 = 0;
      v28 = 1;
      do
      {
        if (*v25 == (WTF *)-1)
        {
          v27 = v25;
        }
        else if (WTF::equal(*v25, v18, v26) && WTF::equal(v25[5], v21, v29))
        {
          WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v54, (uint64_t)a2);
          v39 = v16 + 56 * v24;
          v40 = v54;
          v54 = 0;
          v41 = *(unsigned int **)(v39 + 48);
          *(_QWORD *)(v39 + 48) = v40;
          if (v41)
          {
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              atomic_store(1u, v41);
              WTF::fastFree((WTF *)v41, v38);
            }
            v44 = (unsigned int *)v54;
            v54 = 0;
            if (v44)
            {
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                atomic_store(1u, v44);
                WTF::fastFree((WTF *)v44, v38);
              }
            }
          }
          v31 = v48;
          goto LABEL_42;
        }
        v24 = ((_DWORD)v24 + v28) & v17;
        v25 = (WTF **)(v16 + 56 * v24);
        ++v28;
      }
      while (!WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::isEmptyBucket(v25));
      v8 = v47;
      if (v27)
      {
        v54 = 0;
        WTF::URL::invalidate((WTF::URL *)&v54);
        *v27 = v54;
        *(_OWORD *)(v27 + 1) = v55;
        *(_OWORD *)(v27 + 3) = v56;
        v27[5] = 0;
        v27[6] = 0;
        --*(_DWORD *)(*v47 - 16);
        v25 = v27;
      }
    }
    WTF::HashMapTranslator<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>>::translate<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,std::pair<WTF::URL,WTF::String> const&,WebCore::CachedResource*>((uint64_t)v25, (uint64_t)&v50, (uint64_t *)&v49);
    v30 = *v8;
    v31 = v48;
    if (*v8)
      v32 = *(_DWORD *)(v30 - 12) + 1;
    else
      v32 = 1;
    *(_DWORD *)(v30 - 12) = v32;
    v33 = *v8;
    if (*v8)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35)
        goto LABEL_42;
    }
    else if (3 * v36 > 4 * v35)
    {
LABEL_42:
      *(_WORD *)((char *)a2 + 557) |= 0x200u;
      WebCore::MemoryCache::resourceAccessed(v31, a2);
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v37);
        else
          *(_DWORD *)v53 -= 2;
      }
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v37);
        else
          *(_DWORD *)v50 -= 2;
      }
      return 1;
    }
    WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::expand(v8, v25);
    goto LABEL_42;
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::isEmptyBucket(WTF **a1)
{
  WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v8;

  v8 = 0;
  WTF::URL::invalidate((WTF::URL *)&v8);
  v2 = v8;
  if (WTF::equal(*a1, v8, v3))
    v6 = WTF::equal(a1[5], 0, v5);
  else
    v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v6;
}

uint64_t WebCore::MemoryCache::resourceForRequestImpl(int a1, WebCore::ResourceRequest *this, uint64_t *a3)
{
  __int128 *v5;
  int v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  WTF **v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v5 = (__int128 *)((char *)this + 8);
  v6 = *((_DWORD *)this + 2);
  v7 = *(WTF::StringImpl **)this;
  if ((v6 & 1) == 0)
  {
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (!v7)
  {
LABEL_7:
    v24 = v7;
    v8 = *(_OWORD *)((char *)this + 24);
    v25 = *v5;
    v26 = v8;
    goto LABEL_8;
  }
  if (*((_DWORD *)v7 + 1) <= *((_DWORD *)this + 9) || (v6 & 2) == 0)
  {
LABEL_6:
    *(_DWORD *)v7 += 2;
    goto LABEL_7;
  }
  *(_DWORD *)v7 += 2;
  v24 = v7;
  v19 = *(_OWORD *)((char *)this + 24);
  v25 = *v5;
  v26 = v19;
  WTF::URL::removeFragmentIdentifier((WTF::URL *)&v24);
  v7 = v24;
LABEL_8:
  if (v7)
    *(_DWORD *)v7 += 2;
  v20 = v7;
  v21 = v25;
  v22 = v26;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  if (v9)
    *(_DWORD *)v9 += 2;
  v23 = v9;
  v10 = WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>>>,std::pair<WTF::URL,WTF::String>>(*a3, &v20);
  if (v10)
  {
    v15 = v10[6];
    if (v15)
    {
      do
        v16 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v16 + 1, (unsigned int *)v15));
      v12 = *((_QWORD *)v15 + 1);
      do
      {
        v17 = __ldaxr((unsigned int *)v15);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v15));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v15);
        WTF::fastFree(v15, v11);
      }
    }
    else
    {
      v12 = 0;
    }
    v9 = v23;
  }
  else
  {
    v12 = 0;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v20 -= 2;
  }
  v13 = v24;
  v24 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

WTF **WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>>>,std::pair<WTF::URL,WTF::String>>(uint64_t a1, WTF::StringImpl **a2)
{
  int v4;
  unsigned int v5;
  int v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int i;
  WTF **v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  char v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v20;

  if (a1)
  {
    v4 = *(_DWORD *)(a1 - 8);
    v5 = *((_DWORD *)*a2 + 4);
    if (v5 < 0x100)
      v6 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v6 = v5 >> 8;
    v7 = a2[5];
    v8 = *((_DWORD *)v7 + 4);
    if (v8 < 0x100)
      v9 = WTF::StringImpl::hashSlowCase(v7);
    else
      v9 = v8 >> 8;
    v10 = v4 & ((0xD7862706ELL * (unint64_t)(277951225 * v6 + 95187966 * v9)) >> 4);
    for (i = 1; ; ++i)
    {
      v12 = (WTF **)(a1 + 56 * v10);
      v20 = 0;
      WTF::URL::invalidate((WTF::URL *)&v20);
      v13 = v20;
      v17 = WTF::equal(*v12, v20, v14) ? WTF::equal(v12[5], 0, v16) : 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v15);
        else
          *(_DWORD *)v13 -= 2;
      }
      if ((v17 & 1) != 0)
        break;
      if (*v12 != (WTF *)-1 && WTF::equal(*v12, *a2, v16) && (WTF::equal(v12[5], a2[5], v18) & 1) != 0)
        return v12;
      v10 = (v10 + i) & v4;
    }
  }
  return 0;
}

uint64_t *WebCore::MemoryCache::ensureSessionResourceMap(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t *result;
  uint64_t **v17;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;

  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D282CLL);
  }
  if ((WTF::isMainThread((WTF *)a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D284CLL);
  }
  v5 = a1 + 42;
  v6 = a1[42];
  if (v6
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a1 + 42, 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (uint64_t *)(v6 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_20:
    *v12 = a2;
    std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100]((uint64_t **)v12 + 1, v4);
    v21 = *v5;
    if (*v5)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *v5;
    if (*v5)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        goto LABEL_8;
    }
    else if (3 * v26 > 4 * v25)
    {
      goto LABEL_8;
    }
    v12 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(v5, v12);
    goto LABEL_8;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != a2)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (uint64_t *)(v6 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v12 = v14;
      }
      goto LABEL_20;
    }
  }
LABEL_8:
  v18 = v12[1];
  v17 = (uint64_t **)(v12 + 1);
  result = (uint64_t *)v18;
  if (!v18)
  {
    v19 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v19 = 0;
    v27 = v19;
    std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>::operator=[abi:sn180100](v17, &v27);
    std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](&v27, v20);
    return *v17;
  }
  return result;
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>>::translate<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,std::pair<WTF::URL,WTF::String> const&,WebCore::CachedResource*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  v6 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v8;
  v9 = *(_DWORD **)(a2 + 40);
  if (v9)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *a3;
  if (v11)
  {
    result = *(_QWORD *)(v11 + 8);
    if (result)
      goto LABEL_31;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v11;
    v17 = *(unsigned int **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = result;
    if (!v17)
      goto LABEL_31;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, (void *)a2);
    }
    result = *(_QWORD *)(v11 + 8);
    if (result)
    {
LABEL_31:
      do
        v16 = __ldaxr((unsigned int *)result);
      while (__stlxr(v16 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  v13 = *(unsigned int **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      return WTF::fastFree((WTF *)v13, (void *)a2);
    }
  }
  return result;
}

uint64_t WebCore::CachedResource::setDecodedSize(WebCore::CachedResource *this, int a2)
{
  uint64_t result;
  int v5;
  uint64_t isMainThread;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *isEmptyIgnoringNullReferences;
  void *v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  int v18;
  uint64_t v19;
  WebCore::CachedResource::ResponseData *v20;
  WTF::StringImpl *v21;
  WebCore::CachedResource::ResponseData *v22;
  WTF *v23;
  void *v24;
  uint64_t *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[8];
  uint64_t v31;

  result = *((_QWORD *)this + 50);
  if (result)
  {
    v5 = *(_DWORD *)(result + 404);
    if (v5 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v5 = 0;
  }
  if ((*((_BYTE *)this + 131) & 4) == 0 && (*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
  {
    isMainThread = WTF::isMainThread((WTF *)result);
    if ((isMainThread & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D2D68);
    }
    {
      isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D2D88);
    }
    if (*((_DWORD *)this + 136))
    {
      v7 = WebCore::MemoryCache::lruListFor((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, this);
      WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CachedResource>(v7, (uint64_t)this);
    }
    result = *((_QWORD *)this + 50);
  }
  if (!result)
  {
    v20 = (WebCore::CachedResource::ResponseData *)WTF::fastMalloc((WTF *)0x198);
    result = (uint64_t)WebCore::CachedResource::ResponseData::ResponseData(v20, this);
    v22 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = result;
    if (v22)
    {
      WebCore::CachedResource::ResponseData::~ResponseData(v22, v21);
      WTF::fastFree(v23, v24);
      result = *((_QWORD *)this + 50);
    }
  }
  *(_DWORD *)(result + 404) = a2;
  if ((*((_BYTE *)this + 131) & 4) == 0 && (*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
  {
    v8 = WTF::isMainThread((WTF *)result);
    if ((v8 & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D2DA8);
    }
    {
      v8 = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    if ((WTF::isMainThread((WTF *)v8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D2DC8);
    }
    v9 = WebCore::MemoryCache::lruListFor((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, this);
    WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedResource>(v9, (uint64_t)this, (uint64_t)v30);
    isEmptyIgnoringNullReferences = (WTF *)WebCore::MemoryCache::inLiveDecodedResourcesList((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, this);
    v12 = (int)isEmptyIgnoringNullReferences;
    v13 = *((_QWORD *)this + 50);
    if (v13)
    {
      if (*(_DWORD *)(v13 + 404))
        v14 = (char)isEmptyIgnoringNullReferences;
      else
        v14 = 1;
      if ((v14 & 1) == 0)
      {
        isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)this + 360, v11);
        if (!(_DWORD)isEmptyIgnoringNullReferences)
        {
LABEL_25:
          if ((WTF::isMainThread(isEmptyIgnoringNullReferences) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1940D2E28);
          }
          WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedResource>((uint64_t)&qword_1ECE909D8, (uint64_t)this, (uint64_t)v30);
          goto LABEL_36;
        }
        v15 = *((_QWORD *)this + 56);
        if (v15 && *(_DWORD *)(v15 - 12))
        {
          WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin((uint64_t *)this + 56, (uint64_t)v30);
          isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end((uint64_t *)this + 56, (uint64_t)&v28);
          if (v31 != v29)
            goto LABEL_25;
          isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)this + 448, v27);
        }
      }
      v13 = *((_QWORD *)this + 50);
      if (v13)
        LOBYTE(v13) = *(_DWORD *)(v13 + 404) != 0;
    }
    if ((v13 & 1) == 0 && ((v12 ^ 1) & 1) == 0)
    {
      if ((WTF::isMainThread(isEmptyIgnoringNullReferences) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1940D2E08);
      }
      WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CachedResource>((uint64_t)&qword_1ECE909D8, (uint64_t)this);
    }
LABEL_36:
    v16 = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)this + 360, v11);
    if (!(_DWORD)v16)
    {
LABEL_37:
      v17 = 1;
LABEL_38:
      result = WTF::isMainThread(v16);
      if ((result & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1940D2DE8);
      }
      v18 = a2 - v5;
      if (v17)
        dword_1ECE908C0 += v18;
      else
        dword_1ECE908C4 += v18;
      return result;
    }
    v19 = *((_QWORD *)this + 56);
    if (v19 && *(_DWORD *)(v19 - 12))
    {
      v25 = (uint64_t *)((char *)this + 448);
      WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin(v25, (uint64_t)v30);
      v16 = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end(v25, (uint64_t)&v28);
      if (v31 != v29)
        goto LABEL_37;
      v16 = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)v25, v26);
    }
    v17 = 0;
    goto LABEL_38;
  }
  return result;
}

unsigned int *WebCore::MemoryCache::resourceAccessed(WebCore::MemoryCache *this, WebCore::CachedResource *a2)
{
  uint64_t isMainThread;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *isEmptyIgnoringNullReferences;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[6];
  _QWORD v21[6];
  char v22;

  isMainThread = WTF::isMainThread(this);
  if ((isMainThread & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D3018);
  }
  if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D3038);
  }
  if (!*((_DWORD *)a2 + 136)
    || (v6 = WebCore::MemoryCache::lruListFor(this, a2),
        v7 = WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CachedResource>(v6, (uint64_t)a2), !*((_DWORD *)a2 + 136)))
  {
    isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)a2 + 360, v5);
    if (!(_DWORD)isEmptyIgnoringNullReferences)
    {
LABEL_8:
      v11 = 1;
LABEL_9:
      v12 = *((_QWORD *)a2 + 50);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 404) + *(_DWORD *)(v12 + 400);
      }
      else
      {
        v17 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v17 != -1)
        {
          v21[0] = &v22;
          v20[0] = v21;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v13 = 0;
      }
      if ((*((_BYTE *)a2 + 344) & 1) == 0)
      {
        isEmptyIgnoringNullReferences = (WTF *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
        *((_BYTE *)a2 + 344) |= 1u;
      }
      v14 = *((_QWORD *)a2 + 20);
      v15 = 4840;
      if (v14)
        v15 = 2 * *(_DWORD *)(v14 + 4) + 4840;
      v7 = WTF::isMainThread(isEmptyIgnoringNullReferences);
      if ((v7 & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1940D3078);
      }
      v16 = v15 + v13;
      if (v11)
        *((_DWORD *)this + 6) += v16;
      else
        *((_DWORD *)this + 7) += v16;
      goto LABEL_5;
    }
    v18 = *((_QWORD *)a2 + 56);
    if (v18 && *(_DWORD *)(v18 - 12))
    {
      WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin((uint64_t *)a2 + 56, (uint64_t)v21);
      isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end((uint64_t *)a2 + 56, (uint64_t)v20);
      if (v21[1] != v20[1])
        goto LABEL_8;
      isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)a2 + 448, v19);
    }
    v11 = 0;
    goto LABEL_9;
  }
LABEL_5:
  ++*((_DWORD *)a2 + 136);
  if ((WTF::isMainThread((WTF *)v7) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D3058);
  }
  v8 = WebCore::MemoryCache::lruListFor(this, a2);
  return WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedResource>(v8, (uint64_t)a2, (uint64_t)v21);
}

uint64_t WebCore::CachedResource::setEncodedSize(WebCore::CachedResource *this, int a2)
{
  uint64_t result;
  int v5;
  uint64_t isMainThread;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *isEmptyIgnoringNullReferences;
  int v12;
  int v13;
  uint64_t v14;
  WebCore::CachedResource::ResponseData *v15;
  WTF::StringImpl *v16;
  WebCore::CachedResource::ResponseData *v17;
  WTF *v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  _QWORD v22[6];
  _BYTE v23[8];
  uint64_t v24;

  result = *((_QWORD *)this + 50);
  if (result)
  {
    v5 = *(_DWORD *)(result + 400);
    if (v5 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v5 = 0;
  }
  if ((*((_BYTE *)this + 131) & 4) == 0 && (*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
  {
    isMainThread = WTF::isMainThread((WTF *)result);
    if ((isMainThread & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D3270);
    }
    {
      isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D3290);
    }
    if (*((_DWORD *)this + 136))
    {
      v7 = WebCore::MemoryCache::lruListFor((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, this);
      WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CachedResource>(v7, (uint64_t)this);
    }
    result = *((_QWORD *)this + 50);
  }
  if (!result)
  {
    v15 = (WebCore::CachedResource::ResponseData *)WTF::fastMalloc((WTF *)0x198);
    result = (uint64_t)WebCore::CachedResource::ResponseData::ResponseData(v15, this);
    v17 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = result;
    if (v17)
    {
      WebCore::CachedResource::ResponseData::~ResponseData(v17, v16);
      WTF::fastFree(v18, v19);
      result = *((_QWORD *)this + 50);
    }
  }
  *(_DWORD *)(result + 400) = a2;
  if ((*((_BYTE *)this + 131) & 4) == 0 && (*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
  {
    v8 = WTF::isMainThread((WTF *)result);
    if ((v8 & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D32B0);
    }
    {
      v8 = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    if ((WTF::isMainThread((WTF *)v8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D32D0);
    }
    v9 = WebCore::MemoryCache::lruListFor((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, this);
    WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedResource>(v9, (uint64_t)this, (uint64_t)v23);
    isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)this + 360, v10);
    if (!(_DWORD)isEmptyIgnoringNullReferences)
      goto LABEL_23;
    v14 = *((_QWORD *)this + 56);
    if (v14 && *(_DWORD *)(v14 - 12))
    {
      v20 = (uint64_t *)((char *)this + 448);
      WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin(v20, (uint64_t)v23);
      isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end(v20, (uint64_t)v22);
      if (v24 != v22[1])
      {
LABEL_23:
        v12 = 1;
LABEL_24:
        result = WTF::isMainThread(isEmptyIgnoringNullReferences);
        if ((result & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1940D32F0);
        }
        v13 = a2 - v5;
        if (v12)
          dword_1ECE908C0 += v13;
        else
          dword_1ECE908C4 += v13;
        return result;
      }
      isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)v20, v21);
    }
    v12 = 0;
    goto LABEL_24;
  }
  return result;
}

BOOL WebThreadIsLockedOrDisabled()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;
  int *v2;
  int v4;

  if (webThreadStarted != 1)
    return 1;
  v0 = (_opaque_pthread_t *)webThread;
  v1 = pthread_self();
  if (pthread_equal(v0, v1))
  {
    v2 = &webThreadLockCount;
  }
  else
  {
    v4 = pthread_main_np();
    v2 = &mainThreadLockCount;
    if (!v4)
      v2 = &otherThreadLockCount;
  }
  return *v2 != 0;
}

uint64_t WebCore::MemoryCache::lruListFor(WebCore::MemoryCache *this, WebCore::CachedResource *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  char *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  const void **v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  unint64_t v17;
  void *v18;
  char *v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  char v30;
  char **v31;
  char *v32;

  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D3508);
  }
  if (*((_DWORD *)a2 + 136) <= 1u)
    v4 = 1;
  else
    v4 = *((_DWORD *)a2 + 136);
  v5 = *((_QWORD *)a2 + 50);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 404) + *(_DWORD *)(v5 + 400);
  }
  else
  {
    v17 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v17 != -1)
    {
      v32 = &v30;
      v31 = &v32;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v6 = 0;
  }
  v7 = (char *)a2 + 160;
  if ((*((_BYTE *)a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
    *((_BYTE *)a2 + 344) |= 1u;
  }
  v8 = 4840;
  if (*(_QWORD *)v7)
    v8 = 2 * *(_DWORD *)(*(_QWORD *)v7 + 4) + 4840;
  v9 = (v8 + v6) / v4;
  v10 = (v9 & (v9 - 1)) != 0;
  if (v9 >= 0x10000)
  {
    v9 >>= 16;
    v10 |= 0x10u;
  }
  if (v9 >= 0x100)
  {
    v9 >>= 8;
    v10 |= 8u;
  }
  if (v9 >= 0x10)
  {
    v9 >>= 4;
    v10 |= 4u;
  }
  if (v9 >= 4)
  {
    v9 >>= 2;
    v10 += 2;
  }
  if (v9 <= 1)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = (const void **)((char *)this + 32);
  if (*((_DWORD *)this + 10) <= v11)
  {
    v13 = (char *)*((_QWORD *)this + 4);
    v14 = *((unsigned int *)this + 11);
    if (v11 < 0x20)
    {
      v16 = (char *)this + 48;
      v15 = 32;
    }
    else
    {
      v15 = v11 + 1;
      v16 = (char *)WTF::fastMalloc((WTF *)(8 * (v11 + 1)));
    }
    *((_DWORD *)this + 10) = v15;
    *((_QWORD *)this + 4) = v16;
    memcpy(v16, v13, 8 * v14);
    if ((char *)this + 48 != v13)
    {
      if (v13)
      {
        if (*v12 == v13)
        {
          *((_QWORD *)this + 4) = 0;
          *((_DWORD *)this + 10) = 0;
        }
LABEL_34:
        v19 = v13;
        goto LABEL_35;
      }
    }
  }
  while (*((_DWORD *)this + 11) <= v11)
  {
    v21 = (char *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    v32 = v21;
    v22 = *((unsigned int *)this + 11);
    if ((_DWORD)v22 == *((_DWORD *)this + 10))
    {
      WTF::Vector<std::unique_ptr<WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>((uint64_t)this + 32, (unint64_t)&v32);
    }
    else
    {
      v23 = *((_QWORD *)this + 4);
      v32 = 0;
      *(_QWORD *)(v23 + 8 * v22) = v21;
      *((_DWORD *)this + 11) = v22 + 1;
    }
    v19 = v32;
    v32 = 0;
    if (v19)
    {
      v24 = (WTF *)*((_QWORD *)v19 + 1);
      if (v24)
      {
        v29 = v19;
        do
        {
          v25 = v24;
          v24 = (WTF *)*((_QWORD *)v24 + 2);
          v26 = *(unsigned int **)v25;
          *(_QWORD *)v25 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v18);
            }
          }
          WTF::fastFree(v25, v18);
          v19 = v29;
        }
        while (v24);
      }
      if (*(_QWORD *)v19)
      {
        v13 = v19;
        WTF::fastFree((WTF *)(*(_QWORD *)v19 - 16), v18);
        goto LABEL_34;
      }
LABEL_35:
      WTF::fastFree((WTF *)v19, v18);
      continue;
    }
  }
  return *((_QWORD *)*v12 + v11);
}

BOOL WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CachedResource>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  WTF *v12;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v3;
  if (v3 > v2)
  {
    v14 = *(WTF **)(a1 + 8);
    if (v14)
    {
      do
      {
        v15 = (WTF *)*((_QWORD *)v14 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v14 + 8))
        {
          v19 = a1;
          v18 = a2;
          v17 = (WTF *)*((_QWORD *)v14 + 2);
          WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, (void *)a1, v14);
          v15 = v17;
          a2 = v18;
          a1 = v19;
        }
        v14 = v15;
      }
      while (v15);
    }
    *(_DWORD *)(a1 + 24) = 0;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v16) = *(_DWORD *)(v16 - 12);
      if (v16 > 0x7FFFFFFE)
        LODWORD(v16) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 28) = 2 * v16;
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return 0;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    for (i = 1; ; ++i)
    {
      v12 = *(WTF **)(v5 + 8 * v10);
      if (v12 != (WTF *)-1)
      {
        if (!v12)
          return WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, (void *)a1, v12);
        if (*(_QWORD *)v12 == v4)
          break;
      }
      v10 = (v10 + i) & v6;
    }
    if (v10 == *(_DWORD *)(v5 - 4))
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  return WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, (void *)a1, v12);
}

uint64_t WebCore::CachedResource::addClientToSet(WebCore::CachedResource *this, WebCore::CachedResourceClient *a2)
{
  WTF *isEmptyIgnoringNullReferences;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t StatusReg;
  unsigned int *v19;
  unsigned int v20;
  WTF::MonotonicTime *v21;
  double v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int ***v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int i;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  WTF *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  void *v52;
  unint64_t v53;
  unsigned int v54;
  void *v55;
  WTF *v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  uint64_t v64;
  _QWORD v65[6];
  char v66;

  if ((*((_BYTE *)this + 556) & 0x60) == 0
    && (*(unsigned int (**)(WebCore::CachedResourceClient *))(*(_QWORD *)a2 + 40))(a2))
  {
    if ((*(_WORD *)((_BYTE *)this + 557) & 0x400) != 0)
    {
      v8 = *((_BYTE *)this + 556) & 0x9F;
      v9 = v8 | 0x20;
      v10 = v8 | 0x40;
      if ((*(_WORD *)((_BYTE *)this + 557) & 0x100) != 0)
        v7 = v10;
      else
        v7 = v9;
    }
    else
    {
      v7 = *((_BYTE *)this + 556) | 0x60;
    }
    *((_BYTE *)this + 556) = v7;
  }
  if ((*((_BYTE *)this + 131) & 4) != 0)
    goto LABEL_4;
  isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)this + 360, a2);
  if (!(_DWORD)isEmptyIgnoringNullReferences)
    goto LABEL_4;
  v6 = *((_QWORD *)this + 56);
  if (!v6 || !*(_DWORD *)(v6 - 12))
    goto LABEL_7;
  WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin((uint64_t *)this + 56, (uint64_t)&v63);
  WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end((uint64_t *)this + 56, (uint64_t)v65);
  if (v64 == v65[1])
  {
    isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)this + 448, v52);
LABEL_7:
    if ((*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
    {
      if ((WTF::isMainThread(isEmptyIgnoringNullReferences) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1940D3D00);
      }
      {
        WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
      }
      WebCore::MemoryCache::addToLiveResourcesSize((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, this);
    }
  }
LABEL_4:
  if ((*((_BYTE *)this + 556) & 0x17 | 8) != 8)
    goto LABEL_5;
  v11 = (uint64_t *)*((_QWORD *)this + 50);
  if (!v11)
  {
    v53 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v53 != -1)
    {
      v63 = &v66;
      v65[0] = &v63;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v65, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v11 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  if ((*((_BYTE *)v11 + 138) & 1) != 0 || (v12 = *((_QWORD *)this + 62)) != 0 && *(_QWORD *)(v12 + 8))
  {
LABEL_5:
    LODWORD(v65[0]) = 0;
    WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::add<int>((uint64_t)this + 360, a2, v65, (uint64_t)&v63);
    ++*(_DWORD *)(v64 + 8);
    return 1;
  }
  v13 = WTF::fastMalloc((WTF *)0x48);
  if (!*((_QWORD *)this + 1))
  {
    v59 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v59 = 1;
    *(_QWORD *)(v59 + 8) = this;
    v60 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v59;
    if (v60)
    {
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        atomic_store(1u, v60);
        WTF::fastFree((WTF *)v60, v58);
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 448);
  v15 = (unsigned int *)*((_QWORD *)this + 1);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)v13 = v15;
  v17 = *((_QWORD *)a2 + 1);
  if (!v17)
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = a2;
    v56 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v17;
    if (v56)
    {
      if (*(_DWORD *)v56 == 1)
      {
        WTF::fastFree(v56, v55);
        v17 = *((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v56;
      }
    }
  }
  ++*(_DWORD *)v17;
  *(_QWORD *)(v13 + 16) = off_1E3407128;
  *(_QWORD *)(v13 + 8) = v17;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  v19 = *(unsigned int **)(StatusReg + 736);
  if (!v19)
    v19 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)(v13 + 56) = v19;
  *(_QWORD *)(v13 + 16) = off_1E31F7378;
  v21 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v21 = off_1E33F8878;
  *((_QWORD *)v21 + 1) = WebCore::CachedResource::Callback::timerFired;
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = v13;
  *(_QWORD *)(v13 + 64) = v21;
  *(_QWORD *)(v13 + 40) = 0;
  WTF::MonotonicTime::now(v21);
  WebCore::TimerBase::setNextFireTime(v13 + 16, v22 + 0.0);
  v24 = *((_DWORD *)this + 114);
  *((_DWORD *)this + 114) = v24 + 1;
  if (v24 > *((_DWORD *)this + 115))
    WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)this + 448, v23);
  v25 = *((_QWORD *)a2 + 1);
  if (!v25)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = a2;
    v57 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v25;
    if (v57)
    {
      if (*(_DWORD *)v57 == 1)
      {
        WTF::fastFree(v57, v23);
        v25 = *((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v57;
      }
    }
  }
  v26 = *(_DWORD *)v25;
  *(_DWORD *)v25 += 2;
  v27 = __CFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    WTF::fastFree((WTF *)v25, v23);
  else
    *(_DWORD *)v25 = v28;
  v29 = *v14;
  if (*v14
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(v14),
        (v29 = *v14) != 0))
  {
    v30 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    v30 = 0;
  }
  v31 = 0;
  v32 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
  v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
  v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
  v35 = (v34 >> 31) ^ v34;
  for (i = 1; ; ++i)
  {
    v37 = v35 & v30;
    v38 = (uint64_t *)(v29 + 16 * v37);
    v39 = *v38;
    if (!*v38)
    {
      if (v31)
      {
        *v31 = 0;
        v31[1] = 0;
        --*(_DWORD *)(*v14 - 16);
        *v31 = (unsigned int **)v25;
      }
      else
      {
        *v38 = v25;
        v31 = (unsigned int ***)(v29 + 16 * v37);
      }
      std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100](v31 + 1, (unsigned int **)v13);
      v40 = *v14;
      if (*v14)
        v41 = *(_DWORD *)(v40 - 12) + 1;
      else
        v41 = 1;
      *(_DWORD *)(v40 - 12) = v41;
      v42 = *v14;
      if (*v14)
        v43 = *(_DWORD *)(v42 - 12);
      else
        v43 = 0;
      v44 = (*(_DWORD *)(v42 - 16) + v43);
      v45 = *(unsigned int *)(v42 - 4);
      if (v45 > 0x400)
      {
        if (v45 > 2 * v44)
          goto LABEL_49;
      }
      else
      {
        if (3 * v45 > 4 * v44)
        {
LABEL_49:
          v13 = 0;
          goto LABEL_50;
        }
        if (!(_DWORD)v45)
        {
          v54 = 8;
LABEL_82:
          WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v14, v54);
          goto LABEL_49;
        }
      }
      if (6 * *(_DWORD *)(v42 - 12) >= (2 * v45))
        v54 = 2 * v45;
      else
        v54 = *(_DWORD *)(v42 - 4);
      goto LABEL_82;
    }
    if (v39 != -1)
    {
      v38 = (uint64_t *)v31;
      if (v39 == v25)
        break;
    }
    v35 = i + v37;
    v31 = (unsigned int ***)v38;
  }
  if (*(_DWORD *)v25 == 1)
    WTF::fastFree((WTF *)v25, v23);
  else
    --*(_DWORD *)v25;
LABEL_50:
  if (v13)
  {
    *(_QWORD *)(v13 + 16) = off_1E31F7378;
    v46 = *(_QWORD *)(v13 + 64);
    *(_QWORD *)(v13 + 64) = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v13 + 16));
    v48 = *(WTF **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::fastFree(v48, v47);
      else
        --*(_DWORD *)v48;
    }
    v49 = *(unsigned int **)v13;
    *(_QWORD *)v13 = 0;
    if (v49)
    {
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v49);
        WTF::fastFree((WTF *)v49, v47);
      }
    }
    WTF::fastFree((WTF *)v13, v47);
  }
  return 0;
}

uint64_t WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences(uint64_t a1, void *a2)
{
  WTF **v2;
  uint64_t v4;
  WTF **v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  WTF **v9;
  uint64_t result;
  WTF **v11;

  v2 = *(WTF ***)a1;
  if (*(_QWORD *)a1 && *((_DWORD *)v2 - 3))
  {
    v4 = *((unsigned int *)v2 - 1);
    v5 = *(WTF ***)a1;
    if ((_DWORD)v4)
    {
      v6 = 16 * v4;
      v5 = *(WTF ***)a1;
      while ((unint64_t)*v5 + 1 <= 1)
      {
        v5 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_7;
      }
    }
    v9 = &v2[2 * v4];
    if (v5 != v9)
    {
      if (*((_QWORD *)*v5 + 1))
        return 0;
      while (1)
      {
        v5 += 2;
        if (v5 == v9)
          break;
        if ((unint64_t)*v5 + 1 > 1)
        {
          if (v5 == v9)
            break;
          result = 0;
          if (*((_QWORD *)*v5 + 1))
            return result;
        }
      }
    }
LABEL_7:
    *(_QWORD *)a1 = 0;
    if ((_DWORD)v4)
    {
      v7 = v2;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
              WTF::fastFree(v8, a2);
            else
              --*(_DWORD *)v8;
          }
        }
        v7 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v2 - 2), a2);
    v11 = *(WTF ***)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (v11)
    {
      LODWORD(v11) = *((_DWORD *)v11 - 3);
      if (v11 > 0x7FFFFFFE)
        LODWORD(v11) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * (_DWORD)v11;
  }
  return 1;
}

WTF *WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::add<int>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  int v11;
  BOOL v12;
  int v13;
  void *v14;
  WTF *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1, a2);
  v10 = (WTF *)a2[1];
  if (!v10)
  {
    v10 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *((_QWORD *)v10 + 1) = a2;
    v22 = (WTF *)a2[1];
    a2[1] = v10;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, a2);
        v10 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  v11 = *(_DWORD *)v10;
  *(_DWORD *)v10 += 2;
  v23 = v10;
  v12 = __CFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    WTF::fastFree(v10, a2);
  else
    *(_DWORD *)v10 = v13;
  WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)a1, &v23, a3, (uint64_t)&v24);
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v14);
    else
      --*(_DWORD *)result;
  }
  v17 = v24;
  v16 = v25;
  v18 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v19 = *(unsigned int *)(v18 - 4);
    v20 = v18 + 16 * v19;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if (v24 != v20)
  {
    while (!*(_QWORD *)(*(_QWORD *)v17 + 8))
    {
      while (1)
      {
        v17 += 16;
        if (v17 == v25)
          break;
        if ((unint64_t)(*(_QWORD *)v17 + 1) > 1)
          goto LABEL_23;
      }
      v17 = v25;
LABEL_23:
      if (v17 == v20)
      {
        v17 = v20;
        break;
      }
    }
  }
  v21 = v26;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v17;
  *(_QWORD *)(a4 + 16) = v16;
  *(_QWORD *)(a4 + 24) = v20;
  *(_QWORD *)(a4 + 32) = v18 + 16 * v19;
  *(_DWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = v21;
  return result;
}

uint64_t WebCore::CachedResourceClient::shouldMarkAsReferenced(WebCore::CachedResourceClient *this)
{
  return 1;
}

void WebCore::MemoryCache::addToLiveResourcesSize(WebCore::MemoryCache *this, WebCore::CachedResource *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char **v15;
  char *v16;

  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D41F0);
  }
  v4 = *((_QWORD *)a2 + 50);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 404) + *(_DWORD *)(v4 + 400);
  }
  else
  {
    v12 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v12 != -1)
    {
      v16 = &v14;
      v15 = &v16;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v5 = 0;
  }
  v6 = (char *)a2 + 160;
  if ((*((_BYTE *)a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
    *((_BYTE *)a2 + 344) |= 1u;
  }
  v7 = 4840;
  if (*(_QWORD *)v6)
    v7 = 2 * *(_DWORD *)(*(_QWORD *)v6 + 4) + 4840;
  *((_DWORD *)this + 6) += v7 + v5;
  v8 = *((_QWORD *)a2 + 50);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 400);
    v10 = *(_DWORD *)(v8 + 404);
  }
  else
  {
    v13 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v13 != -1)
    {
      v16 = &v14;
      v15 = &v16;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v10 = 0;
    v9 = 0;
  }
  if ((*((_BYTE *)a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
    *((_BYTE *)a2 + 344) |= 1u;
  }
  v11 = -4840;
  if (*(_QWORD *)v6)
    v11 = -4840 - 2 * *(_DWORD *)(*(_QWORD *)v6 + 4);
  *((_DWORD *)this + 7) += v11 - v9 - v10;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::allocateTable(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  LODWORD(v1) = a1;
  v2 = WTF::fastMalloc((WTF *)(56 * a1 + 16));
  v3 = v2 + 16;
  if ((_DWORD)v1)
  {
    v1 = v1;
    v4 = v2 + 40;
    do
    {
      v6 = 0;
      WTF::URL::invalidate((WTF::URL *)&v6);
      *(_QWORD *)(v4 - 24) = v6;
      *(_OWORD *)(v4 - 16) = v7;
      *(_OWORD *)v4 = v8;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      v4 += 56;
      --v1;
    }
    while (v1);
  }
  return v3;
}

uint64_t WebCore::PlatformCALayer::canHaveBackingStore(WebCore::PlatformCALayer *this)
{
  return (*((unsigned __int8 *)this + 12) < 7u) & (0x72u >> *((_BYTE *)this + 12));
}

double WebCore::NetworkLoadMetrics::NetworkLoadMetrics(WebCore::NetworkLoadMetrics *this)
{
  double result;

  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 13) = -1;
  *((_QWORD *)this + 14) = -1;
  *((_QWORD *)this + 15) = 0;
  return result;
}

{
  double result;

  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 13) = -1;
  *((_QWORD *)this + 14) = -1;
  *((_QWORD *)this + 15) = 0;
  return result;
}

BOOL WebCore::FrameLoaderStateMachine::isDisplayingInitialEmptyDocument(WebCore::FrameLoaderStateMachine *this)
{
  return (*(_DWORD *)this - 1) < 2;
}

uint64_t WebCore::isQuickLookPreviewURL(WebCore *this, const WTF::URL *a2)
{
  return WTF::URL::protocolIs();
}

uint64_t WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(WebCore::SelectorPseudoClassAndCompatibilityElementMapHash *this, const char *a2)
{
  switch((int)a2)
  {
    case 1:
      return a2
           + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
    case 2:
      goto LABEL_13;
    case 3:
      goto LABEL_12;
    case 4:
      goto LABEL_11;
    case 5:
      goto LABEL_10;
    case 6:
      goto LABEL_9;
    case 7:
      goto LABEL_8;
    case 8:
      goto LABEL_7;
    case 9:
      goto LABEL_6;
    case 10:
      goto LABEL_5;
    case 11:
      goto LABEL_4;
    case 12:
      goto LABEL_3;
    case 13:
      goto LABEL_2;
    case 14:
      goto LABEL_42;
    case 15:
      goto LABEL_41;
    case 16:
      goto LABEL_40;
    case 17:
      goto LABEL_39;
    case 18:
      goto LABEL_38;
    case 19:
      goto LABEL_37;
    case 20:
      goto LABEL_36;
    case 21:
      goto LABEL_35;
    case 22:
      goto LABEL_34;
    case 23:
      goto LABEL_33;
    case 24:
      goto LABEL_32;
    case 25:
      goto LABEL_31;
    case 26:
      goto LABEL_30;
    case 27:
      goto LABEL_29;
    case 28:
      goto LABEL_28;
    case 29:
      goto LABEL_27;
    case 30:
      goto LABEL_26;
    case 31:
      goto LABEL_25;
    case 32:
      goto LABEL_24;
    case 33:
      goto LABEL_23;
    case 34:
      goto LABEL_22;
    case 35:
      goto LABEL_21;
    case 36:
      goto LABEL_20;
    case 37:
      goto LABEL_19;
    case 38:
      goto LABEL_18;
    case 39:
      goto LABEL_17;
    case 40:
      goto LABEL_16;
    default:
      LODWORD(a2) = WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 40)]
                  + (_DWORD)a2;
LABEL_16:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 39)];
LABEL_17:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 38)];
LABEL_18:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 37)];
LABEL_19:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 36)];
LABEL_20:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 35)];
LABEL_21:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 34)];
LABEL_22:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 33)];
LABEL_23:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 32)];
LABEL_24:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 31)];
LABEL_25:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 30)];
LABEL_26:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 29)];
LABEL_27:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 28)];
LABEL_28:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 27)];
LABEL_29:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 26)];
LABEL_30:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 25)];
LABEL_31:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 24)];
LABEL_32:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 23)];
LABEL_33:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 22)];
LABEL_34:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 21)];
LABEL_35:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 20)];
LABEL_36:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 19)];
LABEL_37:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 18)];
LABEL_38:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 17)];
LABEL_39:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 16)];
LABEL_40:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 15)];
LABEL_41:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 14)];
LABEL_42:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 13)];
LABEL_2:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 12)];
LABEL_3:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 11)];
LABEL_4:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 10)];
LABEL_5:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 9)];
LABEL_6:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 8)];
LABEL_7:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 7)];
LABEL_8:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 6)];
LABEL_9:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 5)];
LABEL_10:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 4)];
LABEL_11:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 3)];
LABEL_12:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 2)];
LABEL_13:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 1)];
      return a2
           + WebCore::SelectorPseudoClassAndCompatibilityElementMapHash::hash(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
  }
}

uint64_t WebCore::ResourceRequestBase::cachePolicy(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return *((unsigned __int8 *)this + 144);
}

void WebCore::CSSPropertyParsing::consumePerspective(WebCore::CSSPropertyParsing *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  int *v7;
  int *v8;

  WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)this, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForPerspective, &v8);
  v7 = v8;
  if (!v8)
  {
    WebCore::CSSPropertyParserHelpers::consumeLength((uint64_t)this, *((unsigned __int8 *)a2 + 48), 1u, 1, &v8);
    v7 = v8;
  }
  *a3 = v7;
}

__int128 *WebCore::CSSPropertyParsing::consumeLineHeight@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v7;
  __int128 *result;
  int v9;
  uint64_t v10;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v9 = *((_DWORD *)v7 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 90)
  {
LABEL_3:
    result = WebCore::CSSPropertyParserHelpers::consumeNumber(this, (void *)1, &v10);
    if (v10)
      *a3 = v10;
    else
      return WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)a2 + 48), 1u, 1, 0, 0, 0, a3);
  }
  else
  {
    result = *this;
    if (*this == this[1])
    {
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        result = *this;
      }
    }
    else
    {
      result = (__int128 *)((char *)result + 24);
      *this = result;
    }
    while (1)
    {
      if (result >= this[1])
      {
        result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*(_DWORD *)result & 0x3F) != 0x10)
        break;
      result = (__int128 *)((char *)*this + 24);
      *this = result;
    }
    dword_1ECE8C188 += 2;
    *a3 = (uint64_t)&WebCore::staticCSSValuePool[3448];
  }
  return result;
}

__int128 *WebCore::consumeWordSpacing(WebCore *this, WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserContext *a3)
{
  __int128 *result;
  int *v7;
  int *v8;

  result = WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)a2, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForWordSpacing, &v8);
  v7 = v8;
  if (!v8)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 0, 0, 0, 0, (uint64_t *)&v8);
    v7 = v8;
  }
  *(_QWORD *)this = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeListStyleType@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t result;
  int *v11;
  int v12;
  int *v13;

  v8 = *this;
  v7 = this[1];
  if (*this >= v7)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) == 0)
  {
    v12 = *((_DWORD *)v8 + 4);
    if (v12 < 0)
    {
      v12 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
      *((_DWORD *)v8 + 4) = v12;
    }
    if ((unsigned __int16)v12 == 6)
    {
      result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
      if ((result & 0xFF0000) != 0)
      {
        if ((unsigned __int16)result >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1940D4A28);
        }
        v11 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
        *v11 += 2;
      }
      else
      {
        v11 = 0;
      }
LABEL_6:
      *a3 = (uint64_t)v11;
      return result;
    }
    v7 = this[1];
  }
  v9 = *this;
  if (*this >= v7)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) == 0x1C)
    return WebCore::CSSPropertyParserHelpers::consumeString((uint64_t)this, a3);
  result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)this, (uint64_t (*)(_QWORD))WebCore::CSSPropertyParserHelpers::isPredefinedCounterStyle, &v13);
  v11 = v13;
  if (v13)
    goto LABEL_6;
  if ((*((_BYTE *)a2 + 54) & 0x20) != 0)
    return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeCustomIdent((WebCore::CSSPropertyParserHelpers *)this, 0, a3);
  *a3 = 0;
  return result;
}

uint64_t WebCore::CSSPropertyParsing::consumeFontSize@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t result;
  unsigned int v11;
  int *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
  {
    v9 = *this;
    v8 = this[1];
  }
  else
  {
    result = *((unsigned int *)v7 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
      *((_DWORD *)v7 + 4) = result;
    }
    v11 = (unsigned __int16)result;
    v9 = *this;
    v8 = this[1];
    if ((unsigned __int16)result - 94 <= 0xA)
    {
      if (v9 == v8)
      {
        {
          v17 = (unsigned __int16)result;
          v14 = result;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v11 = v17;
          result = v14;
          v9 = *this;
        }
      }
      else
      {
        v9 = (__int128 *)((char *)v9 + 24);
        *this = v9;
      }
      while (1)
      {
        if (v9 >= this[1])
        {
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v15 = result;
            v16 = v11;
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            result = v15;
            v11 = v16;
          }
        }
        if ((*(_DWORD *)v9 & 0x3F) != 0x10)
          break;
        v9 = (__int128 *)((char *)*this + 24);
        *this = v9;
      }
      if (v11 >= 0x48E)
      {
        __break(0xC471u);
        JUMPOUT(0x1940D4C64);
      }
      v12 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
      *v12 += 2;
      goto LABEL_20;
    }
  }
  if (v9 >= v8)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) != 0)
    return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)a2 + 48), 1u, 0, 0, 0, 0, a3);
  v13 = *((_DWORD *)v9 + 4);
  if (v13 < 0)
  {
    v13 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
    *((_DWORD *)v9 + 4) = v13;
  }
  if ((unsigned __int16)v13 != 105)
    return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)a2 + 48), 1u, 0, 0, 0, 0, a3);
  result = (uint64_t)WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
  v12 = &WebCore::staticCSSValuePool[3492];
  dword_1ECE8C238 += 2;
LABEL_20:
  *a3 = (uint64_t)v12;
  return result;
}

__int128 *WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, int **a3@<X8>)
{
  __int128 *v6;
  int v7;
  __int128 *result;
  int *v9;
  int v10;

  v6 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
  {
    LOWORD(v7) = 0;
  }
  else
  {
    v7 = *((_DWORD *)v6 + 4);
    if (v7 < 0)
    {
      v10 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      LOWORD(v7) = v10;
      *((_DWORD *)v6 + 4) = v10;
    }
  }
  result = (__int128 *)a2((unsigned __int16)v7);
  if ((_DWORD)result)
  {
    result = *(__int128 **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    {
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        result = *(__int128 **)a1;
      }
    }
    else
    {
      result = (__int128 *)((char *)result + 24);
      *(_QWORD *)a1 = result;
    }
    while (1)
    {
      if ((unint64_t)result >= *(_QWORD *)(a1 + 8))
      {
        result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*(_DWORD *)result & 0x3F) != 0x10)
        break;
      result = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = result;
    }
    if ((unsigned __int16)v7 >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D4E64);
    }
    v9 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v7 + 3088];
    *v9 += 2;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
  return result;
}

BOOL WebCore::isKeywordValidForWidth(int a1)
{
  return (a1 - 547) < 9 || a1 == 394;
}

BOOL WebCore::isKeywordValidForHeight(int a1)
{
  return a1 == 394 || (a1 - 547) < 9;
}

BOOL WebCore::isKeywordValidForMaxWidth(int a1)
{
  return (a1 - 547) < 9 || a1 == 6;
}

uint64_t WebCore::isKeywordValidForOutlineStyle(int a1)
{
  _BOOL4 v1;

  v1 = (a1 - 8) < 8;
  if (a1 == 394)
    v1 = 1;
  return a1 == 6 || v1;
}

BOOL WebCore::CSSPropertyParserHelpers::isPredefinedCounterStyle(int a1)
{
  return (a1 - 272) < 0x5E;
}

BOOL WebCore::isKeywordValidForInlineSize(int a1)
{
  return a1 == 394 || (a1 - 547) < 9;
}

BOOL WebCore::isKeywordValidForMinWidth(int a1)
{
  return (a1 - 547) < 9 || a1 == 394;
}

BOOL WebCore::isKeywordValidForMaxHeight(int a1)
{
  return (a1 - 547) < 9 || a1 == 6;
}

BOOL WebCore::isKeywordValidForUnicodeBidi(int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 != 755 && ((a1 - 451) > 0x11 || ((1 << (a1 + 61)) & 0x3E041) == 0))
    return a1 == 90;
  return result;
}

BOOL WebCore::isKeywordValidForMinHeight(int a1)
{
  return (a1 - 547) < 9 || a1 == 394;
}

uint64_t WebCore::isKeywordValidForPointerEvents(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 != 6)
  {
    if (a1 > 393)
    {
      if (a1 == 394 || (a1 - 649) < 7 || a1 == 439)
        return result;
    }
    else if (a1 == 49)
    {
      return result;
    }
    return 0;
  }
  return result;
}

BOOL WebCore::isKeywordValidForBlockSize(int a1)
{
  return (a1 - 547) < 9 || a1 == 394;
}

uint64_t WebCore::isKeywordValidForClear(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= 452)
  {
    if ((a1 - 258) >= 2 && a1 != 6)
      return 0;
  }
  else if (a1 != 453 && (a1 - 530) >= 2)
  {
    return 0;
  }
  return result;
}

BOOL WebCore::isKeywordValidForWordSpacing(int a1)
{
  return a1 == 90;
}

uint64_t WebCore::isKeywordValidForOverflowX(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= 393)
  {
    if (a1 == 7)
      return result;
    return 0;
  }
  if (a1 > 438)
  {
    if (a1 > 555)
    {
      if (a1 != 556 && a1 != 742)
        return 0;
    }
    else if (a1 != 439 && a1 != 489)
    {
      return 0;
    }
  }
  else if (a1 != 394)
  {
    return 0;
  }
  return result;
}

BOOL WebCore::isKeywordValidForMinInlineSize(int a1)
{
  return (a1 - 547) < 9 || a1 == 394;
}

uint64_t WebCore::isKeywordValidForMixBlendMode(int a1)
{
  _BOOL4 v1;

  v1 = (a1 - 246) < 2 || a1 == 90;
  return (a1 - 740) < 0xF || v1;
}

BOOL WebCore::isKeywordValidForPerspective(int a1)
{
  return a1 == 6;
}

__n128 WebCore::FloatRoundedRect::FloatRoundedRect(WebCore::FloatRoundedRect *this, __n128 *a2, const WebCore::FloatSize *a3, const WebCore::FloatSize *a4, const WebCore::FloatSize *a5, const WebCore::FloatSize *a6)
{
  __n128 result;

  result = *a2;
  *(__n128 *)this = *a2;
  *((_QWORD *)this + 2) = *(_QWORD *)a3;
  *((_QWORD *)this + 3) = *(_QWORD *)a4;
  *((_QWORD *)this + 4) = *(_QWORD *)a5;
  *((_QWORD *)this + 5) = *(_QWORD *)a6;
  return result;
}

{
  __n128 result;

  result = *a2;
  *(__n128 *)this = *a2;
  *((_QWORD *)this + 2) = *(_QWORD *)a3;
  *((_QWORD *)this + 3) = *(_QWORD *)a4;
  *((_QWORD *)this + 4) = *(_QWORD *)a5;
  *((_QWORD *)this + 5) = *(_QWORD *)a6;
  return result;
}

void WebCore::GraphicsContextCG::translate(WebCore::GraphicsContextCG *this, float a2, float a3)
{
  *((_BYTE *)this + 744) |= 8u;
  CGContextTranslateCTM(*((CGContextRef *)this + 90), a2, a3);
  *((_BYTE *)this + 744) &= ~4u;
}

void WebCore::ProcessWarming::prewarmGlobally(WebCore::ProcessWarming *this)
{
  WebCore::Style::UserAgentStyle *v1;
  WebCore::MQ::Features *v2;
  void *v3;
  WTF *v4;
  unsigned __int8 *v5;
  WTF *v6;
  int v7;

  WebCore::ProcessWarming::initializeNames(this);
  WebCore::Style::UserAgentStyle::initDefaultStyleSheet(v1);
  WebCore::MQ::Features::allSchemas(v2, (uint64_t *)&v6);
  v4 = v6;
  if (v6)
  {
    v6 = 0;
    v7 = 0;
    v4 = (WTF *)WTF::fastFree(v4, v3);
  }
  if (!WebCore::g_commonVMOrNull)
    v4 = (WTF *)WebCore::commonVMSlow(v4);
  v5 = WebCore::FontCache::prewarmGlobally(v4);
  WebCore::TelephoneNumberDetector::prewarm((WebCore::TelephoneNumberDetector *)v5);
}

void WebCore::Style::UserAgentStyle::initDefaultStyleSheet(WebCore::Style::UserAgentStyle *this)
{
  WebCore::Style::RuleSet *v1;
  uint64_t v2;
  void *v3;
  WebCore::Style::RuleSet *v4;
  uint64_t v5;
  void *v6;
  WebCore::Style::RuleSet *v7;
  uint64_t v8;
  void *v9;
  WebCore::StyleSheetContents *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::StyleSheetContents *v18;
  WebCore::RenderTheme *v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebCore::Style::RuleSet *v30[21];
  WTF::StringImpl *v31;
  WebCore::Style::RuleSet *v32;
  WTF::StringImpl *v33;
  unsigned __int8 *v34[5];
  WebCore::StyleSheetContents *v35;

  if (!WebCore::Style::UserAgentStyle::defaultStyle)
  {
    v1 = (WebCore::Style::RuleSet *)WTF::fastMalloc((WTF *)0x328);
    WebCore::Style::RuleSet::RuleSet(v1);
    v30[0] = 0;
    WebCore::Style::UserAgentStyle::defaultStyle = v2;
    WTF::Ref<WebCore::Style::RuleSet,WTF::RawPtrTraits<WebCore::Style::RuleSet>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet>>::~Ref(v30, v3);
    v4 = (WebCore::Style::RuleSet *)WTF::fastMalloc((WTF *)0x328);
    WebCore::Style::RuleSet::RuleSet(v4);
    v30[0] = 0;
    WebCore::Style::UserAgentStyle::defaultPrintStyle = v5;
    WTF::Ref<WebCore::Style::RuleSet,WTF::RawPtrTraits<WebCore::Style::RuleSet>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet>>::~Ref(v30, v6);
    v7 = (WebCore::Style::RuleSet *)WTF::fastMalloc((WTF *)0x328);
    WebCore::Style::RuleSet::RuleSet(v7);
    v30[0] = 0;
    WebCore::Style::UserAgentStyle::defaultQuirksStyle = v8;
    WTF::Ref<WebCore::Style::RuleSet,WTF::RawPtrTraits<WebCore::Style::RuleSet>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet>>::~Ref(v30, v9);
    v34[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v34);
    WebCore::CSSParserContext::CSSParserContext((uint64_t)v30, 4, (uint64_t)v34);
    WebCore::StyleSheetContents::create((uint64_t)v30, (uint64_t *)&v35);
    v10 = v35;
    v35 = 0;
    WebCore::Style::UserAgentStyle::mediaQueryStyleSheet = (uint64_t)v10;
    WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>::~Ref(&v35, v11);
    WebCore::CSSParserContext::~CSSParserContext((WebCore::CSSParserContext *)v30, v12);
    v14 = (WTF::StringImpl *)v34[0];
    v34[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        v14 = (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = WebCore::RenderTheme::singleton(v14);
    (*(void (**)(WTF::StringImpl **__return_ptr))(*v15 + 48))(&v33);
    v16 = v33;
    if (v33 && *((_DWORD *)v33 + 1))
    {
      *(_DWORD *)v33 += 2;
      WTF::makeString<std::span<char const,36288ul>,WTF::String>(v30, (uint64_t)v16);
      v35 = v30[0];
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v35 = v30[0];
    }
    WebCore::Style::UserAgentStyle::defaultStyleSheet = (uint64_t)WebCore::Style::parseUASheet((WebCore::Style *)&v35, v17);
    WebCore::Style::UserAgentStyle::addToDefaultStyle((int ***)WebCore::Style::UserAgentStyle::defaultStyleSheet, v18);
    v20 = WebCore::RenderTheme::singleton(v19);
    (*(void (**)(WTF::StringImpl **__return_ptr))(*v20 + 56))(&v31);
    v21 = v31;
    if (v31 && *((_DWORD *)v31 + 1))
    {
      *(_DWORD *)v31 += 2;
      WTF::makeString<std::span<char const,408ul>,WTF::String>(v30, (uint64_t)v21);
      v32 = v30[0];
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    WebCore::Style::UserAgentStyle::quirksStyleSheet = (uint64_t)WebCore::Style::parseUASheet((WebCore::Style *)&v32, v22);
    v23 = (_DWORD *)WebCore::Style::UserAgentStyle::defaultQuirksStyle;
    if ((_MergedGlobals_267 & 1) == 0)
    {
      WebCore::MQ::MediaQueryEvaluator::MediaQueryEvaluator((uint64_t)&unk_1ECE84C78, (_DWORD **)&WebCore::screenAtomData, 0);
      _MergedGlobals_267 = 1;
    }
    WebCore::Style::RuleSetBuilder::RuleSetBuilder((uint64_t)v30, v23, (uint64_t)&unk_1ECE84C78, 0, 0, 0);
    v34[0] = 0;
    v34[1] = 0;
    WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)v30, (const WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::quirksStyleSheet, v34);
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v24);
    ++WebCore::Style::UserAgentStyle::defaultStyleVersion;
    WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)v30);
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v32;
    v32 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v25);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = v33;
    v33 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v25);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v35;
    v35 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v25);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
}

WebCore::StyleSheetContents *WebCore::Style::parseUASheet(WebCore::Style *this, const WTF::String *a2)
{
  WebCore::StyleSheetContents *v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::StyleSheetContents *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11[5];
  _BYTE v12[64];
  WebCore::StyleSheetContents *v13;

  v11[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v11);
  WebCore::CSSParserContext::CSSParserContext((uint64_t)v12, 4, (uint64_t)v11);
  WebCore::StyleSheetContents::create((uint64_t)v12, (uint64_t *)&v13);
  v3 = v13;
  v13 = 0;
  WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>::~Ref(&v13, v4);
  WebCore::CSSParserContext::~CSSParserContext((WebCore::CSSParserContext *)v12, v5);
  v9 = v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::StyleSheetContents::parseString(v3, this, v7, v8);
  return v3;
}

uint64_t WebCore::StyleSheetContents::parseString(WebCore::StyleSheetContents *this, const WTF::String *a2, uint64_t a3, WebCore::StyleSheetContents *a4)
{
  WTF::StringImpl *v4;
  __int128 v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  __int16 v17;

  v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  if (v4)
    *(_DWORD *)v4 += 2;
  v12 = v4;
  v5 = *((_OWORD *)this + 10);
  v13 = *((_OWORD *)this + 9);
  v14 = v5;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = *((_QWORD *)this + 23);
  v15 = v6;
  v16 = v7;
  v17 = *((_WORD *)this + 96);
  WebCore::CSSParserImpl::parseStyleSheet(a2, (const WTF::String *)&v12, this, a4);
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  return 1;
}

double WebCore::Style::RuleSet::RuleSet(WebCore::Style::RuleSet *this)
{
  double result;

  *(_DWORD *)this = 1;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = (char *)this + 88;
  *((_QWORD *)this + 10) = 1;
  *((_QWORD *)this + 15) = (char *)this + 136;
  *((_QWORD *)this + 16) = 1;
  *((_QWORD *)this + 21) = (char *)this + 184;
  *((_QWORD *)this + 22) = 1;
  *((_QWORD *)this + 27) = (char *)this + 232;
  *((_QWORD *)this + 28) = 1;
  *((_QWORD *)this + 33) = (char *)this + 280;
  *((_QWORD *)this + 34) = 1;
  *((_QWORD *)this + 39) = (char *)this + 328;
  *((_QWORD *)this + 40) = 1;
  *((_QWORD *)this + 45) = (char *)this + 376;
  *((_QWORD *)this + 46) = 1;
  *((_QWORD *)this + 51) = (char *)this + 424;
  *((_QWORD *)this + 52) = 1;
  *(_QWORD *)((char *)this + 645) = 0;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_QWORD *)this + 84) = 0;
  *((_DWORD *)this + 170) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_WORD *)this + 400) = 0;
  return result;
}

void WebCore::Style::UserAgentStyle::addToDefaultStyle(int ***this, WebCore::StyleSheetContents *a2)
{
  _DWORD *v3;
  void *v4;
  _DWORD *v5;
  void *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int **v9;
  uint64_t i;
  int *v11;
  int v12;
  WebCore::StyleSheetContents *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18[2];
  unsigned __int8 *v19[21];
  _BYTE v20[176];

  v3 = (_DWORD *)WebCore::Style::UserAgentStyle::defaultStyle;
  if ((_MergedGlobals_267 & 1) == 0)
  {
    WebCore::MQ::MediaQueryEvaluator::MediaQueryEvaluator((uint64_t)&unk_1ECE84C78, (_DWORD **)&WebCore::screenAtomData, 0);
    _MergedGlobals_267 = 1;
  }
  WebCore::Style::RuleSetBuilder::RuleSetBuilder((uint64_t)v20, v3, (uint64_t)&unk_1ECE84C78, 0, 0, 0);
  v19[0] = 0;
  v19[1] = 0;
  WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)v20, (const WebCore::StyleSheetContents *)this, v19);
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v4);
  v5 = (_DWORD *)WebCore::Style::UserAgentStyle::defaultPrintStyle;
  if ((byte_1ECE84C71 & 1) == 0)
  {
    WebCore::MQ::MediaQueryEvaluator::MediaQueryEvaluator((uint64_t)&unk_1ECE84C98, (_DWORD **)&WebCore::printAtomData, 0);
    byte_1ECE84C71 = 1;
  }
  WebCore::Style::RuleSetBuilder::RuleSetBuilder((uint64_t)v19, v5, (uint64_t)&unk_1ECE84C98, 0, 0, 0);
  v18[0] = 0;
  v18[1] = 0;
  WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)v19, (const WebCore::StyleSheetContents *)this, v18);
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v6);
  v8 = *((unsigned int *)this + 25);
  if ((_DWORD)v8)
  {
    v9 = this[11];
    for (i = 8 * v8; i; i -= 8)
    {
      v11 = *v9;
      v12 = **v9;
      *v11 = v12 + 1;
      if ((v11[1] & 0x1F) == 4)
      {
        if ((_MergedGlobals_267 & 1) == 0)
        {
          WebCore::MQ::MediaQueryEvaluator::MediaQueryEvaluator((uint64_t)&unk_1ECE84C78, (_DWORD **)&WebCore::screenAtomData, 0);
          _MergedGlobals_267 = 1;
        }
        if (!WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&unk_1ECE84C78, (uint64_t)(v11 + 6)))
        {
          if ((byte_1ECE84C71 & 1) == 0)
          {
            WebCore::MQ::MediaQueryEvaluator::MediaQueryEvaluator((uint64_t)&unk_1ECE84C98, (_DWORD **)&WebCore::printAtomData, 0);
            byte_1ECE84C71 = 1;
          }
          if (!WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&unk_1ECE84C98, (uint64_t)(v11 + 6)))
          {
            v13 = (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::mediaQueryStyleSheet;
            WebCore::StyleRuleMedia::copy((uint64_t *)&v17, (WebCore::StyleRuleMedia *)v11);
            v14 = v17;
            v17 = 0;
            v18[0] = v14;
            WebCore::StyleSheetContents::parserAppendRule(v13);
            v15 = v18[0];
            v18[0] = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v15, v7);
              else
                --*(_DWORD *)v15;
            }
            v16 = v17;
            v17 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v16, v7);
              else
                --*(_DWORD *)v16;
            }
          }
        }
        v12 = *v11 - 1;
        if (*v11 == 1)
        {
LABEL_25:
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v11, v7);
          goto LABEL_10;
        }
      }
      else if (!v12)
      {
        goto LABEL_25;
      }
      *v11 = v12;
LABEL_10:
      ++v9;
    }
  }
  ++WebCore::Style::UserAgentStyle::defaultStyleVersion;
  WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)v19);
  WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)v20);
}

double WebCore::Style::RuleSetBuilder::RuleSetBuilder(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  double result;

  ++*a2;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a4;
  *(_BYTE *)(a1 + 72) = a5;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 128) = a6;
  *(_QWORD *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  return result;
}

uint64_t *WebCore::StyleRuleMedia::copy@<X0>(uint64_t *__return_ptr a1@<X8>, WebCore::StyleRuleMedia *this@<X0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;

  v4 = WTF::fastMalloc((WTF *)0x28);
  v5 = WebCore::StyleRuleGroup::StyleRuleGroup(v4, (uint64_t)this);
  result = (uint64_t *)WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5 + 24, (uint64_t)this + 24);
  *a1 = v4;
  return result;
}

uint64_t WebCore::StyleRuleGroup::StyleRuleGroup(uint64_t a1, uint64_t a2)
{
  char v3;

  *(_DWORD *)a1 = 1;
  v3 = *(_BYTE *)(a1 + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
  *(_BYTE *)(a1 + 4) = v3;
  *(_BYTE *)(a1 + 4) = v3 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
  WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::StyleRuleGroup::StyleRuleGroup(WebCore::StyleRuleGroup const&)::$_0>((_QWORD *)(a1 + 8), a2 + 8);
  return a1;
}

uint64_t WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x4924925)
  {
    v5 = 56 * v3;
    v6 = WTF::fastMalloc((WTF *)(56 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0x38;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(*(_QWORD *)a2, *(_QWORD *)a2 + 56 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MQ::MediaQueryEvaluator::MediaQueryEvaluator(uint64_t result, _DWORD **a2, char a3)
{
  _DWORD *v3;

  v3 = *a2;
  if (*a2)
    *v3 += 2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v3;
  *(_BYTE *)(result + 24) = a3;
  return result;
}

uint64_t WebCore::StyleSheetContents::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _DWORD *v6;
  __int128 v7;
  _DWORD *v8;
  uint64_t v9;

  result = WTF::fastMalloc((WTF *)0xD8);
  *(_DWORD *)result = 1;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_QWORD *)(result + 104) = 0;
  v5 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(result + 112) = v5;
  *(_WORD *)(result + 120) = 0;
  *(_BYTE *)(result + 122) = 1;
  *(_QWORD *)(result + 123) = 0;
  *(_BYTE *)(result + 131) = 0;
  v6 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v6 += 2;
  *(_QWORD *)(result + 136) = v6;
  v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(result + 144) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 160) = v7;
  v8 = *(_DWORD **)(a1 + 40);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(result + 176) = v8;
  v9 = *(_QWORD *)(a1 + 48);
  *(_WORD *)(result + 192) = *(_WORD *)(a1 + 56);
  *(_QWORD *)(result + 184) = v9;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  *a2 = result;
  return result;
}

void WebCore::CSSParserContext::~CSSParserContext(WebCore::CSSParserContext *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void WebCore::RenderTheme::extraDefaultStyleSheet(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::RenderTheme::extraQuirksStyleSheet(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::initializeTagNameStrings(WebCore *this)
{
  char v1;
  WTF::StringImpl *v2;
  uint64_t i;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;

  v1 = WebCore::initializeTagNameStrings(void)::initialized;
  WebCore::initializeTagNameStrings(void)::initialized = 1;
  if ((v1 & 1) == 0)
  {
    bzero(&WebCore::tagNameStrings, 0x938uLL);
    for (i = 0; i != 257; ++i)
    {
      v4 = *(_DWORD **)(*WebCore::tagQualifiedNamePointers[i] + 24);
      if (v4)
        *v4 += 2;
      v5 = *(WTF::StringImpl **)((char *)&WebCore::tagNameStrings + i * 8 + 8);
      *(_QWORD *)((char *)&WebCore::tagNameStrings + i * 8 + 8) = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v2);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (char *)&WebCore::tagNameStrings + v7 + 2056;
      WTF::AtomStringImpl::add();
      v10 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = v11;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v7 += 8;
      v6 += 32;
    }
    while (v6 != 1184);
  }
}

void WebCore::ProcessWarming::initializeNames(WebCore::ProcessWarming *this)
{
  unint64_t v1;
  WebCore *v2;
  WebCore::XLinkNames *v3;
  WebCore::MathMLNames *v4;
  WebCore::XMLNSNames *v5;
  WebCore::XMLNames *v6;
  WebCore::WebKitFontFamilyNames *v7;
  WebCore *v8;
  uint64_t *v9;
  char v10;
  char **v11;
  char *v12;

  v1 = atomic_load(&WebCore::initializeCommonAtomStrings(void)::initializeKey);
  if (v1 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WebCore::initializeCommonAtomStrings(void)::initializeKey, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::initializeCommonAtomStrings(void)::$_0 &&>>);
  }
  v2 = (WebCore *)WebCore::HTMLNames::init(this);
  if ((WebCore::QualifiedName::init(void)::initialized & 1) == 0)
  {
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    WebCore::QualifiedName::QualifiedName((WebCore *)&WebCore::anyName, MEMORY[0x1E0CBF2F8], &WebCore::starAtomData, &WebCore::starAtomData, 0, 0);
    v2 = WebCore::QualifiedName::QualifiedName((WebCore *)&WebCore::nullName, v9, v9, v9, (WTF::StringImpl *)1, 0);
    WebCore::QualifiedName::init(void)::initialized = 1;
  }
  v3 = (WebCore::XLinkNames *)WebCore::SVGNames::init(v2);
  WebCore::XLinkNames::init(v3);
  v5 = (WebCore::XMLNSNames *)WebCore::MathMLNames::init(v4);
  WebCore::XMLNSNames::init(v5);
  WebCore::XMLNames::init(v6);
  v8 = (WebCore *)WebCore::WebKitFontFamilyNames::init(v7);
  WebCore::initializeTagNameStrings(v8);
}

void WebCore::initializeCommonAtomStrings(WebCore *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&WebCore::initializeCommonAtomStrings(void)::initializeKey);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WebCore::initializeCommonAtomStrings(void)::initializeKey, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::initializeCommonAtomStrings(void)::$_0 &&>>);
  }
}

void WebCore::XMLNames::init(WebCore::XMLNames *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if ((WebCore::XMLNames::init(void)::initialized & 1) == 0)
  {
    WebCore::XMLNames::init(void)::initialized = 1;
    WTF::AtomStringImpl::add();
    v1 = (uint64_t)v9;
    v8 = v9;
    if (v9)
      *(_DWORD *)v9 += 2;
    WebCore::XMLNames::xmlNamespaceURI = v1;
    WTF::AtomStringImpl::add();
    v7 = v9;
    WebCore::QualifiedName::QualifiedName(&WebCore::XMLNames::langAttr, MEMORY[0x1E0CBF2F8], &v7, &v8, 6, 947);
    v3 = v7;
    v7 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::AtomStringImpl::add();
    v7 = v9;
    WebCore::QualifiedName::QualifiedName(&WebCore::XMLNames::spaceAttr, MEMORY[0x1E0CBF2F8], &v7, &v8, 6, 275);
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
}

uint64_t WebCore::WebKitFontFamilyNames::init(WebCore::WebKitFontFamilyNames *this)
{
  uint64_t result;
  uint64_t v2;

  if ((WebCore::WebKitFontFamilyNames::init(void)::initialized & 1) == 0)
  {
    WebCore::WebKitFontFamilyNames::init(void)::initialized = 1;
    qword_1EE2F9BF0 = (uint64_t)&WebCore::WebKitFontFamilyNames::cursiveFamilyData;
    WebCore::WebKitFontFamilyNames::familyNamesData = (uint64_t)&qword_1EE2F9BF0;
    qword_1EE2F9BF8 = (uint64_t)&WebCore::WebKitFontFamilyNames::fantasyFamilyData;
    unk_1EE2F9C00 = &WebCore::WebKitFontFamilyNames::monospaceFamilyData;
    qword_1EE2F9C08 = (uint64_t)&WebCore::WebKitFontFamilyNames::pictographFamilyData;
    unk_1EE2F9C10 = &WebCore::WebKitFontFamilyNames::sansSerifFamilyData;
    qword_1EE2F9C18 = (uint64_t)&WebCore::WebKitFontFamilyNames::serifFamilyData;
    unk_1EE2F9C20 = &WebCore::WebKitFontFamilyNames::standardFamilyData;
    qword_1EE2F9C28 = (uint64_t)&WebCore::WebKitFontFamilyNames::systemUiFamilyData;
    qword_1EE2F9BE8 = 0x800000008;
    WTF::AtomStringImpl::add();
    WebCore::WebKitFontFamilyNames::cursiveFamily = v2;
    WTF::AtomStringImpl::add();
    WebCore::WebKitFontFamilyNames::fantasyFamily = v2;
    WTF::AtomStringImpl::add();
    WebCore::WebKitFontFamilyNames::monospaceFamily = v2;
    WTF::AtomStringImpl::add();
    WebCore::WebKitFontFamilyNames::pictographFamily = v2;
    WTF::AtomStringImpl::add();
    WebCore::WebKitFontFamilyNames::sansSerifFamily = v2;
    WTF::AtomStringImpl::add();
    WebCore::WebKitFontFamilyNames::serifFamily = v2;
    WTF::AtomStringImpl::add();
    WebCore::WebKitFontFamilyNames::standardFamily = v2;
    result = WTF::AtomStringImpl::add();
    WebCore::WebKitFontFamilyNames::systemUiFamily = v2;
    qword_1EE2F9C40 = WebCore::WebKitFontFamilyNames::cursiveFamily;
    WebCore::WebKitFontFamilyNames::familyNames = (uint64_t)&qword_1EE2F9C40;
    qword_1EE2F9C48 = WebCore::WebKitFontFamilyNames::fantasyFamily;
    unk_1EE2F9C50 = WebCore::WebKitFontFamilyNames::monospaceFamily;
    qword_1EE2F9C58 = WebCore::WebKitFontFamilyNames::pictographFamily;
    unk_1EE2F9C60 = WebCore::WebKitFontFamilyNames::sansSerifFamily;
    qword_1EE2F9C68 = WebCore::WebKitFontFamilyNames::serifFamily;
    unk_1EE2F9C70 = WebCore::WebKitFontFamilyNames::standardFamily;
    qword_1EE2F9C78 = v2;
    qword_1EE2F9C38 = 0x800000008;
  }
  return result;
}

uint64_t WebCore::MathMLNames::init(WebCore::MathMLNames *this)
{
  WTF::StringImpl *v1;
  uint64_t **v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t **v7;
  uint64_t *v8;
  WebCore *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if ((WebCore::MathMLNames::init(void)::initialized & 1) == 0)
  {
    WebCore::MathMLNames::init(void)::initialized = 1;
    WTF::AtomStringImpl::add();
    v1 = v15;
    v14 = v15;
    if (v15)
      *(_DWORD *)v15 += 2;
    WebCore::MathMLNames::mathmlNamespaceURI = (uint64_t)v1;
    v2 = &WebCore::MathMLNames::init(void)::tagsTable;
    v3 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    do
    {
      v4 = *v2;
      WTF::AtomStringImpl::add();
      v5 = v15;
      v13 = v15;
      WebCore::QualifiedName::QualifiedName((WebCore *)v4, v3, (uint64_t *)&v13, (uint64_t *)&v14, (WTF::StringImpl *)3, *((unsigned __int16 *)v2 + 8));
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v6);
        else
          *(_DWORD *)v5 -= 2;
      }
      v2 += 3;
    }
    while (v2 != &WebCore::MathMLNames::init(void)::attributesTable);
    v7 = &WebCore::MathMLNames::init(void)::attributesTable;
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    do
    {
      v9 = (WebCore *)*v7;
      WTF::AtomStringImpl::add();
      v10 = v15;
      v13 = v15;
      result = (uint64_t)WebCore::QualifiedName::QualifiedName(v9, v8, (uint64_t *)&v13, v8, (WTF::StringImpl *)1, *((unsigned __int16 *)v7 + 8));
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = WTF::StringImpl::destroy(v10, v12);
        else
          *(_DWORD *)v10 -= 2;
      }
      v7 += 3;
    }
    while (v7 != (uint64_t **)&__block_descriptor_40_e8_32o_e17_v16__0__NSError_8ls32l8);
    if (v1)
    {
      if (*(_DWORD *)v1 == 2)
        return WTF::StringImpl::destroy(v1, v12);
      else
        *(_DWORD *)v1 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SVGNames::init(WebCore::SVGNames *this)
{
  WTF::StringImpl *v1;
  uint64_t **v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t **v7;
  uint64_t *v8;
  WebCore *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if ((WebCore::SVGNames::init(void)::initialized & 1) == 0)
  {
    WebCore::SVGNames::init(void)::initialized = 1;
    WTF::AtomStringImpl::add();
    v1 = v15;
    v14 = v15;
    if (v15)
      *(_DWORD *)v15 += 2;
    WebCore::SVGNames::svgNamespaceURI = (uint64_t)v1;
    v2 = &WebCore::SVGNames::init(void)::tagsTable;
    v3 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    do
    {
      v4 = *v2;
      WTF::AtomStringImpl::add();
      v5 = v15;
      v13 = v15;
      WebCore::QualifiedName::QualifiedName((WebCore *)v4, v3, (uint64_t *)&v13, (uint64_t *)&v14, (WTF::StringImpl *)4, *((unsigned __int16 *)v2 + 8));
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v6);
        else
          *(_DWORD *)v5 -= 2;
      }
      v2 += 3;
    }
    while (v2 != &WebCore::SVGNames::init(void)::attributesTable);
    v7 = &WebCore::SVGNames::init(void)::attributesTable;
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    do
    {
      v9 = (WebCore *)*v7;
      WTF::AtomStringImpl::add();
      v10 = v15;
      v13 = v15;
      result = (uint64_t)WebCore::QualifiedName::QualifiedName(v9, v8, (uint64_t *)&v13, v8, (WTF::StringImpl *)1, *((unsigned __int16 *)v7 + 8));
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = WTF::StringImpl::destroy(v10, v12);
        else
          *(_DWORD *)v10 -= 2;
      }
      v7 += 3;
    }
    if (v1)
    {
      if (*(_DWORD *)v1 == 2)
        return WTF::StringImpl::destroy(v1, v12);
      else
        *(_DWORD *)v1 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLNames::init(WebCore::HTMLNames *this)
{
  WTF::StringImpl *v1;
  uint64_t **v2;
  _QWORD *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t **v7;
  uint64_t *v8;
  char *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if ((WebCore::HTMLNames::init(void)::initialized & 1) == 0)
  {
    WebCore::HTMLNames::init(void)::initialized = 1;
    WTF::AtomStringImpl::add();
    v1 = v15;
    v14 = v15;
    if (v15)
      *(_DWORD *)v15 += 2;
    WebCore::HTMLNames::xhtmlNamespaceURI = (uint64_t)v1;
    v2 = &WebCore::HTMLNames::init(void)::tagsTable;
    v3 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    do
    {
      v4 = *v2;
      WTF::AtomStringImpl::add();
      v5 = v15;
      v13 = v15;
      WebCore::QualifiedName::QualifiedName((WebCore *)v4, v3, (uint64_t *)&v13, (uint64_t *)&v14, (WTF::StringImpl *)2, *((unsigned __int16 *)v2 + 8));
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v6);
        else
          *(_DWORD *)v5 -= 2;
      }
      v2 += 3;
    }
    while (v2 != &WebCore::HTMLNames::init(void)::attributesTable);
    v7 = &WebCore::HTMLNames::init(void)::attributesTable;
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    do
    {
      v9 = (char *)*v7;
      WTF::AtomStringImpl::add();
      v10 = v15;
      v13 = v15;
      result = (uint64_t)WebCore::QualifiedName::QualifiedName((WebCore *)v9, v8, (uint64_t *)&v13, v8, (WTF::StringImpl *)1, *((unsigned __int16 *)v7 + 8));
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = WTF::StringImpl::destroy(v10, v12);
        else
          *(_DWORD *)v10 -= 2;
      }
      v7 += 3;
    }
    while (v7 != (uint64_t **)&WebCore::header_name_wordlist);
    if (v1)
    {
      if (*(_DWORD *)v1 == 2)
        return WTF::StringImpl::destroy(v1, v12);
      else
        *(_DWORD *)v1 -= 2;
    }
  }
  return result;
}

WebCore *WebCore::QualifiedName::QualifiedName(WebCore *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, WTF::StringImpl *a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD v19[3];
  uint64_t *v20;
  char v21;

  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(uint64_t **)(v13 + 56);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v13);
    v14 = *(uint64_t **)(v13 + 56);
  }
  v15 = *a3;
  v16 = *a4;
  v19[0] = *a2;
  v19[1] = v15;
  if (v16 && !*(_DWORD *)(v16 + 4))
    v16 = 0;
  v19[2] = v16;
  WTF::HashSet<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WTF::HashTableTraits>::add<WebCore::QNameComponentsTranslator,WebCore::QualifiedNameComponents>(v14, (uint64_t)v19, (uint64_t)&v20);
  v17 = (_DWORD *)*v20;
  if (v21)
    WebCore::updateImplWithNamespaceAndElementName(*v20, a5, a6);
  else
    ++*v17;
  *(_QWORD *)a1 = v17;
  return a1;
}

uint64_t WTF::HashSet<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WTF::HashTableTraits>::add<WebCore::QNameComponentsTranslator,WebCore::QualifiedNameComponents>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v5 = *a1;
  if (*a1
    || (v35 = a2,
        WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WebCore::QualifiedNameCache::QualifiedNameHashTraits>::expand(a1, 0), a2 = v35, (v5 = *a1) != 0))
  {
    v6 = 0;
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  v8 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (*(_QWORD *)a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)a2 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)a2 - 1640531527);
  v12 = v11 + (unsigned __int16)WORD2(*(_QWORD *)a2) + (v11 >> 11);
  v13 = (*(_QWORD *)a2 >> 37) & 0x7FFF800 ^ (v12 << 16) ^ v12;
  v14 = (v10 >> 5) & 0x7FFF800 ^ ((v13 + (unsigned __int16)v10 + (v13 >> 11)) << 16) ^ (v13 + (unsigned __int16)v10 + (v13 >> 11));
  v15 = (v10 >> 37) & 0x7FFF800 ^ ((v14 + WORD2(v10) + (v14 >> 11)) << 16) ^ (v14 + WORD2(v10) + (v14 >> 11));
  v16 = *(_QWORD *)(a2 + 16);
  v17 = (v16 >> 5) & 0x7FFF800 ^ ((v15 + (unsigned __int16)v16 + (v15 >> 11)) << 16) ^ (v15 + (unsigned __int16)v16 + (v15 >> 11));
  v18 = (v16 >> 37) & 0x7FFF800 ^ ((v17 + WORD2(v16) + (v17 >> 11)) << 16) ^ (v17 + WORD2(v16) + (v17 >> 11));
  v19 = (v18 + (v18 >> 11)) ^ (8 * (v18 + (v18 >> 11)));
  v20 = (v19 + (v19 >> 5)) ^ (4 * (v19 + (v19 >> 5)));
  v21 = (v20 + (v20 >> 15)) ^ ((v20 + (v20 >> 15)) << 10);
  if (!v21)
    v21 = 0x800000;
  while (1)
  {
    v22 = v21 & v7;
    v23 = (uint64_t *)(v5 + 8 * v22);
    v24 = (_QWORD *)*v23;
    if (!*v23)
    {
      if (v9)
        v23 = v9;
      if (*v23 == -1)
      {
        *v23 = 0;
        --*(_DWORD *)(*a1 - 16);
      }
      result = WebCore::QNameComponentsTranslator::translate(v23, (WTF::StringImpl **)a2);
      v29 = *a1;
      if (*a1)
        v30 = *(_DWORD *)(v29 - 12) + 1;
      else
        v30 = 1;
      *(_DWORD *)(v29 - 12) = v30;
      v31 = *a1;
      if (*a1)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
      {
        if (v34 > 2 * v33)
          goto LABEL_25;
      }
      else if (3 * v34 > 4 * v33)
      {
LABEL_25:
        v28 = v31 + 8 * v34;
        v27 = 1;
        goto LABEL_14;
      }
      result = (uint64_t)WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WebCore::QualifiedNameCache::QualifiedNameHashTraits>::expand(a1, v23);
      v23 = (uint64_t *)result;
      v31 = *a1;
      if (*a1)
        v34 = *(unsigned int *)(v31 - 4);
      else
        v34 = 0;
      goto LABEL_25;
    }
    if (v24 == (_QWORD *)-1)
    {
      v9 = (uint64_t *)(v5 + 8 * v22);
      goto LABEL_10;
    }
    if (*(_QWORD *)a2 == v24[2])
    {
      result = v24[3];
      if (v10 == result && v16 == v24[4])
        break;
    }
LABEL_10:
    v21 = ++v8 + v22;
  }
  if ((v6 & 1) != 0)
    v26 = 0;
  else
    v26 = *(unsigned int *)(v5 - 4);
  v27 = 0;
  v28 = v5 + 8 * v26;
LABEL_14:
  *(_QWORD *)a3 = v23;
  *(_QWORD *)(a3 + 8) = v28;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

uint64_t WebCore::QNameComponentsTranslator::translate(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;

  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  v4 = a2[1];
  if (v4)
    *(_DWORD *)v4 += 2;
  v5 = a2[2];
  if (v5)
    *(_DWORD *)v5 += 2;
  result = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)result = 1;
  *(_BYTE *)(result + 8) = 0;
  *(_WORD *)(result + 10) = 0;
  if (v3)
    *(_DWORD *)v3 += 2;
  *(_QWORD *)(result + 16) = v3;
  if (v4)
    *(_DWORD *)v4 += 2;
  *(_QWORD *)(result + 24) = v4;
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 32) = v5;
    *a1 = result;
    if (*(_DWORD *)v5 == 2)
      result = WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
  else
  {
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *a1 = result;
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      result = WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, v7);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::updateImplWithNamespaceAndElementName(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  uint64_t v3;
  WTF::AtomString *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = a1;
  *(_BYTE *)(a1 + 8) = (_BYTE)a2;
  *(_WORD *)(a1 + 10) = a3;
  v4 = (WTF::AtomString *)(a1 + 24);
  if ((_DWORD)a2 == 2 && a3)
  {
    result = *(WTF::StringImpl **)v4;
    if (result)
      *(_DWORD *)result += 2;
    v8 = result;
  }
  else
  {
    v7 = v3;
    WTF::AtomString::convertToASCIILowercase(v4);
    v3 = v7;
    result = v8;
  }
  if (result)
    *(_DWORD *)result += 2;
  v6 = *(WTF::StringImpl **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = result;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, a2);
      result = v8;
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::XMLNSNames::init(WebCore::XMLNSNames *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if ((WebCore::XMLNSNames::init(void)::initialized & 1) == 0)
  {
    WebCore::XMLNSNames::init(void)::initialized = 1;
    WTF::AtomStringImpl::add();
    v1 = v6;
    v5 = v6;
    if (v6)
      *(_DWORD *)v6 += 2;
    WebCore::XMLNSNames::xmlnsNamespaceURI = (uint64_t)v1;
    WTF::AtomStringImpl::add();
    WebCore::QualifiedName::QualifiedName(&WebCore::XMLNSNames::xmlnsAttr, MEMORY[0x1E0CBF2F8], &v6, &v5, 7, 274);
    v3 = v6;
    v6 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = v5;
    v5 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
}

void WebCore::XLinkNames::init(WebCore::XLinkNames *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  if ((WebCore::XLinkNames::init(void)::initialized & 1) == 0)
  {
    WebCore::XLinkNames::init(void)::initialized = 1;
    WTF::AtomStringImpl::add();
    v1 = (uint64_t)v19;
    v18 = v19;
    if (v19)
      *(_DWORD *)v19 += 2;
    WebCore::XLinkNames::xlinkNamespaceURI = v1;
    WTF::AtomStringImpl::add();
    v17 = v19;
    WebCore::QualifiedName::QualifiedName(&WebCore::XLinkNames::actuateAttr, MEMORY[0x1E0CBF2F8], &v17, &v18, 5, 271);
    v3 = v17;
    v17 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::AtomStringImpl::add();
    v17 = v19;
    WebCore::QualifiedName::QualifiedName(&WebCore::XLinkNames::arcroleAttr, MEMORY[0x1E0CBF2F8], &v17, &v18, 5, 272);
    v5 = v17;
    v17 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    WTF::AtomStringImpl::add();
    v17 = v19;
    WebCore::QualifiedName::QualifiedName(&WebCore::XLinkNames::hrefAttr, MEMORY[0x1E0CBF2F8], &v17, &v18, 5, 943);
    v7 = v17;
    v17 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    WTF::AtomStringImpl::add();
    v17 = v19;
    WebCore::QualifiedName::QualifiedName(&WebCore::XLinkNames::roleAttr, MEMORY[0x1E0CBF2F8], &v17, &v18, 5, 944);
    v9 = v17;
    v17 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    WTF::AtomStringImpl::add();
    v17 = v19;
    WebCore::QualifiedName::QualifiedName(&WebCore::XLinkNames::showAttr, MEMORY[0x1E0CBF2F8], &v17, &v18, 5, 273);
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    WTF::AtomStringImpl::add();
    v17 = v19;
    WebCore::QualifiedName::QualifiedName(&WebCore::XLinkNames::titleAttr, MEMORY[0x1E0CBF2F8], &v17, &v18, 5, 945);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    WTF::AtomStringImpl::add();
    v17 = v19;
    WebCore::QualifiedName::QualifiedName(&WebCore::XLinkNames::typeAttr, MEMORY[0x1E0CBF2F8], &v17, &v18, 5, 946);
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
}

WebCore::NavigationScheduler *WebCore::NavigationScheduler::NavigationScheduler(WebCore::NavigationScheduler *this, WebCore::Frame *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  *(_DWORD *)this = 0;
  if (!*((_QWORD *)a2 + 2))
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = a2;
    v13 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v12;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v11);
      }
    }
  }
  v4 = (unsigned int *)*((_QWORD *)a2 + 2);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *((_QWORD *)this + 7) = v7;
  *((_QWORD *)this + 2) = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E33F6C20;
  v9[1] = WebCore::NavigationScheduler::timerFired;
  v9[2] = 0;
  v9[3] = this;
  *((_QWORD *)this + 8) = v9;
  *((_QWORD *)this + 9) = 0;
  return this;
}

WebCore::EventHandler *WebCore::EventHandler::EventHandler(WebCore::EventHandler *this, WebCore::LocalFrame *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  unint64_t v17;
  int *v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char v29[4];
  int v30;
  unint64_t v31;
  char v32;

  *(_DWORD *)this = 0;
  if (!*((_QWORD *)a2 + 2))
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = a2;
    v26 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v25;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v24);
      }
    }
  }
  v4 = (unsigned int *)*((_QWORD *)a2 + 2);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *((_QWORD *)this + 8) = v7;
  *((_QWORD *)this + 3) = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E33FE9C0;
  v9[1] = WebCore::EventHandler::hoverTimerFired;
  v9[2] = 0;
  v9[3] = this;
  *((_QWORD *)this + 9) = v9;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E33FE9C0;
  v10[1] = WebCore::EventHandler::textRecognitionHoverTimerFired;
  v10[2] = 0;
  v10[3] = this;
  *((_QWORD *)this + 10) = off_1E3407128;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  v11 = *(unsigned int **)(StatusReg + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)this + 10) = off_1E33DC988;
  *((_QWORD *)this + 15) = v11;
  *((_QWORD *)this + 16) = v10;
  *((_QWORD *)this + 17) = 0x3FD0000000000000;
  v13 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v13 = off_1E3407128;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  v14 = *(unsigned int **)(StatusReg + 736);
  if (!v14)
    v14 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)v13 = off_1E31F7378;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v16 = off_1E33FDFA0;
  v16[1] = WebCore::AutoscrollController::autoscrollTimerFired;
  v16[2] = 0;
  v16[3] = v13;
  *(_QWORD *)(v13 + 48) = v16;
  *(_QWORD *)(v13 + 56) = 0;
  *(_BYTE *)(v13 + 64) = 0;
  *(_DWORD *)(v13 + 68) = 0;
  *(_DWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  *((_DWORD *)this + 44) = 0;
  *((_QWORD *)this + 18) = v13;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 168) = 0;
  v29[0] = 2;
  v31 = *(_QWORD *)((char *)this + 172);
  v17 = HIDWORD(v31);
  *((_BYTE *)this + 172) = 2;
  *((_DWORD *)this + 44) = 1;
  v30 = -1;
  if (v17 != 0xFFFFFFFF)
    ((void (*)(char *, char *, unint64_t *))off_1E33FE7D0[v17])(&v32, v29, &v31);
  *(_QWORD *)((char *)this + 180) = 0;
  *((_BYTE *)this + 188) = 1;
  *((_BYTE *)this + 308) = 0;
  *(_DWORD *)((char *)this + 189) = 0;
  *(_WORD *)((char *)this + 193) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 225) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_QWORD *)((char *)this + 293) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_WORD *)this + 172) = 5;
  *((_BYTE *)this + 352) = 0;
  *((_BYTE *)this + 368) = 0;
  *((_WORD *)this + 192) = 254;
  *((_QWORD *)this + 53) = 0;
  *(_OWORD *)((char *)this + 404) = 0u;
  *(_OWORD *)((char *)this + 388) = 0u;
  *((_DWORD *)this + 108) = 1;
  {
    v18 = (int *)WebCore::mousePointerEventType(void)::mouseType;
    if (!WebCore::mousePointerEventType(void)::mouseType)
      goto LABEL_19;
    v19 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
  }
  else
  {
    v18 = &WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    v19 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
  }
  *v18 = v19 + 2;
LABEL_19:
  *((_QWORD *)this + 55) = v18;
  *((_QWORD *)this + 56) = 0;
  *((_WORD *)this + 228) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_WORD *)this + 236) = 5;
  *((_BYTE *)this + 480) = 0;
  *((_BYTE *)this + 496) = 0;
  *((_WORD *)this + 256) = 254;
  *((_QWORD *)this + 69) = 0;
  *(_OWORD *)((char *)this + 516) = 0uLL;
  *(_OWORD *)((char *)this + 532) = 0uLL;
  *((_DWORD *)this + 140) = 1;
  if (v18)
    *v18 += 2;
  *((_QWORD *)this + 71) = v18;
  *((_QWORD *)this + 72) = 0;
  *((_WORD *)this + 292) = 0;
  *((_QWORD *)this + 74) = off_1E3407128;
  *(_OWORD *)((char *)this + 600) = 0uLL;
  *(_OWORD *)((char *)this + 616) = 0uLL;
  v20 = *(unsigned int **)(StatusReg + 736);
  if (!v20)
    v20 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  *((_QWORD *)this + 79) = v20;
  *((_QWORD *)this + 74) = off_1E31F7378;
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v22 = off_1E33FE9C0;
  v22[1] = WebCore::EventHandler::autoHideCursorTimerFired;
  v22[2] = 0;
  v22[3] = this;
  *((_QWORD *)this + 80) = v22;
  *((_BYTE *)this + 688) = 0;
  *((_BYTE *)this + 812) = 0;
  *((_BYTE *)this + 656) = 0;
  *((_QWORD *)this + 81) = 0;
  *(_QWORD *)((char *)this + 701) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_DWORD *)this + 186) = 0;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 779) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_BYTE *)this + 804) = 0;
  *(_QWORD *)((char *)this + 796) = 0;
  return this;
}

uint64_t WebCore::FrameLoader::FrameLoader(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t StatusReg;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  void *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;

  *(_DWORD *)a1 = 0;
  if (!*(_QWORD *)(a2 + 16))
  {
    v23 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v23 = 1;
    *(_QWORD *)(v23 + 8) = a2;
    v24 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v23;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v22);
      }
    }
  }
  v6 = *(unsigned int **)(a2 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(a1 + 8) = v6;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v8;
  v9 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v9 = 0;
  if (!*(_QWORD *)(a2 + 16))
  {
    v28 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = a2;
    v29 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v28;
    if (v29)
    {
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v27);
      }
    }
  }
  v10 = *(unsigned int **)(a2 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 8) = v10;
  *(_QWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 23) = 0;
  WTF::URL::invalidate((WTF::URL *)(v9 + 40));
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 112) = 0;
  *(_BYTE *)(v9 + 120) = 0;
  *(_QWORD *)(a1 + 24) = v9;
  if (!*(_QWORD *)(a2 + 16))
  {
    v33 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = a2;
    v34 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v33;
    if (v34)
    {
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v32);
      }
    }
  }
  v12 = *(unsigned int **)(a2 + 16);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  v14 = WTF::fastMalloc((WTF *)0x10);
  *(_BYTE *)v14 = 0;
  if (!*(_QWORD *)(a2 + 16))
  {
    v38 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v38 = 1;
    *(_QWORD *)(v38 + 8) = a2;
    v39 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v38;
    if (v39)
    {
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        atomic_store(1u, v39);
        WTF::fastFree((WTF *)v39, v37);
      }
    }
  }
  v15 = *(unsigned int **)(a2 + 16);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(v14 + 8) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 112));
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 156) = 1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 168));
  *(_QWORD *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 208) = 256;
  *(_BYTE *)(a1 + 210) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 224));
  *(_QWORD *)(a1 + 264) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  v18 = *(unsigned int **)(StatusReg + 736);
  if (!v18)
    v18 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *(_QWORD *)(a1 + 304) = v18;
  *(_QWORD *)(a1 + 264) = off_1E31F7378;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v20 = off_1E33F5E70;
  v20[1] = WebCore::FrameLoader::checkTimerFired;
  v20[2] = 0;
  v20[3] = a1;
  *(_QWORD *)(a1 + 312) = v20;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 343) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 352));
  *(_QWORD *)(a1 + 397) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  return a1;
}

uint64_t WebCore::Page::addRootFrame(WebCore::Page *this, WebCore::LocalFrame *a2)
{
  uint64_t *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;

  v4 = (uint64_t *)((char *)this + 144);
  WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>::WeakRef<void>((unsigned int **)&v11, (uint64_t)a2);
  WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::add((uint64_t)&v10, v4, (unsigned int **)&v11);
  v6 = (unsigned int *)v11;
  v11 = 0;
  if (v6)
  {
    do
    {
      v8 = __ldaxr(v6);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v6));
    if (!v9)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  return (*(uint64_t (**)(_QWORD, WebCore::LocalFrame *))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 224))(*(_QWORD *)(*((_QWORD *)this + 6) + 16), a2);
}

WTF **WebCore::ThreadGlobalData::initializeQualifiedNameCache(WTF **this)
{
  WTF *v2;
  void *v3;
  WTF *v5;

  v2 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v2 = 0;
  v5 = v2;
  std::unique_ptr<WebCore::QualifiedNameCache>::operator=[abi:sn180100](this + 7, &v5);
  return std::unique_ptr<WebCore::QualifiedNameCache>::~unique_ptr[abi:sn180100](&v5, v3);
}

_QWORD *WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WebCore::QualifiedNameCache::QualifiedNameHashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = *(_DWORD *)(v14 + 4);
        if (!v17)
        {
          v22 = *(_QWORD *)(v14 + 16);
          v23 = *(_QWORD *)(v14 + 24);
          v24 = *(_QWORD *)(v14 + 32);
          v25 = (v22 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v22 - 1640531527) << 16) ^ ((unsigned __int16)v22 - 1640531527);
          LODWORD(v22) = (v22 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v22) + (v25 >> 11)) << 16) ^ (v25
                                                                                             + WORD2(v22)
                                                                                             + (v25 >> 11));
          LODWORD(v22) = (v23 >> 5) & 0x7FFF800 ^ (((_DWORD)v22
                                                                + (unsigned __int16)v23
                                                                + (v22 >> 11)) << 16) ^ (v22 + (unsigned __int16)v23 + (v22 >> 11));
          LODWORD(v22) = (v23 >> 37) & 0x7FFF800 ^ (((_DWORD)v22 + WORD2(v23) + (v22 >> 11)) << 16) ^ (v22 + WORD2(v23) + (v22 >> 11));
          LODWORD(v22) = (v24 >> 5) & 0x7FFF800 ^ (((_DWORD)v22
                                                                + (unsigned __int16)v24
                                                                + (v22 >> 11)) << 16) ^ (v22 + (unsigned __int16)v24 + (v22 >> 11));
          LODWORD(v22) = v22 + WORD2(v24) + (v22 >> 11);
          LODWORD(v23) = (v24 >> 37) & 0x7FFF800 ^ ((_DWORD)v22 << 16);
          LODWORD(v22) = ((v23 ^ v22) + ((v23 ^ v22) >> 11)) ^ (8
                                                                                          * ((v23 ^ v22)
                                                                                           + ((v23 ^ v22) >> 11)));
          LODWORD(v22) = (v22 + (v22 >> 5)) ^ (4 * (v22 + (v22 >> 5)));
          v17 = (v22 + (v22 >> 15)) ^ (((_DWORD)v22 + (v22 >> 15)) << 10);
          if (!v17)
            v17 = 0x800000;
          *(_DWORD *)(v14 + 4) = v17;
        }
        v18 = 0;
        do
        {
          v19 = v17 & v16;
          v10 = *(void **)(v15 + 8 * v19);
          v17 = ++v18 + v19;
        }
        while (v10);
        v20 = (_QWORD *)(v15 + 8 * v19);
        *v20 = v14;
        if (v13 == a3)
          v12 = v20;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WebCore::QualifiedNameCache::QualifiedNameHashTraits>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 2048;
  return WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WebCore::QualifiedNameHash,WebCore::QualifiedNameCache::QualifiedNameHashTraits,WebCore::QualifiedNameCache::QualifiedNameHashTraits>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::add(uint64_t a1, uint64_t *a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int **v9;
  int i;
  unsigned int v11;
  unsigned int **v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*((_QWORD *)*a3 + 1));
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = result & v7;
    v12 = (unsigned int **)(v6 + 8 * (result & v7));
    v13 = *v12;
    if (!*v12)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*a2 - 16);
        v12 = v9;
      }
      result = (uint64_t)WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>::operator=(v12, a3);
      v14 = *a2;
      if (*a2)
        v15 = *(_DWORD *)(v14 - 12) + 1;
      else
        v15 = 1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *a2;
      if (*a2)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      v18 = (*(_DWORD *)(v16 - 16) + v17);
      v19 = *(unsigned int *)(v16 - 4);
      if (v19 > 0x400)
      {
        if (v19 > 2 * v18)
          goto LABEL_14;
      }
      else if (3 * v19 > 4 * v18)
      {
LABEL_14:
        v20 = v16 + 8 * v19;
        v21 = 1;
        goto LABEL_15;
      }
      result = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::expand(a2, v12);
      v12 = (unsigned int **)result;
      v16 = *a2;
      if (*a2)
        v19 = *(unsigned int *)(v16 - 4);
      else
        v19 = 0;
      goto LABEL_14;
    }
    if (v13 == (unsigned int *)-1)
    {
      v9 = (unsigned int **)(v6 + 8 * v11);
      goto LABEL_23;
    }
    if (*((_QWORD *)v13 + 1) == *((_QWORD *)*a3 + 1))
      break;
LABEL_23:
    result = i + v11;
  }
  v22 = *a2;
  if (*a2)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  v21 = 0;
  v20 = v22 + 8 * v23;
LABEL_15:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  unsigned int **v14;
  _QWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    do
    {
      v14 = (unsigned int **)(v6 + 8 * v13);
      if (*v14 != (unsigned int *)-1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::reinsert(*a1, (uint64_t *)(v6 + 8 * v13));
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              v19 = v15;
              WTF::fastFree((WTF *)v16, v10);
              v15 = v19;
            }
          }
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          *v14 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_18;
  }
  v11 = 0;
  result = 0;
  if (v6)
  {
LABEL_18:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::rehash(a1, v5, a2);
}

unsigned int **WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>::operator=(unsigned int **result, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int **v6;

  v2 = *a2;
  *a2 = 0;
  v3 = *result;
  *result = v2;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v6 = result;
      WTF::fastFree((WTF *)v3, a2);
      return v6;
    }
  }
  return result;
}

unsigned int **WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>::WeakRef<void>(unsigned int **a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (!*(_QWORD *)(a2 + 16))
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v9 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v8;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v7);
      }
    }
  }
  v4 = *(unsigned int **)(a2 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *a1 = v4;
  return a1;
}

void WebCore::TelephoneNumberDetector::prewarm(WebCore::TelephoneNumberDetector *this)
{
  NSObject *global_queue;

  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_47);
}

BOOL WebCore::Settings::needsSiteSpecificQuirks(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 243))
    return *((_BYTE *)this + 242) != 0;
  else
    return (*((_QWORD *)this + 86) >> 19) & 1;
}

void WebCore::CSSParserImpl::parseStyleSheet(WebCore::CSSParserImpl *this, const WTF::String *a2, const WebCore::CSSParserContext *a3, WebCore::StyleSheetContents *a4)
{
  __int128 *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned __int8 v9;
  char v10;
  BOOL v11;
  __int128 *v12;
  int v13;
  char v14;
  unsigned int v15;
  __int128 *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t (*v20)();
  BOOL v21;
  char v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int *v27;
  int v28;
  void *v29;
  _BYTE v30[80];
  uint64_t v31;
  int *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;

  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)v30, (uint64_t)a2);
  v6 = *(__int128 **)(v31 + 48);
  v7 = *(_DWORD *)(v31 + 60);
  v8 = (__int128 *)((char *)v6 + 24 * v7);
  v34 = v6;
  v35 = v8;
  if (v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v6;
      if (v6 >= v8)
      {
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      v13 = *(_DWORD *)v12 & 0x3F;
      if ((v13 - 17) < 2)
      {
        if (v6 == v8)
        {
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        else
        {
          v34 = (__int128 *)((char *)v6 + 24);
        }
        goto LABEL_47;
      }
      if (v13 == 2)
      {
        WebCore::CSSParserImpl::consumeAtRule((WebCore::CSSParserTokenRange *)v30, &v34, v9, &v33);
      }
      else
      {
        if (v13 == 16)
        {
          v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          while (1)
          {
            if (v6 < v8 || (v14 & 1) != 0)
            {
              v16 = v6 >= v8 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v6;
              v17 = *(_DWORD *)v16;
            }
            else
            {
              v17 = v15 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
              v14 = 1;
              v15 = v17;
            }
            if ((v17 & 0x3F) != 0x10)
              break;
            v6 = (__int128 *)((char *)v6 + 24);
            v34 = v6;
          }
          goto LABEL_47;
        }
        WebCore::CSSParserImpl::consumeQualifiedRule((uint64_t)&v33, (uint64_t)v30);
      }
      v19 = v33;
      if (v33)
        v20 = WTF::RefPtr<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>::unspecifiedBoolTypeInstance;
      else
        v20 = 0;
      v21 = v20 != 0;
      if ((v10 & 1) == 0)
        v11 = v21;
      if (v33)
        break;
LABEL_46:
      v10 = 1;
LABEL_47:
      v6 = v34;
      v8 = v35;
      if (v34 == v35)
        goto LABEL_54;
    }
    v22 = *(_BYTE *)(v33 + 4);
    v23 = v22 & 0x1F;
    if (v23 == 2 || v9 <= 1u && (v22 & 0x1E) == 0x10 && v23 == 17)
    {
      v9 = 1;
    }
    else if (v23 == 3)
    {
      v9 = 2;
    }
    else if (v23 == 10)
    {
      v9 = 3;
    }
    else
    {
      v9 = 4;
    }
    v24 = *(_DWORD *)v33 + 1;
    *(_DWORD *)v33 = v24;
    v32 = (int *)v19;
    v25 = *(_BYTE *)(v19 + 4) & 0x1F;
    if (v25 != 2 && (v25 == 3 ? (v26 = (*(_WORD *)((_BYTE *)a2 + 51) & 0x10) == 0) : (v26 = 1), v26))
    {
      WebCore::StyleSheetContents::parserAppendRule((void **)a3, &v32);
      v27 = v32;
      v32 = 0;
      if (!v27)
      {
LABEL_44:
        if (*(_DWORD *)v19 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v19, v18);
        else
          --*(_DWORD *)v19;
        goto LABEL_46;
      }
      v24 = *v27;
    }
    else
    {
      v32 = 0;
      v27 = (int *)v19;
    }
    v28 = v24 - 1;
    if (v28)
      *v27 = v28;
    else
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v27, v18);
    goto LABEL_44;
  }
  v11 = 0;
LABEL_54:
  *((_BYTE *)a3 + 122) = v11;
  WTF::Vector<WTF::Ref<WebCore::StyleRuleImport,WTF::RawPtrTraits<WebCore::StyleRuleImport>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleImport>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a3 + 14, *((unsigned int *)a3 + 17));
  WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a3 + 22, *((unsigned int *)a3 + 25));
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)v30, v29);
}

WTF::StringImpl *WebCore::CSSCounterStyleDescriptors::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v6;
  int v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  void *v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  WTF::StringImpl *v19;
  void *v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *result;
  WTF::StringImpl *v34;
  _DWORD *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  WTF::StringImpl *v43;
  int v44;
  _DWORD *v45;
  uint64_t *v46;
  uint64_t *v47;

  WebCore::StyleProperties::getPropertyCSSValue(a2, 246, &v45);
  v6 = v45;
  v7 = WebCore::toCounterStyleSystemEnum((uint64_t)v45);
  WebCore::StyleProperties::getPropertyCSSValue(a2, 246, &v47);
  v8 = v47;
  if (v47)
  {
    v46 = v47;
    WebCore::extractSystemDataFromCSSValue((uint64_t *)&v46, v7, (uint64_t)&v43);
    if (*(_DWORD *)v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v9);
    else
      *(_DWORD *)v8 -= 2;
  }
  else
  {
    LODWORD(v46) = 1;
    std::pair<WTF::AtomString,int>::pair[abi:sn180100]<WTF::ASCIILiteral,int,0>((uint64_t)&v43, (uint64_t)"decimal", 8uLL, &v46);
  }
  v10 = *a1;
  if (*a1)
    *v10 += 2;
  *(_QWORD *)a3 = v10;
  *(_BYTE *)(a3 + 8) = v7;
  WebCore::StyleProperties::getPropertyCSSValue(a2, 175, &v46);
  v11 = v46;
  if (v46)
  {
    v47 = v46;
    WebCore::negativeSymbolsFromCSSValue((uint64_t *)&v47, a3 + 16);
    if (*(_DWORD *)v11 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v38);
    else
      *(_DWORD *)v11 -= 2;
  }
  else
  {
    *(_BYTE *)(a3 + 16) = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(a3 + 24) = v47;
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 204, &v47);
  v12 = v47;
  if (v47)
  {
    v46 = v47;
    WebCore::symbolFromCSSValue(&v46, a3 + 48);
    if (*(_DWORD *)v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v41);
    else
      *(_DWORD *)v12 -= 2;
  }
  else
  {
    *(_BYTE *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 243, &v46);
  v14 = v46;
  if (v46)
  {
    if (((*((unsigned __int16 *)v46 + 2) | (*((unsigned __int8 *)v46 + 6) << 16)) & 0x3F800) != 0)
    {
      *(_BYTE *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      goto LABEL_74;
    }
    v35 = 0;
    *(_BYTE *)(a3 + 64) = (*((_WORD *)v46 + 2) & 0x7F) == 63;
    v36 = (*((_WORD *)v14 + 2) & 0x7Fu) - 20;
    if (v36 <= 0x3C)
    {
      if (((1 << ((*((_WORD *)v14 + 2) & 0x7Fu) - 20)) & 0x20008000000000BLL) == 0)
      {
        if (v36 == 60)
        {
          v42 = WebCore::nameString(*((unsigned __int16 *)v14 + 4));
        }
        else
        {
          if (v36 != 59)
            goto LABEL_95;
          v42 = WebCore::nameString(*((unsigned __int16 *)v14 + 4));
        }
        v35 = (_DWORD *)*v42;
        if (!*v42)
          goto LABEL_95;
        goto LABEL_94;
      }
      v35 = (_DWORD *)v14[1];
      if (v35)
LABEL_94:
        *v35 += 2;
    }
LABEL_95:
    *(_QWORD *)(a3 + 72) = v35;
LABEL_74:
    if (*(_DWORD *)v14 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v13);
    else
      *(_DWORD *)v14 -= 2;
    goto LABEL_12;
  }
  *(_BYTE *)(a3 + 64) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a3 + 72) = v47;
LABEL_12:
  WebCore::StyleProperties::getPropertyCSSValue(a2, 208, &v47);
  v16 = v47;
  if (v47)
  {
    v46 = v47;
    WebCore::rangeFromCSSValue((uint64_t *)&v46, v15, a3 + 80);
    if (*(_DWORD *)v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v34);
    else
      *(_DWORD *)v16 -= 2;
  }
  else
  {
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 195, &v47);
  if (v47)
  {
    v46 = v47;
    WebCore::padFromCSSValue((uint64_t *)&v46, a3 + 96);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, v40);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  else
  {
    *(_DWORD *)(a3 + 96) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 112) = 0;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 112, &v46);
  if (v46)
  {
    v47 = v46;
    WebCore::fallbackNameFromCSSValue(&v47, (WTF::StringImpl *)(a3 + 120));
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v39);
      else
        *(_DWORD *)v47 -= 2;
    }
  }
  else
  {
    WTF::AtomStringImpl::add();
    *(_QWORD *)(a3 + 120) = v47;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 244, &v47);
  v18 = v47;
  if (v47)
  {
    v46 = v47;
    WebCore::symbolsFromCSSValue((WTF::StringImpl *)&v46, v17, (unsigned int *)(a3 + 128));
    if (*(_DWORD *)v18 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  else
  {
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 40, &v47);
  v21 = v47;
  if (v47)
  {
    v46 = v47;
    WebCore::additiveSymbolsFromCSSValue((uint64_t *)&v46, v20, (unsigned int *)(a3 + 144));
    if (*(_DWORD *)v21 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v37);
    else
      *(_DWORD *)v21 -= 2;
  }
  else
  {
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 152) = 0;
  }
  *(_BYTE *)(a3 + 160) = 0;
  v22 = v43;
  if (v43)
    *(_DWORD *)v43 += 2;
  *(_QWORD *)(a3 + 168) = v22;
  *(_DWORD *)(a3 + 176) = v44;
  *(_WORD *)(a3 + 180) = 0;
  *(_BYTE *)(a3 + 182) = 0;
  WebCore::StyleProperties::getPropertyCSSValue(a2, 246, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v23);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 1u;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 175, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v24);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 2u;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 204, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v25);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 4u;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 243, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v26);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 8u;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 208, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v27);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 0x10u;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 195, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v28);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 0x20u;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 112, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v29);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 0x40u;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 40, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v30);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 0x100u;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 244, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v31);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 0x80u;
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 230, &v47);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v32);
    else
      *(_DWORD *)v47 -= 2;
    *(_WORD *)(a3 + 180) |= 0x200u;
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
    else
      *(_DWORD *)result -= 2;
  }
  if (v6)
  {
    if (*v6 == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v32);
    else
      *v6 -= 2;
  }
  return result;
}

uint64_t WebCore::StyleProperties::getPropertyCSSValue@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  _DWORD *v7;
  unsigned __int16 *v9;
  void *v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  _DWORD *v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v3 = *(unsigned int *)(result + 4);
  if ((v3 & 8) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(result + 28);
    while (1)
    {
      LODWORD(v4) = v4 - 1;
      if ((int)v4 < 0)
        goto LABEL_16;
      if ((*(_WORD *)(*(_QWORD *)(result + 16) + 16 * v4) & 0x3FF) == a2)
        goto LABEL_5;
    }
  }
  v4 = v3 >> 4;
  do
  {
    if (v4-- < 1)
      goto LABEL_16;
  }
  while ((*(_WORD *)(result + 8 + 2 * v4) & 0x3FF) != a2);
  if ((_DWORD)v4 == -1)
    goto LABEL_16;
LABEL_5:
  if ((v3 & 8) != 0)
  {
    if (*(_DWORD *)(result + 28) <= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D8B68);
    }
    v5 = *(_QWORD *)(result + 16) + 16 * v4;
    v7 = *(_DWORD **)(v5 + 8);
  }
  else
  {
    v5 = result + 8 + 2 * v4;
    v6 = (unsigned int *)(result + 8 + ((v3 >> 3) & 0x1FFFFFFE) + 5 * v4);
    v7 = (_DWORD *)(*v6 | ((unint64_t)*((unsigned __int8 *)v6 + 4) << 32));
  }
  if ((*(_WORD *)v5 & 0x400) == 0)
    goto LABEL_8;
  v14 = a3;
  v15 = v7;
  v9 = (unsigned __int16 *)v5;
  WebCore::matchingShorthandsForLonghand(*(_WORD *)v5 & 0x3FF, (uint64_t)&v16);
  v11 = ((unint64_t)*v9 >> 11) & 3;
  if (v18 <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D8B84);
  }
  result = (uint64_t)v16;
  v12 = *((unsigned __int16 *)v16 + 8 * v11 + 6);
  if (&v19 != (uint64_t *)v16)
  {
    v16 = 0;
    v17 = 0;
    result = WTF::fastFree((WTF *)result, v10);
  }
  if (v12 != 492)
  {
    a3 = v14;
    v7 = v15;
LABEL_8:
    if (!v7)
      goto LABEL_17;
    goto LABEL_9;
  }
  if (!v15)
  {
    v7 = 0;
    a3 = v14;
    goto LABEL_17;
  }
  v7 = v15;
  a3 = v14;
  if (((*((unsigned __int16 *)v15 + 2) | (*((unsigned __int8 *)v15 + 6) << 16)) & 0x3F800) != 0
    || ((v15[1] & 0x7F) == 0x50 ? (v13 = *((unsigned __int16 *)v15 + 4) - 16 >= 0x1A) : (v13 = 1), v13))
  {
LABEL_9:
    *v7 += 2;
    *a3 = v7;
    return result;
  }
LABEL_16:
  v7 = 0;
LABEL_17:
  *a3 = v7;
  return result;
}

uint64_t WebCore::extractSystemDataFromCSSValue@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  BOOL v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  result = WTF::AtomStringImpl::add();
  v7 = v16;
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a3 + 8) = 1;
  v8 = *a1;
  if (*a1 && ((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) == 0x1B800)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (a2 == 13)
    {
      if (v9 && ((*(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16)) & 0x3F87F) == 0x3F)
      {
        WebCore::CSSValue::customIdent((uint64_t *)v9, &v14);
        v11 = v14;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = v16;
      }
      v14 = 0;
      if (v11)
      {
        v15 = v11;
        if ((*((_BYTE *)v11 + 16) & 0x10) == 0)
        {
          WTF::AtomStringImpl::addSlowCase();
          v12 = v15;
          v11 = v16;
          v15 = 0;
          v16 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
      }
      *(_QWORD *)a3 = v11;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v10);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = (uint64_t)v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else if (a2 == 5)
    {
      if (v9)
        v13 = ((*(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16)) & 0x3F800) == 0;
      else
        v13 = 0;
      if (v13 && WebCore::CSSPrimitiveValue::primitiveType((WebCore::CSSPrimitiveValue *)v9) == 2)
        result = WebCore::CSSValue::integer((WebCore::CSSValue *)v9);
      else
        result = 1;
      *(_DWORD *)(a3 + 8) = result;
    }
  }
  return result;
}

void WebCore::CSSCounterStyleDescriptors::~CSSCounterStyleDescriptors(WebCore::CSSCounterStyleDescriptors *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 39);
  if ((_DWORD)v4)
  {
    v16 = 24 * v4;
    v17 = (WTF::StringImpl **)(*((_QWORD *)this + 18) + 8);
    do
    {
      v18 = *v17;
      *v17 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, a2);
        else
          *(_DWORD *)v18 -= 2;
      }
      v17 += 3;
      v16 -= 24;
    }
    while (v16);
  }
  v5 = (WTF *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((unsigned int *)this + 35);
  if ((_DWORD)v6)
  {
    v19 = 16 * v6;
    v20 = (WTF::StringImpl **)(*((_QWORD *)this + 16) + 8);
    do
    {
      v21 = *v20;
      *v20 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      v20 += 2;
      v19 -= 16;
    }
    while (v19);
  }
  v7 = (WTF *)*((_QWORD *)this + 16);
  if (v7)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF *)*((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
}

uint64_t WebCore::toCounterStyleSystemEnum(uint64_t a1)
{
  int v1;
  uint64_t result;
  int v3;

  if (!a1)
    return 3;
  v1 = *(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16);
  if ((v1 & 0x3F800) != 0)
  {
    if ((v1 & 0x3F800) != 0x1B800)
      return 3;
    a1 = *(_QWORD *)(a1 + 8);
    if (!a1)
      return 3;
    v1 = *(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16);
  }
  if ((v1 & 0x3F87F) != 0x50)
    return 3;
  v3 = *(unsigned __int16 *)(a1 + 8);
  result = 0;
  switch(v3)
  {
    case 977:
      return result;
    case 978:
      return 1;
    case 979:
      return 3;
    case 980:
      return 4;
    case 981:
      return 6;
    case 982:
      return 7;
    case 983:
      return 8;
    case 984:
      return 9;
    case 985:
      return 10;
    case 986:
      return 11;
    case 987:
      return 12;
    case 988:
      return 13;
    default:
      if (v3 == 728)
        return 2;
      if (v3 != 458)
        return 3;
      result = 5;
      break;
  }
  return result;
}

double WebCore::StyleRuleCounterStyle::StyleRuleCounterStyle(uint64_t a1, _DWORD **a2, uint64_t *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a1 + 4) & 0xC0 | 0xB;
  v3 = *a2;
  if (*a2)
    *v3 += 2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a3 + 8);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a3 + 16);
  v5 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a3 + 32);
  v6 = a3[5];
  a3[5] = 0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a3 + 48);
  v7 = a3[7];
  a3[7] = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a3 + 64);
  v8 = a3[9];
  a3[9] = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v8;
  v9 = a3[10];
  a3[10] = 0;
  *(_QWORD *)(a1 + 96) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 22);
  *((_DWORD *)a3 + 22) = 0;
  *(_DWORD *)(a1 + 104) = v9;
  result = *(double *)((char *)a3 + 92);
  *((_DWORD *)a3 + 23) = 0;
  *(double *)(a1 + 108) = result;
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a3 + 104);
  v11 = a3[14];
  a3[14] = 0;
  *(_QWORD *)(a1 + 128) = v11;
  v12 = a3[15];
  a3[15] = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = v12;
  v13 = a3[16];
  a3[16] = 0;
  *(_QWORD *)(a1 + 144) = v13;
  LODWORD(v13) = *((_DWORD *)a3 + 34);
  *((_DWORD *)a3 + 34) = 0;
  *(_DWORD *)(a1 + 152) = v13;
  LODWORD(v13) = *((_DWORD *)a3 + 35);
  *((_DWORD *)a3 + 35) = 0;
  *(_DWORD *)(a1 + 156) = v13;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v14 = a3[18];
  a3[18] = 0;
  *(_QWORD *)(a1 + 160) = v14;
  LODWORD(v14) = *((_DWORD *)a3 + 38);
  *((_DWORD *)a3 + 38) = 0;
  *(_DWORD *)(a1 + 168) = v14;
  LODWORD(v14) = *((_DWORD *)a3 + 39);
  *((_DWORD *)a3 + 39) = 0;
  *(_DWORD *)(a1 + 172) = v14;
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a3 + 160);
  v15 = a3[21];
  a3[21] = 0;
  *(_QWORD *)(a1 + 184) = v15;
  LODWORD(v15) = *((_DWORD *)a3 + 44);
  *(_DWORD *)(a1 + 195) = *(_DWORD *)((char *)a3 + 179);
  *(_DWORD *)(a1 + 192) = v15;
  return result;
}

uint64_t *WebCore::CSSValue::customIdent@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;

  if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940D9260);
  }
  v3 = 0;
  v4 = (*((unsigned __int16 *)this + 2) & 0x7Fu) - 20;
  if (v4 <= 0x3C)
  {
    if (((1 << ((*((_WORD *)this + 2) & 0x7Fu) - 20)) & 0x20008000000000BLL) == 0)
    {
      if (v4 == 60)
      {
        this = WebCore::nameString(*((unsigned __int16 *)this + 4));
      }
      else
      {
        if (v4 != 59)
          goto LABEL_6;
        this = WebCore::nameString(*((unsigned __int16 *)this + 4));
      }
      v3 = (_DWORD *)*this;
      if (!*this)
        goto LABEL_6;
      goto LABEL_5;
    }
    v3 = (_DWORD *)this[1];
    if (v3)
LABEL_5:
      *v3 += 2;
  }
LABEL_6:
  *a2 = v3;
  return this;
}

void WebCore::CSSTokenizer::~CSSTokenizer(WebCore::CSSTokenizer *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 211);
  if ((_DWORD)v4)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 104);
    v10 = 8 * v4;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v5 = (WTF *)*((_QWORD *)this + 104);
  if (v5)
  {
    *((_QWORD *)this + 104) = 0;
    *((_DWORD *)this + 210) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 6);
  if ((WebCore::CSSTokenizer *)((char *)this + 64) != v6 && v6 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v6, a2);
  }
  v8 = *(WTF **)this;
  if ((WebCore::CSSTokenizer *)((char *)this + 16) != *(WebCore::CSSTokenizer **)this)
  {
    if (v8)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v8, a2);
    }
  }
}

uint64_t WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSParserImpl::CSSParserImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const WTF::String *v3;
  const WTF::String *v4;
  _DWORD *v5;
  _DWORD *v6;
  unsigned int **v7;
  unsigned int **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  WTF *v20;
  WebCore::CSSTokenizer **v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  __int128 v34;
  uint64_t v35;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  v35 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)v2 = v12;
  *(_DWORD *)(v2 + 4) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = v2 + 32;
  *(_QWORD *)(v2 + 24) = 16;
  v34 = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  v13 = WTF::fastMalloc((WTF *)0x1020);
  *(_DWORD *)(v11 + 56) = 1;
  *(_QWORD *)(v11 + 48) = v13;
  v15 = *(_DWORD *)(v11 + 60);
  v16 = (_QWORD *)(v13 + 4128 * v15);
  *v16 = v16 + 2;
  v16[1] = 256;
  v17 = v16;
  v18 = HIDWORD(v34);
  *((_OWORD *)v17 + 257) = 0u;
  *((_DWORD *)v17 + 1031) = v18;
  if ((_DWORD)v18)
  {
    v33 = v15;
    if (v18 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1940D9798);
    }
    v23 = v13;
    v24 = v17 + 514;
    v25 = WTF::fastMalloc((WTF *)(8 * v18));
    *(_DWORD *)(v23 + 4128 * v33 + 4120) = v18;
    *v24 = v25;
    v19 = HIDWORD(v34);
    v26 = (WTF *)v34;
    if (!HIDWORD(v34))
    {
      ++*(_DWORD *)(v11 + 60);
      v20 = v26;
      goto LABEL_4;
    }
    v27 = 0;
    v28 = 8 * HIDWORD(v34);
    do
    {
      v29 = *(_DWORD **)((char *)v26 + v27);
      ++*v29;
      *(_QWORD *)(v25 + v27) = v29;
      v27 += 8;
    }
    while (v28 != v27);
    v20 = v26;
  }
  else
  {
    v19 = HIDWORD(v34);
    v20 = (WTF *)v34;
  }
  ++*(_DWORD *)(v11 + 60);
  if (v19)
  {
    v30 = v20;
    v31 = 8 * v19;
    do
    {
      v32 = *(_DWORD **)v30;
      *(_QWORD *)v30 = 0;
      if (v32)
      {
        if (*v32 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v32, v14);
        else
          --*v32;
      }
      v30 = (WTF *)((char *)v30 + 8);
      v31 -= 8;
    }
    while (v31);
    v20 = (WTF *)v34;
  }
LABEL_4:
  if (v20)
  {
    *(_QWORD *)&v34 = 0;
    DWORD2(v34) = 0;
    WTF::fastFree(v20, v14);
  }
  *(_QWORD *)(v11 + 64) = v10;
  if (v6)
    ++*v6;
  *(_QWORD *)(v11 + 72) = v6;
  v21 = (WebCore::CSSTokenizer **)(v11 + 80);
  if (v4)
  {
    WebCore::CSSTokenizer::tryCreate(v8, v4, v21);
    WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)(v11 + 88), (uint64_t *)v4);
  }
  else
  {
    WebCore::CSSTokenizer::tryCreate(v8, (uint64_t *)v21);
    *(_QWORD *)(v11 + 88) = 0;
  }
  return v11;
}

uint64_t *WebCore::CSSPrimitiveValue::stringValue@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = 0;
  v4 = (*((_WORD *)this + 2) & 0x7Fu) - 20;
  if (v4 <= 0x3C)
  {
    if (((1 << ((*((_WORD *)this + 2) & 0x7Fu) - 20)) & 0x20008000000000BLL) == 0)
    {
      if (v4 == 60)
      {
        this = WebCore::nameString(*((unsigned __int16 *)this + 4));
      }
      else
      {
        if (v4 != 59)
          goto LABEL_5;
        this = WebCore::nameString(*((unsigned __int16 *)this + 4));
      }
      v3 = (_DWORD *)*this;
      if (!*this)
        goto LABEL_5;
      goto LABEL_4;
    }
    v3 = (_DWORD *)this[1];
    if (v3)
LABEL_4:
      *v3 += 2;
  }
LABEL_5:
  *a2 = v3;
  return this;
}

unint64_t WTF::Vector<WebCore::CSSCounterStyleDescriptors::Symbol,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)a1[3] > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WebCore::CSSCounterStyleDescriptors::Symbol,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WebCore::CSSCounterStyleDescriptors::Symbol,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::CSSCounterStyleDescriptors::Symbol,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 16 * v8);
        v12 = v7;
        do
        {
          *(_BYTE *)v10 = *(_BYTE *)v12;
          v13 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v10 + 1) = v13;
          result = (unsigned int *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 = (WTF *)((char *)v12 + 16);
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WebCore::CSSCounterStyleDescriptors::Symbol,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          *(_BYTE *)v7 = *(_BYTE *)v9;
          v10 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v10;
          v7[4] = *((_DWORD *)v9 + 4);
          result = (unsigned int *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 6;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSCounterStyleDescriptors::Symbol::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

unsigned int *WebCore::CSSParserImpl::consumeNestedGroupRules(unsigned int *result, uint64_t a2, __int128 *a3, __int128 *a4)
{
  int v5;
  unsigned int *v6;
  unsigned __int8 v7;
  __int128 *v8;
  int v9;
  char v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  __int128 *v25;
  __int128 *v26;
  unsigned int *v27;
  _QWORD v28[2];
  _DWORD *v29;
  uint64_t v30;

  v28[0] = a3;
  v28[1] = a4;
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v5 + 1;
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  if ((v5 + 1) <= 0x80)
  {
    v6 = result;
    if ((*(_BYTE *)a2 || *(_DWORD *)(a2 + 4)) && (*(_WORD *)(*(_QWORD *)(a2 + 64) + 51) & 0x200) != 0)
    {
      v25 = (__int128 *)a2;
      v26 = (__int128 *)v28;
      v27 = result;
      WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::consumeNestedGroupRules(WebCore::CSSParserTokenRange)::$_0>(a2, (uint64_t)&v25);
      goto LABEL_44;
    }
    v25 = a3;
    v26 = a4;
    if (a4 == a3)
    {
LABEL_44:
      result = WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v6, v6[3]);
      v5 = *(_DWORD *)(a2 + 12) - 1;
      goto LABEL_45;
    }
    v7 = 4;
    while (1)
    {
      v8 = a3;
      if (a3 >= a4)
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      v9 = *(_DWORD *)v8 & 0x3F;
      if (v9 == 2)
        break;
      if (v9 != 16)
      {
        WebCore::CSSParserImpl::consumeQualifiedRule((uint64_t)&v30, a2);
LABEL_20:
        v15 = (_DWORD *)v30;
        if (v30)
        {
          v16 = *(_BYTE *)(v30 + 4);
          v17 = v16 & 0x1F;
          if (v17 == 2 || v7 <= 1u && (v16 & 0x1E) == 0x10 && v17 == 17)
          {
            v7 = 1;
          }
          else if (v17 == 3)
          {
            v7 = 2;
          }
          else if (v17 == 10)
          {
            v7 = 3;
          }
          else
          {
            v7 = 4;
          }
          v18 = (*(_DWORD *)v30)++;
          v29 = v15;
          v19 = v6[3];
          if ((_DWORD)v19 == v6[2])
          {
            v22 = (_DWORD **)WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v19 + 1, (unint64_t)&v29);
            v19 = v6[3];
            v23 = *(_QWORD *)v6;
            v24 = *v22;
            *v24 = **v22 + 1;
            *(_QWORD *)(v23 + 8 * v19) = v24;
          }
          else
          {
            v20 = *(_QWORD *)v6;
            *v15 = v18 + 2;
            *(_QWORD *)(v20 + 8 * v19) = v15;
          }
          v6[3] = v19 + 1;
          v21 = v29;
          v29 = 0;
          if (v21)
          {
            if (*v21 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v21, v14);
            else
              --*v21;
          }
          if (*v15 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v15, v14);
          else
            --*v15;
        }
        goto LABEL_35;
      }
      v11 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      while (1)
      {
        if (a3 < a4 || (v10 & 1) != 0)
        {
          v12 = a3 >= a4 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : a3;
          v13 = *(_DWORD *)v12;
        }
        else
        {
          v13 = v11 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
          v10 = 1;
          v11 = v13;
        }
        if ((v13 & 0x3F) != 0x10)
          break;
        a3 = (__int128 *)((char *)a3 + 24);
        v25 = a3;
      }
LABEL_35:
      a3 = v25;
      a4 = v26;
      if (v25 == v26)
        goto LABEL_44;
    }
    WebCore::CSSParserImpl::consumeAtRule(&v30, a2, &v25, v7);
    goto LABEL_20;
  }
LABEL_45:
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

uint64_t *WebCore::symbolFromCSSValue@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;

  result = *a1;
  if (result && ((*((unsigned __int16 *)result + 2) | (*((unsigned __int8 *)result + 6) << 16)) & 0x3F800) == 0)
  {
    *(_BYTE *)a2 = (*((_WORD *)result + 2) & 0x7F) == 63;
    return WebCore::CSSPrimitiveValue::stringValue(result, (_QWORD *)(a2 + 8));
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

WTF *WebCore::CSSParserImpl::consumeFontFaceRule(uint64_t a1, uint64_t a2)
{
  WTF *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[4096];
  _QWORD v39[4];
  char v40;
  _QWORD v41[2];

  result = (WTF *)MEMORY[0x1E0C80A78](a1, a2);
  v8 = result;
  if (v4 == v5)
  {
    v9 = v3;
    v10 = *(_QWORD *)(v3 + 88);
    if (v10)
    {
      v23 = *(_QWORD *)(v10 + 8);
      if (v23)
      {
        v34 = v7;
        v35 = v6;
        v24 = *(_QWORD *)(v23 + 32);
        v25 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v24) >> 3);
        v26 = *(unsigned int *)(v23 + 28);
        if (v25 >= v26 || (v27 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v24) >> 3), v27 >= v26))
        {
          __break(0xC471u);
          JUMPOUT(0x1940DA0B4);
        }
        v28 = *(_QWORD *)(v23 + 8);
        v29 = *(_QWORD *)(v23 + 16);
        v30 = *(unsigned int *)(v29 + 4 * v25);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, 5, *(unsigned int *)(v29 + 4 * v27));
        v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 8) + 8);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 24))(v31, v30);
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 8) + 8);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 40))(v32, v30);
        v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 8) + 8);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 48))(v33, v30);
        v7 = v34;
        v6 = v35;
      }
    }
    v41[0] = v6;
    v41[1] = v7;
    v40 = 5;
    v36 = (WTF *)v38;
    v37 = 256;
    v39[0] = v9;
    v39[1] = v41;
    v39[2] = &v40;
    v39[3] = &v36;
    WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::consumeDeclarationListInNewNestingContext(WebCore::CSSParserTokenRange,WebCore::StyleRuleType)::$_0>(v9, (uint64_t)v39);
    WebCore::createStyleProperties((uint64_t)v39, (uint64_t)&v36);
    v11 = v39[0];
    v39[0] = 0;
    v12 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_BYTE *)(v12 + 4) = *(_BYTE *)(v12 + 4) & 0xC0 | 5;
    *(_QWORD *)(v12 + 8) = v11;
    *v8 = v12;
    v14 = (unsigned int *)v39[0];
    v39[0] = 0;
    if (v14)
    {
      if (*v14 == 1)
      {
        v19 = v14[1];
        if (v19 >= 0x10)
        {
          v20 = 0;
          v21 = (unsigned int *)((char *)v14 + ((v19 >> 3) & 0x1FFFFFFE) + 8);
          do
          {
            v22 = (_DWORD *)(*v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32));
            if (*v22 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v13);
            else
              *v22 -= 2;
            ++v20;
            v21 = (unsigned int *)((char *)v21 + 5);
          }
          while (v20 < (unint64_t)v14[1] >> 4);
        }
        WTF::fastFree((WTF *)v14, v13);
      }
      else
      {
        --*v14;
      }
    }
    result = v36;
    if (HIDWORD(v37))
    {
      v15 = 16 * HIDWORD(v37);
      v16 = (_DWORD **)((char *)v36 + 8);
      do
      {
        v17 = *v16;
        *v16 = 0;
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v13);
          else
            *v17 -= 2;
        }
        v16 += 2;
        v15 -= 16;
      }
      while (v15);
      result = v36;
    }
    if (v38 != (_BYTE *)result && result != 0)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
  }
  return result;
}

WTF::StringImpl **WebCore::StyleSheetContents::parserAddNamespace(WebCore::StyleSheetContents *this, const WTF::AtomString *a2, const WTF::AtomString *a3)
{
  WTF::StringImpl **result;
  uint64_t v5;
  char v6;

  if (!*(_QWORD *)a2)
    return WTF::AtomString::operator=((WTF::StringImpl **)this + 14, a3);
  result = (WTF::StringImpl **)WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add<WTF::AtomString const&>((uint64_t *)this + 13, a2, (WTF::StringImpl **)a3, (uint64_t)&v5);
  if (!v6)
    return WTF::AtomString::operator=((WTF::StringImpl **)(v5 + 8), a3);
  return result;
}

uint64_t WebCore::HTTPHeaderMap::HTTPHeaderMap(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v3;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v4 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 28) = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v3;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v4 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 28) = v4;
  return result;
}

uint64_t WebCore::Document::loader(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || !*(_QWORD *)(*(_QWORD *)(v2 + 280) + 88))
    return 0;
  if (*(WebCore::Document **)(v2 + 296) == this)
    return *(_QWORD *)(*(_QWORD *)(v2 + 280) + 88);
  return 0;
}

uint64_t WebCore::CredentialBase::persistence(WebCore::CredentialBase *this)
{
  return *((unsigned __int8 *)this + 16);
}

void WebCore::GraphicsContextCG::resetClip(WebCore::GraphicsContextCG *this)
{
  *((_BYTE *)this + 744) |= 8u;
  CGContextResetClip(*((CGContextRef *)this + 90));
}

uint64_t JSC::StringSourceProvider::hash(JSC::StringSourceProvider *this)
{
  WTF::StringImpl *v1;
  unsigned int v2;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  v2 = *((_DWORD *)v1 + 4);
  if (v2 < 0x100)
    return WTF::StringImpl::hashSlowCase(v1);
  else
    return v2 >> 8;
}

uint64_t WebCore::Style::RuleSetBuilder::addRulesFromSheet(uint64_t a1, const WebCore::StyleSheetContents *a2, unsigned __int8 **a3)
{
  uint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  if (*(_QWORD *)(a1 + 64))
  {
    v6 = *(_QWORD *)(a1 + 8);
    v10 = 0;
    v11 = v6;
    v12 = 1;
    v16 = 0;
    v17 = 0;
    v13 = 0u;
    v14 = 0u;
    v15 = 0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v29 = 0;
    v27 = 0;
    v28 = 0;
    if (WebCore::Style::RuleSetBuilder::MediaQueryCollector::pushAndEvaluate((uint64_t)&v11, a3))
      WebCore::Style::RuleSetBuilder::addRulesFromSheetContents((WTF::StringImpl *)&v10, a2);
    WebCore::Style::RuleSetBuilder::MediaQueryCollector::pop((uint64_t)&v11, a3);
    v7 = v29 == 0;
    WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)&v10, v8);
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(a1 + 16) = v7;
  if (WebCore::Style::RuleSetBuilder::MediaQueryCollector::pushAndEvaluate(a1 + 8, a3))
    WebCore::Style::RuleSetBuilder::addRulesFromSheetContents((WTF::StringImpl *)a1, a2);
  return WebCore::Style::RuleSetBuilder::MediaQueryCollector::pop(a1 + 8, a3);
}

void WebCore::Style::RuleSetBuilder::~RuleSetBuilder(WebCore::Style::RuleSetBuilder *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Style::RuleSet *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  WTF *v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  void *v45;
  uint64_t *v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  const WTF::StringImpl **v54;
  int v55;
  uint64_t v56;
  const WTF::StringImpl **v57;
  WTF *v58;
  _DWORD *v59;
  WTF::StringImpl **v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  _DWORD *v68;
  WebCore::Document *v69;
  uint64_t *v70;
  void *v71;
  WebCore::Document *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  WTF::StringImpl **v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  uint64_t v85;
  _DWORD **v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::Document *v90;
  uint64_t v91;
  WebCore::Style::Resolver *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  __int16 v100;
  unsigned int v101;
  WTF *v102;
  uint64_t v103;
  WTF *v104;
  _DWORD *v105;
  int v106;
  uint64_t v107;
  _DWORD *v108;
  WebCore::Style::Resolver *v109;
  uint64_t v110;
  WTF *v111;
  WTF *v112;
  int v113;
  WTF *v114;
  int v115;
  const WTF::StringImpl **v116;

  if (!*(_QWORD *)this)
    goto LABEL_16;
  v3 = *((_QWORD *)this + 12);
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v94 = *(unsigned int *)(*(_QWORD *)this + 700);
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_0,void>((uint64_t *)&v111, v94);
    std::sort[abi:sn180100]<unsigned int *,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1>((unint64_t)v111, (unsigned int *)v111 + HIDWORD(v112), (uint64_t *)this);
    if ((_DWORD)v94)
    {
      v95 = 0;
      v96 = *(_QWORD *)this;
      v97 = HIDWORD(v112);
      v98 = v111;
      while (1)
      {
        v99 = v95 + 1;
        if ((v95 + 1) >= 0xFFFE)
          v100 = -2;
        else
          v100 = v95 + 1;
        if (v97 == v95)
        {
          __break(0xC471u);
          JUMPOUT(0x1940DABA8);
        }
        v101 = *((_DWORD *)v98 + v95) - 1;
        if (*(_DWORD *)(v96 + 700) <= v101)
          break;
        *(_WORD *)(*(_QWORD *)(v96 + 688) + 24 * v101 + 20) = v100;
        v95 = v99;
        if (v94 == v99)
          goto LABEL_159;
      }
LABEL_173:
      __break(0xC471u);
      JUMPOUT(0x1940DAB98);
    }
LABEL_159:
    v102 = v111;
    if (v111)
    {
      v111 = 0;
      LODWORD(v112) = 0;
      WTF::fastFree(v102, a2);
    }
  }
  if ((*((_BYTE *)this + 56) & 1) != 0)
    *(_BYTE *)(*(_QWORD *)this + 801) = 1;
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v24 = *(_QWORD *)this;
    v25 = *(unsigned int *)(*(_QWORD *)this + 668);
    v26 = v4 + v25;
    v27 = *(unsigned int *)(*(_QWORD *)this + 664);
    if (v26 > v27)
    {
      v28 = v27 + (v27 >> 2);
      if (v28 >= 0x10)
        v29 = v28 + 1;
      else
        v29 = 16;
      if (v29 > v26)
        v26 = v29;
      if (v26 >= 0x4924925)
        goto LABEL_173;
      v30 = *(WTF **)(v24 + 656);
      v31 = 56 * v26;
      v32 = WTF::fastMalloc((WTF *)(56 * v26));
      *(_DWORD *)(v24 + 664) = v31 / 0x38;
      *(_QWORD *)(v24 + 656) = v32;
      WTF::VectorMover<false,WebCore::Style::RuleSet::DynamicMediaQueryRules>::move(v30, (WTF *)((char *)v30 + 56 * v25), v32);
      if (v30)
      {
        if (*(WTF **)(v24 + 656) == v30)
        {
          *(_QWORD *)(v24 + 656) = 0;
          *(_DWORD *)(v24 + 664) = 0;
        }
        WTF::fastFree(v30, v33);
      }
    }
    v34 = *((_DWORD *)this + 13);
    if (v34)
    {
      v35 = (uint64_t *)*((_QWORD *)this + 5);
      v36 = &v35[7 * v34];
      v37 = *(_DWORD *)(v24 + 668);
      do
      {
        v38 = *(_QWORD *)(v24 + 656) + 56 * v37;
        *(_QWORD *)v38 = 0;
        *(_QWORD *)(v38 + 8) = 0;
        v39 = *v35;
        *v35 = 0;
        *(_QWORD *)v38 = v39;
        LODWORD(v39) = *((_DWORD *)v35 + 2);
        *((_DWORD *)v35 + 2) = 0;
        *(_DWORD *)(v38 + 8) = v39;
        LODWORD(v39) = *((_DWORD *)v35 + 3);
        *((_DWORD *)v35 + 3) = 0;
        *(_DWORD *)(v38 + 12) = v39;
        *(_QWORD *)(v38 + 16) = 0;
        *(_QWORD *)(v38 + 24) = 0;
        v40 = v35[2];
        v35[2] = 0;
        *(_QWORD *)(v38 + 16) = v40;
        LODWORD(v40) = *((_DWORD *)v35 + 6);
        *((_DWORD *)v35 + 6) = 0;
        *(_DWORD *)(v38 + 24) = v40;
        LODWORD(v40) = *((_DWORD *)v35 + 7);
        *((_DWORD *)v35 + 7) = 0;
        *(_DWORD *)(v38 + 28) = v40;
        *(_QWORD *)(v38 + 32) = 0;
        *(_QWORD *)(v38 + 40) = 0;
        v41 = v35[4];
        v35[4] = 0;
        *(_QWORD *)(v38 + 32) = v41;
        LODWORD(v41) = *((_DWORD *)v35 + 10);
        *((_DWORD *)v35 + 10) = 0;
        *(_DWORD *)(v38 + 40) = v41;
        LODWORD(v41) = *((_DWORD *)v35 + 11);
        *((_DWORD *)v35 + 11) = 0;
        *(_DWORD *)(v38 + 44) = v41;
        *(_WORD *)(v38 + 48) = *((_WORD *)v35 + 24);
        v37 = *(_DWORD *)(v24 + 668) + 1;
        *(_DWORD *)(v24 + 668) = v37;
        v35 += 7;
      }
      while (v35 != v36);
    }
    WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules((uint64_t)&v111, *(const WebCore::MQ::MediaQueryEvaluator **)this, *((WebCore::MQ::MediaQueryEvaluator **)this + 1), v25);
    v42 = v114;
    if (v114)
    {
      v114 = 0;
      v115 = 0;
      WTF::fastFree(v42, a2);
    }
    v43 = v112;
    if (v112)
    {
      v112 = 0;
      v113 = 0;
      WTF::fastFree(v43, a2);
    }
  }
  if (*((_QWORD *)this + 8))
  {
    v5 = *(_QWORD *)this;
    v6 = *(WTF **)(*(_QWORD *)this + 720);
    v7 = *(unsigned int *)(*(_QWORD *)this + 728);
    v8 = *(unsigned int *)(*(_QWORD *)this + 732);
    *(_QWORD *)(v5 + 720) = 0;
    *(_QWORD *)(v5 + 728) = 0;
    v9 = *((unsigned int *)this + 39);
    v10 = v9 + v8;
    if (v9 + v8 > v7)
    {
      v63 = v7 + (v7 >> 2);
      if (v63 >= 0x10)
        v64 = v63 + 1;
      else
        v64 = 16;
      if (v64 <= v10)
        v64 = v10;
      if (v64 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1940DABA0);
      }
      v65 = WTF::fastMalloc((WTF *)(16 * v64));
      v66 = (WTF *)v65;
      if ((_DWORD)v8)
      {
        v103 = v65;
        v104 = v6;
        do
        {
          v105 = *(_DWORD **)v104;
          *(_QWORD *)v104 = 0;
          *(_QWORD *)v103 = v105;
          *(_DWORD *)(v103 + 8) = *((_DWORD *)v104 + 2);
          v104 = (WTF *)(WTF::Ref<WebCore::StyleRulePage,WTF::RawPtrTraits<WebCore::StyleRulePage>,WTF::DefaultRefDerefTraits<WebCore::StyleRulePage>>::~Ref((_DWORD **)v104, (WTF::StringImpl *)a2)+ 2);
          v103 += 16;
        }
        while (v104 != (WTF *)((char *)v6 + 16 * v8));
      }
      if (v6)
      {
        if (v66 == v6)
          v66 = 0;
        WTF::fastFree(v6, a2);
      }
      v9 = *((unsigned int *)this + 39);
      v6 = v66;
    }
    if ((_DWORD)v9)
    {
      v46 = (uint64_t *)*((_QWORD *)this + 18);
      v47 = &v46[2 * v9];
      do
      {
        v11 = v8 + 1;
        v48 = (char *)v6 + 16 * v8;
        v49 = *v46;
        *v46 = 0;
        *(_QWORD *)v48 = v49;
        *((_DWORD *)v48 + 2) = *((_DWORD *)v46 + 2);
        v46 += 2;
        LODWORD(v8) = v8 + 1;
      }
      while (v46 != v47);
    }
    else
    {
      v11 = v8;
    }
    v12 = *((_QWORD *)this + 12);
    if (v12 && *(_DWORD *)(v12 - 12))
      std::stable_sort[abi:sn180100]<WebCore::Style::RuleSet::ResolverMutatingRule *,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0>(v6, (WTF *)((char *)v6 + 16 * v11), (uint64_t *)this);
    if (!v11)
    {
LABEL_12:
      if (v6)
        WTF::fastFree(v6, a2);
      goto LABEL_14;
    }
    v50 = 16 * v11;
    v51 = v50;
    v52 = v6;
    while (1)
    {
      v53 = *((_DWORD *)v52 + 2);
      if (v53)
      {
        v88 = *(_QWORD *)this;
        v89 = *(unsigned int *)(*(_QWORD *)this + 732);
        if ((_DWORD)v89 == *(_DWORD *)(*(_QWORD *)this + 728))
        {
          WTF::Vector<WebCore::Style::RuleSet::ResolverMutatingRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleSet::ResolverMutatingRule&>(v88 + 720, (unint64_t)v52);
        }
        else
        {
          v106 = v89 + 1;
          v107 = *(_QWORD *)(v88 + 720) + 16 * v89;
          v108 = *(_DWORD **)v52;
          *v108 = **(_DWORD **)v52 + 1;
          *(_QWORD *)v107 = v108;
          *(_DWORD *)(v107 + 8) = v53;
          *(_DWORD *)(v88 + 732) = v106;
        }
      }
      v54 = *(const WTF::StringImpl ***)v52;
      v55 = *(_BYTE *)(*(_QWORD *)v52 + 4) & 0x1F;
      if (v55 == 7)
      {
        v56 = *((_QWORD *)this + 8);
        ++*(_DWORD *)v54;
        v116 = v54;
        WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>((uint64_t *)(v56 + 352), (WTF::StringImpl *)(v54 + 3), (WTF::StringImpl *)&v116, (uint64_t)&v111);
        WebCore::Document::keyframesRuleDidChange(*(_QWORD *)(*(_QWORD *)(v56 + 16) + 8), v54 + 3);
        v57 = v116;
        v116 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v57, (WTF::StringImpl *)a2);
          else
            --*(_DWORD *)v57;
        }
      }
      else
      {
        if ((*(_BYTE *)(*(_QWORD *)v52 + 4) & 0x1Fu) <= 0xD)
        {
          if (v55 != 5)
          {
            if (v55 == 11)
            {
              v92 = (WebCore::Style::Resolver *)*((_QWORD *)this + 8);
              if (!*((_BYTE *)v92 + 24))
              {
                v93 = WebCore::Style::Resolver::document(v92);
                WebCore::CSSCounterStyleRegistry::addCounterStyle(*(WebCore::CSSCounterStyleRegistry **)(*(_QWORD *)(v93 + 1328) + 304), (const WebCore::CSSCounterStyleDescriptors *)(v54 + 2));
              }
            }
            goto LABEL_62;
          }
          v72 = (WebCore::Document *)WebCore::Style::Resolver::document(*((WebCore::Style::Resolver **)this + 8));
          v73 = *((_QWORD *)v72 + 331);
          if (!v73)
            v73 = WebCore::Document::ensureFontSelector(v72);
          WebCore::CSSFontSelector::addFontFaceRule(v73, (uint64_t)v54, 0);
        }
        else if (v55 == 19)
        {
          v90 = (WebCore::Document *)WebCore::Style::Resolver::document(*((WebCore::Style::Resolver **)this + 8));
          v91 = *((_QWORD *)v90 + 331);
          if (!v91)
            v91 = WebCore::Document::ensureFontSelector(v90);
          WebCore::CSSFontSelector::addFontPaletteValuesRule(v91, (uint64_t)v54);
        }
        else
        {
          if (v55 != 14)
          {
            if (v55 == 21)
            {
              v109 = (WebCore::Style::Resolver *)*((_QWORD *)this + 8);
              if (!*((_BYTE *)v109 + 24))
              {
                v110 = WebCore::Style::Resolver::document(v109);
                WebCore::Style::CustomPropertyRegistry::registerFromStylesheet(*(uint64_t **)(*(_QWORD *)(v110 + 1328) + 296), (uint64_t)(v54 + 1));
              }
            }
            goto LABEL_62;
          }
          v69 = (WebCore::Document *)WebCore::Style::Resolver::document(*((WebCore::Style::Resolver **)this + 8));
          v70 = (uint64_t *)*((_QWORD *)v69 + 331);
          if (!v70)
            v70 = (uint64_t *)WebCore::Document::ensureFontSelector(v69);
          WebCore::CSSFontSelector::addFontFeatureValuesRule(v70, (uint64_t)v54);
        }
        WebCore::Style::Resolver::invalidateMatchedDeclarationsCache(*((WebCore::Style::Resolver **)this + 8), v71);
      }
LABEL_62:
      v52 = (WTF *)((char *)v52 + 16);
      v51 -= 16;
      if (!v51)
      {
        v58 = v6;
        do
        {
          v59 = *(_DWORD **)v58;
          *(_QWORD *)v58 = 0;
          if (v59)
          {
            if (*v59 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v59, (WTF::StringImpl *)a2);
            else
              --*v59;
          }
          v58 = (WTF *)((char *)v58 + 16);
          v50 -= 16;
        }
        while (v50);
        goto LABEL_12;
      }
    }
  }
LABEL_14:
  if (!*((_BYTE *)this + 72))
    WebCore::Style::RuleSet::shrinkToFit(*(WebCore::Style::RuleSet **)this, a2);
LABEL_16:
  v13 = *((unsigned int *)this + 39);
  v14 = (WTF *)*((_QWORD *)this + 18);
  if ((_DWORD)v13)
  {
    v67 = 16 * v13;
    do
    {
      v68 = *(_DWORD **)v14;
      *(_QWORD *)v14 = 0;
      if (v68)
      {
        if (*v68 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v68, (WTF::StringImpl *)a2);
        else
          --*v68;
      }
      v14 = (WTF *)((char *)v14 + 16);
      v67 -= 16;
    }
    while (v67);
    v14 = (WTF *)*((_QWORD *)this + 18);
  }
  if (v14)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = (WTF *)*((_QWORD *)this + 14);
  if (v15)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *((_QWORD *)this + 12);
  if (v16)
  {
    v74 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v74)
    {
      for (i = 0; i != v74; ++i)
      {
        v76 = v16 + 24 * i;
        v77 = *(unsigned int *)(v76 + 12);
        if ((_DWORD)v77 != -1)
        {
          if ((_DWORD)v77)
          {
            v79 = *(WTF::StringImpl ***)v76;
            v80 = 8 * v77;
            do
            {
              v81 = *v79;
              *v79 = 0;
              if (v81)
              {
                if (*(_DWORD *)v81 == 2)
                  WTF::StringImpl::destroy(v81, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v81 -= 2;
              }
              ++v79;
              v80 -= 8;
            }
            while (v80);
          }
          v78 = *(WTF **)v76;
          if (*(_QWORD *)v76)
          {
            *(_QWORD *)v76 = 0;
            *(_DWORD *)(v76 + 8) = 0;
            WTF::fastFree(v78, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  v17 = *((unsigned int *)this + 23);
  if ((_DWORD)v17)
  {
    v60 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    v61 = 8 * v17;
    do
    {
      v62 = *v60;
      *v60 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v62 -= 2;
      }
      ++v60;
      v61 -= 8;
    }
    while (v61);
  }
  v18 = (WTF *)*((_QWORD *)this + 10);
  if (v18)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v18, a2);
  }
  v19 = *((_DWORD *)this + 13);
  if (v19)
    WTF::VectorDestructor<true,WebCore::Style::RuleSet::DynamicMediaQueryRules>::destruct(*((WTF **)this + 5), (WTF::StringImpl *)(*((_QWORD *)this + 5) + 56 * v19));
  v20 = (WTF *)*((_QWORD *)this + 5);
  if (v20)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v20, a2);
  }
  v21 = *((unsigned int *)this + 9);
  v22 = *((_QWORD *)this + 3);
  if ((_DWORD)v21)
  {
    v82 = v22 + 32 * v21;
    do
    {
      v83 = *(_QWORD *)(v22 + 24);
      if (v83)
      {
        v85 = *(unsigned int *)(v83 - 4);
        if ((_DWORD)v85)
        {
          v86 = *(_DWORD ***)(v22 + 24);
          do
          {
            v87 = *v86;
            if (*v86 != (_DWORD *)-1)
            {
              *v86 = 0;
              if (v87)
              {
                if (*v87 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v87, (WTF::StringImpl *)a2);
                else
                  --*v87;
              }
            }
            ++v86;
            --v85;
          }
          while (v85);
        }
        WTF::fastFree((WTF *)(v83 - 16), a2);
      }
      v84 = *(WTF **)(v22 + 8);
      if (v84)
      {
        *(_QWORD *)(v22 + 8) = 0;
        *(_DWORD *)(v22 + 16) = 0;
        WTF::fastFree(v84, a2);
      }
      v22 += 32;
    }
    while (v22 != v82);
    v22 = *((_QWORD *)this + 3);
  }
  if (v22)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree((WTF *)v22, a2);
  }
  v23 = *(WebCore::Style::RuleSet **)this;
  *(_QWORD *)this = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v23, a2);
      WTF::fastFree(v44, v45);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
}

WTF *WebCore::Style::RuleSet::shrinkToFit(WebCore::Style::RuleSet *this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  unint64_t v12;
  void **v13;
  WTF *v14;
  WTF *v15;
  unsigned int v16;
  unint64_t v17;
  void **v18;
  WTF *v19;
  WTF *v20;
  unsigned int v21;
  unint64_t v22;
  void **v23;
  WTF *v24;
  WTF *v25;
  unsigned int v26;
  unint64_t v27;
  void **v28;
  WTF *v29;
  WTF *v30;
  unint64_t v31;
  unsigned int v32;
  void **v33;
  WTF *v34;
  WTF *v35;
  unint64_t v36;
  unsigned int v37;
  void **v38;
  WTF *v39;
  WTF *v40;
  unint64_t v41;
  unsigned int v42;
  void **v43;
  WTF *v44;
  WTF *v45;
  unint64_t v46;
  unsigned int v47;
  void **v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *result;
  void *v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  WTF *v77;
  WTF *v78;
  WTF::StringImpl *v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  WTF *v83;
  WTF *v84;
  uint64_t v85;
  WTF *__src;
  WTF *__srca;
  WTF *__srcb;
  WTF *__srcc;
  WTF *__srcd;
  WTF *__srce;
  WTF *__srcf;
  WTF *__srcg;

  WebCore::Style::shrinkMapVectorsToFit(*((_DWORD **)this + 1), a2);
  WebCore::Style::shrinkMapVectorsToFit(*((_DWORD **)this + 2), v3);
  WebCore::Style::shrinkMapVectorsToFit(*((_DWORD **)this + 3), v4);
  WebCore::Style::shrinkMapVectorsToFit(*((_DWORD **)this + 4), v5);
  WebCore::Style::shrinkMapVectorsToFit(*((_DWORD **)this + 5), v6);
  WebCore::Style::shrinkMapVectorsToFit(*((_DWORD **)this + 6), v7);
  WebCore::Style::shrinkMapVectorsToFit(*((_DWORD **)this + 7), v8);
  WebCore::Style::shrinkMapVectorsToFit(*((_DWORD **)this + 8), v9);
  v11 = *((_DWORD *)this + 20);
  v12 = *((unsigned int *)this + 21);
  if (v11 > v12)
  {
    v13 = (void **)((char *)this + 72);
    v14 = (WTF *)*((_QWORD *)this + 9);
    v15 = v14;
    if ((_DWORD)v12)
    {
      if (v11 >= v12)
        v69 = *((_DWORD *)this + 21);
      else
        v69 = *((_DWORD *)this + 20);
      if (v69 >= 2)
      {
        *((_DWORD *)this + 20) = v12;
        *((_QWORD *)this + 9) = WTF::fastRealloc(v14, (void *)(32 * v12));
        goto LABEL_7;
      }
      __src = (WTF *)*((_QWORD *)this + 9);
      WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)this + 72, v12);
      v14 = __src;
      v15 = __src;
      if (*v13 != __src)
      {
        memcpy(*v13, __src, 32 * v12);
        v14 = __src;
        v15 = (WTF *)*v13;
      }
    }
    if ((WebCore::Style::RuleSet *)((char *)this + 88) != v14 && v14)
    {
      if (v15 == v14)
      {
        *((_QWORD *)this + 9) = 0;
        *((_DWORD *)this + 20) = 0;
      }
      WTF::fastFree(v14, v10);
      v15 = (WTF *)*v13;
    }
    if (!v15)
    {
      *((_QWORD *)this + 9) = (char *)this + 88;
      *((_DWORD *)this + 20) = 1;
    }
  }
LABEL_7:
  v16 = *((_DWORD *)this + 32);
  v17 = *((unsigned int *)this + 33);
  if (v16 <= v17)
    goto LABEL_13;
  v18 = (void **)((char *)this + 120);
  v19 = (WTF *)*((_QWORD *)this + 15);
  v20 = v19;
  if ((_DWORD)v17)
  {
    if (v16 >= v17)
      v70 = *((_DWORD *)this + 33);
    else
      v70 = *((_DWORD *)this + 32);
    if (v70 >= 2)
    {
      *((_DWORD *)this + 32) = v17;
      *((_QWORD *)this + 15) = WTF::fastRealloc(v19, (void *)(32 * v17));
      goto LABEL_13;
    }
    __srca = (WTF *)*((_QWORD *)this + 15);
    WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)this + 120, v17);
    v19 = __srca;
    v20 = __srca;
    if (*v18 != __srca)
    {
      memcpy(*v18, __srca, 32 * v17);
      v19 = __srca;
      v20 = (WTF *)*v18;
    }
  }
  if ((WebCore::Style::RuleSet *)((char *)this + 136) != v19 && v19)
  {
    if (v20 == v19)
    {
      *((_QWORD *)this + 15) = 0;
      *((_DWORD *)this + 32) = 0;
    }
    WTF::fastFree(v19, v10);
    v20 = (WTF *)*v18;
  }
  if (!v20)
  {
    *((_QWORD *)this + 15) = (char *)this + 136;
    *((_DWORD *)this + 32) = 1;
  }
LABEL_13:
  v21 = *((_DWORD *)this + 44);
  v22 = *((unsigned int *)this + 45);
  if (v21 <= v22)
    goto LABEL_19;
  v23 = (void **)((char *)this + 168);
  v24 = (WTF *)*((_QWORD *)this + 21);
  v25 = v24;
  if ((_DWORD)v22)
  {
    if (v21 >= v22)
      v71 = *((_DWORD *)this + 45);
    else
      v71 = *((_DWORD *)this + 44);
    if (v71 >= 2)
    {
      *((_DWORD *)this + 44) = v22;
      *((_QWORD *)this + 21) = WTF::fastRealloc(v24, (void *)(32 * v22));
      goto LABEL_19;
    }
    __srcb = (WTF *)*((_QWORD *)this + 21);
    WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)this + 168, v22);
    v24 = __srcb;
    v25 = __srcb;
    if (*v23 != __srcb)
    {
      memcpy(*v23, __srcb, 32 * v22);
      v24 = __srcb;
      v25 = (WTF *)*v23;
    }
  }
  if ((WebCore::Style::RuleSet *)((char *)this + 184) != v24 && v24)
  {
    if (v25 == v24)
    {
      *((_QWORD *)this + 21) = 0;
      *((_DWORD *)this + 44) = 0;
    }
    WTF::fastFree(v24, v10);
    v25 = (WTF *)*v23;
  }
  if (!v25)
  {
    *((_QWORD *)this + 21) = (char *)this + 184;
    *((_DWORD *)this + 44) = 1;
  }
LABEL_19:
  v26 = *((_DWORD *)this + 56);
  v27 = *((unsigned int *)this + 57);
  if (v26 <= v27)
    goto LABEL_25;
  v28 = (void **)((char *)this + 216);
  v29 = (WTF *)*((_QWORD *)this + 27);
  v30 = v29;
  if ((_DWORD)v27)
  {
    if (v26 >= v27)
      v72 = *((_DWORD *)this + 57);
    else
      v72 = *((_DWORD *)this + 56);
    if (v72 >= 2)
    {
      *((_DWORD *)this + 56) = v27;
      *((_QWORD *)this + 27) = WTF::fastRealloc(v29, (void *)(32 * v27));
      goto LABEL_25;
    }
    __srcc = (WTF *)*((_QWORD *)this + 27);
    WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)this + 216, v27);
    v29 = __srcc;
    v30 = __srcc;
    if (*v28 != __srcc)
    {
      memcpy(*v28, __srcc, 32 * v27);
      v29 = __srcc;
      v30 = (WTF *)*v28;
    }
  }
  if ((WebCore::Style::RuleSet *)((char *)this + 232) != v29 && v29)
  {
    if (v30 == v29)
    {
      *((_QWORD *)this + 27) = 0;
      *((_DWORD *)this + 56) = 0;
    }
    WTF::fastFree(v29, v10);
    v30 = (WTF *)*v28;
  }
  if (!v30)
  {
    *((_QWORD *)this + 27) = (char *)this + 232;
    *((_DWORD *)this + 56) = 1;
  }
LABEL_25:
  v31 = *((unsigned int *)this + 69);
  v32 = *((_DWORD *)this + 68);
  if (v32 <= v31)
    goto LABEL_31;
  v33 = (void **)((char *)this + 264);
  v34 = (WTF *)*((_QWORD *)this + 33);
  v35 = v34;
  if ((_DWORD)v31)
  {
    if (v32 >= v31)
      v73 = *((_DWORD *)this + 69);
    else
      v73 = *((_DWORD *)this + 68);
    if (v73 >= 2)
    {
      *((_DWORD *)this + 68) = v31;
      *((_QWORD *)this + 33) = WTF::fastRealloc(v34, (void *)(32 * v31));
      goto LABEL_31;
    }
    __srcd = (WTF *)*((_QWORD *)this + 33);
    WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)this + 264, v31);
    v34 = __srcd;
    v35 = __srcd;
    if (*v33 != __srcd)
    {
      memcpy(*v33, __srcd, 32 * v31);
      v34 = __srcd;
      v35 = (WTF *)*v33;
    }
  }
  if ((WebCore::Style::RuleSet *)((char *)this + 280) != v34 && v34)
  {
    if (v35 == v34)
    {
      *((_QWORD *)this + 33) = 0;
      *((_DWORD *)this + 68) = 0;
    }
    WTF::fastFree(v34, v10);
    v35 = (WTF *)*v33;
  }
  if (!v35)
  {
    *((_QWORD *)this + 33) = (char *)this + 280;
    *((_DWORD *)this + 68) = 1;
  }
LABEL_31:
  v36 = *((unsigned int *)this + 81);
  v37 = *((_DWORD *)this + 80);
  if (v37 <= v36)
    goto LABEL_37;
  v38 = (void **)((char *)this + 312);
  v39 = (WTF *)*((_QWORD *)this + 39);
  v40 = v39;
  if ((_DWORD)v36)
  {
    if (v37 >= v36)
      v74 = *((_DWORD *)this + 81);
    else
      v74 = *((_DWORD *)this + 80);
    if (v74 >= 2)
    {
      *((_DWORD *)this + 80) = v36;
      *((_QWORD *)this + 39) = WTF::fastRealloc(v39, (void *)(32 * v36));
      goto LABEL_37;
    }
    __srce = (WTF *)*((_QWORD *)this + 39);
    WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)this + 312, v36);
    v39 = __srce;
    v40 = __srce;
    if (*v38 != __srce)
    {
      memcpy(*v38, __srce, 32 * v36);
      v39 = __srce;
      v40 = (WTF *)*v38;
    }
  }
  if ((WebCore::Style::RuleSet *)((char *)this + 328) != v39 && v39)
  {
    if (v40 == v39)
    {
      *((_QWORD *)this + 39) = 0;
      *((_DWORD *)this + 80) = 0;
    }
    WTF::fastFree(v39, v10);
    v40 = (WTF *)*v38;
  }
  if (!v40)
  {
    *((_QWORD *)this + 39) = (char *)this + 328;
    *((_DWORD *)this + 80) = 1;
  }
LABEL_37:
  v41 = *((unsigned int *)this + 93);
  v42 = *((_DWORD *)this + 92);
  if (v42 <= v41)
    goto LABEL_43;
  v43 = (void **)((char *)this + 360);
  v44 = (WTF *)*((_QWORD *)this + 45);
  v45 = v44;
  if ((_DWORD)v41)
  {
    if (v42 >= v41)
      v75 = *((_DWORD *)this + 93);
    else
      v75 = *((_DWORD *)this + 92);
    if (v75 >= 2)
    {
      *((_DWORD *)this + 92) = v41;
      *((_QWORD *)this + 45) = WTF::fastRealloc(v44, (void *)(32 * v41));
      goto LABEL_43;
    }
    __srcf = (WTF *)*((_QWORD *)this + 45);
    WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)this + 360, v41);
    v44 = __srcf;
    v45 = __srcf;
    if (*v43 != __srcf)
    {
      memcpy(*v43, __srcf, 32 * v41);
      v44 = __srcf;
      v45 = (WTF *)*v43;
    }
  }
  if ((WebCore::Style::RuleSet *)((char *)this + 376) != v44 && v44)
  {
    if (v45 == v44)
    {
      *((_QWORD *)this + 45) = 0;
      *((_DWORD *)this + 92) = 0;
    }
    WTF::fastFree(v44, v10);
    v45 = (WTF *)*v43;
  }
  if (!v45)
  {
    *((_QWORD *)this + 45) = (char *)this + 376;
    *((_DWORD *)this + 92) = 1;
  }
LABEL_43:
  v46 = *((unsigned int *)this + 105);
  v47 = *((_DWORD *)this + 104);
  if (v47 <= v46)
    goto LABEL_49;
  v48 = (void **)((char *)this + 408);
  v49 = (WTF *)*((_QWORD *)this + 51);
  v50 = v49;
  if ((_DWORD)v46)
  {
    if (v47 >= v46)
      v76 = *((_DWORD *)this + 105);
    else
      v76 = *((_DWORD *)this + 104);
    if (v76 >= 2)
    {
      *((_DWORD *)this + 104) = v46;
      *((_QWORD *)this + 51) = WTF::fastRealloc(v49, (void *)(32 * v46));
      goto LABEL_49;
    }
    __srcg = (WTF *)*((_QWORD *)this + 51);
    WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)this + 408, v46);
    v49 = __srcg;
    v50 = __srcg;
    if (*v48 != __srcg)
    {
      memcpy(*v48, __srcg, 32 * v46);
      v49 = __srcg;
      v50 = (WTF *)*v48;
    }
  }
  if ((WebCore::Style::RuleSet *)((char *)this + 424) != v49 && v49)
  {
    if (v50 == v49)
    {
      *((_QWORD *)this + 51) = 0;
      *((_DWORD *)this + 104) = 0;
    }
    WTF::fastFree(v49, v10);
    v50 = (WTF *)*v48;
  }
  if (!v50)
  {
    *((_QWORD *)this + 51) = (char *)this + 424;
    *((_DWORD *)this + 104) = 1;
  }
LABEL_49:
  v51 = *((unsigned int *)this + 117);
  if (*((_DWORD *)this + 116) > v51)
  {
    v77 = (WTF *)*((_QWORD *)this + 57);
    if ((_DWORD)v51)
    {
      *((_DWORD *)this + 116) = v51;
      *((_QWORD *)this + 57) = WTF::fastRealloc(v77, (void *)(8 * v51));
    }
    else if (v77)
    {
      *((_QWORD *)this + 57) = 0;
      *((_DWORD *)this + 116) = 0;
      WTF::fastFree(v77, v10);
    }
  }
  result = (WTF *)WebCore::Style::RuleFeatureSet::shrinkToFit((WebCore::Style::RuleSet *)((char *)this + 472));
  v54 = *((unsigned int *)this + 167);
  if ((_DWORD)v54)
  {
    v62 = *((_QWORD *)this + 82) + 24;
    v63 = 56 * v54;
    do
    {
      v64 = *(_DWORD *)(v62 - 12);
      if (*(_DWORD *)(v62 - 16) > v64)
      {
        v81 = *(WTF **)(v62 - 24);
        if (v64)
        {
          v82 = *(unsigned int *)(v62 - 12);
          if (v64 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1940DB6A0);
          }
          result = (WTF *)WTF::fastMalloc((WTF *)(16 * v82));
          *(_DWORD *)(v62 - 16) = v82;
          *(_QWORD *)(v62 - 24) = result;
          if (result != v81)
            result = (WTF *)WTF::VectorTypeOperations<WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move((uint64_t)v81, (char *)v81 + 16 * v82, (uint64_t)result);
        }
        if (v81)
        {
          if (*(WTF **)(v62 - 24) == v81)
          {
            *(_QWORD *)(v62 - 24) = 0;
            *(_DWORD *)(v62 - 16) = 0;
          }
          result = (WTF *)WTF::fastFree(v81, v53);
        }
      }
      v65 = *(unsigned int *)(v62 + 4);
      if (*(_DWORD *)v62 > v65)
      {
        result = *(WTF **)(v62 - 8);
        if ((_DWORD)v65)
        {
          *(_DWORD *)v62 = v65;
          result = (WTF *)WTF::fastRealloc(result, (void *)(8 * v65));
          *(_QWORD *)(v62 - 8) = result;
        }
        else if (result)
        {
          *(_QWORD *)(v62 - 8) = 0;
          *(_DWORD *)v62 = 0;
          result = (WTF *)WTF::fastFree(result, v53);
        }
      }
      v66 = *(unsigned int *)(v62 + 20);
      if (*(_DWORD *)(v62 + 16) > v66)
      {
        result = *(WTF **)(v62 + 8);
        if ((_DWORD)v66)
        {
          *(_DWORD *)(v62 + 16) = v66;
          result = (WTF *)WTF::fastRealloc(result, (void *)(8 * v66));
          *(_QWORD *)(v62 + 8) = result;
        }
        else if (result)
        {
          *(_QWORD *)(v62 + 8) = 0;
          *(_DWORD *)(v62 + 16) = 0;
          result = (WTF *)WTF::fastFree(result, v53);
        }
      }
      v62 += 56;
      v63 -= 56;
    }
    while (v63);
    v55 = *((_DWORD *)this + 167);
    v56 = v55;
  }
  else
  {
    v55 = 0;
    v56 = 0;
  }
  if (v56 < *((unsigned int *)this + 166))
  {
    v67 = (WTF *)*((_QWORD *)this + 82);
    if (v56 < v55)
    {
      result = WTF::VectorDestructor<true,WebCore::Style::RuleSet::DynamicMediaQueryRules>::destruct((WTF *)((char *)v67 + 56 * v56), (WTF *)((char *)v67 + 56 * v55));
      *((_DWORD *)this + 167) = v56;
      v67 = (WTF *)*((_QWORD *)this + 82);
      v55 = v56;
    }
    if (v56)
    {
      if (v56 >= 0x4924925)
      {
        __break(0xC471u);
        JUMPOUT(0x1940DB6A8);
      }
      v68 = (WTF *)(56 * v56);
      result = (WTF *)WTF::fastMalloc(v68);
      *((_DWORD *)this + 166) = v68 / 0x38;
      *((_QWORD *)this + 82) = result;
      if (result != v67)
        result = WTF::VectorMover<false,WebCore::Style::RuleSet::DynamicMediaQueryRules>::move(v67, (WTF *)((char *)v67 + 56 * v55), (uint64_t)result);
    }
    if (v67)
    {
      if (*((WTF **)this + 82) == v67)
      {
        *((_QWORD *)this + 82) = 0;
        *((_DWORD *)this + 166) = 0;
      }
      result = (WTF *)WTF::fastFree(v67, v53);
    }
  }
  v57 = *((unsigned int *)this + 175);
  if (*((_DWORD *)this + 174) > v57)
  {
    v78 = (WTF *)*((_QWORD *)this + 86);
    if ((_DWORD)v57)
    {
      if (v57 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1940DB6B0);
      }
      result = (WTF *)WTF::fastMalloc((WTF *)(24 * v57));
      *((_DWORD *)this + 174) = 24 * (int)v57 / 0x18u;
      *((_QWORD *)this + 86) = result;
      if (result != v78)
        result = WTF::VectorTypeOperations<WebCore::Style::RuleSet::CascadeLayer>::move(v78, (WTF *)((char *)v78 + 24 * v57), (uint64_t)result);
    }
    if (v78)
    {
      if (*((WTF **)this + 86) == v78)
      {
        *((_QWORD *)this + 86) = 0;
        *((_DWORD *)this + 174) = 0;
      }
      result = (WTF *)WTF::fastFree(v78, v53);
    }
  }
  v58 = *((unsigned int *)this + 179);
  if (*((_DWORD *)this + 178) > v58)
  {
    result = (WTF *)*((_QWORD *)this + 88);
    if ((_DWORD)v58)
    {
      *((_DWORD *)this + 178) = v58;
      result = (WTF *)WTF::fastRealloc(result, (void *)(4 * v58));
      *((_QWORD *)this + 88) = result;
    }
    else if (result)
    {
      *((_QWORD *)this + 88) = 0;
      *((_DWORD *)this + 178) = 0;
      result = (WTF *)WTF::fastFree(result, v53);
    }
  }
  v59 = *((unsigned int *)this + 187);
  if (*((_DWORD *)this + 186) > v59)
  {
    v79 = (WTF::StringImpl *)*((_QWORD *)this + 92);
    if ((_DWORD)v59)
    {
      if (v59 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1940DB6B8);
      }
      result = (WTF *)WTF::fastMalloc((WTF *)(16 * v59));
      *((_DWORD *)this + 186) = v59;
      *((_QWORD *)this + 92) = result;
      if (result != v79)
        result = WTF::VectorTypeOperations<WebCore::Style::RuleSet::ContainerQueryAndParent>::move(v79, (WTF::StringImpl *)((char *)v79 + 16 * v59), (uint64_t)result);
    }
    if (v79)
    {
      if (*((WTF::StringImpl **)this + 92) == v79)
      {
        *((_QWORD *)this + 92) = 0;
        *((_DWORD *)this + 186) = 0;
      }
      result = (WTF *)WTF::fastFree(v79, v53);
    }
  }
  v60 = *((unsigned int *)this + 191);
  if (*((_DWORD *)this + 190) > v60)
  {
    result = (WTF *)*((_QWORD *)this + 94);
    if ((_DWORD)v60)
    {
      *((_DWORD *)this + 190) = v60;
      result = (WTF *)WTF::fastRealloc(result, (void *)(4 * v60));
      *((_QWORD *)this + 94) = result;
    }
    else if (result)
    {
      *((_QWORD *)this + 94) = 0;
      *((_DWORD *)this + 190) = 0;
      result = (WTF *)WTF::fastFree(result, v53);
    }
  }
  v61 = *((unsigned int *)this + 183);
  if (*((_DWORD *)this + 182) > v61)
  {
    v80 = (WTF *)*((_QWORD *)this + 90);
    if ((_DWORD)v61)
    {
      if (v61 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1940DB6C0);
      }
      result = (WTF *)WTF::fastMalloc((WTF *)(16 * v61));
      *((_DWORD *)this + 182) = v61;
      *((_QWORD *)this + 90) = result;
      if (result != v80)
      {
        v83 = result;
        v84 = (WTF *)((char *)v80 + 16 * v61);
        result = v80;
        do
        {
          v85 = *(_QWORD *)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v83 = v85;
          *((_DWORD *)v83 + 2) = *((_DWORD *)result + 2);
          result = (WTF *)(WTF::Ref<WebCore::StyleRulePage,WTF::RawPtrTraits<WebCore::StyleRulePage>,WTF::DefaultRefDerefTraits<WebCore::StyleRulePage>>::~Ref((_DWORD **)result, (WTF::StringImpl *)v53)+ 2);
          v83 = (WTF *)((char *)v83 + 16);
        }
        while (result != v84);
      }
    }
    if (v80)
    {
      if (*((WTF **)this + 90) == v80)
      {
        *((_QWORD *)this + 90) = 0;
        *((_DWORD *)this + 182) = 0;
      }
      return (WTF *)WTF::fastFree(v80, v53);
    }
  }
  return result;
}

WTF *WTF::VectorMover<false,WebCore::Style::RuleSet::DynamicMediaQueryRules>::move(WTF *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 6);
      *((_DWORD *)v5 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 7);
      *((_DWORD *)v5 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v8 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 10);
      *((_DWORD *)v5 + 10) = 0;
      *(_DWORD *)(a3 + 40) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 11);
      *((_DWORD *)v5 + 11) = 0;
      *(_DWORD *)(a3 + 44) = v8;
      *(_WORD *)(a3 + 48) = *((_WORD *)v5 + 24);
      v9 = *((unsigned int *)v5 + 11);
      if ((_DWORD)v9)
      {
        v13 = (_DWORD **)*((_QWORD *)v5 + 4);
        v14 = 8 * v9;
        do
        {
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*v15 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
            else
              --*v15;
          }
          ++v13;
          v14 -= 8;
        }
        while (v14);
      }
      v10 = (WTF *)*((_QWORD *)v5 + 4);
      if (v10)
      {
        *((_QWORD *)v5 + 4) = 0;
        *((_DWORD *)v5 + 10) = 0;
        WTF::fastFree(v10, a2);
      }
      v11 = (WTF *)*((_QWORD *)v5 + 2);
      if (v11)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v11, a2);
      }
      v12 = *((unsigned int *)v5 + 3);
      if ((_DWORD)v12)
      {
        v16 = *(_QWORD *)v5;
        v17 = 16 * v12;
        do
        {
          v16 = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, a2)
              + 16;
          v17 -= 16;
        }
        while (v17);
      }
      result = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      a3 += 56;
      v5 = (WTF *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WebCore::Style::RuleSetBuilder::addRulesFromSheetContents(WTF::StringImpl *this, const WebCore::StyleSheetContents *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::StyleSheetContents *v12;
  uint64_t *v13;
  uint64_t v14;
  const WebCore::StyleSheetContents *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF::StringImpl *v21;

  v2 = this;
  v3 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v3)
  {
    v10 = *((_QWORD *)a2 + 5);
    v11 = 8 * v3;
    while (*(_DWORD *)(*(_QWORD *)v10 + 40) == 1)
    {
      v12 = a2;
      this = WebCore::Style::RuleSetBuilder::registerLayers(v2, *(_QWORD *)(*(_QWORD *)v10 + 24), *(_DWORD *)(*(_QWORD *)v10 + 36));
      v10 += 8;
      v11 -= 8;
      a2 = v12;
      if (!v11)
        goto LABEL_2;
    }
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::MediaQueryCollector::pop(v19, v20);
  }
  else
  {
LABEL_2:
    v4 = *((unsigned int *)a2 + 17);
    if ((_DWORD)v4)
    {
      v13 = (uint64_t *)*((_QWORD *)a2 + 7);
      v14 = 8 * v4;
      do
      {
        v15 = a2;
        v16 = *v13;
        if (*(_QWORD *)(*v13 + 64) && *(_BYTE *)(v16 + 120))
        {
          if (WebCore::Style::RuleSetBuilder::MediaQueryCollector::pushAndEvaluate((uint64_t)v2 + 8, (unsigned __int8 **)(v16 + 48)))
          {
            v17 = *v13;
            v18 = *v13;
            if (*(_BYTE *)(*v13 + 88))
            {
              if (!*(_QWORD *)v2 && *((_DWORD *)v2 + 9))
                *((_BYTE *)v2 + 160) = 1;
              WebCore::Style::RuleSetBuilder::pushCascadeLayer(v2, (uint64_t *)(v17 + 72));
              v18 = *v13;
            }
            WebCore::Style::RuleSetBuilder::addRulesFromSheetContents(v2, *(const WebCore::StyleSheetContents **)(v18 + 64));
            if (*(_BYTE *)(v17 + 88))
              WebCore::Style::RuleSetBuilder::popCascadeLayer((unsigned int *)v2, (WTF::StringImpl *)*(unsigned int *)(v17 + 84));
          }
          this = (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::MediaQueryCollector::pop((uint64_t)v2 + 8, (void *)(*v13 + 48));
        }
        ++v13;
        v14 -= 8;
        a2 = v15;
      }
      while (v14);
    }
    v5 = *((unsigned int *)a2 + 25);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)*((_QWORD *)a2 + 11);
      v7 = 8 * v5;
      do
      {
        if (*((_BYTE *)v2 + 160))
          break;
        v8 = *v6;
        *(_DWORD *)v8 = *(_DWORD *)*v6 + 1;
        v21 = v8;
        WebCore::Style::RuleSetBuilder::addChildRule(v2, (WTF::StringImpl *)&v21);
        this = v21;
        v21 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 1)
            this = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)this, v9);
          else
            --*(_DWORD *)this;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return this;
}

uint64_t WebCore::Style::RuleSetBuilder::MediaQueryCollector::pop(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  WTF *v45;
  unsigned int *v46;
  uint64_t v47;
  __int16 *v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  unsigned int v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD **v67;
  _DWORD *v68;
  WTF *v69;
  uint64_t v70;
  _DWORD *v71;
  WTF *v72;
  uint64_t v73;
  _QWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  WTF *v79[2];
  WTF *v80[2];
  WTF *v81[2];
  __int16 v82;
  uint64_t v83;
  unsigned int v84;
  int v85;

  v2 = *(unsigned int *)(result + 28);
  if (!(_DWORD)v2)
    return result;
  v3 = result;
  v4 = v2 - 1;
  v5 = *(_QWORD *)(result + 16);
  if (*(void **)(v5 + 32 * (v2 - 1)) != a2)
    return result;
  if (*(_DWORD *)(v5 + 32 * v4 + 20) || !*(_BYTE *)(result + 8))
  {
    *(_OWORD *)v80 = 0u;
    *(_OWORD *)v81 = 0u;
    *(_OWORD *)v79 = 0u;
    v82 = 256;
    if (v2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1940DC014);
    }
    v6 = WTF::fastMalloc((WTF *)(16 * v2));
    v7 = (WTF *)v6;
    v8 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v77 = (WTF *)v6;
      v78 = v3;
      v10 = (_DWORD *)(v6 + 12);
      v11 = *(uint64_t **)(v3 + 16);
      v12 = 32 * v8;
      do
      {
        v13 = *v11;
        v14 = *(unsigned int *)(*v11 + 12);
        v83 = 0;
        v84 = 0;
        v85 = v14;
        if ((_DWORD)v14)
        {
          if (v14 >= 0x4924925)
            goto LABEL_109;
          v15 = 56 * v14;
          v16 = WTF::fastMalloc((WTF *)(56 * v14));
          v84 = v15 / 0x38;
          v83 = v16;
          WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(*(_QWORD *)v13, *(_QWORD *)v13 + 56 * *(unsigned int *)(v13 + 12), v16);
          v17 = v83;
          v18 = v84;
          LODWORD(v14) = v85;
        }
        else
        {
          v18 = 0;
          v17 = 0;
        }
        v83 = 0;
        *(_QWORD *)(v10 - 3) = v17;
        v84 = 0;
        *(v10 - 1) = v18;
        v85 = 0;
        *v10 = v14;
        v10 += 4;
        WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, a2);
        v11 += 4;
        ++v9;
        v12 -= 32;
      }
      while (v12);
      v19 = v79[0];
      if (HIDWORD(v79[1]))
      {
        v76 = 16 * HIDWORD(v79[1]);
        do
        {
          v19 = (WTF *)(WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, a2)+ 16);
          v76 -= 16;
        }
        while (v76);
        v19 = v79[0];
      }
      v7 = v77;
      v3 = v78;
      if (v19)
        WTF::fastFree(v19, a2);
    }
    else
    {
      v9 = 0;
    }
    v79[0] = v7;
    v79[1] = (WTF *)__PAIR64__(v9, v2);
    if (!*(_BYTE *)(v3 + 8))
    {
      LOBYTE(v82) = 1;
LABEL_46:
      v46 = (unsigned int *)(v3 + 32);
      v47 = *(unsigned int *)(v3 + 44);
      if ((_DWORD)v47 == *(_DWORD *)(v3 + 40))
      {
        v54 = WTF::Vector<WebCore::Style::RuleSet::DynamicMediaQueryRules,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v46, v47 + 1, (unint64_t)v79);
        v48 = (__int16 *)(v54 + 12);
        v49 = *(_QWORD *)(v3 + 32) + 56 * *(unsigned int *)(v3 + 44);
        *(_QWORD *)v49 = 0;
        *(_QWORD *)(v49 + 8) = 0;
        v55 = *(_QWORD *)v54;
        *(_QWORD *)v54 = 0;
        *(_QWORD *)v49 = v55;
        LODWORD(v55) = v54[2];
        v54[2] = 0;
        *(_DWORD *)(v49 + 8) = v55;
        LODWORD(v55) = v54[3];
        v54[3] = 0;
        *(_DWORD *)(v49 + 12) = v55;
        *(_QWORD *)(v49 + 16) = 0;
        *(_QWORD *)(v49 + 24) = 0;
        v56 = *((_QWORD *)v54 + 2);
        *((_QWORD *)v54 + 2) = 0;
        *(_QWORD *)(v49 + 16) = v56;
        LODWORD(v56) = v54[6];
        v54[6] = 0;
        *(_DWORD *)(v49 + 24) = v56;
        LODWORD(v56) = v54[7];
        v54[7] = 0;
        *(_DWORD *)(v49 + 28) = v56;
        *(_QWORD *)(v49 + 32) = 0;
        *(_QWORD *)(v49 + 40) = 0;
        v57 = *((_QWORD *)v54 + 4);
        *((_QWORD *)v54 + 4) = 0;
        *(_QWORD *)(v49 + 32) = v57;
        LODWORD(v57) = v54[10];
        v54[10] = 0;
        *(_DWORD *)(v49 + 40) = v57;
        v53 = v54[11];
        v54[11] = 0;
      }
      else
      {
        v48 = &v82;
        v49 = *(_QWORD *)v46 + 56 * v47;
        v50 = v79[0];
        v79[0] = 0;
        *(_QWORD *)v49 = v50;
        LODWORD(v50) = v79[1];
        LODWORD(v79[1]) = 0;
        *(_DWORD *)(v49 + 8) = (_DWORD)v50;
        LODWORD(v50) = HIDWORD(v79[1]);
        HIDWORD(v79[1]) = 0;
        *(_DWORD *)(v49 + 12) = (_DWORD)v50;
        *(_QWORD *)(v49 + 24) = 0;
        v51 = v80[0];
        v80[0] = 0;
        *(_QWORD *)(v49 + 16) = v51;
        LODWORD(v51) = v80[1];
        LODWORD(v80[1]) = 0;
        *(_DWORD *)(v49 + 24) = (_DWORD)v51;
        LODWORD(v51) = HIDWORD(v80[1]);
        HIDWORD(v80[1]) = 0;
        *(_DWORD *)(v49 + 28) = (_DWORD)v51;
        *(_QWORD *)(v49 + 40) = 0;
        v52 = v81[0];
        v81[0] = 0;
        *(_QWORD *)(v49 + 32) = v52;
        LODWORD(v52) = v81[1];
        LODWORD(v81[1]) = 0;
        *(_DWORD *)(v49 + 40) = (_DWORD)v52;
        v53 = HIDWORD(v81[1]);
        HIDWORD(v81[1]) = 0;
      }
      *(_DWORD *)(v49 + 44) = v53;
      *(_WORD *)(v49 + 48) = *v48;
      ++*(_DWORD *)(v3 + 44);
      if (HIDWORD(v81[1]))
      {
        v69 = v81[0];
        v70 = 8 * HIDWORD(v81[1]);
        do
        {
          v71 = *(_DWORD **)v69;
          *(_QWORD *)v69 = 0;
          if (v71)
          {
            if (*v71 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v71, (WTF::StringImpl *)a2);
            else
              --*v71;
          }
          v69 = (WTF *)((char *)v69 + 8);
          v70 -= 8;
        }
        while (v70);
      }
      v58 = v81[0];
      if (v81[0])
      {
        v81[0] = 0;
        LODWORD(v81[1]) = 0;
        WTF::fastFree(v58, a2);
      }
      v59 = v80[0];
      if (v80[0])
      {
        v80[0] = 0;
        LODWORD(v80[1]) = 0;
        WTF::fastFree(v59, a2);
      }
      if (HIDWORD(v79[1]))
      {
        v72 = v79[0];
        v73 = 16 * HIDWORD(v79[1]);
        do
        {
          v72 = (WTF *)(WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v72, a2)+ 16);
          v73 -= 16;
        }
        while (v73);
      }
      v60 = v79[0];
      if (v79[0])
      {
        v79[0] = 0;
        LODWORD(v79[1]) = 0;
        WTF::fastFree(v60, a2);
      }
      v61 = *(unsigned int *)(v3 + 28);
      if (!(_DWORD)v61)
      {
        __break(0xC471u);
        JUMPOUT(0x1940DC03CLL);
      }
      v5 = *(_QWORD *)(v3 + 16);
      v4 = v61 - 1;
      goto LABEL_59;
    }
    v20 = *(unsigned int *)(v3 + 28);
    if (!(_DWORD)v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1940DC01CLL);
    }
    v21 = v20 - 1;
    v22 = *(_QWORD *)(v3 + 16);
    v23 = v22 + 32 * v21;
    v24 = *(unsigned int *)(v23 + 20);
    if ((_DWORD)v24)
    {
      v25 = *(const void **)(v23 + 8);
      v26 = HIDWORD(v80[1]) + v24;
      if (v26 > LODWORD(v80[1]))
      {
        v27 = LODWORD(v80[1]) + ((unint64_t)LODWORD(v80[1]) >> 2);
        if (v27 >= 0x10)
          v28 = v27 + 1;
        else
          v28 = 16;
        if (v28 <= v26)
          v29 = HIDWORD(v80[1]) + v24;
        else
          v29 = v28;
        if (v29 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1940DC024);
        }
        v30 = v80[0];
        LODWORD(v80[1]) = v29;
        v80[0] = (WTF *)WTF::fastMalloc((WTF *)(8 * v29));
        memcpy(v80[0], v30, 8 * HIDWORD(v80[1]));
        if (v30)
        {
          if (v80[0] == v30)
          {
            v80[0] = 0;
            LODWORD(v80[1]) = 0;
          }
          WTF::fastFree(v30, v31);
        }
      }
      if (v26 < HIDWORD(v80[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x1940DC02CLL);
      }
      memcpy((char *)v80[0] + 8 * HIDWORD(v80[1]), v25, 8 * v24);
      HIDWORD(v80[1]) += v24;
      v32 = *(unsigned int *)(v3 + 28);
      if (!(_DWORD)v32)
      {
        __break(0xC471u);
        JUMPOUT(0x1940DC034);
      }
      v22 = *(_QWORD *)(v3 + 16);
      v21 = v32 - 1;
    }
    v33 = v22 + 32 * v21;
    v36 = *(_QWORD *)(v33 + 24);
    v35 = (_QWORD *)(v33 + 24);
    v34 = v36;
    if (v36)
    {
      v37 = *(unsigned int *)(v34 - 12);
      if ((_DWORD)v37)
      {
        if (v37 >> 29)
        {
LABEL_109:
          __break(0xC471u);
          JUMPOUT(0x1940DC00CLL);
        }
        v38 = WTF::fastMalloc((WTF *)(8 * v37));
        v39 = (WTF *)v38;
        v40 = (_QWORD *)*v35;
        if (*v35 && *((_DWORD *)v40 - 3))
        {
          v41 = *((unsigned int *)v40 - 1);
          if ((_DWORD)v41)
          {
            v42 = 8 * v41;
            v43 = (_QWORD *)*v35;
            while ((unint64_t)(*v43 + 1) <= 1)
            {
              ++v43;
              v42 -= 8;
              if (!v42)
                goto LABEL_40;
            }
          }
          else
          {
            v43 = (_QWORD *)*v35;
          }
          v74 = &v40[v41];
          if (v43 != v74)
          {
            v44 = 0;
            v75 = (_DWORD *)*v43;
LABEL_87:
            ++*v75;
            *(_QWORD *)(v38 + 8 * v44++) = v75;
            while (1)
            {
              if (++v43 == v74)
                goto LABEL_41;
              v75 = (_DWORD *)*v43;
              if ((unint64_t)(*v43 + 1) > 1)
              {
                if (v43 != v74)
                  goto LABEL_87;
                goto LABEL_41;
              }
            }
          }
        }
      }
      else
      {
        v39 = 0;
      }
    }
    else
    {
      v39 = 0;
      LODWORD(v37) = 0;
    }
LABEL_40:
    v44 = 0;
LABEL_41:
    v45 = v81[0];
    if (HIDWORD(v81[1]))
    {
      WTF::VectorTypeOperations<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>::destruct(v81[0], (WTF *)((char *)v81[0] + 8 * HIDWORD(v81[1])));
      v45 = v81[0];
    }
    if (v45)
      WTF::fastFree(v45, a2);
    v81[0] = v39;
    v81[1] = (WTF *)__PAIR64__(v44, v37);
    goto LABEL_46;
  }
LABEL_59:
  v62 = v5 + 32 * v4;
  v63 = *(_QWORD *)(v62 + 24);
  if (v63)
  {
    v66 = *(unsigned int *)(v63 - 4);
    if ((_DWORD)v66)
    {
      v67 = *(_DWORD ***)(v62 + 24);
      do
      {
        v68 = *v67;
        if (*v67 != (_DWORD *)-1)
        {
          *v67 = 0;
          if (v68)
          {
            if (*v68 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v68, (WTF::StringImpl *)a2);
            else
              --*v68;
          }
        }
        ++v67;
        --v66;
      }
      while (v66);
    }
    WTF::fastFree((WTF *)(v63 - 16), a2);
  }
  v65 = *(_QWORD *)(v62 + 8);
  v64 = (_QWORD *)(v62 + 8);
  result = v65;
  if (v65)
  {
    *v64 = 0;
    *(_DWORD *)(v5 + 32 * v4 + 16) = 0;
    result = WTF::fastFree((WTF *)result, a2);
  }
  *(_DWORD *)(v3 + 28) = v4;
  return result;
}

uint64_t WebCore::Style::RuleSetBuilder::MediaQueryCollector::pushAndEvaluate(uint64_t a1, unsigned __int8 **a2)
{
  unsigned int v2;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  _DWORD **v22;
  _DWORD *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t result;
  unsigned int v27;
  WebCore::MQ::MediaQueryEvaluator *v28;
  const WebCore::MQ::MediaQuery *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  WebCore::MQ::MediaQueryEvaluator *v34;
  unsigned __int8 **v35;
  WTF *v36;
  unsigned __int8 **v37;
  _DWORD **v38;
  unsigned __int8 *v39;
  unsigned __int8 v40;
  unsigned __int8 ***v41;

  v2 = *((_DWORD *)a2 + 3);
  if (v2)
  {
    v5 = 0;
    v34 = *(WebCore::MQ::MediaQueryEvaluator **)a1;
    v6 = *a2;
    v7 = (uint64_t)&(*a2)[56 * v2];
    do
    {
      v8 = *((_QWORD *)v6 + 1);
      if (!v8 || (*(_DWORD *)(v8 + 4) ? (v13 = v8 == WebCore::allAtomData) : (v13 = 1), v13 || v8 == *(_QWORD *)v34))
      {
        v40 = 0;
        v39 = &v40;
        v9 = v6[48];
        if (v6[48])
        {
          v9 = *((_DWORD *)v6 + 9);
          if (v9)
          {
            v10 = *((_QWORD *)v6 + 3);
            v11 = 88 * v9;
            while (1)
            {
              v35 = &v39;
              v36 = (WTF *)&v39;
              v37 = &v39;
              v12 = *(unsigned int *)(v10 + 80);
              if ((_DWORD)v12 == -1)
                break;
              v41 = &v35;
              ((void (*)(unsigned __int8 ****, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore2MQ16traverseFeaturesIRZNKS9_19MediaQueryEvaluator26collectDynamicDependenciesERKNS9_10MediaQueryEE3__0EEvRKNS_7variantIJNS9_9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEOT_EUlRKSI_E_JZNSA_ISG_EEvSN_SP_EUlRKSJ_E_ZNSA_ISG_EEvSN_SP_EUlRKSK_E_EEEEEJRKNS0_6__implIJSI_SJ_SK_EEEEEEDcSP_DpOT0____fmatrix[v12])(&v41, v10);
              v10 += 88;
              v11 -= 88;
              if (!v11)
              {
                v9 = v40;
                goto LABEL_10;
              }
            }
            v32 = std::__throw_bad_variant_access[abi:sn180100]();
            return WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v32, v33);
          }
        }
      }
      else
      {
        v9 = 0;
      }
LABEL_10:
      v5 |= v9;
      v6 += 56;
    }
    while (v6 != (unsigned __int8 *)v7);
    *(_BYTE *)(a1 + 48) |= v5;
    if (!v5)
      goto LABEL_45;
    v35 = a2;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v14 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 24))
    {
      v15 = WTF::Vector<WebCore::Style::RuleSetBuilder::MediaQueryCollector::DynamicContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 16, v14 + 1, (unint64_t)&v35);
      v16 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 28);
      v17 = *(_QWORD *)v15;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)v16 = v17;
      v18 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v16 + 8) = v18;
      LODWORD(v18) = *(_DWORD *)(v15 + 16);
      *(_DWORD *)(v15 + 16) = 0;
      *(_DWORD *)(v16 + 16) = v18;
      LODWORD(v18) = *(_DWORD *)(v15 + 20);
      *(_DWORD *)(v15 + 20) = 0;
      *(_DWORD *)(v16 + 20) = v18;
      *(_QWORD *)(v16 + 24) = 0;
      v19 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v16 + 24) = v19;
      v20 = v38;
      ++*(_DWORD *)(a1 + 28);
      if (v20)
      {
        v21 = *((unsigned int *)v20 - 1);
        if ((_DWORD)v21)
        {
          v22 = v20;
          do
          {
            v23 = *v22;
            if (*v22 != (_DWORD *)-1)
            {
              *v22 = 0;
              if (v23)
              {
                if (*v23 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v23, (WTF::StringImpl *)a2);
                else
                  --*v23;
              }
            }
            ++v22;
            --v21;
          }
          while (v21);
        }
        WTF::fastFree((WTF *)(v20 - 2), a2);
      }
    }
    else
    {
      v24 = *(_QWORD *)(a1 + 16) + 32 * v14;
      *(_QWORD *)v24 = a2;
      *(_QWORD *)(v24 + 16) = 0;
      v36 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      LODWORD(v37) = 0;
      *(_DWORD *)(v24 + 16) = 0;
      HIDWORD(v37) = 0;
      *(_DWORD *)(v24 + 20) = 0;
      v38 = 0;
      *(_QWORD *)(v24 + 24) = 0;
      ++*(_DWORD *)(a1 + 28);
    }
    v25 = v36;
    if (v36)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      WTF::fastFree(v25, a2);
    }
    if (!*(_BYTE *)(a1 + 8))
    {
LABEL_45:
      v27 = *((_DWORD *)a2 + 3);
      if (v27)
      {
        v28 = *(WebCore::MQ::MediaQueryEvaluator **)a1;
        v29 = (const WebCore::MQ::MediaQuery *)*a2;
        v30 = 56 * v27 - 56;
        do
        {
          result = WebCore::MQ::MediaQueryEvaluator::evaluate(v28, v29);
          if ((result & 1) != 0)
            break;
          v29 = (const WebCore::MQ::MediaQuery *)((char *)v29 + 56);
          v31 = v30;
          v30 -= 56;
        }
        while (v31);
        return result;
      }
    }
  }
  return 1;
}

uint64_t WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v6 = *(WTF **)a1;
    v7 = *(_QWORD *)a1 + 56 * v3;
    do
    {
      if (*((_BYTE *)v6 + 48))
      {
        v8 = *((_DWORD *)v6 + 9);
        v9 = (unsigned int *)*((_QWORD *)v6 + 3);
        if (v8)
        {
          v10 = 88 * v8;
          do
          {
            v11 = v9[20];
            if ((_DWORD)v11 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore2MQ9ConditionENS7_7FeatureENS7_15GeneralEnclosedEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v11])(&v13, v9);
            v9[20] = -1;
            v9 += 22;
            v10 -= 88;
          }
          while (v10);
          v9 = (unsigned int *)*((_QWORD *)v6 + 3);
        }
        if (v9)
        {
          *((_QWORD *)v6 + 3) = 0;
          *((_DWORD *)v6 + 8) = 0;
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      v12 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v6 = (WTF *)((char *)v6 + 56);
    }
    while (v6 != (WTF *)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::Style::RuleSetBuilder::MediaQueryCollector::DynamicContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::Style::RuleSetBuilder::MediaQueryCollector::DynamicContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::Style::RuleSetBuilder::MediaQueryCollector::DynamicContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Style::RuleSetBuilder::MediaQueryCollector::DynamicContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1940DC5A8);
    }
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    result = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = result;
    if ((_DWORD)v5)
    {
      v7 = (WTF *)((char *)v4 + 32 * v5);
      v8 = v4;
      do
      {
        v9 = *(_QWORD *)v8;
        *(_QWORD *)(result + 8) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)result = v9;
        v10 = *((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        *(_QWORD *)(result + 8) = v10;
        LODWORD(v10) = *((_DWORD *)v8 + 4);
        *((_DWORD *)v8 + 4) = 0;
        *(_DWORD *)(result + 16) = v10;
        LODWORD(v10) = *((_DWORD *)v8 + 5);
        *((_DWORD *)v8 + 5) = 0;
        *(_DWORD *)(result + 20) = v10;
        *(_QWORD *)(result + 24) = 0;
        v11 = *((_QWORD *)v8 + 3);
        *((_QWORD *)v8 + 3) = 0;
        *(_QWORD *)(result + 24) = v11;
        v12 = result;
        WebCore::Style::RuleSetBuilder::MediaQueryCollector::DynamicContext::~DynamicContext(v8, v6);
        v8 = (WTF *)((char *)v8 + 32);
        result = v12 + 32;
      }
      while (v8 != v7);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

WTF *WTF::VectorDestructor<true,WebCore::Style::RuleSet::DynamicMediaQueryRules>::destruct(WTF *result, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((unsigned int *)v3 + 11);
      if ((_DWORD)v4)
      {
        v8 = (_DWORD **)*((_QWORD *)v3 + 4);
        v9 = 8 * v4;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*v10 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
            else
              --*v10;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v5 = (WTF *)*((_QWORD *)v3 + 4);
      if (v5)
      {
        *((_QWORD *)v3 + 4) = 0;
        *((_DWORD *)v3 + 10) = 0;
        WTF::fastFree(v5, a2);
      }
      v6 = (WTF *)*((_QWORD *)v3 + 2);
      if (v6)
      {
        *((_QWORD *)v3 + 2) = 0;
        *((_DWORD *)v3 + 6) = 0;
        WTF::fastFree(v6, a2);
      }
      v7 = *((unsigned int *)v3 + 3);
      if ((_DWORD)v7)
      {
        v11 = *(_QWORD *)v3;
        v12 = 16 * v7;
        do
        {
          v11 = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2)
              + 16;
          v12 -= 16;
        }
        while (v12);
      }
      result = *(WTF **)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v3 = (WTF *)((char *)v3 + 56);
    }
    while (v3 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::Style::RuleSet::DynamicMediaQueryRules,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 56 * result[3] > a3)
  {
    WTF::Vector<WebCore::Style::RuleSet::DynamicMediaQueryRules,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF *)result, a2);
    return (unsigned int *)(*(_QWORD *)v4 + v3 - (_QWORD)v5);
  }
  v6 = result[2];
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return (unsigned int *)v3;
  if (v8 < 0x4924925)
  {
    v9 = (WTF *)((char *)v5 + 56 * result[3]);
    v10 = 56 * v8;
    v11 = WTF::fastMalloc((WTF *)(56 * v8));
    v4[2] = v10 / 0x38;
    *(_QWORD *)v4 = v11;
    WTF::VectorMover<false,WebCore::Style::RuleSet::DynamicMediaQueryRules>::move(v5, v9, v11);
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        v4[2] = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return (unsigned int *)v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Style::Resolver::document(WebCore::Style::Resolver *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::Style::Resolver::invalidateMatchedDeclarationsCache(WebCore::Style::Resolver *this, void *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 53);
  if (result)
  {
    *((_QWORD *)this + 53) = 0;
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(result, a2);
  }
  return result;
}

_QWORD *WebCore::Style::RuleSet::addPageRule(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a2;
  v2 = *((unsigned int *)result + 117);
  if ((_DWORD)v2 == *((_DWORD *)result + 116))
    return WTF::Vector<WebCore::StyleRulePage *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRulePage *>((uint64_t)(result + 57), (unint64_t)&v3);
  *(_QWORD *)(result[57] + 8 * v2) = a2;
  *((_DWORD *)result + 117) = v2 + 1;
  return result;
}

uint64_t WebCore::Document::keyframesRuleDidChange(uint64_t this, const WTF::StringImpl **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _QWORD v11[4];
  char v12;

  {
    if (WebCore::WebAnimation::instances(void)::instances
      && *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12))
    {
      v3 = this;
      v4 = *(unsigned int *)(WebCore::WebAnimation::instances(void)::instances - 4);
      if ((_DWORD)v4)
      {
        v5 = 8 * v4;
        for (i = (uint64_t *)WebCore::WebAnimation::instances(void)::instances; (unint64_t)(*i + 1) <= 1; ++i)
        {
          v5 -= 8;
          if (!v5)
            return this;
        }
      }
      else
      {
        i = (uint64_t *)WebCore::WebAnimation::instances(void)::instances;
      }
      v7 = WebCore::WebAnimation::instances(void)::instances + 8 * v4;
      if ((uint64_t *)v7 != i)
      {
LABEL_11:
        v8 = *i;
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*i + 112))(*i);
        if ((_DWORD)this)
        {
          if (*(_BYTE *)(v8 + 158))
          {
            this = WTF::equal(*(WTF **)(v8 + 232), *a2, v9);
            if ((_DWORD)this)
            {
              WebCore::StyleOriginatedAnimation::owningElement(v8, (uint64_t)v11);
              if (v12 && (*(_BYTE *)(v11[0] + 22) & 8) != 0 && *(_QWORD *)(*(_QWORD *)(v11[0] + 40) + 8) == v3)
                WebCore::CSSAnimation::keyframesRuleDidChange((WTF::StringImpl *)v8);
              this = std::optional<WebCore::Styleable const>::~optional((uint64_t)v11, v10);
            }
          }
        }
        while (++i != (uint64_t *)v7)
        {
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i == (uint64_t *)v7)
              return this;
            goto LABEL_11;
          }
        }
      }
    }
  }
  else
  {
    WebCore::WebAnimation::instances(void)::instances = 0;
  }
  return this;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **result;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl *)v6;
    do
    {
      if (*(_QWORD *)v14 != -1)
      {
        if (*(_QWORD *)v14)
        {
          v15 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>::~KeyValuePair((uint64_t)v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>::~KeyValuePair((uint64_t)v14, v10);
        }
      }
      v14 = (WTF::StringImpl *)((char *)v14 + 16);
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v5, a2);
}

uint64_t WebCore::RenderObject::initializeFragmentedFlowStateOnInsertion(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL canContainFixedPositionObjects;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int isAtomicInlineLevelBox;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39[3];
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;

  v1 = this;
  v2 = *(_BYTE *)(this + 52) & 7;
  if (v2 != 1 || (*(_BYTE *)(this + 53) & 2) == 0)
  {
    v3 = *(_QWORD *)(this + 32);
    if (!v3)
      goto LABEL_98;
    this = *(_QWORD *)(v3 + 8);
    if (!this)
      goto LABEL_98;
    v4 = *(unsigned __int8 *)(v1 + 46);
    if (v4 != 25)
    {
      v5 = *(_BYTE *)(v1 + 45);
      if ((v5 & 2) != 0)
      {
        v12 = *(_DWORD *)(this + 20);
        goto LABEL_31;
      }
      if (v2 == 1 && (*(_BYTE *)(v1 + 53) & 8) != 0)
        goto LABEL_34;
      if ((v4 - 71) <= 0xF && ((1 << (v4 - 71)) & 0xA001) != 0)
      {
        do
        {
LABEL_11:
          if (*(_BYTE *)(this + 46) == 103)
          {
            v13 = this;
            goto LABEL_29;
          }
          v6 = *(_QWORD *)(this + 32);
          if (!v6)
            break;
          this = *(_QWORD *)(v6 + 8);
        }
        while (this);
        if ((*(_BYTE *)(v1 + 23) & 0x10) == 0)
          return this;
        v7 = 0;
        return WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants(v1, v7, 0);
      }
      if (v2 == 4 && (*(_BYTE *)(v1 + 53) & 1) != 0)
      {
LABEL_34:
        v13 = v1;
        if (v4 != 103)
          goto LABEL_11;
LABEL_29:
        v14 = *(_DWORD *)(v13 + 16);
        *(_DWORD *)(v13 + 16) = v14 + 1;
        if (v14 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1940DCD9CLL);
        }
        v12 = *(_DWORD *)(v13 + 20);
        *(_DWORD *)(v13 + 16) = v14;
LABEL_31:
        v7 = (v12 >> 28) & 1;
        if ((_DWORD)v7 == (*(_BYTE *)(v1 + 23) & 0x10) >> 4)
          return this;
        return WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants(v1, v7, 0);
      }
      v42 = 0;
      v41 = 0;
      if (v4 == 17)
        goto LABEL_26;
      v39[0] = &v41;
      v39[1] = &v42;
      v39[2] = &v40;
      v40 = v1;
      if ((v5 & 1) == 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
        if (v8)
        {
          if ((*(_WORD *)(v8 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1940DCDBCLL);
          }
          if ((*(_BYTE *)(v8 + 23) & 0x20) != 0)
            goto LABEL_102;
        }
      }
      v9 = *(_QWORD *)(v1 + 96);
      if ((v9 & 0xF80000000000) == 0x480000000000)
      {
LABEL_102:
        WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v39);
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 24) + 8) + 40) + 8) + 1944);
      }
      else
      {
        v10 = (v9 >> 19) & 7;
        if (v10 <= 3 && v10 != 2)
          goto LABEL_26;
        v38 = this;
        ++*(_DWORD *)(this + 16);
        if (v10 == 2)
        {
          do
          {
            v15 = *(unsigned __int8 *)(this + 46);
            if (v15 == 49
              || (*(_BYTE *)(this + 98) & 0x38) != 0
              || ((*(_BYTE *)(this + 45) & 0x40) != 0 || (v15 - 36) <= 4 && v15 != 38)
              && (*(_BYTE *)(this + 22) & 2) != 0)
            {
              break;
            }
            v16 = *(_QWORD *)(*(_QWORD *)(this + 88) + 40);
            if (*(_DWORD *)(*(_QWORD *)(v16 + 72) + 20))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(this + 24) + 8))
                break;
            }
            if ((*(_BYTE *)(this + 45) & 0x40) != 0 && *(_QWORD *)(v16 + 200))
            {
              v33 = this;
              if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(*(WebCore::WillChangeData **)(v16 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(this + 24) + 8)) & 1) != 0)break;
              this = v33;
              v15 = *(unsigned __int8 *)(v33 + 46);
            }
            if (v15 == 67 || v15 == 90)
              break;
            v17 = *(_QWORD *)(*(_QWORD *)(this + 88) + 40);
            v18 = *(_BYTE *)(v17 + 462);
            v19 = *(_BYTE *)(v17 + 642) & 3;
            v20 = v18 | 0x19;
            if (v19 == 1)
              v18 |= 0x15u;
            v21 = v19 == 2 ? v20 : v18;
            if ((v21 & 3) != 0)
            {
              if ((*(_BYTE *)(this + 20) & 1) != 0
                || (v36 = this,
                    isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)this),
                    this = v36,
                    isAtomicInlineLevelBox))
              {
                if ((*(_QWORD *)(this + 96) & 0x1FLL) != 0x19
                  && (*(unsigned __int8 *)(this + 46) - 36 > 4 || (*(_BYTE *)(this + 52) & 7) == 1))
                {
                  break;
                }
              }
            }
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 88) + 40) + 636) & 0xC0000) != 0)
            {
              if ((*(_BYTE *)(this + 20) & 1) != 0
                || (v37 = this,
                    v35 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)this),
                    this = v37,
                    v35))
              {
                if ((*(_QWORD *)(this + 96) & 0x1FLL) != 0x19)
                {
                  v31 = *(unsigned __int8 *)(this + 46);
                  if ((v31 - 36) <= 4)
                  {
                    if (v31 == 36)
                      break;
                  }
                  else if (v31 != 63 && v31 != 35)
                  {
                    break;
                  }
                }
              }
            }
            v22 = v38;
            if (v41 && v38 == v42)
              *v41 = 1;
            v23 = *(_QWORD *)(v22 + 32);
            if (v23)
            {
              this = *(_QWORD *)(v23 + 8);
              if (this)
                ++*(_DWORD *)(this + 16);
            }
            else
            {
              this = 0;
            }
            v38 = this;
            v24 = *(_DWORD *)(v22 + 16);
            if (!v24)
            {
              __break(0xC471u);
              JUMPOUT(0x1940DCE7CLL);
            }
            *(_DWORD *)(v22 + 16) = v24 - 1;
          }
          while (this);
          v26 = v38;
        }
        else
        {
          while (1)
          {
            canContainFixedPositionObjects = WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)this);
            v26 = v38;
            if (canContainFixedPositionObjects)
              break;
            if ((*(_BYTE *)(v38 + 45) & 1) == 0)
            {
              v27 = *(_QWORD *)(*(_QWORD *)(v38 + 24) + 8);
              if (v27)
              {
                if ((*(_WORD *)(v27 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1940DCF60);
                }
                if ((*(_BYTE *)(v27 + 23) & 0x20) != 0)
                  goto LABEL_101;
              }
            }
            if ((*(_QWORD *)(v38 + 96) & 0xF80000000000) == 0x480000000000)
            {
LABEL_101:
              WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v39);
              v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 24) + 8) + 40) + 8) + 1944);
              v26 = v38;
              goto LABEL_94;
            }
            if (v41 && v38 == v42)
              *v41 = 1;
            v28 = *(_QWORD *)(v26 + 32);
            if (v28)
              v29 = *(_QWORD *)(v28 + 8);
            else
              v29 = 0;
            WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v38, v29);
            v30 = 0;
            this = v38;
            if (!v38)
              goto LABEL_97;
          }
        }
        v30 = v26;
LABEL_94:
        if (v26)
        {
          v32 = *(_DWORD *)(v26 + 16);
          if (!v32)
          {
            __break(0xC471u);
            JUMPOUT(0x1940DCF40);
          }
          *(_DWORD *)(v26 + 16) = v32 - 1;
        }
      }
LABEL_97:
      this = v30;
      if (v30)
      {
LABEL_26:
        v11 = *(_DWORD *)(this + 16);
        *(_DWORD *)(this + 16) = v11 + 1;
        if (v11 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1940DCDDCLL);
        }
        v12 = *(_DWORD *)(this + 20);
        *(_DWORD *)(this + 16) = v11;
        goto LABEL_31;
      }
LABEL_98:
      v12 = *(_DWORD *)(v1 + 20);
      goto LABEL_31;
    }
    if ((*(_BYTE *)(v1 + 23) & 0x10) == 0)
    {
      v7 = 1;
      return WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants(v1, v7, 0);
    }
  }
  return this;
}

double WebCore::GraphicsLayerCA::computeVisibleAndCoverageRect(WebCore::GraphicsLayerCA *this, WebCore::TransformState *a2, uint64_t a3, int a4, char a5)
{
  uint64_t v10;
  float v11;
  float v12;
  float64x2_t *v13;
  const WebCore::FloatPoint *v14;
  __int128 v15;
  float m_x;
  float v17;
  float v18;
  float v19;
  float v20;
  float m_y;
  float v23;
  float v24;
  float v26;
  float v28;
  float v29;
  float v30;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  __int128 v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  double v61;
  float v62;
  double v63;
  float v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  double result;
  __int128 v69;
  float v70;
  float v71;
  BOOL v72[130];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  FloatQuad v82;

  v10 = 64;
  if (!*((_BYTE *)a2 + 72))
    v10 = 56;
  v81 = *(_QWORD *)((char *)a2 + v10);
  (*(void (**)(_QWORD, WebCore::TransformState *, uint64_t *))(**((_QWORD **)a2 + 3) + 80))(*((_QWORD *)a2 + 3), a2, &v81);
  v77 = xmmword_1969F7F50;
  v78 = unk_1969F7F60;
  v79 = xmmword_1969F7F70;
  v80 = unk_1969F7F80;
  v73 = xmmword_1969F7F10;
  v74 = unk_1969F7F20;
  v75 = xmmword_1969F7F30;
  v76 = unk_1969F7F40;
  if ((a5 & 1) != 0
    && (*(unsigned int (**)(_QWORD, WebCore::TransformState *, __int128 *))(**((_QWORD **)a2 + 3) + 72))(*((_QWORD *)a2 + 3), a2, &v73))
  {
    v12 = *((float *)&v81 + 1);
    v11 = *(float *)&v81;
    v13 = (float64x2_t *)&v73;
    v14 = a2;
  }
  else
  {
    v12 = *((float *)&v81 + 1);
    v11 = *(float *)&v81;
    v14 = a2;
    v13 = 0;
  }
  WebCore::GraphicsLayerCA::layerTransform((WebCore::GraphicsLayerCA *)&v72[2], v14, v13, v11, v12);
  v72[1] = 0;
  WebCore::TransformState::applyTransform((float64x2_t **)a3, (float64x2_t *)&v72[2], a4, (double (*)[4][4])&v72[1]);
  v72[0] = 0;
  v15 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)&v82.var0.m_x = *(_OWORD *)(a3 + 8);
  *(_OWORD *)&v82.var2.m_x = v15;
  WebCore::TransformState::mapQuad(a3, &v82, (double (*)[4][4])*(unsigned int *)(a3 + 112), v72);
  m_x = v82.var0.m_x;
  v17 = v82.var2.m_x;
  if (v82.var3.m_x >= v82.var2.m_x)
    v18 = v82.var2.m_x;
  else
    v18 = v82.var3.m_x;
  if (v82.var1.m_x >= v82.var0.m_x)
    v19 = v82.var0.m_x;
  else
    v19 = v82.var1.m_x;
  if (v18 >= v19)
    v18 = v19;
  v20 = fabsf(v18);
  if (v20 == INFINITY || v20 > 2147500000.0)
    v18 = (float)((SLODWORD(v18) >> 31) ^ 0x7FFFFFFF);
  if (v82.var3.m_y >= v82.var2.m_y)
    m_y = v82.var2.m_y;
  else
    m_y = v82.var3.m_y;
  if (v82.var1.m_y >= v82.var0.m_y)
    v23 = v82.var0.m_y;
  else
    v23 = v82.var1.m_y;
  if (m_y >= v23)
    m_y = v23;
  v24 = fabsf(m_y);
  if (v24 == INFINITY || v24 > 2147500000.0)
    m_y = (float)((SLODWORD(m_y) >> 31) ^ 0x7FFFFFFF);
  if (v82.var0.m_x < v82.var1.m_x)
    m_x = v82.var1.m_x;
  if (v82.var2.m_x < v82.var3.m_x)
    v17 = v82.var3.m_x;
  if (m_x < v17)
    m_x = v17;
  v26 = fabsf(m_x);
  if (v26 == INFINITY || v26 > 2147500000.0)
    m_x = (float)((SLODWORD(m_x) >> 31) ^ 0x7FFFFFFF);
  if (v82.var0.m_y >= v82.var1.m_y)
    v28 = v82.var0.m_y;
  else
    v28 = v82.var1.m_y;
  if (v82.var2.m_y >= v82.var3.m_y)
    v29 = v82.var2.m_y;
  else
    v29 = v82.var3.m_y;
  if (v28 < v29)
    v28 = v29;
  v30 = fabsf(v28);
  if (v30 == INFINITY || v30 > 2147500000.0)
    v28 = (float)((SLODWORD(v28) >> 31) ^ 0x7FFFFFFF);
  v33 = *((float *)a2 + 22);
  v32 = *((float *)a2 + 23);
  v34 = 0.0;
  if (v72[1] || v72[0])
  {
    v36 = 0.0;
  }
  else
  {
    v35 = v28 - m_y;
    v36 = fmaxf(v18, 0.0);
    v34 = fmaxf(m_y, 0.0);
    v37 = v18 + (float)(m_x - v18);
    if (v37 >= (float)(v33 + 0.0))
      v37 = v33 + 0.0;
    v38 = m_y + v35;
    if (v38 >= (float)(v32 + 0.0))
      v38 = v32 + 0.0;
    if (v36 >= v37 || v34 >= v38)
    {
      v36 = 0.0;
      v34 = 0.0;
      v37 = 0.0;
      v38 = 0.0;
    }
    v33 = v37 - v36;
    v32 = v38 - v34;
  }
  if ((*(_WORD *)((_BYTE *)a2 + 177) & 0x10) != 0)
  {
    WebCore::TransformState::flatten((WebCore::TransformState *)a3, 0);
    v40 = v36 + v33;
    v41 = v34 + v32;
    *(float *)(a3 + 8) = v36;
    *(float *)(a3 + 12) = v34;
    *(float *)(a3 + 16) = v36 + v33;
    *(float *)(a3 + 20) = v34;
    *(float *)(a3 + 24) = v36 + v33;
    *(float *)(a3 + 28) = v34 + v32;
    *(float *)(a3 + 32) = v36;
    *(float *)(a3 + 36) = v34 + v32;
    if (*(_BYTE *)(a3 + 72))
    {
      *(float *)(a3 + 40) = v36;
      *(float *)(a3 + 44) = v34;
      *(float *)(a3 + 48) = v40;
      *(float *)(a3 + 52) = v34;
      *(float *)(a3 + 56) = v40;
      *(float *)(a3 + 60) = v41;
      *(float *)(a3 + 64) = v36;
      *(float *)(a3 + 68) = v41;
      *(_BYTE *)(a3 + 72) = 1;
    }
  }
  v70 = *((float *)a2 + 25);
  v71 = *((float *)a2 + 24);
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 78) + 32))(*((_QWORD *)a2 + 78)))
  {
    v42 = (*(float (**)(_QWORD))(**((_QWORD **)a2 + 78) + 248))(*((_QWORD *)a2 + 78));
    v70 = v43;
    v71 = v42;
  }
  v72[0] = 0;
  v44 = v34;
  v45 = v36;
  v46 = v33;
  v47 = v32;
  if (*(_BYTE *)(a3 + 72))
  {
    v48 = *(_OWORD *)(a3 + 56);
    *(_OWORD *)&v82.var0.m_x = *(_OWORD *)(a3 + 40);
    *(_OWORD *)&v82.var2.m_x = v48;
    WebCore::TransformState::mapQuad(a3, &v82, (double (*)[4][4])*(unsigned int *)(a3 + 112), v72);
    v44 = v34;
    v45 = v36;
    v46 = v33;
    v47 = v32;
    if (!v72[0] && !v72[1])
    {
      v50 = v82.var0.m_x;
      v49 = v82.var0.m_y;
      if (v82.var3.m_x >= v82.var2.m_x)
        v51 = v82.var2.m_x;
      else
        v51 = v82.var3.m_x;
      if (v82.var1.m_x >= v82.var0.m_x)
        v52 = v82.var0.m_x;
      else
        v52 = v82.var1.m_x;
      if (v51 >= v52)
        v45 = v52;
      else
        v45 = v51;
      v53 = fabsf(v45);
      if (v53 == INFINITY || v53 > 2147500000.0)
        v45 = (float)((SLODWORD(v45) >> 31) ^ 0x7FFFFFFF);
      if (v82.var3.m_y >= v82.var2.m_y)
        v54 = v82.var2.m_y;
      else
        v54 = v82.var3.m_y;
      if (v82.var1.m_y >= v82.var0.m_y)
        v55 = v82.var0.m_y;
      else
        v55 = v82.var1.m_y;
      if (v54 >= v55)
        v44 = v55;
      else
        v44 = v54;
      v56 = fabsf(v44);
      if (v56 == INFINITY || v56 > 2147500000.0)
        v44 = (float)((SLODWORD(v44) >> 31) ^ 0x7FFFFFFF);
      if (v82.var0.m_x < v82.var1.m_x)
        v50 = v82.var1.m_x;
      if (v82.var2.m_x >= v82.var3.m_x)
        v57 = v82.var2.m_x;
      else
        v57 = v82.var3.m_x;
      if (v50 < v57)
        v50 = v57;
      v58 = fabsf(v50);
      if (v58 == INFINITY || v58 > 2147500000.0)
        v50 = (float)((SLODWORD(v50) >> 31) ^ 0x7FFFFFFF);
      if (v82.var0.m_y < v82.var1.m_y)
        v49 = v82.var1.m_y;
      if (v82.var2.m_y >= v82.var3.m_y)
        v59 = v82.var2.m_y;
      else
        v59 = v82.var3.m_y;
      if (v49 < v59)
        v49 = v59;
      v60 = fabsf(v49);
      if (v60 == INFINITY || v60 > 2147500000.0)
        v49 = (float)((SLODWORD(v49) >> 31) ^ 0x7FFFFFFF);
      v46 = v50 - v45;
      v47 = v49 - v44;
    }
  }
  if (v71 != 0.0 || v70 != 0.0)
  {
    v61 = v71 * -64.0;
    if (v61 >= 2147483650.0)
    {
      v62 = NAN;
    }
    else if (v61 <= -2147483650.0)
    {
      v62 = -0.0;
    }
    else
    {
      LODWORD(v62) = (int)v61;
    }
    v82.var0.m_x = v62;
    v63 = (float)-v70 * 64.0;
    if (v63 >= 2147483650.0)
    {
      v64 = NAN;
    }
    else if (v63 <= -2147483650.0)
    {
      v64 = -0.0;
    }
    else
    {
      LODWORD(v64) = (int)v63;
    }
    v82.var0.m_y = v64;
    WebCore::TransformState::move((WebCore::TransformState *)a3, (WebCore::LayoutSize *)&v82, a4);
    v36 = v36 + v71;
    v34 = v34 + v70;
    v45 = v71 + v45;
    v44 = v70 + v44;
  }
  *(float *)this = v36;
  *((float *)this + 1) = v34;
  *((float *)this + 2) = v33;
  *((float *)this + 3) = v32;
  *((float *)this + 4) = v45;
  *((float *)this + 5) = v44;
  *((float *)this + 6) = v46;
  *((float *)this + 7) = v47;
  v65 = v78;
  *((_OWORD *)this + 6) = v77;
  *((_OWORD *)this + 7) = v65;
  v66 = v80;
  *((_OWORD *)this + 8) = v79;
  *((_OWORD *)this + 9) = v66;
  v67 = v74;
  *((_OWORD *)this + 2) = v73;
  *((_OWORD *)this + 3) = v67;
  result = *(double *)&v75;
  v69 = v76;
  *((_OWORD *)this + 4) = v75;
  *((_OWORD *)this + 5) = v69;
  return result;
}

void WebCore::TransformState::mapQuad(uint64_t a1, FloatQuad *a2, double (*a3)[4][4], BOOL *a4)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float64x2_t *v14;
  __int128 *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22[8];
  char v23;
  float64x2_t v24[8];
  float32x4_t v25[2];

  if ((_DWORD)a3)
  {
    v6 = *(_DWORD *)(a1 + 96);
    v7 = *(_DWORD *)(a1 + 100);
    if (v6 == 0x80000000)
      v8 = 0x7FFFFFFFLL;
    else
      v8 = -v6;
    if (v7 == 0x80000000)
      v9 = 0x7FFFFFFFLL;
    else
      v9 = -v7;
    v10 = (int32x2_t)(v8 | (v9 << 32));
  }
  else
  {
    v10 = *(int32x2_t *)(a1 + 96);
  }
  *(float32x2_t *)v11.f32 = vmul_f32(vcvt_f32_s32(v10), (float32x2_t)vdup_n_s32(0x3C800000u));
  v11.i64[1] = v11.i64[0];
  v12 = vaddq_f32(*(float32x4_t *)&a2->var0.m_x, v11);
  v13 = vaddq_f32(v11, *(float32x4_t *)&a2->var2.m_x);
  *(float32x4_t *)&a2->var0.m_x = v12;
  *(float32x4_t *)&a2->var2.m_x = v13;
  v14 = *(float64x2_t **)(a1 + 80);
  if (v14)
  {
    if ((_DWORD)a3)
    {
      WebCore::TransformationMatrix::inverse(v14->f64, a3, (uint64_t)v22);
      if (v23)
        v15 = (__int128 *)v22;
      else
        v15 = &constinit_5;
      v16 = (float64x2_t)v15[5];
      v24[4] = (float64x2_t)v15[4];
      v24[5] = v16;
      v17 = (float64x2_t)v15[7];
      v24[6] = (float64x2_t)v15[6];
      v24[7] = v17;
      v18 = (float64x2_t)v15[1];
      v24[0] = (float64x2_t)*v15;
      v24[1] = v18;
      v19 = (float64x2_t)v15[3];
      v24[2] = (float64x2_t)v15[2];
      v24[3] = v19;
      WebCore::TransformationMatrix::projectQuad(v24, a2, a4, (uint64_t)v25);
      v20 = v25[0];
      v21 = v25[1];
    }
    else
    {
      WebCore::TransformationMatrix::mapQuad(v14, a2, v22);
      v20 = v22[0];
      v21 = v22[1];
    }
    *(float32x4_t *)&a2->var0.m_x = v20;
    *(float32x4_t *)&a2->var2.m_x = v21;
  }
}

void WebCore::TransformState::applyTransform(float64x2_t **this, float64x2_t *a2, int a3, double (*a4)[4][4])
{
  double v9;
  double v10;
  double v11;
  int v12;
  int v13;
  double v14;
  int v15;
  float64_t v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t *v19;
  const double *v20;
  float64x2_t *v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  void *v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  WTF *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  const double *f64;
  float64x2_t v51;
  void *v52;
  uint64_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  WTF *v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2x4_t v69;
  float64x2x4_t v70;
  float64x2x4_t v71;
  float64x2x4_t v72;
  float64x2x4_t v73;
  float64x2x4_t v74;
  float64x2x4_t v75;
  float64x2x4_t v76;

  if (a4)
    LOBYTE((*a4)[0][0]) = 0;
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*a2, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqzq_f64(a2[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a2[2], (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqzq_f64(a2[3])))))) & 1) == 0&& (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a2[4]), (int32x4_t)vceqq_f64(a2[5], (float64x2_t)xmmword_1968A14B0)))) & 0xF) == 0&& a2[7].f64[1] == 1.0&& a2[7].f64[0] == 0.0)
  {
    v9 = a2[6].f64[0];
    if (v9 == (double)(int)v9)
    {
      v10 = a2[6].f64[1];
      if (v10 == (double)(int)v10)
      {
        v11 = v9 * 64.0;
        if (v11 > -2147483650.0)
          v12 = (int)v11;
        else
          v12 = 0x80000000;
        if (v11 < 2147483650.0)
          v13 = v12;
        else
          v13 = 0x7FFFFFFF;
        LODWORD(v61.f64[0]) = v13;
        v14 = v10 * 64.0;
        if (v14 >= 2147483650.0)
        {
          v15 = 0x7FFFFFFF;
        }
        else if (v14 <= -2147483650.0)
        {
          v15 = 0x80000000;
        }
        else
        {
          v15 = (int)v14;
        }
        HIDWORD(v61.f64[0]) = v15;
        WebCore::TransformState::move((WebCore::TransformState *)this, (WebCore::LayoutSize *)&v61, a3);
        return;
      }
    }
  }
  *(_QWORD *)&v61.f64[0] = this[12];
  v16 = v61.f64[0];
  this[12] = 0;
  if (v16 != 0.0)
  {
    if (this[10])
    {
      WebCore::TransformState::translateTransform((WebCore::TransformState *)this, (const WebCore::LayoutSize *)&v61);
      WebCore::TransformState::flatten((WebCore::TransformState *)this, 0);
    }
    else
    {
      WebCore::TransformState::translateMappedCoordinates((WebCore::TransformState *)this, (int32x2_t *)&v61);
    }
  }
  if (!a3 && *((_DWORD *)this + 28))
    WebCore::TransformState::flatten((WebCore::TransformState *)this, 0);
  v17 = this[10];
  if (v17)
  {
    if (*((_DWORD *)this + 28))
    {
      v20 = (const double *)a2;
      v21 = this[10];
      v23 = *v17;
      v24 = v17[1];
      v25 = v17[2];
      v26 = v17[3];
      v22 = v17 + 4;
      v27 = *v22;
      v28 = v22[1];
      v29 = v22[2];
      v30 = v22[3];
      v73 = vld4q_dup_f64(v20);
      v20 += 4;
      v69 = vld4q_dup_f64(v20);
      v20 += 4;
      *v21 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v73.val[0], v23), v73.val[1], v25), v73.val[2], *v22), v73.val[3], v29);
      v21[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v73.val[0], v24), v73.val[1], v26), v73.val[2], v28), v73.val[3], v30);
      v21 += 2;
      v74 = vld4q_dup_f64(v20);
      v20 += 4;
      *v21 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v69.val[0], v23), v69.val[1], v25), v69.val[2], v27), v69.val[3], v29);
      v21[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v69.val[0], v24), v69.val[1], v26), v69.val[2], v28), v69.val[3], v30);
      v21 += 2;
      v70 = vld4q_dup_f64(v20);
      *v21 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[0], v23), v74.val[1], v25), v74.val[2], v27), v74.val[3], v29);
      v21[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[0], v24), v74.val[1], v26), v74.val[2], v28), v74.val[3], v30);
      v21 += 2;
      *v21 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v70.val[0], v23), v70.val[1], v25), v70.val[2], v27), v70.val[3], v29);
      v21[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v70.val[0], v24), v70.val[1], v26), v70.val[2], v28), v70.val[3], v30);
    }
    else
    {
      v40 = a2[5];
      v65 = a2[4];
      v66 = v40;
      v41 = a2[7];
      v67 = a2[6];
      v68 = v41;
      v42 = a2[1];
      v61 = *a2;
      v62 = v42;
      v43 = a2[3];
      v63 = a2[2];
      v64 = v43;
      v44 = v61;
      v45 = v62;
      v46 = v63;
      v47 = v43;
      v48 = v65;
      v49 = v66;
      v75 = vld4q_dup_f64(v17->f64);
      f64 = v17[2].f64;
      v51 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v75.val[0], v62), v75.val[1], v43), v75.val[2], v66), v75.val[3], v68);
      v71 = vld4q_dup_f64(f64);
      f64 += 4;
      v61 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v75.val[0], v61), v75.val[1], v63), v75.val[2], v65), v75.val[3], v67);
      v62 = v51;
      v76 = vld4q_dup_f64(f64);
      f64 += 4;
      v63 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v71.val[0], v44), v71.val[1], v63), v71.val[2], v65), v71.val[3], v67);
      v64 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v71.val[0], v45), v71.val[1], v47), v71.val[2], v66), v71.val[3], v68);
      v72 = vld4q_dup_f64(f64);
      v65 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v76.val[0], v44), v76.val[1], v46), v76.val[2], v65), v76.val[3], v67);
      v66 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v76.val[0], v45), v76.val[1], v47), v76.val[2], v66), v76.val[3], v68);
      v67 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v72.val[0], v44), v72.val[1], v46), v72.val[2], v48), v72.val[3], v67);
      v68 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v72.val[0], v45), v72.val[1], v47), v72.val[2], v49), v72.val[3], v68);
      v53 = WTF::fastMalloc((WTF *)0x80);
      v54 = v64;
      v56 = v61;
      v55 = v62;
      *(float64x2_t *)(v53 + 32) = v63;
      *(float64x2_t *)(v53 + 48) = v54;
      *(float64x2_t *)v53 = v56;
      *(float64x2_t *)(v53 + 16) = v55;
      v57 = v68;
      v59 = v65;
      v58 = v66;
      *(float64x2_t *)(v53 + 96) = v67;
      *(float64x2_t *)(v53 + 112) = v57;
      *(float64x2_t *)(v53 + 64) = v59;
      *(float64x2_t *)(v53 + 80) = v58;
      v60 = (WTF *)this[10];
      this[10] = (float64x2_t *)v53;
      if (v60)
        WTF::fastFree(v60, v52);
    }
  }
  if (a3)
  {
    v18 = this[10];
  }
  else
  {
    v18 = this[10];
    if (!*((_DWORD *)this + 28))
    {
      if (v18)
        v19 = this[10];
      else
        v19 = a2;
      WebCore::TransformState::flattenWithTransform((WebCore::TransformState *)this, v19, a4);
      return;
    }
  }
  if (!v18)
  {
    v32 = (float64x2_t *)WTF::fastMalloc((WTF *)0x80);
    v33 = a2[3];
    v35 = *a2;
    v34 = a2[1];
    v32[2] = a2[2];
    v32[3] = v33;
    *v32 = v35;
    v32[1] = v34;
    v36 = a2[7];
    v38 = a2[4];
    v37 = a2[5];
    v32[6] = a2[6];
    v32[7] = v36;
    v32[4] = v38;
    v32[5] = v37;
    v39 = (WTF *)this[10];
    this[10] = v32;
    if (v39)
      WTF::fastFree(v39, v31);
    *((_BYTE *)this + 104) = 1;
  }
}

unint64_t WebCore::RenderObject::absoluteBoundingBoxRect(WebCore::RenderObject *this, int a2, BOOL *a3)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  WTF *v18;
  int v20;
  int v21;
  int v22;
  int v23;
  const WebCore::FloatRect *v24;
  uint64_t v25;
  _DWORD v26[4];
  _QWORD v27[2];
  WTF *v28[2];
  _BYTE v29[64];
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  char v33;
  __int16 v34;
  int v35;
  int v36;

  if (a2)
  {
    v28[0] = 0;
    v28[1] = 0;
    (*(void (**)(WebCore::RenderObject *, WTF **, BOOL *))(*(_QWORD *)this + 392))(this, v28, a3);
    WebCore::unitedBoundingBoxes((unsigned int *)v28);
    v26[0] = v20;
    v26[1] = v21;
    v26[2] = v22;
    v26[3] = v23;
    v27[0] = WebCore::enclosingIntRect((WebCore *)v26, v24);
    v27[1] = v25;
    v17 = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)v27);
  }
  else
  {
    v29[56] = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    v33 = 0;
    *(_OWORD *)v28 = 0u;
    memset(v29, 0, 25);
    v34 = 1;
    v35 = 0;
    v36 = 0;
    (*(void (**)(WebCore::RenderObject *, _QWORD, WTF **, uint64_t, BOOL *))(*(_QWORD *)this + 576))(this, 0, v28, 4, a3);
    WebCore::TransformState::flatten((WebCore::TransformState *)v28, 0);
    v5 = v28[0];
    v6 = v31;
    v31 = 0;
    if (v6)
      WTF::fastFree(v6, v4);
    v7 = v30;
    v30 = 0;
    if (v7)
      WTF::fastFree(v7, v4);
    v28[0] = 0;
    v28[1] = 0;
    v8 = floorf(*(float *)&v5 * 64.0);
    v9 = 0x7FFFFFFFLL;
    v10 = 0x80000000;
    if (v8 > -2147500000.0)
      v10 = (int)v8;
    if (v8 < 2147500000.0)
      v9 = v10;
    v11 = floorf(*((float *)&v5 + 1) * 64.0);
    if (v11 >= 2147500000.0)
    {
      v12 = 0x7FFFFFFF00000000;
    }
    else if (v11 <= -2147500000.0)
    {
      v12 = 0x8000000000000000;
    }
    else
    {
      v12 = (unint64_t)(int)v11 << 32;
    }
    v27[0] = v12 | v9;
    (*(void (**)(WebCore::RenderObject *, WTF **, _QWORD *))(*(_QWORD *)this + 384))(this, v28, v27);
    if (HIDWORD(v28[1]))
    {
      v14 = WebCore::unionRect((unsigned int *)v28);
      v17 = ((int)v14 / 64 + ((int)(v14 - (v15 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(SHIDWORD(v14) / 64 + ((int)(HIDWORD(v14) - (v16 & 0xFFFFFFC0) + 32) >> 6)) << 32);
    }
    else
    {
      v17 = 0;
    }
  }
  v18 = v28[0];
  if (v28[0])
  {
    v28[0] = 0;
    LODWORD(v28[1]) = 0;
    WTF::fastFree(v18, v13);
  }
  return v17;
}

unint64_t WebCore::enclosingIntRect(WebCore *this, const WebCore::FloatRect *a2)
{
  float v2;
  BOOL v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;
  unsigned int v8;
  unint64_t v9;

  v2 = floorf(*(float *)this);
  v3 = v2 >= 2147500000.0 || v2 <= -2147500000.0;
  if (!v3 || (v4 = 2147500000.0, v2 < 2147500000.0) && (v4 = -2147500000.0, v2 > -2147500000.0))
    v4 = (float)(int)v2;
  v5 = floorf(*((float *)this + 1));
  v6 = v5 >= 2147500000.0 || v5 <= -2147500000.0;
  if (!v6 || (v7 = 2147500000.0, v5 < 2147500000.0) && (v7 = -2147500000.0, v5 > -2147500000.0))
    v7 = (float)(int)v5;
  if (v4 < 2147500000.0 && v4 > -2147500000.0)
    goto LABEL_13;
  if (v4 >= 2147500000.0)
  {
    v8 = 0x7FFFFFFF;
  }
  else
  {
    if (v4 > -2147500000.0)
    {
LABEL_13:
      v8 = (int)v4;
      goto LABEL_14;
    }
    v8 = 0x80000000;
  }
LABEL_14:
  if (v7 < 2147500000.0 && v7 > -2147500000.0)
    goto LABEL_16;
  if (v7 >= 2147500000.0)
  {
    v9 = 0x7FFFFFFF00000000;
    return v9 | v8;
  }
  if (v7 > -2147500000.0)
LABEL_16:
    v9 = (unint64_t)(int)v7 << 32;
  else
    v9 = 0x8000000000000000;
  return v9 | v8;
}

void WebCore::unitedBoundingBoxes(unsigned int *a1)
{
  uint64_t v1;
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v19;
  float v21;
  float v22;
  float v24;
  float v25;
  uint64_t v26;
  WebCore::FloatQuad *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;

  v1 = a1[3];
  if ((_DWORD)v1)
  {
    v2 = *(float **)a1;
    v4 = *(float *)(*(_QWORD *)a1 + 16);
    v3 = *(float *)(*(_QWORD *)a1 + 20);
    v6 = *(float *)(*(_QWORD *)a1 + 24);
    v5 = *(float *)(*(_QWORD *)a1 + 28);
    if (v6 >= v4)
      v7 = *(float *)(*(_QWORD *)a1 + 16);
    else
      v7 = *(float *)(*(_QWORD *)a1 + 24);
    v9 = *v2;
    v8 = v2[1];
    v11 = v2[2];
    v10 = v2[3];
    if (v11 >= *v2)
      v12 = *v2;
    else
      v12 = v2[2];
    if (v7 >= v12)
      v7 = v12;
    v13 = fabsf(v7);
    if (v13 == INFINITY || v13 > 2147500000.0)
      v7 = (float)((SLODWORD(v7) >> 31) ^ 0x7FFFFFFF);
    if (v5 >= v3)
      v15 = *(float *)(*(_QWORD *)a1 + 20);
    else
      v15 = *(float *)(*(_QWORD *)a1 + 28);
    if (v10 >= v8)
      v16 = v2[1];
    else
      v16 = v2[3];
    if (v15 >= v16)
      v15 = v16;
    v17 = fabsf(v15);
    if (v17 == INFINITY || v17 > 2147500000.0)
      v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
    if (v9 < v11)
      v9 = v2[2];
    if (v4 < v6)
      v4 = *(float *)(*(_QWORD *)a1 + 24);
    if (v9 >= v4)
      v4 = v9;
    v19 = fabsf(v4);
    if (v19 == INFINITY || v19 > 2147500000.0)
      v4 = (float)((SLODWORD(v4) >> 31) ^ 0x7FFFFFFF);
    if (v8 < v10)
      v8 = v2[3];
    if (v3 < v5)
      v3 = *(float *)(*(_QWORD *)a1 + 28);
    if (v8 >= v3)
      v21 = v8;
    else
      v21 = v3;
    v22 = fabsf(v21);
    if (v22 == INFINITY || v22 > 2147500000.0)
      v21 = (float)((SLODWORD(v21) >> 31) ^ 0x7FFFFFFF);
    v24 = v4 - v7;
    v25 = v21 - v15;
    if (v1 >= 2)
    {
      v38 = v15;
      v39 = v7;
      v26 = v1 - 1;
      v27 = (WebCore::FloatQuad *)(v2 + 8);
      do
      {
        v28 = v25;
        v29 = v24;
        v30 = WebCore::FloatQuad::boundingBox(v27);
        v34 = v30;
        v35 = v31;
        if (v30 >= v39)
          v30 = v39;
        if (v31 >= v38)
          v31 = v38;
        v36 = v34 + v32;
        if ((float)(v39 + v29) >= v36)
          v36 = v39 + v29;
        v37 = v35 + v33;
        if ((float)(v38 + v28) >= v37)
          v37 = v38 + v28;
        v24 = v36 - v30;
        v25 = v37 - v31;
        v27 = (WebCore::FloatQuad *)((char *)v27 + 32);
        v38 = v31;
        v39 = v30;
        --v26;
      }
      while (v26);
    }
  }
}

uint64_t WebCore::RenderBlock::absoluteQuads(int *a1, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  int v19;
  int v20;
  int32x2_t v21;
  float32x2_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _BYTE v31[12];
  float v32;

  if ((*(_WORD *)((_BYTE *)a1 + 69) & 0x10) == 0)
    goto LABEL_2;
  ++dword_1ECE91378;
  v6 = *((_QWORD *)a1 + 1);
  v7 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v8 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v11);
  if (v12 == -1 || v12 != v6)
  {
    v28 = 1;
    do
    {
      v11 = ((_DWORD)v11 + v28) & v7;
      v29 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v11);
      ++v28;
    }
    while (v29 == -1 || v29 != v6);
  }
  v14 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v11 + 8) + 16);
  if (v14 && (v15 = *v14) != 0 && *(_QWORD *)(v15 + 8))
  {
    v19 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 1248))();
    if (v19 == 0x80000000)
      v20 = 0x7FFFFFFF;
    else
      v20 = -v19;
    v21.i32[0] = v20;
    v21.i32[1] = a1[40];
    v22 = vmul_f32(vcvt_f32_s32(v21), (float32x2_t)vdup_n_s32(0x3C800000u));
    v23 = a1[41];
    v24 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1248))(a1);
    if (__OFADD__(v23, v24))
      v25 = (v23 >> 31) + 0x7FFFFFFF;
    else
      v25 = v23 + v24;
    v26 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 1256))(a1);
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      v27 = (v25 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)v31 = 0;
    *(float32x2_t *)&v31[4] = v22;
    v32 = (float)v27 * 0.015625;
    (*(void (**)(int *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1168))(a1, v31, a2, a3);
    return WebCore::RenderBoxModelObject::collectAbsoluteQuadsForContinuation((uint64_t)a1, a2, a3);
  }
  else
  {
LABEL_2:
    v3 = (float)a1[40] * 0.015625;
    v4 = (float)a1[41] * 0.015625;
    *(_QWORD *)v31 = 0;
    *(float *)&v31[8] = v3;
    v32 = v4;
    return (*(uint64_t (**)(int *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1168))(a1, v31, a2, a3);
  }
}

uint64_t WebCore::RenderBlock::absoluteQuadsIgnoringContinuation(int *a1, float *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  float v6;
  float v7;
  uint64_t result;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  float *v14;
  float v17[2];
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  _OWORD v24[2];

  v5 = (uint64_t)a1;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0
    || (v14 = a2, v13 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 648))(), a2 = v14, v5 = (uint64_t)a1, !v13)
    || (result = WebCore::RenderFragmentedFlow::absoluteQuadsForBox(v13, a3, a4, a1),
        a2 = v14,
        v5 = (uint64_t)a1,
        (result & 1) == 0))
  {
    v6 = a2[1];
    v17[0] = *a2;
    v17[1] = v6;
    v7 = a2[3];
    v18 = v17[0] + a2[2];
    v19 = v6;
    v20 = v18;
    v21 = v6 + v7;
    v22 = v17[0];
    v23 = v6 + v7;
    result = (uint64_t)WebCore::RenderObject::localToContainerQuad(v5, v17, 0, 2u, v24);
    v9 = a3[3];
    if ((_DWORD)v9 == a3[2])
    {
      result = WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v9 + 1, (unint64_t)v24);
      v10 = (_OWORD *)(*(_QWORD *)a3 + 32 * a3[3]);
      v11 = *(_OWORD *)result;
      v12 = *(_OWORD *)(result + 16);
    }
    else
    {
      v10 = (_OWORD *)(*(_QWORD *)a3 + 32 * v9);
      v11 = v24[0];
      v12 = v24[1];
    }
    *v10 = v11;
    v10[1] = v12;
    ++a3[3];
  }
  return result;
}

WTF *WebCore::RenderObject::localToContainerQuad@<X0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _OWORD *a5@<X8>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v22;
  float v24;
  __int128 v26;
  void *v27;
  __int128 v28;
  WTF *v29;
  WTF *result;
  float v31[2];
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  char v39;
  __int16 v40;
  int v41;
  int v42;

  v7 = a2[4];
  v6 = a2[5];
  v9 = a2[6];
  v8 = a2[7];
  if (v9 >= v7)
    v10 = a2[4];
  else
    v10 = a2[6];
  v12 = *a2;
  v11 = a2[1];
  v14 = a2[2];
  v13 = a2[3];
  if (v14 >= *a2)
    v15 = *a2;
  else
    v15 = a2[2];
  if (v10 >= v15)
    v10 = v15;
  v16 = fabsf(v10);
  if (v16 == INFINITY || v16 > 2147500000.0)
    v10 = (float)((SLODWORD(v10) >> 31) ^ 0x7FFFFFFF);
  if (v8 >= v6)
    v18 = a2[5];
  else
    v18 = a2[7];
  if (v13 >= v11)
    v19 = a2[1];
  else
    v19 = a2[3];
  if (v18 >= v19)
    v18 = v19;
  v20 = fabsf(v18);
  if (v20 == INFINITY || v20 > 2147500000.0)
    v18 = (float)((SLODWORD(v18) >> 31) ^ 0x7FFFFFFF);
  if (v12 < v14)
    v12 = a2[2];
  if (v7 < v9)
    v7 = a2[6];
  if (v12 >= v7)
    v7 = v12;
  v22 = fabsf(v7);
  if (v22 == INFINITY || v22 > 2147500000.0)
    v7 = (float)((SLODWORD(v7) >> 31) ^ 0x7FFFFFFF);
  if (v11 < v13)
    v11 = a2[3];
  if (v6 < v8)
    v6 = a2[7];
  if (v11 >= v6)
    v6 = v11;
  v24 = fabsf(v6);
  if (v24 == INFINITY || v24 > 2147500000.0)
    v6 = (float)((SLODWORD(v6) >> 31) ^ 0x7FFFFFFF);
  v31[0] = v10 + (float)((float)(v7 - v10) * 0.5);
  v31[1] = v18 + (float)((float)(v6 - v18) * 0.5);
  v26 = *((_OWORD *)a2 + 1);
  v32 = *(_OWORD *)a2;
  v33 = v26;
  v34 = 0;
  v35 = 0;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  v39 = 0;
  v40 = 257;
  v41 = 0;
  v42 = 0;
  (*(void (**)(uint64_t, uint64_t, float *, uint64_t))(*(_QWORD *)a1 + 576))(a1, a3, v31, a4 | 4);
  WebCore::TransformState::flatten((WebCore::TransformState *)v31, 0);
  v28 = v33;
  *a5 = v32;
  a5[1] = v28;
  v29 = v37;
  v37 = 0;
  if (v29)
    WTF::fastFree(v29, v27);
  result = v36;
  v36 = 0;
  if (result)
    return (WTF *)WTF::fastFree(result, v27);
  return result;
}

void WebCore::RenderBox::mapAbsoluteToLocalPoint(WebCore::RenderObject *this, unsigned int a2, WebCore::TransformState *a3)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderObject *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2;
  if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
    goto LABEL_15;
  v8 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v8 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
  if ((*((_QWORD *)v8 + 12) & 0x380000) == 0x300000)
  {
    v4 = a2 | 1;
  }
  else
  {
LABEL_15:
    if ((a2 & 1) != 0 && WebCore::RenderElement::canContainFixedPositionObjects(this))
      v4 &= ~1u;
  }
  v6 = WebCore::RenderObject::container(this);
  if (v6)
  {
    v7 = v6;
    (*(void (**)(uint64_t, _QWORD, WebCore::TransformState *))(*(_QWORD *)v6 + 584))(v6, v4, a3);
    v9 = 0;
    v10 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)this + 360))(this, v7, &v9, 0);
    WebCore::RenderObject::pushOntoTransformState((uint64_t)this, a3, v4, 0, v7, (const WebCore::LayoutSize *)&v10, 0);
  }
}

void WebCore::RenderBox::mapLocalToContainer(WebCore::RenderElement *this, WebCore::RenderElement *a2, WebCore::TransformState *a3, int a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float64x2_t *v27;
  double v28;
  int v30;
  double v31;
  int v33;
  unint64_t v34;
  double v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  WebCore::RenderElement *v42;
  WebCore::RenderElement *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WebCore::WillChangeData *v49;
  uint64_t v50;
  char v51;
  int v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  __int128 *v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  unint64_t v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned __int8 v91;
  WebCore::RenderElement *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101;
  float64x2_t v102[8];
  unsigned __int8 *v103;

  if (a2 == this)
    return;
  if (a2
    || (v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248),
        *(_DWORD *)(v10 + 492))
    || (v11 = *(unsigned int *)(v10 + 508), !(_DWORD)v11)
    || (v12 = *(_QWORD *)(*(_QWORD *)(v10 + 496) + 8 * v11 - 8)) == 0)
  {
    v91 = 0;
    *(_QWORD *)&v102[0].f64[0] = a2;
    v103 = &v91;
    v13 = *((_BYTE *)this + 45);
    if ((v13 & 2) != 0 || *((_BYTE *)this + 46) == 17)
    {
      v17 = *((_QWORD *)this + 4);
      if (!v17)
        return;
      goto LABEL_16;
    }
    v92 = this;
    *(_QWORD *)&v93 = &v103;
    *((_QWORD *)&v93 + 1) = v102;
    *(_QWORD *)&v94 = &v92;
    if ((v13 & 1) == 0)
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v14)
      {
        if ((*(_WORD *)(v14 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1940DEDBCLL);
        }
        if ((*(_BYTE *)(v14 + 23) & 0x20) != 0)
          goto LABEL_182;
      }
    }
    v15 = *((_QWORD *)this + 12);
    if ((v15 & 0xF80000000000) == 0x480000000000)
    {
LABEL_182:
      WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v93);
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v92 + 3) + 8) + 40) + 8) + 1944);
      goto LABEL_17;
    }
    v16 = (v15 >> 19) & 7;
    if (v16 <= 3 && v16 != 2)
    {
      v17 = *((_QWORD *)this + 4);
      if (v17)
      {
LABEL_16:
        v18 = *(_QWORD *)(v17 + 8);
LABEL_17:
        if (!v18)
          return;
        if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
          goto LABEL_217;
        v42 = this;
        if ((*((_BYTE *)this + 45) & 2) != 0)
          v42 = *(WebCore::RenderElement **)(*((_QWORD *)this + 4) + 8);
        if ((*((_QWORD *)v42 + 12) & 0x380000) == 0x300000)
        {
          a4 |= 1u;
        }
        else
        {
LABEL_217:
          if ((a4 & 1) != 0 && WebCore::RenderElement::canContainFixedPositionObjects(this))
            a4 &= ~1u;
        }
        if (a5)
          *a5 = a4 & 1;
        v19 = *((_DWORD *)a3 + 28);
        if (v19)
        {
          v20 = *((_DWORD *)a3 + 24);
          v21 = *((_DWORD *)a3 + 25);
          if (v20 == 0x80000000)
            v22 = 0x7FFFFFFFLL;
          else
            v22 = -v20;
          if (v21 == 0x80000000)
            v23 = 0x7FFFFFFFLL;
          else
            v23 = -v21;
          v24 = v22 | (v23 << 32);
        }
        else
        {
          v24 = *((_QWORD *)a3 + 12);
        }
        v25 = (float)((float)(int)v24 * 0.015625) + *(float *)a3;
        v26 = (float)((float)SHIDWORD(v24) * 0.015625) + *((float *)a3 + 1);
        *(float *)&v103 = v25;
        *((float *)&v103 + 1) = v26;
        v27 = (float64x2_t *)*((_QWORD *)a3 + 10);
        if (v27)
        {
          if (v19)
          {
            WebCore::TransformationMatrix::inverse(v27->f64, (double (*)[4][4])a3, (uint64_t)&v93);
            if (v101)
              v80 = &v93;
            else
              v80 = &constinit_5;
            v81 = (float64x2_t)v80[5];
            v102[4] = (float64x2_t)v80[4];
            v102[5] = v81;
            v82 = (float64x2_t)v80[7];
            v102[6] = (float64x2_t)v80[6];
            v102[7] = v82;
            v83 = (float64x2_t)v80[1];
            v102[0] = (float64x2_t)*v80;
            v102[1] = v83;
            v84 = (float64x2_t)v80[3];
            v102[2] = (float64x2_t)v80[2];
            v102[3] = v84;
            LODWORD(v25) = WebCore::TransformationMatrix::projectPoint(v102, (const WebCore::FloatPoint *)&v103, 0).u32[0];
          }
          else
          {
            LODWORD(v25) = WebCore::TransformationMatrix::mapPoint(v27, (float32x2_t *)&v103).u32[0];
          }
        }
        v28 = v25 * 64.0;
        if (v28 >= 2147483650.0 || v28 <= -2147483650.0)
        {
          if (v28 > -2147483650.0)
            v90 = (int)v28;
          else
            v90 = 0x80000000;
          if (v28 < 2147483650.0)
            v30 = v90;
          else
            v30 = 0x7FFFFFFF;
        }
        else
        {
          v30 = (int)v28;
        }
        LODWORD(v93) = v30;
        v31 = v26 * 64.0;
        if (v31 < 2147483650.0 && v31 > -2147483650.0)
          goto LABEL_40;
        if (v31 >= 2147483650.0)
        {
          v33 = 0x7FFFFFFF;
          goto LABEL_41;
        }
        if (v31 <= -2147483650.0)
          v33 = 0x80000000;
        else
LABEL_40:
          v33 = (int)v31;
LABEL_41:
        DWORD1(v93) = v33;
        v34 = (*(uint64_t (**)(WebCore::RenderElement *, uint64_t, __int128 *, _QWORD))(*(_QWORD *)this + 360))(this, v18, &v93, 0);
        v36 = v34;
        *(_QWORD *)&v102[0].f64[0] = v34;
        v37 = HIDWORD(v34);
        if ((a4 & 8) != 0 && (~*((_DWORD *)this + 5) & 0x1800000) == 0)
        {
          v79 = WebCore::RenderBoxModelObject::stickyPositionOffset(this, v35);
          if (__OFSUB__(v36, (_DWORD)v79))
            v36 = (v36 >> 31) + 0x7FFFFFFF;
          else
            v36 -= v79;
          LODWORD(v102[0].f64[0]) = v36;
          if (__OFSUB__((_DWORD)v37, HIDWORD(v79)))
            LODWORD(v37) = (v37 >> 31) + 0x7FFFFFFF;
          else
            LODWORD(v37) = v37 - HIDWORD(v79);
          HIDWORD(v102[0].f64[0]) = v37;
        }
        v38 = v91;
        if ((a4 & 2) != 0)
        {
          v39 = *((_DWORD *)this + 5);
          if ((v39 & 0x8000) != 0)
          {
            if ((*((_BYTE *)this + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1940DEEA0);
            }
            v40 = WebCore::RenderLayer::participatesInPreserve3D(*((WebCore::RenderLayer **)this + 18));
            v39 = *((_DWORD *)this + 5);
          }
          else
          {
            v40 = 0;
          }
          if ((v39 & 0x20000) != 0)
          {
            v43 = this;
            if ((*((_BYTE *)this + 45) & 2) != 0)
              v43 = *(WebCore::RenderElement **)(*((_QWORD *)this + 4) + 8);
            v44 = *((_QWORD *)v43 + 11);
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 32) + 40) + 20))
              goto LABEL_61;
            v57 = *(_QWORD **)(v44 + 40);
            if (v57[41] || v57[38] || v57[39] || v57[40] || (v39 & 0x100000) != 0)
              goto LABEL_61;
          }
          v41 = v18;
          if ((*(_BYTE *)(v18 + 45) & 2) != 0)
            v41 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8);
          if (*(float *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 40) + 260) != -1.0)
          {
            v89 = *((_QWORD *)this + 4);
            if (v89)
              v89 = *(_QWORD *)(v89 + 8);
            if (v89 == v18)
            {
LABEL_61:
              v97 = xmmword_1969FCE20;
              v98 = unk_1969FCE30;
              v99 = xmmword_1969FCE40;
              v100 = unk_1969FCE50;
              v93 = constinit_7;
              v94 = *(_OWORD *)algn_1969FCDF0;
              v95 = xmmword_1969FCE00;
              v96 = unk_1969FCE10;
              WebCore::RenderObject::getTransformFromContainer(this, (const WebCore::LayoutSize *)v102, (WebCore::TransformationMatrix *)&v93);
              WebCore::TransformState::applyTransform((float64x2_t **)a3, (float64x2_t *)&v93, v40, 0);
              goto LABEL_50;
            }
          }
        }
        else
        {
          v40 = 0;
        }
        *(_QWORD *)&v93 = __PAIR64__(v37, v36);
        WebCore::TransformState::move(a3, (WebCore::LayoutSize *)&v93, v40);
LABEL_50:
        if (v38)
        {
          v85 = WebCore::RenderObject::offsetFromAncestorContainer(a2, (const WebCore::RenderElement *)v18);
          if ((_DWORD)v85 == 0x80000000)
            v86 = 0x7FFFFFFF;
          else
            v86 = -(int)v85;
          if (HIDWORD(v85) == 0x80000000)
            v87 = 0x7FFFFFFF;
          else
            v87 = -HIDWORD(v85);
          *(_QWORD *)&v93 = __PAIR64__(v87, v86);
          WebCore::TransformState::move(a3, (WebCore::LayoutSize *)&v93, v40);
        }
        if (!v91)
          (*(void (**)(uint64_t, WebCore::RenderElement *, WebCore::TransformState *, _QWORD, _BYTE *))(*(_QWORD *)v18 + 576))(v18, a2, a3, a4 & 0xFFFFFFFB, a5);
        return;
      }
LABEL_124:
      v18 = 0;
      goto LABEL_17;
    }
    v45 = *((_QWORD *)this + 4);
    if (v45)
    {
      v46 = *(_QWORD *)(v45 + 8);
      if (v46)
        ++*(_DWORD *)(v46 + 16);
    }
    else
    {
      v46 = 0;
    }
    if (v16 == 2)
    {
      if (!v46)
        goto LABEL_124;
      while (1)
      {
        v47 = *(unsigned __int8 *)(v46 + 46);
        if (v47 == 49 || (*(_BYTE *)(v46 + 98) & 0x38) != 0)
          break;
        if (((*(_BYTE *)(v46 + 45) & 0x40) != 0 || (v47 - 36) <= 4 && v47 != 38)
          && (*(_BYTE *)(v46 + 22) & 2) != 0)
        {
          break;
        }
        v48 = *(_QWORD *)(*(_QWORD *)(v46 + 88) + 40);
        if (*(_DWORD *)(*(_QWORD *)(v48 + 72) + 20))
        {
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v46 + 24) + 8))
            break;
        }
        if ((*(_BYTE *)(v46 + 45) & 0x40) != 0)
        {
          v49 = *(WebCore::WillChangeData **)(v48 + 200);
          if (v49)
          {
            if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v49, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v46 + 24) + 8)) & 1) != 0)break;
            v47 = *(unsigned __int8 *)(v46 + 46);
          }
        }
        if (v47 == 67 || v47 == 90)
          break;
        v50 = *(_QWORD *)(*(_QWORD *)(v46 + 88) + 40);
        v51 = *(_BYTE *)(v50 + 462);
        v52 = *(_BYTE *)(v50 + 642) & 3;
        v53 = v51 | 0x19;
        if (v52 == 1)
          v51 |= 0x15u;
        v54 = v52 == 2 ? v53 : v51;
        if ((v54 & 3) != 0
          && ((*(_BYTE *)(v46 + 20) & 1) != 0
           || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v46))
          && (*(_QWORD *)(v46 + 96) & 0x1FLL) != 0x19
          && (*(unsigned __int8 *)(v46 + 46) - 36 > 4 || (*(_BYTE *)(v46 + 52) & 7) == 1))
        {
          break;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 88) + 40) + 636) & 0xC0000) != 0
          && ((*(_BYTE *)(v46 + 20) & 1) != 0
           || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v46))
          && (*(_QWORD *)(v46 + 96) & 0x1FLL) != 0x19)
        {
          v88 = *(unsigned __int8 *)(v46 + 46);
          if ((v88 - 36) <= 4)
          {
            if (v88 == 36)
              break;
          }
          else if (v88 != 63 && v88 != 35)
          {
            break;
          }
        }
        if (v103 && v46 == *(_QWORD *)&v102[0].f64[0])
          *v103 = 1;
        v55 = *(_QWORD *)(v46 + 32);
        if (v55)
        {
          v55 = *(_QWORD *)(v55 + 8);
          if (v55)
            ++*(_DWORD *)(v55 + 16);
        }
        v56 = *(_DWORD *)(v46 + 16);
        if (!v56)
        {
          __break(0xC471u);
          JUMPOUT(0x1940DEE80);
        }
        v18 = 0;
        *(_DWORD *)(v46 + 16) = v56 - 1;
        v46 = v55;
        if (!v55)
          goto LABEL_17;
      }
    }
    else
    {
      if (!v46)
        goto LABEL_124;
      while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v46))
      {
        if ((*(_BYTE *)(v46 + 45) & 1) == 0)
        {
          v58 = *(_QWORD *)(*(_QWORD *)(v46 + 24) + 8);
          if (v58)
          {
            if ((*(_WORD *)(v58 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1940DF0FCLL);
            }
            if ((*(_BYTE *)(v58 + 23) & 0x20) != 0)
              goto LABEL_181;
          }
        }
        if ((*(_QWORD *)(v46 + 96) & 0xF80000000000) == 0x480000000000)
        {
LABEL_181:
          WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v93);
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v92 + 3) + 8) + 40) + 8) + 1944);
          goto LABEL_171;
        }
        if (v103 && v46 == *(_QWORD *)&v102[0].f64[0])
          *v103 = 1;
        v59 = *(_QWORD *)(v46 + 32);
        if (!v59)
        {
          v62 = *(_DWORD *)(v46 + 16);
          if (!v62)
          {
LABEL_175:
            __break(0xC471u);
            JUMPOUT(0x1940DF0DCLL);
          }
          v18 = 0;
          goto LABEL_172;
        }
        v60 = *(_QWORD *)(v59 + 8);
        if (v60)
          ++*(_DWORD *)(v60 + 16);
        v61 = *(_DWORD *)(v46 + 16);
        if (!v61)
          goto LABEL_175;
        v18 = 0;
        *(_DWORD *)(v46 + 16) = v61 - 1;
        v46 = v60;
        if (!v60)
          goto LABEL_17;
      }
    }
    v18 = v46;
LABEL_171:
    v62 = *(_DWORD *)(v46 + 16);
    if (!v62)
    {
      __break(0xC471u);
      JUMPOUT(0x1940DF0B0);
    }
LABEL_172:
    *(_DWORD *)(v46 + 16) = v62 - 1;
    goto LABEL_17;
  }
  v65 = v12 + 48;
  v63 = *(_DWORD *)(v12 + 48);
  v64 = *(_DWORD *)(v65 + 4);
  v67 = *((_DWORD *)this + 38);
  v66 = *((_DWORD *)this + 39);
  v68 = __OFADD__(v63, v67);
  v69 = v63 + v67;
  LODWORD(v12) = (v63 >> 31) + 0x7FFFFFFF;
  if (v68)
    v12 = v12;
  else
    v12 = v69;
  v68 = __OFADD__(v64, v66);
  v70 = v64 + v66;
  LODWORD(v71) = (v64 >> 31) + 0x7FFFFFFF;
  if (v68)
    v71 = v71;
  else
    v71 = v70;
  *(_QWORD *)&v93 = v12 | (v71 << 32);
  if ((*((_QWORD *)this + 12) & 0x280000) == 0x80000)
  {
    v72 = *((_QWORD *)this + 18);
    if (v72)
    {
      v74 = *(_DWORD *)(v72 + 148);
      v73 = *(_DWORD *)(v72 + 152);
      v68 = __OFADD__((_DWORD)v12, v74);
      v75 = v12 + v74;
      v76 = (v12 >> 31) + 0x7FFFFFFF;
      if (!v68)
        v76 = v75;
      v68 = __OFADD__((_DWORD)v71, v73);
      v77 = v71 + v73;
      v78 = (v71 >> 31) + 0x7FFFFFFF;
      if (!v68)
        v78 = v77;
      *(_QWORD *)&v93 = __PAIR64__(v78, v76);
    }
  }
  WebCore::TransformState::move(a3, (WebCore::LayoutSize *)&v93, 0);
}

unint64_t WebCore::RenderBox::offsetFromContainer(WebCore::RenderBox *this, WebCore::RenderElement *a2, const WebCore::LayoutPoint *a3, BOOL *a4, double a5)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  WebCore::RenderBox *v31;
  unsigned int v32;
  const WebCore::RenderBox *v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  double v41;
  float v42;
  double v43;
  double v44;
  BOOL v46;
  int v47;
  double v48;
  int v49;
  int v50;
  _QWORD v51[2];
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _DWORD v58[4];

  v8 = *((_DWORD *)this + 5);
  if ((v8 & 0x800000) == 0)
    goto LABEL_2;
  v30 = v8 & 0x1800000;
  if (v30 == 0x800000)
  {
    v9 = WebCore::RenderBoxModelObject::relativePositionOffset(this);
    v10 = HIDWORD(v9);
  }
  else
  {
    if (v30 != 25165824)
    {
LABEL_2:
      LODWORD(v9) = 0;
      v10 = 0;
      goto LABEL_3;
    }
    WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(this, a5);
    v58[0] = v37;
    v58[1] = v38;
    v58[2] = v39;
    v58[3] = v40;
    v52 = 0;
    v51[0] = off_1E34043D0;
    v51[1] = 0;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    WebCore::RenderBoxModelObject::computeStickyPositionConstraints(this, (WebCore::StickyPositionViewportConstraints *)v51, (const WebCore::FloatRect *)v58);
    v41 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)v51, (const WebCore::FloatRect *)v58)* 64.0;
    v43 = v42;
    v44 = v43 * 64.0;
    v46 = v43 * 64.0 >= 2147483650.0 || v41 <= -2147483650.0 || v44 <= -2147483650.0;
    if (v46 || v41 >= 2147483650.0)
    {
      if (v41 > -2147483650.0)
        v47 = (int)v41;
      else
        v47 = 0x80000000;
      if (v41 < 2147483650.0)
        LODWORD(v9) = v47;
      else
        LODWORD(v9) = 0x7FFFFFFF;
      v48 = v43 * 64.0;
      if (v48 > -2147483650.0)
        LODWORD(v10) = (int)v48;
      else
        LODWORD(v10) = 0x80000000;
      if (v48 < 2147483650.0)
        v10 = v10;
      else
        v10 = 0x7FFFFFFFLL;
    }
    else
    {
      LODWORD(v9) = (int)v41;
      v10 = (int)v44;
    }
  }
LABEL_3:
  if ((*((_BYTE *)this + 20) & 3) != 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0 && (v13 = *(_QWORD *)(v12 + 288)) != 0 && *(_BYTE *)(v13 + 1383))
    {
      v49 = v10;
      v50 = v9;
      v14 = WebCore::RenderBox::topLeftLocationWithFlipping(this);
      LODWORD(v10) = v49;
      LODWORD(v9) = v50;
    }
    else
    {
      v14 = *((_QWORD *)this + 19);
    }
    v15 = HIDWORD(v14);
    v16 = __OFADD__((_DWORD)v9, (_DWORD)v14);
    v17 = v9 + v14;
    if (v16)
      LODWORD(v9) = (v9 >> 31) + 0x7FFFFFFF;
    else
      LODWORD(v9) = v17;
    v16 = __OFADD__((_DWORD)v10, (_DWORD)v15);
    v18 = v10 + v15;
    LODWORD(v10) = (v10 >> 31) + 0x7FFFFFFF;
    if (v16)
      v10 = v10;
    else
      v10 = v18;
  }
  if ((*((_BYTE *)a2 + 45) & 4) != 0)
  {
    if ((*((_BYTE *)a2 + 22) & 1) == 0
      || ((*((_BYTE *)a2 + 45) & 2) != 0
        ? (v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 8) + 96))
        : (v25 = *((_QWORD *)a2 + 12)),
          v19 = v25 & 0x1C00,
          v19 == 2048))
    {
      LODWORD(v19) = 0;
    }
    else if (v19)
    {
      v19 = *(_QWORD *)(*((_QWORD *)a2 + 18) + 264);
      if (v19)
      {
        v26 = *(_QWORD *)(v19 + 104);
        v27 = HIDWORD(v26);
        v28 = (_DWORD)v26 << 6;
        if ((int)v26 < -33554432)
          v28 = 0x80000000;
        if ((int)v26 <= 0x1FFFFFF)
          LODWORD(v19) = v28;
        else
          LODWORD(v19) = 0x7FFFFFFF;
        v29 = (_DWORD)v27 << 6;
        if ((int)v27 < -33554432)
          v29 = 0x80000000;
        if ((int)v27 <= 0x1FFFFFF)
          v20 = v29;
        else
          v20 = 0x7FFFFFFF;
        goto LABEL_19;
      }
    }
    v20 = 0;
LABEL_19:
    v16 = __OFSUB__((_DWORD)v9, (_DWORD)v19);
    v21 = v9 - v19;
    if (v16)
      LODWORD(v9) = (v9 >> 31) + 0x7FFFFFFF;
    else
      LODWORD(v9) = v21;
    v16 = __OFSUB__((_DWORD)v10, v20);
    v22 = v10 - v20;
    LODWORD(v10) = (v10 >> 31) + 0x7FFFFFFF;
    if (v16)
      v10 = v10;
    else
      v10 = v22;
  }
  if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
  {
    v31 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v31 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
    if ((*((_QWORD *)v31 + 12) & 0x380000) == 0x100000
      && (*((_BYTE *)a2 + 45) & 0x20) != 0
      && (*((_DWORD *)a2 + 5) & 0x800000) != 0)
    {
      v32 = v9;
      v33 = this;
      v34 = v10;
      v9 = WebCore::RenderInline::offsetForInFlowPositionedInline(a2, v33);
      v35 = HIDWORD(v9);
      if (__OFADD__(v32, (_DWORD)v9))
        LODWORD(v9) = (v32 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v9) = v32 + v9;
      v16 = __OFADD__(v34, (_DWORD)v35);
      v36 = v34 + v35;
      LODWORD(v10) = (v34 >> 31) + 0x7FFFFFFF;
      if (v16)
        v10 = v10;
      else
        v10 = v36;
    }
  }
  if (a4)
  {
    v23 = (*((unsigned __int8 *)a2 + 53) >> 1) & 1;
    if ((*((_BYTE *)a2 + 52) & 7) != 1)
      LOBYTE(v23) = 0;
    *a4 |= v23;
  }
  return v9 | (unint64_t)(v10 << 32);
}

void WebCore::RenderObject::pushOntoTransformState(uint64_t a1, WebCore::TransformState *this, char a3, WebCore::RenderObject *a4, uint64_t a5, const WebCore::LayoutSize *a6, int a7)
{
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  float64x2_t v23[8];

  if ((a3 & 2) == 0)
  {
    v14 = 0;
LABEL_9:
    v23[0].f64[0] = *(float64_t *)a6;
    WebCore::TransformState::move(this, (WebCore::LayoutSize *)v23, v14);
    goto LABEL_10;
  }
  v13 = *(_DWORD *)(a1 + 20);
  if ((v13 & 0x8000) != 0)
  {
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940DF774);
    }
    v14 = WebCore::RenderLayer::participatesInPreserve3D(*(WebCore::RenderLayer **)(a1 + 144));
    v13 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    v14 = 0;
  }
  if ((v13 & 0x20000) == 0)
    goto LABEL_35;
  v16 = a1;
  if ((*(_BYTE *)(a1 + 45) & 2) != 0)
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v17 = *(_QWORD *)(v16 + 88);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 40) + 20))
  {
    v18 = *(_QWORD **)(v17 + 40);
    if (!v18[41] && !v18[38] && !v18[39] && !v18[40] && (v13 & 0x100000) == 0)
    {
LABEL_35:
      if (!a5)
        goto LABEL_9;
      v15 = a5;
      if ((*(_BYTE *)(a5 + 45) & 2) != 0)
        v15 = *(_QWORD *)(*(_QWORD *)(a5 + 32) + 8);
      if (*(float *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 260) == -1.0)
        goto LABEL_9;
      v22 = *(_QWORD *)(a1 + 32);
      if (v22)
        v22 = *(_QWORD *)(v22 + 8);
      if (v22 != a5)
        goto LABEL_9;
    }
  }
  v23[5] = (float64x2_t)unk_1969FCE30;
  v23[6] = (float64x2_t)xmmword_1969FCE40;
  v23[7] = (float64x2_t)unk_1969FCE50;
  v23[0] = (float64x2_t)constinit_7;
  v23[1] = *(float64x2_t *)algn_1969FCDF0;
  v23[2] = (float64x2_t)xmmword_1969FCE00;
  memset(&v23[3], 0, 32);
  WebCore::RenderObject::getTransformFromContainer((WebCore::RenderObject *)a1, a6, (WebCore::TransformationMatrix *)v23);
  WebCore::TransformState::applyTransform((float64x2_t **)this, v23, v14, 0);
LABEL_10:
  if (a7)
  {
    v19 = WebCore::RenderObject::offsetFromAncestorContainer(a4, (const WebCore::RenderElement *)a5);
    if ((_DWORD)v19 == 0x80000000)
      v20 = 0x7FFFFFFF;
    else
      v20 = -(int)v19;
    if (HIDWORD(v19) == 0x80000000)
      v21 = 0x7FFFFFFF;
    else
      v21 = -HIDWORD(v19);
    *(_QWORD *)&v23[0].f64[0] = __PAIR64__(v21, v20);
    WebCore::TransformState::move(this, (WebCore::LayoutSize *)v23, v14);
  }
}

void WebCore::TransformState::move(WebCore::TransformState *this, WebCore::LayoutSize *a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int32x2_t v13;
  int32x2_t v14;

  if (a3)
    goto LABEL_14;
  if (*((_DWORD *)this + 28))
    WebCore::TransformState::flatten(this, 0);
  if (*((_QWORD *)this + 10) || *((_DWORD *)this + 27))
  {
LABEL_14:
    v14 = *(int32x2_t *)((char *)this + 96);
    v13 = v14;
    *((_QWORD *)this + 12) = 0;
    if (v13)
    {
      if (*((_QWORD *)this + 10))
      {
        WebCore::TransformState::translateTransform(this, (const WebCore::LayoutSize *)&v14);
        WebCore::TransformState::flatten(this, 0);
      }
      else
      {
        WebCore::TransformState::translateMappedCoordinates(this, &v14);
      }
    }
    if (*((_BYTE *)this + 104) && *((_QWORD *)this + 10))
    {
      WebCore::TransformState::translateTransform(this, a2);
      if (!a3 && !*((_DWORD *)this + 28))
        WebCore::TransformState::flatten(this, 0);
    }
    else
    {
      WebCore::TransformState::translateMappedCoordinates(this, (int32x2_t *)a2);
    }
  }
  else
  {
    v6 = *((_DWORD *)this + 24);
    v7 = *((_DWORD *)this + 25);
    v8 = __OFADD__(v6, *(_DWORD *)a2);
    v9 = v6 + *(_DWORD *)a2;
    v10 = (v6 >> 31) + 0x7FFFFFFF;
    if (v8)
      v9 = v10;
    *((_DWORD *)this + 24) = v9;
    v11 = *((_DWORD *)a2 + 1);
    v8 = __OFADD__(v7, v11);
    v12 = v7 + v11;
    if (v8)
      v12 = (v7 >> 31) + 0x7FFFFFFF;
    *((_DWORD *)this + 25) = v12;
  }
}

uint64_t WebCore::RenderObject::container(WebCore::RenderObject *this, const WebCore::RenderLayerModelObject *a2, BOOL *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL canContainFixedPositionObjects;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int isAtomicInlineLevelBox;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35[3];
  WebCore::RenderObject *v36;
  BOOL *v37;
  const WebCore::RenderLayerModelObject *v38;

  *a3 = 0;
  v37 = a3;
  v38 = a2;
  v3 = *((_BYTE *)this + 45);
  if ((v3 & 2) != 0 || *((_BYTE *)this + 46) == 17)
  {
LABEL_12:
    v8 = *((_QWORD *)this + 4);
    if (v8)
      return *(_QWORD *)(v8 + 8);
    return v8;
  }
  v35[0] = &v37;
  v35[1] = &v38;
  v35[2] = &v36;
  v36 = this;
  if ((v3 & 1) == 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v4)
    {
      if ((*(_WORD *)(v4 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1940DFB14);
      }
      if ((*(_BYTE *)(v4 + 23) & 0x20) != 0)
        goto LABEL_80;
    }
  }
  v5 = *((_QWORD *)this + 12);
  if ((v5 & 0xF80000000000) == 0x480000000000)
  {
LABEL_80:
    WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v35);
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v36 + 3) + 8) + 40) + 8) + 1944);
  }
  v6 = (v5 >> 19) & 7;
  if (v6 <= 3 && v6 != 2)
    goto LABEL_12;
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v34 = v11;
    if (v11)
      ++*(_DWORD *)(v11 + 16);
  }
  else
  {
    v11 = 0;
    v34 = 0;
  }
  if (v6 == 2)
  {
    if (v11)
    {
      do
      {
        v12 = *(unsigned __int8 *)(v11 + 46);
        if (v12 == 49
          || (*(_BYTE *)(v11 + 98) & 0x38) != 0
          || ((*(_BYTE *)(v11 + 45) & 0x40) != 0 || (v12 - 36) <= 4 && v12 != 38)
          && (*(_BYTE *)(v11 + 22) & 2) != 0)
        {
          break;
        }
        v13 = *(_QWORD *)(*(_QWORD *)(v11 + 88) + 40);
        if (*(_DWORD *)(*(_QWORD *)(v13 + 72) + 20))
        {
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8))
            break;
        }
        if ((*(_BYTE *)(v11 + 45) & 0x40) != 0 && *(_QWORD *)(v13 + 200))
        {
          v29 = v11;
          if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(*(WebCore::WillChangeData **)(v13 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8)) & 1) != 0)break;
          v11 = v29;
          v12 = *(unsigned __int8 *)(v29 + 46);
        }
        if (v12 == 67 || v12 == 90)
          break;
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 88) + 40);
        v15 = *(_BYTE *)(v14 + 462);
        v16 = *(_BYTE *)(v14 + 642) & 3;
        v17 = v15 | 0x19;
        if (v16 == 1)
          v15 |= 0x15u;
        v18 = v16 == 2 ? v17 : v15;
        if ((v18 & 3) != 0)
        {
          if ((*(_BYTE *)(v11 + 20) & 1) != 0
            || (v32 = v11,
                isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v11),
                v11 = v32,
                isAtomicInlineLevelBox))
          {
            if ((*(_QWORD *)(v11 + 96) & 0x1FLL) != 0x19
              && (*(unsigned __int8 *)(v11 + 46) - 36 > 4 || (*(_BYTE *)(v11 + 52) & 7) == 1))
            {
              break;
            }
          }
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 40) + 636) & 0xC0000) != 0)
        {
          if ((*(_BYTE *)(v11 + 20) & 1) != 0
            || (v33 = v11,
                v31 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v11),
                v11 = v33,
                v31))
          {
            if ((*(_QWORD *)(v11 + 96) & 0x1FLL) != 0x19)
            {
              v27 = *(unsigned __int8 *)(v11 + 46);
              if ((v27 - 36) <= 4)
              {
                if (v27 == 36)
                  break;
              }
              else if (v27 != 63 && v27 != 35)
              {
                break;
              }
            }
          }
        }
        v19 = v34;
        if (v37 && (const WebCore::RenderLayerModelObject *)v34 == v38)
          *v37 = 1;
        v20 = *(_QWORD *)(v19 + 32);
        if (v20)
        {
          v11 = *(_QWORD *)(v20 + 8);
          if (v11)
            ++*(_DWORD *)(v11 + 16);
        }
        else
        {
          v11 = 0;
        }
        v34 = v11;
        v21 = *(_DWORD *)(v19 + 16);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x1940DFBB8);
        }
        *(_DWORD *)(v19 + 16) = v21 - 1;
      }
      while (v11);
      v23 = v34;
      goto LABEL_73;
    }
    return 0;
  }
  if (!v11)
    return 0;
  while (1)
  {
    canContainFixedPositionObjects = WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v11);
    v23 = v34;
    if (canContainFixedPositionObjects)
      break;
    if ((*(_BYTE *)(v34 + 45) & 1) == 0)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v34 + 24) + 8);
      if (v24)
      {
        if ((*(_WORD *)(v24 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1940DFC84);
        }
        if ((*(_BYTE *)(v24 + 23) & 0x20) != 0)
          goto LABEL_79;
      }
    }
    if ((*(_QWORD *)(v34 + 96) & 0xF80000000000) == 0x480000000000)
    {
LABEL_79:
      WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v35);
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v36 + 3) + 8) + 40) + 8) + 1944);
      v23 = v34;
      goto LABEL_74;
    }
    if (v37 && (const WebCore::RenderLayerModelObject *)v34 == v38)
      *v37 = 1;
    v25 = *(_QWORD *)(v23 + 32);
    if (v25)
      v26 = *(_QWORD *)(v25 + 8);
    else
      v26 = 0;
    WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v34, v26);
    v8 = 0;
    v11 = v34;
    if (!v34)
      return v8;
  }
LABEL_73:
  v8 = v23;
LABEL_74:
  if (!v23)
    return v8;
  v28 = *(_DWORD *)(v23 + 16);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x1940DFC64);
  }
  *(_DWORD *)(v23 + 16) = v28 - 1;
  return v8;
}

float32x2_t WebCore::TransformState::mappedPoint(WebCore::TransformState *this, BOOL *a2, double (*a3)[4][4])
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x2_t result;
  float32_t v10;
  float64x2_t *v11;
  __int128 *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  _BYTE v18[136];
  float64x2_t v19[8];
  float32x2_t v20;

  if (a2)
    *a2 = 0;
  v3 = *((_DWORD *)this + 28);
  if (v3)
  {
    v4 = *((_DWORD *)this + 24);
    v5 = *((_DWORD *)this + 25);
    if (v4 == 0x80000000)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = -v4;
    if (v5 == 0x80000000)
      v7 = 0x7FFFFFFFLL;
    else
      v7 = -v5;
    v8 = v6 | (v7 << 32);
  }
  else
  {
    v8 = *((_QWORD *)this + 12);
  }
  result.f32[0] = (float)((float)(int)v8 * 0.015625) + *(float *)this;
  v10 = (float)((float)SHIDWORD(v8) * 0.015625) + *((float *)this + 1);
  v20.f32[0] = result.f32[0];
  v20.f32[1] = v10;
  v11 = (float64x2_t *)*((_QWORD *)this + 10);
  if (v11)
  {
    if (v3)
    {
      WebCore::TransformationMatrix::inverse(v11->f64, a3, (uint64_t)v18);
      if (v18[128])
        v12 = (__int128 *)v18;
      else
        v12 = &constinit_5;
      v13 = (float64x2_t)v12[5];
      v19[4] = (float64x2_t)v12[4];
      v19[5] = v13;
      v14 = (float64x2_t)v12[7];
      v19[6] = (float64x2_t)v12[6];
      v19[7] = v14;
      v15 = (float64x2_t)v12[1];
      v19[0] = (float64x2_t)*v12;
      v19[1] = v15;
      v16 = (float64x2_t)v12[3];
      v19[2] = (float64x2_t)v12[2];
      v19[3] = v16;
      return WebCore::TransformationMatrix::projectPoint(v19, (const WebCore::FloatPoint *)&v20, a2);
    }
    else
    {
      return WebCore::TransformationMatrix::mapPoint(v11, &v20);
    }
  }
  return result;
}

BOOL WebCore::RenderLayer::participatesInPreserve3D(WebCore::RenderLayer *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *v8;
  __int16 v9;
  WebCore::Node *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  WebCore::Node *v25;
  _BYTE v26[8];
  WTF::StringImpl *v27;
  char v28;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v3 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v3 + 45) & 1) != 0)
    goto LABEL_12;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (!v4)
    goto LABEL_12;
  v5 = *(unsigned __int16 *)(v4 + 28);
  if ((v5 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940E0124);
  }
  v6 = *(_QWORD *)(v4 + 32);
  if (v6)
  {
    if ((*(_WORD *)(v6 + 28) & 8) != 0)
    {
      v7 = *(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL;
      if (v7)
      {
        v20 = *(_QWORD *)(v7 + 88);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 224);
          if (v21)
          {
            v8 = (WebCore::Node *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v4);
            if (v8)
              goto LABEL_23;
            v5 = *(unsigned __int16 *)(v4 + 28);
          }
        }
      }
    }
  }
  if ((~v5 & 0x408) == 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 368))(v4))
  {
    v14 = *(_QWORD *)(v4 + 112);
    if (!v14)
      goto LABEL_12;
    goto LABEL_22;
  }
  v8 = *(WebCore::Node **)(v4 + 32);
  if (!v8)
    goto LABEL_12;
  v9 = *((_WORD *)v8 + 14);
  if ((v9 & 0x80) != 0)
  {
    v14 = *((_QWORD *)v8 + 25);
    if (!v14)
      goto LABEL_12;
LABEL_22:
    v8 = *(WebCore::Node **)(v14 + 8);
    if (v8)
      goto LABEL_23;
LABEL_12:
    v10 = 0;
    goto LABEL_13;
  }
  if ((v9 & 8) == 0)
    goto LABEL_12;
LABEL_23:
  *((_DWORD *)v8 + 6) += 2;
  v25 = v8;
  while (1)
  {
    v26[0] = 0;
    v28 = 0;
    v16 = (*(uint64_t (**)(WebCore::Node *, _BYTE *))(*(_QWORD *)v8 + 264))(v8, v26);
    if (v28)
    {
      v17 = v27;
      v27 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v10 = v25;
    if ((*(_QWORD *)(v16 + 16) & 0x1FLL) != 0x12)
      break;
    v23 = WebCore::Node::parentElementInComposedTree(v25);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v25, v23);
    v10 = 0;
    v8 = v25;
    if (!v25)
      goto LABEL_13;
  }
  if (!v25)
    goto LABEL_13;
  v18 = *(_QWORD *)(v1 + 32);
  if ((*(_BYTE *)(v18 + 45) & 1) != 0)
    goto LABEL_13;
  v19 = *(WebCore::Node **)(*(_QWORD *)(v18 + 24) + 8);
  if (!v19)
    goto LABEL_13;
  if ((*((_WORD *)v19 + 14) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1940E0144);
  }
  if (v25 != v19)
  {
LABEL_13:
    v11 = (*(_QWORD *)(*((_QWORD *)this + 4) + 96) >> 43) & 0x1FLL;
    switch((int)v11)
    {
      case 13:
        v22 = 12;
        goto LABEL_56;
      case 14:
        v22 = 13;
        goto LABEL_56;
      case 15:
      case 16:
        v22 = 14;
        goto LABEL_56;
      default:
        if ((_DWORD)v11 == 2)
        {
          v22 = 1;
LABEL_56:
          v12 = v22 == ((*(_QWORD *)(*(_QWORD *)(v1 + 32) + 96) >> 43) & 0x1F);
        }
        else
        {
          v12 = 0;
        }
        v25 = 0;
        if (!v10)
          goto LABEL_50;
        if (*((_DWORD *)v10 + 6) == 2)
          goto LABEL_45;
        *((_DWORD *)v10 + 6) -= 2;
        if (!v12)
          return 0;
        goto LABEL_36;
    }
  }
  v25 = 0;
  if (*((_DWORD *)v10 + 6) == 2)
  {
    v12 = 1;
LABEL_45:
    if ((*((_WORD *)v10 + 15) & 0x400) != 0)
    {
LABEL_50:
      if (!v12)
        return 0;
    }
    else
    {
      WebCore::Node::removedLastRef(v10);
      if (!v12)
        return 0;
    }
  }
  else
  {
    *((_DWORD *)v10 + 6) -= 2;
  }
LABEL_36:
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 32) + 88) + 40) + 636) & 0x380) != 0x80)
    return 0;
  if (*((_QWORD *)this + 25))
    return 1;
  v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 40) + 636);
  return (v24 & 0x400) != 0 || (v24 & 0x380) == 128;
}

unint64_t WebCore::RenderBoxModelObject::offsetForInFlowPosition(WebCore::RenderBoxModelObject *this, double a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  int v10;
  double v11;
  float v12;
  double v13;
  double v14;
  BOOL v16;
  int v17;
  double v18;
  unsigned int v19;
  _QWORD v20[2];
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _DWORD v27[4];

  v3 = *((_DWORD *)this + 5) & 0x1800000;
  if (v3 == 0x800000)
  {
    v4 = WebCore::RenderBoxModelObject::relativePositionOffset(this);
    v5 = HIDWORD(v4);
  }
  else if (v3 == 25165824)
  {
    WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(this, a2);
    v27[0] = v7;
    v27[1] = v8;
    v27[2] = v9;
    v27[3] = v10;
    v21 = 0;
    v20[0] = off_1E34043D0;
    v20[1] = 0;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    WebCore::RenderBoxModelObject::computeStickyPositionConstraints(this, (WebCore::StickyPositionViewportConstraints *)v20, (const WebCore::FloatRect *)v27);
    v11 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)v20, (const WebCore::FloatRect *)v27)* 64.0;
    v13 = v12;
    v14 = v13 * 64.0;
    v16 = v13 * 64.0 >= 2147483650.0 || v11 <= -2147483650.0 || v14 <= -2147483650.0;
    if (v16 || v11 >= 2147483650.0)
    {
      if (v11 > -2147483650.0)
        v17 = (int)v11;
      else
        v17 = 0x80000000;
      if (v11 < 2147483650.0)
        LODWORD(v4) = v17;
      else
        LODWORD(v4) = 0x7FFFFFFF;
      v18 = v13 * 64.0;
      if (v18 > -2147483650.0)
        v19 = (int)v18;
      else
        v19 = 0x80000000;
      if (v18 < 2147483650.0)
        v5 = v19;
      else
        v5 = 0x7FFFFFFFLL;
    }
    else
    {
      LODWORD(v4) = (int)v11;
      v5 = (int)v14;
    }
  }
  else
  {
    v5 = 0;
    LODWORD(v4) = 0;
  }
  return v4 | (unint64_t)(v5 << 32);
}

void WebCore::TransformState::flatten(WebCore::TransformState *this, double (*a2)[4][4])
{
  int32x2_t v4;
  float64x2_t *v5;
  int32x2_t v6;

  if (a2)
    LOBYTE((*a2)[0][0]) = 0;
  v6 = *(int32x2_t *)((char *)this + 96);
  v4 = v6;
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*((_QWORD *)this + 10))
    {
      WebCore::TransformState::translateTransform(this, (const WebCore::LayoutSize *)&v6);
      WebCore::TransformState::flatten(this, 0);
    }
    else
    {
      WebCore::TransformState::translateMappedCoordinates(this, &v6);
    }
  }
  v5 = (float64x2_t *)*((_QWORD *)this + 10);
  if (v5)
    WebCore::TransformState::flattenWithTransform(this, v5, a2);
  else
    *((_BYTE *)this + 104) = 0;
}

uint64_t WebCore::RenderObject::container(WebCore::RenderObject *this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL canContainFixedPositionObjects;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int isAtomicInlineLevelBox;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33[3];
  WebCore::RenderObject *v34;
  _BYTE *v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  v1 = *((_BYTE *)this + 45);
  if ((v1 & 2) != 0 || *((_BYTE *)this + 46) == 17)
    goto LABEL_12;
  v33[0] = &v35;
  v33[1] = &v36;
  v33[2] = &v34;
  v34 = this;
  if ((v1 & 1) == 0)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v2)
    {
      if ((*(_WORD *)(v2 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1940E05E8);
      }
      if ((*(_BYTE *)(v2 + 23) & 0x20) != 0)
        goto LABEL_80;
    }
  }
  v3 = *((_QWORD *)this + 12);
  if ((v3 & 0xF80000000000) == 0x480000000000)
  {
LABEL_80:
    WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v33);
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v34 + 3) + 8) + 40) + 8) + 1944);
  }
  v4 = (v3 >> 19) & 7;
  if (v4 <= 3 && v4 != 2)
  {
LABEL_12:
    v6 = *((_QWORD *)this + 4);
    if (v6)
      return *(_QWORD *)(v6 + 8);
    return v6;
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v32 = v9;
    if (v9)
      ++*(_DWORD *)(v9 + 16);
  }
  else
  {
    v9 = 0;
    v32 = 0;
  }
  if (v4 != 2)
  {
    if (v9)
    {
      while (1)
      {
        canContainFixedPositionObjects = WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v9);
        v21 = v32;
        if (canContainFixedPositionObjects)
          goto LABEL_73;
        if ((*(_BYTE *)(v32 + 45) & 1) == 0)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 8);
          if (v22)
          {
            if ((*(_WORD *)(v22 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1940E0748);
            }
            if ((*(_BYTE *)(v22 + 23) & 0x20) != 0)
              goto LABEL_79;
          }
        }
        if ((*(_QWORD *)(v32 + 96) & 0xF80000000000) == 0x480000000000)
        {
LABEL_79:
          WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v33);
          v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v34 + 3) + 8) + 40) + 8) + 1944);
          v21 = v32;
          goto LABEL_74;
        }
        if (v35 && v32 == v36)
          *v35 = 1;
        v23 = *(_QWORD *)(v21 + 32);
        if (v23)
          v24 = *(_QWORD *)(v23 + 8);
        else
          v24 = 0;
        WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v32, v24);
        v6 = 0;
        v9 = v32;
        if (!v32)
          return v6;
      }
    }
    return 0;
  }
  if (!v9)
    return 0;
  do
  {
    v10 = *(unsigned __int8 *)(v9 + 46);
    if (v10 == 49
      || (*(_BYTE *)(v9 + 98) & 0x38) != 0
      || ((*(_BYTE *)(v9 + 45) & 0x40) != 0 || (v10 - 36) <= 4 && v10 != 38)
      && (*(_BYTE *)(v9 + 22) & 2) != 0)
    {
      break;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 40);
    if (*(_DWORD *)(*(_QWORD *)(v11 + 72) + 20))
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8))
        break;
    }
    if ((*(_BYTE *)(v9 + 45) & 0x40) != 0 && *(_QWORD *)(v11 + 200))
    {
      v27 = v9;
      if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(*(WebCore::WillChangeData **)(v11 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8)) & 1) != 0)break;
      v9 = v27;
      v10 = *(unsigned __int8 *)(v27 + 46);
    }
    if (v10 == 67 || v10 == 90)
      break;
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 40);
    v13 = *(_BYTE *)(v12 + 462);
    v14 = *(_BYTE *)(v12 + 642) & 3;
    v15 = v13 | 0x19;
    if (v14 == 1)
      v13 |= 0x15u;
    v16 = v14 == 2 ? v15 : v13;
    if ((v16 & 3) != 0)
    {
      if ((*(_BYTE *)(v9 + 20) & 1) != 0
        || (v30 = v9,
            isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v9),
            v9 = v30,
            isAtomicInlineLevelBox))
      {
        if ((*(_QWORD *)(v9 + 96) & 0x1FLL) != 0x19
          && (*(unsigned __int8 *)(v9 + 46) - 36 > 4 || (*(_BYTE *)(v9 + 52) & 7) == 1))
        {
          break;
        }
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 40) + 636) & 0xC0000) != 0)
    {
      if ((*(_BYTE *)(v9 + 20) & 1) != 0
        || (v31 = v9, v29 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v9), v9 = v31, v29))
      {
        if ((*(_QWORD *)(v9 + 96) & 0x1FLL) != 0x19)
        {
          v25 = *(unsigned __int8 *)(v9 + 46);
          if ((v25 - 36) <= 4)
          {
            if (v25 == 36)
              break;
          }
          else if (v25 != 63 && v25 != 35)
          {
            break;
          }
        }
      }
    }
    v17 = v32;
    if (v35 && v32 == v36)
      *v35 = 1;
    v18 = *(_QWORD *)(v17 + 32);
    if (v18)
    {
      v9 = *(_QWORD *)(v18 + 8);
      if (v9)
        ++*(_DWORD *)(v9 + 16);
    }
    else
    {
      v9 = 0;
    }
    v32 = v9;
    v19 = *(_DWORD *)(v17 + 16);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1940E068CLL);
    }
    *(_DWORD *)(v17 + 16) = v19 - 1;
  }
  while (v9);
  v21 = v32;
LABEL_73:
  v6 = v21;
LABEL_74:
  if (v21)
  {
    v26 = *(_DWORD *)(v21 + 16);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x1940E0728);
    }
    *(_DWORD *)(v21 + 16) = v26 - 1;
  }
  return v6;
}

double WebCore::TransformState::translateMappedCoordinates(WebCore::TransformState *this, int32x2_t *a2)
{
  int8x8_t v2;
  float32x4_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  WTF *v7;
  uint64_t v8;

  if (*((_DWORD *)this + 28))
  {
    v2 = (int8x8_t)vceq_s32(*a2, (int32x2_t)0x8000000080000000);
    *(int8x8_t *)v3.f32 = vorr_s8((int8x8_t)(*(_QWORD *)&v2 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8((int8x8_t)vneg_s32(*a2), v2));
  }
  else
  {
    *(int32x2_t *)v3.f32 = *a2;
  }
  if (*((_BYTE *)this + 105))
    *(float32x2_t *)this = vadd_f32(vmul_f32(vcvt_f32_s32(*(int32x2_t *)v3.f32), (float32x2_t)vdup_n_s32(0x3C800000u)), *(float32x2_t *)this);
  if (*((_BYTE *)this + 106))
  {
    *(float32x2_t *)v3.f32 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)v3.f32), (float32x2_t)vdup_n_s32(0x3C800000u));
    v3.i64[1] = v3.i64[0];
    *(float32x4_t *)((char *)this + 8) = vaddq_f32(v3, *(float32x4_t *)((char *)this + 8));
    *(float32x4_t *)((char *)this + 24) = vaddq_f32(v3, *(float32x4_t *)((char *)this + 24));
    if (*((_BYTE *)this + 72))
    {
      *(float32x4_t *)((char *)this + 40) = vaddq_f32(v3, *(float32x4_t *)((char *)this + 40));
      v3 = vaddq_f32(v3, *(float32x4_t *)((char *)this + 56));
      *(float32x4_t *)((char *)this + 56) = v3;
    }
  }
  if (*((_DWORD *)this + 27))
  {
    v4 = *((_QWORD *)this + 11);
    if (!v4)
    {
      v4 = WTF::fastMalloc((WTF *)0x80);
      *(_OWORD *)(v4 + 64) = xmmword_1969F8F50;
      *(_OWORD *)(v4 + 80) = *(_OWORD *)&qword_1969F8F60;
      *(_OWORD *)(v4 + 96) = xmmword_1969F8F70;
      *(_OWORD *)(v4 + 112) = unk_1969F8F80;
      *(_OWORD *)v4 = constinit_5;
      *(_OWORD *)(v4 + 16) = unk_1969F8F20;
      *(_OWORD *)(v4 + 32) = xmmword_1969F8F30;
      *(_OWORD *)(v4 + 48) = unk_1969F8F40;
      v7 = (WTF *)*((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = v4;
      if (v7)
      {
        WTF::fastFree(v7, v6);
        v4 = *((_QWORD *)this + 11);
      }
    }
    if (*((_DWORD *)this + 28))
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 0;
      *(_OWORD *)(v4 + 80) = xmmword_1968A14B0;
      *(_QWORD *)(v4 + 112) = 0;
      v4 = *((_QWORD *)this + 11);
      v5 = a2->i32[0];
      if (*((_DWORD *)this + 28))
      {
        v3.i64[0] = *(_OWORD *)&WebCore::TransformationMatrix::translate((float64x2_t *)v4, (double)v5 * 0.015625, (double)a2->i32[1] * 0.015625);
        goto LABEL_19;
      }
    }
    else
    {
      v5 = a2->i32[0];
    }
    *(double *)v3.i64 = WebCore::TransformationMatrix::translateRight((WebCore::TransformationMatrix *)v4, (double)v5 * 0.015625, (double)a2->i32[1] * 0.015625);
LABEL_19:
    if (!*((_DWORD *)this + 28))
    {
      v8 = *((_QWORD *)this + 11);
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 72) = 0;
      v3.i64[0] = 0x3FF0000000000000;
      *(_OWORD *)(v8 + 80) = xmmword_1968A14B0;
      *(_QWORD *)(v8 + 112) = 0;
    }
  }
  return *(double *)v3.i64;
}

void WebCore::RenderView::mapLocalToContainer(uint64_t a1, uint64_t a2, WebCore::TransformState *this, char a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  float64x2_t v21[8];

  if ((a4 & 1) != 0)
  {
    v12 = *(_QWORD *)(a1 + 248);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 328) + 136) + 704) & 0x1000) != 0)
    {
      v16 = WebCore::LocalFrameView::scrollPositionForFixedPosition((int32x2_t *)v12);
      v19 = v16 & 0xFFFFFFFF00000000;
    }
    else
    {
      if (*(_BYTE *)(v12 + 1176))
        v13 = *(_QWORD *)(v12 + 1180);
      else
        v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 + 64) + 832))(v12 + 64, 0, 1);
      v14 = HIDWORD(v13);
      v15 = (_DWORD)v13 << 6;
      if ((int)v13 < -33554432)
        v15 = 0x80000000;
      if ((int)v13 <= 0x1FFFFFF)
        LODWORD(v16) = v15;
      else
        LODWORD(v16) = 0x7FFFFFFF;
      v17 = v14 << 38;
      if ((int)v14 < -33554432)
        v17 = 0x8000000000000000;
      v18 = (int)v14 <= 0x1FFFFFF;
      v19 = 0x7FFFFFFF00000000;
      if (v18)
        v19 = v17;
    }
    *(_QWORD *)&v21[0].f64[0] = v19 | v16;
    WebCore::TransformState::move(this, (WebCore::LayoutSize *)v21, 0);
  }
  if (!a2 && (a4 & 2) != 0)
  {
    v8 = *(_DWORD *)(a1 + 20);
    if ((v8 & 0x20000) != 0)
    {
      v9 = a1;
      if ((*(_BYTE *)(a1 + 45) & 2) != 0)
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v10 = *(_QWORD *)(v9 + 88);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 40) + 20)
        || (v11 = *(_QWORD **)(v10 + 40), v11[41])
        || v11[38]
        || v11[39]
        || v11[40]
        || (v8 & 0x100000) != 0)
      {
        v21[5] = (float64x2_t)unk_1969FD278;
        v21[6] = (float64x2_t)xmmword_1969FD288;
        v21[7] = (float64x2_t)unk_1969FD298;
        v21[0] = (float64x2_t)xmmword_1969FD228;
        v21[1] = (float64x2_t)unk_1969FD238;
        v21[2] = (float64x2_t)xmmword_1969FD248;
        memset(&v21[3], 0, 32);
        v20 = 0;
        WebCore::RenderObject::getTransformFromContainer((WebCore::RenderObject *)a1, (const WebCore::LayoutSize *)&v20, (WebCore::TransformationMatrix *)v21);
        WebCore::TransformState::applyTransform((float64x2_t **)this, v21, 0, 0);
      }
    }
  }
}

uint64_t WebCore::PseudoElement::customPseudoId(WebCore::PseudoElement *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t WebCore::Node::customPseudoId(WebCore::Node *this)
{
  return 0;
}

uint64_t WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 32 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 27))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = 32 * v10;
      v14 = v5;
      do
      {
        v15 = *(_OWORD *)v14;
        v16 = *((_OWORD *)v14 + 1);
        v14 = (WTF *)((char *)v14 + 32);
        *v11 = v15;
        v11[1] = v16;
        v11 += 2;
        v13 -= 32;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WebCore::GraphicsLayerCA::layerTransform(WebCore::GraphicsLayerCA *this, const WebCore::FloatPoint *a2, float64x2_t *a3, float a4, float a5)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t *v15;
  uint64_t v16;
  WebCore::TransformationMatrix *v17;
  float v18;
  float v19;
  float v20;
  __int128 *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  const double *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2x4_t v47;
  float64x2x4_t v48;
  float64x2x4_t v49;
  float64x2x4_t v50;
  float64x2x4_t v51;
  float64x2x4_t v52;
  float64x2x4_t v53;
  float64x2x4_t v54;

  *(_OWORD *)this = xmmword_1969F7EB0;
  *((_OWORD *)this + 1) = unk_1969F7EC0;
  *((_OWORD *)this + 2) = xmmword_1969F7ED0;
  *((_OWORD *)this + 3) = unk_1969F7EE0;
  *((_OWORD *)this + 4) = xmmword_1969F7EF0;
  *((_OWORD *)this + 5) = unk_1969F7F00;
  *((double *)this + 12) = a4;
  *((double *)this + 13) = a5;
  *((_OWORD *)this + 7) = xmmword_1968A14C0;
  if (a3 || (a3 = (float64x2_t *)*((_QWORD *)a2 + 13)) != 0)
  {
    WebCore::GraphicsLayerCA::transformByApplyingAnchorPoint(&v39, (float *)a2, a3);
    v7 = *(float64x2_t *)this;
    v8 = *((float64x2_t *)this + 1);
    v9 = *((float64x2_t *)this + 2);
    v10 = *((float64x2_t *)this + 3);
    v11 = *((float64x2_t *)this + 4);
    v12 = *((float64x2_t *)this + 5);
    v13 = *((float64x2_t *)this + 6);
    v14 = *((float64x2_t *)this + 7);
    v51 = vld4q_dup_f64(v39.f64);
    v15 = &v41;
    v47 = vld4q_dup_f64(v15->f64);
    v15 += 2;
    *(float64x2_t *)this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v51.val[0], *(float64x2_t *)this), v51.val[1], v9), v51.val[2], v11), v51.val[3], v13);
    *((float64x2_t *)this + 1) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v51.val[0], v8), v51.val[1], v10), v51.val[2], v12), v51.val[3], v14);
    v52 = vld4q_dup_f64(v15->f64);
    v15 += 2;
    *((float64x2_t *)this + 2) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v7), v47.val[1], v9), v47.val[2], v11), v47.val[3], v13);
    *((float64x2_t *)this + 3) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v8), v47.val[1], v10), v47.val[2], v12), v47.val[3], v14);
    v48 = vld4q_dup_f64(v15->f64);
    *((float64x2_t *)this + 4) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v52.val[0], v7), v52.val[1], v9), v52.val[2], v11), v52.val[3], v13);
    *((float64x2_t *)this + 5) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v52.val[0], v8), v52.val[1], v10), v52.val[2], v12), v52.val[3], v14);
    *((float64x2_t *)this + 6) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v7), v48.val[1], v9), v48.val[2], v11), v48.val[3], v13);
    *((float64x2_t *)this + 7) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v8), v48.val[1], v10), v48.val[2], v12), v48.val[3], v14);
  }
  v16 = *((_QWORD *)a2 + 25);
  if (v16)
  {
    v17 = *(WebCore::TransformationMatrix **)(v16 + 112);
    if (v17)
    {
      if (!WebCore::TransformationMatrix::isIdentity(v17))
      {
        v18 = *(float *)(v16 + 96) + (float)(*(float *)(v16 + 76) * *(float *)(v16 + 88));
        v19 = *(float *)(v16 + 100) + (float)(*(float *)(v16 + 80) * *(float *)(v16 + 92));
        v20 = *(float *)(v16 + 84) + 0.0;
        WebCore::TransformationMatrix::translateRight3d(this, (float)-v18, (float)-v19, (float)-v20);
        v21 = *(__int128 **)(v16 + 112);
        if (!v21)
          v21 = &WebCore::TransformationMatrix::identity;
        v22 = (float64x2_t)*v21;
        v23 = (float64x2_t)v21[1];
        v24 = (float64x2_t)v21[3];
        v41 = (float64x2_t)v21[2];
        v42 = v24;
        v39 = v22;
        v40 = v23;
        v25 = (float64x2_t)v21[4];
        v26 = (float64x2_t)v21[5];
        v27 = (float64x2_t)v21[7];
        v45 = (float64x2_t)v21[6];
        v46 = v27;
        v43 = v25;
        v44 = v26;
        v28 = (const double *)this;
        v29 = v39;
        v30 = v40;
        v31 = v41;
        v32 = v42;
        v33 = v25;
        v34 = v26;
        v35 = v27;
        v53 = vld4q_dup_f64(v28);
        v28 += 4;
        v36 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v53.val[0], v39), v53.val[1], v41), v53.val[2], v25), v53.val[3], v45);
        v37 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v53.val[0], v40), v53.val[1], v42), v53.val[2], v26), v53.val[3], v27);
        v49 = vld4q_dup_f64(v28);
        v28 += 4;
        v39 = v36;
        v40 = v37;
        v54 = vld4q_dup_f64(v28);
        v28 += 4;
        v41 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v29), v49.val[1], v41), v49.val[2], v33), v49.val[3], v45);
        v42 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v30), v49.val[1], v42), v49.val[2], v34), v49.val[3], v35);
        v38 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v54.val[0], v30), v54.val[1], v32), v54.val[2], v34), v54.val[3], v35);
        v50 = vld4q_dup_f64(v28);
        v43 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v54.val[0], v29), v54.val[1], v31), v54.val[2], v33), v54.val[3], v45);
        v44 = v38;
        v45 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v50.val[0], v29), v50.val[1], v31), v50.val[2], v33), v50.val[3], v45);
        v46 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v50.val[0], v30), v50.val[1], v32), v50.val[2], v34), v50.val[3], v35);
        *((float64x2_t *)this + 4) = v43;
        *((float64x2_t *)this + 5) = v38;
        v50.val[1] = v46;
        *((float64x2_t *)this + 6) = v45;
        *((_OWORD *)this + 7) = v50.val[1];
        v50.val[1] = v40;
        *(float64x2_t *)this = v39;
        *((_OWORD *)this + 1) = v50.val[1];
        v50.val[1] = v42;
        *((float64x2_t *)this + 2) = v41;
        *((_OWORD *)this + 3) = v50.val[1];
        WebCore::TransformationMatrix::translateRight3d(this, v18, v19, v20);
      }
    }
  }
}

uint64_t WebCore::RenderLayerBacking::getCurrentTransform(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2, WebCore::TransformationMatrix *a3)
{
  const WebCore::GraphicsLayer *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  _OWORD v15[8];

  v4 = (const WebCore::GraphicsLayer *)*((_QWORD *)this + 8);
  if (!v4)
    v4 = (const WebCore::GraphicsLayer *)*((_QWORD *)this + 9);
  if (v4 != a2)
    return 0;
  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_DWORD *)(v6 + 20);
  if ((v7 & 0x20000) == 0)
    return 0;
  if ((*(_BYTE *)(v6 + 45) & 2) != 0)
    v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
  v9 = *(_QWORD *)(v6 + 88);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 40) + 20))
  {
    v14 = *(_QWORD **)(v9 + 40);
    if (!v14[41] && !v14[38] && !v14[39] && !v14[40] && (v7 & 0x100000) == 0)
      return 0;
  }
  WebCore::RenderLayer::currentTransform(v5, (const WebCore::RenderElement *)0x1E, (uint64_t)v15);
  v10 = v15[5];
  *((_OWORD *)a3 + 4) = v15[4];
  *((_OWORD *)a3 + 5) = v10;
  v11 = v15[7];
  *((_OWORD *)a3 + 6) = v15[6];
  *((_OWORD *)a3 + 7) = v11;
  v12 = v15[1];
  *(_OWORD *)a3 = v15[0];
  *((_OWORD *)a3 + 1) = v12;
  v13 = v15[3];
  *((_OWORD *)a3 + 2) = v15[2];
  *((_OWORD *)a3 + 3) = v13;
  return 1;
}

void WebCore::RenderView::mapAbsoluteToLocalPoint(uint64_t a1, char a2, float64x2_t **a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  float64x2_t v11[8];

  if ((a2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a1 + 20);
    if ((v6 & 0x20000) != 0)
    {
      v7 = a1;
      if ((*(_BYTE *)(a1 + 45) & 2) != 0)
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v8 = *(_QWORD *)(v7 + 88);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 40) + 20)
        || (v9 = *(_QWORD **)(v8 + 40), v9[41])
        || v9[38]
        || v9[39]
        || v9[40]
        || (v6 & 0x100000) != 0)
      {
        v11[5] = (float64x2_t)unk_1969FD278;
        v11[6] = (float64x2_t)xmmword_1969FD288;
        v11[7] = (float64x2_t)unk_1969FD298;
        v11[0] = (float64x2_t)xmmword_1969FD228;
        v11[1] = (float64x2_t)unk_1969FD238;
        v11[2] = (float64x2_t)xmmword_1969FD248;
        memset(&v11[3], 0, 32);
        v10 = 0;
        WebCore::RenderObject::getTransformFromContainer((WebCore::RenderObject *)a1, (const WebCore::LayoutSize *)&v10, (WebCore::TransformationMatrix *)v11);
        WebCore::TransformState::applyTransform(a3, v11, 0, 0);
      }
    }
  }
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)&v11[0].f64[0] = WebCore::LocalFrameView::scrollPositionRespectingCustomFixedPosition(*(WebCore::LocalFrameView **)(a1 + 248));
    WebCore::TransformState::move((WebCore::TransformState *)a3, (WebCore::LayoutSize *)v11, 0);
  }
}

float WebCore::RenderLayerCompositor::customPositionForVisibleRectComputation(WebCore::RenderLayerCompositor *this, const WebCore::GraphicsLayer *a2, WebCore::FloatPoint *a3, float result)
{
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  int v8;
  int v9;
  float v10;
  int v11;
  int v12;
  int8x8_t v13;
  unint64_t v14;
  WebCore::FloatPoint *v15;
  int8x8_t v16;

  if (*((const WebCore::GraphicsLayer **)this + 31) == a2)
  {
    v4 = -*(float *)a3;
    v5 = -*((float *)a3 + 1);
    v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 248);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 328) + 136) + 664) & 0x4000000000) == 0)
    {
      v7 = roundf(v4);
      if (v7 > -2147500000.0)
        v8 = (int)v7;
      else
        v8 = 0x80000000;
      if (v7 < 2147500000.0)
        v9 = v8;
      else
        v9 = 0x7FFFFFFF;
      v10 = roundf(v5);
      if (v10 > -2147500000.0)
        v11 = (int)v10;
      else
        v11 = 0x80000000;
      if (v10 < 2147500000.0)
        v12 = v11;
      else
        v12 = 0x7FFFFFFF;
      v13 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(v12, v9), (int32x2_t)0xFE000000FE000000);
      v16 = vorr_s8((int8x8_t)(*(_QWORD *)&v13 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v12, v9)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v12, v9), 6uLL)), v13));
      v15 = a3;
      v14 = WebCore::ScrollableArea::constrainScrollPositionForOverhang((WebCore::ScrollableArea *)(v6 + 64), (const WebCore::LayoutPoint *)&v16);
      a3 = v15;
      v4 = (float)(int)v14 * 0.015625;
      v5 = (float)SHIDWORD(v14) * 0.015625;
    }
    result = -v5;
    *(float *)a3 = -v4;
    *((float *)a3 + 1) = result;
  }
  return result;
}

uint64_t WebCore::GraphicsLayerClient::getCurrentTransform()
{
  return 0;
}

float64x2_t *WebCore::GraphicsLayerCA::transformByApplyingAnchorPoint(float64x2_t *result, float *a2, float64x2_t *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  const double *f64;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2x4_t v24;
  float64x2x4_t v25;
  float64x2x4_t v26;
  float64x2x4_t v27;

  if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*a3, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqzq_f64(a3[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a3[2], (float64x2_t)xmmword_1968A14C0), (int32x4_t)vceqzq_f64(a3[3])))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a3[4]), (int32x4_t)vceqq_f64(a3[5], (float64x2_t)xmmword_1968A14B0)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a3[6]),
                                                                   (int32x4_t)vceqq_f64(a3[7], (float64x2_t)xmmword_1968A14C0)))))) & 1) != 0)
  {
    result[2] = (float64x2_t)xmmword_1969F7F30;
    result[3] = (float64x2_t)unk_1969F7F40;
    result[4] = (float64x2_t)xmmword_1969F7F50;
    result[5] = (float64x2_t)unk_1969F7F60;
    *result = (float64x2_t)xmmword_1969F7F10;
    result[1] = (float64x2_t)unk_1969F7F20;
    v3 = a2[19];
    v4 = a2[20];
    v5 = a2[21];
    v6 = a2[22];
    v7 = a2[23];
    v8 = (float)(v3 * v6);
    v9 = (float)(v4 * v7);
    result[6].f64[0] = v9 * 0.0 + v8 + v5 * 0.0 + 0.0;
    result[6].f64[1] = v9 + v8 * 0.0 + v5 * 0.0 + 0.0;
    v10 = v9 * 0.0 + v8 * 0.0;
    result[7].f64[0] = v10 + v5 + 0.0;
    result[7].f64[1] = v10 + v5 * 0.0 + 1.0;
    v11 = *result;
    v12 = result[1];
    v13 = result[2];
    v14 = result[3];
    v15 = result[4];
    v16 = result[5];
    v17 = result[6];
    v18 = result[7];
    v26 = vld4q_dup_f64(a3->f64);
    f64 = a3[2].f64;
    v24 = vld4q_dup_f64(f64);
    f64 += 4;
    *result = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], *result), v26.val[1], v13), v26.val[2], v15), v26.val[3], v17);
    result[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v26.val[0], v12), v26.val[1], v14), v26.val[2], v16), v26.val[3], v18);
    v27 = vld4q_dup_f64(f64);
    f64 += 4;
    result[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v11), v24.val[1], v13), v24.val[2], v15), v24.val[3], v17);
    result[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v12), v24.val[1], v14), v24.val[2], v16), v24.val[3], v18);
    v25 = vld4q_dup_f64(f64);
    result[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v11), v27.val[1], v13), v27.val[2], v15), v27.val[3], v17);
    result[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v12), v27.val[1], v14), v27.val[2], v16), v27.val[3], v18);
    result[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v11), v25.val[1], v13), v25.val[2], v15), v25.val[3], v17);
    result[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v12), v25.val[1], v14), v25.val[2], v16), v25.val[3], v18);
    v25.val[0].f64[0] = (float)-(float)(v3 * v6);
    v25.val[1].f64[0] = (float)-(float)(v4 * v7);
    v25.val[2].f64[0] = (float)-v5;
    v25.val[3] = vaddq_f64(result[6], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(result[2], v25.val[1].f64[0]), *result, v25.val[0].f64[0]), result[4], v25.val[2].f64[0]));
    v25.val[0] = vaddq_f64(result[7], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(result[3], v25.val[1].f64[0]), result[1], v25.val[0].f64[0]), result[5], v25.val[2].f64[0]));
    result[6] = v25.val[3];
    result[7] = v25.val[0];
  }
  else
  {
    v20 = a3[5];
    result[4] = a3[4];
    result[5] = v20;
    v21 = a3[7];
    result[6] = a3[6];
    result[7] = v21;
    v22 = a3[1];
    *result = *a3;
    result[1] = v22;
    v23 = a3[3];
    result[2] = a3[2];
    result[3] = v23;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DataURLDecoder::decode(WTF::URL const&,WebCore::DataURLDecoder::ScheduleContext const&,WebCore::DataURLDecoder::ShouldValidatePadding,WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  WTF::StringImpl *result;
  void *v4;
  WTF::StringImpl *v5[2];
  WTF::StringImpl *v6[2];
  uint64_t v7;
  char v8;

  LOBYTE(v5[0]) = 0;
  v8 = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v1 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = 0u;
    v2 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)v5 = v1;
    *(_OWORD *)v6 = v2;
    *(_QWORD *)&v1 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    v7 = v1;
    v8 = 1;
  }
  result = (WTF::StringImpl *)WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)>::operator()(*(_QWORD *)(a1 + 56), (__int128 *)v5);
  if (v8)
  {
    if (v6[1])
      WTF::fastFree(v6[1], v4);
    if (v6[0])
    {
      if (*(_DWORD *)v6[0] == 2)
        WTF::StringImpl::destroy(v6[0], (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v6[0] -= 2;
    }
    if (v5[1])
    {
      if (*(_DWORD *)v5[1] == 2)
        WTF::StringImpl::destroy(v5[1], (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v5[1] -= 2;
    }
    result = v5[0];
    if (v5[0])
    {
      if (*(_DWORD *)v5[0] == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v5[0], (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v5[0] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SVGElement::animatableAttributeForName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  int v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;

  v3 = &unk_1EE2F9000;
  v4 = &unk_1EE2F9000;
  v5 = &unk_1EE2F9000;
  {
    v19 = a2;
    v20 = this;
    WebCore::SVGElement::animatableAttributeForName(WTF::AtomString const&)::$_0::operator()(&v21);
    WebCore::SVGElement::animatableAttributeForName(WTF::AtomString const&)::animatableAttributes = v21;
    v17 = v23;
    WebCore::SVGElement::animatableAttributeForName(WTF::AtomString const&)::animatableAttributes = v22;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    WebCore::SVGElement::animatableAttributeForName(WTF::AtomString const&)::animatableAttributes = v17;
    v24 = 0;
    WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap((uint64_t)&v21, v18);
    v3 = (_QWORD *)&unk_1EE2F9000;
    v4 = (_DWORD *)&unk_1EE2F9000;
    v5 = (_DWORD *)&unk_1EE2F9000;
    a2 = v19;
    this = v20;
  }
  v6 = v3[232];
  if (v6)
  {
    v7 = v4[466];
    v8 = v7 - 1;
    v9 = v5[468];
    v10 = *(_QWORD *)this;
    v11 = *(_DWORD *)(*(_QWORD *)this + 16);
    v12 = (v9 ^ (v11 >> 8)) & (v7 - 1);
    v13 = *(_QWORD *)(v6 + 16 * v12);
    if (v13)
    {
      v14 = v11 >> 8;
      v15 = -1;
      do
      {
        this = *(unsigned int *)(v13 + 16);
        if (++v15 > (((_DWORD)v12 + v7 - ((v9 ^ (this >> 8)) & v8)) & v8))
          break;
        if (v13 == v10 && this >> 8 == v14)
        {
          v16 = *(_DWORD **)(v6 + 16 * v12 + 8);
          if (v16)
            goto LABEL_11;
          goto LABEL_12;
        }
        v12 = ((_DWORD)v12 + 1) & v8;
        v13 = *(_QWORD *)(v6 + 16 * v12);
      }
      while (v13);
    }
  }
  v16 = (_DWORD *)WebCore::nullName;
  if (WebCore::nullName)
LABEL_11:
    ++*v16;
LABEL_12:
  *a2 = v16;
  return this;
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits> &>@<X0>(uint64_t result@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v23;
  WTF::StringImpl **v24;
  int v25;
  char v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WebCore::QualifiedName::QualifiedNameImpl *v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  void *v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WebCore::QualifiedName::QualifiedNameImpl *v47;

  v6 = result;
  v9 = *(_DWORD *)(result + 8);
  v8 = *(unsigned int *)(result + 12);
  if (20 * v8 >= 19 * (unint64_t)v9 || *(_BYTE *)(result + 20) && v9 <= 2 * (int)v8)
  {
    if (v9)
      v45 = 2 * v9;
    else
      v45 = 8;
    result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(result, v45);
    v9 = *(_DWORD *)(v6 + 8);
  }
  v10 = v9 - 1;
  v11 = *(_DWORD *)(v6 + 16);
  v12 = *a2;
  v13 = *((_DWORD *)*a2 + 4);
  v14 = (v11 ^ (v13 >> 8)) & (v9 - 1);
  v15 = *(_QWORD *)v6;
  v16 = *(_QWORD *)v6 + 16 * v14;
  v17 = *(WTF::StringImpl **)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = v13 >> 8;
    do
    {
      v20 = *((_DWORD *)v17 + 4);
      v21 = (v14 + v9 - ((v11 ^ (v20 >> 8)) & v10)) & v10;
      if (v18 > v21)
      {
        v27 = v15 + 16 * v14;
        v16 = v27;
        if (v18 >= 0x80)
          *(_BYTE *)(v6 + 20) = 1;
        v46 = v17;
        v29 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v27 + 8);
        v28 = (WTF::StringImpl ***)(v27 + 8);
        v47 = v29;
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        v30 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
          ++*(_DWORD *)WebCore::nullName;
        *v28 = v30;
        v31 = *a2;
        if (*a2)
          *(_DWORD *)v31 += 2;
        *(_QWORD *)v16 = v31;
        v32 = *a3;
        if (*a3)
          ++*(_DWORD *)v32;
        *v28 = v32;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
            WTF::fastFree(v41, v42);
          }
          else
          {
            --*(_DWORD *)v30;
          }
        }
        v33 = (v14 + 1) & v10;
        v34 = *(_QWORD *)v6;
        while (1)
        {
          v35 = v34 + 16 * v33;
          if (!*(_QWORD *)v35)
            break;
          ++v21;
          v36 = (v33 + v9 - ((v11 ^ (*(_DWORD *)(*(_QWORD *)v35 + 16) >> 8)) & v10)) & v10;
          if (v21 > v36)
          {
            std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>(&v46, (WTF::StringImpl *)(v34 + 16 * v33));
            v34 = *(_QWORD *)v6;
            v21 = v36;
          }
          v33 = (v33 + 1) & v10;
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>(v34 + 16 * v33, (WTF::StringImpl *)&v46);
        v38 = (WTF::StringImpl **)v47;
        v47 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v38);
            WTF::fastFree(v43, v44);
          }
          else
          {
            --*(_DWORD *)v38;
          }
        }
        result = (uint64_t)v46;
        v46 = 0;
        if (result)
        {
          v25 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result != 2)
            goto LABEL_19;
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v37);
        }
        goto LABEL_20;
      }
      if (v20 >> 8 == v19 && v17 == v12)
      {
        v26 = 0;
        v16 = v15 + 16 * v14;
        goto LABEL_21;
      }
      v14 = ((_DWORD)v14 + 1) & v10;
      ++v18;
      v17 = *(WTF::StringImpl **)(v15 + 16 * v14);
    }
    while (v17);
    v16 = v15 + 16 * v14;
    if (v18 >= 0x80)
      *(_BYTE *)(v6 + 20) = 1;
    if (!v12)
      goto LABEL_15;
  }
  *(_DWORD *)v12 += 2;
LABEL_15:
  *(_QWORD *)v16 = v12;
  v23 = (uint64_t *)(v15 + 16 * v14 + 8);
  v24 = *a3;
  if (*a3)
    ++*(_DWORD *)v24;
  result = *v23;
  *v23 = (uint64_t)v24;
  if (result)
  {
    v25 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      result = WTF::fastFree(v39, v40);
    }
    else
    {
LABEL_19:
      *(_DWORD *)result = v25;
    }
  }
LABEL_20:
  v9 = *(_DWORD *)(v6 + 8);
  ++*(_DWORD *)(v6 + 12);
  v15 = *(_QWORD *)v6;
  v26 = 1;
LABEL_21:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v15 + 16 * v9;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

WTF::StringImpl **WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **result;
  WTF *v8;
  void *v9;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  result = *(WTF::StringImpl ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF *v17;
  void *v18;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastMalloc((WTF *)(16 * a2));
  if (a2)
  {
    v8 = a2;
    v9 = (uint64_t *)(result + 8);
    do
    {
      *(v9 - 1) = 0;
      v10 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v9 = v10;
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v13 >> 31) ^ v13;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v14 = (WTF::StringImpl **)v5;
    do
    {
      if (*v14)
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, (uint64_t)v14);
      v15 = (WTF::StringImpl **)v14[1];
      v14[1] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v15);
          WTF::fastFree(v17, v18);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v7);
        else
          *(_DWORD *)v16 -= 2;
      }
      v14 += 2;
      --v4;
    }
    while (v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

WTF::StringImpl **WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **result;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;

  v3 = *((_DWORD *)a1 + 2);
  v4 = v3 - 1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *(WTF::StringImpl **)a2;
  v7 = (v5 ^ (*(_DWORD *)(*(_QWORD *)a2 + 16) >> 8)) & (v3 - 1);
  v8 = *a1;
  v9 = (WTF::StringImpl *)(*a1 + 16 * v7);
  v10 = *(WTF::StringImpl **)v9;
  if (*(_QWORD *)v9)
  {
    v16 = 0;
    do
    {
      v17 = (v7 + v3 - ((v5 ^ (*((_DWORD *)v10 + 4) >> 8)) & v4)) & v4;
      if (v16 > v17)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>((WTF::StringImpl **)a2, v9);
        v8 = *a1;
        v16 = v17;
      }
      v7 = ((_DWORD)v7 + 1) & v4;
      ++v16;
      v9 = (WTF::StringImpl *)(v8 + 16 * v7);
      v10 = *(WTF::StringImpl **)v9;
    }
    while (*(_QWORD *)v9);
    v6 = *(WTF::StringImpl **)a2;
  }
  *(_QWORD *)a2 = 0;
  v11 = *(WTF::StringImpl **)v9;
  *(_QWORD *)v9 = v6;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v8 + 16 * v7;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  result = *(WTF::StringImpl ***)(v12 + 8);
  *(_QWORD *)(v12 + 8) = v13;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;

  v3 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl ***)((char *)v3 + 8);
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
            WTF::fastFree(v9, v10);
          }
          else
          {
            --*(_DWORD *)v7;
          }
        }
        v8 = (WTF::StringImpl *)*(v6 - 1);
        *(v6 - 1) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

BOOL WebCore::ScrollingStateFrameScrollingNode::isMainFrame(WebCore::ScrollingStateFrameScrollingNode *this)
{
  return *((_BYTE *)this + 16) == 0;
}

WTF *WebCore::WidthIterator::commitCurrentFontRange(WTF *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  float v15;
  double v16;
  float v17;
  uint64_t v18;
  WTF *v19;
  unint64_t v20;
  WTF *v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double *v29;
  float v30;
  float v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t *v39;
  float *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  double *v44;
  float v45;
  double v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  double v52;
  float v53;
  float v54;
  _QWORD *v55;
  double *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  char v66[24];

  v9 = result;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(unsigned int *)(a2 + 40);
  v12 = *(unsigned int *)(v10 + 12);
  if (v12 > v11)
  {
    v13 = v12 - v11;
    v14 = (double *)(*(_QWORD *)(v10 + 10272) + 16 * v11);
    v15 = 0.0;
    do
    {
      v16 = *v14;
      v14 += 2;
      v17 = v16;
      v15 = v15 + v17;
      --v13;
    }
    while (v13);
    v18 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
    if (v18)
    {
      v19 = *(WTF **)(v18 + 8);
      v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v19 = 0;
      v20 = 0x100000000;
    }
    result = WebCore::Font::applyTransforms(*(WTF **)(a2 + 16), v10, v11, *((_DWORD *)result + 12), *((unsigned __int8 *)result + 88) != 0, *((unsigned __int8 *)result + 89) != 0, (WebCore::LocaleCocoa *)(*(_QWORD *)result + 144), a8, v19, v20, *((_BYTE *)result + 84));
    v24 = *(unsigned int *)(v10 + 12);
    v25 = *(_QWORD *)(v10 + 10272);
    if (v24 > v11)
    {
      v26 = v24 - v11;
      v27 = (16 * v11) | 8;
      v28 = (double *)(*(_QWORD *)(v10 + 26672) + v27);
      v29 = (double *)(v25 + v27);
      do
      {
        v30 = *v29;
        *v29 = (float)-v30;
        v29 += 2;
        v31 = *v28;
        *v28 = (float)-v31;
        v28 += 2;
        --v26;
      }
      while (v26);
      LODWORD(v32) = *(_DWORD *)(v10 + 43084);
      v33 = (WTF *)*(unsigned int *)(a2 + 76);
      if ((_DWORD)v33)
      {
        v34 = *(_QWORD *)(v10 + 43072);
        v35 = *(float **)(a2 + 64);
        if (v32 <= v11)
          v32 = v11;
        else
          v32 = v32;
        v36 = v11;
        while (v36 != v32)
        {
          v37 = *(_QWORD *)(v34 + 8 * v36);
          v38 = v35;
          result = v33;
          do
          {
            v21 = (WTF *)((unint64_t)result >> 1);
            v39 = (uint64_t *)&v38[4 * ((unint64_t)result >> 1)];
            v41 = *v39;
            v40 = (float *)(v39 + 2);
            result = (WTF *)((char *)result + ~((unint64_t)result >> 1));
            if (v41 < v37)
              v38 = v40;
            else
              result = v21;
          }
          while (result);
          if (v38 != &v35[4 * v33])
          {
            result = *(WTF **)v38;
            if (*(_QWORD *)v38 == v37)
              *(double *)(v25 + 16 * v36) = v38[3];
          }
          if (++v36 == v24)
            goto LABEL_28;
        }
        goto LABEL_56;
      }
      v42 = v32 - v11;
      if (v32 < v11)
        v42 = 0;
      if (v42 <= (int)v24 + ~(_DWORD)v11)
      {
LABEL_56:
        __break(0xC471u);
        return result;
      }
    }
LABEL_28:
    if (!*(_DWORD *)(a2 + 72))
      goto LABEL_33;
    if (*(_DWORD *)(a2 + 76))
      *(_DWORD *)(a2 + 76) = 0;
    result = *(WTF **)(a2 + 64);
    if ((WTF *)(a2 + 80) != result)
    {
      if (!result)
        goto LABEL_55;
      *(_QWORD *)(a2 + 64) = 0;
      *(_DWORD *)(a2 + 72) = 0;
      v64 = v23;
      v65 = v22;
      v63 = v24;
      v62 = v25;
      WTF::fastFree(result, v21);
      v25 = v62;
      v24 = v63;
      v23 = v64;
      v22 = v65;
      result = *(WTF **)(a2 + 64);
    }
    if (result)
    {
LABEL_33:
      if (v24 <= v11)
      {
        v45 = 0.0;
      }
      else
      {
        v43 = v24 - v11;
        v44 = (double *)(v25 + 16 * v11);
        v45 = 0.0;
        do
        {
          v46 = *v44;
          v44 += 2;
          v47 = v46;
          v45 = v45 + v47;
          --v43;
        }
        while (v43);
      }
      v48 = v45 - v15;
      v10 = *(_QWORD *)(a2 + 32);
      LODWORD(v11) = *(_DWORD *)(a2 + 40);
      LODWORD(v12) = *(_DWORD *)(v10 + 12);
      goto LABEL_37;
    }
LABEL_55:
    *(_QWORD *)(a2 + 64) = a2 + 80;
    *(_DWORD *)(a2 + 72) = 64;
    goto LABEL_33;
  }
  v22 = 0.0;
  v48 = 0.0;
  v23 = 0.0;
LABEL_37:
  v49 = v48 + *((float *)v9 + 14);
  *((float *)v9 + 14) = v49;
  if (v12 > v11)
  {
    if (*((_BYTE *)v9 + 84))
    {
      if ((_DWORD)v11)
      {
        *(float64x2_t *)(*(_QWORD *)(v10 + 10272) + 16 * v11) = vcvtq_f64_f32(vadd_f32(vcvt_f32_f64(*((float64x2_t *)v9 + 2)), vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)(v10 + 10272) + 16 * v11))));
        v61 = *((double *)v9 + 4);
        *((float *)v9 + 14) = v49 + v61;
      }
      *((double *)v9 + 4) = v22;
      *((double *)v9 + 5) = v23;
    }
    else if ((_DWORD)v11)
    {
      v56 = (double *)(*(_QWORD *)(v10 + 10272) + 16 * (v11 - 1));
      v57 = v56[1];
      v58 = v23;
      v59 = *v56;
      v60 = v22;
      *v56 = (float)(v60 + v59);
      v56[1] = (float)(v58 + v57);
      *((float *)v9 + 14) = v49 + v60;
    }
    else
    {
      v50 = *(double *)(v10 + 51280);
      v51 = v22;
      v52 = (float)(v51 + v50);
      v53 = *(double *)(v10 + 51288);
      v54 = v23;
      *(double *)(v10 + 51280) = v52;
      *(double *)(v10 + 51288) = (float)(v54 + v53);
    }
  }
  *((_DWORD *)v9 + 12) = *(_DWORD *)(a2 + 1104);
  if (*(float *)(a2 + 56) != 0.0)
  {
    result = (WTF *)*((_QWORD *)v9 + 2);
    if (result)
    {
      v55 = *(_QWORD **)(a2 + 16);
      if (v55 != *(_QWORD **)(a2 + 48))
      {
        result = WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Font>((uint64_t)result, v55, (uint64_t)v66);
        LODWORD(v12) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 12);
      }
    }
  }
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 40) = v12;
  return result;
}

WTF *WebCore::Font::applyTransforms(WTF *result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, WebCore::LocaleCocoa *this, int a8, WTF *a9, unint64_t a10, char a11)
{
  WTF *v11;
  unsigned int v13;
  unint64_t v15;
  WTF *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  CFTypeRef v28;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  unint64_t v33;
  unsigned int i;
  unint64_t v35;
  __int128 v36;
  int8x16_t v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  unint64_t v44;
  WebCore::LocaleCocoa *v45;
  WTF *v46;
  CFTypeRef cf;
  WTF *v48;
  unint64_t v49;
  _WORD v50[128];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *);
  void *v55;
  WTF *v56;
  uint64_t v57;
  unsigned int v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v13 = a3;
  v52 = MEMORY[0x1E0C809B0];
  v53 = 0x40000000;
  v54 = ___ZNK7WebCore4Font15applyTransformsERNS_11GlyphBufferEjjbbRKN3WTF10AtomStringENS3_10StringViewENS_13TextDirectionE_block_invoke;
  v55 = &__block_descriptor_tmp_10;
  v56 = result;
  v57 = a2;
  v58 = a3;
  v15 = a10 - a4;
  if (a10 <= a4)
  {
    v15 = 0x100000000;
    v16 = (WTF *)"";
  }
  else
  {
    v16 = a9;
    if (!a4)
    {
      v15 = a10;
      goto LABEL_4;
    }
    v17 = a4;
    v33 = a10 - (unint64_t)a4;
    if ((a10 & 0xFF00000000) != 0)
    {
      if (v33 >= v15)
      {
        v16 = (WTF *)((char *)a9 + a4);
        v15 |= 0x100000000uLL;
        goto LABEL_4;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v33 < v15)
      goto LABEL_35;
    v16 = (WTF *)((char *)a9 + 2 * a4);
  }
LABEL_4:
  v11 = (WTF *)v50;
  v48 = (WTF *)v50;
  v49 = 256;
  v51 = 0u;
  v17 = v15;
  if ((v15 & 0xFF00000000) != 0)
  {
    if (v15 < 0x101uLL)
    {
      HIDWORD(v49) = v15;
      v30 = (WTF *)&v50[v15];
      v31 = (WTF *)v50;
      if (v15 < 0x40uLL)
      {
        v32 = (WTF *)v50;
        goto LABEL_45;
      }
LABEL_41:
      v32 = (WTF *)((char *)v31 + 2 * (v15 & 0xFFFFFFC0));
      v36 = 0uLL;
      do
      {
        v59.val[0] = *(int8x16_t *)v16;
        v37 = *((int8x16_t *)v16 + 1);
        v60.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
        v38 = *((_OWORD *)v16 + 3);
        v16 = (WTF *)((char *)v16 + 64);
        v39 = v38;
        v60.val[1] = 0uLL;
        v61.val[0] = v37;
        v59.val[1] = 0uLL;
        v40 = (char *)v31;
        vst2q_s8(v40, v59);
        v40 += 32;
        v61.val[1] = 0uLL;
        vst2q_s8(v40, v61);
        v41 = (char *)v31 + 64;
        vst2q_s8(v41, v60);
        v42 = (char *)v31 + 96;
        vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
        v31 = (WTF *)((char *)v31 + 128);
      }
      while (v31 != v32);
LABEL_45:
      while (v32 != v30)
      {
        v43 = *(unsigned __int8 *)v16;
        v16 = (WTF *)((char *)v16 + 1);
        *(_WORD *)v32 = v43;
        v32 = (WTF *)((char *)v32 + 2);
      }
      v16 = v48;
      v17 = HIDWORD(v49);
      goto LABEL_5;
    }
LABEL_36:
    v45 = this;
    v46 = v16;
    v44 = v17;
    if (v17 <= 0x141)
      v35 = 321;
    else
      v35 = v17;
    if (v35 >> 31)
    {
      __break(0xC471u);
      return result;
    }
    v31 = (WTF *)WTF::fastMalloc((WTF *)(2 * v35));
    v48 = v31;
    v49 = __PAIR64__(v15, v35);
    this = v45;
    v30 = (WTF *)((char *)v31 + 2 * v44);
    v16 = v46;
    goto LABEL_41;
  }
LABEL_5:
  *(_QWORD *)&v51 = v16;
  *((_QWORD *)&v51 + 1) = v17;
  if (*(_QWORD *)this)
    WebCore::LocaleCocoa::canonicalLanguageIdentifierFromString(this, &cf);
  else
    cf = 0;
  v18 = *(_DWORD *)(a2 + 12);
  v19 = v18 - v13;
  if (v18 == v13)
  {
    v23 = v13;
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 43072);
    v21 = 8 * v13;
    v22 = v19;
    v23 = v13;
    do
    {
      *(_QWORD *)(v20 + v21) -= a4;
      v21 += 8;
      --v22;
    }
    while (v22);
  }
  CTFontShapeGlyphs();
  v25 = *(_DWORD *)(a2 + 12);
  v26 = v25 - v13;
  if (v25 != v13)
  {
    v27 = (_QWORD *)(*(_QWORD *)(a2 + 43072) + 8 * v23);
    do
    {
      *v27++ += a4;
      --v26;
    }
    while (v26);
  }
  if ((a11 & 1) != 0)
  {
    for (i = v25 - 1; v13 < i; --i)
      WebCore::GlyphBuffer::swap(a2, v13++, i);
  }
  v28 = cf;
  cf = 0;
  if (v28)
    CFRelease(v28);
  result = v48;
  if (v11 != v48 && v48 != 0)
  {
    v48 = 0;
    LODWORD(v49) = 0;
    return (WTF *)WTF::fastFree(result, v24);
  }
  return result;
}

void WebCore::LocaleCocoa::canonicalLanguageIdentifierFromString(WebCore::LocaleCocoa *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const __CFString *v4;
  uint64_t v5;
  const void *v7;
  uint64_t *v9;
  _QWORD v10[3];

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this || !*(_DWORD *)(v3 + 4))
  {
    v4 = &stru_1E3487BC0;
    *a2 = &stru_1E3487BC0;
    goto LABEL_3;
  }
  if (byte_1ECE81F59 == 1)
  {
    v5 = qword_1ECE81F78;
  }
  else
  {
    v5 = 0;
    qword_1ECE81F80 = 0;
    qword_1ECE81F78 = 0;
    qword_1ECE81F88 = 0;
    byte_1ECE81F59 = 1;
    v3 = *(_QWORD *)this;
  }
  if (v5 == v3)
  {
    v4 = (const __CFString *)qword_1ECE81F80;
    *a2 = qword_1ECE81F80;
    if (!v4)
      return;
LABEL_3:
    CFRetain(v4);
    return;
  }
  v9 = (uint64_t *)this;
  WTF::HashMap<WTF::AtomString,WTF::RetainPtr<__CFString const*>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RetainPtr<__CFString const*>>,WTF::HashTableTraits>::ensure<WebCore::LocaleCocoa::canonicalLanguageIdentifierFromString(WTF::AtomString const&)::$_0>((uint64_t)v10, this, &v9);
  v7 = *(const void **)(v10[0] + 8);
  *a2 = v7;
  if (v7)
    CFRetain(v7);
  WTF::AtomString::operator=((WTF::StringImpl **)&qword_1ECE81F78, this);
  WTF::RetainPtr<__CFString const*>::operator=(v7);
}

void sub_1940E25F4(_Unwind_Exception *exception_object)
{
  const void *v1;
  _QWORD *v2;

  *v2 = 0;
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF *WebCore::FontCascade::glyphDataForCharacter@<X0>(void *c@<X1>, uint64_t a2@<X0>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  void *v6;
  unsigned __int8 v9;
  const WebCore::FontCascadeDescription *v10;
  int v11;
  uint64_t v12;
  WebCore::FontCascadeFonts *v13;
  WTF *result;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;

  v6 = c;
  if (a4)
  {
    v9 = a4;
    if (!a3)
      goto LABEL_6;
    goto LABEL_3;
  }
  v9 = 1;
  if ((*(_DWORD *)(a2 + 176) & 0x1C000000) == 0x4000000)
  {
    v18 = MEMORY[0x19AEA861C](c);
    if ((_DWORD)v18 == (_DWORD)v6)
      v9 = 1;
    else
      v9 = 2;
    v6 = (void *)v18;
  }
  if (a3)
LABEL_3:
    v6 = (void *)MEMORY[0x19AEA8598](v6);
LABEL_6:
  v10 = (const WebCore::FontCascadeDescription *)(a2 + 16);
  v11 = (*(unsigned __int16 *)(a2 + 180) >> 12) & 3;
  switch(v11)
  {
    case 0:
      goto LABEL_7;
    case 2:
      v12 = 2;
      break;
    case 3:
LABEL_7:
      if (v6 >= 0x100)
        v12 = 2 * (u_hasBinaryProperty((UChar32)v6, UCHAR_EMOJI_PRESENTATION) != 0);
      else
        v12 = 0;
      break;
    default:
      v12 = 1;
      break;
  }
  v13 = *(WebCore::FontCascadeFonts **)(a2 + 216);
  if (!v13)
    return WebCore::FontCascadeFonts::glyphDataForCharacter(0, v6, v10, v9, v12, a5);
  ++*(_DWORD *)v13;
  result = WebCore::FontCascadeFonts::glyphDataForCharacter((unint64_t)v13, v6, v10, v9, v12, a5);
  if (*(_DWORD *)v13 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v13, v15);
    return (WTF *)WTF::fastFree(v16, v17);
  }
  else
  {
    --*(_DWORD *)v13;
  }
  return result;
}

void WebCore::Font::platformCharWidthInit(WebCore::Font *this)
{
  const __CFData *v2;
  const __CFData *v3;
  float v4;
  unsigned int v5;
  const __CFData *v6;
  const __CFData *v7;
  const UInt8 *BytePtr;
  float v9;
  unsigned int v10;

  *((_QWORD *)this + 10) = 0;
  v2 = CTFontCopyTable(*((CTFontRef *)this + 11), 0x4F532F32u, 0);
  v3 = v2;
  if (v2 && CFDataGetLength(v2) >= 4)
  {
    v4 = (float)((int)bswap32(*((unsigned __int16 *)CFDataGetBytePtr(v3) + 1)) >> 16);
    v5 = *((_DWORD *)this + 4);
    if (v5)
      v4 = v4 / (float)v5;
    *((float *)this + 21) = v4 * *((float *)this + 24);
  }
  v6 = CTFontCopyTable(*((CTFontRef *)this + 11), 0x68656164u, 0);
  if (v6)
  {
    v7 = v6;
    if (CFDataGetLength(v6) >= 42)
    {
      BytePtr = CFDataGetBytePtr(v7);
      v9 = (float)(((__int16)(BytePtr[40] << 8) | BytePtr[41]) - ((__int16)(BytePtr[36] << 8) | BytePtr[37]));
      v10 = *((_DWORD *)this + 4);
      if (v10)
        v9 = v9 / (float)v10;
      *((float *)this + 20) = v9 * *((float *)this + 24);
    }
    WebCore::Font::initCharWidths(this);
    CFRelease(v7);
  }
  else
  {
    WebCore::Font::initCharWidths(this);
  }
  if (v3)
    CFRelease(v3);
}

void WebCore::Font::initCharWidths(WebCore::Font *this)
{
  WTF *v2;
  void *v3;
  WTF *v4;
  float v5;
  WTF *v6;
  unsigned int v7;
  float v8;
  float v9;
  uint64_t v10;
  unsigned __int16 v11;
  WTF *v12;

  v2 = (WTF *)WebCore::Font::glyphPage(this, (void *)3);
  v4 = v2;
  if (!v2)
    goto LABEL_27;
  ++*(_DWORD *)v2;
  v5 = *((float *)this + 21);
  if (v5 > 0.0)
    goto LABEL_3;
  WebCore::GlyphPage::glyphDataForCharacter((uint64_t)&v11, (uint64_t)v2, 48);
  v7 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v3);
    else
      --*(_DWORD *)v12;
  }
  if (v7)
  {
    if (*((unsigned __int16 *)this + 167) != v7 || (v5 = 0.0, (*((_BYTE *)this + 256) & 2) != 0))
    {
      v8 = WebCore::GlyphMetricsMap<float>::metricsForGlyph((uint64_t)this + 128, v7);
      if (v8 == -1.0)
      {
        v9 = WebCore::Font::platformWidthForGlyph(this, v7);
        WebCore::GlyphMetricsMap<float>::locatePage((uint64_t)this + 128, v7 >> 4);
        v8 = v9;
        *(float *)(v10 + 4 * (v7 & 0xF)) = v9;
      }
      v5 = v8 + *((float *)this + 85);
    }
    *((float *)this + 21) = v5;
  }
  else
  {
LABEL_27:
    v5 = *((float *)this + 21);
  }
LABEL_3:
  if (v5 <= 0.0)
  {
    v5 = *((float *)this + 13);
    *((float *)this + 21) = v5;
  }
  if (*((float *)this + 20) <= 0.0)
  {
    if (v5 < *((float *)this + 5))
      v5 = *((float *)this + 5);
    *((float *)this + 20) = v5;
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      --WebCore::GlyphPage::s_count;
      v6 = (WTF *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, v3);
        else
          --*(_DWORD *)v6;
      }
      WTF::fastFree(v4, v3);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

void WebCore::Font::platformInit(WebCore::Font *this)
{
  float v2;
  unsigned int UnitsPerEm;
  float v4;
  double CapHeight;
  double Leading;
  double Ascent;
  double Descent;
  const __CFData *v9;
  const __CFData *v10;
  const UInt8 *BytePtr;
  const __CFString *v12;
  const __CFString *v13;
  _BYTE *v14;
  char v15;
  int HasTable;
  char v17;
  const __CFString *v18;
  const __CFString *v19;
  _BOOL4 v20;
  double v21;
  char v22;
  char v23;
  double v24;
  CFComparisonResult v25;
  double XHeight;
  int v27;
  CTFontOrientation v28;
  uint64_t v29;
  void *v30;
  const __CFBitVector *v31;
  const __CFBitVector *v32;
  void *v33;
  CGFloat *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float v51;
  int v52;
  float v53;
  float UnderlinePosition;
  float UnderlineThickness;
  CGGlyph glyphs;
  CGRect boundingRects;
  char v58;
  CGRect BoundingRectsForGlyphs;

  if (*((_BYTE *)this + 112))
    v2 = ceilf(*((float *)this + 24) / 24.0);
  else
    v2 = 0.0;
  *((float *)this + 85) = v2;
  UnitsPerEm = CTFontGetUnitsPerEm(*((CTFontRef *)this + 11));
  v4 = *((float *)this + 24);
  if (v4 == 0.0)
  {
    Ascent = 0.0;
    CapHeight = 0.0;
    Leading = 0.0;
    Descent = 0.0;
  }
  else
  {
    CapHeight = CTFontGetCapHeight(*((CTFontRef *)this + 11));
    Leading = CTFontGetLeading(*((CTFontRef *)this + 11));
    Ascent = CTFontGetAscent(*((CTFontRef *)this + 11));
    Descent = CTFontGetDescent(*((CTFontRef *)this + 11));
  }
  if (CTFontHasTable())
  {
    v9 = CTFontCopyTable(*((CTFontRef *)this + 11), 0x4F532F32u, 0);
    if (v9)
    {
      v10 = v9;
      if (CFDataGetLength(v9) >= 74 && (BytePtr = CFDataGetBytePtr(v10), (char)BytePtr[63] < 0))
      {
        v36 = (int)bswap32(*((unsigned __int16 *)BytePtr + 34)) >> 16;
        v37 = bswap32(*((unsigned __int16 *)BytePtr + 35)) >> 16;
        v38 = bswap32(*((unsigned __int16 *)BytePtr + 36)) >> 16;
        CFRelease(v10);
        v39 = (float)v36;
        v40 = -(float)(__int16)v37;
        v41 = (float)(__int16)v38 / (float)UnitsPerEm;
        if (UnitsPerEm)
        {
          v40 = v40 / (float)UnitsPerEm;
          v39 = (float)v36 / (float)UnitsPerEm;
        }
        else
        {
          v41 = (float)(__int16)v38;
        }
        Ascent = (float)(v4 * v39);
        Descent = (float)(v4 * v40);
        Leading = (float)(v4 * v41);
      }
      else
      {
        CFRelease(v10);
      }
    }
  }
  v12 = CTFontCopyFamilyName(*((CTFontRef *)this + 11));
  v13 = v12;
  if (v12 && CFStringCompare(v12, CFSTR("Ahem"), 1uLL) == kCFCompareEqualTo)
    *((_BYTE *)this + 344) &= ~0x20u;
  if (*((_BYTE *)this + 100) && (*((_BYTE *)this + 256) & 8) == 0)
  {
    if (CTFontHasTable())
    {
      v14 = (char *)this + 344;
      v15 = *((_BYTE *)this + 344);
    }
    else
    {
      HasTable = CTFontHasTable();
      v14 = (char *)this + 344;
      v15 = *((_BYTE *)this + 344);
      if (!HasTable)
      {
        v17 = 0;
        goto LABEL_22;
      }
    }
    v17 = 8;
LABEL_22:
    *v14 = v17 | v15 & 0xF7;
  }
  v18 = CTFontCopyFamilyName(*((CTFontRef *)this + 11));
  if (!v18)
  {
    v21 = 0.0;
    if (v13)
      goto LABEL_35;
LABEL_29:
    v22 = 0;
    v23 = *((_BYTE *)this + 344);
    goto LABEL_40;
  }
  v19 = v18;
  if (CFStringGetLength(v18))
  {
    v20 = 1;
    if (CFStringCompare(v19, CFSTR("Times"), 1uLL))
    {
      v20 = 1;
      if (CFStringCompare(v19, CFSTR("Helvetica"), 1uLL))
        v20 = CFStringCompare(v19, CFSTR(".Helvetica NeueUI"), 1uLL) == kCFCompareEqualTo;
    }
  }
  else
  {
    v20 = 0;
  }
  CFRelease(v19);
  v24 = ceil((Ascent + Descent) * 0.150000006);
  if (v20)
    v21 = v24;
  else
    v21 = 0.0;
  if (!v13)
    goto LABEL_29;
LABEL_35:
  if (CFStringCompare(CFSTR("Times New Roman"), v13, 0))
  {
    v25 = CFStringCompare(CFSTR("Arial"), v13, 0);
    v23 = *((_BYTE *)this + 344);
    if (v25)
    {
      v22 = 0;
      goto LABEL_40;
    }
  }
  else
  {
    v23 = *((_BYTE *)this + 344);
  }
  v22 = 64;
LABEL_40:
  *((_BYTE *)this + 344) = v22 | v23 & 0xBF;
  if (*((float *)this + 24) == 0.0)
  {
    XHeight = 0.0;
  }
  else if (*((_BYTE *)this + 100))
  {
    XHeight = *(float *)(WebCore::Font::verticalRightOrientationFont(this) + 52);
  }
  else
  {
    v27 = WebCore::Font::glyphForCharacter((uint64_t)this, (void *)0x78);
    if (v27)
    {
      glyphs = v27;
      memset(&boundingRects, 0, sizeof(boundingRects));
      if (*((_BYTE *)this + 100))
        v28 = kCTFontOrientationVertical;
      else
        v28 = kCTFontOrientationHorizontal;
      BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*((_QWORD *)this + 11), v28, &glyphs, &boundingRects, 1);
      *(float *)&BoundingRectsForGlyphs.origin.x = BoundingRectsForGlyphs.origin.x;
      *(float *)&BoundingRectsForGlyphs.origin.y = BoundingRectsForGlyphs.origin.y;
      *(float *)&BoundingRectsForGlyphs.size.width = BoundingRectsForGlyphs.size.width;
      *(float *)&BoundingRectsForGlyphs.size.height = BoundingRectsForGlyphs.size.height;
      BoundingRectsForGlyphs.origin.x = *(float *)&BoundingRectsForGlyphs.origin.x;
      BoundingRectsForGlyphs.origin.y = (float)-(float)(*(float *)&BoundingRectsForGlyphs.origin.y
                                                      + *(float *)&BoundingRectsForGlyphs.size.height);
      BoundingRectsForGlyphs.size.width = (float)(*((float *)this + 85) + *(float *)&BoundingRectsForGlyphs.size.width);
      BoundingRectsForGlyphs.size.height = *(float *)&BoundingRectsForGlyphs.size.height;
      XHeight = -CGRectGetMinY(BoundingRectsForGlyphs);
    }
    else
    {
      XHeight = CTFontGetXHeight(*((CTFontRef *)this + 11));
    }
  }
  if ((CTFontGetSymbolicTraits(*((CTFontRef *)this + 11)) & 0x2000) == 0)
    goto LABEL_51;
  {
    if (PAL::canLoad_CoreText_CTFontCopyColorGlyphCoverage(void)::loaded)
    {
      v30 = PAL::softLinkCoreTextCTFontCopyColorGlyphCoverage;
      goto LABEL_58;
    }
  }
  else
  {
    *(_QWORD *)&boundingRects.origin.x = MEMORY[0x1E0C809B0];
    *(_QWORD *)&boundingRects.origin.y = 0x40000000;
    *(_QWORD *)&boundingRects.size.width = ___ZN3PAL15CoreTextLibraryEb_block_invoke;
    *(_QWORD *)&boundingRects.size.height = &__block_descriptor_tmp_2;
    v58 = 0;
    if (PAL::CoreTextLibrary(BOOL)::once != -1)
      dispatch_once(&PAL::CoreTextLibrary(BOOL)::once, &boundingRects);
    v30 = dlsym((void *)PAL::CoreTextLibrary(BOOL)::frameworkLibrary, "CTFontCopyColorGlyphCoverage");
    PAL::softLinkCoreTextCTFontCopyColorGlyphCoverage = v30;
    PAL::canLoad_CoreText_CTFontCopyColorGlyphCoverage(void)::loaded = v30 != 0;
    if (v30)
    {
LABEL_58:
      v31 = (const __CFBitVector *)((uint64_t (*)(_QWORD))v30)(*((_QWORD *)this + 11));
      if (!v31)
      {
LABEL_51:
        v29 = *((unsigned int *)this + 70);
        if ((_DWORD)v29 != -1)
        {
          if (!(_DWORD)v29)
            goto LABEL_82;
          ((void (*)(CGRect *, char *))off_1E34130F8[v29])(&boundingRects, (char *)this + 272);
        }
        *((_DWORD *)this + 70) = 0;
        goto LABEL_82;
      }
      v32 = v31;
      WTF::BitVector::BitVector((WTF::BitVector *)&boundingRects, v31);
      v34 = (CGFloat *)((char *)this + 272);
      v35 = *((unsigned int *)this + 70);
      if ((_DWORD)v35 != -1)
      {
        if ((_DWORD)v35 == 2)
        {
          if ((*(_QWORD *)v34 & 0x8000000000000000) != 0
            && (*(_QWORD *)&boundingRects.origin.x & 0x8000000000000000) != 0)
          {
            *v34 = boundingRects.origin.x;
LABEL_70:
            CFRelease(v32);
            goto LABEL_82;
          }
          WTF::BitVector::setSlow((WebCore::Font *)((char *)this + 272), (const WTF::BitVector *)&boundingRects);
LABEL_68:
          if ((*(_QWORD *)&boundingRects.origin.x & 0x8000000000000000) == 0)
            WTF::fastFree((WTF *)(2 * *(_QWORD *)&boundingRects.origin.x), v33);
          goto LABEL_70;
        }
        ((void (*)(CGGlyph *, char *))off_1E34130F8[v35])(&glyphs, (char *)this + 272);
      }
      *((_DWORD *)this + 70) = -1;
      *((_QWORD *)this + 34) = 0x8000000000000000;
      if ((*(_QWORD *)&boundingRects.origin.x & 0x8000000000000000) != 0)
        *v34 = boundingRects.origin.x;
      else
        WTF::BitVector::setSlow((WebCore::Font *)((char *)this + 272), (const WTF::BitVector *)&boundingRects);
      *((_DWORD *)this + 70) = 2;
      goto LABEL_68;
    }
  }
  v42 = *((unsigned int *)this + 70);
  if ((_DWORD)v42 != -1)
  {
    if ((_DWORD)v42 == 1)
      goto LABEL_82;
    ((void (*)(CGRect *, char *))off_1E34130F8[v42])(&boundingRects, (char *)this + 272);
  }
  *((_DWORD *)this + 70) = 1;
LABEL_82:
  v43 = Descent;
  v44 = ceilf(v43);
  v45 = Ascent + v21;
  v46 = ceilf(v45);
  v47 = Leading;
  v48 = ceilf(v47);
  v49 = ceil(Descent) + ceil(Ascent) + v21 + v48;
  v50 = llroundf(v46);
  *((_DWORD *)this + 4) = UnitsPerEm;
  *((float *)this + 7) = v44;
  *((_DWORD *)this + 15) = v50 & ~(v50 >> 31);
  *((_DWORD *)this + 16) = llroundf(v44);
  v51 = CapHeight;
  *((float *)this + 5) = v46;
  *((float *)this + 6) = v51;
  v52 = llroundf(v51);
  v53 = XHeight;
  *((float *)this + 13) = v53;
  *((float *)this + 9) = v48;
  *((float *)this + 10) = v49;
  *((_DWORD *)this + 17) = llroundf(v48);
  *((_DWORD *)this + 18) = llroundf(v49);
  *((_DWORD *)this + 19) = v52;
  UnderlinePosition = CTFontGetUnderlinePosition(*((CTFontRef *)this + 11));
  *((float *)this + 11) = -UnderlinePosition;
  UnderlineThickness = CTFontGetUnderlineThickness(*((CTFontRef *)this + 11));
  *((float *)this + 12) = UnderlineThickness;
  if (v13)
    CFRelease(v13);
}

void WebCore::Font::platformGlyphInit(WebCore::Font *this)
{
  uint64_t v2;
  void *v3;
  WTF *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  void *v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  int v47;
  WTF *v48;
  int v49;
  WTF *v50;
  int v51;
  WTF *v52;
  int v53;
  WTF *v54;
  WTF *v55;
  WTF *v56;
  WTF *v57;

  v2 = WebCore::Font::glyphPage(this, 0);
  v4 = (WTF *)v2;
  if (v2)
  {
    ++*(_DWORD *)v2;
    v5 = *(_WORD *)(v2 + 16);
    if (!v5)
      goto LABEL_5;
    v6 = *(_QWORD *)(v2 + 8);
    if (!v6)
      goto LABEL_5;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      goto LABEL_5;
    v46 = *(WTF **)(v7 + 8);
    if (!v46)
    {
      v46 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v46 = 1;
      *((_QWORD *)v46 + 1) = v7;
      v54 = *(WTF **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = v46;
      if (v54)
      {
        if (*(_DWORD *)v54 == 1)
        {
          WTF::fastFree(v54, v3);
          v46 = *(WTF **)(v7 + 8);
          if (!v46)
          {
LABEL_5:
            *((_WORD *)this + 167) = v5;
            goto LABEL_6;
          }
        }
        else
        {
          --*(_DWORD *)v54;
        }
      }
    }
    v47 = (*(_DWORD *)v46)++;
    *((_WORD *)this + 167) = v5;
    if (v47)
      *(_DWORD *)v46 = v47;
    else
      WTF::fastFree(v46, v3);
  }
LABEL_6:
  v8 = WebCore::Font::glyphPage(this, (void *)2);
  if (!v8)
    goto LABEL_13;
  v10 = (WTF *)v8;
  ++*(_DWORD *)v8;
  v11 = *(_WORD *)(v8 + 16);
  if (!v11)
    goto LABEL_10;
  v12 = *(_QWORD *)(v8 + 8);
  if (!v12)
    goto LABEL_10;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_10;
  v48 = *(WTF **)(v13 + 8);
  if (!v48)
  {
    v48 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v48 = 1;
    *((_QWORD *)v48 + 1) = v13;
    v55 = *(WTF **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v48;
    if (v55)
    {
      if (*(_DWORD *)v55 == 1)
      {
        WTF::fastFree(v55, v9);
        v48 = *(WTF **)(v13 + 8);
        if (!v48)
        {
LABEL_10:
          *((_WORD *)this + 166) = v11;
          goto LABEL_11;
        }
      }
      else
      {
        --*(_DWORD *)v55;
      }
    }
  }
  v49 = (*(_DWORD *)v48)++;
  *((_WORD *)this + 166) = v11;
  if (v49)
    *(_DWORD *)v48 = v49;
  else
    WTF::fastFree(v48, v9);
LABEL_11:
  if (*(_DWORD *)v10 == 1)
  {
    --WebCore::GlyphPage::s_count;
    v38 = (WTF *)*((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
        WTF::fastFree(v38, v9);
      else
        --*(_DWORD *)v38;
    }
    WTF::fastFree(v10, v9);
  }
  else
  {
    --*(_DWORD *)v10;
  }
LABEL_13:
  if (*((unsigned __int16 *)this + 167) == *((unsigned __int16 *)this + 166))
    *((_WORD *)this + 167) = 0;
  v14 = WebCore::Font::glyphPage(this, (void *)3);
  if (v14)
  {
    v16 = (WTF *)v14;
    ++*(_DWORD *)v14;
    v17 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16))
      goto LABEL_19;
    v18 = *(_QWORD *)(v14 + 8);
    if (!v18)
      goto LABEL_19;
    v19 = *(_QWORD *)(v18 + 8);
    if (!v19)
      goto LABEL_19;
    v50 = *(WTF **)(v19 + 8);
    if (!v50)
    {
      v50 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v50 = 1;
      *((_QWORD *)v50 + 1) = v19;
      v56 = *(WTF **)(v19 + 8);
      *(_QWORD *)(v19 + 8) = v50;
      if (v56)
      {
        if (*(_DWORD *)v56 == 1)
        {
          WTF::fastFree(v56, v15);
          v50 = *(WTF **)(v19 + 8);
          if (!v50)
          {
LABEL_19:
            if (*(_DWORD *)v16 == 1)
            {
              --WebCore::GlyphPage::s_count;
              v39 = (WTF *)*((_QWORD *)v16 + 1);
              *((_QWORD *)v16 + 1) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 1)
                  WTF::fastFree(v39, v15);
                else
                  --*(_DWORD *)v39;
              }
              WTF::fastFree(v16, v15);
            }
            else
            {
              --*(_DWORD *)v16;
            }
            if (v17)
            {
              if (*((unsigned __int16 *)this + 167) != v17 || (v21 = 0.0, (*((_BYTE *)this + 256) & 2) != 0))
              {
                v20 = WebCore::GlyphMetricsMap<float>::metricsForGlyph((uint64_t)this + 128, v17);
                if (v20 == -1.0)
                {
                  v20 = WebCore::Font::platformWidthForGlyph(this, v17);
                  WebCore::GlyphMetricsMap<float>::locatePage((uint64_t)this + 128, v17 >> 4);
                  *(float *)(v45 + 4 * (v17 & 0xF)) = v20;
                }
                v21 = v20 + *((float *)this + 85);
              }
              *((float *)this + 14) = v21;
            }
            goto LABEL_27;
          }
        }
        else
        {
          --*(_DWORD *)v56;
        }
      }
    }
    v51 = (*(_DWORD *)v50)++;
    if (v51)
      *(_DWORD *)v50 = v51;
    else
      WTF::fastFree(v50, v15);
    goto LABEL_19;
  }
LABEL_27:
  v22 = WebCore::Font::glyphPage(this, (void *)0x6C3);
  if (!v22)
  {
    *((_DWORD *)this + 8) = *((_DWORD *)this + 24);
    goto LABEL_37;
  }
  v24 = (WTF *)v22;
  ++*(_DWORD *)v22;
  v25 = *(unsigned __int16 *)(v22 + 24);
  if (!*(_WORD *)(v22 + 24))
    goto LABEL_32;
  v26 = *(_QWORD *)(v22 + 8);
  if (!v26)
    goto LABEL_31;
  v27 = *(_QWORD *)(v26 + 8);
  if (!v27)
    goto LABEL_31;
  v52 = *(WTF **)(v27 + 8);
  if (!v52)
  {
    v52 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v52 = 1;
    *((_QWORD *)v52 + 1) = v27;
    v57 = *(WTF **)(v27 + 8);
    *(_QWORD *)(v27 + 8) = v52;
    if (v57)
    {
      if (*(_DWORD *)v57 == 1)
      {
        WTF::fastFree(v57, v23);
        v52 = *(WTF **)(v27 + 8);
        if (!v52)
          goto LABEL_31;
      }
      else
      {
        --*(_DWORD *)v57;
      }
    }
  }
  v53 = (*(_DWORD *)v52)++;
  if (v53)
    *(_DWORD *)v52 = v53;
  else
    WTF::fastFree(v52, v23);
LABEL_31:
  if (*((unsigned __int16 *)this + 167) != v25 || (v29 = 0.0, (*((_BYTE *)this + 256) & 2) != 0))
  {
LABEL_32:
    v28 = WebCore::GlyphMetricsMap<float>::metricsForGlyph((uint64_t)this + 128, v25);
    if (v28 == -1.0)
    {
      v28 = WebCore::Font::platformWidthForGlyph(this, v25);
      WebCore::GlyphMetricsMap<float>::locatePage((uint64_t)this + 128, v25 >> 4);
      *(float *)(v44 + 4 * (v25 & 0xF)) = v28;
    }
    v29 = v28 + *((float *)this + 85);
  }
  *((float *)this + 8) = v29;
  if (*(_DWORD *)v24 == 1)
  {
    --WebCore::GlyphPage::s_count;
    v40 = (WTF *)*((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v23);
      else
        --*(_DWORD *)v40;
    }
    WTF::fastFree(v24, v23);
  }
  else
  {
    --*(_DWORD *)v24;
  }
LABEL_37:
  v30 = *((unsigned __int16 *)this + 166);
  if (*((unsigned __int16 *)this + 167) != v30
    || !*((_WORD *)this + 166)
    || (v32 = 0.0, (*((_BYTE *)this + 256) & 2) != 0))
  {
    v31 = WebCore::GlyphMetricsMap<float>::metricsForGlyph((uint64_t)this + 128, *((unsigned __int16 *)this + 166));
    if (v31 == -1.0)
    {
      v42 = WebCore::Font::platformWidthForGlyph(this, v30);
      WebCore::GlyphMetricsMap<float>::locatePage((uint64_t)this + 128, v30 >> 4);
      *(float *)(v43 + 4 * (v30 & 0xF)) = v42;
      v32 = v42 + 0.0;
    }
    else
    {
      v32 = v31 + 0.0;
    }
  }
  *((float *)this + 84) = v32;
  v33 = *((float *)this + 9);
  if (v33 <= 0.0)
    v34 = *((float *)this + 9);
  else
    v34 = 0.0;
  v35 = v33 - v34;
  v36 = *((float *)this + 10) - v34;
  *((float *)this + 9) = v35;
  *((float *)this + 10) = v36;
  *((_DWORD *)this + 17) = llroundf(v35);
  *((_DWORD *)this + 18) = llroundf(v36);
  WebCore::Font::determinePitch(this);
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      --WebCore::GlyphPage::s_count;
      v41 = (WTF *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1)
          WTF::fastFree(v41, v37);
        else
          --*(_DWORD *)v41;
      }
      WTF::fastFree(v4, v37);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

uint64_t WebCore::Font::glyphPage(WebCore::Font *this, void *a2)
{
  int v2;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  WTF *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _WORD *v23;
  UniChar *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  WTF *v37;
  unsigned int v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  void *v42;
  WTF *v43;

  v2 = (int)a2;
  v5 = (uint64_t *)((char *)this + 120);
  v4 = *((_QWORD *)this + 15);
  if (v4
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)this + 15, 8u, 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = 9 * ((~(v2 << 15) + v2) ^ ((~(v2 << 15) + v2) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = v6 & (v8 ^ HIWORD(v8));
  v10 = v4 + 16 * v9;
  v11 = *(_DWORD *)v10;
  if (*(_DWORD *)v10 == -1)
  {
LABEL_11:
    v15 = *(WTF **)(v10 + 8);
    *(_DWORD *)v10 = v2;
    *(_QWORD *)(v10 + 8) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        --WebCore::GlyphPage::s_count;
        v39 = (WTF *)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
            WTF::fastFree(v39, a2);
          else
            --*(_DWORD *)v39;
        }
        WTF::fastFree(v15, a2);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
LABEL_14:
    v16 = *v5;
    if (*v5)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v5;
    if (*v5)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        goto LABEL_20;
    }
    else
    {
      if (3 * v21 > 4 * v20)
      {
LABEL_20:
        v22 = 16 * v2;
        if ((16 * v2) >= 0x600 && v22 + 16 <= 0x6FF && (*((_BYTE *)this + 344) & 0x40) != 0)
        {
          v34 = 0;
LABEL_33:
          v37 = *(WTF **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = v34;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
            {
              --WebCore::GlyphPage::s_count;
              v40 = (WTF *)*((_QWORD *)v37 + 1);
              *((_QWORD *)v37 + 1) = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 1)
                  WTF::fastFree(v40, a2);
                else
                  --*(_DWORD *)v40;
              }
              WTF::fastFree(v37, a2);
            }
            else
            {
              --*(_DWORD *)v37;
            }
          }
          return *(_QWORD *)(v10 + 8);
        }
        v23 = (_WORD *)WTF::fastMalloc((WTF *)0x44);
        v24 = v23;
        if (v22 >= 0x10000)
        {
          v26 = (v22 >> 10) - 10304;
          *v23 = (v22 >> 10) - 10304;
          v23[1] = v22 & 0x3F0 | 0xDC00;
          v23[2] = (v22 >> 10) - 10304;
          v23[3] = v22 & 0x3F0 | 0xDC01;
          v23[4] = (v22 >> 10) - 10304;
          v23[5] = v22 & 0x3F0 | 0xDC02;
          v23[6] = (v22 >> 10) - 10304;
          v23[7] = v22 & 0x3F0 | 0xDC03;
          v23[8] = (v22 >> 10) - 10304;
          v25 = v22 & 0x3F0 | 0xDC04;
          v27 = v22 & 0x3F0 | 0xDC05;
          v23[15] = v22 & 0x3F0 | 0xDC07;
          v29 = v22 & 0x3F0 | 0xDC06;
          v23[16] = (v22 >> 10) - 10304;
          v23[17] = v22 & 0x3F0 | 0xDC08;
          v23[18] = (v22 >> 10) - 10304;
          v23[19] = v22 & 0x3F0 | 0xDC09;
          v23[20] = (v22 >> 10) - 10304;
          v23[21] = v22 & 0x3F0 | 0xDC0A;
          v23[22] = (v22 >> 10) - 10304;
          v23[23] = v22 & 0x3F0 | 0xDC0B;
          v23[24] = (v22 >> 10) - 10304;
          v23[25] = v22 & 0x3F0 | 0xDC0C;
          v23[26] = (v22 >> 10) - 10304;
          v23[27] = v22 & 0x3F0 | 0xDC0D;
          v23[28] = (v22 >> 10) - 10304;
          v31 = v22 & 0x3F0 | 0xDC0F;
          v32 = 32;
          v23[29] = v22 & 0x3F0 | 0xDC0E;
          v33 = 31;
          v28 = v26;
          v30 = v26;
          v23[30] = (v22 >> 10) - 10304;
        }
        else
        {
          *v23 = v22;
          v25 = v22 | 9;
          LOWORD(v26) = v22 | 0xA;
          v27 = v22 | 0xB;
          v28 = v22 | 0xC;
          v29 = v22 | 0xD;
          *(int8x16_t *)(v23 + 1) = vorrq_s8((int8x16_t)vdupq_n_s16(v22), (int8x16_t)xmmword_1969F77A0);
          v30 = v22 | 0xE;
          v31 = v22 | 0xF;
          v32 = 16;
          v33 = 15;
        }
        v23[9] = v25;
        v23[10] = v26;
        v23[11] = v27;
        v23[12] = v28;
        v23[13] = v29;
        v23[14] = v30;
        v23[v33] = v31;
        v34 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v34 = 1;
        v35 = *((_QWORD *)this + 1);
        if (!v35)
        {
          v35 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v35 = 1;
          *(_QWORD *)(v35 + 8) = this;
          v43 = (WTF *)*((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v35;
          if (v43)
          {
            if (*(_DWORD *)v43 == 1)
            {
              WTF::fastFree(v43, v42);
              v35 = *((_QWORD *)this + 1);
              if (!v35)
                goto LABEL_28;
            }
            else
            {
              --*(_DWORD *)v43;
            }
          }
        }
        ++*(_DWORD *)v35;
LABEL_28:
        *(_QWORD *)(v34 + 8) = v35;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(_DWORD *)(v34 + 48) = 0;
        ++WebCore::GlyphPage::s_count;
        if ((WebCore::GlyphPage::fill(v34, v24, v32) & 1) == 0)
        {
          if (*(_DWORD *)v34 == 1)
          {
            --WebCore::GlyphPage::s_count;
            v41 = *(WTF **)(v34 + 8);
            *(_QWORD *)(v34 + 8) = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 1)
                WTF::fastFree(v41, v36);
              else
                --*(_DWORD *)v41;
            }
            WTF::fastFree((WTF *)v34, v36);
          }
          else
          {
            --*(_DWORD *)v34;
          }
          v34 = 0;
        }
        WTF::fastFree((WTF *)v24, v36);
        goto LABEL_33;
      }
      if (!(_DWORD)v21)
      {
        v38 = 8;
        goto LABEL_57;
      }
    }
    v38 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
LABEL_57:
    v10 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v5, v38, (int *)v10);
    goto LABEL_20;
  }
  v12 = 0;
  v13 = 1;
  while (v11 != v2)
  {
    if (v11 == -2)
      v12 = v10;
    v9 = (v9 + v13) & v6;
    v10 = v4 + 16 * v9;
    v11 = *(_DWORD *)v10;
    ++v13;
    if (*(_DWORD *)v10 == -1)
    {
      if (!v12)
        goto LABEL_11;
      *(_DWORD *)v12 = -1;
      *(_QWORD *)(v12 + 8) = 0;
      --*(_DWORD *)(*v5 - 16);
      *(_DWORD *)v12 = v2;
      *(_QWORD *)(v12 + 8) = 0;
      v10 = v12;
      goto LABEL_14;
    }
  }
  return *(_QWORD *)(v10 + 8);
}

float WebCore::GlyphMetricsMap<float>::metricsForGlyph(uint64_t a1, unsigned int a2)
{
  char v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  void *v21;
  _OWORD *v22;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;

  v2 = a2;
  if (a2 >= 0x10)
  {
    v3 = a2 >> 4;
    v5 = (uint64_t *)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 72);
    if (v4
      || (WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v5, 8u, 0), (v4 = *v5) != 0))
    {
      v6 = *(_DWORD *)(v4 - 8);
    }
    else
    {
      v6 = 0;
    }
    v7 = 9 * ((~(v3 << 15) + v3) ^ ((~(v3 << 15) + v3) >> 10));
    v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
    v9 = v6 & (v8 ^ HIWORD(v8));
    v10 = v4 + 16 * v9;
    v11 = *(_DWORD *)v10;
    if (*(_DWORD *)v10)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != v3)
      {
        if (v11 == -1)
          v12 = (_QWORD *)v10;
        v9 = (v9 + v13) & v6;
        v10 = v4 + 16 * v9;
        v11 = *(_DWORD *)v10;
        ++v13;
        if (!*(_DWORD *)v10)
        {
          if (v12)
          {
            *v12 = 0;
            v12[1] = 0;
            --*(_DWORD *)(*v5 - 16);
            v10 = (uint64_t)v12;
          }
          goto LABEL_16;
        }
      }
      goto LABEL_7;
    }
LABEL_16:
    *(_DWORD *)v10 = v3;
    v22 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
    __asm { FMOV            V0.4S, #-1.0 }
    *v22 = _Q0;
    v22[1] = _Q0;
    v22[2] = _Q0;
    v22[3] = _Q0;
    v24 = *(WTF **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v22;
    if (v24)
      WTF::fastFree(v24, v21);
    v25 = *v5;
    if (*v5)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *v5;
    if (*v5)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_7;
    }
    else
    {
      if (3 * v30 > 4 * v29)
      {
LABEL_7:
        v14 = *(_QWORD *)(v10 + 8);
        return *(float *)(v14 + 4 * (v2 & 0xF));
      }
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_26:
        v10 = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v5, v31, (int *)v10);
        goto LABEL_7;
      }
    }
    v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
    goto LABEL_26;
  }
  v14 = a1 + 4;
  if (!*(_BYTE *)a1)
  {
    __asm { FMOV            V0.4S, #-1.0 }
    *(_OWORD *)(a1 + 4) = _Q0;
    *(_OWORD *)(a1 + 20) = _Q0;
    *(_OWORD *)(a1 + 36) = _Q0;
    *(_OWORD *)(a1 + 52) = _Q0;
    *(_BYTE *)a1 = 1;
  }
  return *(float *)(v14 + 4 * (v2 & 0xF));
}

__n128 WebCore::GlyphMetricsMap<float>::locatePage(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  __n128 result;
  void *v18;
  __n128 *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  if (!a2)
  {
    if (!*(_BYTE *)a1)
    {
      __asm { FMOV            V0.4S, #-1.0 }
      *(__n128 *)(a1 + 4) = result;
      *(__n128 *)(a1 + 20) = result;
      *(__n128 *)(a1 + 36) = result;
      *(__n128 *)(a1 + 52) = result;
      *(_BYTE *)a1 = 1;
    }
    return result;
  }
  v4 = (uint64_t *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3
    || (WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v4, 8u, 0), (v3 = *v4) != 0))
  {
    v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (int *)(v3 + 16 * v8);
  v10 = *v9;
  if (!*v9)
  {
LABEL_15:
    *v9 = a2;
    v19 = (__n128 *)WTF::fastMalloc((WTF *)0x40);
    __asm { FMOV            V0.4S, #-1.0 }
    *v19 = result;
    v19[1] = result;
    v19[2] = result;
    v19[3] = result;
    v20 = (WTF *)*((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = v19;
    if (v20)
      WTF::fastFree(v20, v18);
    v21 = *v4;
    if (*v4)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *v4;
    if (*v4)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        return result;
    }
    else
    {
      if (3 * v26 > 4 * v25)
        return result;
      if (!(_DWORD)v26)
      {
        v27 = 8;
LABEL_25:
        WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v4, v27, v9);
        return result;
      }
    }
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_25;
  }
  v11 = 0;
  v12 = 1;
  while (v10 != a2)
  {
    if (v10 == -1)
      v11 = v9;
    v8 = (v8 + v12) & v5;
    v9 = (int *)(v3 + 16 * v8);
    v10 = *v9;
    ++v12;
    if (!*v9)
    {
      if (v11)
      {
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        --*(_DWORD *)(*v4 - 16);
        v9 = v11;
      }
      goto LABEL_15;
    }
  }
  return result;
}

float WebCore::Font::platformWidthForGlyph(WebCore::Font *this, CGGlyph a2)
{
  CTFontOrientation v2;
  CGSize v4;
  CGGlyph glyphs;

  glyphs = a2;
  v4 = (CGSize)*MEMORY[0x1E0C9D820];
  if (*((float *)this + 24) != 0.0)
  {
    v2 = kCTFontOrientationHorizontal;
    if (*((_BYTE *)this + 100))
    {
      if ((*((_BYTE *)this + 344) & 4) != 0)
        v2 = kCTFontOrientationHorizontal;
      else
        v2 = kCTFontOrientationVertical;
    }
    CTFontGetAdvancesForGlyphs(*((CTFontRef *)this + 11), v2, &glyphs, &v4, 1);
  }
  return v4.width;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    do
    {
      v14 = (int *)(v6 + 16 * v13);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != -1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
          v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            v21 = v20 & v17;
            v20 = ++v18 + v21;
          }
          while (*(_DWORD *)(v16 + 16 * v21));
          v22 = v16 + 16 * v21;
          v23 = *(WTF **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
            WTF::fastFree(v23, v10);
          *(_DWORD *)v22 = *v14;
          v24 = v6 + 16 * v13;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v22 + 8) = v25;
          v26 = *(WTF **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
            WTF::fastFree(v26, v10);
          if (v14 == a3)
            v11 = v22;
        }
      }
      else
      {
        v27 = (WTF *)*((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = 0;
        if (v27)
          WTF::fastFree(v27, v10);
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void WebCore::Font::determinePitch(WebCore::Font *this)
{
  const __CTFont *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFNumber *v5;
  int v6;
  const __CFBoolean *v7;
  const __CFBoolean *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  char v11;
  CFComparisonResult v12;
  char v13;
  char v15;
  char v16;
  char v17;
  const __CFNumber *v18;
  char v19;
  int valuePtr;

  v2 = (const __CTFont *)*((_QWORD *)this + 11);
  v3 = CTFontCopyFullName(v2);
  v4 = CTFontCopyFamilyName(v2);
  v5 = (const __CFNumber *)CTFontCopyAttribute(v2, (CFStringRef)*MEMORY[0x1E0CA8340]);
  valuePtr = 0;
  if (v5)
  {
    v18 = v5;
    CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
    v6 = valuePtr;
    CFRelease(v18);
  }
  else
  {
    v6 = 0;
  }
  v7 = (const __CFBoolean *)CTFontCopyAttribute(v2, (CFStringRef)*MEMORY[0x1E0CA8468]);
  if (v7)
  {
    v8 = v7;
    v9 = CFBooleanGetValue(v7) != 0;
    CFRelease(v8);
  }
  else
  {
    v9 = 0;
  }
  if (CTFontGetSymbolicTraits(v2) & 0x400 | v6)
  {
    v10 = 1;
  }
  else if (v3)
  {
    v10 = 1;
    if (CFStringCompare(v3, CFSTR("Osaka-Mono"), 1uLL))
    {
      v10 = 1;
      if (CFStringCompare(v3, CFSTR("MS-PGothic"), 1uLL))
        v10 = CFStringCompare(v3, CFSTR("MonotypeCorsiva"), 1uLL) == kCFCompareEqualTo;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = *((_BYTE *)this + 344) & 0xFE | v10;
  *((_BYTE *)this + 344) = v11;
  if (v4)
  {
    v12 = CFStringCompare(v4, CFSTR("Courier New"), 1uLL);
    v13 = *((_BYTE *)this + 344);
    if ((v13 & 1) == 0 || v9)
      v15 = 0;
    else
      v15 = 2;
    v16 = v15 | v13 & 0xFD;
    v17 = v13 & 0xFC;
    if (v12)
      v17 = v16;
    *((_BYTE *)this + 344) = v17;
    CFRelease(v4);
  }
  else
  {
    if (!v10 || v9)
      v19 = 0;
    else
      v19 = 2;
    *((_BYTE *)this + 344) = v11 & 0xFD | v19;
  }
  if (v3)
    CFRelease(v3);
}

uint64_t WebCore::Font::glyphForCharacter(uint64_t a1, void *a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _WORD *v28;
  UniChar *v29;
  int v30;
  UniChar v31;
  UniChar v32;
  UniChar v33;
  UniChar v34;
  UniChar v35;
  UniChar v36;
  UniChar v37;
  UniChar v38;
  UniChar v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  WTF *v45;
  unsigned int v46;
  WTF *v47;
  WTF *v48;
  WTF *v49;
  void *v50;
  WTF *v51;

  v2 = a2;
  v4 = a2 >> 4;
  v6 = (uint64_t *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 120);
  if (v5
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(a1 + 120), 8u, 0), (v5 = *v6) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
  v10 = v7 & (v9 ^ HIWORD(v9));
  v11 = v5 + 16 * v10;
  v12 = *(_DWORD *)v11;
  if (*(_DWORD *)v11 == -1)
  {
LABEL_18:
    v20 = *(WTF **)(v11 + 8);
    *(_DWORD *)v11 = v4;
    *(_QWORD *)(v11 + 8) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        --WebCore::GlyphPage::s_count;
        v47 = (WTF *)*((_QWORD *)v20 + 1);
        *((_QWORD *)v20 + 1) = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1)
            WTF::fastFree(v47, a2);
          else
            --*(_DWORD *)v47;
        }
        WTF::fastFree(v20, a2);
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
LABEL_21:
    v21 = *v6;
    if (*v6)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *v6;
    if (*v6)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        goto LABEL_27;
    }
    else
    {
      if (3 * v26 > 4 * v25)
      {
LABEL_27:
        v27 = v2 & 0xFFFFFFF0;
        if ((v2 & 0xFFFFFFF0) >= 0x600 && v2 + 16 <= 0x6FF && (*(_BYTE *)(a1 + 344) & 0x40) != 0)
        {
          v42 = 0;
LABEL_41:
          v45 = *(WTF **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = v42;
          if (v45)
          {
            if (*(_DWORD *)v45 == 1)
            {
              --WebCore::GlyphPage::s_count;
              v48 = (WTF *)*((_QWORD *)v45 + 1);
              *((_QWORD *)v45 + 1) = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 1)
                  WTF::fastFree(v48, a2);
                else
                  --*(_DWORD *)v48;
              }
              WTF::fastFree(v45, a2);
            }
            else
            {
              --*(_DWORD *)v45;
            }
          }
          goto LABEL_6;
        }
        v28 = (_WORD *)WTF::fastMalloc((WTF *)0x44);
        v29 = v28;
        if (v27 >= 0x10000)
        {
          v30 = (v2 >> 10) - 10304;
          *v28 = (v2 >> 10) - 10304;
          v28[1] = v2 & 0x3F0 | 0xDC00;
          v28[2] = (v2 >> 10) - 10304;
          v28[3] = v2 & 0x3F0 | 0xDC01;
          v28[4] = (v2 >> 10) - 10304;
          v28[5] = v2 & 0x3F0 | 0xDC02;
          v31 = v2 & 0x3F0 | 0xDC03;
          v28[15] = v2 & 0x3F0 | 0xDC07;
          v28[16] = (v2 >> 10) - 10304;
          v28[17] = v2 & 0x3F0 | 0xDC08;
          v33 = v2 & 0x3F0 | 0xDC04;
          v28[18] = (v2 >> 10) - 10304;
          v28[19] = v2 & 0x3F0 | 0xDC09;
          v35 = v2 & 0x3F0 | 0xDC05;
          v28[20] = (v2 >> 10) - 10304;
          v28[21] = v2 & 0x3F0 | 0xDC0A;
          v37 = v2 & 0x3F0 | 0xDC06;
          v28[22] = (v2 >> 10) - 10304;
          v28[23] = v2 & 0x3F0 | 0xDC0B;
          v28[24] = (v2 >> 10) - 10304;
          v28[25] = v2 & 0x3F0 | 0xDC0C;
          v28[26] = (v2 >> 10) - 10304;
          v28[27] = v2 & 0x3F0 | 0xDC0D;
          v39 = v2 & 0x3F0 | 0xDC0F;
          v40 = 32;
          v28[28] = (v2 >> 10) - 10304;
          v41 = 31;
          v32 = v30;
          v28[29] = v2 & 0x3F0 | 0xDC0E;
          v34 = v30;
          v36 = v30;
          v38 = v30;
          v29[30] = (v2 >> 10) - 10304;
        }
        else
        {
          *v28 = v27;
          LOWORD(v30) = v27 | 6;
          v31 = v27 | 7;
          v32 = v27 | 8;
          v33 = v27 | 9;
          v34 = v27 | 0xA;
          *(int8x8_t *)(v28 + 1) = vorr_s8((int8x8_t)vdup_n_s16(v27), (int8x8_t)0x4000300020001);
          v35 = v27 | 0xB;
          v36 = v27 | 0xC;
          v28[5] = v27 | 5;
          v37 = v27 | 0xD;
          v38 = v27 | 0xE;
          v39 = v27 | 0xF;
          v40 = 16;
          v41 = 15;
        }
        v29[6] = v30;
        v29[7] = v31;
        v29[8] = v32;
        v29[9] = v33;
        v29[10] = v34;
        v29[11] = v35;
        v29[12] = v36;
        v29[13] = v37;
        v29[14] = v38;
        v29[v41] = v39;
        v42 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v42 = 1;
        v43 = *(_QWORD *)(a1 + 8);
        if (!v43)
        {
          v43 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v43 = 1;
          *(_QWORD *)(v43 + 8) = a1;
          v51 = *(WTF **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v43;
          if (v51)
          {
            if (*(_DWORD *)v51 == 1)
            {
              WTF::fastFree(v51, v50);
              v43 = *(_QWORD *)(a1 + 8);
              if (!v43)
                goto LABEL_36;
            }
            else
            {
              --*(_DWORD *)v51;
            }
          }
        }
        ++*(_DWORD *)v43;
LABEL_36:
        *(_QWORD *)(v42 + 8) = v43;
        *(_OWORD *)(v42 + 16) = 0u;
        *(_OWORD *)(v42 + 32) = 0u;
        *(_DWORD *)(v42 + 48) = 0;
        ++WebCore::GlyphPage::s_count;
        if ((WebCore::GlyphPage::fill(v42, v29, v40) & 1) == 0)
        {
          if (*(_DWORD *)v42 == 1)
          {
            --WebCore::GlyphPage::s_count;
            v49 = *(WTF **)(v42 + 8);
            *(_QWORD *)(v42 + 8) = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 1)
                WTF::fastFree(v49, v44);
              else
                --*(_DWORD *)v49;
            }
            WTF::fastFree((WTF *)v42, v44);
          }
          else
          {
            --*(_DWORD *)v42;
          }
          v42 = 0;
        }
        WTF::fastFree((WTF *)v29, v44);
        goto LABEL_41;
      }
      if (!(_DWORD)v26)
      {
        v46 = 8;
        goto LABEL_66;
      }
    }
    v46 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_66:
    v11 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, v46, (int *)v11);
    goto LABEL_27;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != v4)
  {
    if (v12 == -2)
      v13 = v11;
    v10 = (v10 + v14) & v7;
    v11 = v5 + 16 * v10;
    v12 = *(_DWORD *)v11;
    ++v14;
    if (*(_DWORD *)v11 == -1)
    {
      if (!v13)
        goto LABEL_18;
      *(_DWORD *)v13 = -1;
      *(_QWORD *)(v13 + 8) = 0;
      --*(_DWORD *)(*v6 - 16);
      *(_DWORD *)v13 = v4;
      *(_QWORD *)(v13 + 8) = 0;
      v11 = v13;
      goto LABEL_21;
    }
  }
LABEL_6:
  v15 = *(WTF **)(v11 + 8);
  if (!v15)
    return 0;
  v16 = (*(_DWORD *)v15)++;
  v17 = *((unsigned __int16 *)v15 + (v2 & 0xF) + 8);
  if (v16)
  {
    *(_DWORD *)v15 = v16;
  }
  else
  {
    --WebCore::GlyphPage::s_count;
    v19 = (WTF *)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        WTF::fastFree(v19, a2);
      else
        --*(_DWORD *)v19;
    }
    WTF::fastFree(v15, a2);
  }
  return v17;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t result;
  WTF *v32;
  int *v33;
  WTF *v34;
  int *v35;
  WTF *v36;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v12 - 2) = -1;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = &dword_1ECE90000;
    v16 = v7;
    do
    {
      v17 = (int *)(v6 + 16 * v13);
      v18 = *v17;
      if (*v17 == -1)
      {
        v30 = (WTF *)*((_QWORD *)v17 + 1);
        *((_QWORD *)v17 + 1) = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1)
          {
            v35 = v15;
            --v15[927];
            v36 = (WTF *)*((_QWORD *)v30 + 1);
            *((_QWORD *)v30 + 1) = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 1)
                WTF::fastFree(v36, v10);
              else
                --*(_DWORD *)v36;
            }
            WTF::fastFree(v30, v10);
            v15 = v35;
          }
          else
          {
            --*(_DWORD *)v30;
          }
        }
      }
      else if (v18 != -2)
      {
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 8);
        else
          v20 = 0;
        v21 = 0;
        v22 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
        v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
        do
        {
          v24 = v23 & v20;
          v23 = ++v21 + v24;
        }
        while (*(_DWORD *)(v19 + 16 * v24) != -1);
        v25 = v19 + 16 * v24;
        v26 = *(WTF **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
          {
            --v15[927];
            v32 = (WTF *)*((_QWORD *)v26 + 1);
            *((_QWORD *)v26 + 1) = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 1)
                WTF::fastFree(v32, v10);
              else
                --*(_DWORD *)v32;
            }
            WTF::fastFree(v26, v10);
            v15 = &dword_1ECE90000;
          }
          else
          {
            --*(_DWORD *)v26;
          }
        }
        *(_DWORD *)v25 = *v17;
        v27 = v6 + 16 * v13;
        v28 = *(_QWORD *)(v27 + 8);
        *(_QWORD *)(v27 + 8) = 0;
        *(_QWORD *)(v25 + 8) = v28;
        v29 = *(WTF **)(v27 + 8);
        *(_QWORD *)(v27 + 8) = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 1)
          {
            v33 = v15;
            --v15[927];
            v34 = (WTF *)*((_QWORD *)v29 + 1);
            *((_QWORD *)v29 + 1) = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 1)
                WTF::fastFree(v34, v10);
              else
                --*(_DWORD *)v34;
            }
            WTF::fastFree(v29, v10);
            v15 = v33;
          }
          else
          {
            --*(_DWORD *)v29;
          }
        }
        if (v17 == a3)
          v14 = v25;
      }
      ++v13;
    }
    while (v13 != v16);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WebCore::GlyphPage::glyphDataForCharacter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  WTF *v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_WORD *)(a2 + 2 * (a3 & 0xF) + 16);
  v5 = (*(_DWORD *)(a2 + 48) >> (a3 & 0xF)) & 1;
  if (!v4)
  {
    result = 0;
    *(_WORD *)v3 = 0;
    *(_BYTE *)(v3 + 2) = v5;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    result = 0;
    *(_WORD *)v3 = v4;
    *(_BYTE *)(v3 + 2) = v5;
    goto LABEL_5;
  }
  v7 = *(_QWORD *)(v6 + 8);
  *(_WORD *)a1 = v4;
  *(_BYTE *)(a1 + 2) = v5;
  if (v7)
  {
    v11 = v7;
    result = *(_QWORD *)(v7 + 8);
    if (!result)
    {
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = v11;
      v10 = *(WTF **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WTF::fastFree(v10, v9);
          result = *(_QWORD *)(v11 + 8);
          if (!result)
            goto LABEL_10;
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    ++*(_DWORD *)result;
LABEL_10:
    v3 = a1;
    goto LABEL_5;
  }
  result = 0;
LABEL_5:
  *(_QWORD *)(v3 + 8) = result;
  return result;
}

uint64_t WebCore::ResourceRequestBase::firstPartyForCookies(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return (uint64_t)this + 40;
}

BOOL WebCore::ProcessIdentity::operator BOOL(_DWORD *a1)
{
  return *a1 != 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeCounterStylePad@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::CSSPropertyParserHelpers *v5;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;

  v5 = (WebCore::CSSPropertyParserHelpers *)this;
  v7 = 0;
  v8 = 0;
  while (!v7)
  {
    this = WebCore::CSSPropertyParserHelpers::consumeNonNegativeInteger(v5, &v10);
    if (v10)
    {
      v7 = v10;
    }
    else
    {
      if (v8)
        goto LABEL_12;
LABEL_4:
      this = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeCounterStyleSymbol((__int128 **)v5, a2, (WTF::StringImpl *)&v10);
      v8 = v10;
      if (!v10)
      {
        *a3 = 0;
        goto LABEL_14;
      }
    }
  }
  if (!v8)
    goto LABEL_4;
  if (*(_QWORD *)v5 == *((_QWORD *)v5 + 1))
  {
    this = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)this = 2;
    v9 = (*(unsigned __int8 *)(this + 6) << 16) & 0xFC0000;
    *(_DWORD *)(this + 8) = 2;
    *(_WORD *)(this + 4) = -10240;
    *(_BYTE *)(this + 6) = BYTE2(v9) | 1;
    *(_QWORD *)(this + 16) = v7;
    *(_QWORD *)(this + 24) = v8;
    *a3 = this;
    return this;
  }
LABEL_12:
  *a3 = 0;
  if (*v8 == 2)
    this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
  else
    *v8 -= 2;
LABEL_14:
  if (v7)
  {
    if (*v7 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
    else
      *v7 -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeCounterStyleNegative@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  result = WebCore::CSSPropertyParserHelpers::consumeCounterStyleSymbol(this, a2, (WTF::StringImpl *)&v14);
  if (v14 && *this != this[1])
  {
    WebCore::CSSPropertyParserHelpers::consumeCounterStyleSymbol(this, a2, (WTF::StringImpl *)&v13);
    v9 = v13;
    if (v13 && *this == this[1])
    {
      v10 = v14;
      v13 = 0;
      v14 = 0;
      v11 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v11 = 2;
      v12 = (*(unsigned __int8 *)(v11 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v11 + 8) = 2;
      *(_WORD *)(v11 + 4) = -10240;
      *(_BYTE *)(v11 + 6) = BYTE2(v12) | 1;
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = v9;
      *a3 = v11;
      v9 = v13;
    }
    else
    {
      *a3 = 0;
    }
    v13 = 0;
    if (v9)
    {
      if (*v9 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
      else
        *v9 -= 2;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a3 = v14;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeCounterStyleSymbol@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF::StringImpl *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;
  int v12;
  WTF::StringImpl *v13;

  result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeString((uint64_t)this, &v13);
  if (v13)
  {
    *(_QWORD *)a3 = v13;
  }
  else
  {
    result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)this, 0, &v13);
    v8 = v13;
    if (v13)
    {
      v13 = 0;
      v10 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 2;
      v11 = *(_BYTE *)(v10 + 6);
      *(_WORD *)(v10 + 4) = 63;
      *(_BYTE *)(v10 + 6) = v11 & 0xFC;
      *(_QWORD *)(v10 + 8) = v8;
      v12 = *(_DWORD *)v8;
      *(_DWORD *)v8 += 2;
      if (v12)
        *(_DWORD *)v8 = v12;
      else
        WTF::StringImpl::destroy(v8, v9);
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
      *(_QWORD *)a3 = v10;
    }
    else if ((*(_WORD *)((_BYTE *)a2 + 51) & 0x40) == 0
           || (result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeImage(a3, this, (uint64_t)a2, 9),
               !*(_QWORD *)a3))
    {
      *(_QWORD *)a3 = 0;
    }
  }
  return result;
}

BOOL WebCore::CSSPropertyParser::consumeAnimationShorthand(WebCore::CSSPropertyParsing *this, WebCore::CSSParserTokenRange *a2, int a3)
{
  unint64_t v3;
  WebCore::CSSParserTokenRange *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  int *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 *v16;
  int *v17;
  uint64_t v18;
  WTF **v19;
  uint64_t v20;
  WTF *v21;
  int *v22;
  uint64_t v24;
  uint64_t v25;
  WTF **v26;
  uint64_t v27;
  WTF *v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v33;
  int v34;
  WTF **v35;
  WTF *v36;
  uint64_t v37;
  int *v38;
  WTF *v39;
  WTF *v41;
  uint64_t v42;
  _DWORD *v43;
  _BOOL8 v44;
  WTF *v45;
  WTF *v47;
  WTF *v49;
  WTF *v51;
  WTF *v53;
  WTF *v55;
  WTF *v57;
  WTF *v59;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  int v79;
  int v80;
  WTF *v82;
  uint64_t v83;
  _BYTE v84[32];
  WebCore::CSSParserTokenRange *v85;
  WebCore::CSSParserTokenRange *v86;
  int *v87;
  int *v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  _BYTE v92[32];
  WTF *v93;
  uint64_t v94;
  _BYTE v95[32];
  WTF *v96;
  uint64_t v97;
  _BYTE v98[32];
  WTF *v99;
  uint64_t v100;
  _BYTE v101[32];
  WTF *v102;
  uint64_t v103;
  _BYTE v104[32];
  WTF *v105;
  uint64_t v106;
  _BYTE v107[32];
  WTF *v108;
  uint64_t v109;
  _BYTE v110[32];
  WTF *v111;
  uint64_t v112;
  _QWORD v113[6];

  v113[4] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)a2 + 2);
  v90 = (WTF *)v92;
  v91 = 4;
  v93 = (WTF *)v95;
  v94 = 4;
  v96 = (WTF *)v98;
  v97 = 4;
  v99 = (WTF *)v101;
  v100 = 4;
  v102 = (WTF *)v104;
  v103 = 4;
  v105 = (WTF *)v107;
  v106 = 4;
  v108 = (WTF *)v110;
  v109 = 4;
  v111 = (WTF *)v113;
  v112 = 4;
  if ((_DWORD)v3)
  {
    v4 = a2;
LABEL_3:
    v6 = 0;
    v89 = 0;
    while (2)
    {
      while (*((_BYTE *)&v89 + v6))
      {
LABEL_13:
        if (++v6 == v3)
          goto LABEL_135;
      }
      a2 = (WebCore::CSSParserTokenRange *)*((_QWORD *)this + 2);
      switch(*(_WORD *)(*(_QWORD *)v4 + 2 * v6))
      {
        case 0x117:
          v16 = *(__int128 **)this;
          if (*(_QWORD *)this >= *((_QWORD *)this + 1))
          {
            v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            }
          }
          if ((*(_DWORD *)v16 & 0x3F) != 0)
            goto LABEL_26;
          v78 = *((_DWORD *)v16 + 4);
          if (v78 < 0)
          {
            v78 = WebCore::cssValueKeywordID(*((_QWORD *)v16 + 1), *((unsigned int *)v16 + 1) | ((unint64_t)((*(_DWORD *)v16 >> 22) & 1) << 32));
            *((_DWORD *)v16 + 4) = v78;
          }
          v79 = (unsigned __int16)v78;
          if ((unsigned __int16)v78 == 1015 || (unsigned __int16)v78 == 90)
          {
            WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
            v17 = &WebCore::staticCSSValuePool[4 * v79 + 3088];
            *v17 += 2;
          }
          else
          {
LABEL_26:
            v17 = 0;
          }
          v85 = (WebCore::CSSParserTokenRange *)v17;
          goto LABEL_35;
        case 0x118:
LABEL_33:
          v7 = *((unsigned __int8 *)a2 + 48);
          v87 = 0;
          v88 = 0;
          v8 = 0x10100000000;
          goto LABEL_7;
        case 0x119:
LABEL_6:
          v7 = *((unsigned __int8 *)a2 + 48);
          v87 = 0;
          v88 = 0;
          v8 = 0x10100000100;
LABEL_7:
          WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::TimeRaw>::consumeAndResolve((uint64_t)this, (unsigned __int16 **)&v88, (uint64_t)&v87, v7 | v8, &v86);
          if (v87)
            WTF::fastFree((WTF *)(v87 - 4), v9);
          if (v88)
            WTF::fastFree((WTF *)(v88 - 4), v9);
          a2 = v86;
          v85 = v86;
          goto LABEL_12;
        case 0x11A:
          WebCore::CSSPropertyParserHelpers::consumeSingleTransitionPropertyOrNone((uint64_t)this, a2, (int **)&v85);
          goto LABEL_35;
        case 0x11B:
LABEL_34:
          WebCore::CSSPropertyParserHelpers::consumeTimingFunction((__int128 **)this, a2, (WebCore::CSSPropertyParserHelpers *)&v85);
LABEL_35:
          a2 = v85;
LABEL_12:
          if (!a2)
            goto LABEL_13;
          *((_BYTE *)&v89 + v6) = 1;
          v10 = &v90 + 6 * v6;
          v11 = *((unsigned int *)v10 + 3);
          if ((_DWORD)v11 == *((_DWORD *)v10 + 2))
          {
            WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSValue&>((uint64_t)v10, a2);
          }
          else
          {
            v12 = *v10;
            *(_DWORD *)a2 += 2;
            *((_QWORD *)v12 + v11) = a2;
            *((_DWORD *)v10 + 3) = v11 + 1;
          }
          v13 = (int *)v85;
          v85 = 0;
          if (v13)
          {
            if (*v13 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
            else
              *v13 -= 2;
          }
          v14 = *(__int128 **)this;
          v15 = *((_QWORD *)this + 1);
          if (*(_QWORD *)this != v15)
          {
            if (*(_QWORD *)this >= v15)
            {
              v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              }
            }
            v6 = 0;
            if ((*(_DWORD *)v14 & 0x3F) != 0x15)
              continue;
          }
          v18 = 0;
          v19 = &v90;
          do
          {
            if (!*((_BYTE *)&v89 + v18))
            {
              WebCore::staticCSSValuePool[0] += 2;
              v88 = WebCore::staticCSSValuePool;
              v20 = *((unsigned int *)v19 + 3);
              if ((_DWORD)v20 == *((_DWORD *)v19 + 2))
              {
                WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)v19, (uint64_t *)&v88);
              }
              else
              {
                v21 = *v19;
                v88 = 0;
                *((_QWORD *)v21 + v20) = WebCore::staticCSSValuePool;
                *((_DWORD *)v19 + 3) = v20 + 1;
              }
              v22 = v88;
              v88 = 0;
              if (v22)
              {
                if (*v22 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, a2);
                else
                  *v22 -= 2;
              }
            }
            *((_BYTE *)&v89 + v18++) = 0;
            v19 += 6;
          }
          while (v3 != v18);
          if (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)this, a2))
            goto LABEL_3;
          v24 = 0;
          if (v3 <= 1)
            v25 = 1;
          else
            v25 = v3;
          break;
        default:
          switch(*(_WORD *)(*(_QWORD *)v4 + 2 * v6))
          {
            case '.':
              WebCore::CSSPropertyParsing::consumeSingleAnimationComposition((uint64_t)this, (int **)&v85);
              goto LABEL_35;
            case '/':
              goto LABEL_33;
            case '0':
              WebCore::CSSPropertyParsing::consumeSingleAnimationDirection((unsigned int **)this, (int **)&v85);
              goto LABEL_35;
            case '1':
              goto LABEL_6;
            case '2':
              WebCore::CSSPropertyParsing::consumeSingleAnimationFillMode((unsigned int **)this, (int **)&v85);
              goto LABEL_35;
            case '3':
              WebCore::CSSPropertyParsing::consumeSingleAnimationIterationCount((unsigned int **)this, (int **)&v85);
              goto LABEL_35;
            case '4':
              WebCore::CSSPropertyParsing::consumeSingleAnimationName((unsigned int **)this, (uint64_t *)&v85);
              goto LABEL_35;
            case '5':
              WebCore::CSSPropertyParsing::consumeSingleAnimationPlayState((unsigned int **)this, (int **)&v85);
              goto LABEL_35;
            case '6':
              WebCore::CSSPropertyParserHelpers::consumeAnimationTimeline(this, a2, &v85);
              goto LABEL_35;
            case '7':
              goto LABEL_34;
            default:
              goto LABEL_13;
          }
      }
      break;
    }
    while (1)
    {
      v26 = &v90 + 6 * v24;
      v27 = *((unsigned int *)v26 + 3);
      if (*(_WORD *)(*(_QWORD *)v4 + 2 * v24) == 282 && v27 >= 2)
        break;
LABEL_55:
      if (++v24 == v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v33 = *(unsigned __int16 *)(*(_QWORD *)v4 + 2 * i);
          v34 = *((unsigned __int16 *)v4 + 6);
          v35 = &v90 + 6 * i;
          v82 = (WTF *)v84;
          v83 = 4;
          v36 = *v35;
          if (*v35 == (WTF *)(v35 + 2))
          {
            v37 = *((unsigned int *)v35 + 3);
            memcpy(v84, v36, 8 * v37);
          }
          else
          {
            *v35 = (WTF *)(v35 + 2);
            v82 = v36;
            v80 = *((_DWORD *)v35 + 2);
            LODWORD(v37) = *((_DWORD *)v35 + 3);
            *((_DWORD *)v35 + 2) = 4;
            LODWORD(v83) = v80;
          }
          *((_DWORD *)v35 + 3) = 0;
          HIDWORD(v83) = v37;
          WebCore::CSSValueList::createCommaSeparated((uint64_t)&v82, (uint64_t *)&v87);
          v38 = v87;
          v87 = 0;
          v88 = v38;
          WebCore::CSSPropertyParser::addProperty((uint64_t)this, v33, v34, &v88, a3, 0);
          if (v88)
          {
            if (*v88 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v88, a2);
            else
              *v88 -= 2;
          }
          if (HIDWORD(v83))
          {
            v41 = v82;
            v42 = 8 * HIDWORD(v83);
            do
            {
              v43 = *(_DWORD **)v41;
              *(_QWORD *)v41 = 0;
              if (v43)
              {
                if (*v43 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, a2);
                else
                  *v43 -= 2;
              }
              v41 = (WTF *)((char *)v41 + 8);
              v42 -= 8;
            }
            while (v42);
          }
          v39 = v82;
          if (v84 != (_BYTE *)v82 && v82 != 0)
          {
            v82 = 0;
            LODWORD(v83) = 0;
            WTF::fastFree(v39, a2);
          }
        }
        v44 = *(_QWORD *)this == *((_QWORD *)this + 1);
        goto LABEL_86;
      }
    }
    v29 = *v26;
    v30 = 8 * v27;
    while (((*(unsigned __int16 *)(*(_QWORD *)v29 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v29 + 6) << 16)) & 0x3F800) != 0
         || (*(_WORD *)(*(_QWORD *)v29 + 4) & 0x7F) != 0x50
         || *(_WORD *)(*(_QWORD *)v29 + 8) != 6)
    {
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
      if (!v30)
        goto LABEL_55;
    }
  }
LABEL_135:
  v44 = 0;
LABEL_86:
  v45 = v111;
  if (HIDWORD(v112))
  {
    v62 = 8 * HIDWORD(v112);
    do
    {
      v63 = *(_DWORD **)v45;
      *(_QWORD *)v45 = 0;
      if (v63)
      {
        if (*v63 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v63, a2);
        else
          *v63 -= 2;
      }
      v45 = (WTF *)((char *)v45 + 8);
      v62 -= 8;
    }
    while (v62);
    v45 = v111;
  }
  if (v113 != (_QWORD *)v45 && v45 != 0)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree(v45, a2);
  }
  v47 = v108;
  if (HIDWORD(v109))
  {
    v64 = 8 * HIDWORD(v109);
    do
    {
      v65 = *(_DWORD **)v47;
      *(_QWORD *)v47 = 0;
      if (v65)
      {
        if (*v65 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, a2);
        else
          *v65 -= 2;
      }
      v47 = (WTF *)((char *)v47 + 8);
      v64 -= 8;
    }
    while (v64);
    v47 = v108;
  }
  if (v110 != (_BYTE *)v47 && v47 != 0)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree(v47, a2);
  }
  v49 = v105;
  if (HIDWORD(v106))
  {
    v66 = 8 * HIDWORD(v106);
    do
    {
      v67 = *(_DWORD **)v49;
      *(_QWORD *)v49 = 0;
      if (v67)
      {
        if (*v67 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v67, a2);
        else
          *v67 -= 2;
      }
      v49 = (WTF *)((char *)v49 + 8);
      v66 -= 8;
    }
    while (v66);
    v49 = v105;
  }
  if (v107 != (_BYTE *)v49 && v49 != 0)
  {
    v105 = 0;
    LODWORD(v106) = 0;
    WTF::fastFree(v49, a2);
  }
  v51 = v102;
  if (HIDWORD(v103))
  {
    v68 = 8 * HIDWORD(v103);
    do
    {
      v69 = *(_DWORD **)v51;
      *(_QWORD *)v51 = 0;
      if (v69)
      {
        if (*v69 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v69, a2);
        else
          *v69 -= 2;
      }
      v51 = (WTF *)((char *)v51 + 8);
      v68 -= 8;
    }
    while (v68);
    v51 = v102;
  }
  if (v104 != (_BYTE *)v51 && v51 != 0)
  {
    v102 = 0;
    LODWORD(v103) = 0;
    WTF::fastFree(v51, a2);
  }
  v53 = v99;
  if (HIDWORD(v100))
  {
    v70 = 8 * HIDWORD(v100);
    do
    {
      v71 = *(_DWORD **)v53;
      *(_QWORD *)v53 = 0;
      if (v71)
      {
        if (*v71 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, a2);
        else
          *v71 -= 2;
      }
      v53 = (WTF *)((char *)v53 + 8);
      v70 -= 8;
    }
    while (v70);
    v53 = v99;
  }
  if (v101 != (_BYTE *)v53 && v53 != 0)
  {
    v99 = 0;
    LODWORD(v100) = 0;
    WTF::fastFree(v53, a2);
  }
  v55 = v96;
  if (HIDWORD(v97))
  {
    v72 = 8 * HIDWORD(v97);
    do
    {
      v73 = *(_DWORD **)v55;
      *(_QWORD *)v55 = 0;
      if (v73)
      {
        if (*v73 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v73, a2);
        else
          *v73 -= 2;
      }
      v55 = (WTF *)((char *)v55 + 8);
      v72 -= 8;
    }
    while (v72);
    v55 = v96;
  }
  if (v98 != (_BYTE *)v55 && v55 != 0)
  {
    v96 = 0;
    LODWORD(v97) = 0;
    WTF::fastFree(v55, a2);
  }
  v57 = v93;
  if (HIDWORD(v94))
  {
    v74 = 8 * HIDWORD(v94);
    do
    {
      v75 = *(_DWORD **)v57;
      *(_QWORD *)v57 = 0;
      if (v75)
      {
        if (*v75 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v75, a2);
        else
          *v75 -= 2;
      }
      v57 = (WTF *)((char *)v57 + 8);
      v74 -= 8;
    }
    while (v74);
    v57 = v93;
  }
  if (v95 != (_BYTE *)v57 && v57 != 0)
  {
    v93 = 0;
    LODWORD(v94) = 0;
    WTF::fastFree(v57, a2);
  }
  v59 = v90;
  if (HIDWORD(v91))
  {
    v76 = 8 * HIDWORD(v91);
    do
    {
      v77 = *(_DWORD **)v59;
      *(_QWORD *)v59 = 0;
      if (v77)
      {
        if (*v77 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v77, a2);
        else
          *v77 -= 2;
      }
      v59 = (WTF *)((char *)v59 + 8);
      v76 -= 8;
    }
    while (v76);
    v59 = v90;
  }
  if (v92 != (_BYTE *)v59 && v59 != 0)
  {
    v90 = 0;
    LODWORD(v91) = 0;
    WTF::fastFree(v59, a2);
  }
  return v44;
}

__int128 *WebCore::CSSPropertyParserHelpers::consumeNumber@<X0>(__int128 **a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 **v3;
  unsigned __int8 v5;
  __int128 *result;
  unint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  double v11;
  double v12;
  unsigned __int8 v13;
  __int128 **v14;
  __int128 **v15;
  __int128 **v16;
  __int128 **v17;
  uint64_t v18;
  unsigned __int16 *v19;
  double v20;
  int v21;
  char v22;
  int v23;
  __int16 v24;
  _QWORD v25[2];
  _QWORD *v26;

  v3 = a1;
  v18 = 0;
  v19 = 0;
  v5 = a2;
  WORD2(v25[0]) = 257;
  LODWORD(v25[0]) = (_DWORD)a2 << 8;
  result = *a1;
  if (result >= v3[1])
  {
    {
      result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v13 = a2;
      v16 = v3;
      result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v5 = v13;
      v3 = v16;
    }
  }
  v7 = ((unint64_t)v5 << 8) | 0x10100000000;
  if ((*(_DWORD *)result & 0x3F) == 7)
  {
    result = *v3;
    if (*v3 >= v3[1])
    {
      {
        result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v17 = v3;
        result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v3 = v17;
      }
    }
    v8 = *((double *)result + 2);
    if ((v7 & 0xFF00) != 0x100 || v8 >= 0.0)
    {
      result = *v3;
      if (*v3 == v3[1])
      {
        {
          v15 = v3;
          v12 = v8;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v8 = v12;
          v3 = v15;
          result = *v15;
        }
      }
      else
      {
        result = (__int128 *)((char *)result + 24);
        *v3 = result;
      }
      while (1)
      {
        if (result >= v3[1])
        {
          result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v14 = v3;
            v11 = v8;
            result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v8 = v11;
            v3 = v14;
          }
        }
        if ((*(_DWORD *)result & 0x3F) != 0x10)
          break;
        result = (__int128 *)((char *)*v3 + 24);
        *v3 = result;
      }
      v20 = v8;
      v21 = 0;
      v9 = 1;
      goto LABEL_10;
    }
LABEL_26:
    v9 = 0;
    LOBYTE(v20) = 0;
LABEL_10:
    v22 = v9;
    goto LABEL_11;
  }
  if ((*(_DWORD *)result & 0x3F) != 1)
    goto LABEL_26;
  result = (__int128 *)WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>>,WebCore::NumberRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)&v20, (__int128 *)v3, &v19, (int *)v25);
  if (v19)
    result = (__int128 *)WTF::fastFree((WTF *)(v19 - 8), a2);
LABEL_11:
  if (v22)
  {
    v23 = v7;
    v24 = WORD2(v7);
    v25[0] = &v18;
    v25[1] = &v23;
    if (v21 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return (__int128 *)WTF::fastFree((WTF *)(v10 - 16), a2);
    }
    v26 = v25;
    result = (__int128 *)((uint64_t (*)(_QWORD **, double *))off_1E339DCC0[v21])(&v26, &v20);
    if (v22)
    {
      if (v21 != -1)
        result = (__int128 *)((uint64_t (*)(_QWORD *, double *))off_1E339DB80[v21])(v25, &v20);
    }
  }
  else
  {
    *a3 = 0;
  }
  v10 = v18;
  if (v18)
    return (__int128 *)WTF::fastFree((WTF *)(v10 - 16), a2);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeTimingFunction@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WebCore::CSSPropertyParserHelpers *a3@<X8>)
{
  __int128 *v7;
  __int128 *v8;
  int *v9;
  uint64_t result;
  int v11;
  int *v12;
  char v13;
  __int16 v14;
  char v15;

  v8 = *this;
  v7 = this[1];
  if (*this >= v7)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_3;
  v11 = *((_DWORD *)v8 + 4);
  if (v11 < 0)
  {
    v11 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v11;
  }
  if ((unsigned __int16)v11 - 630 < 5)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
    if ((result & 0xFF0000) != 0)
    {
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1940E5F14);
      }
      v12 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
      *v12 += 2;
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)a3 = v12;
    return result;
  }
  if ((unsigned __int16)v11 == 635)
  {
    WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v13 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = -26624;
    *(_BYTE *)(result + 6) = v13 & 0xFC;
    *(_DWORD *)(result + 8) = 1;
    v14 = 260;
LABEL_32:
    *(_WORD *)(result + 12) = v14;
    *(_QWORD *)a3 = result;
    return result;
  }
  if ((unsigned __int16)v11 == 636)
  {
    WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v15 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = -26624;
    *(_BYTE *)(result + 6) = v15 & 0xFC;
    *(_DWORD *)(result + 8) = 1;
    v14 = 261;
    goto LABEL_32;
  }
  v7 = this[1];
LABEL_3:
  v9 = (int *)*this;
  if (*this >= v7)
  {
    v9 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  result = (uint64_t)WebCore::CSSParserToken::functionId(v9);
  if ((int)result > 819)
  {
    if ((_DWORD)result == 820)
      return WebCore::CSSPropertyParserHelpers::consumeSteps(a3, (WebCore::CSSParserTokenRange *)this);
    goto LABEL_10;
  }
  if ((_DWORD)result == 631)
    return WebCore::CSSPropertyParserHelpers::consumeLinear(a3, (WebCore::CSSParserTokenRange *)this);
  if ((_DWORD)result == 818)
    return WebCore::CSSPropertyParserHelpers::consumeCubicBezier(a3, (WebCore::CSSParserTokenRange *)this);
  if ((_DWORD)result != 819 || (*(_WORD *)((_BYTE *)a2 + 51) & 0x80) == 0)
  {
LABEL_10:
    *(_QWORD *)a3 = 0;
    return result;
  }
  return WebCore::CSSPropertyParserHelpers::consumeSpringFunction(a3, (WebCore::CSSParserTokenRange *)this);
}

WTF *WebCore::CSSPropertyParserHelpers::consumeCounterStyleSymbols@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  char v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  WTF *v16;
  uint64_t v17;
  unsigned int v18;
  WTF *v19;
  WTF *v20;
  WTF *result;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  _BYTE v34[32];
  _DWORD *v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[32];
  WTF::StringImpl *v39;

  v36 = (WTF *)v38;
  v37 = 4;
  if (*this == this[1])
  {
LABEL_58:
    *a3 = 0;
  }
  else
  {
    do
    {
      WebCore::CSSPropertyParserHelpers::consumeString((uint64_t)this, &v39);
      v7 = (uint64_t)v39;
      if (!v39)
      {
        WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)this, 0, &v39);
        v11 = v39;
        if (v39)
        {
          v39 = 0;
          v7 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v7 = 2;
          v12 = *(_BYTE *)(v7 + 6);
          *(_WORD *)(v7 + 4) = 63;
          *(_BYTE *)(v7 + 6) = v12 & 0xFC;
          *(_QWORD *)(v7 + 8) = v11;
          v13 = *(_DWORD *)v11;
          *(_DWORD *)v11 += 2;
          if (v13)
            *(_DWORD *)v11 = v13;
          else
            WTF::StringImpl::destroy(v11, a2);
          v14 = v39;
          v39 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, a2);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        else if ((*(_WORD *)((_BYTE *)a2 + 51) & 0x40) == 0
               || (WebCore::CSSPropertyParserHelpers::consumeImage((WTF::StringImpl *)&v35, this, (uint64_t)a2, 9),
                   (v7 = (uint64_t)v35) == 0))
        {
          *a3 = 0;
          goto LABEL_36;
        }
      }
      v39 = (WTF::StringImpl *)v7;
      v35 = 0;
      LODWORD(v8) = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        v15 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v39);
        v8 = HIDWORD(v37);
        v16 = v36;
        v17 = *v15;
        *v15 = 0;
        *((_QWORD *)v16 + v8) = v17;
      }
      else
      {
        v39 = 0;
        *((_QWORD *)v36 + HIDWORD(v37)) = v7;
      }
      HIDWORD(v37) = v8 + 1;
      v9 = v39;
      v39 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v35;
      v35 = 0;
      if (v10)
      {
        if (*v10 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
        else
          *v10 -= 2;
      }
    }
    while (*this != this[1]);
    v18 = HIDWORD(v37);
    if (!HIDWORD(v37))
      goto LABEL_58;
    v31 = (WTF *)v34;
    v32 = 4;
    v19 = v36;
    if (v36 == (WTF *)v38)
    {
      memcpy(v34, v38, 8 * HIDWORD(v37));
    }
    else
    {
      v36 = (WTF *)v38;
      v31 = v19;
      v30 = v37;
      LODWORD(v37) = 4;
      v32 = v30;
    }
    HIDWORD(v37) = 0;
    v33 = v18;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v31, (uint64_t *)&v39);
    *a3 = v39;
    if (v33)
    {
      v27 = v31;
      v28 = 8 * v33;
      do
      {
        v29 = *(_DWORD **)v27;
        *(_QWORD *)v27 = 0;
        if (v29)
        {
          if (*v29 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, a2);
          else
            *v29 -= 2;
        }
        v27 = (WTF *)((char *)v27 + 8);
        v28 -= 8;
      }
      while (v28);
    }
    v20 = v31;
    if (v34 != (_BYTE *)v31 && v31 != 0)
    {
      v31 = 0;
      v32 = 0;
      WTF::fastFree(v20, a2);
    }
LABEL_36:
    if (HIDWORD(v37))
    {
      v24 = v36;
      v25 = 8 * HIDWORD(v37);
      do
      {
        v26 = *(_DWORD **)v24;
        *(_QWORD *)v24 = 0;
        if (v26)
        {
          if (*v26 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, a2);
          else
            *v26 -= 2;
        }
        v24 = (WTF *)((char *)v24 + 8);
        v25 -= 8;
      }
      while (v25);
    }
  }
  result = v36;
  if (v38 != (_BYTE *)v36 && v36 != 0)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeString@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  char v11;
  int v12;
  WTF::StringImpl *v13;

  v5 = *(__int128 **)this;
  v4 = *(__int128 **)(this + 8);
  if (*(_QWORD *)this >= (unint64_t)v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) == 0x1C)
  {
    v6 = *(__int128 **)this;
    if (*(__int128 **)this == v4)
    {
      v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v8 = 1;
      {
        v7 = v4;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v7 = *(__int128 **)this;
      }
    }
    else
    {
      v7 = (__int128 *)((char *)v6 + 24);
      *(_QWORD *)this = (char *)v6 + 24;
    }
    while (1)
    {
      if (v7 < v4 || (v8 & 1) != 0)
      {
        if (v7 >= v4)
          v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v9 = *(_DWORD *)v7;
      }
      else
      {
        v9 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
        v8 = 1;
      }
      if ((v9 & 0x3F) != 0x10)
        break;
      v7 = (__int128 *)(*(_QWORD *)this + 24);
      *(_QWORD *)this = v7;
    }
    if ((*((_BYTE *)v6 + 2) & 0x40) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    this = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)this = 2;
    v11 = *(_BYTE *)(this + 6);
    *(_WORD *)(this + 4) = 20;
    *(_BYTE *)(this + 6) = v11 & 0xFC;
    *(_QWORD *)(this + 8) = v13;
    if (v13)
    {
      v12 = *(_DWORD *)v13;
      *(_DWORD *)v13 += 2;
      *a2 = this;
      if (v12)
        *(_DWORD *)v13 = v12;
      else
        return WTF::StringImpl::destroy(v13, v10);
    }
    else
    {
      *a2 = this;
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

__int128 *WebCore::CSSPropertyParsing::consumeSingleAnimationIterationCount@<X0>(unsigned int **this@<X0>, int **a2@<X8>)
{
  unsigned int *v5;
  __int128 *result;
  int *v7;
  int *v8;

  v5 = *this;
  if (v5 >= this[1])
  {
    {
      v5 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v5 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if (WebCore::CSSParserToken::id(v5) == 539)
  {
    result = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
    v7 = &WebCore::staticCSSValuePool[5244];
    *v7 += 2;
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeNumber((__int128 **)this, (void *)1, &v8);
    v7 = v8;
  }
  *a2 = v7;
  return result;
}

void *WebCore::CSSPropertyParsing::consumeSingleAnimationDirection@<X0>(unsigned int **this@<X0>, int **a2@<X8>)
{
  unsigned int *v5;
  void *result;
  int v7;
  int *v8;

  v5 = *this;
  if (v5 >= this[1])
  {
    {
      v5 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v5 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  result = WebCore::CSSParserToken::id(v5);
  v7 = (int)result;
  v8 = 0;
  if ((int)result > 540)
  {
    if ((_DWORD)result == 625 || (_DWORD)result == 541)
      goto LABEL_11;
  }
  else if ((_DWORD)result == 90 || (_DWORD)result == 504)
  {
LABEL_11:
    result = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
    v8 = &WebCore::staticCSSValuePool[4 * v7 + 3088];
    *v8 += 2;
  }
  *a2 = v8;
  return result;
}

unsigned int *WebCore::CSSParserToken::id(unsigned int *this)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *this;
  if ((*this & 0x3F) != 0)
  {
    LOWORD(this) = 0;
  }
  else
  {
    v2 = (uint64_t)this;
    LODWORD(this) = this[4];
    if ((this & 0x80000000) != 0)
    {
      LODWORD(this) = WebCore::cssValueKeywordID(*(_QWORD *)(v2 + 8), *(unsigned int *)(v2 + 4) | ((unint64_t)((v1 >> 22) & 1) << 32));
      *(_DWORD *)(v2 + 16) = (_DWORD)this;
    }
  }
  return (unsigned int *)(unsigned __int16)this;
}

void *WebCore::CSSPropertyParsing::consumeSingleAnimationFillMode@<X0>(unsigned int **this@<X0>, int **a2@<X8>)
{
  unsigned int *v5;
  void *result;
  int v7;
  BOOL v8;
  int *v9;

  v5 = *this;
  if (v5 >= this[1])
  {
    {
      v5 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v5 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  result = WebCore::CSSParserToken::id(v5);
  v7 = (int)result;
  if (((_DWORD)result - 532) < 2 || ((_DWORD)result != 453 ? (v8 = (_DWORD)result == 6) : (v8 = 1), v8))
  {
    result = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
    v9 = &WebCore::staticCSSValuePool[4 * v7 + 3088];
    *v9 += 2;
  }
  else
  {
    v9 = 0;
  }
  *a2 = v9;
  return result;
}

__int128 *WebCore::CSSParserTokenRange::consumeIncludingWhitespace(__int128 **this)
{
  WebCore::CSSParserTokenRange *v1;
  __int128 *result;
  int *v3;
  __int128 *v4;
  int *v5;
  __int128 *v6;
  WebCore::CSSParserTokenRange *v7;
  __int128 **v8;

  v1 = (WebCore::CSSParserTokenRange *)this;
  result = *this;
  v3 = &dword_1ECE90000;
  if (result == *((__int128 **)v1 + 1))
  {
    v8 = (__int128 **)v1;
    {
      v4 = result;
      result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v3 = &dword_1ECE90000;
      v1 = (WebCore::CSSParserTokenRange *)v8;
      v4 = *v8;
    }
  }
  else
  {
    v4 = (__int128 *)((char *)result + 24);
    *(_QWORD *)v1 = (char *)result + 24;
  }
  while (1)
  {
    if ((unint64_t)v4 >= *((_QWORD *)v1 + 1))
    {
      v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v3[312] & 1) == 0)
      {
        v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v6 = result;
        v7 = v1;
        v5 = v3;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v3 = v5;
        result = v6;
        v1 = v7;
        *((_BYTE *)v5 + 1248) = 1;
      }
    }
    if ((*(_DWORD *)v4 & 0x3F) != 0x10)
      break;
    v4 = (__int128 *)(*(_QWORD *)v1 + 24);
    *(_QWORD *)v1 = v4;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeKeyframesName@<X0>(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v5;
  WTF::StringImpl *result;
  __int128 *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  _QWORD v10[2];
  WTF::StringImpl *v11;
  uint64_t v12;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0x1C)
    return WebCore::CSSPropertyParserHelpers::consumeCustomIdent((WebCore::CSSPropertyParserHelpers *)this, 0, a2);
  v7 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
  result = (WTF::StringImpl *)WTF::equalLettersIgnoringASCIICase(*((unsigned __int16 **)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32), "none", 5uLL);
  if ((_DWORD)result)
  {
    dword_1ECE8BC48 += 2;
    *a2 = (uint64_t)&WebCore::staticCSSValuePool[3112];
  }
  else
  {
    v8 = *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32);
    v10[0] = *((_QWORD *)v7 + 1);
    v10[1] = v8;
    WTF::StringView::toString((uint64_t *)&v11, (WTF::StringView *)v10);
    WebCore::CSSPrimitiveValue::create((_DWORD **)&v11, &v12);
    result = v11;
    *a2 = v12;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeCustomIdent@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  int v9;
  WTF::StringImpl *v10;

  result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)this, a2, &v10);
  v5 = v10;
  if (v10)
  {
    v10 = 0;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 2;
    v8 = *(_BYTE *)(v6 + 6);
    *(_WORD *)(v6 + 4) = 63;
    *(_BYTE *)(v6 + 6) = v8 & 0xFC;
    *(_QWORD *)(v6 + 8) = v5;
    v9 = *(_DWORD *)v5;
    *(_DWORD *)v5 += 2;
    *a3 = v6;
    if (v9)
      *(_DWORD *)v5 = v9;
    else
      WTF::StringImpl::destroy(v5, v7);
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleAnimationPlayState@<X0>(unsigned int **this@<X0>, int **a2@<X8>)
{
  unsigned int *v5;
  uint64_t result;
  int *v7;
  int v8;

  v5 = *this;
  if (v5 >= this[1])
  {
    {
      v5 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v5 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  result = (uint64_t)WebCore::CSSParserToken::id(v5);
  if ((result & 0xFFFE) == 0x272)
  {
    v8 = result;
    result = (uint64_t)WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
    v7 = &WebCore::staticCSSValuePool[4 * v8 + 3088];
    *v7 += 2;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  return result;
}

__int128 *WebCore::CSSPropertyParsing::consumeSingleAnimationName@<X0>(unsigned int **this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v6;
  __int128 *result;

  v6 = *this;
  if (v6 >= this[1])
  {
    {
      v6 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v6 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if (WebCore::CSSParserToken::id(v6) != 6)
    return (__int128 *)WebCore::CSSPropertyParserHelpers::consumeKeyframesName((__int128 **)this, a2);
  result = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
  dword_1ECE8BC48 += 2;
  *a2 = (uint64_t)&WebCore::staticCSSValuePool[3112];
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSingleTransitionPropertyIdent(WebCore::CSSPropertyParserHelpers *this, __int128 **a2, const WebCore::CSSParserToken *a3)
{
  unsigned int v6;
  int v7;
  __int16 v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;
  uint64_t result;
  char v14;
  int v15;
  int *v16;

  v6 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 0x3F) == 0)
  {
    v15 = *((_DWORD *)a3 + 4);
    if (v15 < 0)
    {
      v15 = WebCore::cssValueKeywordID(*((_QWORD *)a3 + 1), *((unsigned int *)a3 + 1) | ((unint64_t)((v6 >> 22) & 1) << 32));
      *((_DWORD *)a3 + 4) = v15;
    }
    if ((unsigned __int16)v15 == 49)
    {
      result = WebCore::CSSPropertyParserHelpers::consumeIdent(a2, (WebCore::CSSParserTokenRange *)a2, &v16);
LABEL_18:
      *(_QWORD *)this = v16;
      return result;
    }
    v6 = *(_DWORD *)a3;
  }
  v7 = WebCore::cssPropertyID(*((_QWORD *)a3 + 1), (const char *)(*((unsigned int *)a3 + 1) | ((unint64_t)((v6 >> 22) & 1) << 32)));
  if (!v7)
  {
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeCustomIdent((WebCore::CSSPropertyParserHelpers *)a2, 0, (uint64_t *)&v16);
    goto LABEL_18;
  }
  v8 = v7;
  v10 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
  {
    v11 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v10 = *a2;
    }
  }
  else
  {
    v10 = (__int128 *)((char *)v10 + 24);
    *a2 = v10;
  }
  while (1)
  {
    if (v10 < v9 || (v11 & 1) != 0)
    {
      if (v10 >= v9)
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v12 = *(_DWORD *)v10;
    }
    else
    {
      v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
      v11 = 1;
    }
    if ((v12 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)((char *)*a2 + 24);
    *a2 = v10;
  }
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v14 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 79;
  *(_BYTE *)(result + 6) = v14 & 0xFC;
  *(_WORD *)(result + 8) = v8;
  *(_QWORD *)this = result;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeNonNegativeInteger@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  unsigned __int16 *v6;

  v5 = 0;
  v6 = 0;
  result = WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consumeAndResolve((uint64_t)this, &v6, (uint64_t)&v5, 0x10100000000, a2);
  if (v5)
    result = WTF::fastFree((WTF *)(v5 - 16), v4);
  if (v6)
    return WTF::fastFree((WTF *)(v6 - 8), v4);
  return result;
}

_QWORD *WebCore::initializeCommonAtomStrings(void)::$_0::operator()()
{
  WTF::AtomString::AtomString(&WebCore::allAtomData, (uint64_t)"all", 4uLL);
  WTF::AtomString::AtomString(qword_1ECE839D8, (uint64_t)"alternative", 0xCuLL);
  WTF::AtomString::AtomString(&WebCore::applicationXHTMLContentTypeAtomData, (uint64_t)"application/xhtml+xml", 0x16uLL);
  WTF::AtomString::AtomString(&WebCore::applicationXMLContentTypeAtomData, (uint64_t)"application/xml", 0x10uLL);
  WTF::AtomString::AtomString(&WebCore::applicationOctetStreamAtomData, (uint64_t)"application/octet-stream", 0x19uLL);
  WTF::AtomString::AtomString(&WebCore::autoAtomData, (uint64_t)"auto", 5uLL);
  WTF::AtomString::AtomString(&WebCore::captionsAtomData, (uint64_t)"captions", 9uLL);
  WTF::AtomString::AtomString(&WebCore::commentaryAtomData, (uint64_t)"commentary", 0xBuLL);
  WTF::AtomString::AtomString(&WebCore::cssContentTypeAtomData, (uint64_t)"text/css", 9uLL);
  WTF::AtomString::AtomString(&WebCore::eagerAtomData, (uint64_t)"eager", 6uLL);
  WTF::AtomString::AtomString(&WebCore::emailAtomData, (uint64_t)"email", 6uLL);
  WTF::AtomString::AtomString(&WebCore::falseAtomData, (uint64_t)"false", 6uLL);
  WTF::AtomString::AtomString(&WebCore::imageSVGContentTypeAtomData, (uint64_t)"image/svg+xml", 0xEuLL);
  WTF::AtomString::AtomString(&WebCore::lazyAtomData, (uint64_t)"lazy", 5uLL);
  WTF::AtomString::AtomString(&qword_1ECE839D8[1], (uint64_t)"main", 5uLL);
  WTF::AtomString::AtomString(&WebCore::manualAtomData, (uint64_t)"manual", 7uLL);
  WTF::AtomString::AtomString(&WebCore::noneAtomData, (uint64_t)"none", 5uLL);
  WTF::AtomString::AtomString(&WebCore::offAtomData, (uint64_t)"off", 4uLL);
  WTF::AtomString::AtomString(&WebCore::onAtomData, (uint64_t)"on", 3uLL);
  WTF::AtomString::AtomString(&WebCore::plaintextOnlyAtomData, (uint64_t)"plaintext-only", 0xFuLL);
  WTF::AtomString::AtomString(&WebCore::printAtomData, (uint64_t)"print", 6uLL);
  WTF::AtomString::AtomString(&WebCore::resetAtomData, (uint64_t)"reset", 6uLL);
  WTF::AtomString::AtomString(&WebCore::screenAtomData, (uint64_t)"screen", 7uLL);
  WTF::AtomString::AtomString(&WebCore::searchAtomData, (uint64_t)"search", 7uLL);
  WTF::AtomString::AtomString(&WebCore::starAtomData, (uint64_t)"*", 2uLL);
  WTF::AtomString::AtomString(&WebCore::submitAtomData, (uint64_t)"submit", 7uLL);
  WTF::AtomString::AtomString(&WebCore::subtitlesAtomData, (uint64_t)"subtitles", 0xAuLL);
  WTF::AtomString::AtomString(&WebCore::telAtomData, (uint64_t)"tel", 4uLL);
  WTF::AtomString::AtomString(&WebCore::textAtomData, (uint64_t)"text", 5uLL);
  WTF::AtomString::AtomString(&WebCore::textHTMLContentTypeAtomData, (uint64_t)"text/html", 0xAuLL);
  WTF::AtomString::AtomString(&WebCore::textPlainContentTypeAtomData, (uint64_t)"text/plain", 0xBuLL);
  WTF::AtomString::AtomString(&WebCore::textXMLContentTypeAtomData, (uint64_t)"text/xml", 9uLL);
  WTF::AtomString::AtomString(&WebCore::trueAtomData, (uint64_t)"true", 5uLL);
  WTF::AtomString::AtomString(&WebCore::urlAtomData, (uint64_t)"url", 4uLL);
  WTF::AtomString::AtomString(&WebCore::xmlAtomData, (uint64_t)"xml", 4uLL);
  return WTF::AtomString::AtomString(&WebCore::xmlnsAtomData, (uint64_t)"xmlns", 6uLL);
}

_QWORD *WTF::AtomString::AtomString(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a3 >= 2)
  {
    v4 = result;
    WTF::AtomStringImpl::add();
    result = v4;
    v3 = v5;
  }
  else
  {
    v3 = *MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  *result = v3;
  return result;
}

uint64_t WebCore::NativeImage::isNativeImage(WebCore::NativeImage *this)
{
  return 1;
}

uint64_t WebCore::NetworkStorageSession::setTrackingPreventionEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 136) = a2;
  return this;
}

void WebCore::logLevelString(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t PAL::CNPostalAddressFunction(PAL *this)
{
  return qword_1ECE7E190;
}

uint64_t PAL::CNPhoneNumberFunction(PAL *this)
{
  return qword_1ECE7E180;
}

uint64_t PAL::PKContactFunction(PAL *this)
{
  return qword_1ECE7E850;
}

uint64_t WebCore::ResourceRequestBase::priority(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return *((unsigned __int8 *)this + 146);
}

uint64_t WebCore::ScrollableArea::visibleContentRect(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 832))(a1, 0, a2);
}

_QWORD *WebCore::RenderElement::adjustComputedFontSizesOnBlocks(_QWORD *this, float a2, float a3)
{
  uint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  void *v8;
  const WebCore::RenderObject *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  WebCore::TextAutoSizing *v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40) + 8)
                                                     + 1944)
                                         + 248)
                             + 328)
                 + 296);
  if (v3)
  {
    v6 = this;
    *(_DWORD *)(v3 + 24) += 2;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v7 = WebCore::RenderObject::traverseNext((uint64_t)this, (uint64_t)this, (uint64_t (*)(unint64_t))WebCore::includeNonFixedHeight, (int *)&v23 + 1, (int *)&v23);
    if (v7)
    {
      v10 = v7;
      ++*(_DWORD *)(v7 + 16);
      while (1)
      {
        v11 = HIDWORD(v25);
        if (HIDWORD(v25))
        {
          while (SHIDWORD(v23) <= *((_DWORD *)v24 + v11 - 1))
          {
            HIDWORD(v25) = --v11;
            if (!v11)
              goto LABEL_7;
          }
          v12 = v11;
        }
        else
        {
LABEL_7:
          v12 = 0;
        }
        if ((_DWORD)v23)
        {
          if (v11 == (_DWORD)v25)
          {
            v13 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v24, v12 + 1, (unint64_t)&v23);
            *((_DWORD *)v24 + HIDWORD(v25)) = *(_DWORD *)v13;
          }
          else
          {
            *((_DWORD *)v24 + v12) = v23;
          }
          v11 = ++HIDWORD(v25);
        }
        v14 = *(_BYTE *)(v10 + 52) & 7;
        v15 = v14 == 1 ? v10 : 0;
        if (v15)
          break;
        if (v14 == 1)
          goto LABEL_19;
LABEL_26:
        LODWORD(v23) = 0;
        v18 = WebCore::RenderObject::traverseNext(v10, (uint64_t)v6, (uint64_t (*)(unint64_t))WebCore::includeNonFixedHeight, (int *)&v23 + 1, (int *)&v23);
        if (v18)
          ++*(_DWORD *)(v18 + 16);
        v19 = *(_DWORD *)(v10 + 16);
        if (!v19)
        {
          __break(0xC471u);
          JUMPOUT(0x1940E74B8);
        }
        *(_DWORD *)(v10 + 16) = v19 - 1;
        v10 = v18;
        if (!v18)
          goto LABEL_33;
      }
      ++*(_DWORD *)(v15 + 16);
      if (v14 == 1)
      {
LABEL_19:
        if (*(_BYTE *)(v10 + 46) != 19)
        {
          if (!v11)
            goto LABEL_23;
          v16 = (int)(v11 - 1);
          if (v16 >= v11)
            goto LABEL_47;
          if (HIDWORD(v23) - *((_DWORD *)v24 + v16) >= 4)
LABEL_23:
            WebCore::RenderBlockFlow::adjustComputedFontSizes((WebCore::LegacyLineLayout *)v10, a2, a3, (uint64_t)v8, v9);
        }
      }
      v17 = *(_DWORD *)(v15 + 16);
      if (!v17)
      {
LABEL_47:
        __break(0xC471u);
        JUMPOUT(0x1940E7498);
      }
      *(_DWORD *)(v15 + 16) = v17 - 1;
      goto LABEL_26;
    }
LABEL_33:
    v20 = *(WebCore::TextAutoSizing **)(v3 + 2456);
    if (!v20)
    {
      v20 = (WebCore::TextAutoSizing *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v20 = 0;
      v21 = *(uint64_t **)(v3 + 2456);
      *(_QWORD *)(v3 + 2456) = v20;
      if (v21)
      {
        if (*v21)
          WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::deallocateTable(*v21, v8);
        WTF::fastFree((WTF *)v21, v8);
        v20 = *(WebCore::TextAutoSizing **)(v3 + 2456);
      }
    }
    WebCore::TextAutoSizing::updateRenderTree(v20, v8);
    this = v24;
    if (v24)
    {
      v24 = 0;
      LODWORD(v25) = 0;
      this = (_QWORD *)WTF::fastFree((WTF *)this, v22);
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return this;
}

unint64_t WebCore::RenderObject::traverseNext(uint64_t a1, uint64_t a2, uint64_t (*a3)(unint64_t), int *a4, int *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v9 = a1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if (v10)
  {
    v11 = v10;
    ++*(_DWORD *)(v10 + 16);
    while (1)
    {
      v12 = a3(v11);
      if (v12)
        break;
      v13 = *(unsigned int *)(v11 + 47);
      v14 = v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32);
      if (v14)
      {
        v14 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
        if (v14)
          ++*(_DWORD *)(v14 + 16);
      }
      v15 = *(_DWORD *)(v11 + 16);
      if (!v15)
      {
        __break(0xC471u);
        JUMPOUT(0x1940E77B0);
      }
      *(_DWORD *)(v11 + 16) = v15 - 1;
      v11 = v14;
      if (!v14)
        goto LABEL_9;
    }
    v27 = *a4 + 1;
    *a4 = v27;
    if (v12 == 2)
      *a5 = v27;
    a4 = (int *)(v11 + 16);
    v16 = *(_DWORD *)(v11 + 16);
    if (v16)
      goto LABEL_56;
LABEL_63:
    __break(0xC471u);
    JUMPOUT(0x1940E76A0);
  }
LABEL_9:
  if (v9 == a2)
    return 0;
  v16 = *a4;
  if (a2)
  {
    while (1)
    {
      while (1)
      {
        v17 = *(unsigned __int8 *)(v9 + 51);
        v18 = *(unsigned int *)(v9 + 47) | (unint64_t)(v17 << 32);
        if (!v18)
          break;
        v11 = *(_QWORD *)((*(unsigned int *)(v9 + 47) | (unint64_t)(v17 << 32)) + 8);
        if (!v11)
          break;
LABEL_13:
        ++*(_DWORD *)(v11 + 16);
        do
        {
          v19 = a3(v11);
          if (v19)
            goto LABEL_53;
          v20 = *(unsigned int *)(v11 + 47);
          v21 = v20 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32);
          if (v21)
          {
            v21 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
            if (v21)
              ++*(_DWORD *)(v21 + 16);
          }
          v22 = *(_DWORD *)(v11 + 16);
          if (!v22)
            goto LABEL_62;
          *(_DWORD *)(v11 + 16) = v22 - 1;
          v11 = v21;
        }
        while (v21);
        v23 = *(_QWORD *)(v9 + 32);
        if (!v23)
        {
          v24 = 0;
          v25 = 1;
          goto LABEL_28;
        }
LABEL_27:
        v25 = 0;
        v24 = *(_QWORD *)(v23 + 8);
LABEL_28:
        if (v24 == a2)
          return 0;
        if (v25)
          goto LABEL_61;
        v11 = 0;
        v9 = *(_QWORD *)(v23 + 8);
        v16 = *a4 - 1;
        *a4 = v16;
        if (!v9)
          return v11;
      }
      v23 = *(_QWORD *)(v9 + 32);
      if (!v23)
        goto LABEL_59;
      v26 = *(_QWORD *)(v23 + 8);
      if (v26 == a2)
      {
        if (!v18)
          goto LABEL_27;
        v11 = *(_QWORD *)(v18 + 8);
        if (!v11)
          goto LABEL_27;
        goto LABEL_13;
      }
      v11 = 0;
      *a4 = --v16;
      v9 = v26;
      if (!v26)
        return v11;
    }
  }
  while (1)
  {
    v28 = *(unsigned int *)(v9 + 47);
    if (v28 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
    {
      v11 = *(_QWORD *)((v28 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
      if (v11)
        break;
    }
    v33 = *(_QWORD *)(v9 + 32);
    if (!v33)
    {
LABEL_59:
      v11 = 0;
      goto LABEL_56;
    }
    v11 = 0;
    v9 = *(_QWORD *)(v33 + 8);
LABEL_51:
    *a4 = --v16;
    if (!v9)
      return v11;
  }
  ++*(_DWORD *)(v11 + 16);
  do
  {
    v19 = a3(v11);
    if (v19)
    {
LABEL_53:
      if (v19 == 2)
        *a5 = *a4;
      a4 = (int *)(v11 + 16);
      v16 = *(_DWORD *)(v11 + 16);
      if (v16)
        goto LABEL_56;
      goto LABEL_63;
    }
    v29 = *(unsigned int *)(v11 + 47);
    v30 = v29 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32);
    if (v30)
    {
      v30 = *(_QWORD *)((v29 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
      if (v30)
        ++*(_DWORD *)(v30 + 16);
    }
    v31 = *(_DWORD *)(v11 + 16);
    if (!v31)
    {
LABEL_62:
      __break(0xC471u);
      JUMPOUT(0x1940E77DCLL);
    }
    *(_DWORD *)(v11 + 16) = v31 - 1;
    v11 = v30;
  }
  while (v30);
  v32 = *(_QWORD *)(v9 + 32);
  if (v32)
  {
    v11 = 0;
    v9 = *(_QWORD *)(v32 + 8);
    v16 = *a4;
    goto LABEL_51;
  }
LABEL_61:
  v11 = 0;
  v16 = *a4;
LABEL_56:
  *a4 = v16 - 1;
  return v11;
}

uint64_t WebCore::Document::collectTouchEventRectsForChildRenderers(uint64_t *a1, uint64_t a2, int *a3, __int128 *a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  WebCore::RenderObject *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::EventTarget *v24;
  uint64_t v25;
  WebCore::EventTarget *v26;
  uint64_t v27;
  WebCore::EventTarget *v28;
  uint64_t v29;
  WebCore::EventTarget *v30;
  uint64_t v31;
  WebCore::EventTarget *v32;
  uint64_t v33;
  WebCore::EventTarget *v34;
  uint64_t v35;
  WebCore::EventTarget *v36;
  uint64_t v37;
  WebCore::Quirks *v38;
  WebCore::EventTarget *v39;
  uint64_t v40;
  WebCore::EventTarget *v41;
  uint64_t v42;
  WebCore::EventTarget *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  WebCore::Quirks *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  int *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  int *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  int *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  WebCore::Quirks *v190;
  uint64_t v191;
  int *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  WebCore::Quirks *v197;
  uint64_t v198;
  int *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  WebCore::Quirks *v204;
  uint64_t v205;
  int *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  WebCore::Quirks *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  WebCore::Quirks *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  WebCore::Quirks *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WebCore::Quirks *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  WebCore::Quirks *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  WebCore::Quirks *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  WebCore::Quirks *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  int v260;
  _BYTE v262[24];
  __int128 v263;
  WebCore::EventTarget *v264;
  int v265;
  int v266;

  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v259 = *(_QWORD **)(v14 + 40);
  if (!v259)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
    v259 = *(_QWORD **)(v14 + 40);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  if (result)
  {
    v17 = result;
    v18 = a1 + 79;
    v19 = a1 + 78;
    while (1)
    {
      v266 = 0;
      v265 = 0;
      if ((*(_BYTE *)(v17 + 45) & 1) != 0)
        break;
      v264 = *(WebCore::EventTarget **)(*(_QWORD *)(v17 + 24) + 8);
      if (!v264)
        goto LABEL_63;
      if (!*v18
        || (result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(v18, &v264)) == 0)
      {
        if (*v19)
        {
          if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
          {
            v20 = *((_QWORD *)v264 + 2);
            if ((v20 & 0x1000000000000) != 0)
            {
              v142 = v20 & 0xFFFFFFFFFFFFLL;
              v143 = *(unsigned int *)(v142 + 28);
              if ((_DWORD)v143)
              {
                v144 = *(_QWORD *)(v142 + 16);
                v145 = v259[263];
                v146 = 32 * v143;
                v147 = v146;
                v148 = (_QWORD *)v144;
                while (*v148 != v145)
                {
                  v148 += 4;
                  v147 -= 32;
                  if (!v147)
                    goto LABEL_15;
                }
                while (*(_QWORD *)v144 != v145)
                {
                  v144 += 32;
                  v146 -= 32;
                  if (!v146)
                    goto LABEL_204;
                }
                v220 = *(unsigned int *)(v144 + 20);
                if (!(_DWORD)v220)
                {
LABEL_204:
                  v164 = &v265;
                  goto LABEL_205;
                }
                v221 = *(_QWORD *)(v144 + 8);
                v222 = 8 * v220;
                while ((*(_BYTE *)(*(_QWORD *)v221 + 4) & 2) != 0)
                {
                  v221 += 8;
                  v222 -= 8;
                  if (!v222)
                    goto LABEL_204;
                }
                v164 = &v266;
LABEL_205:
                *v164 |= 1u;
              }
            }
          }
LABEL_15:
          if (*v19)
          {
            if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
            {
              v21 = *((_QWORD *)v264 + 2);
              if ((v21 & 0x1000000000000) != 0)
              {
                v153 = v21 & 0xFFFFFFFFFFFFLL;
                v154 = *(unsigned int *)(v153 + 28);
                if ((_DWORD)v154)
                {
                  v155 = *(_QWORD *)(v153 + 16);
                  v156 = v259[262];
                  v157 = 32 * v154;
                  v158 = v157;
                  v159 = (_QWORD *)v155;
                  while (*v159 != v156)
                  {
                    v159 += 4;
                    v158 -= 32;
                    if (!v158)
                      goto LABEL_18;
                  }
                  while (*(_QWORD *)v155 != v156)
                  {
                    v155 += 32;
                    v157 -= 32;
                    if (!v157)
                      goto LABEL_213;
                  }
                  v232 = *(unsigned int *)(v155 + 20);
                  if (!(_DWORD)v232)
                  {
LABEL_213:
                    v172 = &v265;
                    goto LABEL_214;
                  }
                  v233 = *(_QWORD *)(v155 + 8);
                  v234 = 8 * v232;
                  while ((*(_BYTE *)(*(_QWORD *)v233 + 4) & 2) != 0)
                  {
                    v233 += 8;
                    v234 -= 8;
                    if (!v234)
                      goto LABEL_213;
                  }
                  v172 = &v266;
LABEL_214:
                  *v172 |= 2u;
                }
              }
            }
LABEL_18:
            if (*v19)
            {
              if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
              {
                v22 = *((_QWORD *)v264 + 2);
                if ((v22 & 0x1000000000000) != 0)
                {
                  v165 = v22 & 0xFFFFFFFFFFFFLL;
                  v166 = *(unsigned int *)(v165 + 28);
                  if ((_DWORD)v166)
                  {
                    v167 = *(_QWORD *)(v165 + 16);
                    v168 = v259[260];
                    v169 = 32 * v166;
                    v170 = v169;
                    v171 = (_QWORD *)v167;
                    while (*v171 != v168)
                    {
                      v171 += 4;
                      v170 -= 32;
                      if (!v170)
                        goto LABEL_21;
                    }
                    while (*(_QWORD *)v167 != v168)
                    {
                      v167 += 32;
                      v169 -= 32;
                      if (!v169)
                        goto LABEL_222;
                    }
                    v240 = *(unsigned int *)(v167 + 20);
                    if (!(_DWORD)v240)
                    {
LABEL_222:
                      v180 = &v265;
                      goto LABEL_223;
                    }
                    v241 = *(_QWORD *)(v167 + 8);
                    v242 = 8 * v240;
                    while ((*(_BYTE *)(*(_QWORD *)v241 + 4) & 2) != 0)
                    {
                      v241 += 8;
                      v242 -= 8;
                      if (!v242)
                        goto LABEL_222;
                    }
                    v180 = &v266;
LABEL_223:
                    *v180 |= 4u;
                  }
                }
              }
LABEL_21:
              if (*v19)
              {
                if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
                {
                  v23 = *((_QWORD *)v264 + 2);
                  if ((v23 & 0x1000000000000) != 0)
                  {
                    v173 = v23 & 0xFFFFFFFFFFFFLL;
                    v174 = *(unsigned int *)(v173 + 28);
                    if ((_DWORD)v174)
                    {
                      v175 = *(_QWORD *)(v173 + 16);
                      v176 = v259[261];
                      v177 = 32 * v174;
                      v178 = v177;
                      v179 = (_QWORD *)v175;
                      while (*v179 != v176)
                      {
                        v179 += 4;
                        v178 -= 32;
                        if (!v178)
                          goto LABEL_24;
                      }
                      while (*(_QWORD *)v175 != v176)
                      {
                        v175 += 32;
                        v177 -= 32;
                        if (!v177)
                          goto LABEL_237;
                      }
                      v244 = *(unsigned int *)(v175 + 20);
                      if (!(_DWORD)v244)
                      {
LABEL_237:
                        v185 = &v265;
                        goto LABEL_238;
                      }
                      v245 = *(_QWORD *)(v175 + 8);
                      v246 = 8 * v244;
                      while ((*(_BYTE *)(*(_QWORD *)v245 + 4) & 2) != 0)
                      {
                        v245 += 8;
                        v246 -= 8;
                        if (!v246)
                          goto LABEL_237;
                      }
                      v185 = &v266;
LABEL_238:
                      *v185 |= 8u;
                    }
                  }
                }
LABEL_24:
                if (*v19)
                {
                  if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
                  {
                    v24 = v264;
                    v25 = *((_QWORD *)v264 + 2);
                    if ((v25 & 0x1000000000000) != 0)
                    {
                      v181 = v25 & 0xFFFFFFFFFFFFLL;
                      v182 = *(unsigned int *)(v181 + 28);
                      if ((_DWORD)v182)
                      {
                        v183 = *(_QWORD **)(v181 + 16);
                        v184 = 32 * v182;
                        while (*v183 != v259[193])
                        {
                          v183 += 4;
                          v184 -= 32;
                          if (!v184)
                            goto LABEL_27;
                        }
                        v215 = (WebCore::Quirks *)a1[86];
                        if (!v215)
                          v215 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                        WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v215, v24);
                        v265 |= 0x10u;
                      }
                    }
                  }
LABEL_27:
                  if (*v19)
                  {
                    if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
                    {
                      v26 = v264;
                      v27 = *((_QWORD *)v264 + 2);
                      if ((v27 & 0x1000000000000) != 0)
                      {
                        v186 = v27 & 0xFFFFFFFFFFFFLL;
                        v187 = *(unsigned int *)(v186 + 28);
                        if ((_DWORD)v187)
                        {
                          v188 = *(_QWORD **)(v186 + 16);
                          v189 = 32 * v187;
                          while (*v188 != v259[187])
                          {
                            v188 += 4;
                            v189 -= 32;
                            if (!v189)
                              goto LABEL_30;
                          }
                          v227 = (WebCore::Quirks *)a1[86];
                          if (!v227)
                            v227 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                          WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v227, v26);
                          v265 |= 0x20u;
                        }
                      }
                    }
LABEL_30:
                    if (*v19)
                    {
                      if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
                      {
                        v28 = v264;
                        v29 = *((_QWORD *)v264 + 2);
                        if ((v29 & 0x1000000000000) != 0)
                        {
                          v193 = v29 & 0xFFFFFFFFFFFFLL;
                          v194 = *(unsigned int *)(v193 + 28);
                          if ((_DWORD)v194)
                          {
                            v195 = *(_QWORD **)(v193 + 16);
                            v196 = 32 * v194;
                            while (*v195 != v259[186])
                            {
                              v195 += 4;
                              v196 -= 32;
                              if (!v196)
                                goto LABEL_33;
                            }
                            v239 = (WebCore::Quirks *)a1[86];
                            if (!v239)
                              v239 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                            WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v239, v28);
                            v265 |= 0x40u;
                          }
                        }
                      }
LABEL_33:
                      if (*v19)
                      {
                        if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
                        {
                          v30 = v264;
                          v31 = *((_QWORD *)v264 + 2);
                          if ((v31 & 0x1000000000000) != 0)
                          {
                            v200 = v31 & 0xFFFFFFFFFFFFLL;
                            v201 = *(unsigned int *)(v200 + 28);
                            if ((_DWORD)v201)
                            {
                              v202 = *(_QWORD **)(v200 + 16);
                              v203 = 32 * v201;
                              while (*v202 != v259[191])
                              {
                                v202 += 4;
                                v203 -= 32;
                                if (!v203)
                                  goto LABEL_36;
                              }
                              v243 = (WebCore::Quirks *)a1[86];
                              if (!v243)
                                v243 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                              WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v243, v30);
                              v265 |= 0x80u;
                            }
                          }
                        }
LABEL_36:
                        if (*v19)
                        {
                          if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
                          {
                            v32 = v264;
                            v33 = *((_QWORD *)v264 + 2);
                            if ((v33 & 0x1000000000000) != 0)
                            {
                              v207 = v33 & 0xFFFFFFFFFFFFLL;
                              v208 = *(unsigned int *)(v207 + 28);
                              if ((_DWORD)v208)
                              {
                                v209 = *(_QWORD **)(v207 + 16);
                                v210 = 32 * v208;
                                while (*v209 != v259[194])
                                {
                                  v209 += 4;
                                  v210 -= 32;
                                  if (!v210)
                                    goto LABEL_39;
                                }
                                v247 = (WebCore::Quirks *)a1[86];
                                if (!v247)
                                  v247 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                                WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v247, v32);
                                v265 |= 0x100u;
                              }
                            }
                          }
LABEL_39:
                          if (*v19)
                          {
                            if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
                            {
                              v34 = v264;
                              v35 = *((_QWORD *)v264 + 2);
                              if ((v35 & 0x1000000000000) != 0)
                              {
                                v216 = v35 & 0xFFFFFFFFFFFFLL;
                                v217 = *(unsigned int *)(v216 + 28);
                                if ((_DWORD)v217)
                                {
                                  v218 = *(_QWORD **)(v216 + 16);
                                  v219 = 32 * v217;
                                  while (*v218 != v259[192])
                                  {
                                    v218 += 4;
                                    v219 -= 32;
                                    if (!v219)
                                      goto LABEL_42;
                                  }
                                  v251 = (WebCore::Quirks *)a1[86];
                                  if (!v251)
                                    v251 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                                  WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v251, v34);
                                  v265 |= 0x200u;
                                }
                              }
                            }
LABEL_42:
                            if (*v19)
                            {
                              if (WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264))
                              {
                                v36 = v264;
                                v37 = *((_QWORD *)v264 + 2);
                                if ((v37 & 0x1000000000000) != 0)
                                {
                                  v228 = v37 & 0xFFFFFFFFFFFFLL;
                                  v229 = *(unsigned int *)(v228 + 28);
                                  if ((_DWORD)v229)
                                  {
                                    v230 = *(_QWORD **)(v228 + 16);
                                    v231 = 32 * v229;
                                    while (*v230 != v259[188])
                                    {
                                      v230 += 4;
                                      v231 -= 32;
                                      if (!v231)
                                        goto LABEL_45;
                                    }
                                    v255 = (WebCore::Quirks *)a1[86];
                                    if (!v255)
                                      v255 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                                    WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v255, v36);
                                    v265 |= 0x10000u;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_45:
        v38 = (WebCore::Quirks *)a1[86];
        if (!v38)
          v38 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
        result = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v38, v264);
        if ((_DWORD)result && *v19)
        {
          result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264);
          if (result)
          {
            v39 = v264;
            v40 = *((_QWORD *)v264 + 2);
            if ((v40 & 0x1000000000000) != 0)
            {
              v149 = v40 & 0xFFFFFFFFFFFFLL;
              v150 = *(unsigned int *)(v149 + 28);
              if ((_DWORD)v150)
              {
                v151 = *(_QWORD **)(v149 + 16);
                v152 = 32 * v150;
                while (*v151 != v259[151])
                {
                  v151 += 4;
                  v152 -= 32;
                  if (!v152)
                    goto LABEL_51;
                }
                v190 = (WebCore::Quirks *)a1[86];
                if (!v190)
                  v190 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                result = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v190, v39);
                if (!(_DWORD)result)
                  goto LABEL_248;
                v191 = *((_QWORD *)v264 + 2);
                if ((v191 & 0x1000000000000) == 0)
                  goto LABEL_248;
                v211 = v191 & 0xFFFFFFFFFFFFLL;
                v212 = *(unsigned int *)((v191 & 0xFFFFFFFFFFFFLL) + 0x1C);
                if (!(_DWORD)v212)
                  goto LABEL_248;
                v213 = *(_QWORD *)(v211 + 16);
                v214 = 32 * v212;
                while (*(_QWORD *)v213 != v259[151])
                {
                  v213 += 32;
                  v192 = &v265;
                  v214 -= 32;
                  if (!v214)
                    goto LABEL_249;
                }
                v248 = *(unsigned int *)(v213 + 20);
                if ((_DWORD)v248)
                {
                  v249 = *(_QWORD *)(v213 + 8);
                  v250 = 8 * v248;
                  while ((*(_BYTE *)(*(_QWORD *)v249 + 4) & 2) != 0)
                  {
                    v249 += 8;
                    v192 = &v265;
                    v250 -= 8;
                    if (!v250)
                      goto LABEL_249;
                  }
                  v192 = &v266;
                }
                else
                {
LABEL_248:
                  v192 = &v265;
                }
LABEL_249:
                *v192 |= 0x20000u;
              }
            }
          }
LABEL_51:
          if (*v19)
          {
            result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264);
            if (result)
            {
              v41 = v264;
              v42 = *((_QWORD *)v264 + 2);
              if ((v42 & 0x1000000000000) != 0)
              {
                v160 = v42 & 0xFFFFFFFFFFFFLL;
                v161 = *(unsigned int *)(v160 + 28);
                if ((_DWORD)v161)
                {
                  v162 = *(_QWORD **)(v160 + 16);
                  v163 = 32 * v161;
                  while (*v162 != v259[154])
                  {
                    v162 += 4;
                    v163 -= 32;
                    if (!v163)
                      goto LABEL_54;
                  }
                  v197 = (WebCore::Quirks *)a1[86];
                  if (!v197)
                    v197 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                  result = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v197, v41);
                  if (!(_DWORD)result)
                    goto LABEL_259;
                  v198 = *((_QWORD *)v264 + 2);
                  if ((v198 & 0x1000000000000) == 0)
                    goto LABEL_259;
                  v223 = v198 & 0xFFFFFFFFFFFFLL;
                  v224 = *(unsigned int *)((v198 & 0xFFFFFFFFFFFFLL) + 0x1C);
                  if (!(_DWORD)v224)
                    goto LABEL_259;
                  v225 = *(_QWORD *)(v223 + 16);
                  v226 = 32 * v224;
                  while (*(_QWORD *)v225 != v259[154])
                  {
                    v225 += 32;
                    v199 = &v265;
                    v226 -= 32;
                    if (!v226)
                      goto LABEL_260;
                  }
                  v252 = *(unsigned int *)(v225 + 20);
                  if ((_DWORD)v252)
                  {
                    v253 = *(_QWORD *)(v225 + 8);
                    v254 = 8 * v252;
                    while ((*(_BYTE *)(*(_QWORD *)v253 + 4) & 2) != 0)
                    {
                      v253 += 8;
                      v199 = &v265;
                      v254 -= 8;
                      if (!v254)
                        goto LABEL_260;
                    }
                    v199 = &v266;
                  }
                  else
                  {
LABEL_259:
                    v199 = &v265;
                  }
LABEL_260:
                  *v199 |= 0x40000u;
                }
              }
            }
LABEL_54:
            if (*v19)
            {
              result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(a1 + 78, &v264);
              if (result)
              {
                v43 = v264;
                v44 = *((_QWORD *)v264 + 2);
                if ((v44 & 0x1000000000000) != 0)
                {
                  v45 = v44 & 0xFFFFFFFFFFFFLL;
                  v46 = *(unsigned int *)(v45 + 28);
                  if ((_DWORD)v46)
                  {
                    v47 = *(_QWORD **)(v45 + 16);
                    v48 = 32 * v46;
                    while (*v47 != v259[157])
                    {
                      v47 += 4;
                      v48 -= 32;
                      if (!v48)
                        goto LABEL_63;
                    }
                    v204 = (WebCore::Quirks *)a1[86];
                    if (!v204)
                      v204 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
                    result = WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v204, v43);
                    if (!(_DWORD)result)
                      goto LABEL_270;
                    v205 = *((_QWORD *)v264 + 2);
                    if ((v205 & 0x1000000000000) == 0)
                      goto LABEL_270;
                    v235 = v205 & 0xFFFFFFFFFFFFLL;
                    v236 = *(unsigned int *)((v205 & 0xFFFFFFFFFFFFLL) + 0x1C);
                    if (!(_DWORD)v236)
                      goto LABEL_270;
                    v237 = *(_QWORD *)(v235 + 16);
                    v238 = 32 * v236;
                    while (*(_QWORD *)v237 != v259[157])
                    {
                      v237 += 32;
                      v206 = &v265;
                      v238 -= 32;
                      if (!v238)
                        goto LABEL_271;
                    }
                    v256 = *(unsigned int *)(v237 + 20);
                    if ((_DWORD)v256)
                    {
                      v257 = *(_QWORD *)(v237 + 8);
                      v258 = 8 * v256;
                      while ((*(_BYTE *)(*(_QWORD *)v257 + 4) & 2) != 0)
                      {
                        v257 += 8;
                        v206 = &v265;
                        v258 -= 8;
                        if (!v258)
                          goto LABEL_271;
                      }
                      v206 = &v266;
                    }
                    else
                    {
LABEL_270:
                      v206 = &v265;
                    }
LABEL_271:
                    *v206 |= 0x80000u;
                  }
                }
              }
            }
          }
        }
        goto LABEL_63;
      }
LABEL_179:
      v141 = *(unsigned int *)(v17 + 47);
      if (v141 | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32))
      {
        v17 = *(_QWORD *)((v141 | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32)) + 8);
        if (v17)
          continue;
      }
      return result;
    }
    v264 = 0;
LABEL_63:
    v49 = v266 | a5;
    v50 = (v265 | a6) & ~(v266 | a5);
    v51 = v266 == (v266 | a5) && v265 == v50;
    if (!v51)
    {
      v52 = a6;
      v53 = v18;
      v260 = a5;
      v51 = v49 == a5;
      v54 = v52;
      v55 = v51 && v50 == (_DWORD)v52;
      v56 = v55;
      if (!v55)
        goto LABEL_83;
      v57 = *(_DWORD *)(v17 + 20);
      if ((v57 & 0x800) != 0 || (v57 & 0x1800000) == 0x1000000)
        goto LABEL_83;
      if ((v57 & 0x20000) == 0)
        goto LABEL_78;
      v59 = v17;
      if ((*(_BYTE *)(v17 + 45) & 2) != 0)
        v59 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8);
      v60 = *(_QWORD *)(v59 + 88);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 32) + 40) + 20)
        || (v61 = *(_QWORD **)(v60 + 40), v61[41])
        || v61[38]
        || v61[39]
        || v61[40]
        || (v57 & 0x100000) != 0)
      {
LABEL_83:
        result = WebCore::eventRectRelativeToRoot(v264, (WebCore::RenderLayer **)v17, v16);
        v64 = a3[1];
        if ((int)result <= *a3)
          v65 = *a3;
        else
          v65 = result;
        v66 = a3[2] + *a3;
        if (SHIDWORD(result) <= v64)
          v67 = a3[1];
        else
          v67 = HIDWORD(result);
        if (v66 >= v62 + (int)result)
          v66 = v62 + result;
        v68 = a3[3] + v64;
        if (v68 >= v63 + HIDWORD(result))
          v68 = v63 + HIDWORD(result);
        if (v65 >= v66 || v67 >= v68)
        {
          v65 = 0;
          v67 = 0;
          v66 = 0;
          v68 = 0;
        }
        *(_QWORD *)&v263 = __PAIR64__(v67, v65);
        DWORD2(v263) = v66 - v65;
        HIDWORD(v263) = v68 - v67;
        if (v66 - v65 < 1 || v68 - v67 < 1)
        {
          v18 = v53;
        }
        else
        {
          if (v56
            && *(_DWORD *)a4 <= v65
            && *((_DWORD *)a4 + 2) + *(_DWORD *)a4 >= v66
            && (v69 = *((_DWORD *)a4 + 1), v69 <= v67)
            && *((_DWORD *)a4 + 3) + v69 >= v68)
          {
            v263 = *a4;
            v18 = v53;
          }
          else
          {
            if (((v49 | v50) & 1) != 0)
            {
              v262[0] = 14;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = v49 & 1;
              v70 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v70 == *(_DWORD *)(a7 + 8))
              {
                v71 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v70 + 1, (unint64_t)v262);
                v72 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v73 = *(_OWORD *)v71;
                v74 = *((_QWORD *)v71 + 2);
              }
              else
              {
                v72 = *(_QWORD *)a7 + 24 * v70;
                v73 = *(_OWORD *)v262;
                v74 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v72 + 16) = v74;
              *(_OWORD *)v72 = v73;
              ++*(_DWORD *)(a7 + 12);
            }
            if (((v49 | v50) & 2) != 0)
            {
              v262[0] = 13;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (v49 & 2) >> 1;
              v75 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v75 == *(_DWORD *)(a7 + 8))
              {
                v76 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v75 + 1, (unint64_t)v262);
                v77 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v78 = *(_OWORD *)v76;
                v79 = *((_QWORD *)v76 + 2);
              }
              else
              {
                v77 = *(_QWORD *)a7 + 24 * v75;
                v78 = *(_OWORD *)v262;
                v79 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v77 + 16) = v79;
              *(_OWORD *)v77 = v78;
              ++*(_DWORD *)(a7 + 12);
            }
            if (((v49 | v50) & 4) != 0)
            {
              v262[0] = 11;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (v49 & 4) >> 2;
              v80 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v80 == *(_DWORD *)(a7 + 8))
              {
                v81 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v80 + 1, (unint64_t)v262);
                v82 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v83 = *(_OWORD *)v81;
                v84 = *((_QWORD *)v81 + 2);
              }
              else
              {
                v82 = *(_QWORD *)a7 + 24 * v80;
                v83 = *(_OWORD *)v262;
                v84 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v82 + 16) = v84;
              *(_OWORD *)v82 = v83;
              ++*(_DWORD *)(a7 + 12);
            }
            if (((v49 | v50) & 8) != 0)
            {
              v262[0] = 12;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (v49 & 8) >> 3;
              v85 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v85 == *(_DWORD *)(a7 + 8))
              {
                v86 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v85 + 1, (unint64_t)v262);
                v87 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v88 = *(_OWORD *)v86;
                v89 = *((_QWORD *)v86 + 2);
              }
              else
              {
                v87 = *(_QWORD *)a7 + 24 * v85;
                v88 = *(_OWORD *)v262;
                v89 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v87 + 16) = v89;
              *(_OWORD *)v87 = v88;
              ++*(_DWORD *)(a7 + 12);
            }
            if (((v49 | v50) & 0x10) != 0)
            {
              v262[0] = 9;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (v49 & 0x10) >> 4;
              v90 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v90 == *(_DWORD *)(a7 + 8))
              {
                v91 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v90 + 1, (unint64_t)v262);
                v92 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v93 = *(_OWORD *)v91;
                v94 = *((_QWORD *)v91 + 2);
              }
              else
              {
                v92 = *(_QWORD *)a7 + 24 * v90;
                v93 = *(_OWORD *)v262;
                v94 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v92 + 16) = v94;
              *(_OWORD *)v92 = v93;
              ++*(_DWORD *)(a7 + 12);
            }
            if (((v49 | v50) & 0x20) != 0)
            {
              v262[0] = 5;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (v49 & 0x20) >> 5;
              v95 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v95 == *(_DWORD *)(a7 + 8))
              {
                v96 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v95 + 1, (unint64_t)v262);
                v97 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v98 = *(_OWORD *)v96;
                v99 = *((_QWORD *)v96 + 2);
              }
              else
              {
                v97 = *(_QWORD *)a7 + 24 * v95;
                v98 = *(_OWORD *)v262;
                v99 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v97 + 16) = v99;
              *(_OWORD *)v97 = v98;
              ++*(_DWORD *)(a7 + 12);
            }
            if (((v49 | v50) & 0x40) != 0)
            {
              v262[0] = 4;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (v49 & 0x40) >> 6;
              v100 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v100 == *(_DWORD *)(a7 + 8))
              {
                v101 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v100 + 1, (unint64_t)v262);
                v102 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v103 = *(_OWORD *)v101;
                v104 = *((_QWORD *)v101 + 2);
              }
              else
              {
                v102 = *(_QWORD *)a7 + 24 * v100;
                v103 = *(_OWORD *)v262;
                v104 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v102 + 16) = v104;
              *(_OWORD *)v102 = v103;
              ++*(_DWORD *)(a7 + 12);
            }
            if (((v49 | v50) & 0x80) != 0)
            {
              v262[0] = 7;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (v49 & 0x80) != 0;
              v105 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v105 == *(_DWORD *)(a7 + 8))
              {
                v106 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v105 + 1, (unint64_t)v262);
                v107 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v108 = *(_OWORD *)v106;
                v109 = *((_QWORD *)v106 + 2);
              }
              else
              {
                v107 = *(_QWORD *)a7 + 24 * v105;
                v108 = *(_OWORD *)v262;
                v109 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v107 + 16) = v109;
              *(_OWORD *)v107 = v108;
              ++*(_DWORD *)(a7 + 12);
            }
            if ((((unsigned __int16)v49 | (unsigned __int16)v50) & 0x100) != 0)
            {
              v262[0] = 10;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (unsigned __int16)(v49 & 0x100) >> 8;
              v110 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v110 == *(_DWORD *)(a7 + 8))
              {
                v111 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v110 + 1, (unint64_t)v262);
                v112 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v113 = *(_OWORD *)v111;
                v114 = *((_QWORD *)v111 + 2);
              }
              else
              {
                v112 = *(_QWORD *)a7 + 24 * v110;
                v113 = *(_OWORD *)v262;
                v114 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v112 + 16) = v114;
              *(_OWORD *)v112 = v113;
              ++*(_DWORD *)(a7 + 12);
            }
            if ((((unsigned __int16)v49 | (unsigned __int16)v50) & 0x200) != 0)
            {
              v262[0] = 8;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (unsigned __int16)(v49 & 0x200) >> 9;
              v115 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v115 == *(_DWORD *)(a7 + 8))
              {
                v116 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v115 + 1, (unint64_t)v262);
                v117 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v118 = *(_OWORD *)v116;
                v119 = *((_QWORD *)v116 + 2);
              }
              else
              {
                v117 = *(_QWORD *)a7 + 24 * v115;
                v118 = *(_OWORD *)v262;
                v119 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v117 + 16) = v119;
              *(_OWORD *)v117 = v118;
              ++*(_DWORD *)(a7 + 12);
            }
            v18 = v53;
            if (((v49 | v50) & 0x10000) != 0)
            {
              v262[0] = 6;
              *(_OWORD *)&v262[4] = v263;
              v262[20] = (v49 & 0x10000u) >> 16;
              v120 = *(unsigned int *)(a7 + 12);
              if ((_DWORD)v120 == *(_DWORD *)(a7 + 8))
              {
                v121 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v120 + 1, (unint64_t)v262);
                v122 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                v123 = *(_OWORD *)v121;
                v124 = *((_QWORD *)v121 + 2);
              }
              else
              {
                v122 = *(_QWORD *)a7 + 24 * v120;
                v123 = *(_OWORD *)v262;
                v124 = *(_QWORD *)&v262[16];
              }
              *(_QWORD *)(v122 + 16) = v124;
              *(_OWORD *)v122 = v123;
              ++*(_DWORD *)(a7 + 12);
            }
            v125 = (WebCore::Quirks *)a1[86];
            if (!v125)
              v125 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)a1);
            if (WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v125, v264))
            {
              if (((v49 | v50) & 0x20000) != 0)
              {
                v262[0] = 0;
                *(_OWORD *)&v262[4] = v263;
                v262[20] = (v49 & 0x20000u) >> 17;
                v126 = *(unsigned int *)(a7 + 12);
                if ((_DWORD)v126 == *(_DWORD *)(a7 + 8))
                {
                  v127 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v126 + 1, (unint64_t)v262);
                  v128 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                  v129 = *(_OWORD *)v127;
                  v130 = *((_QWORD *)v127 + 2);
                }
                else
                {
                  v128 = *(_QWORD *)a7 + 24 * v126;
                  v129 = *(_OWORD *)v262;
                  v130 = *(_QWORD *)&v262[16];
                }
                *(_QWORD *)(v128 + 16) = v130;
                *(_OWORD *)v128 = v129;
                ++*(_DWORD *)(a7 + 12);
              }
              if (((v49 | v50) & 0x40000) != 0)
              {
                v262[0] = 1;
                *(_OWORD *)&v262[4] = v263;
                v262[20] = (v49 & 0x40000u) >> 18;
                v131 = *(unsigned int *)(a7 + 12);
                if ((_DWORD)v131 == *(_DWORD *)(a7 + 8))
                {
                  v132 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v131 + 1, (unint64_t)v262);
                  v133 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                  v134 = *(_OWORD *)v132;
                  v135 = *((_QWORD *)v132 + 2);
                }
                else
                {
                  v133 = *(_QWORD *)a7 + 24 * v131;
                  v134 = *(_OWORD *)v262;
                  v135 = *(_QWORD *)&v262[16];
                }
                *(_QWORD *)(v133 + 16) = v135;
                *(_OWORD *)v133 = v134;
                ++*(_DWORD *)(a7 + 12);
              }
              v18 = v53;
              if (((v49 | v50) & 0x80000) != 0)
              {
                v262[0] = 2;
                *(_OWORD *)&v262[4] = v263;
                v262[20] = (v49 & 0x80000u) >> 19;
                v136 = *(unsigned int *)(a7 + 12);
                if ((_DWORD)v136 == *(_DWORD *)(a7 + 8))
                {
                  v137 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v136 + 1, (unint64_t)v262);
                  v138 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 12);
                  v139 = *(_OWORD *)v137;
                  v140 = *((_QWORD *)v137 + 2);
                }
                else
                {
                  v138 = *(_QWORD *)a7 + 24 * v136;
                  v139 = *(_OWORD *)v262;
                  v140 = *(_QWORD *)&v262[16];
                }
                *(_QWORD *)(v138 + 16) = v140;
                *(_OWORD *)v138 = v139;
                ++*(_DWORD *)(a7 + 12);
              }
            }
          }
          result = WebCore::Document::collectTouchEventRectsForChildRenderers(a1, v17, a3, &v263);
        }
        a6 = v54;
        a5 = v260;
      }
      else
      {
LABEL_78:
        v58 = v54;
        a5 = v260;
        result = WebCore::Document::collectTouchEventRectsForChildRenderers(a1, v17, a3, a4);
        v18 = v53;
        a6 = v58;
      }
    }
    goto LABEL_179;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ~(*a2 << 32) + *a2;
    v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == *a2)
      return v2 + 16 * v7;
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2)
        return v2 + 16 * v7;
    }
  }
  return 0;
}

uint64_t WebCore::RenderElement::firstChildSlow(WebCore::RenderElement *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 16);
  if (v1 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    return *(_QWORD *)((v1 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  else
    return 0;
}

uint64_t WebCore::Quirks::shouldDispatchSimulatedMouseEvents(WebCore::Quirks *this, const WebCore::EventTarget *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::URL *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  const WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const WebCore::EventTarget *v34;
  WebCore::Element **v35;
  uint64_t v36;
  WTF::String *v37;
  __n128 v38;
  BOOL v39;
  WTF::StringImpl *v40;
  BOOL v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  const WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  char v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  const WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  char v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  const WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  char v73;
  WTF::StringImpl *v74;
  uint16x8_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  const WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  char v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  const WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint16x8_t v111;
  uint16x8_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  int16x8_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint16x8_t v128;
  uint16x8_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint16x8_t v134;
  WTF::StringImpl *v136;
  uint64_t v137;
  WTF::StringImpl *v138;

  if (!*(_QWORD *)this)
    return HIWORD(*(_QWORD *)(MEMORY[0x2A8] + 712)) & 1;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = *(_QWORD *)(v2 + 680);
  if ((*(_QWORD *)(v3 + 712) & 0x1000000000000) != 0)
    return 1;
  if (!*(_BYTE *)(v3 + 243))
  {
    if ((*(_QWORD *)(v3 + 688) & 0x80000) != 0)
      goto LABEL_5;
    return 0;
  }
  if (!*(_BYTE *)(v3 + 242))
    return 0;
LABEL_5:
  v6 = *((_BYTE *)this + 24);
  if (!v6)
  {
    v7 = *(_QWORD *)(v2 + 528);
    if (!v7)
      goto LABEL_67;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      goto LABEL_67;
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
    if (!v9 || *(_QWORD *)(v8 + 296) != v2 || *(_BYTE *)(v9 + 3525) != 1)
      goto LABEL_67;
    if ((WebCore::Quirks::isAmazon(this) & 1) != 0 || WebCore::Quirks::isGoogleMaps(this))
      goto LABEL_13;
    v11 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v11 = *(_QWORD *)(v11 + 8);
    if (*(_BYTE *)(v11 + 3362) || *(_BYTE *)(v11 + 3405))
    {
      while (1)
      {
        v99 = *(_QWORD *)(v11 + 528);
        if (!v99)
          break;
        v100 = *(_QWORD *)(v99 + 8);
        if (!v100)
          break;
        v101 = *(_QWORD *)(v100 + 120);
        if (!v101)
          break;
        v102 = *(_QWORD *)(v101 + 8);
        if (!v102)
          break;
        v11 = *(_QWORD *)(*(_QWORD *)(v102 + 40) + 8);
      }
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 528);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8);
          if (v14)
          {
            if (!*(_BYTE *)(v14 + 144))
            {
              v15 = *(_QWORD *)(v14 + 296);
              if (v15)
                v11 = v15;
            }
          }
        }
      }
    }
    v16 = (WTF::URL *)(v11 + 736);
    v17 = (const char *)WTF::URL::host((WTF::URL *)(v11 + 736));
    v19 = v18;
    v136 = (WTF::StringImpl *)v17;
    v137 = v18;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = v138;
    v21 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v21 = *(_QWORD *)(v21 + 8);
    if (*(_BYTE *)(v21 + 3362) || *(_BYTE *)(v21 + 3405))
    {
      while (1)
      {
        v103 = *(_QWORD *)(v21 + 528);
        if (!v103)
          break;
        v104 = *(_QWORD *)(v103 + 8);
        if (!v104)
          break;
        v105 = *(_QWORD *)(v104 + 120);
        if (!v105)
          break;
        v106 = *(_QWORD *)(v105 + 8);
        if (!v106)
          break;
        v21 = *(_QWORD *)(*(_QWORD *)(v106 + 40) + 8);
      }
    }
    else
    {
      v22 = *(_QWORD *)(v21 + 528);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v23 + 128) + 8);
          if (v24 && *(_BYTE *)(v24 + 144) == 0)
          {
            v26 = *(_QWORD *)(v24 + 296);
            if (v26)
              v21 = v26;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v138, (const WTF::URL *)(v21 + 736));
    v29 = WTF::equal(v138, v20, v27);
    v30 = v138;
    v138 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::destroy(v30, v28);
        if (!v20)
          goto LABEL_44;
        goto LABEL_42;
      }
      *(_DWORD *)v30 -= 2;
    }
    if (!v20)
      goto LABEL_44;
LABEL_42:
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v28);
    else
      *(_DWORD *)v20 -= 2;
LABEL_44:
    if (v29)
    {
      v31 = WTF::URL::path(v16);
      if (v32 >= 0x13uLL)
      {
        if ((v32 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)v31 & 0xDF) != 0xF
            || (*(_BYTE *)(v31 + 1) & 0xDF) != 0x57
            || (*(_BYTE *)(v31 + 2) & 0xDF) != 0x45
            || (*(_BYTE *)(v31 + 3) & 0xDF) != 0x42
            || (*(_BYTE *)(v31 + 4) & 0xDF) != 0x53
            || (*(_BYTE *)(v31 + 5) & 0xDF) != 0x49
            || (*(_BYTE *)(v31 + 6) & 0xDF) != 0x54
            || (*(_BYTE *)(v31 + 7) & 0xDF) != 0x45
            || (*(_BYTE *)(v31 + 8) & 0xDF) != 0xF
            || (*(_BYTE *)(v31 + 9) & 0xDF) != 0x54
            || (*(_BYTE *)(v31 + 10) & 0xDF) != 0x45
            || (*(_BYTE *)(v31 + 11) & 0xDF) != 0x4D
            || (*(_BYTE *)(v31 + 12) & 0xDF) != 0x50
            || (*(_BYTE *)(v31 + 13) & 0xDF) != 0x4C
            || (*(_BYTE *)(v31 + 14) & 0xDF) != 0x41
            || (*(_BYTE *)(v31 + 15) & 0xDF) != 0x54
            || (*(_BYTE *)(v31 + 16) & 0xDF) != 0x45
            || (*(_BYTE *)(v31 + 17) & 0xDF) != 0x53)
          {
            goto LABEL_13;
          }
          v33 = *(unsigned __int8 *)(v31 + 18);
        }
        else
        {
          if ((*(_WORD *)v31 & 0xFFDF) != 0xF
            || (*(_WORD *)(v31 + 2) & 0xFFDF) != 0x57
            || (*(_WORD *)(v31 + 4) & 0xFFDF) != 0x45
            || (*(_WORD *)(v31 + 6) & 0xFFDF) != 0x42
            || (*(_WORD *)(v31 + 8) & 0xFFDF) != 0x53
            || (*(_WORD *)(v31 + 10) & 0xFFDF) != 0x49
            || (*(_WORD *)(v31 + 12) & 0xFFDF) != 0x54
            || (*(_WORD *)(v31 + 14) & 0xFFDF) != 0x45
            || (*(_WORD *)(v31 + 16) & 0xFFDF) != 0xF
            || (*(_WORD *)(v31 + 18) & 0xFFDF) != 0x54
            || (*(_WORD *)(v31 + 20) & 0xFFDF) != 0x45
            || (*(_WORD *)(v31 + 22) & 0xFFDF) != 0x4D
            || (*(_WORD *)(v31 + 24) & 0xFFDF) != 0x50
            || (*(_WORD *)(v31 + 26) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v31 + 28) & 0xFFDF) != 0x41
            || (*(_WORD *)(v31 + 30) & 0xFFDF) != 0x54
            || (*(_WORD *)(v31 + 32) & 0xFFDF) != 0x45
            || (*(_WORD *)(v31 + 34) & 0xFFDF) != 0x53)
          {
            goto LABEL_13;
          }
          v33 = *(unsigned __int16 *)(v31 + 36);
        }
        if ((v33 & 0xFFFFFFDF) == 0xF)
          goto LABEL_67;
      }
LABEL_13:
      v6 = 3;
LABEL_68:
      *((_BYTE *)this + 24) = v6;
      goto LABEL_69;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v42 = v138;
    v43 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v43 = *(_QWORD *)(v43 + 8);
    if (*(_BYTE *)(v43 + 3362) || *(_BYTE *)(v43 + 3405))
    {
      while (1)
      {
        v107 = *(_QWORD *)(v43 + 528);
        if (!v107)
          break;
        v108 = *(_QWORD *)(v107 + 8);
        if (!v108)
          break;
        v109 = *(_QWORD *)(v108 + 120);
        if (!v109)
          break;
        v110 = *(_QWORD *)(v109 + 8);
        if (!v110)
          break;
        v43 = *(_QWORD *)(*(_QWORD *)(v110 + 40) + 8);
      }
    }
    else
    {
      v44 = *(_QWORD *)(v43 + 528);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 8);
        if (v45)
        {
          v46 = *(_QWORD *)(*(_QWORD *)(v45 + 128) + 8);
          if (v46 && *(_BYTE *)(v46 + 144) == 0)
          {
            v48 = *(_QWORD *)(v46 + 296);
            if (v48)
              v43 = v48;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v138, (const WTF::URL *)(v43 + 736));
    v51 = WTF::equal(v138, v42, v49);
    v52 = v138;
    v138 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::destroy(v52, v50);
        if (!v42)
          goto LABEL_111;
        goto LABEL_109;
      }
      *(_DWORD *)v52 -= 2;
    }
    if (!v42)
      goto LABEL_111;
LABEL_109:
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v50);
    else
      *(_DWORD *)v42 -= 2;
LABEL_111:
    if ((v51 & 1) != 0)
      goto LABEL_13;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v53 = v138;
    v54 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v54 = *(_QWORD *)(v54 + 8);
    if (*(_BYTE *)(v54 + 3362) || *(_BYTE *)(v54 + 3405))
    {
      while (1)
      {
        v113 = *(_QWORD *)(v54 + 528);
        if (!v113)
          break;
        v114 = *(_QWORD *)(v113 + 8);
        if (!v114)
          break;
        v115 = *(_QWORD *)(v114 + 120);
        if (!v115)
          break;
        v116 = *(_QWORD *)(v115 + 8);
        if (!v116)
          break;
        v54 = *(_QWORD *)(*(_QWORD *)(v116 + 40) + 8);
      }
    }
    else
    {
      v55 = *(_QWORD *)(v54 + 528);
      if (v55)
      {
        v56 = *(_QWORD *)(v55 + 8);
        if (v56)
        {
          v57 = *(_QWORD *)(*(_QWORD *)(v56 + 128) + 8);
          if (v57 && *(_BYTE *)(v57 + 144) == 0)
          {
            v59 = *(_QWORD *)(v57 + 296);
            if (v59)
              v54 = v59;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v138, (const WTF::URL *)(v54 + 736));
    v62 = WTF::equal(v138, v53, v60);
    v63 = v138;
    v138 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
      {
        WTF::StringImpl::destroy(v63, v61);
        if (!v53)
          goto LABEL_131;
        goto LABEL_129;
      }
      *(_DWORD *)v63 -= 2;
    }
    if (!v53)
      goto LABEL_131;
LABEL_129:
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v61);
    else
      *(_DWORD *)v53 -= 2;
LABEL_131:
    if ((v62 & 1) != 0)
      goto LABEL_13;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v64 = v138;
    v65 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v65 = *(_QWORD *)(v65 + 8);
    if (*(_BYTE *)(v65 + 3362) || *(_BYTE *)(v65 + 3405))
    {
      while (1)
      {
        v117 = *(_QWORD *)(v65 + 528);
        if (!v117)
          break;
        v118 = *(_QWORD *)(v117 + 8);
        if (!v118)
          break;
        v119 = *(_QWORD *)(v118 + 120);
        if (!v119)
          break;
        v120 = *(_QWORD *)(v119 + 8);
        if (!v120)
          break;
        v65 = *(_QWORD *)(*(_QWORD *)(v120 + 40) + 8);
      }
    }
    else
    {
      v66 = *(_QWORD *)(v65 + 528);
      if (v66)
      {
        v67 = *(_QWORD *)(v66 + 8);
        if (v67)
        {
          v68 = *(_QWORD *)(*(_QWORD *)(v67 + 128) + 8);
          if (v68 && *(_BYTE *)(v68 + 144) == 0)
          {
            v70 = *(_QWORD *)(v68 + 296);
            if (v70)
              v65 = v70;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v138, (const WTF::URL *)(v65 + 736));
    v73 = WTF::equal(v138, v64, v71);
    v74 = v138;
    v138 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::destroy(v74, v72);
        if (!v64)
          goto LABEL_151;
        goto LABEL_149;
      }
      *(_DWORD *)v74 -= 2;
    }
    if (!v64)
      goto LABEL_151;
LABEL_149:
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v72);
    else
      *(_DWORD *)v64 -= 2;
LABEL_151:
    if ((v73 & 1) != 0)
      goto LABEL_13;
    if (v17 == "trailers.apple.com" || (_DWORD)v19 != 18)
    {
      if (v17 == "trailers.apple.com" && (_DWORD)v19 == 18)
        goto LABEL_13;
    }
    else
    {
      if ((v19 & 0xFF00000000) != 0)
      {
        if (*v17 != 116)
          goto LABEL_169;
        v75 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v17 + 2), (int8x16_t)xmmword_1969F5B00), vceqq_s8(*(int8x16_t *)(v17 + 1), (int8x16_t)xmmword_1969F5AF0));
        v75.i8[0] = vminvq_u8((uint8x16_t)v75);
      }
      else
      {
        if (*(_WORD *)v17 != 116)
          goto LABEL_169;
        v111 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 2), (int16x8_t)xmmword_1969F5B10);
        v111.i16[0] = vminvq_u16(v111);
        if (!v111.i32[0])
          goto LABEL_169;
        v112 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 4), (int16x8_t)xmmword_1969F5B20);
        v112.i16[0] = vminvq_u16(v112);
        if (!v112.i32[0])
          goto LABEL_169;
        v75 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 20), (int16x8_t)xmmword_1968DDA70);
        v75.i16[0] = vminvq_u16(v75);
      }
      if (v75.i32[0])
        goto LABEL_13;
    }
LABEL_169:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v76 = v138;
    v77 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v77 = *(_QWORD *)(v77 + 8);
    if (*(_BYTE *)(v77 + 3362) || *(_BYTE *)(v77 + 3405))
    {
      while (1)
      {
        v124 = *(_QWORD *)(v77 + 528);
        if (!v124)
          break;
        v125 = *(_QWORD *)(v124 + 8);
        if (!v125)
          break;
        v126 = *(_QWORD *)(v125 + 120);
        if (!v126)
          break;
        v127 = *(_QWORD *)(v126 + 8);
        if (!v127)
          break;
        v77 = *(_QWORD *)(*(_QWORD *)(v127 + 40) + 8);
      }
    }
    else
    {
      v78 = *(_QWORD *)(v77 + 528);
      if (v78)
      {
        v79 = *(_QWORD *)(v78 + 8);
        if (v79)
        {
          v80 = *(_QWORD *)(*(_QWORD *)(v79 + 128) + 8);
          if (v80 && *(_BYTE *)(v80 + 144) == 0)
          {
            v82 = *(_QWORD *)(v80 + 296);
            if (v82)
              v77 = v82;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v138, (const WTF::URL *)(v77 + 736));
    v85 = WTF::equal(v138, v76, v83);
    v86 = v138;
    v138 = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
      {
        WTF::StringImpl::destroy(v86, v84);
        if (!v76)
          goto LABEL_188;
        goto LABEL_186;
      }
      *(_DWORD *)v86 -= 2;
    }
    if (!v76)
      goto LABEL_188;
LABEL_186:
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v84);
    else
      *(_DWORD *)v76 -= 2;
LABEL_188:
    if ((v85 & 1) != 0)
      goto LABEL_13;
    if (v17 == "naver.com" || (_DWORD)v19 != 9)
    {
      if (v17 == "naver.com" && (_DWORD)v19 == 9)
        goto LABEL_13;
    }
    else if ((v19 & 0xFF00000000) != 0)
    {
      if (*v17 == 110 && *(_DWORD *)(v17 + 1) == 1919252065 && *(_DWORD *)(v17 + 5) == 1836016430)
        goto LABEL_13;
    }
    else if (*(_WORD *)v17 == 110)
    {
      v121 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 2), (int16x8_t)xmmword_1969F5B30);
      v121.i16[0] = vminvq_u16(v121);
      if (v121.i32[0])
        goto LABEL_13;
    }
    if (WTF::StringView::endsWith())
    {
      if (v17 != "tv.naver.com" && (_DWORD)v137 == 12)
      {
        if ((v137 & 0xFF00000000) != 0)
        {
          if (*v17 != 116 || *(_QWORD *)(v17 + 1) != 0x2E726576616E2E76)
            goto LABEL_13;
          v87 = *(_QWORD *)(v17 + 4);
          goto LABEL_265;
        }
        if (*(_WORD *)v17 != 116)
          goto LABEL_13;
        v122 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 2), (int16x8_t)xmmword_1969F5B40);
        v122.i16[0] = vminvq_u16(v122);
        if (!v122.i32[0])
          goto LABEL_13;
        v123 = *(int16x8_t *)(v17 + 8);
LABEL_319:
        v129 = (uint16x8_t)vceqq_s16(v123, (int16x8_t)xmmword_1969F5B30);
        v129.i16[0] = vminvq_u16(v129);
        if (v129.i32[0])
          goto LABEL_67;
        goto LABEL_13;
      }
      if (v17 == "tv.naver.com" && (_DWORD)v137 == 12)
        goto LABEL_67;
      if (v17 == "mail.naver.com" || (_DWORD)v137 != 14)
      {
        if (v17 == "mail.naver.com" && (_DWORD)v137 == 14)
          goto LABEL_67;
        if (v17 == "m.naver.com" || (_DWORD)v137 != 11)
        {
          if ((_DWORD)v137 != 11 || v17 != "m.naver.com")
            goto LABEL_13;
LABEL_67:
          v6 = 1;
          goto LABEL_68;
        }
        if ((v137 & 0xFF00000000) == 0)
        {
          if (*(_WORD *)v17 != 109)
            goto LABEL_13;
          v134 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 2), (int16x8_t)xmmword_1969F5B60);
          v134.i16[0] = vminvq_u16(v134);
          if (!v134.i32[0])
            goto LABEL_13;
          v123 = *(int16x8_t *)(v17 + 6);
          goto LABEL_319;
        }
        if (*v17 != 109 || *(_QWORD *)(v17 + 1) != 0x632E726576616E2ELL)
          goto LABEL_13;
        v87 = *(_QWORD *)(v17 + 3);
      }
      else
      {
        if ((v137 & 0xFF00000000) == 0)
        {
          if (*(_WORD *)v17 != 109)
            goto LABEL_13;
          v128 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 2), (int16x8_t)xmmword_1969F5B50);
          v128.i16[0] = vminvq_u16(v128);
          if (!v128.i32[0])
            goto LABEL_13;
          v123 = *(int16x8_t *)(v17 + 12);
          goto LABEL_319;
        }
        if (*v17 != 109 || *(_QWORD *)(v17 + 1) != 0x6576616E2E6C6961)
          goto LABEL_13;
        v87 = *(_QWORD *)(v17 + 6);
      }
LABEL_265:
      if (v87 == 0x6D6F632E72657661)
        goto LABEL_67;
      goto LABEL_13;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v88 = v138;
    v89 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v89 = *(_QWORD *)(v89 + 8);
    if (*(_BYTE *)(v89 + 3362) || *(_BYTE *)(v89 + 3405))
    {
      while (1)
      {
        v130 = *(_QWORD *)(v89 + 528);
        if (!v130)
          break;
        v131 = *(_QWORD *)(v130 + 8);
        if (!v131)
          break;
        v132 = *(_QWORD *)(v131 + 120);
        if (!v132)
          break;
        v133 = *(_QWORD *)(v132 + 8);
        if (!v133)
          break;
        v89 = *(_QWORD *)(*(_QWORD *)(v133 + 40) + 8);
      }
    }
    else
    {
      v90 = *(_QWORD *)(v89 + 528);
      if (v90)
      {
        v91 = *(_QWORD *)(v90 + 8);
        if (v91)
        {
          v92 = *(_QWORD *)(*(_QWORD *)(v91 + 128) + 8);
          if (v92 && *(_BYTE *)(v92 + 144) == 0)
          {
            v94 = *(_QWORD *)(v92 + 296);
            if (v94)
              v89 = v94;
          }
        }
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v138, (const WTF::URL *)(v89 + 736));
    v97 = WTF::equal(v138, v88, v95);
    v98 = v138;
    v138 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::destroy(v98, v96);
        if (v88)
        {
LABEL_249:
          if (*(_DWORD *)v88 == 2)
            WTF::StringImpl::destroy(v88, v96);
          else
            *(_DWORD *)v88 -= 2;
        }
LABEL_251:
        if (v97)
          v6 = 2;
        else
          v6 = 1;
        goto LABEL_68;
      }
      *(_DWORD *)v98 -= 2;
    }
    if (v88)
      goto LABEL_249;
    goto LABEL_251;
  }
LABEL_69:
  if (v6 == 3)
    return 1;
  if (v6 != 2 || !a2 || (*((_QWORD *)a2 + 2) & 0x2000000000000) == 0)
    return 0;
  *((_DWORD *)a2 + 6) += 2;
  while (1)
  {
    v34 = a2;
    if ((*((_WORD *)a2 + 14) & 8) == 0)
      goto LABEL_80;
    v35 = (WebCore::Element **)WebCore::Element::classList(a2);
    WTF::AtomStringImpl::add();
    v138 = v136;
    v39 = WebCore::DOMTokenList::contains(v35, (const WTF::AtomString *)&v138, v36, v37, v38);
    v41 = v39;
    if (v136)
      break;
LABEL_79:
    if (v39)
      goto LABEL_89;
LABEL_80:
    a2 = (const WebCore::EventTarget *)*((_QWORD *)a2 + 4);
    if (a2)
      *((_DWORD *)a2 + 6) += 2;
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
    result = 0;
    if (!a2)
      return result;
  }
  if (*(_DWORD *)v136 != 2)
  {
    *(_DWORD *)v136 -= 2;
    goto LABEL_79;
  }
  WTF::StringImpl::destroy(v136, v40);
  if (!v41)
    goto LABEL_80;
LABEL_89:
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return 1;
}

uint64_t WebCore::includeNonFixedHeight(WebCore::RenderBox *this)
{
  WebCore::RenderBox *v2;
  uint64_t v3;
  float v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v2 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
  v3 = *(_QWORD *)(*((_QWORD *)v2 + 11) + 8);
  if (*(_BYTE *)(v3 + 16) != 4)
    return 1;
  if ((*((_BYTE *)this + 45) & 0x40) == 0)
    return 0;
  ++*((_DWORD *)this + 4);
  if ((*((_BYTE *)this + 22) & 8) != 0 || (*((_QWORD *)this + 12) & 0xE000) != 0)
    goto LABEL_17;
  if (*(_BYTE *)(v3 + 18))
    v4 = *(float *)(v3 + 12);
  else
    v4 = (float)*(int *)(v3 + 12);
  v6 = *((_QWORD *)this + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 4);
    v8 = *(_QWORD *)(v6 + 12);
  }
  else
  {
    v7 = WebCore::RenderBox::flippedClientBoxRect(this);
  }
  v9 = (HIDWORD(v7) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(v7), HIDWORD(v8)))
    v9 = HIDWORD(v7) + HIDWORD(v8);
  if ((float)((float)v9 * 0.015625) <= v4)
LABEL_17:
    result = 0;
  else
    result = 2;
  v10 = *((_DWORD *)this + 4);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1940E9CE4);
  }
  *((_DWORD *)this + 4) = v10 - 1;
  return result;
}

uint64_t WebCore::RenderObject::firstChildSlow(WebCore::RenderObject *this)
{
  return 0;
}

WebCore::LegacyLineLayout *WebCore::RenderBlockFlow::adjustComputedFontSizes(WebCore::LegacyLineLayout *this, float a2, float a3, uint64_t a4, const WebCore::RenderObject *a5)
{
  uint64_t v7;
  int v8;
  int v9;
  float v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::LegacyLineLayout *v16;
  float v17;
  float v18;
  int v19;
  WebCore::LegacyLineLayout *v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  BOOL v56;
  uint64_t v57;
  WebCore::TextAutoSizing *v58;
  void *v59;
  uint64_t *v60;
  WebCore::Text *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  WTF *v65;
  WTF *v66;

  if ((float)((float)*((int *)this + 40) * 0.015625) <= a3)
    return this;
  v7 = (uint64_t)this;
  v8 = *((_BYTE *)this + 204) & 3;
  if ((*((_BYTE *)this + 204) & 3) != 0)
  {
    if (v8 == 1)
      return this;
    goto LABEL_4;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0 || (*((_BYTE *)this + 120) & 0x30) != 0)
    return this;
  if ((*((_BYTE *)this + 22) & 4) != 0)
  {
    this = WebCore::RenderBlockFlow::lineCount(this);
    v63 = (int)this;
    goto LABEL_106;
  }
  v11 = *((unsigned __int8 *)this + 68);
  for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v14 + 47))
  {
    v13 = i | (v11 << 32);
    if (!v13)
      return this;
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14)
      return this;
    if (*(_BYTE *)(v14 + 46) == 19)
      break;
    v11 = *(unsigned __int8 *)(v14 + 51);
  }
  v63 = 0;
LABEL_112:
  if ((*(_BYTE *)(v14 + 22) & 4) == 0
    || (*(_BYTE *)(*(_QWORD *)(v14 + 104) + 239) & 4) != 0
    || (*(_BYTE *)(v14 + 120) & 0x30) != 0
    || (this = WebCore::RenderBlockFlow::lineCount((WebCore::RenderBlockFlow *)v14), v63 += (int)this, v63 <= 1))
  {
    while (1)
    {
      v64 = *(unsigned int *)(v14 + 47);
      if (!(v64 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32)))
        break;
      v14 = *(_QWORD *)((v64 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32)) + 8);
      if (!v14)
        break;
      if (*(_BYTE *)(v14 + 46) == 19)
        goto LABEL_112;
    }
LABEL_106:
    if (v63 == 1)
      v8 = 2;
    else
      v8 = 3;
    if (!v63)
      return this;
    goto LABEL_4;
  }
  v8 = 3;
LABEL_4:
  v9 = *(_DWORD *)(v7 + 200);
  if (v9 == -1)
    v10 = (float)*(int *)(v7 + 160) * 0.015625;
  else
    v10 = (float)v9;
  v15 = *(unsigned int *)(v7 + 64);
  if (v15 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32))
  {
    v16 = *(WebCore::LegacyLineLayout **)((v15 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32)) + 8);
    if (v16)
    {
      v17 = a3 / v10;
      v18 = roundf(a2 / (float)(a3 / v10));
      v19 = (int)v10;
      do
      {
        if ((*((_BYTE *)v16 + 45) & 0x40) != 0)
        {
          if (*((_BYTE *)v16 + 46) != 19)
            goto LABEL_23;
          v20 = v16;
          if ((*((_BYTE *)v16 + 45) & 2) != 0)
            v20 = *(WebCore::LegacyLineLayout **)(*((_QWORD *)v16 + 4) + 8);
          if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v20 + 11) + 8) + 16) == 4)
            goto LABEL_23;
        }
        if ((*((_BYTE *)v16 + 45) & 2) != 0)
        {
          (*(void (**)(WebCore::LegacyLineLayout *))(*(_QWORD *)v16 + 672))(v16);
          v23 = v22 < 1 || v21 < 1;
          if (!v23)
          {
            v24 = *((_QWORD *)v16 + 13);
            if (v24)
            {
              v25 = *(unsigned __int8 **)(v24 + 8);
              v26 = *(unsigned int *)(v24 + 4);
              if ((*(_BYTE *)(v24 + 16) & 4) != 0)
              {
                if (!(_DWORD)v26)
                  goto LABEL_45;
                while (1)
                {
                  v27 = *v25;
                  v23 = v27 > 0x20;
                  v28 = (1 << v27) & 0x100003600;
                  if (v23 || v28 == 0)
                    break;
                  ++v25;
                  if (!--v26)
                    goto LABEL_45;
                }
              }
              else
              {
                if (!(_DWORD)v26)
                  goto LABEL_45;
                v30 = 2 * v26;
                while (1)
                {
                  v31 = *(unsigned __int16 *)v25;
                  v23 = v31 > 0x20;
                  v32 = (1 << v31) & 0x100003600;
                  if (v23 || v32 == 0)
                    break;
                  v25 += 2;
                  v30 -= 2;
                  if (!v30)
                    goto LABEL_45;
                }
              }
              v40 = *((_QWORD *)v16 + 4);
              if (!v40)
                goto LABEL_124;
              v41 = *(_QWORD *)(v40 + 8);
              if (!v41)
                goto LABEL_124;
              v42 = *(_QWORD *)(v40 + 8);
              while (1)
              {
                if ((*(_BYTE *)(v42 + 45) & 1) == 0)
                {
                  v43 = *(_QWORD *)(*(_QWORD *)(v42 + 24) + 8);
                  if (v43)
                  {
                    v44 = *(_WORD *)(v43 + 28);
                    if ((v44 & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1940EA24CLL);
                    }
                    if ((v44 & 0x10) != 0 && (*(_BYTE *)(v43 + 22) & 0x10) == 0)
                      break;
                  }
                }
                v45 = *(_QWORD *)(v42 + 32);
                if (v45)
                {
                  v42 = *(_QWORD *)(v45 + 8);
                  if (v42)
                    continue;
                }
                goto LABEL_72;
              }
              v62 = *(_QWORD *)(*(_QWORD *)(v43 + 96) + 24);
              if (v62 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
                && v62 != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
              {
LABEL_72:
                if ((*((_BYTE *)v16 + 45) & 2) == 0)
                  goto LABEL_124;
                v46 = *(_QWORD *)(v41 + 112);
                v47 = *(float *)(v46 + 224);
                v48 = roundf(v17 * v47);
                if (v48 > 0.0 && v48 < v18)
                {
                  if ((*(_BYTE *)(v7 + 204) & 3) == 0)
                    *(_BYTE *)(v7 + 204) = *(_BYTE *)(v7 + 204) & 0xFC | v8;
                  if (*(_DWORD *)(v7 + 200) == -1)
                    *(_DWORD *)(v7 + 200) = v19;
                  v65 = *(WTF **)(*((_QWORD *)v16 + 3) + 8);
                  v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v65 + 5)
                                                                                              + 8)
                                                                                  + 528)
                                                                      + 8)
                                                          + 24)
                                              + 8)
                                  + 112);
                  v51 = 1.0 / log10f(v47);
                  v52 = 220;
                  if (v8 == 2)
                    v52 = 216;
                  v53 = v51 * *(float *)(v50 + v52);
                  if (v53 < 1.0)
                    v53 = 1.0;
                  v54 = v47 * v53;
                  if (v54 >= v18)
                    v54 = v18;
                  v55 = roundf(v54);
                  v56 = v55 <= v47 || v55 == *(float *)(v46 + 204);
                  if (!v56 && (*((_BYTE *)v16 + 45) & 1) == 0)
                  {
                    if ((*((_WORD *)v65 + 14) & 2) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1940EA274);
                    }
                    if (*(float *)(*(_QWORD *)(v41 + 104) + 344) == -1.0)
                    {
                      v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8);
                      v58 = *(WebCore::TextAutoSizing **)(v57 + 2456);
                      if (!v58)
                      {
                        v58 = (WebCore::TextAutoSizing *)WTF::fastMalloc((WTF *)8);
                        *(_QWORD *)v58 = 0;
                        v60 = *(uint64_t **)(v57 + 2456);
                        *(_QWORD *)(v57 + 2456) = v58;
                        if (v60)
                        {
                          v66 = (WTF *)v60;
                          if (*v60)
                            WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::deallocateTable(*v60, v59);
                          WTF::fastFree(v66, v59);
                          v58 = *(WebCore::TextAutoSizing **)(v57 + 2456);
                        }
                      }
                      v61 = *(WebCore::Text **)(*((_QWORD *)v16 + 3) + 8);
                      if ((*((_WORD *)v61 + 14) & 2) == 0)
                      {
LABEL_124:
                        __break(0xC471u);
                        JUMPOUT(0x1940EA22CLL);
                      }
                      WebCore::TextAutoSizing::addTextNode(v58, v61, v55);
                    }
                  }
                }
LABEL_23:
                this = (WebCore::LegacyLineLayout *)WebCore::RenderObjectTraversal::nextSkippingChildren(v16, (WebCore::RenderObject *)v7, a5);
                goto LABEL_46;
              }
            }
          }
        }
LABEL_45:
        this = (WebCore::LegacyLineLayout *)(*(uint64_t (**)(WebCore::LegacyLineLayout *))(*(_QWORD *)v16 + 112))(v16);
        if (!this)
        {
          if (v16 == (WebCore::LegacyLineLayout *)v7)
            return this;
          v34 = *(unsigned int *)((char *)v16 + 47);
          if (!(v34 | ((unint64_t)*((unsigned __int8 *)v16 + 51) << 32))
            || (this = *(WebCore::LegacyLineLayout **)((v34 | ((unint64_t)*((unsigned __int8 *)v16 + 51) << 32))
                                                     + 8)) == 0)
          {
            v35 = *((_QWORD *)v16 + 4);
            if (!v35)
              return this;
            v36 = *(_QWORD *)(v35 + 8);
            if (!v36 || v36 == v7)
              return this;
            while (1)
            {
              v37 = *(unsigned int *)(v36 + 47);
              if (v37 | ((unint64_t)*(unsigned __int8 *)(v36 + 51) << 32))
              {
                this = *(WebCore::LegacyLineLayout **)((v37 | ((unint64_t)*(unsigned __int8 *)(v36 + 51) << 32))
                                                     + 8);
                if (this)
                  break;
              }
              v38 = *(_QWORD *)(v36 + 32);
              if (v38)
              {
                v36 = *(_QWORD *)(v38 + 8);
                if (v36 && v36 != v7)
                  continue;
              }
              return this;
            }
          }
        }
LABEL_46:
        v16 = this;
      }
      while (this);
    }
  }
  return this;
}

uint64_t WebCore::eventRectRelativeToRoot(WebCore *this, WebCore::RenderLayer **a2, WebCore::RenderObject *a3)
{
  uint64_t v5;
  uint64_t result;
  const WebCore::IntRect *v7;
  unint64_t v8;
  int v9;
  int v10;
  signed int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  if (this && (*((_WORD *)this + 14) & 0xF000) == 0x9000)
  {
    if (*((_BYTE *)a2 + 46) == 49)
    {
      *(_QWORD *)&v29 = WebCore::RenderView::documentRect(a2);
      *((_QWORD *)&v29 + 1) = v5;
      result = (uint64_t)a2[31];
      v7 = (const WebCore::IntRect *)&v29;
      return WebCore::ScrollView::contentsToRootView((WebCore::ScrollView *)result, v7);
    }
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v8 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)a2, 1, 0);
    v11 = (_DWORD)v8 << 6;
    if ((int)v8 < -33554432)
      v11 = 0x80000000;
    v12 = HIDWORD(v8) << 6;
    v13 = v9 << 6;
    if (v9 < -33554432)
      v13 = 0x80000000;
    if ((int)v8 > 0x1FFFFFF)
      v11 = 0x7FFFFFFF;
    if (SHIDWORD(v8) < -33554432)
      v12 = 0x80000000;
    if (SHIDWORD(v8) <= 0x1FFFFFF)
      v14 = v12;
    else
      v14 = 0x7FFFFFFF;
    v15 = v11 / 64;
    v16 = v11 - (v12 & 0xFFFFFFC0);
    v17 = v14 / 64;
    v18 = v14 - (v12 & 0xFFFFFFC0);
    if (v9 <= 0x1FFFFFF)
      v19 = v13;
    else
      v19 = 0x7FFFFFFF;
    if (v10 >= -33554432)
      v20 = v10 << 6;
    else
      v20 = 0x80000000;
    if (v10 > 0x1FFFFFF)
      v20 = 0x7FFFFFFF;
    v21 = v16 + v19;
    if (__OFADD__(v16, v19))
      v21 = (v16 >> 31) + 0x7FFFFFFF;
    v22 = __OFADD__(v18, v20);
    v23 = v18 + v20;
    if (v22)
      v23 = (v18 >> 31) + 0x7FFFFFFF;
    v24 = v18 + 32;
    v25 = v16 + 32;
    *(_QWORD *)&v28 = (v15 + (v25 >> 6)) | ((unint64_t)(v17 + (v24 >> 6)) << 32);
    *((_QWORD *)&v28 + 1) = (v21 / 64 - (v25 >> 6) + ((int)(v21 - (v10 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v23 / 64 - (v24 >> 6) + ((int)(v23 - (v21 & 0xFFFFFFC0) + 32) >> 6)) << 32);
    if (!this || (*((_WORD *)this + 14) & 8) == 0)
    {
      v29 = v28;
      return v28;
    }
    v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v26 && (v27 = *(_QWORD *)(v26 + 8)) != 0)
    {
      result = *(_QWORD *)(v27 + 288);
      if (result)
      {
        v7 = (const WebCore::IntRect *)&v28;
        return WebCore::ScrollView::contentsToRootView((WebCore::ScrollView *)result, v7);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::Widget::convertToRootView(WebCore::Widget *this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  WebCore::Widget *v3;
  uint64_t v4;
  _QWORD v6[2];

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return *(_QWORD *)a2;
  v3 = *(WebCore::Widget **)(v2 + 8);
  if (!v3)
    return *(_QWORD *)a2;
  v6[0] = (*(uint64_t (**)(WebCore::Widget *, const WebCore::IntRect *))(*(_QWORD *)this + 184))(this, a2);
  v6[1] = v4;
  return WebCore::Widget::convertToRootView(v3, (const WebCore::IntRect *)v6);
}

uint64_t WebCore::RenderView::documentRect(WebCore::RenderLayer **this)
{
  unint64_t v2;
  void *v3;
  float v4;
  float v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WebCore::RenderLayer **v12;
  WebCore::RenderLayer *v13;
  _QWORD *v14;
  float64x2_t v15[8];
  float v16[4];

  v2 = WebCore::RenderView::unscaledDocumentRect((WebCore::RenderView *)this);
  v4 = (float)(int)v2;
  v5 = (float)SHIDWORD(v2);
  v16[0] = (float)(int)v2;
  v16[1] = (float)SHIDWORD(v2);
  v16[2] = (float)(int)v3;
  v16[3] = (float)SHIDWORD(v3);
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x20000) != 0)
  {
    v12 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v12 = (WebCore::RenderLayer **)*((_QWORD *)this[4] + 1);
    v13 = v12[11];
    if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 4) + 40) + 20)
      || (v14 = (_QWORD *)*((_QWORD *)v13 + 5), v14[41])
      || v14[38]
      || v14[39]
      || v14[40]
      || (v6 & 0x100000) != 0)
    {
      WebCore::RenderLayer::currentTransform(this[18], v3, (uint64_t)v15);
      WebCore::TransformationMatrix::mapRect(v15, (const WebCore::FloatRect *)v16);
    }
  }
  v7 = 0x7FFFFFFFLL;
  v8 = 0x80000000;
  if (v4 > -2147500000.0)
    v8 = (int)v4;
  if (v4 < 2147500000.0)
    v7 = v8;
  v9 = 0x7FFFFFFF00000000;
  v10 = 0x8000000000000000;
  if (v5 > -2147500000.0)
    v10 = (unint64_t)(int)v5 << 32;
  if (v5 < 2147500000.0)
    v9 = v10;
  return v9 | v7;
}

void WebCore::TextAutoSizing::updateRenderTree(WebCore::TextAutoSizing *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WebCore::RenderStyle *v40;
  WTF *v41;
  uint64_t v42;
  WebCore::TextAutoSizingValue *v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  WebCore::RenderElement *v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  WTF *v68;
  int v69;
  WTF *v70;
  WTF::StringImpl *v71;
  unsigned int *v72;
  uint64_t v73;
  WebCore *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const WebCore::Element *v78;
  WebCore *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  WTF::StringImpl *v84;
  unsigned int *v85;
  WebCore::RenderElement *v86;
  WebCore *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const WebCore::Element *v91;
  WebCore *v92;
  void *v93;
  uint64_t v94;
  int v95;
  double v96;
  float v97;
  float v98;
  double v99;
  int v100;
  int v101;
  int v102;
  int v103;
  float v104;
  int v105;
  float v106;
  float v107;
  uint64_t v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl **v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  WebCore *v120;
  WebCore::RenderElement *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const WebCore::Element *v125;
  WebCore::RenderElement *v126;
  WebCore::RenderObject *v127;
  uint64_t v128;
  uint64_t v129;
  WebCore::SVGTextLayoutAttributes **v130;
  void *v131;
  unsigned int *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl **v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  WebCore::RenderObject *v151;
  uint64_t v152;
  uint64_t v153;
  WebCore::SVGTextLayoutAttributes **v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  float v164;
  int v165;
  WTF *v166;
  WTF::StringImpl *v167;
  unsigned int *v168;
  uint64_t v169;
  WebCore *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  WebCore *v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  WTF::StringImpl **v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  uint64_t v184;
  WTF::StringImpl **v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v194;
  unsigned int v195;
  unint64_t v196;
  double v197;
  double v198;
  double v199;
  unsigned int v200;
  uint64_t *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  unint64_t StatusReg;
  WebCore::RenderElement *v208[8];
  WebCore *v209[21];
  WTF *v210;
  float v211;
  __int16 v212;
  _QWORD v213[19];
  float v214;
  WTF *v215;
  float v216;
  __int16 v217;
  WebCore::RenderObject *v218[4];
  uint64_t v219;
  WebCore::RenderTreeBuilder::SVG *v220[18];
  WTF *v221;
  uint64_t v222;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return;
  v3 = *(unsigned int *)(v2 - 4);
  if (!(_DWORD)v3)
    return;
  v4 = (uint64_t *)this;
  v203 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v202 = v2;
  do
  {
    v5 = --v3;
    v6 = (_QWORD *)(v2 + 24 * v3);
    if ((unint64_t)(*v6 + 1) < 2)
      continue;
    v204 = v2 + 24 * v3;
    v205 = v3;
    v7 = (uint64_t *)v6[2];
    v221 = 0;
    v222 = 0;
    v8 = *v7;
    if (!*v7)
    {
      v11 = 0;
      v9 = 0;
      goto LABEL_18;
    }
    v9 = *(unsigned int *)(v8 - 4);
    v10 = v8 + 8 * v9;
    if (!*(_DWORD *)(v8 - 12))
    {
      v11 = v8 + 8 * v9;
LABEL_18:
      v10 = v8 + 8 * v9;
      if (v8)
        goto LABEL_15;
      goto LABEL_19;
    }
    v11 = *v7;
    if ((_DWORD)v9)
    {
      v12 = 8 * v9;
      v11 = *v7;
      while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
      {
        v11 += 8;
        v12 -= 8;
        if (!v12)
        {
          v11 = v10;
          break;
        }
      }
    }
    if (v8)
    {
LABEL_15:
      v13 = v8 + 8 * *(unsigned int *)(v8 - 4);
      goto LABEL_20;
    }
LABEL_19:
    v13 = 0;
LABEL_20:
    if (v13 == v11)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)v11;
        if ((*(_QWORD *)(*(_QWORD *)v11 + 64) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_23;
        if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          goto LABEL_416;
        if (*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)v11 + 64) & 0xFFFFFFFFFFFFLL)
                                                          + 0x20)
                                              + 8)
                                  + 104)
                      + 344) != -1.0
          || *(float *)((*(_QWORD *)(*(_QWORD *)v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x50) == 0.0)
        {
LABEL_23:
          v213[0] = *(_QWORD *)v11;
          if (v15 == (_DWORD)v222)
          {
            v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v221, v15 + 1, (unint64_t)v213);
            v15 = HIDWORD(v222);
            v14 = v221;
            *((_QWORD *)v221 + HIDWORD(v222)) = *(_QWORD *)v17;
          }
          else
          {
            *((_QWORD *)v14 + v15) = v16;
          }
          HIDWORD(v222) = ++v15;
        }
        v18 = v11 + 8;
        v11 = v10;
        if (v18 != v10)
        {
          v11 = v18;
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 += 8;
            if (v11 == v10)
            {
              v11 = v10;
              break;
            }
          }
        }
      }
      while (v11 != v13);
      v8 = *v7;
      if (v15)
      {
        if (!v8)
          goto LABEL_74;
        v19 = (WTF *)((char *)v14 + 8 * v15);
        v20 = v14;
        do
        {
          if (v8)
          {
            v21 = *(_DWORD *)(v8 - 8);
            v22 = ~(*(_QWORD *)v20 << 32) + *(_QWORD *)v20;
            v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
            v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
            v25 = v21 & (((v24 + ~(v24 << 27)) >> 31) ^ ((_DWORD)v24 + ~((_DWORD)v24 << 27)));
            v26 = *(_QWORD *)(v8 + 8 * v25);
            if (v26 != *(_QWORD *)v20)
            {
              v27 = 1;
              while (v26)
              {
                v25 = ((_DWORD)v25 + v27) & v21;
                v26 = *(_QWORD *)(v8 + 8 * v25);
                ++v27;
                if (v26 == *(_QWORD *)v20)
                  goto LABEL_48;
              }
              v25 = *(unsigned int *)(v8 - 4);
            }
LABEL_48:
            if (v25 != *(_DWORD *)(v8 - 4))
            {
              v28 = *(_QWORD *)(v8 + 8 * v25);
              *(_QWORD *)(v8 + 8 * v25) = -1;
              if (v28)
              {
                if (*(_DWORD *)(v28 + 24) == 2)
                {
                  if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v28);
                }
                else
                {
                  *(_DWORD *)(v28 + 24) -= 2;
                }
              }
              ++*(_DWORD *)(*v7 - 16);
              v29 = *v7;
              if (*v7)
                v30 = *(_DWORD *)(v29 - 12) - 1;
              else
                v30 = -1;
              *(_DWORD *)(v29 - 12) = v30;
              v8 = *v7;
              if (*v7)
              {
                v31 = *(_DWORD *)(v8 - 4);
                if (6 * *(_DWORD *)(v8 - 12) < v31 && v31 >= 9)
                {
                  WTF::HashTable<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>>::rehash(v7, v31 >> 1);
                  v8 = *v7;
                }
              }
            }
          }
          v20 = (WTF *)((char *)v20 + 8);
        }
        while (v20 != v19);
      }
    }
    if (!v8)
    {
LABEL_74:
      v34 = 1;
LABEL_75:
      if (!v14)
        goto LABEL_77;
LABEL_76:
      v221 = 0;
      LODWORD(v222) = 0;
      WTF::fastFree(v14, a2);
      goto LABEL_77;
    }
    v33 = *(_DWORD *)(v8 - 12);
    v34 = v33 == 0;
    if (v33 < 2)
      goto LABEL_75;
    v35 = *(unsigned int *)(v8 - 4);
    v36 = (uint64_t *)(v8 + 8 * v35);
    v37 = 8 * v35;
    v38 = (uint64_t *)v8;
    if ((_DWORD)v35)
    {
      v39 = 8 * v35;
      v38 = (uint64_t *)v8;
      while ((unint64_t)(*v38 + 1) <= 1)
      {
        ++v38;
        v39 -= 8;
        if (!v39)
          goto LABEL_106;
      }
    }
    if (v38 != v36)
    {
      v49 = *v38;
      v50 = 0.0;
      while (1)
      {
        v51 = *(_QWORD *)(v49 + 64) & 0xFFFFFFFFFFFFLL;
        if (v51)
        {
          if ((*(_BYTE *)(v51 + 45) & 2) == 0)
            break;
        }
        v50 = v50 + *(float *)(v51 + 80);
        do
        {
          if (++v38 == v36)
            goto LABEL_107;
          v49 = *v38;
        }
        while ((unint64_t)(*v38 + 1) <= 1);
        if (v38 == v36)
          goto LABEL_107;
      }
LABEL_416:
      __break(0xC471u);
      JUMPOUT(0x1940EBB44);
    }
LABEL_106:
    v50 = 0.0;
LABEL_107:
    if ((_DWORD)v35)
    {
      while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
      {
        v8 += 8;
        v37 -= 8;
        if (!v37)
        {
          v8 = (uint64_t)v36;
          break;
        }
      }
    }
    v52 = *(_QWORD *)(*(_QWORD *)v8 + 64) & 0xFFFFFFFFFFFFLL;
    if (v52 && (*(_BYTE *)(v52 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940EBBA4);
    }
    WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v220, *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 24) + 8) + 40) + 8) + 1944));
    v54 = *v7;
    if (!*v7)
    {
      v57 = 0;
      v55 = 0;
      goto LABEL_124;
    }
    v55 = *(unsigned int *)(v54 - 4);
    v56 = v54 + 8 * v55;
    if (!*(_DWORD *)(v54 - 12))
    {
      v57 = v54 + 8 * v55;
LABEL_124:
      v56 = v54 + 8 * v55;
      if (!v54)
        goto LABEL_125;
      goto LABEL_121;
    }
    v57 = *v7;
    if ((_DWORD)v55)
    {
      v58 = 8 * v55;
      v57 = *v7;
      while ((unint64_t)(*(_QWORD *)v57 + 1) <= 1)
      {
        v57 += 8;
        v58 -= 8;
        if (!v58)
        {
          v57 = v56;
          break;
        }
      }
    }
    if (!v54)
    {
LABEL_125:
      v59 = 0;
      goto LABEL_126;
    }
LABEL_121:
    v59 = v54 + 8 * *(unsigned int *)(v54 - 4);
LABEL_126:
    v60 = roundf(v50 / (float)v33);
    if (v59 == v57)
      goto LABEL_286;
    v206 = 1;
    do
    {
      if ((*(_QWORD *)(*(_QWORD *)v57 + 64) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)v57 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1940EBB64);
      }
      v61 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v57 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v61)
      {
        v62 = *(WebCore::RenderElement **)(v61 + 8);
        v63 = *((_QWORD *)v62 + 14);
        if (*(float *)(v63 + 204) != v60)
        {
          v64 = *(float *)(v63 + 224);
          v65 = *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)v57 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                                 + 8)
                                                                                     + 528)
                                                                         + 8)
                                                             + 24)
                                                 + 8)
                                     + 112)
                         + 224);
          v66 = v60 / v64;
          if ((((float)(v60 / v64) > v65) & v206) == 1)
          {
            v206 = 0;
            v60 = roundf(v64 * v65);
            v66 = v60 / v64;
          }
          WebCore::cloneRenderStyleWithState((WebCore *)v218, (WebCore::RenderElement *)((char *)v62 + 80));
          v67 = v219;
          WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v213, (const WebCore::FontDescription *)(v219 + 48));
          v68 = *(WTF **)(v67 + 216);
          ++*(_DWORD *)v68;
          v215 = v68;
          v216 = *(float *)(v67 + 224);
          v217 = *(_WORD *)(v67 + 228);
          v69 = 2139095039;
          if (v60 < 3.4028e38)
          {
            v69 = -8388609;
            if (v60 > -3.4028e38)
              v69 = LODWORD(v60);
          }
          v214 = *(float *)&v69;
          WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v209, (const WebCore::FontDescription *)v213);
          v70 = v215;
          ++*(_DWORD *)v215;
          v210 = v70;
          v211 = v216;
          v212 = v217;
          WebCore::RenderStyle::setFontDescription((uint64_t)v218, (uint64_t)v209);
          v72 = (unsigned int *)v210;
          v210 = 0;
          if (v72)
          {
            if (*v72 == 1)
            {
              v108 = v72[1];
              if ((_DWORD)v108)
              {
                v109 = (WTF::StringImpl **)(v72 + 2);
                v110 = 8 * v108;
                do
                {
                  v111 = *v109;
                  *v109 = 0;
                  if (v111)
                  {
                    if (*(_DWORD *)v111 == 2)
                      WTF::StringImpl::destroy(v111, v71);
                    else
                      *(_DWORD *)v111 -= 2;
                  }
                  ++v109;
                  v110 -= 8;
                }
                while (v110);
              }
              WTF::fastFree((WTF *)v72, v71);
              v2 = v202;
            }
            else
            {
              --*v72;
            }
          }
          WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v209, v71);
          v73 = v219;
          v74 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 40) + 8) + 2648);
          if (!v74)
            v74 = (WebCore *)WebCore::Document::ensureFontSelector(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)v57 + 40)
                                                                                         + 8));
          ++*((_DWORD *)v74 + 2);
          v209[0] = v74;
          v75 = *(_QWORD *)(StatusReg + 736);
          if (!v75 || (v76 = *(_QWORD *)(v75 + 96)) == 0)
            v76 = WebCore::threadGlobalDataSlow(v74);
          v77 = *(_QWORD *)(v76 + 80);
          if (!v77)
          {
            WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v76);
            v77 = *(_QWORD *)(v76 + 80);
          }
          WebCore::FontCache::updateFontCascade(v77, v73 + 32, v209);
          v79 = v209[0];
          v209[0] = 0;
          if (v79)
          {
            if (*((_DWORD *)v79 + 2) == 1)
              (*(void (**)(WebCore *))(*(_QWORD *)v79 + 8))(v79);
            else
              --*((_DWORD *)v79 + 2);
          }
          WebCore::RenderElement::setStyle((uint64_t)v62, (WebCore::Style *)v218, 0, v78);
          if ((*((_BYTE *)v62 + 45) & 1) != 0)
          {
            if ((*((_BYTE *)v62 + 45) & 2) != 0)
            {
              v116 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v62 + 4) + 8) + 96);
              if ((v116 & 0x1F) != 1 && (v116 & 0x1F) != 14)
                goto LABEL_151;
            }
            else
            {
              v116 = *((_QWORD *)v62 + 12);
              if ((v116 & 0x1F) != 1 && (v116 & 0x1F) != 0xE)
                goto LABEL_151;
            }
            if ((*((_BYTE *)v62 + 45) & 0x40) != 0
              && (v116 & 0xF80000000000) == 0
              && ((*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)v62 + 176))(v62) & 1) == 0)
            {
              v117 = *((unsigned __int8 *)v62 + 46);
              if (v117 != 20)
              {
                if ((*((_BYTE *)v62 + 52) & 7) == 1)
                {
                  if ((*((_BYTE *)v62 + 53) & 2) != 0 || v117 == 26 || v117 == 49)
                    goto LABEL_151;
                }
                else if (v117 == 49 || v117 == 26)
                {
                  goto LABEL_151;
                }
                v118 = *((_QWORD *)v62 + 4);
                if (v118)
                  v62 = *(WebCore::RenderElement **)(v118 + 8);
                else
                  v62 = 0;
              }
            }
          }
LABEL_151:
          v81 = *((unsigned int *)v62 + 16);
          if (v81 | ((unint64_t)*((unsigned __int8 *)v62 + 68) << 32))
          {
            v82 = *(_QWORD *)((v81 | ((unint64_t)*((unsigned __int8 *)v62 + 68) << 32)) + 8);
            if (v82)
            {
              if (*(_BYTE *)(v82 + 46) == 20)
              {
                WebCore::cloneRenderStyleWithState((WebCore *)v208, (const WebCore::RenderStyle *)(v82 + 80));
                WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v209, (const WebCore::FontDescription *)v213);
                v83 = v215;
                ++*(_DWORD *)v215;
                v210 = v83;
                v211 = v216;
                v212 = v217;
                WebCore::RenderStyle::setFontDescription((uint64_t)v208, (uint64_t)v209);
                v85 = (unsigned int *)v210;
                v210 = 0;
                if (v85)
                {
                  if (*v85 == 1)
                  {
                    v201 = v4;
                    v112 = v85[1];
                    if ((_DWORD)v112)
                    {
                      v113 = (WTF::StringImpl **)(v85 + 2);
                      v114 = 8 * v112;
                      do
                      {
                        v115 = *v113;
                        *v113 = 0;
                        if (v115)
                        {
                          if (*(_DWORD *)v115 == 2)
                            WTF::StringImpl::destroy(v115, v84);
                          else
                            *(_DWORD *)v115 -= 2;
                        }
                        ++v113;
                        v114 -= 8;
                      }
                      while (v114);
                    }
                    WTF::fastFree((WTF *)v85, v84);
                    v4 = v201;
                  }
                  else
                  {
                    --*v85;
                  }
                }
                WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v209, v84);
                v86 = v208[4];
                v87 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 40) + 8) + 2648);
                if (!v87)
                  v87 = (WebCore *)WebCore::Document::ensureFontSelector(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)v57 + 40)
                                                                                               + 8));
                ++*((_DWORD *)v87 + 2);
                v209[0] = v87;
                v88 = *(_QWORD *)(StatusReg + 736);
                if (!v88 || (v89 = *(_QWORD *)(v88 + 96)) == 0)
                  v89 = WebCore::threadGlobalDataSlow(v87);
                v90 = *(_QWORD *)(v89 + 80);
                if (!v90)
                {
                  WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v89);
                  v90 = *(_QWORD *)(v89 + 80);
                }
                WebCore::FontCache::updateFontCascade(v90, (uint64_t)v86 + 32, v209);
                v92 = v209[0];
                v209[0] = 0;
                v2 = v202;
                if (v92)
                {
                  if (*((_DWORD *)v92 + 2) == 1)
                    (*(void (**)(WebCore *))(*(_QWORD *)v92 + 8))(v92);
                  else
                    --*((_DWORD *)v92 + 2);
                }
                WebCore::RenderElement::setStyle(v82, (WebCore::Style *)v208, 0, v91);
                WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v208, v93);
              }
            }
          }
          v94 = *((_QWORD *)v62 + 14);
          v95 = *(unsigned __int8 *)(v94 + 24);
          if (v95 == 3)
          {
            v96 = v216 * 64.0;
            if (v96 >= 2147483650.0)
            {
              v97 = 33554000.0;
            }
            else if (v96 <= -2147483650.0)
            {
              v97 = -33554000.0;
            }
            else
            {
              v97 = (float)(int)v96 * 0.015625;
            }
            v98 = *(float *)(v94 + 20);
            if (!*(_BYTE *)(v94 + 26))
              v98 = (float)SLODWORD(v98);
            v99 = (float)((float)(v97 * v98) / 100.0) * 64.0;
            if (v99 >= 2147483650.0)
            {
              v100 = 0x7FFFFFFF;
            }
            else if (v99 <= -2147483650.0)
            {
              v100 = 0x80000000;
            }
            else
            {
              v100 = (int)v99;
            }
            v101 = (int)(float)(v66 * (float)(v100 / 64));
          }
          else
          {
            v106 = *(float *)(v94 + 20);
            if (!*(_BYTE *)(v94 + 26))
              v106 = (float)SLODWORD(v106);
            v107 = v66 * (float)(int)v106;
            v101 = (int)v107;
            if (v95 == 4 && v106 == (float)(int)v107)
              goto LABEL_256;
          }
          WebCore::cloneRenderStyleWithState((WebCore *)v209, (WebCore::RenderElement *)((char *)v62 + 80));
          v102 = *(unsigned __int8 *)(v94 + 24);
          if (v102 != 11 && v102 != 13)
          {
            v103 = *(unsigned __int8 *)(v94 + 26);
            if (*(_BYTE *)(v94 + 26))
            {
              v104 = *(float *)(v94 + 20);
              if (v104 < 0.0)
              {
                v105 = *(_DWORD *)(v94 + 20);
                goto LABEL_183;
              }
            }
            else
            {
              v105 = *(_DWORD *)(v94 + 20);
              if (v105 < 0)
              {
                v104 = *(float *)(v94 + 20);
LABEL_183:
                LODWORD(v208[0]) = 0;
                BYTE6(v208[0]) = 0;
                BYTE4(v208[0]) = v102;
                BYTE5(v208[0]) = *(_BYTE *)(v94 + 25);
                if ((v102 - 2) <= 8)
                {
                  BYTE6(v208[0]) = v103;
                  if (v103)
                    *(float *)v208 = v104;
                  else
                    LODWORD(v208[0]) = v105;
                }
                goto LABEL_239;
              }
            }
          }
          LODWORD(v208[0]) = v101;
          WORD2(v208[0]) = 4;
          BYTE6(v208[0]) = 0;
LABEL_239:
          WebCore::RenderStyle::setLineHeight((uint64_t)v209, (WebCore::Length *)v208);
          if (BYTE4(v208[0]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v208[0]));
          }
          LODWORD(v208[0]) = 0;
          BYTE6(v208[0]) = 0;
          WORD2(v208[0]) = *(_WORD *)(v94 + 24);
          if (BYTE4(v208[0]) - 2 >= 9)
          {
            if (BYTE4(v208[0]) == 11)
            {
              LODWORD(v208[0]) = *(_DWORD *)(v94 + 20);
              WebCore::Length::ref((int *)v208);
            }
          }
          else
          {
            BYTE6(v208[0]) = *(_BYTE *)(v94 + 26);
            LODWORD(v208[0]) = *(_DWORD *)(v94 + 20);
          }
          WebCore::RenderStyle::setSpecifiedLineHeight((uint64_t)v209, (WebCore::Length *)v208);
          if (BYTE4(v208[0]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v208[0]));
          }
          WebCore::RenderStyle::setFontDescription((uint64_t)v209, (uint64_t)v213);
          v120 = v209[4];
          v121 = *(WebCore::RenderElement **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 40) + 8) + 2648);
          if (!v121)
            v121 = (WebCore::RenderElement *)WebCore::Document::ensureFontSelector(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)v57 + 40) + 8));
          ++*((_DWORD *)v121 + 2);
          v208[0] = v121;
          v122 = *(_QWORD *)(StatusReg + 736);
          if (!v122 || (v123 = *(_QWORD *)(v122 + 96)) == 0)
            v123 = WebCore::threadGlobalDataSlow(v121);
          v124 = *(_QWORD *)(v123 + 80);
          if (!v124)
          {
            WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v123);
            v124 = *(_QWORD *)(v123 + 80);
          }
          WebCore::FontCache::updateFontCascade(v124, (uint64_t)v120 + 32, v208);
          v126 = v208[0];
          v208[0] = 0;
          if (v126)
          {
            if (*((_DWORD *)v126 + 2) == 1)
              (*(void (**)(WebCore::RenderElement *))(*(_QWORD *)v126 + 8))(v126);
            else
              --*((_DWORD *)v126 + 2);
          }
          WebCore::RenderElement::setStyle((uint64_t)v62, (WebCore::Style *)v209, 0, v125);
          WebCore::RenderTreeBuilder::updateAfterDescendants(v220, v62, v127, v128, v129, v130);
          WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v209, v131);
LABEL_256:
          v132 = (unsigned int *)v215;
          v215 = 0;
          if (v132)
          {
            if (*v132 == 1)
            {
              v135 = v132[1];
              if ((_DWORD)v135)
              {
                v136 = (WTF::StringImpl **)(v132 + 2);
                v137 = 8 * v135;
                do
                {
                  v138 = *v136;
                  *v136 = 0;
                  if (v138)
                  {
                    if (*(_DWORD *)v138 == 2)
                      WTF::StringImpl::destroy(v138, v80);
                    else
                      *(_DWORD *)v138 -= 2;
                  }
                  ++v136;
                  v137 -= 8;
                }
                while (v137);
              }
              WTF::fastFree((WTF *)v132, v80);
            }
            else
            {
              --*v132;
            }
          }
          WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v213, v80);
          WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v218, v133);
        }
      }
      v134 = v57 + 8;
      v57 = v56;
      if (v134 != v56)
      {
        v57 = v134;
        while ((unint64_t)(*(_QWORD *)v57 + 1) <= 1)
        {
          v57 += 8;
          if (v57 == v56)
          {
            v57 = v56;
            break;
          }
        }
      }
    }
    while (v57 != v59);
    v54 = *v7;
LABEL_286:
    if (v54)
    {
      v139 = *(unsigned int *)(v54 - 4);
      v140 = v54 + 8 * v139;
      if (*(_DWORD *)(v54 - 12))
      {
        v141 = v54;
        if ((_DWORD)v139)
        {
          v142 = 8 * v139;
          v141 = v54;
          while ((unint64_t)(*(_QWORD *)v141 + 1) <= 1)
          {
            v141 += 8;
            v142 -= 8;
            if (!v142)
            {
              v141 = v140;
              break;
            }
          }
        }
LABEL_293:
        v143 = v54 + 8 * *(unsigned int *)(v54 - 4);
        goto LABEL_298;
      }
      v141 = v54 + 8 * v139;
    }
    else
    {
      v141 = 0;
      v139 = 0;
    }
    v140 = v54 + 8 * v139;
    if (v54)
      goto LABEL_293;
    v143 = 0;
LABEL_298:
    while (v141 != v143)
    {
      if ((*(_QWORD *)(*(_QWORD *)v141 + 64) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)v141 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1940EBB84);
      }
      if (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)v141 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 46)
      {
        v145 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v141 + 64) & 0xFFFFFFFFFFFFLL) + 0x90);
        if (v145)
        {
          v146 = *(_QWORD *)(v145 + 8);
          if (v146)
          {
            v147 = *(_QWORD *)(v146 + 32);
            if (v147)
            {
              while (1)
              {
                v148 = *(_QWORD *)(v147 + 8);
                if (!v148)
                  goto LABEL_302;
                v149 = v4;
                if ((*(_BYTE *)(v148 + 45) & 0x40) != 0)
                  break;
                v147 = *(_QWORD *)(v148 + 32);
                v2 = v202;
                if (!v147)
                  goto LABEL_302;
              }
LABEL_319:
              v4 = v149;
              v2 = v202;
              if (*(_BYTE *)(v148 + 46) == 25)
                goto LABEL_302;
              if ((*(_BYTE *)(v148 + 102) & 2) != 0
                && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 128))(v148) & 1) != 0)
              {
                v218[0] = 0;
                v208[0] = 0;
                WebCore::RenderBlock::getFirstLetter(v148, v218, v208, 0);
                if (v218[0])
                {
                  v155 = *((_QWORD *)v218[0] + 4);
                  if (v155)
                  {
                    v156 = *(_QWORD *)(v155 + 8);
                    if (v156)
                    {
                      v157 = *(_QWORD *)(v156 + 32);
                      if (v157)
                      {
                        v158 = *(_QWORD *)(v157 + 8);
                        if (v158)
                        {
                          v159 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
                          if (*MEMORY[0x1E0CBF2F8])
                            *(_DWORD *)v159 += 2;
                          v160 = *(_QWORD *)(v158 + 128);
                          if (v160 && (v177 = *(unsigned int *)(v160 + 12), (_DWORD)v177))
                          {
                            v178 = *(uint64_t **)v160;
                            v179 = 8 * v177;
                            do
                            {
                              v161 = *v178;
                              if ((*(_QWORD *)(*v178 + 16) & 0xF80000000000) == 0x100000000000
                                && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v161 + 8) + 40) + 592) == v159)
                              {
                                break;
                              }
                              v161 = 0;
                              ++v178;
                              v179 -= 8;
                            }
                            while (v179);
                          }
                          else
                          {
                            v161 = 0;
                          }
                          if (v159)
                          {
                            if (*(_DWORD *)v159 != 2)
                            {
                              *(_DWORD *)v159 -= 2;
                              goto LABEL_334;
                            }
                            WTF::StringImpl::destroy(v159, v53);
                            if (!v161)
                            {
LABEL_355:
                              v4 = v149;
                              v2 = v202;
                              goto LABEL_302;
                            }
                          }
                          else
                          {
LABEL_334:
                            if (!v161)
                              goto LABEL_355;
                          }
                          v162 = *(_QWORD *)(v161 + 32);
                          WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v213, (const WebCore::FontDescription *)(v162 + 48));
                          v163 = *(WTF **)(v162 + 216);
                          ++*(_DWORD *)v163;
                          v215 = v163;
                          v217 = *(_WORD *)(v162 + 228);
                          v216 = *(float *)(v162 + 224);
                          v164 = (float)(v60 * v216) / *(float *)(*(_QWORD *)(v158 + 112) + 224);
                          *(float *)&v165 = 3.4028e38;
                          if (v164 >= 3.4028e38 || (*(float *)&v165 = -3.4028e38, v164 <= -3.4028e38))
                            v164 = *(float *)&v165;
                          v214 = v164;
                          WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v209, (const WebCore::FontDescription *)v213);
                          v166 = v215;
                          ++*(_DWORD *)v215;
                          v210 = v166;
                          v211 = v216;
                          v212 = v217;
                          WebCore::RenderStyle::setFontDescription(v161, (uint64_t)v209);
                          v168 = (unsigned int *)v210;
                          v210 = 0;
                          if (v168)
                          {
                            if (*v168 == 1)
                            {
                              v180 = v168[1];
                              if ((_DWORD)v180)
                              {
                                v181 = (WTF::StringImpl **)(v168 + 2);
                                v182 = 8 * v180;
                                do
                                {
                                  v183 = *v181;
                                  *v181 = 0;
                                  if (v183)
                                  {
                                    if (*(_DWORD *)v183 == 2)
                                      WTF::StringImpl::destroy(v183, v167);
                                    else
                                      *(_DWORD *)v183 -= 2;
                                  }
                                  ++v181;
                                  v182 -= 8;
                                }
                                while (v182);
                              }
                              WTF::fastFree((WTF *)v168, v167);
                            }
                            else
                            {
                              --*v168;
                            }
                          }
                          WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v209, v167);
                          v169 = *(_QWORD *)(v161 + 32);
                          v170 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v141 + 40) + 8) + 2648);
                          if (!v170)
                            v170 = (WebCore *)WebCore::Document::ensureFontSelector(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)v141 + 40) + 8));
                          ++*((_DWORD *)v170 + 2);
                          v209[0] = v170;
                          v171 = *(_QWORD *)(StatusReg + 736);
                          if (!v171 || (v172 = *(_QWORD *)(v171 + 96)) == 0)
                            v172 = WebCore::threadGlobalDataSlow(v170);
                          v173 = *(_QWORD *)(v172 + 80);
                          if (!v173)
                          {
                            WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v172);
                            v173 = *(_QWORD *)(v172 + 80);
                          }
                          WebCore::FontCache::updateFontCascade(v173, v169 + 32, v209);
                          v175 = v209[0];
                          v209[0] = 0;
                          if (v175)
                          {
                            if (*((_DWORD *)v175 + 2) == 1)
                              (*(void (**)(WebCore *))(*(_QWORD *)v175 + 8))(v175);
                            else
                              --*((_DWORD *)v175 + 2);
                          }
                          v176 = (unsigned int *)v215;
                          v215 = 0;
                          if (v176)
                          {
                            if (*v176 == 1)
                            {
                              v184 = v176[1];
                              if ((_DWORD)v184)
                              {
                                v185 = (WTF::StringImpl **)(v176 + 2);
                                v186 = 8 * v184;
                                do
                                {
                                  v187 = *v185;
                                  *v185 = 0;
                                  if (v187)
                                  {
                                    if (*(_DWORD *)v187 == 2)
                                      WTF::StringImpl::destroy(v187, v174);
                                    else
                                      *(_DWORD *)v187 -= 2;
                                  }
                                  ++v185;
                                  v186 -= 8;
                                }
                                while (v186);
                              }
                              WTF::fastFree((WTF *)v176, v174);
                            }
                            else
                            {
                              --*v176;
                            }
                          }
                          WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v213, v174);
                        }
                      }
                    }
                  }
                }
                WebCore::RenderTreeBuilder::updateAfterDescendants(v220, (WebCore::RenderElement *)v148, v151, v152, v153, v154);
                goto LABEL_355;
              }
              while (1)
              {
                v150 = *(_QWORD *)(v148 + 32);
                v4 = v149;
                v2 = v202;
                if (!v150)
                  break;
                v148 = *(_QWORD *)(v150 + 8);
                if (!v148)
                  break;
                if ((*(_BYTE *)(v148 + 45) & 0x40) != 0)
                  goto LABEL_319;
              }
            }
          }
        }
      }
LABEL_302:
      v144 = v141 + 8;
      v141 = v140;
      if (v144 != v140)
      {
        v141 = v144;
        while ((unint64_t)(*(_QWORD *)v141 + 1) <= 1)
        {
          v141 += 8;
          if (v141 == v140)
          {
            v141 = v140;
            break;
          }
        }
      }
    }
    WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)v220, v53);
    v34 = 0;
    v14 = v221;
    if (v221)
      goto LABEL_76;
LABEL_77:
    if (v34)
    {
      v40 = *(WebCore::RenderStyle **)v204;
      *(_QWORD *)v204 = 0;
      if (v40)
      {
        WebCore::RenderStyle::~RenderStyle(v40, a2);
        if (*(_DWORD *)v41)
        {
          *((_OWORD *)v41 + 2) = 0u;
          *((_OWORD *)v41 + 3) = 0u;
          *(_OWORD *)v41 = 0u;
          *((_OWORD *)v41 + 1) = 0u;
        }
        else
        {
          WTF::fastFree(v41, a2);
        }
      }
      *(_DWORD *)(v204 + 8) = 0;
      *(_QWORD *)v204 = -1;
      v42 = v2 + 24 * v5;
      v43 = *(WebCore::TextAutoSizingValue **)(v42 + 16);
      *(_QWORD *)(v42 + 16) = 0;
      if (v43)
      {
        WebCore::TextAutoSizingValue::reset(v43);
        v45 = *(uint64_t **)v43;
        if (*(_QWORD *)v43)
        {
          v46 = *((unsigned int *)v45 - 1);
          if ((_DWORD)v46)
          {
            v47 = *(uint64_t **)v43;
            do
            {
              v48 = *v47;
              if (*v47 != -1)
              {
                *v47 = 0;
                if (v48)
                {
                  if (*(_DWORD *)(v48 + 24) == 2)
                  {
                    if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v48);
                  }
                  else
                  {
                    *(_DWORD *)(v48 + 24) -= 2;
                  }
                }
              }
              ++v47;
              --v46;
            }
            while (v46);
          }
          WTF::fastFree((WTF *)(v45 - 2), v44);
        }
        WTF::fastFree(v43, v44);
      }
      ++v203;
      v3 = v205;
    }
    else
    {
      v3 = v205;
    }
  }
  while (v5);
  v188 = *v4;
  if (v203)
  {
    *(_DWORD *)(v188 - 16) += v203;
    v189 = *v4;
    if (*v4)
      v190 = *(_DWORD *)(v189 - 12);
    else
      v190 = 0;
    *(_DWORD *)(v189 - 12) = v190 - v203;
    v188 = *v4;
  }
  if (v188)
  {
    v191 = *(_DWORD *)(v188 - 4);
    v192 = *(unsigned int *)(v188 - 12);
    if (v191 >= 9 && 6 * (int)v192 < v191)
    {
      v194 = (v192 - 1) | ((v192 - 1) >> 1) | ((((_DWORD)v192 - 1) | ((v192 - 1) >> 1)) >> 2);
      v195 = v194 | (v194 >> 4) | ((v194 | (v194 >> 4)) >> 8);
      v196 = (v195 | HIWORD(v195)) + 1;
      if (v196 > 0x400)
      {
        if (v196 <= 2 * v192)
        {
LABEL_402:
          LODWORD(v196) = 2 * v196;
          if (v196 <= 0x400)
            goto LABEL_403;
        }
        v197 = (double)v192;
        v198 = (double)v196;
        v199 = 0.416666667;
      }
      else
      {
        if (3 * v196 <= 4 * v192)
          goto LABEL_402;
LABEL_403:
        v197 = (double)v192;
        v198 = (double)v196;
        v199 = 0.604166667;
      }
      if (v198 * v199 <= v197)
        LODWORD(v196) = 2 * v196;
      if (v196 <= 8)
        v200 = 8;
      else
        v200 = v196;
      WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::rehash(v4, v200, 0);
    }
  }
}

char *WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[4 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (!(v10 >> 30))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 4 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1940EBD14);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 30)
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)(4 * v17));
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, 4 * v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

WebCore::LegacyLineLayout *WebCore::RenderBlockFlow::lineCount(WebCore::RenderBlockFlow *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::LegacyLineLayout *result;

  if ((*((_BYTE *)this + 22) & 4) == 0)
    return 0;
  v1 = *((_DWORD *)this + 60);
  if (v1 == 1)
  {
    v2 = *((_QWORD *)this + 29);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 80);
      if (v3)
      {
        if (*(_DWORD *)(v3 + 60) >= 2u)
          return (WebCore::LegacyLineLayout *)*(unsigned int *)(v3 + 44);
      }
    }
    return 0;
  }
  if (v1 != 2)
    return 0;
  result = (WebCore::LegacyLineLayout *)*((_QWORD *)this + 29);
  if (result)
    return (WebCore::LegacyLineLayout *)WebCore::LegacyLineLayout::lineCount(result);
  return result;
}

BOOL WebCore::RunLoopObserver::isScheduled(WebCore::RunLoopObserver *this)
{
  return *((_QWORD *)this + 2) != 0;
}

uint64_t PAL::AVOutputContextFunction(PAL *this)
{
  return qword_1ECE7DD70;
}

uint64_t WebCore::HistoryItem::urlString(WebCore::HistoryItem *this)
{
  return (uint64_t)this + 16;
}

uint64_t WebCore::HistoryItem::referrer(WebCore::HistoryItem *this)
{
  return (uint64_t)this + 32;
}

uint64_t WebCore::HistoryItem::children(WebCore::HistoryItem *this)
{
  return (uint64_t)this + 128;
}

uint64_t WebCore::HistoryItem::target(WebCore::HistoryItem *this)
{
  return (uint64_t)this + 40;
}

uint64_t WebCore::HistoryItem::title(WebCore::HistoryItem *this)
{
  return (uint64_t)this + 72;
}

uint64_t WebCore::HistoryItem::shouldOpenExternalURLsPolicy(WebCore::HistoryItem *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t WebCore::HistoryItem::shouldRestoreScrollPosition(WebCore::HistoryItem *this)
{
  return *((unsigned __int8 *)this + 148);
}

uint64_t WebCore::HistoryItem::originalURLString(WebCore::HistoryItem *this)
{
  return (uint64_t)this + 24;
}

float WebCore::HistoryItem::pageScaleFactor(WebCore::HistoryItem *this)
{
  return *((float *)this + 24);
}

uint64_t WebCore::HistoryItem::scrollPosition(WebCore::HistoryItem *this)
{
  return (uint64_t)this + 88;
}

uint64_t WebCore::HistoryItem::documentState(WebCore::HistoryItem *this)
{
  return (uint64_t)this + 104;
}

uint64_t WebCore::HistoryItem::formData(WebCore::HistoryItem *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t WebCoreObjCScheduleDeallocateOnMainRunLoop(objc_class *a1, objc_object *a2)
{
  int isMainRunLoop;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  isMainRunLoop = WTF::isMainRunLoop(a1);
  if ((isMainRunLoop & 1) == 0)
  {
    v7 = isMainRunLoop;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = off_1E3357B18;
    v6[1] = a1;
    v6[2] = a2;
    v8 = v6;
    WTF::callOnMainRunLoop();
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    isMainRunLoop = v7;
  }
  return isMainRunLoop ^ 1u;
}

void sub_1940EBE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

__int128 *WebCore::consumeMaxHeight(WebCore *this, WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserContext *a3)
{
  __int128 *result;
  int *v7;
  int *v8;

  result = WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID)>((uint64_t)a2, (uint64_t (*)(_QWORD))WebCore::isKeywordValidForMaxHeight, &v8);
  v7 = v8;
  if (!v8)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 1u, 0, 0, 0, 0, (uint64_t *)&v8);
    v7 = v8;
  }
  *(_QWORD *)this = v7;
  return result;
}

BOOL WebCore::CSSPropertyParser::consumeBorderShorthand(uint64_t a1, int a2, int a3, int a4, int a5)
{
  int *v10;
  int *v11;
  int *v12;
  WTF::StringImpl *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v39;
  int *v40;

  v10 = 0;
  v11 = 0;
  while (2)
  {
    v12 = v10;
    do
    {
      v10 = v12;
      WebCore::CSSPropertyParsing::consumeLineWidth((__int128 **)a1, *(WebCore::CSSParserTokenRange **)(a1 + 16), &v40);
      v14 = v40;
      if (v40)
      {
        do
        {
          v16 = v10;
          while (1)
          {
            v10 = v16;
            if (v16)
              break;
            WebCore::CSSPropertyParsing::parseStyleProperty(&v40, a1, 375, 463, *(_QWORD *)(a1 + 16));
            v16 = v40;
            if (!v40)
            {
              if (v11)
              {
                v10 = 0;
                goto LABEL_17;
              }
              goto LABEL_16;
            }
          }
          if (v11)
            goto LABEL_17;
LABEL_16:
          v17 = *(_QWORD *)(a1 + 16);
          v39 = 1792;
          WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)a1, v17, &v39, &v40);
          v11 = v40;
        }
        while (v40);
        goto LABEL_17;
      }
      if (v10)
        break;
      WebCore::CSSPropertyParsing::parseStyleProperty(&v40, a1, 375, 463, *(_QWORD *)(a1 + 16));
      v12 = v40;
    }
    while (v40);
    if (!v11)
    {
      v15 = *(_QWORD *)(a1 + 16);
      v39 = 1792;
      WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)a1, v15, &v39, &v40);
      v11 = v40;
      if (v40)
        continue;
      if (!v10)
        return 0;
      v11 = 0;
    }
    break;
  }
LABEL_17:
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_QWORD *)a1 == v18;
  if (*(_QWORD *)a1 == v18)
  {
    v20 = WebCore::shorthandForProperty(a2);
    if (v21)
    {
      v22 = (unsigned __int16 *)v20;
      v23 = 2 * v21;
      if (v14)
      {
        do
        {
          v24 = *v22;
          *v14 += 2;
          v40 = v14;
          WebCore::CSSPropertyParser::addProperty(a1, v24, a2, &v40, a5, 0);
          if (v40)
          {
            if (*v40 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v25);
            else
              *v40 -= 2;
          }
          ++v22;
          v23 -= 2;
        }
        while (v23);
      }
      else
      {
        do
        {
          v26 = *v22;
          v40 = v14;
          WebCore::CSSPropertyParser::addProperty(a1, v26, a2, &v40, a5, 0);
          if (v40)
          {
            if (*v40 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v27);
            else
              *v40 -= 2;
          }
          ++v22;
          v23 -= 2;
        }
        while (v23);
      }
    }
    v28 = WebCore::shorthandForProperty(a3);
    v19 = 1;
    if (v29)
    {
      v30 = (unsigned __int16 *)v28;
      v31 = 2 * v29;
      do
      {
        v32 = *v30;
        if (v10)
          *v10 += 2;
        v40 = v10;
        WebCore::CSSPropertyParser::addProperty(a1, v32, a3, &v40, a5, 0);
        if (v40)
        {
          if (*v40 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v33);
          else
            *v40 -= 2;
        }
        ++v30;
        v31 -= 2;
      }
      while (v31);
    }
    v34 = WebCore::shorthandForProperty(a4);
    if ((_DWORD)v13)
    {
      v35 = (unsigned __int16 *)v34;
      v36 = 2 * v13;
      do
      {
        v37 = *v35;
        if (v11)
          *v11 += 2;
        v40 = v11;
        WebCore::CSSPropertyParser::addProperty(a1, v37, a4, &v40, a5, 0);
        if (v40)
        {
          if (*v40 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v13);
          else
            *v40 -= 2;
        }
        ++v35;
        v36 -= 2;
      }
      while (v36);
    }
  }
  if (v11)
  {
    if (*v11 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v13);
    else
      *v11 -= 2;
  }
  if (v10)
  {
    if (*v10 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v13);
    else
      *v10 -= 2;
  }
  if (v14)
  {
    if (*v14 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v13);
    else
      *v14 -= 2;
  }
  return v19;
}

uint64_t WebCore::shorthandForProperty(int a1)
{
  if ((a1 - 459) > 0x5E)
    return 0;
  else
    return (uint64_t)*(&off_1E3347EB0 + (__int16)(a1 - 459));
}

void WebCore::CSSPropertyParsing::consumeLineWidth(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  int *v12;
  int *v13;
  uint64_t v14;
  unsigned __int16 *v15;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v10 = *((_DWORD *)v7 + 4);
  if (v10 < 0)
  {
    v10 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v10;
  }
  v11 = (unsigned __int16)v10;
  if ((unsigned __int16)v10 - 493 >= 2 && (unsigned __int16)v10 != 97)
  {
LABEL_3:
    v8 = *((unsigned __int8 *)a2 + 48);
    v14 = 0;
    v15 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v15, (uint64_t)&v14, v8 | 0x100000100, &v13);
    if (v14)
      WTF::fastFree((WTF *)(v14 - 16), v9);
    if (v15)
      WTF::fastFree((WTF *)(v15 - 8), v9);
    *a3 = v13;
  }
  else
  {
    WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
    v12 = &WebCore::staticCSSValuePool[4 * v11 + 3088];
    *v12 += 2;
    *a3 = v12;
  }
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeSingleShadow@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, const WebCore::CSSParserContext *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  int *v12;
  uint64_t i;
  __int128 *v14;
  __int128 *v15;
  int v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  int *v32;
  int *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *result;
  int v37;
  int v38;
  int v39;
  int *v42;
  _DWORD *v43;
  _DWORD *v44;
  int *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  int *v54;
  uint64_t v55;
  unsigned __int16 *v56;

  v39 = (int)a3;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v7 = 0;
  v50 = 0;
  v51 = 0;
  v42 = 0;
  v43 = 0;
  v52 = 0;
  v48 = 0;
  v49 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  for (i = 3; i; --i)
  {
    v15 = *this;
    v14 = this[1];
    if (*this == v14)
      break;
    if (*this >= v14)
    {
      v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v16 = *(_DWORD *)v15 & 0x3F;
    if (v16 == 21)
      break;
    if (v16)
      goto LABEL_6;
    v27 = *((_DWORD *)v15 + 4);
    if (v27 < 0)
    {
      v27 = WebCore::cssValueKeywordID(*((_QWORD *)v15 + 1), *((unsigned int *)v15 + 1) | ((unint64_t)((*(_DWORD *)v15 >> 22) & 1) << 32));
      *((_DWORD *)v15 + 4) = v27;
    }
    if ((unsigned __int16)v27 != 8)
    {
LABEL_6:
      LOWORD(v56) = 1792;
      WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)this, (uint64_t)a2, &v56, &v54);
      v17 = v54;
      if (v54)
      {
        if (!v12)
        {
          *v54 += 2;
          v24 = 4;
          v45 = v17;
          v12 = v17;
          goto LABEL_49;
        }
      }
      else if (!v11 && !v10 && !v49 && !v9)
      {
        v18 = *((unsigned __int8 *)a2 + 48);
        v55 = 0;
        v56 = 0;
        WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v56, (uint64_t)&v55, v18 | 0x100000000, &v53);
        if (v55)
          WTF::fastFree((WTF *)(v55 - 16), a2);
        if (v56)
          WTF::fastFree((WTF *)(v56 - 8), a2);
        v11 = v53;
        if (v53)
        {
          v19 = *((unsigned __int8 *)a2 + 48);
          v55 = 0;
          v56 = 0;
          WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v56, (uint64_t)&v55, v19 | 0x100000000, &v53);
          if (v55)
            WTF::fastFree((WTF *)(v55 - 16), a2);
          if (v56)
            WTF::fastFree((WTF *)(v56 - 8), a2);
          v7 = v53;
          v53 = 0;
          if (v8)
          {
            if (*v8 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
              v29 = v53;
              v53 = 0;
              if (v29)
              {
                if (*v29 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, a2);
                else
                  *v29 -= 2;
              }
            }
            else
            {
              *v8 -= 2;
            }
          }
          v47 = v11;
          if (v7)
          {
            v20 = (int *)*this;
            if (*this >= this[1])
            {
              v20 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              }
            }
            v21 = *v20 & 0x3F;
            v22 = v51;
            if (v21 != 9 && v21 != 7)
            {
              if (v21 != 1)
                goto LABEL_35;
              v38 = WebCore::CSSParserToken::functionId(v20);
              if (!WebCore::CSSCalcValue::isCalcFunction(v38))
                goto LABEL_35;
            }
            v23 = *((unsigned __int8 *)a2 + 48);
            v55 = 0;
            v56 = 0;
            WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v56, (uint64_t)&v55, v23 | 0x100000100, &v53);
            if (v55)
              WTF::fastFree((WTF *)(v55 - 16), a2);
            if (v56)
              WTF::fastFree((WTF *)(v56 - 8), a2);
            v22 = v53;
            v53 = 0;
            if (v48)
            {
              if (*v48 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v48, a2);
                v30 = v53;
                v53 = 0;
                if (v30)
                {
                  if (*v30 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, a2);
                  else
                    *v30 -= 2;
                }
              }
              else
              {
                *v48 -= 2;
              }
            }
            v52 = v22;
            if (!v22)
            {
              v51 = 0;
              v52 = 0;
              v48 = 0;
              v49 = 0;
              v9 = 0;
              *a5 = 0;
              v24 = 1;
              v44 = v7;
              v46 = v11;
              v8 = v7;
            }
            else
            {
LABEL_35:
              v24 = 0;
              v9 = 0;
              v51 = v22;
              if (v52 && a4)
              {
                v25 = *((unsigned __int8 *)a2 + 48);
                v55 = 0;
                v56 = 0;
                WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v56, (uint64_t)&v55, v25 | 0x100000000, &v53);
                if (v55)
                  WTF::fastFree((WTF *)(v55 - 16), a2);
                if (v56)
                  WTF::fastFree((WTF *)(v56 - 8), a2);
                v9 = v53;
                v53 = 0;
                if (v50)
                {
                  if (*v50 == 2)
                  {
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, a2);
                    v31 = v53;
                    v53 = 0;
                    if (v31)
                    {
                      if (*v31 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, a2);
                      else
                        *v31 -= 2;
                    }
                  }
                  else
                  {
                    *v50 -= 2;
                  }
                }
                v24 = 0;
                v43 = v9;
                v44 = v7;
                v46 = v11;
                v50 = v9;
              }
              else
              {
                v44 = v7;
                v46 = v11;
              }
              v48 = v52;
              v49 = v52;
              v8 = v7;
            }
            v10 = v7;
          }
          else
          {
            v44 = 0;
            v8 = 0;
            v9 = 0;
            v49 = 0;
            v10 = 0;
            *a5 = 0;
            v24 = 1;
            v46 = v11;
          }
LABEL_49:
          v26 = v54;
          v54 = 0;
          if (v26)
          {
            if (*v26 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, a2);
            else
              *v26 -= 2;
          }
          if ((v24 | 4) != 4)
          {
            v32 = v45;
            v33 = v42;
            v34 = v50;
            v35 = v51;
            goto LABEL_86;
          }
          continue;
        }
        v46 = 0;
        v47 = 0;
        v9 = 0;
        v49 = 0;
        v10 = 0;
      }
      *a5 = 0;
      v24 = 1;
      goto LABEL_49;
    }
    if (!v39)
      goto LABEL_113;
    if (v42)
    {
      v32 = v45;
      v33 = v42;
      goto LABEL_114;
    }
    v28 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
    if ((v28 & 0xFF0000) != 0)
    {
      if ((unsigned __int16)v28 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1940ECA70);
      }
      v42 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v28 + 3088];
      *v42 += 2;
    }
    else
    {
      v42 = 0;
    }
  }
  if (!v46)
  {
LABEL_113:
    v32 = v45;
    v33 = v42;
LABEL_114:
    v34 = v50;
    v35 = v51;
    goto LABEL_115;
  }
  v32 = v45;
  v33 = v42;
  v34 = v50;
  v35 = v51;
  if (v44)
  {
    result = (_DWORD *)WTF::fastCompactMalloc((WTF *)0x38);
    *result = 2;
    v37 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
    *((_WORD *)result + 2) = -22528;
    *((_BYTE *)result + 6) = (v37 | 0x10000u) >> 16;
    *((_QWORD *)result + 1) = v47;
    *((_QWORD *)result + 2) = v7;
    *((_QWORD *)result + 3) = v51;
    *((_QWORD *)result + 4) = v43;
    *((_QWORD *)result + 5) = v42;
    *((_QWORD *)result + 6) = v45;
    *a5 = result;
    return result;
  }
LABEL_115:
  *a5 = 0;
LABEL_86:
  if (v34)
  {
    if (*v34 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, a2);
    else
      *v34 -= 2;
  }
  if (v35)
  {
    if (*v35 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, a2);
    else
      *v35 -= 2;
  }
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
    else
      *v7 -= 2;
  }
  result = v47;
  if (v47)
  {
    if (*v47 == 2)
      result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, a2);
    else
      *v47 -= 2;
  }
  if (v32)
  {
    if (*v32 == 2)
      result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, a2);
    else
      *v32 -= 2;
  }
  if (v33)
  {
    if (*v33 == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v33, a2);
    else
      *v33 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  char v6;
  unsigned int v7;
  int v10;

  v3 = *this;
  v2 = this[1];
  if (*this >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    return 0;
  v4 = *this;
  if (*this == v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v6 = 1;
    {
      v5 = v2;
    }
    else
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v5 = *this;
    }
  }
  else
  {
    v5 = (__int128 *)((char *)v4 + 24);
    *this = (__int128 *)((char *)v4 + 24);
  }
  while (1)
  {
    if (v5 < v2 || (v6 & 1) != 0)
    {
      if (v5 >= v2)
        v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v7 = *(_DWORD *)v5;
    }
    else
    {
      v7 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v7;
      v6 = 1;
    }
    if ((v7 & 0x3F) != 0x10)
      break;
    v5 = (__int128 *)((char *)*this + 24);
    *this = v5;
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    return 0x10000;
  v10 = *((_DWORD *)v4 + 4);
  if (v10 < 0)
  {
    v10 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v10;
  }
  return (unsigned __int16)v10 | 0x10000u;
}

uint64_t WebCore::CSSValuePool::createColorValue@<X0>(uint64_t this@<X0>, const WebCore::Color *a2@<X1>, int **a3@<X8>)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  char v21;
  _DWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  unint64_t *v32;
  int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  _OWORD *v47;
  uint64_t v48;
  int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v56;
  _DWORD *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unint64_t *v69;
  _DWORD *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  void *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  WTF *v90;
  int **v91;
  uint64_t *v92;
  unsigned int v93;
  unsigned __int16 v94;
  char v95;
  char v96;
  unsigned __int8 v97;
  __int128 v98;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == 0x11040000000000FFLL)
  {
    v49 = &dword_1ECE88BD8;
  }
  else
  {
    if (v5 != 0x11040000FFFFFFFFLL)
    {
      if (v5 == 0x1104000000000000)
      {
        v49 = &dword_1ECE88BB8;
        goto LABEL_73;
      }
      v6 = (uint64_t *)this;
      v7 = *(_QWORD *)this;
      v92 = (uint64_t *)this;
      if (*(_QWORD *)this)
      {
        if (*(_DWORD *)(v7 - 12) < 0x200u)
          goto LABEL_6;
        do
        {
          while (1)
          {
            v35 = (_QWORD *)v7;
            this = WTF::weakRandomNumber<unsigned int>();
            v7 = *v92;
            if (*v92)
              break;
            if (*v35 != 0x10000000000000 && (*v35 & 0x20000000000000) == 0)
            {
              v38 = 0;
              goto LABEL_47;
            }
          }
          v36 = v35[2 * (*(_DWORD *)(v7 - 8) & this)];
        }
        while (v36 == 0x10000000000000 || (v36 & 0x20000000000000) != 0);
        v35 += 2 * (*(_DWORD *)(v7 - 8) & this);
        v38 = (_QWORD *)(v7 + 16 * *(unsigned int *)(v7 - 4));
        if (v38 == v35)
        {
          v6 = v92;
          goto LABEL_6;
        }
LABEL_47:
        v6 = v92;
        if (v38 != v35)
        {
          this = (uint64_t)WTF::HashTable<WebCore::Color,WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WebCore::Color>,WTF::HashMap<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WebCore::Color>,WTF::HashTraits<WebCore::Color>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Color>>::remove(v92, v35);
          v6 = v92;
          v7 = *v92;
        }
        if (v7)
          goto LABEL_6;
      }
      v39 = WTF::fastMalloc((WTF *)0x90);
      v6 = v92;
      *(_QWORD *)(v39 + 16) = 0x10000000000000;
      *(_QWORD *)(v39 + 24) = 0;
      this = v39 + 16;
      *(_QWORD *)(this + 16) = 0x10000000000000;
      *(_QWORD *)(this + 24) = 0;
      *(_QWORD *)(this + 32) = 0x10000000000000;
      *(_QWORD *)(this + 40) = 0;
      *(_QWORD *)(this + 48) = 0x10000000000000;
      *(_QWORD *)(this + 56) = 0;
      *(_QWORD *)(this + 64) = 0x10000000000000;
      *(_QWORD *)(this + 72) = 0;
      *(_QWORD *)(this + 80) = 0x10000000000000;
      *(_QWORD *)(this + 88) = 0;
      *(_QWORD *)(this + 96) = 0x10000000000000;
      *(_QWORD *)(this + 104) = 0;
      *(_QWORD *)(this + 112) = 0x10000000000000;
      *(_QWORD *)(this + 120) = 0;
      *v92 = this;
      *(_DWORD *)(this - 4) = 8;
      *(_DWORD *)(*v92 - 8) = 7;
      *(_DWORD *)(*v92 - 16) = 0;
      *(_DWORD *)(*v92 - 12) = 0;
      v7 = *v92;
      if (*v92)
LABEL_6:
        v8 = *(_DWORD *)(v7 - 8);
      else
        v8 = 0;
      v93 = -1640531527;
      v94 = 0;
      v95 = 0;
      v9 = *(_QWORD *)a2;
      v10 = HIWORD(*(_QWORD *)a2);
      if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
      {
        v98 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
        v97 = HIBYTE(v9);
        v96 = v10;
        this = (uint64_t)WTF::add<WebCore::ColorComponents<float,4ul>,WebCore::ColorSpace,WTF::OptionSet<WebCore::Color::FlagsIncludingPrivate>>(&v93, &v98, &v97, &v96);
        LODWORD(v9) = v93;
        if (v95)
        {
          v54 = (v93 + v94) ^ ((v93 + v94) << 11);
          LODWORD(v9) = v54 + (v54 >> 17);
        }
        v6 = v92;
      }
      else
      {
        LODWORD(v9) = (v9 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v9 - 1640531527) << 16) ^ ((unsigned __int16)v9 - 1640531527);
        LODWORD(v9) = v9 + (v9 >> 11);
        if (BYTE6(v9))
        {
          do
          {
            v11 = (v9 + (v10 & -(char)v10)) ^ (((_DWORD)v9 + (v10 & -(char)v10)) << 16);
            LODWORD(v9) = v11 + (v11 >> 11);
            LODWORD(v10) = (v10 - 1) & v10;
          }
          while ((_BYTE)v10);
        }
      }
      v12 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * (_DWORD)v9)) >> 5);
      v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
      v14 = v13 ^ (v13 << 10);
      if (!v14)
        v14 = 0x800000;
      v15 = v14 & v8;
      v16 = (unint64_t *)(v7 + 16 * (v14 & v8));
      v17 = *v16;
      v18 = *(_QWORD *)a2;
      if (*v16 != 0x10000000000000)
      {
        v32 = 0;
        if ((v18 & 0x8000000000000) == 0)
        {
          v33 = 1;
          while (v17 != v18 || (v17 & 0x8000000000000) != 0)
          {
            if ((v17 & 0x20000000000000) != 0)
              v32 = v16;
            v15 = (v15 + v33) & v8;
            v16 = (unint64_t *)(v7 + 16 * v15);
            v17 = *v16;
            ++v33;
            if (*v16 == 0x10000000000000)
              goto LABEL_38;
          }
          goto LABEL_72;
        }
        v34 = 1;
        do
        {
          if ((v17 & 0x8000000000000) != 0
            && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 4)
            && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 8)
            && *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0xC))
          {
            if (*(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10))
            {
              v6 = v92;
              if (HIBYTE(v17) == HIBYTE(v18))
              {
                this = HIWORD(v17);
                if (BYTE6(v18) == BYTE6(v17))
                  goto LABEL_72;
              }
            }
            else
            {
              v6 = v92;
            }
          }
          if ((v17 & 0x20000000000000) != 0)
            v32 = v16;
          v15 = (v15 + v34) & v8;
          v16 = (unint64_t *)(v7 + 16 * v15);
          v17 = *v16;
          ++v34;
        }
        while (*v16 != 0x10000000000000);
LABEL_38:
        if (v32)
        {
          *v32 = 0x10000000000000;
          v32[1] = 0;
          --*(_DWORD *)(*v6 - 16);
          v18 = *(_QWORD *)a2;
          v16 = v32;
        }
      }
      if (v18 != 0x10000000000000)
      {
        *v16 = v18;
        if ((v18 & 0x8000000000000) != 0)
        {
          v50 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 + 1, v50));
        }
      }
      this = WTF::fastCompactMalloc((WTF *)0x10);
      v20 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
      {
        v52 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 + 1, v52));
      }
      *(_DWORD *)this = 2;
      v21 = *(_BYTE *)(this + 6);
      *(_WORD *)(this + 4) = 24;
      *(_BYTE *)(this + 6) = v21 & 0xFC;
      *(_QWORD *)(this + 8) = v20;
      v22 = (_DWORD *)v16[1];
      v16[1] = this;
      v23 = v92;
      if (v22)
      {
        if (*v22 == 2)
        {
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v19);
          v23 = v92;
        }
        else
        {
          *v22 -= 2;
        }
      }
      v24 = *v23;
      if (*v23)
        v25 = *(_DWORD *)(v24 - 12) + 1;
      else
        v25 = 1;
      *(_DWORD *)(v24 - 12) = v25;
      v26 = *v23;
      if (*v23)
        v27 = *(_DWORD *)(v26 - 12);
      else
        v27 = 0;
      v28 = (*(_DWORD *)(v26 - 16) + v27);
      v29 = *(unsigned int *)(v26 - 4);
      if (v29 > 0x400)
      {
        if (v29 <= 2 * v28)
          goto LABEL_53;
      }
      else if (3 * v29 <= 4 * v28)
      {
        if (!(_DWORD)v29)
        {
          v90 = (WTF *)(v26 - 16);
          v30 = *(_DWORD *)(v26 - 12);
          v31 = 8;
          goto LABEL_54;
        }
LABEL_53:
        v90 = (WTF *)(v26 - 16);
        v30 = *(_DWORD *)(v26 - 12);
        v31 = (_DWORD)v29 << (6 * v30 >= (2 * v29));
LABEL_54:
        v40 = WTF::fastMalloc((WTF *)(16 * v31 + 16));
        v41 = (WTF::StringImpl *)v92;
        if (v31)
        {
          if (v31 >= 4)
          {
            v42 = v31 & 0xFFFFFFFC;
            v47 = (_OWORD *)(v40 + 48);
            v48 = v42;
            do
            {
              *(v47 - 2) = xmmword_1969EDAE0;
              *(v47 - 1) = xmmword_1969EDAE0;
              *v47 = xmmword_1969EDAE0;
              v47[1] = xmmword_1969EDAE0;
              v47 += 4;
              v48 -= 4;
            }
            while (v48);
            if (v42 == v31)
              goto LABEL_59;
          }
          else
          {
            v42 = 0;
          }
          v43 = v31 - v42;
          v44 = (_QWORD *)(v40 + 16 * v42 + 24);
          do
          {
            *(v44 - 1) = 0x10000000000000;
            *v44 = 0;
            v44 += 2;
            --v43;
          }
          while (v43);
        }
LABEL_59:
        v91 = a3;
        *v92 = v40 + 16;
        *(_DWORD *)(v40 + 12) = v31;
        *(_DWORD *)(*v92 - 8) = v31 - 1;
        *(_DWORD *)(*v92 - 16) = 0;
        *(_DWORD *)(*v92 - 12) = v30;
        if ((_DWORD)v29)
        {
          v45 = 0;
          v46 = 0;
          while (1)
          {
            v58 = (unint64_t *)(v26 + 16 * v45);
            v59 = *v58;
            if ((*v58 & 0x20000000000000) == 0)
              break;
LABEL_106:
            if (++v45 == v29)
              goto LABEL_71;
          }
          if (v59 == 0x10000000000000)
          {
            v56 = v26 + 16 * v45;
            v57 = *(_DWORD **)(v56 + 8);
            *(_QWORD *)(v56 + 8) = 0;
            if (v57)
            {
              if (*v57 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v41);
                if ((*v58 & 0x8000000000000) != 0)
                {
                  v84 = (unsigned int *)(*v58 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v85 = __ldaxr(v84);
                    v86 = v85 - 1;
                  }
                  while (__stlxr(v86, v84));
                  if (!v86)
                  {
                    atomic_store(1u, v84);
                    WTF::fastFree((WTF *)v84, v75);
                  }
                }
                v41 = (WTF::StringImpl *)v92;
              }
              else
              {
                *v57 -= 2;
              }
            }
            goto LABEL_106;
          }
          v60 = *(_QWORD *)v41;
          if (*(_QWORD *)v41)
            v61 = *(_DWORD *)(v60 - 8);
          else
            v61 = 0;
          v62 = HIWORD(v59);
          if ((v59 & 0x8000000000000) != 0)
          {
            v79 = (*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 4) >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 4)
                                                                                 - 1640531527) << 16) ^ ((unsigned __int16)*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 4) - 1640531527);
            v80 = (*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 8) >> 5) & 0x7FFF800 ^ ((v79
                                                                                 + (unsigned __int16)*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 8)
                                                                                 + (v79 >> 11)) << 16) ^ (v79 + (unsigned __int16)*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 8) + (v79 >> 11));
            v81 = (*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 0xC) >> 5) & 0x7FFF800 ^ ((v80
                                                                                   + (unsigned __int16)*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 0xC)
                                                                                   + (v80 >> 11)) << 16) ^ (v80 + (unsigned __int16)*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 0xC) + (v80 >> 11));
            v82 = (*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 0x10) >> 5) & 0x7FFF800 ^ ((v81
                                                                                    + (unsigned __int16)*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 0x10)
                                                                                    + (v81 >> 11)) << 16) ^ (v81 + (unsigned __int16)*(_DWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 0x10) + (v81 >> 11));
            LODWORD(v59) = v82 + HIBYTE(v59) + (v82 >> 11);
            LODWORD(v59) = (v59 ^ ((_DWORD)v59 << 16)) + ((v59 ^ ((_DWORD)v59 << 16)) >> 11);
            if (BYTE6(v59))
            {
              do
              {
                v83 = (v59 + (v62 & -(char)v62)) ^ (((_DWORD)v59 + (v62 & -(char)v62)) << 16);
                LODWORD(v59) = v83 + (v83 >> 11);
                LODWORD(v62) = (v62 - 1) & v62;
              }
              while ((_BYTE)v62);
            }
          }
          else
          {
            LODWORD(v59) = (v59 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v59 - 1640531527) << 16) ^ ((unsigned __int16)v59 - 1640531527);
            LODWORD(v59) = v59 + (v59 >> 11);
            if (BYTE6(v59))
            {
              do
              {
                v63 = (v59 + (v62 & -(char)v62)) ^ (((_DWORD)v59 + (v62 & -(char)v62)) << 16);
                LODWORD(v59) = v63 + (v63 >> 11);
                LODWORD(v62) = (v62 - 1) & v62;
              }
              while ((_BYTE)v62);
            }
          }
          v64 = 0;
          v65 = (v59 ^ (8 * v59)) + ((v59 ^ (8 * (_DWORD)v59)) >> 5);
          v66 = (v65 ^ (4 * v65)) + ((v65 ^ (4 * v65)) >> 15);
          v67 = v66 ^ (v66 << 10);
          if (!v67)
            v67 = 0x800000;
          do
          {
            v68 = v67 & v61;
            v67 = ++v64 + v68;
          }
          while (*(_QWORD *)(v60 + 16 * v68) != 0x10000000000000);
          v69 = (unint64_t *)(v60 + 16 * v68);
          v70 = (_DWORD *)v69[1];
          v69[1] = 0;
          if (v70)
          {
            if (*v70 != 2)
            {
              *v70 -= 2;
              *v69 = 0;
              v71 = *v58;
              if (!*v58)
                goto LABEL_120;
              goto LABEL_119;
            }
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v70, v41);
            v41 = (WTF::StringImpl *)v92;
            if ((*v69 & 0x8000000000000) != 0)
            {
              v87 = (unsigned int *)(*v69 & 0xFFFFFFFFFFFFLL);
              do
              {
                v88 = __ldaxr(v87);
                v89 = v88 - 1;
              }
              while (__stlxr(v89, v87));
              v41 = (WTF::StringImpl *)v92;
              if (!v89)
              {
                atomic_store(1u, v87);
                WTF::fastFree((WTF *)v87, v92);
                v41 = (WTF::StringImpl *)v92;
              }
            }
          }
          *v69 = 0;
          v71 = *v58;
          if (!*v58)
          {
LABEL_120:
            v72 = v26 + 16 * v45;
            v73 = *(_QWORD *)(v72 + 8);
            *(_QWORD *)(v72 + 8) = 0;
            v69[1] = v73;
            v74 = *(_DWORD **)(v72 + 8);
            *(_QWORD *)(v72 + 8) = 0;
            if (v74)
            {
              if (*v74 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v74, v41);
                v41 = (WTF::StringImpl *)v92;
                if ((*v58 & 0x8000000000000) != 0)
                {
                  v76 = (unsigned int *)(*v58 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v77 = __ldaxr(v76);
                    v78 = v77 - 1;
                  }
                  while (__stlxr(v78, v76));
                  v41 = (WTF::StringImpl *)v92;
                  if (!v78)
                  {
                    atomic_store(1u, v76);
                    WTF::fastFree((WTF *)v76, v92);
                    v41 = (WTF::StringImpl *)v92;
                  }
                }
              }
              else
              {
                *v74 -= 2;
              }
            }
            if (v58 == v16)
              v46 = v69;
            goto LABEL_106;
          }
LABEL_119:
          *v69 = v71;
          *v58 = 0;
          goto LABEL_120;
        }
        v46 = 0;
LABEL_71:
        this = WTF::fastFree(v90, v41);
        v16 = v46;
        a3 = v91;
      }
LABEL_72:
      v49 = (int *)v16[1];
      goto LABEL_73;
    }
    v49 = &dword_1ECE88BC8;
  }
LABEL_73:
  *v49 += 2;
  *a3 = v49;
  return this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeFunction(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  __int128 *v6;
  __int128 *v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t result;
  __int128 *v14;
  unint64_t v15;
  __int128 *v16;
  WebCore::CSSPropertyParserHelpers *v17;
  __int128 *v18;
  int v19;
  __int128 *v20;
  WebCore::CSSPropertyParserHelpers *v21;
  WebCore::CSSPropertyParserHelpers *v22;
  WebCore::CSSPropertyParserHelpers *v23;

  v2 = *this;
  v3 = this[1];
  if (*this >= v3)
  {
    {
      v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v17 = (WebCore::CSSPropertyParserHelpers *)this;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      this = (__int128 **)v17;
      v2 = *(__int128 **)v17;
      v3 = (__int128 *)*((_QWORD *)v17 + 1);
    }
  }
  else
  {
    v4 = *this;
  }
  v5 = 0;
  v6 = (__int128 *)((char *)v4 + 24);
  while (1)
  {
    if (v2 == v3)
    {
      v19 = v5;
      v22 = (WebCore::CSSPropertyParserHelpers *)this;
      {
        v7 = v2;
        v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v2 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = (__int128 **)v22;
        v7 = *(__int128 **)v22;
      }
      v5 = v19;
    }
    else
    {
      v7 = (__int128 *)((char *)v2 + 24);
      *this = (__int128 *)((char *)v2 + 24);
    }
    v8 = *(_DWORD *)v2 >> 6;
    v9 = v8 == 2 ? -1 : 0;
    v10 = v8 == 1 ? 1 : v9;
    v5 += v10;
    if (!v5)
      break;
    v3 = this[1];
    v2 = v7;
    if (v7 >= v3)
    {
      {
        v18 = v7;
        v21 = (WebCore::CSSPropertyParserHelpers *)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v7 = v18;
        this = (__int128 **)v21;
      }
      goto LABEL_19;
    }
  }
  {
    v20 = v7;
    v23 = (WebCore::CSSPropertyParserHelpers *)this;
    WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    v7 = v20;
    this = (__int128 **)v23;
  }
  v7 = (__int128 *)((char *)v7 - 24);
LABEL_19:
  if (v6 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v6 = this[1];
  if (v7 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v7 = this[1];
  v11 = (unint64_t)this[1];
  if ((unint64_t)*this >= v11)
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v12 = *this;
  if ((*(_DWORD *)v12 & 0x3F) == 0x10)
  {
    v15 = (unint64_t)*this + 24;
    do
    {
      *this = (__int128 *)v15;
      if (v15 >= v11)
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v16 = (__int128 *)v15;
      v15 += 24;
    }
    while ((*(_DWORD *)v16 & 0x3F) == 0x10);
  }
  result = (uint64_t)v6 - 24;
  do
  {
    if (v6 >= v7)
      v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    else
      v14 = v6;
    v6 = (__int128 *)((char *)v6 + 24);
    result += 24;
  }
  while ((*(_DWORD *)v14 & 0x3F) == 0x10);
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumePositionCoordinates@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  __int128 *v12;
  int *result;
  __int128 *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  int *v18;
  int *v19;
  _BOOL4 v20;
  _BOOL4 v21;
  BOOL v22;
  int *v23;
  WTF::StringImpl *v24;
  WebCore::CSSPrimitiveValue *v25;
  WebCore::CSSPrimitiveValue *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  WebCore::CSSPrimitiveValue *v30;
  WebCore::CSSPrimitiveValue *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  WebCore::CSSPrimitiveValue *v37;
  WebCore::CSSPrimitiveValue *v38;

  v12 = (__int128 *)*a1;
  if ((unint64_t)v12 >= a1[1])
  {
    {
      v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_BYTE *)v12 & 0x3F) != 0)
    result = (int *)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a1, a2, 0, a3, 0, a5, 0, (uint64_t *)&v38);
  else
    result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)258,(WebCore::CSSValueID)254,(WebCore::CSSValueID)255,(WebCore::CSSValueID)259,(WebCore::CSSValueID)260>((int **)&v38, a1);
  if (v38)
  {
    v14 = (__int128 *)*a1;
    if (*a1 >= (unint64_t)a1[1])
    {
      {
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v14 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_BYTE *)v14 & 0x3F) != 0)
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a1, a2, 0, a3, 0, a5, 0, (uint64_t *)&v37);
    else
      WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)258,(WebCore::CSSValueID)254,(WebCore::CSSValueID)255,(WebCore::CSSValueID)259,(WebCore::CSSValueID)260>((int **)&v37, a1);
    if (v37)
    {
      WebCore::CSSPropertyParserHelpers::consumePositionComponent((uint64_t *)&v36, a1, a2, a3, a5);
      if (v36)
      {
        WebCore::CSSPropertyParserHelpers::consumePositionComponent((uint64_t *)&v35, a1, a2, a3, a5);
        v26 = v37;
        v25 = v38;
        v37 = 0;
        v38 = 0;
        v30 = v25;
        v31 = v26;
        v27 = (uint64_t)v36;
        v36 = 0;
        v32 = v27;
        v28 = v35;
        if (v35)
        {
          *v35 += 2;
          v33 = v28;
          v34 = 0;
          WebCore::CSSPropertyParserHelpers::positionFromFourValues(a6, (WTF::StringImpl *)&v30);
        }
        else
        {
          v33 = 0;
          v34 = 0;
          if (a4 == 1)
          {
            WebCore::CSSPropertyParserHelpers::backgroundPositionFromThreeValues((_DWORD *)a6, (WTF::StringImpl *)&v30);
          }
          else
          {
            *(_BYTE *)a6 = 0;
            *(_BYTE *)(a6 + 16) = 0;
          }
        }
        std::array<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,5ul>::~array((uint64_t)&v30, v24);
        v29 = v35;
        v35 = 0;
        if (v29)
        {
          if (*v29 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v16);
          else
            *v29 -= 2;
        }
      }
      else
      {
        WebCore::CSSPropertyParserHelpers::positionFromTwoValues((WebCore::CSSPropertyParserHelpers *)a6, v38, v37);
      }
      v17 = v36;
      v36 = 0;
      if (v17)
      {
        if (*v17 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v16);
        else
          *v17 -= 2;
      }
    }
    else
    {
      v19 = (int *)v38;
      v20 = (*((_WORD *)v38 + 2) & 0x7F) == 80;
      v21 = (*((_WORD *)v38 + 4) & 0xFFFE) == 254;
      v22 = !v20 || !v21;
      if (v20 && v21)
        v23 = &WebCore::staticCSSValuePool[4128];
      else
        v23 = (int *)v38;
      if (v22)
        v19 = &WebCore::staticCSSValuePool[4128];
      *v23 += 2;
      *v19 += 2;
      v30 = 0;
      v31 = 0;
      *(_QWORD *)a6 = v23;
      *(_QWORD *)(a6 + 8) = v19;
      *(_BYTE *)(a6 + 16) = 1;
      WebCore::CSSPropertyParserHelpers::PositionCoordinates::~PositionCoordinates((WebCore::CSSPropertyParserHelpers::PositionCoordinates *)&v30, v15);
    }
    v18 = (int *)v37;
    v37 = 0;
    if (v18)
    {
      if (*v18 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v16);
      else
        *v18 -= 2;
    }
    result = (int *)v38;
    v38 = 0;
    if (result)
    {
      if (*result == 2)
        return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v16);
      else
        *result -= 2;
    }
  }
  else
  {
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)258,(WebCore::CSSValueID)254,(WebCore::CSSValueID)255,(WebCore::CSSValueID)259,(WebCore::CSSValueID)260>(int **a1, uint64_t *a2)
{
  uint64_t result;
  __int128 *v5;
  int *v6;
  __int128 *v8;
  _DWORD *v9;
  int *v10;
  __int128 *v11;
  int *v12;

  result = *a2;
  if (*a2 >= (unint64_t)a2[1])
  {
    {
      result = (uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      result = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_BYTE *)result & 0x3F) != 0)
    goto LABEL_5;
  v5 = (__int128 *)*a2;
  if (*a2 >= (unint64_t)a2[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      result = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v5 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = result;
  }
  if ((unsigned __int16)result - 254 > 6 || ((1 << (result + 2)) & 0x73) == 0)
  {
LABEL_5:
    v6 = 0;
  }
  else
  {
    v8 = (__int128 *)*a2;
    if (*a2 == a2[1])
    {
      {
        v9 = (_DWORD *)*a2;
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v9 = (_DWORD *)*a2;
      }
    }
    else
    {
      v9 = (_DWORD *)v8 + 6;
      *a2 = (uint64_t)v8 + 24;
    }
    v10 = &dword_1ECE90000;
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if ((unint64_t)v9 >= a2[1])
      {
        v9 = v11;
        if ((v10[312] & 1) == 0)
        {
          v12 = v10;
          v11 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v11, 30, 0);
          v10 = v12;
          *((_BYTE *)v12 + 1248) = 1;
          v9 = v11;
        }
      }
      if ((*v9 & 0x3F) != 0x10)
        break;
      v9 = (_DWORD *)(*a2 + 24);
      *a2 = (uint64_t)v9;
    }
    if ((*(_DWORD *)v8 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v8 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
        *((_DWORD *)v8 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1940EDCA8);
      }
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v6 += 2;
  }
  *a1 = v6;
  return result;
}

void WebCore::CSSPropertyParserHelpers::PositionCoordinates::~PositionCoordinates(WebCore::CSSPropertyParserHelpers::PositionCoordinates *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  v4 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
}

uint64_t WebCore::SourceBrush::gradientIdentifier(WebCore::SourceBrush *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char *v5;

  if (*((_DWORD *)this + 20) != 1)
    return 0;
  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::TileController::TileController(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, char *))off_1E340FB70[v2])(&v5, (char *)this + 16);
  }
}

uint64_t WebCore::TileController::TileController(uint64_t a1, uint64_t a2, int a3)
{
  WebCore::TileGrid *v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E3411540;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(float *)(a1 + 36) = (*(float (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 152))(*(_QWORD *)(a2 + 48));
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (WebCore::TileGrid *)WTF::fastMalloc((WTF *)0xB8);
  *(_QWORD *)(a1 + 48) = WebCore::TileGrid::TileGrid(v5, (WebCore::TileController *)a1);
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_QWORD *)(a1 + 144) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(a1 + 184) = v7;
  *(_QWORD *)(a1 + 144) = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E3411938;
  v9[1] = WebCore::TileController::tileRevalidationTimerFired;
  v9[2] = 0;
  v9[3] = a1;
  *(_QWORD *)(a1 + 192) = v9;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E3411938;
  v10[1] = WebCore::TileController::tileSizeChangeTimerFired;
  v10[2] = 0;
  v10[3] = a1;
  *(_QWORD *)(a1 + 200) = off_1E3407128;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  v11 = *(unsigned int **)(StatusReg + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 200) = off_1E33DC988;
  *(_QWORD *)(a1 + 240) = v11;
  *(_QWORD *)(a1 + 248) = v10;
  *(_QWORD *)(a1 + 256) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 512;
  *(_BYTE *)(a1 + 300) = 3;
  *(_QWORD *)(a1 + 301) = 0;
  *(_QWORD *)(a1 + 307) = 0;
  *(_DWORD *)(a1 + 316) = a3;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  return a1;
}

{
  WebCore::TileGrid *v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E3411540;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(float *)(a1 + 36) = (*(float (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 152))(*(_QWORD *)(a2 + 48));
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (WebCore::TileGrid *)WTF::fastMalloc((WTF *)0xB8);
  *(_QWORD *)(a1 + 48) = WebCore::TileGrid::TileGrid(v5, (WebCore::TileController *)a1);
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_QWORD *)(a1 + 144) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(a1 + 184) = v7;
  *(_QWORD *)(a1 + 144) = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E3411938;
  v9[1] = WebCore::TileController::tileRevalidationTimerFired;
  v9[2] = 0;
  v9[3] = a1;
  *(_QWORD *)(a1 + 192) = v9;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E3411938;
  v10[1] = WebCore::TileController::tileSizeChangeTimerFired;
  v10[2] = 0;
  v10[3] = a1;
  *(_QWORD *)(a1 + 200) = off_1E3407128;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  v11 = *(unsigned int **)(StatusReg + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 200) = off_1E33DC988;
  *(_QWORD *)(a1 + 240) = v11;
  *(_QWORD *)(a1 + 248) = v10;
  *(_QWORD *)(a1 + 256) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 512;
  *(_BYTE *)(a1 + 300) = 3;
  *(_QWORD *)(a1 + 301) = 0;
  *(_QWORD *)(a1 + 307) = 0;
  *(_DWORD *)(a1 + 316) = a3;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  return a1;
}

double WebCore::IntPoint::operator CGPoint(int *a1)
{
  return (double)*a1;
}

double WebCore::IntSize::operator CGSize(int *a1)
{
  return (double)*a1;
}

uint64_t WebCore::PlatformCALayerClient::platformCALayerShouldPaintUsingCompositeCopy(WebCore::PlatformCALayerClient *this)
{
  return 0;
}

uint64_t WebCore::CredentialBase::password(WebCore::CredentialBase *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebCore::JSHTMLDocument::getOwnPropertySlot(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  return WebCore::JSHTMLDocument::legacyPlatformObjectGetOwnProperty(a1, a2, a3, a4, 0);
}

void WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope(WebCore::SQLiteStatementAutoResetScope *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    sqlite3_reset(*(sqlite3_stmt **)(v1 + 8));
    sqlite3_clear_bindings(*(sqlite3_stmt **)(v1 + 8));
  }
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    sqlite3_reset(*(sqlite3_stmt **)(v1 + 8));
    sqlite3_clear_bindings(*(sqlite3_stmt **)(v1 + 8));
  }
}

uint64_t WebCore::DisplayList::FillRectWithGradient::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 240))(a2, a1, *(_QWORD *)(a1 + 16));
}

uint64_t WebCore::PlatformMediaSessionManager::setVorbisDecoderEnabled(uint64_t this)
{
  WebCore::PlatformMediaSessionManager::m_vorbisDecoderEnabled = this;
  return this;
}

uint64_t WebCore::JSCSSStyleDeclaration::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSCSSStyleDeclaration::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSHTMLInputElement::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  result = WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) != 0 || v5 == 0)
    goto LABEL_6;
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(v5 - 79) & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    v9 = v5 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = v5 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
      v5 = v11;
      v9 = v12;
    }
    if (((*(_QWORD *)(v9 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) != 0)
    {
LABEL_16:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_6;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_6:
  v7 = *(_QWORD *)(a1 + 40);
  if ((v7 & 0xFFFE000000000002) == 0 && v7 != 0)
  {
    if ((v7 & 8) != 0)
    {
      if ((*(_BYTE *)(v7 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v10 = v7 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
        v10 = v7 & 0xFFFFFFFFFFFFC000;
      }
      if (((*(_QWORD *)(v10 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSIntersectionObserverEntry::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;

  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 24) + 48);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 8) == 0)
    {
      while (1)
      {
        v35 = v4;
        if ((*(_WORD *)(v4 + 28) & 0x80) != 0)
        {
          v37 = *(_QWORD *)(v4 + 200);
          if (!v37)
            goto LABEL_53;
          v36 = (uint64_t *)(v37 + 8);
        }
        else
        {
          v36 = (uint64_t *)(v4 + 32);
        }
        v4 = *v36;
        if (!v4)
          goto LABEL_53;
      }
    }
    v35 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
LABEL_53:
    if (v35 && !*(_BYTE *)(a2 + 130))
    {
      result = *(_QWORD *)(a2 + 120);
      v38 = *(_QWORD *)(result + 48);
      v39 = *(_DWORD *)(v38 + 4);
      v40 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
      v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
      v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
      v43 = v39 & ((v42 >> 31) ^ v42);
      v44 = v43;
      while (1)
      {
        v45 = *(_QWORD *)(v38 + 8 * v44 + 16);
        if (!v45)
          break;
        if (v35 == v45)
          goto LABEL_2;
        v44 = (v44 + 1) & v39;
        if (v44 == v43)
        {
          __break(0xC471u);
          JUMPOUT(0x1940EE580);
        }
      }
      result = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(a2 + 131))
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v35);
        ++*(_QWORD *)(a2 + 72);
      }
    }
  }
LABEL_2:
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 24);
  if (v5)
    v6 = *(_BYTE *)(a2 + 130) == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = *(_QWORD *)(a2 + 120);
    v7 = *(_QWORD *)(result + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v5 == v14)
        goto LABEL_16;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1940EE2ACLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_16:
  v15 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 32);
  if (v15)
    v16 = *(_BYTE *)(a2 + 130) == 0;
  else
    v16 = 0;
  if (v16)
  {
    result = *(_QWORD *)(a2 + 120);
    v17 = *(_QWORD *)(result + 48);
    v18 = *(_DWORD *)(v17 + 4);
    v19 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = v22;
    while (1)
    {
      v24 = *(_QWORD *)(v17 + 8 * v23 + 16);
      if (!v24)
        break;
      if (v15 == v24)
        goto LABEL_30;
      v23 = (v23 + 1) & v18;
      if (v23 == v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1940EE370);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v15);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_30:
  v25 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  if (v25)
    v26 = *(_BYTE *)(a2 + 130) == 0;
  else
    v26 = 0;
  if (v26)
  {
    result = *(_QWORD *)(a2 + 120);
    v27 = *(_QWORD *)(result + 48);
    v28 = *(_DWORD *)(v27 + 4);
    v29 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
    v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
    v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
    v32 = v28 & ((v31 >> 31) ^ v31);
    v33 = v32;
    while (1)
    {
      v34 = *(_QWORD *)(v27 + 8 * v33 + 16);
      if (!v34)
        break;
      if (v25 == v34)
        return result;
      v33 = (v33 + 1) & v28;
      if (v33 == v32)
      {
        __break(0xC471u);
        JUMPOUT(0x1940EE434);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v25);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSDocument::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = WebCore::JSDocument::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSNode::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 22) & 8) == 0)
    {
      while (1)
      {
        v3 = v2;
        if ((*(_WORD *)(v2 + 28) & 0x80) != 0)
        {
          v5 = *(_QWORD *)(v2 + 200);
          if (!v5)
            goto LABEL_11;
          v4 = (uint64_t *)(v5 + 8);
        }
        else
        {
          v4 = (uint64_t *)(v2 + 32);
        }
        v2 = *v4;
        if (!v2)
          goto LABEL_11;
      }
    }
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
LABEL_11:
    if (v3 && !*(_BYTE *)(a2 + 130))
    {
      result = *(_QWORD *)(a2 + 120);
      v6 = *(_QWORD *)(result + 48);
      v7 = *(_DWORD *)(v6 + 4);
      v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = v11;
      while (1)
      {
        v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
        if (!v13)
          break;
        if (v3 == v13)
          return result;
        v12 = (v12 + 1) & v7;
        if (v12 == v11)
        {
          __break(0xC471u);
          JUMPOUT(0x1940EE7E4);
        }
      }
      result = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(a2 + 131))
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v3);
        ++*(_QWORD *)(a2 + 72);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSNode::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v2 = *(_QWORD *)(result + 24);
  if ((*(_QWORD *)(v2 + 16) & 0x1000000000000) != 0)
  {
    v4 = *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFLL;
    v5 = (unsigned __int8 *)(v4 + 32);
    if (__ldaxr((unsigned __int8 *)(v4 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
LABEL_5:
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v4 + 16);
        v9 = v8 + 32 * v7;
        do
        {
          v10 = *(unsigned int *)(v8 + 20);
          if ((_DWORD)v10)
          {
            v11 = *(uint64_t **)(v8 + 8);
            v12 = 8 * v10;
            do
            {
              v13 = *v11++;
              result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 8) + 40))(*(_QWORD *)(v13 + 8), a2);
              v12 -= 8;
            }
            while (v12);
          }
          v8 += 32;
        }
        while (v8 != v9);
      }
      v14 = __ldxr(v5);
      if (v14 == 1)
      {
        if (!__stlxr(0, v5))
          return result;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
    result = MEMORY[0x19AEA534C](v4 + 32);
    goto LABEL_5;
  }
  return result;
}

uint64_t WebCore::JSEventListener::visitJSFunction(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    if (*(_QWORD *)v2)
    {
      if ((*(_BYTE *)(v2 + 8) & 3) == 0)
      {
        v3 = *(unint64_t **)(result + 48);
        if (v3)
        {
          if ((v3[1] & 3) == 0)
          {
            v4 = *v3;
            if (v4)
            {
              if ((v4 & 8) != 0)
              {
                if ((*(_BYTE *)(v4 - 79) & 1) == 0)
                  return JSC::SlotVisitor::appendSlow();
              }
              else
              {
                v5 = v4 & 0xFFFFFFFFFFFFC000;
                if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
                {
                  v8 = v4 & 0xFFFFFFFFFFFFC000;
                  v6 = v4;
                  v7 = a2;
                  result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v4 & 0xFFFFFFFFFFFFC000));
                  v5 = v8;
                  v4 = v6;
                  a2 = v7;
                }
                if (((*(_QWORD *)(v5 + 8 * ((v4 >> 10) & 0xF) + 40) >> (v4 >> 4)) & 1) == 0)
                  return JSC::SlotVisitor::appendSlow();
              }
              if (!*(_QWORD *)(a2 + 168))
                return result;
              return JSC::SlotVisitor::appendSlow();
            }
          }
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t *v3;

  v2 = *(_QWORD *)(result + 56);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = *(uint64_t **)(result + 48);
    if (v3)
    {
      if ((v3[1] & 3) != 0)
        v3 = 0;
      else
        v3 = (uint64_t *)*v3;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 24))(a2, v3);
  }
  return result;
}

uint64_t WebCore::JSHTMLElement::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  result = WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t JSC::AbstractSlotVisitor::addOpaqueRoot(JSC::AbstractSlotVisitor *this, void *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  uint64_t result;

  if (!a2 || *((_BYTE *)this + 130))
    return 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 15) + 48);
  v5 = *(_DWORD *)(v4 + 4);
  v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = v9;
  while (1)
  {
    v11 = *(void **)(v4 + 8 * v10 + 16);
    if (!v11)
      break;
    if (v11 == a2)
      return 0;
    v10 = (v10 + 1) & v5;
    if (v10 == v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1940EEBB8);
    }
  }
  result = WTF::ConcurrentPtrHashSet::addSlow();
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 131))
      (*(void (**)(JSC::AbstractSlotVisitor *, void *))(*(_QWORD *)this + 144))(this, a2);
    ++*((_QWORD *)this + 9);
    return 1;
  }
  return result;
}

uint64_t WebCore::JSMutationCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

uint64_t WebCore::JSStyleSheet::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSStyleSheet::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::CSSStyleSheet::ownerRule(WebCore::CSSStyleSheet *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 13);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::CSSStyleSheet::ownerNode(WebCore::CSSStyleSheet *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 12);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::`anonymous namespace'::ChildListRecord::visitNodesConcurrently(uint64_t this, JSC::AbstractSlotVisitor *a2, WebCore::NodeList *a3)
{
  uint64_t v4;
  uint64_t v5;
  JSC::AbstractSlotVisitor *v6;
  JSC::AbstractSlotVisitor *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v4 = this;
  v5 = *(_QWORD *)(this + 16);
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 22) & 8) == 0)
    {
      while (1)
      {
        v8 = v5;
        if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
        {
          v10 = *(_QWORD *)(v5 + 200);
          if (!v10)
            goto LABEL_15;
          v9 = (uint64_t *)(v10 + 8);
        }
        else
        {
          v9 = (uint64_t *)(v5 + 32);
        }
        v5 = *v9;
        if (!v5)
          goto LABEL_15;
      }
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
LABEL_15:
    if (v8 && !*((_BYTE *)a2 + 130))
    {
      this = *((_QWORD *)a2 + 15);
      v11 = *(_QWORD *)(this + 48);
      a3 = (WebCore::NodeList *)*(unsigned int *)(v11 + 4);
      v12 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = a3 & ((v14 >> 31) ^ v14);
      v16 = v15;
      while (1)
      {
        v17 = *(_QWORD *)(v11 + 8 * v16 + 16);
        if (!v17)
          break;
        if (v8 == v17)
          goto LABEL_2;
        v16 = (v16 + 1) & a3;
        if (v16 == v15)
        {
          __break(0xC471u);
          JUMPOUT(0x1940EEDACLL);
        }
      }
      this = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)this)
      {
        if (*((_BYTE *)a2 + 131))
          this = (*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v8);
        ++*((_QWORD *)a2 + 9);
      }
    }
  }
LABEL_2:
  v6 = *(JSC::AbstractSlotVisitor **)(v4 + 24);
  if (v6)
  v7 = *(JSC::AbstractSlotVisitor **)(v4 + 32);
  if (v7)
  return this;
}

uint64_t WebCore::StaticNodeList::length(WebCore::StaticNodeList *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t WebCore::StaticNodeList::item(WebCore::StaticNodeList *this, unsigned int a2)
{
  if (*((_DWORD *)this + 9) <= a2)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)this + 3) + 8 * a2);
}

uint64_t WebCore::JSMutationObserver::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
}

uint64_t WebCore::JSMutationRecord::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
}

uint64_t WebCore::JSDocument::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSDocument::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSPerformanceObserverCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

uint64_t WebCore::JSXMLHttpRequest::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::SlotVisitor>();
  return WebCore::JSXMLHttpRequest::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSXMLHttpRequest::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  WebCore::JSEventTarget::visitChildren(a1, a2);
  result = WebCore::JSXMLHttpRequest::visitAdditionalChildren<JSC::SlotVisitor>(a1, (JSC::AbstractSlotVisitor *)a2);
  v5 = *(_QWORD *)(a1 + 24);
  if ((*(_WORD *)(v5 + 24) & 0x700) == 0x400)
  {
    v12 = *(unsigned int *)(v5 + 496);
    if ((v12 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1940EEFB4);
    }
    v6 = 2 * v12;
  }
  else
  {
    v6 = 0;
  }
  if (*(_BYTE *)(a2 + 184))
  {
    *(_QWORD *)(a2 + 144) += v6;
    v7 = *(_QWORD *)(a2 + 160);
    v8 = __CFADD__(v7, v6);
    v9 = v7 + v6;
    if (v8)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v9;
  }
  v10 = *(_QWORD *)(a1 + 32);
  if ((v10 & 0xFFFE000000000002) == 0 && v10 != 0)
  {
    if ((v10 & 8) != 0)
    {
      result = 0;
      if ((*(_BYTE *)(v10 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      result = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000), *(_DWORD *)(a2 + 132));
      if (((*(_QWORD *)((v10 & 0xFFFFFFFFFFFFC000) + result + 8 * ((v10 >> 10) & 0xF) + 0x28) >> (v10 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSEventTarget::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSXMLHttpRequest::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, JSC::AbstractSlotVisitor *this)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 24);
  v4 = *(void **)(v3 + 32);
  if (v4)
  {
    v6 = result;
    result = JSC::AbstractSlotVisitor::addOpaqueRoot(this, v4);
    v3 = *(_QWORD *)(v6 + 24);
  }
  v5 = *(_QWORD *)(v3 + 464);
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 22) & 8) == 0)
    {
      while (1)
      {
        v7 = (void *)v5;
        if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
        {
          v9 = *(_QWORD *)(v5 + 200);
          if (!v9)
            return JSC::AbstractSlotVisitor::addOpaqueRoot(this, v7);
          v8 = (uint64_t *)(v9 + 8);
        }
        else
        {
          v8 = (uint64_t *)(v5 + 32);
        }
        v5 = *v8;
        if (!v5)
          return JSC::AbstractSlotVisitor::addOpaqueRoot(this, v7);
      }
    }
    v7 = *(void **)(*(_QWORD *)(v5 + 40) + 8);
    return JSC::AbstractSlotVisitor::addOpaqueRoot(this, v7);
  }
  return result;
}

uint64_t WebCore::JSPerformanceObserver::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 32) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32));
}

uint64_t WebCore::JSHistory::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(unint64_t **)(*(_QWORD *)(result + 24) + 40);
  if (v2)
  {
    if ((v2[1] & 3) == 0)
    {
      v3 = *v2;
      if (v3)
      {
        if ((v3 & 8) != 0)
        {
          if ((*(_BYTE *)(v3 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v4 = v3 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v7 = v3 & 0xFFFFFFFFFFFFC000;
            v5 = v3;
            v6 = a2;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v3 & 0xFFFFFFFFFFFFC000));
            v4 = v7;
            v3 = v5;
            a2 = v6;
          }
          if (((*(_QWORD *)(v4 + 8 * ((v3 >> 10) & 0xF) + 40) >> (v3 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSComputedStyleDeclaration::parentRule(WebCore::CSSComputedStyleDeclaration *this)
{
  return 0;
}

uint64_t WebCore::CSSStyleDeclaration::parentStyleSheet(WebCore::CSSStyleDeclaration *this)
{
  return 0;
}

uint64_t WebCore::CSSStyleDeclaration::parentElement(WebCore::CSSStyleDeclaration *this)
{
  return 0;
}

uint64_t WebCore::InlineCSSStyleDeclaration::parentElement(WebCore::InlineCSSStyleDeclaration *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::parentRule(WebCore::PropertySetCSSStyleDeclaration *this)
{
  return 0;
}

uint64_t WebCore::InlineCSSStyleDeclaration::parentStyleSheet(WebCore::InlineCSSStyleDeclaration *this)
{
  return 0;
}

uint64_t WebCore::StyledElement::additionalPresentationalHintStyle(WebCore::StyledElement *this)
{
  return 0;
}

uint64_t WebCore::DisplayList::Scale::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 632))(a2, a1);
}

BOOL WebCore::ResourceLoader::shouldIncludeCertificateInfo(WebCore::ResourceLoader *this)
{
  unsigned int v1;

  if ((*((_BYTE *)this + 1090) & 0x80) == 0)
    return 1;
  v1 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  return v1 != 0;
}

uint64_t WebCore::PlatformMediaSessionManager::setOpusDecoderEnabled(uint64_t this)
{
  WebCore::PlatformMediaSessionManager::m_opusDecoderEnabled = this;
  return this;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DataURLDecoder::decode(WTF::URL const&,WebCore::DataURLDecoder::ScheduleContext const&,WebCore::DataURLDecoder::ShouldValidatePadding,WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)> &&)::$_0,void>::call(uint64_t a1, double a2, double a3, float a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *result;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21[2];
  WTF::StringImpl *v22[2];
  uint64_t v23;
  unsigned __int8 v24;

  WebCore::DataURLDecoder::decodeSynchronously((WebCore::DataURLDecoder *)v21, *(WebCore::DataURLDecoder::DecodeTask **)(a1 + 8), a2, a3, a4);
  WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::HashTable((uint64_t *)&v20, (_QWORD **)(*(_QWORD *)(a1 + 8) + 64));
  v9 = v24;
  if (v24)
  {
    v10 = v21[0];
    v4 = v21[1];
    v5 = v22[0];
    v6 = v22[1];
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)v22 = 0u;
    v7 = v23;
    v23 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v11 + 80);
  *(_QWORD *)(v11 + 80) = 0;
  v13 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v13 = off_1E341D978;
  *(_BYTE *)(v13 + 8) = 0;
  *(_BYTE *)(v13 + 48) = 0;
  if (v9)
  {
    *(_QWORD *)(v13 + 8) = v10;
    *(_QWORD *)(v13 + 16) = v4;
    *(_QWORD *)(v13 + 24) = v5;
    *(_QWORD *)(v13 + 32) = v6;
    *(_QWORD *)(v13 + 40) = v7;
    *(_BYTE *)(v13 + 48) = 1;
    v6 = 0;
    v5 = 0;
    v4 = 0;
    v10 = 0;
  }
  *(_QWORD *)(v13 + 56) = v12;
  v19 = v13;
  WTF::RunLoop::dispatch();
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v9)
  {
    if (v6)
      WTF::fastFree(v6, v14);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v14);
        if (!v4)
          goto LABEL_17;
        goto LABEL_15;
      }
      *(_DWORD *)v5 -= 2;
    }
    if (!v4)
      goto LABEL_17;
LABEL_15:
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v4 -= 2;
LABEL_17:
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  result = v20;
  if (v20)
    result = (WTF::StringImpl *)WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable((uint64_t)v20, v14);
  if (v24)
  {
    v16 = v22[1];
    if (v22[1])
    {
      v22[1] = 0;
      LODWORD(v23) = 0;
      WTF::fastFree(v16, v14);
    }
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v21[1];
    v21[1] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = v21[0];
    v21[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ResourceRequestBase::httpHeaderFields(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return (uint64_t)this + 96;
}

double WebCore::ResourceLoadStatistics::reduceTimeResolution(double a1)
{
  return floor(a1 / 5.0) * 5.0;
}

uint64_t WebCore::TimerBase::stopSlowCase(WebCore::TimerBase *this)
{
  uint64_t result;
  void *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t **v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  double v17;
  __n128 v18;
  double v19;
  unsigned int *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  double v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;

  *((_QWORD *)this + 3) = 0;
  result = WTF::canCurrentThreadAccessThreadLocalData();
  if ((result & 1) == 0 && (webThreadStarted & 1) == 0)
  {
    result = WTF::linkedOnOrAfterSDKWithBehavior();
    if ((_DWORD)result)
    {
      __break(0xC471u);
      JUMPOUT(0x1940EF528);
    }
  }
  if (*((double *)this + 2) != 0.0)
    *((_QWORD *)this + 2) = 0;
  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) == 0)
    return result;
  v4 = *(double *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) + 8);
  if (v4 == 0.0)
    return result;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 96);
    if (v6)
      goto LABEL_12;
LABEL_39:
    v6 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v6 + 8) = 1;
    v22 = (unsigned int *)(v6 + 8);
    *(_QWORD *)v6 = off_1E31F4A70;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v23 = 0;
    *(_QWORD *)(v6 + 16) = v23;
    *(_QWORD *)v6 = off_1E3407108;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    v24 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v24 + 28) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)v24 = 0;
    *(_WORD *)(v24 + 24) = 0;
    if (WTF::isUIThread((WTF *)v24))
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v24, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
    }
    *(_QWORD *)(v6 + 48) = v24;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_BYTE *)(v6 + 88) = 0;
    if (pthread_main_np())
    {
      WebCore::sharedMainThreadStaticData = v6;
      do
        v25 = __ldaxr(v22);
      while (__stlxr(v25 + 1, v22));
    }
    v26 = *(unsigned int **)(v5 + 96);
    *(_QWORD *)(v5 + 96) = v6;
    if (v26)
    {
      v27 = v26 + 2;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v26 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
      }
    }
    goto LABEL_12;
  }
  v5 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)result);
  v6 = *(_QWORD *)(v5 + 96);
  if (!v6)
    goto LABEL_39;
LABEL_12:
  v7 = *(_QWORD *)(v6 + 48);
  v8 = *(_DWORD *)(v7 + 28);
  *(_DWORD *)(v7 + 28) = v8 + 1;
  v9 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
  if (v9)
    goto LABEL_77;
  v30 = bmalloc::api::isoAllocate();
  *(_DWORD *)v30 = 1;
  *(_QWORD *)(v30 + 8) = 0;
  *(_DWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = *(_QWORD *)(WebCore::threadGlobalData((WebCore *)v30) + 48);
  *(_QWORD *)(v30 + 32) = this;
  *(_DWORD *)(v30 + 40) = -1;
  v31 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v31 & 0xFF000000000000 | v30;
  v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
  if ((v31 & 0xFFFFFFFFFFFFLL) != 0)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      bmalloc::api::isoDeallocate((bmalloc::api *)v32, v3);
    }
  }
  v9 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
LABEL_77:
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
  }
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = v8;
  v11 = *(_DWORD *)(v9 + 40);
  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) == 0
    || (v35 = *(double *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) + 8), v35 == 0.0))
  {
    result = (uint64_t)WebCore::TimerBase::heapDelete(this, v3);
  }
  else
  {
    result = WebCore::TimerBase::hasValidHeapPosition(this, v3);
    if ((result & 1) == 0)
    {
      if (v35 >= v4)
      {
        v36 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
        if (v36)
        {
          do
            v37 = __ldaxr((unsigned int *)v36);
          while (__stlxr(v37 + 1, (unsigned int *)v36));
        }
        v38 = *(_QWORD *)(v36 + 8);
        *(_QWORD *)(v36 + 8) = 0xFFF0000000000000;
        WebCore::TimerBase::heapDecreaseKey((uint64_t)this, v12);
        v39 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
        if (v39)
        {
          do
            v40 = __ldaxr((unsigned int *)v39);
          while (__stlxr(v40 + 1, (unsigned int *)v39));
        }
        std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(**(unsigned int ***)(v39 + 24), (void *)(**(_QWORD **)(v39 + 24) + 8 * *(unsigned int *)(*(_QWORD *)(v39 + 24) + 12)), (uint64_t)&v45, *(unsigned int *)(*(_QWORD *)(v39 + 24) + 12));
        do
        {
          v41 = __ldaxr((unsigned int *)v39);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, (unsigned int *)v39));
        if (!v42)
        {
          atomic_store(1u, (unsigned int *)v39);
          bmalloc::api::isoDeallocate((bmalloc::api *)v39, v12);
        }
        *(_QWORD *)(v36 + 8) = v38;
        do
        {
          v43 = __ldaxr((unsigned int *)v36);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, (unsigned int *)v36));
        if (!v44)
        {
          atomic_store(1u, (unsigned int *)v36);
          bmalloc::api::isoDeallocate((bmalloc::api *)v36, v12);
        }
      }
      result = WebCore::TimerBase::heapDecreaseKey((uint64_t)this, v12);
    }
  }
  if (v11 && *(_DWORD *)(v9 + 40))
    goto LABEL_78;
  result = WebCore::threadGlobalData((WebCore *)result);
  v13 = *(uint64_t ***)(result + 48);
  if (!v13[2])
    goto LABEL_78;
  while (1)
  {
    if (!*((_DWORD *)v13 + 3))
      goto LABEL_22;
    v14 = **v13;
    if (*(_QWORD *)(v14 + 32))
      break;
    result = (uint64_t)WebCore::TimerBase::heapDeleteNullMin(v13);
  }
  if (*((_BYTE *)v13 + 24))
  {
LABEL_22:
    v13[4] = 0;
    result = (*(uint64_t (**)(uint64_t *))(*v13[2] + 32))(v13[2]);
    goto LABEL_23;
  }
  v17 = *(double *)(v14 + 8);
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
  v19 = *((double *)v13 + 4);
  if (v19 == 0.0 || v19 > v18.n128_f64[0] || v18.n128_f64[0] < v17)
  {
    *((double *)v13 + 4) = v17;
    v18.n128_f64[0] = v17 - v18.n128_f64[0];
    if (v18.n128_f64[0] < 0.0)
      v18.n128_f64[0] = 0.0;
    result = (*(uint64_t (**)(uint64_t *, __n128))(*v13[2] + 24))(v13[2], v18);
  }
LABEL_23:
  if (v9)
  {
LABEL_78:
    do
    {
      v15 = __ldaxr((unsigned int *)v9);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v9));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v9);
      return bmalloc::api::isoDeallocate((bmalloc::api *)v9, v12);
    }
  }
  return result;
}

uint64_t WebCore::DisplayList::ClipRoundedRect::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 464))(a2, a1);
}

void WebCore::LocalFrameView::setCustomSizeForResizeEvent(WebCore::LocalFrameView *this, uint64_t a2)
{
  if (!*((_BYTE *)this + 1204))
    *((_BYTE *)this + 1204) = 1;
  *(_QWORD *)((char *)this + 1196) = a2;
  WebCore::LocalFrameView::scheduleResizeEventIfNeeded(this);
}

uint64_t WebCore::SelectorPseudoElementMapHash::hash(WebCore::SelectorPseudoElementMapHash *this, const char *a2)
{
  switch((int)a2)
  {
    case 1:
      return a2
           + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
    case 2:
      goto LABEL_36;
    case 3:
      goto LABEL_35;
    case 4:
      goto LABEL_34;
    case 5:
      goto LABEL_33;
    case 6:
      goto LABEL_32;
    case 7:
      goto LABEL_31;
    case 8:
      goto LABEL_30;
    case 9:
      goto LABEL_29;
    case 10:
      goto LABEL_28;
    case 11:
      goto LABEL_27;
    case 12:
      goto LABEL_26;
    case 13:
      goto LABEL_25;
    case 14:
      goto LABEL_24;
    case 15:
      goto LABEL_23;
    case 16:
      goto LABEL_22;
    case 17:
      goto LABEL_21;
    case 18:
      goto LABEL_20;
    case 19:
      goto LABEL_19;
    case 20:
      goto LABEL_18;
    case 21:
      goto LABEL_17;
    case 22:
      goto LABEL_16;
    case 23:
      goto LABEL_15;
    case 24:
      goto LABEL_14;
    case 25:
      goto LABEL_13;
    case 26:
      goto LABEL_12;
    case 27:
      goto LABEL_11;
    case 28:
      goto LABEL_10;
    case 29:
      goto LABEL_9;
    case 30:
      goto LABEL_8;
    case 31:
      goto LABEL_7;
    case 32:
      goto LABEL_6;
    case 33:
      goto LABEL_5;
    case 34:
      goto LABEL_4;
    case 35:
      goto LABEL_3;
    case 36:
      goto LABEL_2;
    case 37:
      goto LABEL_42;
    case 38:
      goto LABEL_41;
    case 39:
      goto LABEL_40;
    case 40:
      goto LABEL_39;
    default:
      LODWORD(a2) = WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 40)]
                  + (_DWORD)a2;
LABEL_39:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 39)];
LABEL_40:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 38)];
LABEL_41:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 37)];
LABEL_42:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 36)];
LABEL_2:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 35)];
LABEL_3:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 34)];
LABEL_4:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 33)];
LABEL_5:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 32)];
LABEL_6:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 31)];
LABEL_7:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 30)];
LABEL_8:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 29)];
LABEL_9:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 28)];
LABEL_10:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 27)];
LABEL_11:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 26)];
LABEL_12:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 25)];
LABEL_13:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 24)];
LABEL_14:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 23)];
LABEL_15:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 22)];
LABEL_16:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 21)];
LABEL_17:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 20)];
LABEL_18:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 19)];
LABEL_19:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 18)];
LABEL_20:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 17)];
LABEL_21:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 16)];
LABEL_22:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 15)];
LABEL_23:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 14)];
LABEL_24:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 13)];
LABEL_25:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 12)];
LABEL_26:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 11)];
LABEL_27:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 10)];
LABEL_28:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 9)];
LABEL_29:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 8)];
LABEL_30:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 7)];
LABEL_31:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 6)];
LABEL_32:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 5)];
LABEL_33:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 4)];
LABEL_34:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 3)];
LABEL_35:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 2)];
LABEL_36:
      LODWORD(a2) = (_DWORD)a2
                  + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 1)];
      return a2
           + WebCore::SelectorPseudoElementMapHash::hash(char const*,unsigned int)::asso_values[*(unsigned __int8 *)this];
  }
}

WebCore::ResourceResponseBase *WebCore::ResourceResponseBase::url(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  return this;
}

uint64_t WebCore::JSDocumentPrototype::finishCreation(WebCore::JSDocumentPrototype *this, JSC::VM *a2)
{
  int *v4;
  char *v5;
  char **v6;
  uint64_t v7;
  char *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Document *v21;
  WebCore::Quirks *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::Document *v29;
  WebCore::Quirks *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::Document *v37;
  WebCore::Quirks *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::Document *v60;
  WebCore::Quirks *v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::Document *v68;
  WebCore::Quirks *v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::Document *v76;
  WebCore::Quirks *v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WebCore::Document *v84;
  WebCore::Quirks *v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WebCore::Document *v92;
  WebCore::Quirks *v93;
  WTF::StringImpl *v94;
  int v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::Document *v100;
  WebCore::Quirks *v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WebCore::Document *v108;
  WebCore::Quirks *v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WebCore::Document *v116;
  WebCore::Quirks *v117;
  WTF::StringImpl *v118;
  int v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WebCore::Document *v124;
  WebCore::Quirks *v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WebCore::Document *v132;
  WebCore::Quirks *v133;
  WTF::StringImpl *v134;
  int v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WebCore::Document *v140;
  WebCore::Quirks *v141;
  WTF::StringImpl *v142;
  int v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  int v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  int v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  WebCore::Document *v156;
  WebCore::Quirks *v157;
  WTF::StringImpl *v158;
  int v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  int v164;
  WTF::StringImpl *v165;
  uint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  int v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  int v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  int v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  int v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  int v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  unint64_t v194;
  size_t v195;
  unint64_t v196;
  int v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  unint64_t v206;
  JSC::Structure *v207;
  int v208;
  unint64_t v209;
  WTF::StringImpl *v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  JSC::Structure *v213;
  int v214;
  uint64_t result;
  WTF::StringImpl *v216;
  WebCore::JSDocumentPrototype *v217;
  uint64_t v218;
  int *v219;
  JSC::Structure **v220;
  int *v221;
  int v222;
  int v223;
  JSC::Structure *v224;
  int v225;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = (int *)((char *)a2 + 93124);
  v5 = (char *)a2 + 41952;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary(this, a2);
  v6 = &WebCore::JSDocumentPrototypeTableValues;
  v7 = 237;
  do
  {
    v8 = v6[1];
    if (v8)
    {
      if (v8 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)a2 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v9 = v216;
      JSC::reifyStaticProperty(a2, (uint64_t)&WebCore::JSDocument::s_info, (unint64_t *)&v216, (uint64_t)v6, (unsigned __int8 *)this);
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v10);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    v6 += 5;
    --v7;
  }
  while (v7);
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v11 && *(_BYTE *)(v11 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1600);
  }
  v12 = v11 - 192;
  if (!v11)
    v12 = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 680) + 712);
  v14 = (v13 & 0x10000000000) == 0;
  if ((v13 & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v15 = v216;
    v16 = *v4;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v16;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v17);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v18 && *(_BYTE *)(v18 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1620);
  }
  v19 = v18 - 192;
  if (!v18)
    v19 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v19 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_36;
  v20 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v20 && *(_BYTE *)(v20 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1988);
  }
  v21 = (WebCore::Document *)(v20 - 192);
  if (!v20)
    v21 = 0;
  v22 = (WebCore::Quirks *)*((_QWORD *)v21 + 86);
  if (!v22)
    v22 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v21);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v22))
  {
LABEL_36:
    WTF::AtomStringImpl::addLiteral();
    v23 = v216;
    v24 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v24;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v25);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  v26 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v26 && *(_BYTE *)(v26 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1640);
  }
  v27 = v26 - 192;
  if (!v26)
    v27 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v27 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_51;
  v28 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v28 && *(_BYTE *)(v28 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F19A8);
  }
  v29 = (WebCore::Document *)(v28 - 192);
  if (!v28)
    v29 = 0;
  v30 = (WebCore::Quirks *)*((_QWORD *)v29 + 86);
  if (!v30)
    v30 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v29);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v30))
  {
LABEL_51:
    WTF::AtomStringImpl::addLiteral();
    v31 = v216;
    v32 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v32;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v33);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  v34 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v34 && *(_BYTE *)(v34 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1660);
  }
  v35 = v34 - 192;
  if (!v34)
    v35 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v35 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_66;
  v36 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v36 && *(_BYTE *)(v36 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F19C8);
  }
  v37 = (WebCore::Document *)(v36 - 192);
  if (!v36)
    v37 = 0;
  v38 = (WebCore::Quirks *)*((_QWORD *)v37 + 86);
  if (!v38)
    v38 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v37);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v38))
  {
LABEL_66:
    WTF::AtomStringImpl::addLiteral();
    v39 = v216;
    v40 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v40;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v41);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  v42 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v42 && *(_BYTE *)(v42 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1680);
  }
  v43 = v42 - 192;
  if (!v42)
    v43 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v43 + 680) + 704) & 0x400) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v44 = v216;
    v45 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v45;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v46);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  v47 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v47 && *(_BYTE *)(v47 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F16A0);
  }
  v48 = v47 - 192;
  if (!v47)
    v48 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v48 + 680) + 688) & 0x200000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v49 = v216;
    v50 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v50;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v51);
      else
        *(_DWORD *)v49 -= 2;
    }
  }
  v52 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v52 && *(_BYTE *)(v52 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F16C0);
  }
  v53 = v52 - 192;
  if (!v52)
    v53 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v53 + 680) + 712) & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v54 = v216;
    v55 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v55;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v56);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  v57 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v57 && *(_BYTE *)(v57 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F16E0);
  }
  v58 = v57 - 192;
  if (!v57)
    v58 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v58 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_105;
  v59 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v59 && *(_BYTE *)(v59 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F19E8);
  }
  v60 = (WebCore::Document *)(v59 - 192);
  if (!v59)
    v60 = 0;
  v61 = (WebCore::Quirks *)*((_QWORD *)v60 + 86);
  if (!v61)
    v61 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v60);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v61))
  {
LABEL_105:
    WTF::AtomStringImpl::addLiteral();
    v62 = v216;
    v63 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v63;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v64);
      else
        *(_DWORD *)v62 -= 2;
    }
  }
  v65 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v65 && *(_BYTE *)(v65 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1700);
  }
  v66 = v65 - 192;
  if (!v65)
    v66 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v66 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_120;
  v67 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v67 && *(_BYTE *)(v67 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1A08);
  }
  v68 = (WebCore::Document *)(v67 - 192);
  if (!v67)
    v68 = 0;
  v69 = (WebCore::Quirks *)*((_QWORD *)v68 + 86);
  if (!v69)
    v69 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v68);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v69))
  {
LABEL_120:
    WTF::AtomStringImpl::addLiteral();
    v70 = v216;
    v71 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v71;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v72);
      else
        *(_DWORD *)v70 -= 2;
    }
  }
  v73 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v73 && *(_BYTE *)(v73 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1720);
  }
  v74 = v73 - 192;
  if (!v73)
    v74 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v74 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_135;
  v75 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v75 && *(_BYTE *)(v75 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1A28);
  }
  v76 = (WebCore::Document *)(v75 - 192);
  if (!v75)
    v76 = 0;
  v77 = (WebCore::Quirks *)*((_QWORD *)v76 + 86);
  if (!v77)
    v77 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v76);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v77))
  {
LABEL_135:
    WTF::AtomStringImpl::addLiteral();
    v78 = v216;
    v79 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v79;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v80);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  v81 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v81 && *(_BYTE *)(v81 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1740);
  }
  v82 = v81 - 192;
  if (!v81)
    v82 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v82 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_150;
  v83 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v83 && *(_BYTE *)(v83 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1A48);
  }
  v84 = (WebCore::Document *)(v83 - 192);
  if (!v83)
    v84 = 0;
  v85 = (WebCore::Quirks *)*((_QWORD *)v84 + 86);
  if (!v85)
    v85 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v84);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v85))
  {
LABEL_150:
    WTF::AtomStringImpl::addLiteral();
    v86 = v216;
    v87 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v87;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v88);
      else
        *(_DWORD *)v86 -= 2;
    }
  }
  v89 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v89 && *(_BYTE *)(v89 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1760);
  }
  v90 = v89 - 192;
  if (!v89)
    v90 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v90 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_165;
  v91 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v91 && *(_BYTE *)(v91 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1A68);
  }
  v92 = (WebCore::Document *)(v91 - 192);
  if (!v91)
    v92 = 0;
  v93 = (WebCore::Quirks *)*((_QWORD *)v92 + 86);
  if (!v93)
    v93 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v92);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v93))
  {
LABEL_165:
    WTF::AtomStringImpl::addLiteral();
    v94 = v216;
    v95 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v95;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
        WTF::StringImpl::destroy(v94, v96);
      else
        *(_DWORD *)v94 -= 2;
    }
  }
  v97 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v97 && *(_BYTE *)(v97 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1780);
  }
  v98 = v97 - 192;
  if (!v97)
    v98 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v98 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_180;
  v99 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v99 && *(_BYTE *)(v99 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1A88);
  }
  v100 = (WebCore::Document *)(v99 - 192);
  if (!v99)
    v100 = 0;
  v101 = (WebCore::Quirks *)*((_QWORD *)v100 + 86);
  if (!v101)
    v101 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v100);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v101))
  {
LABEL_180:
    WTF::AtomStringImpl::addLiteral();
    v102 = v216;
    v103 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v103;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        WTF::StringImpl::destroy(v102, v104);
      else
        *(_DWORD *)v102 -= 2;
    }
  }
  v105 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v105 && *(_BYTE *)(v105 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F17A0);
  }
  v106 = v105 - 192;
  if (!v105)
    v106 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v106 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_195;
  v107 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v107 && *(_BYTE *)(v107 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1AA8);
  }
  v108 = (WebCore::Document *)(v107 - 192);
  if (!v107)
    v108 = 0;
  v109 = (WebCore::Quirks *)*((_QWORD *)v108 + 86);
  if (!v109)
    v109 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v108);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v109))
  {
LABEL_195:
    WTF::AtomStringImpl::addLiteral();
    v110 = v216;
    v111 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v111;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
        WTF::StringImpl::destroy(v110, v112);
      else
        *(_DWORD *)v110 -= 2;
    }
  }
  v113 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v113 && *(_BYTE *)(v113 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F17C0);
  }
  v114 = v113 - 192;
  if (!v113)
    v114 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v114 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_210;
  v115 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v115 && *(_BYTE *)(v115 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1AC8);
  }
  v116 = (WebCore::Document *)(v115 - 192);
  if (!v115)
    v116 = 0;
  v117 = (WebCore::Quirks *)*((_QWORD *)v116 + 86);
  if (!v117)
    v117 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v116);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v117))
  {
LABEL_210:
    WTF::AtomStringImpl::addLiteral();
    v118 = v216;
    v119 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v119;
    if (v118)
    {
      if (*(_DWORD *)v118 == 2)
        WTF::StringImpl::destroy(v118, v120);
      else
        *(_DWORD *)v118 -= 2;
    }
  }
  v121 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v121 && *(_BYTE *)(v121 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F17E0);
  }
  v122 = v121 - 192;
  if (!v121)
    v122 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v122 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_225;
  v123 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v123 && *(_BYTE *)(v123 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1AE8);
  }
  v124 = (WebCore::Document *)(v123 - 192);
  if (!v123)
    v124 = 0;
  v125 = (WebCore::Quirks *)*((_QWORD *)v124 + 86);
  if (!v125)
    v125 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v124);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v125))
  {
LABEL_225:
    WTF::AtomStringImpl::addLiteral();
    v126 = v216;
    v127 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v127;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2)
        WTF::StringImpl::destroy(v126, v128);
      else
        *(_DWORD *)v126 -= 2;
    }
  }
  v129 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v129 && *(_BYTE *)(v129 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1800);
  }
  v130 = v129 - 192;
  if (!v129)
    v130 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v130 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_240;
  v131 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v131 && *(_BYTE *)(v131 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1B08);
  }
  v132 = (WebCore::Document *)(v131 - 192);
  if (!v131)
    v132 = 0;
  v133 = (WebCore::Quirks *)*((_QWORD *)v132 + 86);
  if (!v133)
    v133 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v132);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v133))
  {
LABEL_240:
    WTF::AtomStringImpl::addLiteral();
    v134 = v216;
    v135 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v135;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2)
        WTF::StringImpl::destroy(v134, v136);
      else
        *(_DWORD *)v134 -= 2;
    }
  }
  v137 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v137 && *(_BYTE *)(v137 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1820);
  }
  v138 = v137 - 192;
  if (!v137)
    v138 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v138 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_255;
  v139 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v139 && *(_BYTE *)(v139 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1B28);
  }
  v140 = (WebCore::Document *)(v139 - 192);
  if (!v139)
    v140 = 0;
  v141 = (WebCore::Quirks *)*((_QWORD *)v140 + 86);
  if (!v141)
    v141 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v140);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v141))
  {
LABEL_255:
    WTF::AtomStringImpl::addLiteral();
    v142 = v216;
    v143 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v143;
    if (v142)
    {
      if (*(_DWORD *)v142 == 2)
        WTF::StringImpl::destroy(v142, v144);
      else
        *(_DWORD *)v142 -= 2;
    }
  }
  v145 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v145 && *(_BYTE *)(v145 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1840);
  }
  v146 = v145 - 192;
  if (!v145)
    v146 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v146 + 680) + 696) & 0x800000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v147 = v216;
    v148 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v148;
    if (v147)
    {
      if (*(_DWORD *)v147 == 2)
        WTF::StringImpl::destroy(v147, v149);
      else
        *(_DWORD *)v147 -= 2;
    }
  }
  v150 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v150 && *(_BYTE *)(v150 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1860);
  }
  v151 = v150 - 192;
  if (!v150)
    v151 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v151 + 680) + 712) & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v152 = v216;
    v153 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v153;
    if (v152)
    {
      if (*(_DWORD *)v152 == 2)
        WTF::StringImpl::destroy(v152, v154);
      else
        *(_DWORD *)v152 -= 2;
    }
  }
  v155 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v155 && *(_BYTE *)(v155 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1880);
  }
  v156 = (WebCore::Document *)(v155 - 192);
  if (!v155)
    v156 = 0;
  v157 = (WebCore::Quirks *)*((_QWORD *)v156 + 86);
  if (!v157)
    v157 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v156);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v157))
  {
    WTF::AtomStringImpl::addLiteral();
    v158 = v216;
    v159 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v159;
    if (v158)
    {
      if (*(_DWORD *)v158 == 2)
        WTF::StringImpl::destroy(v158, v160);
      else
        *(_DWORD *)v158 -= 2;
    }
  }
  v161 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v161 && *(_BYTE *)(v161 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F18A0);
  }
  v162 = v161 - 192;
  if (!v161)
    v162 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v162 + 680) + 696) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v163 = v216;
    v164 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v164;
    if (v163)
    {
      if (*(_DWORD *)v163 == 2)
        WTF::StringImpl::destroy(v163, v165);
      else
        *(_DWORD *)v163 -= 2;
    }
  }
  v166 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v166 && *(_BYTE *)(v166 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F18C0);
  }
  v167 = v166 - 192;
  if (!v166)
    v167 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v167 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v168 = v216;
    v169 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v169;
    if (v168)
    {
      if (*(_DWORD *)v168 == 2)
        WTF::StringImpl::destroy(v168, v170);
      else
        *(_DWORD *)v168 -= 2;
    }
  }
  v171 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v171 && *(_BYTE *)(v171 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F18E0);
  }
  v172 = v171 - 192;
  if (!v171)
    v172 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v172 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v173 = v216;
    v174 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v174;
    if (v173)
    {
      if (*(_DWORD *)v173 == 2)
        WTF::StringImpl::destroy(v173, v175);
      else
        *(_DWORD *)v173 -= 2;
    }
  }
  v176 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v176 && *(_BYTE *)(v176 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1900);
  }
  v177 = v176 - 192;
  if (!v176)
    v177 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v177 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v178 = v216;
    v179 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v179;
    if (v178)
    {
      if (*(_DWORD *)v178 == 2)
        WTF::StringImpl::destroy(v178, v180);
      else
        *(_DWORD *)v178 -= 2;
    }
  }
  v181 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v181 && *(_BYTE *)(v181 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1920);
  }
  v182 = v181 - 192;
  if (!v181)
    v182 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v182 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v183 = v216;
    v184 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v184;
    if (v183)
    {
      if (*(_DWORD *)v183 == 2)
        WTF::StringImpl::destroy(v183, v185);
      else
        *(_DWORD *)v183 -= 2;
    }
  }
  v186 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v186 && *(_BYTE *)(v186 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F1940);
  }
  v187 = v186 - 192;
  if (!v186)
    v187 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v187 + 680) + 712) & 0x4000000000000) != 0)
  {
    if (!v14)
      goto LABEL_335;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v188 = v216;
    v189 = *v4;
    *v4 = 1;
    LODWORD(v216) = -1;
    WORD2(v216) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v189;
    if (v188)
    {
      if (*(_DWORD *)v188 == 2)
        WTF::StringImpl::destroy(v188, v190);
      else
        *(_DWORD *)v188 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), a2, this);
LABEL_335:
  v191 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v192 = *(_QWORD *)(v191 + 56);
  v193 = *(_DWORD *)(v191 + 932);
  if (v193)
    v194 = 16 * (v193 & 0xFFFFFFFE);
  else
    v194 = 0;
  v195 = 8 * *(unsigned __int8 *)(v194 + 14);
  v196 = JSC::allocateCell<JSC::JSFinalObject>(v192, v195 + 16);
  v197 = *(_DWORD *)(v194 + 8);
  *(_DWORD *)v196 = v194 >> 4;
  *(_DWORD *)(v196 + 4) = v197;
  *(_QWORD *)(v196 + 8) = 0;
  bzero((void *)(v196 + 16), v195);
  if (*(_BYTE *)(v192 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral();
  v198 = v216;
  v216 = 0;
  v217 = (WebCore::JSDocumentPrototype *)v196;
  v218 = 0x1000000FFFFFFFFLL;
  v219 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v196, a2, (unint64_t)v198, 7, 0, (uint64_t)&v216);
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
      WTF::StringImpl::destroy(v198, v199);
    else
      *(_DWORD *)v198 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v200 = v216;
  v216 = 0;
  v217 = (WebCore::JSDocumentPrototype *)v196;
  v218 = 0x1000000FFFFFFFFLL;
  v219 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v196, a2, (unint64_t)v200, 7, 0, (uint64_t)&v216);
  if (v200)
  {
    if (*(_DWORD *)v200 == 2)
      WTF::StringImpl::destroy(v200, v201);
    else
      *(_DWORD *)v200 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v202 = v216;
  v216 = 0;
  v217 = (WebCore::JSDocumentPrototype *)v196;
  v218 = 0x1000000FFFFFFFFLL;
  v219 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v196, a2, (unint64_t)v202, 7, 0, (uint64_t)&v216);
  if (v202)
  {
    if (*(_DWORD *)v202 == 2)
      WTF::StringImpl::destroy(v202, v203);
    else
      *(_DWORD *)v202 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v204 = v216;
  v216 = 0;
  v217 = (WebCore::JSDocumentPrototype *)v196;
  v218 = 0x1000000FFFFFFFFLL;
  v219 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v196, a2, (unint64_t)v204, 7, 0, (uint64_t)&v216);
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
      WTF::StringImpl::destroy(v204, v205);
    else
      *(_DWORD *)v204 -= 2;
  }
  v206 = *(_QWORD *)(*(_QWORD *)v5 + 2784);
  v207 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v225 = *(_DWORD *)this;
  v224 = v207;
  v208 = JSC::Structure::outOfLineCapacity(v207);
  v222 = 0;
  v223 = v208;
  v216 = (WTF::StringImpl *)&v223;
  v217 = this;
  v218 = (uint64_t)a2;
  v219 = &v225;
  v220 = &v224;
  v221 = &v222;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v207, a2, v206, 6, (uint64_t)&v216);
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset((uint64_t)this, (uint64_t)a2, v222, v196);
  *((_DWORD *)v207 + 4) |= 0x10u;
  v209 = *(_QWORD *)(*(_QWORD *)v5 + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v211 = JSC::JSString::create((uint64_t)a2, &v216);
  v212 = v216;
  v216 = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 2)
      WTF::StringImpl::destroy(v212, v210);
    else
      *(_DWORD *)v212 -= 2;
  }
  v213 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v225 = *(_DWORD *)this;
  v224 = v213;
  v214 = JSC::Structure::outOfLineCapacity(v213);
  v222 = 0;
  v223 = v214;
  v216 = (WTF::StringImpl *)&v223;
  v217 = this;
  v218 = (uint64_t)a2;
  v219 = &v225;
  v220 = &v224;
  v221 = &v222;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v213, a2, v209, 6, (uint64_t)&v216);
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  result = JSC::JSObject::putDirectOffset((uint64_t)this, (uint64_t)a2, v222, v211);
  *((_DWORD *)v213 + 4) |= 0x10u;
  return result;
}

uint64_t JSC::reifyStaticProperty(JSC::VM *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unsigned __int8 *a5)
{
  JSC::VM *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  JSC::VM *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t SlowCase;
  _QWORD v47[2];
  int v48;
  int v49;
  uint64_t v50;

  v6 = a1;
  v7 = *(_DWORD *)(a4 + 16);
  if ((v7 & 0x200) != 0)
  {
    if ((v7 & 0x10) == 0)
    {
      (*(void (**)(JSC::VM *))(a4 + 24))(a1);
      return JSC::JSObject::putDirectBuiltinFunction();
    }
    return JSC::reifyStaticAccessor();
  }
  if ((v7 & 0x100) != 0)
  {
    if ((v7 & 0x10000) != 0)
      return JSC::JSObject::putDirectNativeFunction();
    else
      return JSC::JSObject::putDirectNativeFunction();
  }
  if ((v7 & 0x400) != 0)
  {
    v18 = *a3;
    v19 = *(_QWORD *)(a4 + 24);
    v20 = v19 == (int)v19;
    v21 = COERCE__INT64((double)v19) + 0x2000000000000;
    if (v20)
      v22 = *(_QWORD *)(a4 + 24) | 0xFFFE000000000000;
    else
      v22 = v21;
    v47[0] = 0;
    v47[1] = a5;
    v48 = -1;
    v49 = 0x1000000;
    v50 = 0;
    return JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a5, a1, v18, v22, v7, (uint64_t)v47);
  }
  if ((v7 & 0x10) != 0)
    return JSC::reifyStaticAccessor();
  if ((v7 & 0x800) != 0)
  {
    v36 = a1;
    v37 = a5;
    v38 = a4;
    v39 = JSC::LazyClassStructure::get((uint64_t *)&a5[*(_QWORD *)(a4 + 24)], (uint64_t)a5);
  }
  else if ((v7 & 0x1000) != 0)
  {
    v36 = a1;
    v37 = a5;
    v38 = a4;
    v39 = JSC::LazyClassStructure::constructor(&a5[*(_QWORD *)(a4 + 24)], (uint64_t)a5);
  }
  else
  {
    if ((v7 & 0x2000) == 0)
    {
      v8 = (uint64_t *)((char *)a1 + 37936);
      if ((v7 & 0x8000) != 0)
      {
        v23 = *(uint64_t **)(a4 + 24);
        v24 = *(_QWORD *)(a4 + 32);
        v25 = *v23;
        v26 = *((_QWORD *)a1 + 4764);
        if (v26 >= *((_QWORD *)a1 + 4765))
        {
          v33 = a2;
          v34 = (uint64_t *)((char *)a1 + 37936);
          v26 = *((_QWORD *)a1 + 4766);
          if ((v26 & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            v6 = a1;
            v26 = SlowCase;
            a2 = v33;
            v8 = v34;
          }
          else
          {
            v35 = *(_QWORD *)(v26 + 8) ^ *((_QWORD *)a1 + 4767);
            *((_QWORD *)a1 + 4765) = v26 + HIDWORD(v35);
            *((_QWORD *)a1 + 4766) = v26 + (int)v35;
            *((_QWORD *)a1 + 4764) = v26 + 48;
          }
        }
        else
        {
          *((_QWORD *)a1 + 4764) = v26 + 48;
        }
        *(_DWORD *)v26 = 0;
        v27 = v8[451];
        v28 = *(_DWORD *)(v27 + 8);
        *(_DWORD *)v26 = v27 >> 4;
        *(_DWORD *)(v26 + 4) = v28;
        *(_QWORD *)(v26 + 8) = v25;
        *(_QWORD *)(v26 + 16) = v24;
        *(_QWORD *)(v26 + 24) = a2;
        *(_QWORD *)(v26 + 32) = v23;
        if (!*((_BYTE *)v6 + 755))
          return JSC::JSObject::putDirectCustomAccessor();
        goto LABEL_13;
      }
      v10 = *(_QWORD *)(a4 + 24);
      v9 = *(_QWORD *)(a4 + 32);
      if ((v7 & 0x4000) == 0)
      {
        v15 = *v8;
        if ((unint64_t)*v8 >= *((_QWORD *)a1 + 4743))
        {
          v30 = *(_QWORD *)(a4 + 32);
          v31 = (uint64_t *)((char *)a1 + 37936);
          v15 = *((_QWORD *)a1 + 4744);
          if ((v15 & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            v44 = JSC::LocalAllocator::allocateSlowCase();
            v6 = a1;
            v15 = v44;
            v8 = v31;
          }
          else
          {
            v32 = *(_QWORD *)(v15 + 8) ^ *((_QWORD *)a1 + 4745);
            *((_QWORD *)a1 + 4743) = v15 + HIDWORD(v32);
            *((_QWORD *)a1 + 4744) = v15 + (int)v32;
            *v8 = v15 + 32;
          }
          v9 = v30;
        }
        else
        {
          *v8 = v15 + 32;
        }
        *(_DWORD *)v15 = 0;
        v16 = v8[450];
        v17 = *(_DWORD *)(v16 + 8);
        *(_DWORD *)v15 = v16 >> 4;
        *(_DWORD *)(v15 + 4) = v17;
        *(_QWORD *)(v15 + 8) = v10;
        *(_QWORD *)(v15 + 16) = v9;
        if (!*((_BYTE *)v6 + 755))
          return JSC::JSObject::putDirectCustomAccessor();
        goto LABEL_13;
      }
      v11 = *((_QWORD *)a1 + 4764);
      if (v11 >= *((_QWORD *)a1 + 4765))
      {
        v11 = *((_QWORD *)a1 + 4766);
        if ((v11 & 1) != 0)
        {
          v41 = a2;
          JSC::sanitizeStackForVM();
          v42 = JSC::LocalAllocator::allocateSlowCase();
          a2 = v41;
          v6 = a1;
          v11 = v42;
LABEL_12:
          *(_DWORD *)v11 = 0;
          v12 = v8[451];
          v13 = *(_DWORD *)(v12 + 8);
          *(_DWORD *)v11 = v12 >> 4;
          *(_DWORD *)(v11 + 4) = v13;
          *(_QWORD *)(v11 + 8) = v10;
          *(_QWORD *)(v11 + 16) = v9;
          *(_QWORD *)(v11 + 24) = a2;
          *(_QWORD *)(v11 + 32) = 0;
          if (!*((_BYTE *)v6 + 755))
            return JSC::JSObject::putDirectCustomAccessor();
LABEL_13:
          __dmb(0xAu);
          return JSC::JSObject::putDirectCustomAccessor();
        }
        v29 = *(_QWORD *)(v11 + 8) ^ *((_QWORD *)a1 + 4767);
        *((_QWORD *)a1 + 4765) = v11 + HIDWORD(v29);
        *((_QWORD *)a1 + 4766) = v11 + (int)v29;
      }
      *((_QWORD *)a1 + 4764) = v11 + 48;
      goto LABEL_12;
    }
    v36 = a1;
    v37 = a5;
    v38 = a4;
    v39 = (*(uint64_t (**)(JSC::VM *, unsigned __int8 *))(a4 + 24))(a1, a5);
  }
  return JSC::JSObject::putDirect(v37, v36, *a3, v39, *(unsigned __int8 *)(v38 + 16));
}

uint64_t WebCore::JSDOMGlobalObject::scriptExecutionContext(WebCore::JSDOMGlobalObject *this)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  WebCore::JSDOMGlobalObject *v20;

  v1 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSDOMWindowBase::s_info;
  else
    v4 = 1;
  v5 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  if (!v4)
  {
    v9 = 16 * v1;
    do
    {
      v9 = *(_QWORD *)(v9 + 16);
      v5 = v9 != 0;
    }
    while ((char **)v9 != &WebCore::JSDOMWindowBase::s_info && v9 != 0);
  }
  if (!v5)
  {
    if ((_DWORD)v1)
      v11 = v3 == &WebCore::JSShadowRealmGlobalScopeBase::s_info;
    else
      v11 = 1;
    v12 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
    if (!v11)
    {
      v14 = 16 * v1;
      do
      {
        v14 = *(_QWORD *)(v14 + 16);
        v12 = v14 != 0;
      }
      while ((char **)v14 != &WebCore::JSShadowRealmGlobalScopeBase::s_info && v14 != 0);
    }
    if (v12)
      return WebCore::JSShadowRealmGlobalScopeBase::scriptExecutionContext(this);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
    if ((_DWORD)v1)
    {
      v13 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
      if (v3 != &WebCore::JSWorkerGlobalScopeBase::s_info)
      {
        v16 = 16 * v1;
        do
        {
          v16 = *(_QWORD *)(v16 + 16);
          v13 = v16 != 0;
        }
        while ((char **)v16 != &WebCore::JSWorkerGlobalScopeBase::s_info && v16 != 0);
      }
    }
    if (!v13)
    {
      if ((_DWORD)v1 && v3 != &WebCore::JSWorkletGlobalScopeBase::s_info)
      {
        v18 = 16 * v1;
        do
        {
          v18 = *(_QWORD *)(v18 + 16);
          v2 = v18 != 0;
        }
        while ((char **)v18 != &WebCore::JSWorkletGlobalScopeBase::s_info && v18 != 0);
      }
      if (v2)
        return WebCore::JSWorkletGlobalScopeBase::scriptExecutionContext(this);
      if (v3 != &WebCore::JSIDBSerializationGlobalObject::s_info)
      {
        v20 = this;
        WTF::dataLog<char [27],JSC::JSValue,char [2]>((WTF *)&v20);
        __break(0xC471u);
        JUMPOUT(0x1940F2338);
      }
    }
    return *((_QWORD *)this + 425);
  }
  v6 = 0;
  v7 = *((_QWORD *)this + 426);
  if (v7)
  {
    if (!*(_BYTE *)(v7 + 56))
    {
      v6 = *(_QWORD *)(v7 + 72);
      if (v6)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (v6)
        {
          if (*(_BYTE *)(v6 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x1940F22D8);
          }
          v6 -= 288;
        }
      }
    }
  }
  if (v6)
    return v6 + 192;
  else
    return 0;
}

uint64_t JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(JSC::Structure *this, JSC::VM *a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  char v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  WTF::Lock *v30;
  int v31;
  JSC::VM *v32;
  WTF::Lock *v33;
  int v34;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  char v40;
  _BYTE v41[8];
  WTF::Lock *v42;
  char v43;
  char v44;
  JSC::VM *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 11);
  if (!v10)
    v10 = JSC::Structure::materializePropertyTable(this, a2);
  v44 = 0;
  v42 = (JSC::Structure *)((char *)this + 15);
  v43 = 1;
  if (__ldaxr((unsigned __int8 *)this + 15))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C]();
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)this + 15))
    goto LABEL_5;
LABEL_6:
  v44 = 1;
  v45 = a2;
  ++*((_DWORD *)a2 + 229);
  *((_DWORD *)this + 4) |= 4u;
  if (v10)
  {
    *((_QWORD *)this + 11) = v10;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)this);
  }
  else
  {
    *((_QWORD *)this + 11) = 0;
  }
  v12 = *((_QWORD *)this + 8);
  if (!v12 || *(_BYTE *)(v12 + 5) == 1)
    *((_QWORD *)this + 8) = 0;
  else
    *(_DWORD *)(v12 + 80) = 0;
  v13 = *((unsigned int *)this + 18);
  *((_DWORD *)this + 18) = 0;
  if ((_DWORD)v13)
  {
    v14 = (WTF::StringImpl *)(16 * v13);
    v15 = *(_DWORD *)(16 * v13) - 2;
    if (v15)
      *(_DWORD *)v14 = v15;
    else
      WTF::StringImpl::destroy(v14, a2);
  }
  if ((a4 & 4) != 0)
  {
    v16 = *((_DWORD *)this + 4) & 0xFFFFFF9F | 0x40;
LABEL_16:
    *((_DWORD *)this + 4) = v16;
    goto LABEL_17;
  }
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
  {
    v16 = *((_DWORD *)this + 4) & 0xFFFFFFDF;
    goto LABEL_16;
  }
LABEL_17:
  if ((a4 & 8) != 0)
  {
    v37 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v37 | 0x40000000;
    if ((a4 & 0x72) != 0)
      *((_DWORD *)this + 4) = v37 | 0xC0000000;
  }
  if (*(_QWORD *)(*((_QWORD *)a2 + 5244) + 16) == a3)
    *((_DWORD *)this + 4) |= 0x20000000u;
  v17 = *((unsigned __int8 *)this + 14);
  v18 = *(_QWORD *)(v10 + 32);
  if (v18 && (v36 = *(unsigned int *)(v18 + 12), (_DWORD)v36))
  {
    v24 = *(unsigned int *)(*(_QWORD *)v18 + 4 * v36 - 4);
    *(_DWORD *)(v18 + 12) = v36 - 1;
  }
  else
  {
    v19 = *(_DWORD *)(v10 + 24);
    v20 = __OFSUB__(v19, v17);
    v22 = v19 - v17;
    v21 = (v22 < 0) ^ v20;
    v23 = v22 + 64;
    if (v21)
      v24 = v19;
    else
      v24 = v23;
  }
  v25 = *(_DWORD *)(a3 + 16);
  if ((v25 & 0x20) != 0)
    v25 = *(_DWORD *)(a3 + 32);
  v26 = *((_DWORD *)this + 7) ^ (v25 >> 8);
  v27 = *((_DWORD *)this + 8) | (a3 >> 4);
  *((_DWORD *)this + 7) = v26;
  *((_DWORD *)this + 8) = v27;
  v38 = a3;
  v39 = v24;
  v40 = a4;
  JSC::PropertyTable::add((JSC::PropertyTable *)v10, a2, (int *)&v38);
  v28 = *((unsigned __int16 *)this + 12);
  if (v28 == 65534)
  {
    v28 = -1;
  }
  else if (v28 == 0xFFFF)
  {
    v28 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
  }
  if ((int)v24 <= v28)
    v29 = v28;
  else
    v29 = v24;
  JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure *)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}::operator()(a5, (uint64_t)v41, v24, v29);
  if (v44)
  {
    v43 = 0;
    v30 = v42;
    v31 = __ldxr((unsigned __int8 *)v42);
    if (v31 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v42))
        goto LABEL_39;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v30);
  }
LABEL_39:
  v32 = v45;
  --*((_DWORD *)v45 + 229);
  if (*((_BYTE *)v32 + 1198) || *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1489))
    JSC::Heap::decrementDeferralDepthAndGCIfNeededSlow((JSC::VM *)((char *)v32 + 192));
  if (v44 && v43)
  {
    v33 = v42;
    v34 = __ldxr((unsigned __int8 *)v42);
    if (v34 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v42))
        return v24;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v33);
  }
  return v24;
}

uint64_t JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure *)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}::operator()(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  JSC::JSObject *v13;
  uint64_t MoreOutOfLineStorage;
  JSC::Structure *v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  JSC::Structure *v21;

  v6 = result;
  v7 = (a4 - 64) | ((a4 - 64) >> 1) | (((a4 - 64) | ((a4 - 64) >> 1)) >> 2);
  v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
  v9 = v8 | HIWORD(v8);
  if ((a4 - 63) >= 5)
    v10 = v9 + 1;
  else
    v10 = 4;
  if (a4 >= 64)
    v11 = v10;
  else
    v11 = 0;
  if (v11 != **(_DWORD **)result)
  {
    v13 = *(JSC::JSObject **)(result + 8);
    MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage(v13, *(JSC::VM **)(result + 16));
    result = (uint64_t)JSC::JSObject::nukeStructureAndSetButterfly((JSCell *)v13, *(_QWORD *)(v6 + 16), **(_DWORD **)(v6 + 24), MoreOutOfLineStorage);
    v15 = **(JSC::Structure ***)(v6 + 32);
    if (a4 == -1)
    {
      v20 = -2;
    }
    else
    {
      if (a4 <= 65533)
      {
        *((_WORD *)v15 + 12) = a4;
LABEL_15:
        __dmb(0xAu);
        *(_DWORD *)v13 = **(_DWORD **)(v6 + 24);
        goto LABEL_11;
      }
      v18 = *((__int16 *)v15 + 12);
      v21 = **(JSC::Structure ***)(v6 + 32);
      v19 = *((_QWORD *)v15 + 8);
      if (v18 == -1)
      {
        *(_DWORD *)(v19 + 84) = a4;
        goto LABEL_15;
      }
      if (!v19 || *(_BYTE *)(v19 + 5) == 1)
      {
        result = JSC::Structure::allocateRareData(v21, *(JSC::VM **)(v6 + 16));
        v19 = *((_QWORD *)v21 + 8);
      }
      *(_DWORD *)(v19 + 84) = a4;
      __dmb(0xAu);
      v20 = -1;
      v15 = v21;
    }
    *((_WORD *)v15 + 12) = v20;
    goto LABEL_15;
  }
  v12 = **(_QWORD **)(result + 32);
  if (a4 == -1)
  {
    v17 = -2;
LABEL_20:
    *(_WORD *)(v12 + 24) = v17;
    goto LABEL_11;
  }
  if (a4 > 65533)
  {
    v16 = *(_QWORD *)(v12 + 64);
    if (*(__int16 *)(v12 + 24) == -1)
    {
      *(_DWORD *)(v16 + 84) = a4;
      goto LABEL_11;
    }
    if (!v16 || *(_BYTE *)(v16 + 5) == 1)
    {
      result = JSC::Structure::allocateRareData(**(JSC::Structure ***)(result + 32), *(JSC::VM **)(result + 16));
      v16 = *(_QWORD *)(v12 + 64);
    }
    *(_DWORD *)(v16 + 84) = a4;
    __dmb(0xAu);
    v17 = -1;
    goto LABEL_20;
  }
  *(_WORD *)(v12 + 24) = a4;
LABEL_11:
  **(_DWORD **)(v6 + 40) = a3;
  return result;
}

uint64_t JSC::PropertyTable::add(JSC::PropertyTable *this, JSC::VM *a2, int *a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t result;
  int v16;
  int v17;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  int v41;

  v5 = *(_DWORD **)a3;
  v6 = *((_QWORD *)this + 2);
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  v8 = *((unsigned int *)this + 2);
  v9 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if ((v6 & 1) != 0)
  {
    if ((v9 & 0x20) != 0)
      v9 = v5[8];
    v10 = *((_DWORD *)this + 3);
    v11 = (v9 >> 8) & *(_QWORD *)&v10;
    v12 = *(unsigned __int8 *)(v7 + v11);
    if (*(_BYTE *)(v7 + v11))
    {
      v13 = 1;
      while (1)
      {
        v14 = *(_QWORD *)(v7 + v8 + 8 * (v12 - 1));
        if (v5 == (_DWORD *)(v14 & 0xFFFFFFFFFFFFLL))
          break;
        v11 = ((_DWORD)v11 + v13) & v10;
        v12 = *(unsigned __int8 *)(v7 + v11);
        ++v13;
        if (!*(_BYTE *)(v7 + v11))
          goto LABEL_11;
      }
      result = (v14 >> 16) & 0xFF00000000 | HIBYTE(v14);
      goto LABEL_10;
    }
  }
  else
  {
    if ((v9 & 0x20) != 0)
      v9 = v5[8];
    v33 = *((_DWORD *)this + 3);
    LODWORD(v11) = v33 & (v9 >> 8);
    v34 = *(_DWORD *)(v7 + 4 * v11);
    if (v34)
    {
      v35 = v7 + 4 * v8;
      v36 = 1;
      while (1)
      {
        v37 = (v34 - 1);
        if (v5 == *(_DWORD **)(v35 + 16 * v37))
          break;
        LODWORD(v11) = (v11 + v36) & v33;
        v34 = *(_DWORD *)(v7 + 4 * v11);
        ++v36;
        if (!v34)
          goto LABEL_11;
      }
      result = *(unsigned int *)(v35 + 16 * v37 + 8) | ((unint64_t)*(unsigned __int8 *)(v35 + 16 * v37 + 12) << 32);
LABEL_10:
      if ((_DWORD)result != -1)
        return result;
    }
  }
LABEL_11:
  *v5 += 2;
  v16 = *((_DWORD *)this + 6);
  v17 = a3[2];
  v19 = (v6 & 1) == 0 || v17 < 256;
  if (*((_DWORD *)this + 7) + v16 >= v8 >> 1 || !v19)
  {
    JSC::PropertyTable::rehash(this, a2, v16 + 1, v17 < 256);
    v26 = *(_QWORD *)a3;
    v6 = *((_QWORD *)this + 2);
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v27 = *((unsigned int *)this + 2);
    v28 = *(_DWORD *)(*(_QWORD *)a3 + 16);
    if ((v6 & 1) != 0)
    {
      if ((v28 & 0x20) != 0)
        v28 = *(_DWORD *)(v26 + 32);
      v29 = *((_DWORD *)this + 3);
      v11 = (v28 >> 8) & *(_QWORD *)&v29;
      v30 = *(unsigned __int8 *)(v7 + v11);
      if (*(_BYTE *)(v7 + v11))
      {
        v31 = v7 + v27;
        v32 = 1;
        do
        {
          if (v26 == (*(_QWORD *)(v31 + 8 * (v30 - 1)) & 0xFFFFFFFFFFFFLL))
            break;
          v11 = ((_DWORD)v11 + v32) & v29;
          v30 = *(unsigned __int8 *)(v7 + v11);
          ++v32;
        }
        while (*(_BYTE *)(v7 + v11));
      }
    }
    else
    {
      if ((v28 & 0x20) != 0)
        v28 = *(_DWORD *)(v26 + 32);
      v38 = *((_DWORD *)this + 3);
      LODWORD(v11) = v38 & (v28 >> 8);
      v39 = *(_DWORD *)(v7 + 4 * v11);
      if (v39)
      {
        v40 = v7 + 4 * v27;
        v41 = 1;
        do
        {
          if (v26 == *(_QWORD *)(v40 + 16 * (v39 - 1)))
            break;
          LODWORD(v11) = (v11 + v41) & v38;
          v39 = *(_DWORD *)(v7 + 4 * v11);
          ++v41;
        }
        while (v39);
      }
    }
  }
  v20 = *((_DWORD *)this + 7) + *((_DWORD *)this + 6);
  v21 = v20 + 1;
  if ((v6 & 1) != 0)
  {
    *(_BYTE *)(v7 + v11) = v21;
    v22 = a3[2];
    v23 = *((unsigned __int8 *)a3 + 12);
    *(_QWORD *)(v7 + *((unsigned int *)this + 2) + 8 * v20) = *(_QWORD *)a3 | ((unint64_t)(v23 | (v22 << 8)) << 48);
  }
  else
  {
    *(_DWORD *)(v7 + 4 * v11) = v21;
    v24 = (_QWORD *)(v7 + 4 * *((unsigned int *)this + 2) + 16 * v20);
    v25 = *(_QWORD *)a3;
    *(_QWORD *)((char *)v24 + 5) = *(_QWORD *)((char *)a3 + 5);
    *v24 = v25;
    v22 = a3[2];
    v23 = *((unsigned __int8 *)a3 + 12);
  }
  ++*((_DWORD *)this + 6);
  return v22 | (unint64_t)(v23 << 32);
}

uint64_t JSC::JSObject::putDirectOffset(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;

  if (a3 <= 63)
  {
    v4 = result + 16;
  }
  else
  {
    v4 = *(_QWORD *)(result + 8) - 8;
    a3 = 63 - a3;
  }
  *(_QWORD *)(v4 + 8 * a3) = a4;
  if ((a4 & 0xFFFE000000000002) == 0
    && result
    && a4
    && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(result + 7))
  {
    return JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)result);
  }
  return result;
}

JSC::Heap *JSC::JSObject::nukeStructureAndSetButterfly(JSCell *a1, uint64_t a2, int a3, uint64_t a4)
{
  JSC::Heap *result;

  result = (JSC::Heap *)(a2 + 192);
  if (*(_BYTE *)(a2 + 755))
  {
    *(_DWORD *)a1 = a3 | 1;
    __dmb(0xAu);
    *((_QWORD *)a1 + 1) = a4;
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      result = (JSC::Heap *)JSC::Heap::writeBarrierSlowPath(result, a1);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)a1 + 1) = a4;
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      return (JSC::Heap *)JSC::Heap::writeBarrierSlowPath(result, a1);
  }
  return result;
}

unint64_t JSC::allocateCell<JSC::JSFinalObject>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v5;

  if (((a2 + 15) & 0xFFFFFFFFFFFFFFF0) <= 0x1F60
    && (v2 = *(_QWORD *)(a1 + 8 * ((unint64_t)(a2 + 15) >> 4) + 15024)) != 0)
  {
    v3 = *(unsigned int *)(v2 + 60);
    result = *(_QWORD *)(v2 + 24);
    if (result >= *(_QWORD *)(v2 + 32))
    {
      result = *(_QWORD *)(v2 + 40);
      if ((result & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        result = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_5;
      }
      v5 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v2 + 48);
      *(_QWORD *)(v2 + 32) = result + HIDWORD(v5);
      *(_QWORD *)(v2 + 40) = result + (int)v5;
    }
    *(_QWORD *)(v2 + 24) = result + v3;
  }
  else
  {
    result = JSC::CompleteSubspace::allocateSlow();
  }
LABEL_5:
  *(_DWORD *)result = 0;
  return result;
}

BOOL WebCore::Quirks::shouldDisableElementFullscreenQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t IsSmallScreen;
  unsigned int v27;
  unsigned int v28;
  PAL *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  const WTF::StringImpl *v41;
  unsigned int v42;
  unsigned int v43;
  PAL *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  const WTF::StringImpl *v57;
  char v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WebCore::Document *v61;
  uint64_t isTopDocument;
  uint64_t v63;
  const WTF::StringImpl *v64;
  char v65;
  __int16 v66;
  unsigned int v67;
  unsigned int v68;
  unsigned __int8 v69;
  PAL *v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const WTF::StringImpl *v81;
  char v82;
  WTF::StringImpl *v83;
  int v84;
  __int16 v85;
  WebCore::Document *v86;
  uint64_t v87;
  const WTF::StringImpl *v88;
  char v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WebCore::Document *v93;
  uint64_t v94;
  const WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  const WTF::StringImpl *v123;
  WTF::StringImpl *v124;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v4 + 243))
  {
    if (!*(_BYTE *)(v4 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v4 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 74))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v124;
    v7 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v7 = *(_QWORD *)(v7 + 8);
    if (*(_BYTE *)(v7 + 3362) || *(_BYTE *)(v7 + 3405))
    {
      while (1)
      {
        v97 = *(_QWORD *)(v7 + 528);
        if (!v97)
          break;
        v98 = *(_QWORD *)(v97 + 8);
        if (!v98)
          break;
        v99 = *(_QWORD *)(v98 + 120);
        if (!v99)
          break;
        v100 = *(_QWORD *)(v99 + 8);
        if (!v100)
          break;
        v7 = *(_QWORD *)(*(_QWORD *)(v100 + 40) + 8);
      }
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 528);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 8);
          if (v10 && *(_BYTE *)(v10 + 144) == 0)
          {
            v12 = *(_QWORD *)(v10 + 296);
            if (v12)
              goto LABEL_273;
          }
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v124, (const WTF::URL *)(v7 + 736));
      v15 = WTF::equal(v124, v6, v13);
      v16 = v124;
      v124 = 0;
      if (!v16)
        goto LABEL_23;
      if (*(_DWORD *)v16 != 2)
        break;
      WTF::StringImpl::destroy(v16, v14);
      if (v15)
      {
LABEL_24:
        *(_WORD *)((char *)this + 73) = 257;
        if (!v6)
          goto LABEL_223;
        goto LABEL_221;
      }
LABEL_27:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v17 = v124;
      v18 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v18 = *(_QWORD *)(v18 + 8);
      if (*(_BYTE *)(v18 + 3362) || *(_BYTE *)(v18 + 3405))
      {
        while (1)
        {
          v101 = *(_QWORD *)(v18 + 528);
          if (!v101)
            break;
          v102 = *(_QWORD *)(v101 + 8);
          if (!v102)
            break;
          v103 = *(_QWORD *)(v102 + 120);
          if (!v103)
            break;
          v104 = *(_QWORD *)(v103 + 8);
          if (!v104)
            break;
          v18 = *(_QWORD *)(*(_QWORD *)(v104 + 40) + 8);
        }
      }
      else
      {
        v19 = *(_QWORD *)(v18 + 528);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v20 + 128) + 8);
            if (v21 && *(_BYTE *)(v21 + 144) == 0)
            {
              v23 = *(_QWORD *)(v21 + 296);
              if (v23)
                v18 = v23;
            }
          }
        }
      }
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v124, (const WTF::URL *)(v18 + 736));
      v25 = WTF::equal(v124, v17, v24);
      IsSmallScreen = (uint64_t)v124;
      v124 = 0;
      if (!IsSmallScreen)
        goto LABEL_43;
      if (*(_DWORD *)IsSmallScreen != 2)
      {
        *(_DWORD *)IsSmallScreen -= 2;
LABEL_43:
        if ((v25 & 1) != 0)
          goto LABEL_44;
        goto LABEL_46;
      }
      IsSmallScreen = WTF::StringImpl::destroy((WTF::StringImpl *)IsSmallScreen, v14);
      if ((v25 & 1) != 0)
      {
LABEL_44:
        *(_WORD *)((char *)this + 73) = 257;
        goto LABEL_217;
      }
LABEL_46:
      v27 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v27 > 0xFF)
        goto LABEL_60;
      v28 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v28 <= 0x100)
        v25 = 256;
      else
        v25 = v28;
      v29 = (PAL *)objc_msgSend((id)PAL::getUIApplicationClass((PAL *)IsSmallScreen), "sharedApplication");
      if (!v29)
      {
        IsSmallScreen = PAL::deviceClassIsSmallScreen(0);
        if ((IsSmallScreen & 1) == 0)
        {
LABEL_56:
          v30 = 0;
          goto LABEL_57;
        }
LABEL_55:
        v30 = 1;
        goto LABEL_57;
      }
      IsSmallScreen = objc_msgSend((id)objc_msgSend((id)PAL::getUIDeviceClass(v29), "currentDevice"), "userInterfaceIdiom");
      if ((IsSmallScreen & 0xFFFFFFFFFFFFFFFBLL) == 0)
        goto LABEL_55;
      if (IsSmallScreen != 6)
        goto LABEL_56;
      v30 = 2;
LABEL_57:
      v31 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v31 < 0x100 || v30 != v25)
        atomic_store(v30 | 0x100, &PAL::s_currentUserInterfaceIdiom);
LABEL_60:
      v32 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      v33 = v32 > 0xFF && v32 == 1;
      v34 = v33;
      if (!v33)
        goto LABEL_87;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v25 = (uint64_t)v124;
      v35 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v35 = *(_QWORD *)(v35 + 8);
      if (*(_BYTE *)(v35 + 3362) || *(_BYTE *)(v35 + 3405))
      {
        v105 = v34;
        while (1)
        {
          v106 = *(_QWORD *)(v35 + 528);
          if (!v106)
            break;
          v107 = *(_QWORD *)(v106 + 8);
          if (!v107)
            break;
          v108 = *(_QWORD *)(v107 + 120);
          if (!v108)
            break;
          v109 = *(_QWORD *)(v108 + 8);
          v34 = v105;
          if (!v109)
            goto LABEL_81;
          v35 = *(_QWORD *)(*(_QWORD *)(v109 + 40) + 8);
        }
        v34 = v105;
      }
      else
      {
        v36 = *(_QWORD *)(v35 + 528);
        if (v36)
        {
          v37 = *(_QWORD *)(v36 + 8);
          if (v37)
          {
            v38 = *(_QWORD *)(*(_QWORD *)(v37 + 128) + 8);
            if (v38 && *(_BYTE *)(v38 + 144) == 0)
            {
              v40 = *(_QWORD *)(v38 + 296);
              if (v40)
                v35 = v40;
            }
          }
        }
      }
LABEL_81:
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v124, (const WTF::URL *)(v35 + 736));
      v1 = WTF::equal(v124, (const WTF::StringImpl *)v25, v41);
      IsSmallScreen = (uint64_t)v124;
      v124 = 0;
      if (!IsSmallScreen)
        goto LABEL_84;
      if (*(_DWORD *)IsSmallScreen != 2)
      {
        *(_DWORD *)IsSmallScreen -= 2;
LABEL_84:
        if ((v1 & 1) != 0)
          goto LABEL_85;
        goto LABEL_87;
      }
      IsSmallScreen = WTF::StringImpl::destroy((WTF::StringImpl *)IsSmallScreen, v14);
      if ((v1 & 1) != 0)
      {
LABEL_85:
        *(_WORD *)((char *)this + 73) = 257;
LABEL_214:
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v25, v14);
          else
            *(_DWORD *)v25 -= 2;
        }
        goto LABEL_217;
      }
LABEL_87:
      v42 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v42 > 0xFF)
        goto LABEL_101;
      v43 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v43 <= 0x100)
        v1 = 256;
      else
        v1 = v43;
      v44 = (PAL *)objc_msgSend((id)PAL::getUIApplicationClass((PAL *)IsSmallScreen), "sharedApplication");
      if (!v44)
      {
        if (!PAL::deviceClassIsSmallScreen(0))
        {
LABEL_97:
          v46 = 0;
          goto LABEL_98;
        }
LABEL_96:
        v46 = 1;
        goto LABEL_98;
      }
      v45 = objc_msgSend((id)objc_msgSend((id)PAL::getUIDeviceClass(v44), "currentDevice"), "userInterfaceIdiom");
      if ((v45 & 0xFFFFFFFFFFFFFFFBLL) == 0)
        goto LABEL_96;
      if (v45 != 6)
        goto LABEL_97;
      v46 = 2;
LABEL_98:
      v47 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v47 < 0x100 || v46 != v1)
        atomic_store(v46 | 0x100, &PAL::s_currentUserInterfaceIdiom);
LABEL_101:
      v48 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      v49 = v48 > 0xFF && v48 == 1;
      v50 = v49;
      if (!v49)
        goto LABEL_128;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v1 = (uint64_t)v124;
      v51 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v51 = *(_QWORD *)(v51 + 8);
      if (*(_BYTE *)(v51 + 3362) || *(_BYTE *)(v51 + 3405))
      {
        v110 = v50;
        v111 = v34;
        while (1)
        {
          v112 = *(_QWORD *)(v51 + 528);
          if (!v112)
            break;
          v113 = *(_QWORD *)(v112 + 8);
          if (!v113)
            break;
          v114 = *(_QWORD *)(v113 + 120);
          if (!v114)
            break;
          v115 = *(_QWORD *)(v114 + 8);
          v34 = v111;
          v50 = v110;
          if (!v115)
            goto LABEL_122;
          v51 = *(_QWORD *)(*(_QWORD *)(v115 + 40) + 8);
        }
        v34 = v111;
        v50 = v110;
      }
      else
      {
        v52 = *(_QWORD *)(v51 + 528);
        if (v52)
        {
          v53 = *(_QWORD *)(v52 + 8);
          if (v53)
          {
            v54 = *(_QWORD *)(*(_QWORD *)(v53 + 128) + 8);
            if (v54 && *(_BYTE *)(v54 + 144) == 0)
            {
              v56 = *(_QWORD *)(v54 + 296);
              if (v56)
                v51 = v56;
            }
          }
        }
      }
LABEL_122:
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v124, (const WTF::URL *)(v51 + 736));
      v58 = WTF::equal(v124, (const WTF::StringImpl *)v1, v57);
      v59 = v124;
      v124 = 0;
      if (!v59)
        goto LABEL_125;
      if (*(_DWORD *)v59 != 2)
      {
        *(_DWORD *)v59 -= 2;
LABEL_125:
        if ((v58 & 1) != 0)
          goto LABEL_126;
        goto LABEL_128;
      }
      WTF::StringImpl::destroy(v59, v14);
      if ((v58 & 1) != 0)
      {
LABEL_126:
        *(_WORD *)((char *)this + 73) = 257;
        goto LABEL_208;
      }
LABEL_128:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v60 = v124;
      if (*(_QWORD *)this)
        v61 = *(WebCore::Document **)(*(_QWORD *)this + 8);
      else
        v61 = 0;
      isTopDocument = WebCore::Document::isTopDocument(v61);
      if ((isTopDocument & 1) != 0)
        goto LABEL_139;
      v63 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v63 = *(_QWORD *)(v63 + 8);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v124, (const WTF::URL *)(v63 + 736));
      v65 = WTF::equal(v124, v60, v64);
      isTopDocument = (uint64_t)v124;
      v124 = 0;
      if (!isTopDocument)
        goto LABEL_136;
      if (*(_DWORD *)isTopDocument != 2)
      {
        *(_DWORD *)isTopDocument -= 2;
LABEL_136:
        if ((v65 & 1) != 0)
          goto LABEL_137;
        goto LABEL_139;
      }
      isTopDocument = WTF::StringImpl::destroy((WTF::StringImpl *)isTopDocument, v14);
      if ((v65 & 1) != 0)
      {
LABEL_137:
        v66 = 1;
LABEL_170:
        *(_WORD *)((char *)this + 73) = v66 | 0x100;
        if (!v60)
          goto LABEL_171;
        goto LABEL_206;
      }
LABEL_139:
      v67 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v67 > 0xFF)
        goto LABEL_153;
      v68 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v68 <= 0x100)
        v69 = 0;
      else
        v69 = v68;
      v70 = (PAL *)objc_msgSend((id)PAL::getUIApplicationClass((PAL *)isTopDocument), "sharedApplication");
      if (!v70)
      {
        if (!PAL::deviceClassIsSmallScreen(0))
        {
LABEL_149:
          v72 = 0;
          goto LABEL_150;
        }
LABEL_148:
        v72 = 1;
        goto LABEL_150;
      }
      v71 = objc_msgSend((id)objc_msgSend((id)PAL::getUIDeviceClass(v70), "currentDevice"), "userInterfaceIdiom");
      if ((v71 & 0xFFFFFFFFFFFFFFFBLL) == 0)
        goto LABEL_148;
      if (v71 != 6)
        goto LABEL_149;
      v72 = 2;
LABEL_150:
      v73 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v73 < 0x100 || v72 != v69)
        atomic_store(v72 | 0x100, &PAL::s_currentUserInterfaceIdiom);
LABEL_153:
      v66 = 0;
      v74 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      if (v74 < 0x100 || v74 != 1)
        goto LABEL_170;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v75 = v124;
      v76 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v76 = *(_QWORD *)(v76 + 8);
      if (*(_BYTE *)(v76 + 3362) || *(_BYTE *)(v76 + 3405))
      {
        v116 = v50;
        v117 = v34;
        while (1)
        {
          v118 = *(_QWORD *)(v76 + 528);
          if (!v118)
            break;
          v119 = *(_QWORD *)(v118 + 8);
          if (!v119)
            break;
          v120 = *(_QWORD *)(v119 + 120);
          if (!v120)
            break;
          v121 = *(_QWORD *)(v120 + 8);
          v34 = v117;
          v50 = v116;
          if (!v121)
            goto LABEL_165;
          v76 = *(_QWORD *)(*(_QWORD *)(v121 + 40) + 8);
        }
        v34 = v117;
        v50 = v116;
      }
      else
      {
        v77 = *(_QWORD *)(v76 + 528);
        if (v77)
        {
          v78 = *(_QWORD *)(v77 + 8);
          if (v78)
          {
            v79 = *(_QWORD *)(*(_QWORD *)(v78 + 128) + 8);
            if (v79)
            {
              if (!*(_BYTE *)(v79 + 144))
              {
                v80 = *(_QWORD *)(v79 + 296);
                if (v80)
                  v76 = v80;
              }
            }
          }
        }
      }
LABEL_165:
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v124, (const WTF::URL *)(v76 + 736));
      v82 = WTF::equal(v124, v75, v81);
      v83 = v124;
      v124 = 0;
      if (!v83)
        goto LABEL_168;
      if (*(_DWORD *)v83 != 2)
      {
        *(_DWORD *)v83 -= 2;
LABEL_168:
        if ((v82 & 1) != 0)
          goto LABEL_169;
        goto LABEL_175;
      }
      WTF::StringImpl::destroy(v83, v14);
      if ((v82 & 1) != 0)
      {
LABEL_169:
        v84 = v50;
        v85 = 1;
        goto LABEL_202;
      }
LABEL_175:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v123 = v124;
      v122 = v34;
      if (*(_QWORD *)this)
        v86 = *(WebCore::Document **)(*(_QWORD *)this + 8);
      else
        v86 = 0;
      if (WebCore::Document::isTopDocument(v86))
        goto LABEL_187;
      v87 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v87 = *(_QWORD *)(v87 + 8);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v124, (const WTF::URL *)(v87 + 736));
      v89 = WTF::equal(v124, v123, v88);
      v90 = v124;
      v124 = 0;
      if (!v90)
        goto LABEL_183;
      if (*(_DWORD *)v90 != 2)
      {
        *(_DWORD *)v90 -= 2;
LABEL_183:
        if ((v89 & 1) != 0)
          goto LABEL_184;
        goto LABEL_187;
      }
      WTF::StringImpl::destroy(v90, v14);
      if ((v89 & 1) != 0)
      {
LABEL_184:
        v84 = v50;
        v85 = 1;
LABEL_185:
        v91 = v123;
        goto LABEL_199;
      }
LABEL_187:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v92 = v124;
      if (*(_QWORD *)this)
        v93 = *(WebCore::Document **)(*(_QWORD *)this + 8);
      else
        v93 = 0;
      if (WebCore::Document::isTopDocument(v93))
      {
        v84 = v50;
        v85 = 0;
      }
      else
      {
        v94 = *(_QWORD *)this;
        v84 = v50;
        if (*(_QWORD *)this)
          v94 = *(_QWORD *)(v94 + 8);
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v124, (const WTF::URL *)(v94 + 736));
        v85 = WTF::equal(v124, v92, v95);
        v96 = v124;
        v124 = 0;
        if (v96)
        {
          if (*(_DWORD *)v96 == 2)
            WTF::StringImpl::destroy(v96, v14);
          else
            *(_DWORD *)v96 -= 2;
        }
      }
      v91 = v123;
      if (!v92)
        goto LABEL_199;
      if (*(_DWORD *)v92 == 2)
      {
        WTF::StringImpl::destroy(v92, v14);
        goto LABEL_185;
      }
      *(_DWORD *)v92 -= 2;
LABEL_199:
      v34 = v122;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          WTF::StringImpl::destroy(v91, v14);
        else
          *(_DWORD *)v91 -= 2;
      }
LABEL_202:
      *(_WORD *)((char *)this + 73) = v85 | 0x100;
      v50 = v84;
      if (!v75)
        goto LABEL_205;
      if (*(_DWORD *)v75 != 2)
      {
        *(_DWORD *)v75 -= 2;
LABEL_205:
        if (!v60)
          goto LABEL_171;
        goto LABEL_206;
      }
      WTF::StringImpl::destroy(v75, v14);
      if (!v60)
      {
LABEL_171:
        if (!v50)
          goto LABEL_213;
        goto LABEL_208;
      }
LABEL_206:
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::destroy(v60, v14);
        if ((v50 & 1) == 0)
        {
LABEL_213:
          if (v34)
            goto LABEL_214;
          goto LABEL_217;
        }
      }
      else
      {
        *(_DWORD *)v60 -= 2;
        if ((v50 & 1) == 0)
          goto LABEL_213;
      }
LABEL_208:
      if (!v1)
        goto LABEL_213;
      if (*(_DWORD *)v1 == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v1, v14);
        if ((v34 & 1) != 0)
          goto LABEL_214;
      }
      else
      {
        *(_DWORD *)v1 -= 2;
        if ((v34 & 1) != 0)
          goto LABEL_214;
      }
LABEL_217:
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::destroy(v17, v14);
          if (!v6)
            goto LABEL_223;
          goto LABEL_221;
        }
        *(_DWORD *)v17 -= 2;
      }
      if (!v6)
        goto LABEL_223;
LABEL_221:
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v14);
      else
        *(_DWORD *)v6 -= 2;
LABEL_223:
      if (*((_BYTE *)this + 74))
        return *((_BYTE *)this + 73) != 0;
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_273:
      v7 = v12;
    }
    *(_DWORD *)v16 -= 2;
LABEL_23:
    if (v15)
      goto LABEL_24;
    goto LABEL_27;
  }
  return *((_BYTE *)this + 73) != 0;
}

float WebCore::PageOverlayController::deviceScaleFactor(WebCore::PageOverlayController *this)
{
  return *(float *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 364);
}

uint64_t WebCore::ScrollingStateTree::attachDeserializedNodes(WebCore::ScrollingStateTree *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    return WebCore::ScrollingStateNode::attachAfterDeserialization(result, this);
  return result;
}

double WebCore::GraphicsContextState::GraphicsContextState(uint64_t a1, _DWORD *a2, char a3)
{
  double result;

  *(_QWORD *)a1 = 0x11040000000000FFLL;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x11040000000000FFLL;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = *a2;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 16908544;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_BYTE *)(a1 + 332) = a3;
  *(_QWORD *)&result = 16843009;
  *(_QWORD *)(a1 + 333) = 16843009;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = 0x11040000000000FFLL;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x11040000000000FFLL;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = *a2;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 16908544;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_BYTE *)(a1 + 332) = a3;
  *(_QWORD *)&result = 16843009;
  *(_QWORD *)(a1 + 333) = 16843009;
  return result;
}

void WebCore::CSSPrimitiveValue::create(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[88];
  int v7;
  char v8;

  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  v6[0] = 0;
  v7 = -1;
  v5 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E33987F0[v5])(&v8, v6, a1);
    v7 = v5;
  }
  WebCore::CSSPrimitiveValue::CSSPrimitiveValue(v4, (uint64_t)v6);
  *a2 = v4;
  WebCore::CSSUnresolvedColor::~CSSUnresolvedColor((WebCore::CSSUnresolvedColor *)v6);
}

uint64_t WebCore::CSSPrimitiveValue::CSSPrimitiveValue(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  *(_DWORD *)a1 = 2;
  v4 = *(_BYTE *)(a1 + 6);
  *(_WORD *)(a1 + 4) = 78;
  *(_BYTE *)(a1 + 6) = v4 & 0xFC;
  v5 = WTF::fastMalloc((WTF *)0x60);
  *(_BYTE *)v5 = 0;
  *(_DWORD *)(v5 + 88) = -1;
  v6 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E33987F0[v6])(&v8, v5, a2);
    *(_DWORD *)(v5 + 88) = v6;
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeBorderImageSlice@<X0>(int a1@<W0>, __int128 **a2@<X1>, int **a3@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  int v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  char v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  __int128 *v31;
  __int128 *v32;
  char v33;
  unsigned int v34;
  int v35;
  int *v36;
  int v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *result;
  _OWORD v42[2];
  int *v43;
  __int128 v44;
  __int128 v45;

  v7 = *a2;
  v6 = a2[1];
  if (*a2 >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v7 & 0x3F) != 0)
    goto LABEL_5;
  v8 = *a2;
  if (*a2 >= v6)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_5;
  v23 = *((_DWORD *)v8 + 4);
  if (v23 < 0)
  {
    v23 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v23;
  }
  if ((unsigned __int16)v23 != 653)
  {
LABEL_5:
    v9 = 0;
  }
  else
  {
    v25 = *a2;
    v24 = (unint64_t)a2[1];
    if (*a2 == (__int128 *)v24)
    {
      v27 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v26 = *a2;
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v26 = (__int128 *)((char *)v25 + 24);
      *a2 = (__int128 *)((char *)v25 + 24);
    }
    while (1)
    {
      if ((unint64_t)v26 < v24 || (v27 & 1) != 0)
      {
        if ((unint64_t)v26 >= v24)
          v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v28 = *(_DWORD *)v26;
      }
      else
      {
        v28 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v28;
        v27 = 1;
      }
      if ((v28 & 0x3F) != 0x10)
        break;
      v26 = (__int128 *)((char *)*a2 + 24);
      *a2 = v26;
    }
    if ((*(_DWORD *)v25 & 0x3F) == 0 && (v25[1] & 0x80000000) != 0)
      *((_DWORD *)v25 + 4) = WebCore::cssValueKeywordID(*((_QWORD *)v25 + 1), *((unsigned int *)v25 + 1) | ((unint64_t)((*(_DWORD *)v25 >> 22) & 1) << 32));
    v9 = 1;
  }
  v10 = 0;
  v44 = 0u;
  v45 = 0u;
  do
  {
    WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)a2, 1u, &v43);
    v12 = (uint64_t)v43;
    v43 = 0;
    v13 = (int *)*((_QWORD *)&v44 + v10);
    *((_QWORD *)&v44 + v10) = v12;
    if (!v13)
      goto LABEL_11;
    v14 = *v13 - 2;
    if (*v13 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v11);
      v13 = v43;
      v43 = 0;
      if (!v13)
        goto LABEL_10;
      v14 = *v13 - 2;
      if (*v13 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v11);
        goto LABEL_10;
      }
    }
    *v13 = v14;
LABEL_10:
    v12 = *((_QWORD *)&v44 + v10);
LABEL_11:
    if (v12)
      goto LABEL_17;
    WebCore::CSSPropertyParserHelpers::consumeNumber(a2, (void *)1, &v43);
    v15 = (uint64_t)v43;
    v43 = 0;
    v16 = (int *)*((_QWORD *)&v44 + v10);
    *((_QWORD *)&v44 + v10) = v15;
    if (v16)
    {
      v17 = *v16 - 2;
      if (*v16 != 2)
        goto LABEL_14;
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v11);
      v16 = v43;
      v43 = 0;
      if (v16)
      {
        v17 = *v16 - 2;
        if (*v16 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v11);
        else
LABEL_14:
          *v16 = v17;
      }
      v15 = *((_QWORD *)&v44 + v10);
    }
    if (!v15)
      break;
LABEL_17:
    ++v10;
  }
  while (v10 != 4);
  if (!(_QWORD)v44)
    goto LABEL_100;
  v19 = *a2;
  v18 = a2[1];
  if (*a2 >= v18)
  {
    v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v19 & 0x3F) == 0)
  {
    v20 = *a2;
    if (*a2 >= v18)
    {
      v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v20 & 0x3F) == 0)
    {
      v29 = *((_DWORD *)v20 + 4);
      if (v29 < 0)
      {
        v29 = WebCore::cssValueKeywordID(*((_QWORD *)v20 + 1), *((unsigned int *)v20 + 1) | ((unint64_t)((*(_DWORD *)v20 >> 22) & 1) << 32));
        *((_DWORD *)v20 + 4) = v29;
      }
      if ((unsigned __int16)v29 == 653)
      {
        v31 = *a2;
        v30 = (unint64_t)a2[1];
        if (*a2 == (__int128 *)v30)
        {
          v33 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          v32 = *a2;
          v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v32 = (__int128 *)((char *)v31 + 24);
          *a2 = (__int128 *)((char *)v31 + 24);
        }
        while (1)
        {
          if ((unint64_t)v32 < v30 || (v33 & 1) != 0)
          {
            if ((unint64_t)v32 >= v30)
              v32 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v34 = *(_DWORD *)v32;
          }
          else
          {
            v34 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v34;
            v33 = 1;
          }
          if ((v34 & 0x3F) != 0x10)
            break;
          v32 = (__int128 *)((char *)*a2 + 24);
          *a2 = v32;
        }
        if ((*(_DWORD *)v31 & 0x3F) != 0)
        {
          LOWORD(v35) = 0;
        }
        else
        {
          v35 = *((_DWORD *)v31 + 4);
          if (v35 < 0)
          {
            v35 = WebCore::cssValueKeywordID(*((_QWORD *)v31 + 1), *((unsigned int *)v31 + 1) | ((unint64_t)((*(_DWORD *)v31 >> 22) & 1) << 32));
            *((_DWORD *)v31 + 4) = v35;
          }
          if ((unsigned __int16)v35 >= 0x48Eu)
          {
            __break(0xC471u);
            JUMPOUT(0x1940F3EC8);
          }
        }
        v36 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v35 + 3088];
        v37 = *v36;
        *v36 += 2;
        if (v37)
          *v36 = v37;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v11);
        if (v9)
        {
LABEL_100:
          *a3 = 0;
          goto LABEL_101;
        }
        LOBYTE(v9) = 1;
      }
    }
  }
  if (!*((_QWORD *)&v44 + 1))
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v44 + 1, (WTF::StringImpl *)&v44);
  if (!(_QWORD)v45)
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v45, (WTF::StringImpl *)&v44);
  if (!*((_QWORD *)&v45 + 1))
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v45 + 1, (WTF::StringImpl *)((char *)&v44 + 8));
  if (a1 == 316 || a1 == 548 || a1 == 542)
    LOBYTE(v9) = 1;
  v21 = v44;
  v22 = v45;
  v44 = 0u;
  v45 = 0u;
  v42[0] = v21;
  v42[1] = v22;
  WebCore::CSSBorderImageSliceValue::create((uint64_t)v42, v9, (uint64_t *)&v43);
  *a3 = v43;
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_43:
    if (!(_QWORD)v22)
      goto LABEL_49;
    goto LABEL_44;
  }
  if (**((_DWORD **)&v22 + 1) != 2)
  {
    **((_DWORD **)&v22 + 1) -= 2;
    goto LABEL_43;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v22 + 1), v11);
  if ((_QWORD)v22)
  {
LABEL_44:
    if (*(_DWORD *)v22 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v22, v11);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_49:
  if (!*((_QWORD *)&v21 + 1))
  {
LABEL_52:
    if (!(_QWORD)v21)
      goto LABEL_101;
LABEL_53:
    if (*(_DWORD *)v21 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
    goto LABEL_101;
  }
  if (**((_DWORD **)&v21 + 1) != 2)
  {
    **((_DWORD **)&v21 + 1) -= 2;
    goto LABEL_52;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v21 + 1), v11);
  if ((_QWORD)v21)
    goto LABEL_53;
LABEL_101:
  v38 = (_DWORD *)*((_QWORD *)&v45 + 1);
  *((_QWORD *)&v45 + 1) = 0;
  if (v38)
  {
    if (*v38 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v11);
    else
      *v38 -= 2;
  }
  v39 = (_DWORD *)v45;
  *(_QWORD *)&v45 = 0;
  if (v39)
  {
    if (*v39 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v11);
    else
      *v39 -= 2;
  }
  v40 = (_DWORD *)*((_QWORD *)&v44 + 1);
  *((_QWORD *)&v44 + 1) = 0;
  if (v40)
  {
    if (*v40 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v11);
    else
      *v40 -= 2;
  }
  result = (_DWORD *)v44;
  *(_QWORD *)&v44 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v11);
    else
      *result -= 2;
  }
  return result;
}

_DWORD **WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=(_DWORD **a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  return a1;
}

uint64_t std::optional<WebCore::CSSUnresolvedColorMix::Component>::~optional(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  char v7;
  char v8;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v3 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E339BD10[v3])(&v7, a1 + 8);
      *(_DWORD *)(a1 + 16) = -1;
    }
    v4 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      v5 = v4[22];
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v5])(&v8, v4);
      v4[22] = -1;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumePercent@<X0>(WebCore::CSSCalcValue *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  unsigned __int16 *v6;

  v5 = 0;
  v6 = 0;
  result = WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::PercentRaw>::consumeAndResolve(a1, &v6, (uint64_t)&v5, ((unint64_t)a2 << 8) | 0x10100000000, a3);
  if (v5)
    result = WTF::fastFree((WTF *)(v5 - 16), v4);
  if (v6)
    return WTF::fastFree((WTF *)(v6 - 8), v4);
  return result;
}

void WebCore::CSSUnresolvedColorMix::Component::~Component(WebCore::CSSUnresolvedColorMix::Component *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  char v6;
  char v7;

  if (*((_BYTE *)this + 24))
  {
    v3 = *((unsigned int *)this + 4);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E339BD10[v3])(&v6, (char *)this + 8);
    *((_DWORD *)this + 4) = -1;
  }
  v4 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    v5 = v4[22];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v5])(&v7, v4);
    v4[22] = -1;
    WTF::fastFree((WTF *)v4, a2);
  }
}

void WebCore::CSSUnresolvedColorMix::~CSSUnresolvedColorMix(WebCore::CSSUnresolvedColorMix *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;

  if (*((_BYTE *)this + 72))
  {
    v3 = *((unsigned int *)this + 16);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E339BD10[v3])(&v9, (char *)this + 56);
    *((_DWORD *)this + 16) = -1;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    v5 = v4[22];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v5])(&v11, v4);
    v4[22] = -1;
    WTF::fastFree((WTF *)v4, a2);
  }
  if (*((_BYTE *)this + 40))
  {
    v6 = *((unsigned int *)this + 8);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, char *))off_1E339BD10[v6])(&v10, (char *)this + 24);
    *((_DWORD *)this + 8) = -1;
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7[22];
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v8])(&v12, v7);
    v7[22] = -1;
    WTF::fastFree((WTF *)v7, a2);
  }
}

int *WebCore::CSSBorderImageSliceValue::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int *result;
  _DWORD *v11;
  char v12;
  int v13;

  v7 = WTF::fastCompactMalloc((WTF *)0x30);
  v8 = *(_DWORD **)a1;
  v9 = *(_DWORD **)(a1 + 8);
  *v8 = **(_DWORD **)a1 + 2;
  *v9 += 2;
  v11 = *(_DWORD **)(a1 + 16);
  result = *(int **)(a1 + 24);
  *v11 += 2;
  *result += 2;
  *(_DWORD *)v7 = 2;
  v12 = *(_BYTE *)(v7 + 6);
  *(_WORD *)(v7 + 4) = -18432;
  *(_BYTE *)(v7 + 6) = v12 & 0xFC;
  *v8 += 2;
  *v9 += 2;
  *(_QWORD *)(v7 + 8) = v8;
  *(_QWORD *)(v7 + 16) = v9;
  *v11 += 2;
  v13 = *result;
  *result += 2;
  *(_QWORD *)(v7 + 24) = v11;
  *(_QWORD *)(v7 + 32) = result;
  *(_BYTE *)(v7 + 40) = a2;
  *a3 = v7;
  if (v13)
    *result = v13;
  else
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
  if (*v11 == 2)
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v6);
  else
    *v11 -= 2;
  if (*v9 == 2)
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v6);
  else
    *v9 -= 2;
  if (*v8 == 2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v6);
  *v8 -= 2;
  return result;
}

BOOL WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v2;
  int v3;
  __int128 *v4;
  WebCore::CSSPropertyParserHelpers *v6;
  WebCore::CSSPropertyParserHelpers *v7;
  WebCore::CSSPropertyParserHelpers *v8;

  v2 = *this;
  if (*this >= this[1])
  {
    {
      v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v8 = (WebCore::CSSPropertyParserHelpers *)this;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      this = (__int128 **)v8;
    }
  }
  v3 = *(_DWORD *)v2 & 0x3F;
  if (v3 == 21)
  {
    v4 = *this;
    if (*this == this[1])
    {
      {
        v7 = (WebCore::CSSPropertyParserHelpers *)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = (__int128 **)v7;
        v4 = *(__int128 **)v7;
      }
    }
    else
    {
      v4 = (__int128 *)((char *)v4 + 24);
      *this = v4;
    }
    while (1)
    {
      if (v4 >= this[1])
      {
        v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v6 = (WebCore::CSSPropertyParserHelpers *)this;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = (__int128 **)v6;
        }
      }
      if ((*(_DWORD *)v4 & 0x3F) != 0x10)
        break;
      v4 = (__int128 *)((char *)*this + 24);
      *this = v4;
    }
  }
  return v3 == 21;
}

int *WebCore::CSSPropertyParserHelpers::consumeSingleBackgroundSize@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  return WebCore::CSSPropertyParserHelpers::consumeBackgroundSize<(WebCore::CSSPropertyID)66>((uint64_t)this, *((unsigned __int8 *)a2 + 48), a3);
}

int *WebCore::CSSPropertyParserHelpers::consumeBackgroundSize<(WebCore::CSSPropertyID)66>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X8>)
{
  __int128 *v6;
  WebCore::CSSParserTokenRange *v7;
  int *result;
  int *v9;
  WTF::StringImpl *v10;
  int *v11;
  int *v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;

  v6 = *(__int128 **)a1;
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 8))
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id((unsigned int *)v6) - 621 <= 1)
    return (int *)WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)a1, v7, a3);
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>(a1, &v19);
  v9 = v19;
  if (v19)
    goto LABEL_10;
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent(a1, a2, 1u, 1, 0, 0, 0, (uint64_t *)&v18);
  v12 = v18;
  v11 = v19;
  v18 = 0;
  v19 = v12;
  if (!v11)
    goto LABEL_9;
  v13 = *v11 - 2;
  if (*v11 == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v10);
    v11 = v18;
    v18 = 0;
    if (!v11)
      goto LABEL_8;
    v13 = *v11 - 2;
    if (*v11 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v10);
      goto LABEL_8;
    }
  }
  *v11 = v13;
LABEL_8:
  v12 = v19;
LABEL_9:
  if (v12)
  {
LABEL_10:
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8)
      || (WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>(a1, &v18), (v14 = v18) == 0)
      && (WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent(a1, a2, 1u, 1, 0, 0, 0, (uint64_t *)&v18),
          (v14 = v18) == 0))
    {
      v14 = &WebCore::staticCSSValuePool[4664];
      *v14 += 2;
    }
    v15 = v19;
    v19 = 0;
    v16 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v16 = 2;
    v17 = (*(unsigned __int8 *)(v16 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_BYTE *)(v16 + 7) = v9 != 0;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)(v16 + 16) = v14;
    *(_WORD *)(v16 + 4) = -18432;
    *(_BYTE *)(v16 + 6) = BYTE2(v17);
    goto LABEL_14;
  }
  v16 = 0;
LABEL_14:
  *a3 = (int *)v16;
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v10);
    else
      *result -= 2;
  }
  return result;
}

void WebCore::CSSPropertyParsing::parseFontFaceDescriptor(__int128 **a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  WebCore::CSSParserTokenRange *v8;
  __int128 *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t *v16;
  WTF *v17;
  uint64_t v18;
  __int128 *v19;
  int v20;
  int v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  int v25;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  int *v30;
  int *v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  WTF *v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v40;
  _DWORD *v41;
  WTF *v42;
  int v44;
  __int128 *v45;
  __int128 *v46;
  int v47;
  __int128 *v48;
  __int128 *v49;
  int v50;
  WTF *v51;
  int v52;
  unsigned int v53;
  _BYTE v54[32];
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  _BYTE v58[32];

  if ((WebCore::isExposed(a2, (unsigned int *)(a3 + 54)) & 1) == 0
    && ((a2 - 304) > 0x1E || ((1 << (a2 - 48)) & 0x7C010001) == 0))
  {
    goto LABEL_7;
  }
  if (a2 <= 125)
  {
    switch(a2)
    {
      case 8:
        WebCore::CSSPropertyParserHelpers::consumeFontFaceFontFamily((WebCore::CSSPropertyParserHelpers *)a1, v8, a4);
        return;
      case 9:
        v9 = *a1;
        if (*a1 >= a1[1])
        {
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if ((*(_DWORD *)v9 & 0x3F) == 0)
        {
          v44 = *((_DWORD *)v9 + 4);
          if (v44 < 0)
          {
            v44 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
            *((_DWORD *)v9 + 4) = v44;
          }
          if ((unsigned __int16)v44 == 90)
          {
            v45 = *a1;
            if (*a1 == a1[1])
            {
              {
                WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
                v45 = *a1;
              }
            }
            else
            {
              v45 = (__int128 *)((char *)v45 + 24);
              *a1 = v45;
            }
            v46 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            while (1)
            {
              if (v45 >= a1[1])
              {
                v45 = v46;
                {
                  v46 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v46, 30, 0);
                  v45 = v46;
                }
              }
              if ((*(_DWORD *)v45 & 0x3F) != 0x10)
                break;
              v45 = (__int128 *)((char *)*a1 + 24);
              *a1 = v45;
            }
            v31 = &WebCore::staticCSSValuePool[3448];
            dword_1ECE8C188 += 2;
LABEL_95:
            *a4 = (WTF::StringImpl *)v31;
            return;
          }
        }
        v56 = (WTF *)v58;
        v57 = 4;
        WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFeatureTagValue(a1, v8, &v51);
        v11 = v51;
        if (!v51)
        {
LABEL_82:
          v31 = 0;
LABEL_83:
          if (HIDWORD(v57))
          {
            v32 = v56;
            v33 = 8 * HIDWORD(v57);
            do
            {
              v34 = *(_DWORD **)v32;
              *(_QWORD *)v32 = 0;
              if (v34)
              {
                if (*v34 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v10);
                else
                  *v34 -= 2;
              }
              v32 = (WTF *)((char *)v32 + 8);
              v33 -= 8;
            }
            while (v33);
          }
          v35 = v56;
          if (v58 != (_BYTE *)v56 && v56 != 0)
          {
            v56 = 0;
            LODWORD(v57) = 0;
            WTF::fastFree(v35, v10);
          }
          goto LABEL_95;
        }
        break;
      case 15:
        WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStretchRange(a1, v8, a4);
        return;
      case 16:
        WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStyleRange((uint64_t *)a1, *(unsigned __int8 *)(a3 + 48), (uint64_t *)a4);
        return;
      case 20:
        WebCore::CSSPropertyParserHelpers::consumeFontVariantAlternates(a1, v8, (uint64_t *)a4);
        return;
      case 21:
        v24 = *a1;
        if (*a1 >= a1[1])
        {
          v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if ((*(_DWORD *)v24 & 0x3F) != 0)
          goto LABEL_79;
        v20 = *((_DWORD *)v24 + 4);
        if (v20 < 0)
        {
          v25 = WebCore::cssValueKeywordID(*((_QWORD *)v24 + 1), *((unsigned int *)v24 + 1) | ((unint64_t)((*(_DWORD *)v24 >> 22) & 1) << 32));
          LOWORD(v20) = v25;
          *((_DWORD *)v24 + 4) = v25;
        }
        if ((unsigned __int16)v20 - 50 > 0x28
          || ((1 << (v20 - 50)) & 0x10000003E01) == 0)
        {
          goto LABEL_79;
        }
        v27 = *a1;
        if (*a1 == a1[1])
        {
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v27 = *a1;
          }
        }
        else
        {
          v27 = (__int128 *)((char *)v27 + 24);
          *a1 = v27;
        }
        v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        while (1)
        {
          if (v27 >= a1[1])
          {
            v27 = v28;
            {
              v28 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v28, 30, 0);
              v27 = v28;
            }
          }
          if ((*(_DWORD *)v27 & 0x3F) != 0x10)
            break;
          v27 = (__int128 *)((char *)*a1 + 24);
          *a1 = v27;
        }
        if ((unsigned __int16)v20 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1940F4FBCLL);
        }
        goto LABEL_148;
      case 22:
        WebCore::CSSPropertyParserHelpers::consumeFontVariantEastAsian((uint64_t)a1, v8, (int **)a4);
        return;
      case 24:
        WebCore::CSSPropertyParserHelpers::consumeFontVariantLigatures((unsigned int **)a1, (int **)a4);
        return;
      case 25:
        WebCore::CSSPropertyParserHelpers::consumeFontVariantNumeric((unsigned int **)a1, (int **)a4);
        return;
      case 26:
        v19 = *a1;
        if (*a1 >= a1[1])
        {
          v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if ((*(_DWORD *)v19 & 0x3F) != 0)
          goto LABEL_79;
        v20 = *((_DWORD *)v19 + 4);
        if (v20 < 0)
        {
          v21 = WebCore::cssValueKeywordID(*((_QWORD *)v19 + 1), *((unsigned int *)v19 + 1) | ((unint64_t)((*(_DWORD *)v19 >> 22) & 1) << 32));
          LOWORD(v20) = v21;
          *((_DWORD *)v19 + 4) = v21;
        }
        if ((unsigned __int16)v20 - 250 >= 2 && (unsigned __int16)v20 != 90)
          goto LABEL_79;
        v22 = *a1;
        if (*a1 == a1[1])
        {
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v22 = *a1;
          }
        }
        else
        {
          v22 = (__int128 *)((char *)v22 + 24);
          *a1 = v22;
        }
        v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        while (1)
        {
          if (v22 >= a1[1])
          {
            v22 = v23;
            {
              v23 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v23, 30, 0);
              v22 = v23;
            }
          }
          if ((*(_DWORD *)v22 & 0x3F) != 0x10)
            break;
          v22 = (__int128 *)((char *)*a1 + 24);
          *a1 = v22;
        }
        if ((unsigned __int16)v20 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1940F505CLL);
        }
        goto LABEL_148;
      case 28:
        WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontWeightAbsoluteRange(a1, (int **)a4);
        return;
      default:
        goto LABEL_7;
    }
    while (1)
    {
      v55 = v11;
      LODWORD(v12) = HIDWORD(v57);
      if (HIDWORD(v57) == (_DWORD)v57)
      {
        v16 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)&v55);
        v12 = HIDWORD(v57);
        v17 = v56;
        v18 = *v16;
        *v16 = 0;
        *((_QWORD *)v17 + v12) = v18;
      }
      else
      {
        v55 = 0;
        *((_QWORD *)v56 + HIDWORD(v57)) = v11;
      }
      HIDWORD(v57) = v12 + 1;
      v13 = v55;
      v55 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v10);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *a1;
      if (*a1 >= a1[1])
      {
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v14 & 0x3F) != 0x15)
      {
        v51 = (WTF *)v54;
        v52 = 4;
        v37 = v56;
        if (v56 == (WTF *)v58)
        {
          v38 = HIDWORD(v57);
          memcpy(v54, v58, 8 * HIDWORD(v57));
        }
        else
        {
          v56 = (WTF *)v58;
          v51 = v37;
          v50 = v57;
          v38 = HIDWORD(v57);
          LODWORD(v57) = 4;
          v52 = v50;
        }
        HIDWORD(v57) = 0;
        v53 = v38;
        WebCore::CSSValueList::createCommaSeparated((uint64_t)&v51, (uint64_t *)&v55);
        v31 = (int *)v55;
        if (v53)
        {
          v39 = v51;
          v40 = 8 * v53;
          do
          {
            v41 = *(_DWORD **)v39;
            *(_QWORD *)v39 = 0;
            if (v41)
            {
              if (*v41 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, v10);
              else
                *v41 -= 2;
            }
            v39 = (WTF *)((char *)v39 + 8);
            v40 -= 8;
          }
          while (v40);
        }
        v42 = v51;
        if (v54 != (_BYTE *)v51 && v51 != 0)
        {
          v51 = 0;
          v52 = 0;
          WTF::fastFree(v42, v10);
        }
        goto LABEL_83;
      }
      v15 = *a1;
      if (*a1 != a1[1])
        goto LABEL_30;
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v15 = *a1;
      }
LABEL_31:
      if (v15 >= a1[1])
      {
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v15 & 0x3F) == 0x10)
        break;
      WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFeatureTagValue(a1, v10, &v51);
      v11 = v51;
      if (!v51)
        goto LABEL_82;
    }
    v15 = *a1;
LABEL_30:
    v15 = (__int128 *)((char *)v15 + 24);
    *a1 = v15;
    goto LABEL_31;
  }
  if (a2 > 230)
  {
    if (a2 == 231)
    {
      WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontFaceSrc(a1, (WebCore::CSSParserTokenRange *)a3, a4);
      return;
    }
    if (a2 == 286)
    {
      WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontFaceUnicodeRange((uint64_t)a1, v8, a4);
      return;
    }
LABEL_7:
    *a4 = 0;
    return;
  }
  if (a2 != 126)
  {
    if (a2 == 229)
    {
      WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)a1, 1u, a4);
      return;
    }
    goto LABEL_7;
  }
  v29 = *a1;
  if (*a1 >= a1[1])
  {
    v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v29 & 0x3F) != 0)
    goto LABEL_79;
  v20 = *((_DWORD *)v29 + 4);
  if (v20 < 0)
  {
    v47 = WebCore::cssValueKeywordID(*((_QWORD *)v29 + 1), *((unsigned int *)v29 + 1) | ((unint64_t)((*(_DWORD *)v29 >> 22) & 1) << 32));
    LOWORD(v20) = v47;
    *((_DWORD *)v29 + 4) = v47;
  }
  if ((unsigned __int16)v20 - 967 < 3 || (unsigned __int16)v20 == 394 || (unsigned __int16)v20 == 367)
  {
    v48 = *a1;
    if (*a1 == a1[1])
    {
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v48 = *a1;
      }
    }
    else
    {
      v48 = (__int128 *)((char *)v48 + 24);
      *a1 = v48;
    }
    v49 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if (v48 >= a1[1])
      {
        v48 = v49;
        {
          v49 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v49, 30, 0);
          v48 = v49;
        }
      }
      if ((*(_DWORD *)v48 & 0x3F) != 0x10)
        break;
      v48 = (__int128 *)((char *)*a1 + 24);
      *a1 = v48;
    }
    if ((unsigned __int16)v20 >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1940F4FE4);
    }
LABEL_148:
    v30 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v20 + 3088];
    *v30 += 2;
  }
  else
  {
LABEL_79:
    v30 = 0;
  }
  *a4 = (WTF::StringImpl *)v30;
}

void WebCore::CSSPropertyParsing::parseCounterStyleDescriptor(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  WTF::StringImpl *v8;
  int *v9;
  WTF::StringImpl *v10;

  if ((WebCore::isExposed(a2, (unsigned int *)(a3 + 54)) & 1) == 0)
    goto LABEL_36;
  if (a2 > 245)
  {
    if (a2 == 246)
    {
      WebCore::CSSPropertyParserHelpers::consumeCounterStyleSystem((__int128 **)a1, (WebCore::CSSParserTokenRange *)a3, a4);
      return;
    }
    goto LABEL_36;
  }
  if (a2 > 243)
  {
    if (a2 == 244)
    {
      WebCore::CSSPropertyParserHelpers::consumeCounterStyleSymbols((__int128 **)a1, (WebCore::CSSParserTokenRange *)a3, a4);
      return;
    }
    goto LABEL_36;
  }
  if (a2 > 229)
  {
    if (a2 != 243)
    {
      if (a2 == 230)
      {
        WebCore::CSSPropertyParserHelpers::consumeCounterStyleSpeakAs((__int128 **)a1, a4);
        return;
      }
      goto LABEL_36;
    }
    goto LABEL_17;
  }
  if (a2 <= 194)
  {
    switch(a2)
    {
      case 40:
        WebCore::CSSPropertyParserHelpers::consumeCounterStyleAdditiveSymbols((WebCore::CSSPropertyParserHelpers *)a1, (WebCore::CSSParserTokenRange *)a3, a4);
        return;
      case 175:
        WebCore::CSSPropertyParserHelpers::consumeCounterStyleNegative((__int128 **)a1, (WebCore::CSSParserTokenRange *)a3, a4);
        return;
      case 112:
        WebCore::CSSPropertyParserHelpers::consumeCounterStyleName((__int128 **)a1, (uint64_t *)a4);
        return;
    }
    goto LABEL_36;
  }
  if (a2 != 208)
  {
    if (a2 == 195)
    {
      WebCore::CSSPropertyParserHelpers::consumeCounterStylePad(a1, (WebCore::CSSParserTokenRange *)a3, a4);
      return;
    }
    if (a2 != 204)
      goto LABEL_36;
LABEL_17:
    WebCore::CSSPropertyParserHelpers::consumeCounterStyleSymbol((__int128 **)a1, (WebCore::CSSParserTokenRange *)a3, (WTF::StringImpl *)a4);
    return;
  }
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>(a1, (int **)&v10);
  if (v10)
  {
    *a4 = v10;
    return;
  }
  WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithoutSingleValueOptimization<WebCore::CSSPropertyParserHelpers::consumeCounterStyleRange(WebCore::CSSParserTokenRange &)::$_0>(&v10, a1);
  v9 = (int *)v10;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    *a4 = 0;
    if (!v9)
      return;
    goto LABEL_32;
  }
  if (!v10)
  {
LABEL_36:
    *a4 = 0;
    return;
  }
  if (*((_DWORD *)v10 + 2))
  {
    *a4 = v10;
    return;
  }
  *a4 = 0;
LABEL_32:
  if (*v9 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
  else
    *v9 -= 2;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v2 = result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)result;
  if (*(_QWORD *)result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 394)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)v2;
    v8 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)v2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)v2 + 24);
      *(_QWORD *)v2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1940F58ECLL);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *a2 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)539>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 539)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1940F5B20);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumeSingleMaskSize@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  return WebCore::CSSPropertyParserHelpers::consumeBackgroundSize<(WebCore::CSSPropertyID)170>((uint64_t)this, *((unsigned __int8 *)a2 + 48), a3);
}

void WebCore::SecurityOrigin::createOpaque(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t IdentifierInternal;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  char v8;
  char **v9;
  char *v10;

  v3 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v3 = 1;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v5 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v5 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    v6 = WebCore::Process::globalIdentifier;
    *(_QWORD *)(v3 + 8) = IdentifierInternal;
    *(_QWORD *)(v3 + 16) = v6;
    *(_DWORD *)(v3 + 32) = 1;
    v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v7 += 2;
    *(_QWORD *)(v3 + 40) = v7;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 54) = 0;
    *(_WORD *)(v3 + 62) = 1;
    *a1 = v3;
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebCore::ResourceLoader::isAllowedToAskUserForCredentials(WebCore::ResourceLoader *this, WTF::StringImpl *a2)
{
  uint64_t result;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  WebCore::ThreadableBlobRegistry *v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 1092) & 8) == 0)
    return 0;
  result = WebCore::ResourceLoader::shouldAllowResourceToAskForCredentials(this, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *((unsigned __int8 *)this + 978);
  if (v5 == 2)
    return 1;
  if (v5 != 1)
    return 0;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)this + 4) + 296) + 192), v4);
  v7 = (WebCore::ResourceLoader *)((char *)this + 536);
  if ((*((_BYTE *)this + 720) & 1) == 0)
  {
    v8 = v6;
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceLoader *)((char *)this + 536));
    v7 = (WebCore::ResourceLoader *)((char *)this + 536);
    v6 = v8;
    *((_BYTE *)this + 720) |= 1u;
  }
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  return WebCore::SecurityOrigin::canRequest(v6, v7, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
}

uint64_t WebCore::StorageUtilities::readOriginFromFile@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::FileSystemImpl *v4;
  void *v5;
  WTF *v6;
  _BYTE v7[120];
  WTF *v8;
  int v9;
  char v10;
  int v11;

  if (*(_QWORD *)this
    && *(_DWORD *)(*(_QWORD *)this + 4)
    && (this = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)this, a2), (this & 1) != 0))
  {
    v4 = (WTF::FileSystemImpl *)WTF::FileSystemImpl::openFile();
    v11 = (int)v4;
    if ((_DWORD)v4 == -1 || (WTF::FileSystemImpl::readEntireFile(v4), !v10))
    {
      *a3 = 0;
      a3[64] = 0;
    }
    else
    {
      WTF::Persistence::Decoder::Decoder();
      *a3 = 0;
      a3[64] = 0;
      WTF::Persistence::Decoder::operator>><WebCore::ClientOrigin,(void *)0>((uint64_t)v7, (uint64_t)a3);
      WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v7);
      if (v10)
      {
        v6 = v8;
        if (v8)
        {
          v8 = 0;
          v9 = 0;
          WTF::fastFree(v6, v5);
        }
      }
    }
    return WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v11, (int *)v5);
  }
  else
  {
    *a3 = 0;
    a3[64] = 0;
  }
  return this;
}

uint64_t WTF::Persistence::Decoder::operator>><WebCore::ClientOrigin,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[24];
  int v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  WTF::Persistence::Coder<WebCore::ClientOrigin>::decodeForPersistence(a1, (uint64_t)v12);
  if (*(unsigned __int8 *)(a2 + 64) != v16)
  {
    if (*(_BYTE *)(a2 + 64))
    {
      v5 = *(unsigned int *)(a2 + 56);
      if ((_DWORD)v5 != -1)
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v5])(&v11, a2 + 32);
      *(_DWORD *)(a2 + 56) = -1;
      v6 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v6 != -1)
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v6])(&v11, a2);
      *(_DWORD *)(a2 + 24) = -1;
      *(_BYTE *)(a2 + 64) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_DWORD *)(a2 + 24) = -1;
      v7 = v13;
      if (v13 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E344FC68[v13])(&v11, a2, v12);
        *(_DWORD *)(a2 + 24) = v7;
      }
      *(_BYTE *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 56) = -1;
      v8 = v15;
      if (v15 != -1)
      {
        ((void (*)(uint64_t *))off_1E344FC68[v15])(&v11);
        *(_DWORD *)(a2 + 56) = v8;
      }
      *(_BYTE *)(a2 + 64) = 1;
    }
    goto LABEL_24;
  }
  if (!*(_BYTE *)(a2 + 64))
    return a1;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4 == -1)
  {
    if (v13 == -1)
      goto LABEL_19;
  }
  else if (v13 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v4])(&v11, a2);
    *(_DWORD *)(a2 + 24) = -1;
    goto LABEL_19;
  }
  v11 = a2;
  ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E344FC98[v13])(&v11, a2, v12);
LABEL_19:
  v9 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v9 == -1)
  {
    if (v15 == -1)
      goto LABEL_24;
  }
  else if (v15 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v9])(&v11, a2 + 32);
    *(_DWORD *)(a2 + 56) = -1;
    goto LABEL_24;
  }
  v11 = a2 + 32;
  ((void (*)(uint64_t *))off_1E344FC98[v15])(&v11);
LABEL_24:
  if (v16)
  {
    if (v15 != -1)
      ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v15])(&v11, &v14);
    v15 = -1;
    if (v13 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v13])(&v11, v12);
  }
  return a1;
}

uint64_t WTF::Persistence::Coder<WebCore::ClientOrigin>::decodeForPersistence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[24];
  int v10;
  _BYTE v11[24];
  unsigned int v12;
  _BYTE v13[24];
  unsigned int v14;
  char v15;
  _BYTE v16[24];
  int v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16[0] = 0;
  v18 = 0;
  v13[0] = 0;
  v15 = 0;
  result = WTF::Persistence::Decoder::operator>><WebCore::SecurityOriginData,(void *)0>(a1, (uint64_t)v16);
  if (v18
    && (result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v16), !(_DWORD)result)
    && (result = WTF::Persistence::Decoder::operator>><WebCore::SecurityOriginData,(void *)0>(a1, (uint64_t)v13), v15)
    && (result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v13), !(_DWORD)result))
  {
    if (!v18)
      goto LABEL_27;
    v9[0] = 0;
    v10 = -1;
    v5 = v17;
    if (v17 != -1)
    {
      result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E3407308[v17])(&v8, v9, v16);
      v10 = v5;
    }
    if (!v15)
LABEL_27:
      __break(1u);
    v11[0] = 0;
    v12 = -1;
    v6 = v14;
    if (v14 != -1)
    {
      result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E3407308[v14])(&v8, v11, v13);
      v12 = v6;
      v5 = v10;
    }
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 24) = -1;
    if (v5 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E3407308[v5])(&v8, a2, v9);
      *(_DWORD *)(a2 + 24) = v5;
      v6 = v12;
    }
    *(_BYTE *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 56) = -1;
    if (v6 == -1)
    {
      *(_BYTE *)(a2 + 64) = 1;
    }
    else
    {
      result = ((uint64_t (*)(char *))off_1E3407308[v6])(&v8);
      *(_DWORD *)(a2 + 56) = v6;
      v7 = v12;
      *(_BYTE *)(a2 + 64) = 1;
      if ((_DWORD)v7 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_1E34072F8[v7])(&v8, v11);
    }
    v12 = -1;
    if (v10 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))off_1E34072F8[v10])(&v8, v9);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
  }
  if (v15 && v14 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34072F8[v14])(v9, v13);
  if (v18)
  {
    if (v17 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34072F8[v17])(v9, v16);
  }
  return result;
}

uint64_t WTF::Persistence::Decoder::operator>><WebCore::SecurityOriginData,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _BYTE v9[24];
  int v10;
  unsigned __int8 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WTF::Persistence::Coder<WebCore::SecurityOriginData>::decodeForPersistence(a1, (uint64_t)v9);
  if (*(unsigned __int8 *)(a2 + 32) != v11)
  {
    if (*(_BYTE *)(a2 + 32))
    {
      v5 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v5 != -1)
        ((void (*)(uint64_t *, uint64_t))off_1E34072F8[v5])(&v8, a2);
      *(_DWORD *)(a2 + 24) = -1;
      *(_BYTE *)(a2 + 32) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_DWORD *)(a2 + 24) = -1;
      v6 = v10;
      if (v10 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3407308[v10])(&v8, a2, v9);
        *(_DWORD *)(a2 + 24) = v6;
      }
      *(_BYTE *)(a2 + 32) = 1;
    }
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a2 + 32))
    return a1;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4 == -1)
  {
    if (v10 == -1)
      goto LABEL_15;
LABEL_14:
    v8 = a2;
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3407410[v10])(&v8, a2, v9);
    goto LABEL_15;
  }
  if (v10 != -1)
    goto LABEL_14;
  ((void (*)(uint64_t *, uint64_t))off_1E34072F8[v4])(&v8, a2);
  *(_DWORD *)(a2 + 24) = -1;
LABEL_15:
  if (v11 && v10 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E34072F8[v10])(&v8, v9);
  return a1;
}

uint64_t WTF::Persistence::Coder<WebCore::SecurityOriginData>::decodeForPersistence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  char v11;
  unsigned __int16 v12;
  char v13;
  __int16 v14;

  LOBYTE(v10) = 0;
  v11 = 0;
  result = WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v10);
  if (!v11)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  LOBYTE(v8) = 0;
  v9 = 0;
  result = WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v8);
  if (v9)
  {
    v14 = 0;
    result = WTF::Persistence::Decoder::operator>>();
    if (HIBYTE(v14))
    {
      v6 = v14;
      if (!(_BYTE)v14)
      {
LABEL_7:
        if (v11 && v9)
        {
          v7 = v10;
          if (v10)
            *(_DWORD *)v10 += 2;
          result = (uint64_t)v8;
          if (v8)
            *(_DWORD *)v8 += 2;
          if (v7 != (WTF::StringImpl *)-1)
          {
            *(_QWORD *)a2 = v7;
            *(_QWORD *)(a2 + 8) = result;
            *(_DWORD *)(a2 + 16) = v6;
            *(_DWORD *)(a2 + 24) = 0;
            *(_BYTE *)(a2 + 32) = 1;
            goto LABEL_19;
          }
        }
        else
        {
          __break(1u);
        }
        result = 58;
        __break(0xC471u);
        return result;
      }
      LOBYTE(v12) = 0;
      v13 = 0;
      result = WTF::Persistence::Decoder::operator>>();
      if (v13)
      {
        v6 = v12 | 0x10000;
        goto LABEL_7;
      }
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (v9)
    {
      result = (uint64_t)v8;
LABEL_19:
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  if (v11)
  {
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::SecurityOriginData::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  char v6;
  char *v7;
  _QWORD v8[3];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v7 = &v6;
  result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v3])(v8, &v7, a1);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  v5 = v9;
  if (v9 != -1)
  {
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v9])(&v7, a2, v8);
    *(_DWORD *)(a2 + 24) = v5;
    if (v9 != -1)
      return (_QWORD *)((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v9])(&v7, v8);
  }
  return result;
}

{
  uint64_t v3;
  _QWORD *result;
  int v5;
  char v6;
  char *v7;
  _QWORD v8[3];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v7 = &v6;
  result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v3])(v8, &v7, a1);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  v5 = v9;
  if (v9 != -1)
  {
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v9])(&v7, a2, v8);
    *(_DWORD *)(a2 + 24) = v5;
    if (v9 != -1)
      return (_QWORD *)((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v9])(&v7, v8);
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::rehash(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int i;
  uint64_t Table;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  BOOL v14;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  BOOL v54;
  int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v62;
  _QWORD *v63;
  WTF *v64;
  WTF *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t result;
  unsigned int v86;
  uint64_t v87;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned __int16 v101;
  char v102;
  unsigned int *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  uint64_t v111;

  LODWORD(v3) = a2;
  v111 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (!*a1)
    goto LABEL_120;
  v5 = *(_DWORD *)(v4 - 4);
  for (i = *(_DWORD *)(v4 - 12); ; i = 0)
  {
    Table = WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::allocateTable(v3);
    *a1 = Table;
    *(_DWORD *)(Table - 4) = (_DWORD)v3;
    *(_DWORD *)(*a1 - 8) = (_DWORD)v3 - 1;
    *(_DWORD *)(*a1 - 16) = 0;
    *(_DWORD *)(*a1 - 12) = i;
    if (!v5)
      break;
    v10 = 0;
    v11 = 0;
    v3 = &v107;
    v90 = v5;
    v87 = v4;
    while (1)
    {
      v12 = v4 + (v10 << 6);
      v13 = *(WTF **)v12;
      if (*(_QWORD *)v12 == -1)
        goto LABEL_86;
      v104 = 0;
      v105 = 0;
      v106 = 0;
      v110 = 0;
      v107 = 0;
      v108 = 0;
      v109 = 0;
      if (WTF::equal(v13, 0, v9))
        v14 = *(_QWORD *)(v12 + 8) == 0;
      else
        v14 = 0;
      if (!v14 || *(_BYTE *)(v12 + 16) != 0)
      {
        v16 = 0;
        v17 = 0;
LABEL_14:
        ((void (*)(unsigned int **, uint64_t *))off_1E33A7D18[v17])(&v103, &v107);
        goto LABEL_15;
      }
      v17 = v110;
      if ((WTF::StringImpl **)v12 == &v104)
      {
        v16 = 1;
      }
      else
      {
        v83 = *(unsigned int *)(v12 + 48);
        v84 = v110 == v83;
        if (v110 == 0xFFFFFFFFLL)
          v84 = 0;
        if (v83 == 0xFFFFFFFFLL)
          v16 = v110 == 0xFFFFFFFFLL;
        else
          v16 = v84;
        if ((_DWORD)v83 != -1 && v84)
        {
          v103 = &v100;
          v16 = ((uint64_t (*)(unsigned int **, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v110])(&v103, v12 + 24, &v107);
          v17 = v110;
        }
      }
      if (v17 != 0xFFFFFFFFLL)
        goto LABEL_14;
LABEL_15:
      v110 = -1;
      v18 = v104;
      v104 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v8);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (!v16)
        break;
      v78 = v4 + (v10 << 6);
      v79 = *(WTF **)(v78 + 56);
      *(_QWORD *)(v78 + 56) = 0;
      if (v79)
      {
        WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v79 + 8, v8);
        v80 = *(WTF::StringImpl **)v79;
        *(_QWORD *)v79 = 0;
        if (v80)
          WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v79, v80);
        WTF::fastFree(v79, v80);
      }
      v81 = *(unsigned int *)(v12 + 48);
      if ((_DWORD)v81 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t))off_1E33A7D18[v81])(&v104, v12 + 24);
      *(_DWORD *)(v12 + 48) = -1;
      v82 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v8);
        else
          *(_DWORD *)v82 -= 2;
      }
LABEL_86:
      if (++v10 == v90)
        goto LABEL_116;
    }
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 8);
    else
      v20 = 0;
    v21 = *(_DWORD *)(*(_QWORD *)v12 + 16);
    v98 = v10;
    v99 = v11;
    v97 = (uint64_t *)(v12 + 8);
    if (v21 < 0x100)
      v96 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v12);
    else
      v96 = v21 >> 8;
    v22 = *(unsigned __int8 *)(v12 + 8);
    v23 = *(unsigned __int8 *)(v12 + 9);
    v24 = v4 + (v10 << 6);
    v25 = *(unsigned __int8 *)(v12 + 10);
    v26 = *(unsigned __int8 *)(v12 + 11);
    v27 = *(unsigned __int8 *)(v12 + 12);
    v93 = *(unsigned __int8 *)(v24 + 13);
    v94 = *(unsigned __int8 *)(v24 + 14);
    v95 = *(unsigned __int8 *)(v24 + 15);
    v101 = 0;
    v102 = 0;
    v28 = *(unsigned int *)(v24 + 48);
    v103 = &v100;
    if ((_DWORD)v28 == -1)
      v29 = -1;
    else
      v29 = v28;
    v30 = (v29 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v29 - 1640531527) << 16) ^ ((unsigned __int16)v29
                                                                                               - 1640531527);
    v31 = (v29 >> 37) & 0x7FFF800 ^ ((v30 + WORD2(v29) + (v30 >> 11)) << 16) ^ (v30 + WORD2(v29) + (v30 >> 11));
    v100 = v31 + (v31 >> 11);
    if ((_DWORD)v28 != -1)
    {
      v104 = (WTF::StringImpl *)&v103;
      v91 = v24 + 24;
      v92 = v24;
      ((void (*)(WTF::StringImpl **))off_1E33A7E88[v28])(&v104);
      v32 = v100;
      if (v102)
      {
        v86 = (v100 + v101) ^ ((v100 + v101) << 11);
        v32 = v86 + (v86 >> 17);
      }
      v33 = 0;
      v34 = ((v22 - 1640531527) ^ ((v22 - 1640531527) << 16))
          + v23
          + (((v22 - 1640531527) ^ ((v22 - 1640531527) << 16)) >> 11);
      v35 = (v34 ^ (v34 << 16)) + v25 + ((v34 ^ (v34 << 16)) >> 11);
      v36 = (v35 ^ (v35 << 16)) + v26 + ((v35 ^ (v35 << 16)) >> 11);
      v37 = (v36 ^ (v36 << 16)) + v27 + ((v36 ^ (v36 << 16)) >> 11);
      v38 = (v37 ^ (v37 << 16)) + v93 + ((v37 ^ (v37 << 16)) >> 11);
      v39 = (v38 ^ (v38 << 16)) + v94 + ((v38 ^ (v38 << 16)) >> 11);
      v40 = (v39 ^ (v39 << 16)) + v95 + ((v39 ^ (v39 << 16)) >> 11);
      v41 = (v40 ^ (v40 << 16)) + ((v40 ^ (v40 << 16)) >> 11);
      v42 = (v41 ^ (8 * v41)) + ((v41 ^ (8 * v41)) >> 5);
      v43 = (v42 ^ (4 * v42)) + ((v42 ^ (4 * v42)) >> 15);
      v44 = v43 ^ (v43 << 10);
      v45 = (v32 ^ (8 * v32)) + ((v32 ^ (8 * v32)) >> 5);
      v46 = (v45 ^ (4 * v45)) + ((v45 ^ (4 * v45)) >> 15);
      v47 = v46 ^ (v46 << 10);
      if (v44)
        v48 = 277951225 * v44;
      else
        v48 = 2088763392;
      if (v47)
        v49 = 95187966 * v47;
      else
        v49 = -16777216;
      v50 = (0xD7862706ELL
           * (unint64_t)(277951225 * v96
                              + 95187966
                              * ((0xD7862706ELL * (unint64_t)(v49 + v48)) >> 4))) >> 4;
      v10 = v98;
      while (1)
      {
        v51 = v50 & v20;
        v52 = v19 + (v51 << 6);
        v104 = 0;
        v105 = 0;
        v106 = 0;
        v110 = 0;
        v107 = 0;
        v108 = 0;
        v109 = 0;
        if (WTF::equal(*(WTF **)v52, 0, v9))
          v54 = *(_QWORD *)(v52 + 8) == 0;
        else
          v54 = 0;
        if (v54 && *(_BYTE *)(v52 + 16) == 0)
        {
          v57 = v110;
          if ((WTF::StringImpl **)v52 == &v104)
          {
            v56 = 1;
          }
          else
          {
            v59 = *(unsigned int *)(v52 + 48);
            v60 = v110 == v59;
            if (v110 == 0xFFFFFFFFLL)
              v60 = 0;
            if (v59 == 0xFFFFFFFFLL)
              v56 = v110 == 0xFFFFFFFFLL;
            else
              v56 = v60;
            if ((_DWORD)v59 != -1 && v60)
            {
              v103 = &v100;
              v56 = ((uint64_t (*)(unsigned int **, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v110])(&v103, v52 + 24, &v107);
              v57 = v110;
            }
          }
          if (v57 == 0xFFFFFFFFLL)
            goto LABEL_45;
        }
        else
        {
          v56 = 0;
          v57 = 0;
        }
        ((void (*)(unsigned int **, uint64_t *))off_1E33A7D18[v57])(&v103, &v107);
LABEL_45:
        v110 = -1;
        v58 = v104;
        v104 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v53);
          else
            *(_DWORD *)v58 -= 2;
        }
        LODWORD(v50) = ++v33 + v51;
        if (v56)
        {
          v62 = v19 + (v51 << 6);
          v65 = *(WTF **)(v62 + 56);
          v63 = (_QWORD *)(v62 + 56);
          v64 = v65;
          *v63 = 0;
          v4 = v87;
          if (v65)
          {
            WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v64 + 8, v53);
            v66 = *(WTF::StringImpl **)v64;
            *(_QWORD *)v64 = 0;
            if (v66)
              WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v64, v66);
            WTF::fastFree(v64, v66);
          }
          v67 = *(unsigned int *)(v52 + 48);
          if ((_DWORD)v67 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t))off_1E33A7D18[v67])(&v104, v52 + 24);
          *(_DWORD *)(v52 + 48) = -1;
          v68 = *(WTF::StringImpl **)v52;
          *(_QWORD *)v52 = 0;
          if (v68)
          {
            if (*(_DWORD *)v68 == 2)
              WTF::StringImpl::destroy(v68, v53);
            else
              *(_DWORD *)v68 -= 2;
          }
          v69 = *(WTF::StringImpl **)v92;
          *(_QWORD *)v92 = 0;
          *(_QWORD *)v52 = v69;
          v70 = *v97;
          *(_BYTE *)(v52 + 16) = *((_BYTE *)v97 + 8);
          *(_QWORD *)(v52 + 8) = v70;
          *(_BYTE *)(v52 + 24) = 0;
          v8 = (WTF::StringImpl *)(v52 + 24);
          *(_DWORD *)(v52 + 48) = -1;
          v71 = *(unsigned int *)(v92 + 48);
          if ((_DWORD)v71 != -1)
          {
            ((void (*)(WTF::StringImpl **))off_1E33A7E78[v71])(&v104);
            *(_DWORD *)(v52 + 48) = v71;
          }
          v72 = v87 + (v98 << 6);
          v73 = *(_QWORD *)(v72 + 56);
          *(_QWORD *)(v72 + 56) = 0;
          *v63 = v73;
          v74 = *(WTF **)(v72 + 56);
          *(_QWORD *)(v72 + 56) = 0;
          if (v74)
          {
            WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v74 + 8, v8);
            v75 = *(WTF::StringImpl **)v74;
            *(_QWORD *)v74 = 0;
            if (v75)
              WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v74, v75);
            WTF::fastFree(v74, v75);
          }
          v76 = *(unsigned int *)(v92 + 48);
          if ((_DWORD)v76 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t))off_1E33A7D18[v76])(&v104, v91);
          *(_DWORD *)(v92 + 48) = -1;
          v77 = *(WTF::StringImpl **)v92;
          *(_QWORD *)v92 = 0;
          v11 = v99;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
              WTF::StringImpl::destroy(v77, v8);
            else
              *(_DWORD *)v77 -= 2;
          }
          if (v92 == a3)
            v11 = v19 + (v51 << 6);
          goto LABEL_86;
        }
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_120:
    v5 = 0;
  }
  v11 = 0;
  result = 0;
  if (v4)
  {
LABEL_116:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v11;
  }
  return result;
}

uint64_t WebCore::SecurityOrigin::canRequest(uint64_t a1, WebCore::ThreadableBlobRegistry *a2, uint64_t (***a3)(_QWORD, uint64_t))
{
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  int v9;
  _BOOL4 v11;
  _BOOL4 v12;
  uint64_t isAccessAllowed;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  char v28;
  char *v29;

  if (*(_BYTE *)(a1 + 56))
    return 1;
  if ((WTF::URL::protocolIs() & 1) != 0)
  {
    WebCore::ThreadableBlobRegistry::getCachedOrigin(a2, &v27);
    v6 = v27;
    if (v27 && WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)a1, v27))
    {
      isAccessAllowed = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v27 = 0;
  }
  if (*(_DWORD *)(a1 + 32) != 1)
  {
    WebCore::SecurityOrigin::create(a2, (uint64_t *)&v26);
    v7 = v26;
    v8 = *((unsigned int *)v26 + 8);
    if ((_DWORD)v8 == 1)
    {
      isAccessAllowed = 0;
    }
    else
    {
      if (v26 != (WTF *)a1)
      {
        v9 = *(_DWORD *)(a1 + 32);
        v11 = (_DWORD)v8 == v9 && (_DWORD)v8 != -1;
        if (v9 == -1 || !v11)
        {
          v12 = v8 == -1;
          if (v9 != -1)
            v12 = v11;
          if (!v12)
            goto LABEL_58;
        }
        else
        {
          v29 = &v28;
          if ((((uint64_t (*)(char **, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v8])(&v29, a1 + 8, (char *)v26 + 8) & 1) == 0)
          {
LABEL_58:
            isAccessAllowed = WebCore::SecurityPolicy::isAccessAllowed(a1, v7, (uint64_t)a2, a3);
            goto LABEL_22;
          }
        }
      }
      if (*(_BYTE *)(a1 + 63) && *(unsigned __int8 *)(a1 + 59) | *((unsigned __int8 *)v7 + 59))
        goto LABEL_58;
      isAccessAllowed = 1;
    }
LABEL_22:
    v26 = 0;
    do
    {
      v14 = __ldaxr((unsigned int *)v7);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v7));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v7);
      v23 = (WTF::StringImpl *)*((_QWORD *)v7 + 6);
      *((_QWORD *)v7 + 6) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v6);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v6);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = *((unsigned int *)v7 + 8);
      if ((_DWORD)v25 != -1)
        ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v25])(&v29, (char *)v7 + 8);
      *((_DWORD *)v7 + 8) = -1;
      WTF::fastFree(v7, v6);
    }
    goto LABEL_25;
  }
  isAccessAllowed = 0;
LABEL_25:
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v20 = (WTF::StringImpl *)*((_QWORD *)v16 + 6);
      *((_QWORD *)v16 + 6) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v6);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = (WTF::StringImpl *)*((_QWORD *)v16 + 5);
      *((_QWORD *)v16 + 5) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v6);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *((unsigned int *)v16 + 8);
      if ((_DWORD)v22 != -1)
        ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v22])(&v29, (char *)v16 + 8);
      *((_DWORD *)v16 + 8) = -1;
      WTF::fastFree(v16, v6);
    }
  }
  return isAccessAllowed;
}

uint64_t WebCore::SecurityPolicy::isAccessAllowed(uint64_t a1, const WebCore::SecurityOrigin *a2, uint64_t a3, uint64_t (***a4)(_QWORD, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_214))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_214))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_214);
LABEL_5:
  if ((byte_1ECE839A9 & 1) == 0)
  {
    qword_1ECE839B0 = 0;
    byte_1ECE839A9 = 1;
  }
  v9 = WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::OriginAccessEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(a1 + 8);
  if (v9 && (v10 = *(unsigned int *)(v9 + 12), (_DWORD)v10))
  {
    v11 = *(WTF ***)v9;
    v12 = 32 * v10 - 32;
    do
    {
      v13 = WebCore::OriginAccessEntry::matchesOrigin(v11, a2);
      if ((v13 & 1) != 0)
        break;
      v11 += 4;
      v14 = v12;
      v12 -= 32;
    }
    while (v14);
    v15 = v13 ^ 1;
  }
  else
  {
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)&_MergedGlobals_214);
  if (v16 != 1)
  {
    __clrex();
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_214);
    if (v15)
      return (**a4)(a4, a3);
    return 1;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_214))
    goto LABEL_19;
  if (v15)
    return (**a4)(a4, a3);
  return 1;
}

uint64_t WebCore::OriginAccessPatternsForWebProcess::anyPatternMatches(WebCore::OriginAccessPatternsForWebProcess *this, const WTF::URL *a2)
{
  WebCore::UserContentURLPattern *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_212))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_212))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_212);
LABEL_5:
  if ((byte_1ECE838B9 & 1) != 0)
  {
    if (dword_1ECE838D4)
    {
      v4 = (WebCore::UserContentURLPattern *)qword_1ECE838C8;
      v5 = 32 * dword_1ECE838D4;
      while (*((_BYTE *)v4 + 24)
           || !WebCore::UserContentURLPattern::matchesScheme(v4, a2)
           || !WebCore::UserContentURLPattern::matchesHost((const WTF::StringImpl **)v4, a2)
           || (WebCore::UserContentURLPattern::matchesPath(v4, a2) & 1) == 0)
      {
        v4 = (WebCore::UserContentURLPattern *)((char *)v4 + 32);
        v5 -= 32;
        if (!v5)
          goto LABEL_15;
      }
      v6 = 1;
    }
    else
    {
LABEL_15:
      v6 = 0;
    }
  }
  else
  {
    v6 = 0;
    *(_QWORD *)&dword_1ECE838D0 = 0;
    qword_1ECE838C8 = 0;
    byte_1ECE838B9 = 1;
  }
  v7 = __ldxr((unsigned __int8 *)&_MergedGlobals_212);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_212))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_212);
  return v6;
}

uint64_t WebCore::SecurityOriginData::toString@<X0>(WebCore::SecurityOriginData *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::SecurityOriginData *v4;
  unsigned __int128 *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  WTF::StringImpl *v33;
  unsigned __int128 *v34;
  unsigned __int128 *v35;
  unsigned __int128 *v36;
  unsigned __int128 v37;
  unsigned __int128 *v38;
  unsigned __int128 *v39;
  unsigned __int128 v40;
  char v41;
  char v42;
  _WORD *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  char v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned int *)this + 6);
  if ((_DWORD)v8 == -1)
    goto LABEL_105;
  v4 = this;
  v47[0] = &v46;
  v2 = *(_QWORD *)((uint64_t (*)(_QWORD *, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v8])(v47, this);
  if (v2)
    *(_DWORD *)v2 += 2;
  if (!MEMORY[0x19AEA53F4](v2, "file", 4))
  {
    v9 = *((unsigned int *)v4 + 6);
    if ((_DWORD)v9 != -1)
    {
      v47[0] = &v46;
      result = ((uint64_t (*)(_QWORD *, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v9])(v47, v4);
      v3 = *(_QWORD *)result;
      if (*(_QWORD *)result)
        *(_DWORD *)v3 += 2;
      if ((!v2 || !*(_DWORD *)(v2 + 4)) && (!v3 || !*(_DWORD *)(v3 + 4)))
      {
        *a2 = 0;
        goto LABEL_11;
      }
      v12 = *((unsigned int *)v4 + 6);
      if ((_DWORD)v12 != -1)
      {
        v47[0] = &v46;
        result = ((uint64_t (*)(_QWORD *, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v12])(v47, v4);
        if ((result & 0xFF0000) == 0)
        {
          if (v2)
            *(_DWORD *)v2 += 2;
          v45 = v2;
          if (v3)
            *(_DWORD *)v3 += 2;
          v44 = (WTF::StringImpl *)v3;
          WTF::makeString<WTF::String,WTF::ASCIILiteral,WTF::String>(&v45, (int8x16_t *)"://", 4, (uint64_t *)&v44, a2);
          v33 = v44;
          v44 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v11);
            else
              *(_DWORD *)v33 -= 2;
          }
          result = v45;
          v45 = 0;
          if (!result)
            goto LABEL_11;
          if (*(_DWORD *)result != 2)
          {
            *(_DWORD *)result -= 2;
LABEL_11:
            if (v3)
            {
              if (*(_DWORD *)v3 == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)v3, v11);
              else
                *(_DWORD *)v3 -= 2;
            }
            goto LABEL_14;
          }
LABEL_79:
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          goto LABEL_11;
        }
        if (v2)
          *(_DWORD *)v2 += 2;
        if (v3)
          *(_DWORD *)v3 += 2;
        if (v2)
          v13 = *(_DWORD *)(v2 + 4);
        else
          v13 = 0;
        LODWORD(v4) = (unsigned __int16)result;
        if (v3)
          v14 = *(_DWORD *)(v3 + 4);
        else
          v14 = 0;
        v15 = 0;
        v16 = (unsigned __int16)result;
        do
        {
          ++v15;
          v17 = v16 > 9;
          v16 /= 0xAu;
        }
        while (v17);
        if (v15 < 0)
          goto LABEL_120;
        v18 = __OFADD__(v15, 1);
        v19 = v15 + 1;
        v20 = v18;
        if (v14 < 0)
          goto LABEL_120;
        if (v20)
          goto LABEL_120;
        v18 = __OFADD__(v14, v19);
        v21 = v14 + v19;
        if (v18)
          goto LABEL_120;
        v18 = __OFADD__(v21, 3);
        v22 = v21 + 3;
        v23 = v18;
        if (v13 < 0)
          goto LABEL_120;
        if (v23)
          goto LABEL_120;
        v24 = (v13 + v22);
        if (__OFADD__(v13, v22))
          goto LABEL_120;
        if (v2 && (*(_BYTE *)(v2 + 16) & 4) == 0 || v3 && (*(_BYTE *)(v3 + 16) & 4) == 0)
        {
          if ((_DWORD)v24)
          {
            if (v24 > 0x7FFFFFEF)
              goto LABEL_120;
            result = WTF::tryFastCompactMalloc((WTF *)(2 * v24 + 20));
            v6 = v47[0];
            if (!v47[0])
              goto LABEL_120;
            v43 = (_WORD *)(v47[0] + 20);
            *(_DWORD *)v47[0] = 2;
            *(_DWORD *)(v6 + 4) = v24;
            *(_QWORD *)(v6 + 8) = v6 + 20;
            *(_DWORD *)(v6 + 16) = 0;
            result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>(v43, v2, (int8x16_t *)"://", 3u, v3, 58, v4);
LABEL_67:
            *a2 = v6;
            if (v3)
            {
              if (*(_DWORD *)v3 == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)v3, v11);
              else
                *(_DWORD *)v3 -= 2;
            }
            if (!v2)
              goto LABEL_11;
            if (*(_DWORD *)v2 != 2)
            {
              *(_DWORD *)v2 -= 2;
              goto LABEL_11;
            }
            result = v2;
            goto LABEL_79;
          }
        }
        else if ((_DWORD)v24)
        {
          if ((v24 & 0x80000000) == 0)
          {
            result = WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
            v6 = v47[0];
            if (v47[0])
            {
              v5 = (unsigned __int128 *)(v47[0] + 20);
              *(_DWORD *)v47[0] = 2;
              *(_DWORD *)(v6 + 4) = v24;
              *(_QWORD *)(v6 + 8) = v6 + 20;
              *(_DWORD *)(v6 + 16) = 4;
              if (!v2)
              {
                v26 = 0;
                goto LABEL_57;
              }
              v11 = *(WTF::StringImpl **)(v2 + 8);
              v25 = *(unsigned int *)(v2 + 4);
              if ((*(_BYTE *)(v2 + 16) & 4) != 0)
              {
                if ((_DWORD)v25)
                {
                  if ((_DWORD)v25 == 1)
                    *(_BYTE *)v5 = *(_BYTE *)v11;
                  else
                    result = (uint64_t)memcpy((void *)(v6 + 20), v11, v25);
                }
                goto LABEL_56;
              }
              v34 = (unsigned __int128 *)((char *)v5 + v25);
              if (v25 >= 0x10)
              {
                v35 = (unsigned __int128 *)((char *)v5 + (v25 & 0xFFFFFFF0));
                v36 = (unsigned __int128 *)(v6 + 20);
                do
                {
                  v37 = (unsigned __int128)vld2q_s8((const char *)v11);
                  v11 = (WTF::StringImpl *)((char *)v11 + 32);
                  *v36++ = v37;
                }
                while (v36 != v35);
                goto LABEL_108;
              }
LABEL_106:
              v35 = v5;
LABEL_108:
              while (v35 != v34)
              {
                v41 = *(_BYTE *)v11;
                v11 = (WTF::StringImpl *)((char *)v11 + 2);
                *(_BYTE *)v35 = v41;
                v35 = (unsigned __int128 *)((char *)v35 + 1);
              }
LABEL_56:
              v26 = *(unsigned int *)(v2 + 4);
LABEL_57:
              v27 = (char *)v5 + v26;
              v27[2] = 47;
              *(_WORD *)v27 = 12090;
              v28 = v27 + 3;
              if (v3)
              {
                v11 = *(WTF::StringImpl **)(v3 + 8);
                v29 = *(unsigned int *)(v3 + 4);
                if ((*(_BYTE *)(v3 + 16) & 4) != 0)
                {
                  if ((_DWORD)v29)
                  {
                    if ((_DWORD)v29 == 1)
                      *v28 = *(_BYTE *)v11;
                    else
                      result = (uint64_t)memcpy(v28, v11, v29);
                  }
                }
                else
                {
                  if (v29 < 0x10)
                  {
                    v38 = (unsigned __int128 *)(v27 + 3);
                  }
                  else
                  {
                    v38 = (unsigned __int128 *)&v28[v29 & 0xFFFFFFF0];
                    v39 = (unsigned __int128 *)(v27 + 3);
                    do
                    {
                      v40 = (unsigned __int128)vld2q_s8((const char *)v11);
                      v11 = (WTF::StringImpl *)((char *)v11 + 32);
                      *v39++ = v40;
                    }
                    while (v39 != v38);
                  }
                  while (v38 != (unsigned __int128 *)&v28[v29])
                  {
                    v42 = *(_BYTE *)v11;
                    v11 = (WTF::StringImpl *)((char *)v11 + 2);
                    *(_BYTE *)v38 = v42;
                    v38 = (unsigned __int128 *)((char *)v38 + 1);
                  }
                }
                v30 = *(unsigned int *)(v3 + 4);
              }
              else
              {
                v30 = 0;
              }
              v31 = 0;
              v32 = &v28[v30];
              *v32 = 58;
              do
              {
                *((_BYTE *)&v47[1] + v31-- + 4) = (v4 % 0xA) | 0x30;
                v17 = v4 > 9;
                LODWORD(v4) = v4 / 0xA;
              }
              while (v17);
              if (v31 + 14 <= 13)
                result = (uint64_t)memcpy(v32 + 1, (char *)&v47[1] + v31 + 5, -v31);
              goto LABEL_67;
            }
          }
LABEL_120:
          *a2 = 0;
          __break(0xC471u);
          return result;
        }
        v6 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_67;
      }
    }
LABEL_105:
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_106;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_14:
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v2, v11);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

uint64_t WebCore::SecurityOrigin::initializeShared(WebCore::SecurityOrigin *this, const WTF::URL *a2)
{
  WebCore::SecurityOrigin *v2;
  WTF::URL *v3;
  char *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  WebCore *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int *v14;
  char v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32[2];

  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_31;
  v3 = a2;
  v2 = this;
  v4 = (char *)this + 8;
  v32[0] = (WTF::StringImpl *)&v31;
  v7 = (WebCore *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v6])(v32, (char *)this + 8);
  v10 = *(_QWORD *)v7;
  if (!*(_QWORD *)v7
    || (v11 = *(WTF::StringImpl **)(v10 + 8),
        v12 = (WTF::StringImpl *)(*(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32)),
        v32[0] = v11,
        v32[1] = v12,
        !v11))
  {
    v15 = 0;
    goto LABEL_13;
  }
  v5 = WebCore::schemeRegistryLock;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
LABEL_6:
    v7 = (WebCore *)MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
    goto LABEL_7;
  }
  if (__stxr(1u, WebCore::schemeRegistryLock))
    goto LABEL_6;
LABEL_7:
  v14 = &dword_1ECE90000;
    goto LABEL_37;
  while (1)
  {
    v15 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::localURLSchemes(void)::localSchemes, (unsigned __int8 **)v32, v8, v9);
    v16 = __ldxr(v5);
    if (v16 != 1)
    {
      __clrex();
LABEL_12:
      WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
      goto LABEL_13;
    }
    if (__stlxr(0, v5))
      goto LABEL_12;
LABEL_13:
    *((_BYTE *)v2 + 63) = v15;
    v17 = *((unsigned int *)v2 + 8);
    if ((_DWORD)v17 == -1)
      goto LABEL_31;
    v32[0] = (WTF::StringImpl *)&v31;
    v19 = *(_DWORD **)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v17])(v32, v4);
    if (v19)
      *v19 += 2;
    v20 = (WTF::StringImpl *)*((_QWORD *)v2 + 5);
    *((_QWORD *)v2 + 5) = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((unsigned int *)v2 + 8);
    if ((_DWORD)v21 == -1)
      goto LABEL_31;
    v32[0] = (WTF::StringImpl *)&v31;
    v14 = (int *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix;
    result = ((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v21])(v32, v4);
    if ((result & 0xFF0000) == 0)
      goto LABEL_25;
    v23 = *((unsigned int *)v2 + 8);
    if ((_DWORD)v23 == -1)
      goto LABEL_31;
    v32[0] = (WTF::StringImpl *)&v31;
    if ((((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v23])(v32, v4) & 0xFF0000) != 0)break;
    v7 = (WebCore *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_37:
    v29 = WebCore::builtinLocalURLSchemes(v7);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&WebCore::localURLSchemes(void)::localSchemes, (WTF::ASCIICaseInsensitiveHash **)v29);
    *((_BYTE *)v14 + 3088) = 1;
  }
  v24 = *((unsigned int *)v2 + 8);
  if ((_DWORD)v24 == -1)
  {
LABEL_31:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_32;
  }
  v32[0] = (WTF::StringImpl *)&v31;
  ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v24])(v32, v4);
  result = WTF::isDefaultPortForProtocol();
  if ((_DWORD)result)
LABEL_32:
    result = WebCore::SecurityOriginData::setPort((uint64_t)v4);
LABEL_25:
  v25 = *((unsigned __int8 *)v2 + 63);
  *((_BYTE *)v2 + 58) = v25;
  if (v25)
  {
    WTF::URL::fileSystemPath(v3);
    v27 = v32[0];
    v32[0] = 0;
    result = *((_QWORD *)v2 + 6);
    *((_QWORD *)v2 + 6) = v27;
    if (result)
    {
      v28 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
        goto LABEL_35;
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      result = (uint64_t)v32[0];
      v32[0] = 0;
      if (result)
      {
        v28 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
        else
LABEL_35:
          *(_DWORD *)result = v28;
      }
    }
  }
  return result;
}

void WebCore::SecurityOrigin::create(WebCore::SecurityOrigin *this@<X0>, uint64_t *a2@<X8>)
{
  const WTF::URL *v5;
  _BOOL4 shouldTreatAsOpaqueOrigin;
  const WTF::URL *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WebCore::Process *IdentifierInternal;
  uint64_t v14;
  char v15;
  char **v16;
  char *v17;

  if (WTF::URL::protocolIs())
  {
    WebCore::SecurityOrigin::createForBlobURL(this, a2);
  }
  else
  {
    shouldTreatAsOpaqueOrigin = WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin(this, v5);
    v8 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v8 = 1;
    if (!shouldTreatAsOpaqueOrigin)
    {
      if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin(this, v7))
      {
        IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
        WebCore::Process::identifier(IdentifierInternal);
        *(_QWORD *)(v8 + 8) = IdentifierInternal;
        *(_QWORD *)(v8 + 16) = v14;
        *(_DWORD *)(v8 + 32) = 1;
      }
      else
      {
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(this, v8 + 8);
      }
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      WebCore::SecurityOrigin::initializeShared((WebCore::SecurityOrigin *)v8, this);
LABEL_6:
      *a2 = v8;
      return;
    }
    v9 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v10 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v10 != -1)
    {
      v17 = &v15;
      v16 = &v17;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    if ((WebCore::Process::globalIdentifier & 1) != 0)
    {
      v11 = WebCore::Process::globalIdentifier;
      *(_QWORD *)(v8 + 8) = v9;
      *(_QWORD *)(v8 + 16) = v11;
      *(_DWORD *)(v8 + 32) = 1;
      v12 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v12 += 2;
      *(_QWORD *)(v8 + 40) = v12;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 54) = 0;
      *(_WORD *)(v8 + 62) = 1;
      goto LABEL_6;
    }
    __break(1u);
  }
}

BOOL WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin(WebCore::SecurityOriginData *this, const WTF::URL *a2)
{
  __int128 *v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  WTF::StringImpl **NeverDestroyedSchemeSet;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  unsigned __int8 *v25;
  uint8x8_t *v26;
  unsigned int v28;
  char v29;
  int v30;
  _BOOL8 v31;
  WTF::StringImpl *v32;
  int8x16_t *v34;
  int8x16_t *v35;
  unsigned int v36;
  __int32 v37;
  int v38;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  int16x8_t *v48;
  unsigned int v49;
  unsigned int v50;
  int16x8_t *v51;
  uint8x8_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint16x8_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint8x16_t v73;
  unsigned int v74;
  uint8x16_t v75;
  uint64_t v76;
  int v77;
  __int32 v78;
  int v79;
  int v80;
  uint16x8_t v82;
  uint16x8_t v83;
  uint64_t v84;
  uint64_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  unsigned int v89;
  uint16x8_t v90;
  WTF::StringImpl *v91;
  __int128 v92;
  __int128 v93;

  v2 = (__int128 *)((char *)this + 8);
  if ((*((_BYTE *)this + 8) & 1) == 0)
    return 1;
  if (WTF::URL::protocolIs())
  {
    WebCore::BlobURL::getOriginURL((uint64_t *)&v91, this, (const WTF::URL *)v4);
  }
  else
  {
    v5 = *(WTF::StringImpl **)this;
    if (*(_QWORD *)this)
      *(_DWORD *)v5 += 2;
    v91 = v5;
    v6 = v2[1];
    v92 = *v2;
    v93 = v6;
  }
  if ((v92 & 1) == 0)
    goto LABEL_91;
  if ((v92 & 2) != 0 || WTF::URL::protocolIs())
  {
    WTF::URL::host((WTF::URL *)&v91);
    if (!(_DWORD)v4)
      goto LABEL_91;
  }
  v7 = WTF::URL::protocol((WTF::URL *)&v91);
  if (!v7)
  {
LABEL_46:
    if ((WTF::URL::hasSpecialScheme(this) & 1) != 0
      || !WTF::linkedOnOrAfterSDKWithBehavior()
      || (WTF::URL::protocolIs() & 1) != 0
      || (WTF::URL::protocolIs() & 1) != 0
      || (WTF::URL::protocolIs() & 1) != 0
      || (WTF::URL::protocolIs() & 1) != 0
      || (WTF::URL::protocolIs() & 1) != 0)
    {
      v31 = 0;
    }
    else
    {
      v84 = WTF::URL::protocol(this);
      v31 = !WebCore::LegacySchemeRegistry::schemeIsHandledBySchemeHandler(v84, v85);
    }
    goto LABEL_48;
  }
  v8 = (unsigned __int8 *)v7;
  v9 = v4;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
LABEL_12:
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
    goto LABEL_13;
  }
  if (__stxr(1u, WebCore::schemeRegistryLock))
    goto LABEL_12;
LABEL_13:
  {
    NeverDestroyedSchemeSet = (WTF::StringImpl **)WebCore::schemesWithUniqueOrigins(void)::schemesWithUniqueOrigins;
  }
  else
  {
    NeverDestroyedSchemeSet = WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinSchemesWithUniqueOrigins);
    WebCore::schemesWithUniqueOrigins(void)::schemesWithUniqueOrigins = (uint64_t)NeverDestroyedSchemeSet;
  }
  if (NeverDestroyedSchemeSet)
  {
    v12 = -1640531527;
    v13 = v9 & 0xFF00000000;
    if ((v9 & 0xFF00000000) != 0)
    {
      if ((v9 & 0xFFFFFFFE) != 0)
      {
        v14 = 0;
        do
        {
          v15 = ((v12 + v8[v14]) << 16) ^ (v8[v14 + 1] << 11) ^ (v12 + v8[v14]);
          v12 = v15 + (v15 >> 11);
          v16 = v14 + 3;
          v14 += 2;
        }
        while (v16 < v9);
      }
      if ((v9 & 1) == 0)
        goto LABEL_21;
      v40 = v8[v9 - 1];
    }
    else
    {
      if ((v9 & 0xFFFFFFFE) != 0)
      {
        v45 = 0;
        do
        {
          v46 = ((v12 + *(unsigned __int16 *)&v8[2 * v45]) << 16) ^ (*(unsigned __int16 *)&v8[2 * v45 + 2] << 11) ^ (v12 + *(unsigned __int16 *)&v8[2 * v45]);
          v12 = v46 + (v46 >> 11);
          v47 = v45 + 3;
          v45 += 2;
        }
        while (v47 < v9);
      }
      if ((v9 & 1) == 0)
        goto LABEL_21;
      v40 = *(unsigned __int16 *)&v8[2 * v9 - 2];
    }
    v12 = ((v12 + v40) ^ ((v12 + v40) << 11)) + (((v12 + v40) ^ ((v12 + v40) << 11)) >> 17);
LABEL_21:
    v17 = 0;
    v18 = *((_DWORD *)NeverDestroyedSchemeSet - 2);
    v19 = (v12 ^ (8 * v12)) + ((v12 ^ (8 * v12)) >> 5);
    v20 = (v19 ^ (4 * v19)) + ((v19 ^ (4 * v19)) >> 15);
    v21 = (v20 ^ (v20 << 10)) & 0xFFFFFF;
    if (v21)
      v22 = v21;
    else
      v22 = 0x800000;
    while (1)
    {
      v23 = v22 & v18;
      v24 = NeverDestroyedSchemeSet[v23];
      if (!v24)
        break;
      if (v24 == (WTF::StringImpl *)-1)
        goto LABEL_38;
      v25 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
      v26 = (uint8x8_t *)*((unsigned int *)v24 + 1);
      if (v25 == v8 || (_DWORD)v26 != (_DWORD)v9)
      {
        if (v25 == v8 && (_DWORD)v26 == (_DWORD)v9)
          goto LABEL_145;
        goto LABEL_38;
      }
      if (!(_DWORD)v26)
        goto LABEL_145;
      v28 = *((_DWORD *)v24 + 4);
      if ((v28 & 4) != 0)
      {
        if (v13)
        {
          if ((_DWORD)v9)
          {
            if (*v25 != *v8)
              goto LABEL_38;
            v4 = v9 - 1;
            if ((_DWORD)v9 == 1)
              goto LABEL_145;
            v34 = (int8x16_t *)(v25 + 1);
            if ((_DWORD)v9 == 2)
            {
              v37 = v34->u8[0];
              v38 = v8[1];
            }
            else
            {
              v35 = (int8x16_t *)(v8 + 1);
              v36 = 32 - __clz(v9 - 2);
              if (v36 != 1)
              {
                switch(v36)
                {
                  case 2u:
                    if (v34->u16[0] != v35->u16[0])
                      goto LABEL_38;
                    v37 = *(unsigned __int16 *)&v25[v9 - 2];
                    v38 = *(unsigned __int16 *)&v8[v9 - 2];
                    goto LABEL_57;
                  case 3u:
                    if (v34->i32[0] != v35->i32[0])
                      goto LABEL_38;
                    v43 = &v8[v9];
                    v44 = &v25[v9];
                    goto LABEL_78;
                  case 4u:
                    if (v34->i64[0] != v35->i64[0])
                      goto LABEL_38;
                    v41 = &v8[v9];
                    v42 = &v25[v9];
                    goto LABEL_74;
                  case 5u:
                    v60 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v25[v9 - 16], *(int8x16_t *)&v8[v9 - 16]), vceqq_s8(*(int8x16_t *)(v25 + 1), *(int8x16_t *)(v8 + 1)));
                    v60.i8[0] = vminvq_u8((uint8x16_t)v60);
                    goto LABEL_105;
                  default:
                    v73 = (uint8x16_t)vceqq_s8(*v34, *v35);
                    v73.i8[0] = vminvq_u8(v73);
                    if (!v73.i32[0])
                      goto LABEL_38;
                    if (v4 < 0x10)
                      goto LABEL_145;
                    v74 = v4 & 0xF;
                    break;
                }
                while (1)
                {
                  v75 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v34 + v74), *(int8x16_t *)((char *)v35 + v74));
                  v75.i8[0] = vminvq_u8(v75);
                  if (!v75.i32[0])
                    goto LABEL_38;
                  v74 += 16;
                  v29 = 1;
                  if (v74 >= v4)
                    goto LABEL_40;
                }
              }
              v37 = v34->u16[0];
              v38 = v35->u16[0];
            }
            goto LABEL_57;
          }
        }
        else if ((_DWORD)v9)
        {
          if (*(_WORD *)v8 == *v25)
          {
            v50 = v9 - 1;
            v51 = (int16x8_t *)(v8 + 2);
            v52 = (uint8x8_t *)(v25 + 1);
            if ((v9 - 1) >= 8)
            {
              v86 = (uint16x8_t)vceqq_s16(*v51, (int16x8_t)vmovl_u8(*v52));
              v86.i16[0] = vminvq_u16(v86);
              v4 = v86.u32[0];
              if (v86.i32[0])
              {
                v4 = v50 & 7;
                while (1)
                {
                  v87 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v51 + 2 * v4), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v52 + v4)));
                  v87.i16[0] = vminvq_u16(v87);
                  if (!v87.i32[0])
                    break;
                  v4 = (v4 + 8);
                  v29 = 1;
                  if (v4 >= v50)
                    goto LABEL_40;
                }
              }
            }
            else if (v50 < 4)
            {
              if (v50 < 2)
              {
                if ((_DWORD)v9 != 2 || v51->i16[0] == v52->u8[0])
                  goto LABEL_145;
              }
              else
              {
                v76 = v50 & 1;
                v4 = 2 * v76;
                v77 = (v52->u16[0] | (v52->u16[0] << 8)) & 0xFF00FF;
                v78 = v51->i32[0];
                v79 = (*(unsigned __int16 *)((char *)v52->u16 + v76) | (*(unsigned __int16 *)((char *)v52->u16 + v76) << 8)) & 0xFF00FF;
                v80 = *(__int32 *)((char *)v51->i32 + 2 * v76);
                if (v77 == v78 && v79 == v80)
                  goto LABEL_145;
              }
            }
            else
            {
              v53 = v50 & 3;
              v4 = 2 * v53;
              v54 = (v52->u32[0] | ((unint64_t)v52->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v55 = v51->i64[0];
              v56 = (*(unsigned int *)((char *)v52->u32 + v53) | ((unint64_t)*(unsigned int *)((char *)v52->u32 + v53) << 16)) & 0xFFFF0000FFFFLL;
              v57 = (v56 | (v56 << 8)) & 0xFF00FF00FF00FFLL;
              v58 = *(uint64_t *)((char *)v51->i64 + 2 * v53);
              if (((v54 | (v54 << 8)) & 0xFF00FF00FF00FFLL) == v55 && v57 == v58)
                goto LABEL_145;
            }
          }
          goto LABEL_38;
        }
      }
      else
      {
        v28 = v9 - 1;
        if (v13)
        {
          if ((_DWORD)v9)
          {
            v4 = *v8;
            if (*(unsigned __int16 *)v25 != (_DWORD)v4)
              goto LABEL_38;
            v26 = (uint8x8_t *)(v8 + 1);
            v25 += 2;
            if (v28 >= 8)
            {
              v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v25, (int16x8_t)vmovl_u8(*v26));
              v82.i16[0] = vminvq_u16(v82);
              v4 = v82.u32[0];
              if (v82.i32[0])
              {
                v4 = v28 & 7;
                while (1)
                {
                  v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&v25[2 * v4], (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v26 + v4)));
                  v83.i16[0] = vminvq_u16(v83);
                  if (!v83.i32[0])
                    break;
                  v4 = (v4 + 8);
                  v29 = 1;
                  if (v4 >= v28)
                    goto LABEL_40;
                }
              }
              goto LABEL_38;
            }
            if (v28 >= 4)
            {
              v61 = v28 & 3;
              v62 = (v26->u32[0] | ((unint64_t)v26->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v4 = (v62 | (v62 << 8)) & 0xFF00FF00FF00FFLL;
              v63 = *(_QWORD *)v25;
              v64 = (*(unsigned int *)((char *)v26->u32 + v61) | ((unint64_t)*(unsigned int *)((char *)v26->u32 + v61) << 16)) & 0xFFFF0000FFFFLL;
              v65 = (v64 | (v64 << 8)) & 0xFF00FF00FF00FFLL;
              v66 = *(_QWORD *)&v25[2 * v61];
              if (v4 == v63 && v65 == v66)
              {
LABEL_145:
                v29 = 1;
                goto LABEL_40;
              }
              goto LABEL_38;
            }
            goto LABEL_124;
          }
        }
        else if ((_DWORD)v9)
        {
          v4 = *(unsigned __int16 *)v8;
          if (*(unsigned __int16 *)v25 != (_DWORD)v4)
            goto LABEL_38;
          if ((_DWORD)v9 == 1)
            goto LABEL_145;
          v48 = (int16x8_t *)(v25 + 2);
          v4 = (v9 - 2);
          if ((_DWORD)v9 != 2)
          {
            v49 = __clz(v4);
            v4 = (uint64_t)(v8 + 2);
            switch(31 - v49)
            {
              case 0u:
                v37 = v48->i32[0];
                v38 = *(_DWORD *)v4;
                goto LABEL_57;
              case 1u:
                if (v48->i32[0] != *(_DWORD *)v4)
                  goto LABEL_38;
                v43 = &v8[2 * v9];
                v44 = &v25[2 * v9];
LABEL_78:
                v37 = *((_DWORD *)v44 - 1);
                v38 = *((_DWORD *)v43 - 1);
                goto LABEL_57;
              case 2u:
                if (v48->i64[0] == *(_QWORD *)v4)
                {
                  v41 = &v8[2 * v9];
                  v42 = &v25[2 * v9];
LABEL_74:
                  if (*((_QWORD *)v42 - 1) == *((_QWORD *)v41 - 1))
                    goto LABEL_145;
                }
                goto LABEL_38;
              case 3u:
                v60 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v25[2 * v9 - 16], *(int16x8_t *)&v8[2 * v9 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v25 + 2), *(int16x8_t *)(v8 + 2)));
                v60.i16[0] = vminvq_u16(v60);
LABEL_105:
                if (v60.i32[0])
                  goto LABEL_145;
                goto LABEL_38;
              default:
                v88 = (uint16x8_t)vceqq_s16(*v48, *(int16x8_t *)v4);
                v88.i16[0] = vminvq_u16(v88);
                if (!v88.i32[0])
                  goto LABEL_38;
                if (v28 < 8)
                  goto LABEL_145;
                v89 = v28 & 7;
                break;
            }
            while (1)
            {
              v90 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v48 + 2 * v89), *(int16x8_t *)(v4 + 2 * v89));
              v90.i16[0] = vminvq_u16(v90);
              if (!v90.i32[0])
                goto LABEL_38;
              v89 += 8;
              v29 = 1;
              if (v89 >= v28)
                goto LABEL_40;
            }
          }
          v37 = v48->u16[0];
          v38 = *((unsigned __int16 *)v8 + 1);
          goto LABEL_57;
        }
      }
      __break(1u);
LABEL_124:
      if (v28 < 2)
      {
        if (v28 != 1)
          goto LABEL_145;
        v38 = v26->u8[0];
        v37 = *(unsigned __int16 *)v25;
LABEL_57:
        if (v37 == v38)
          goto LABEL_145;
        goto LABEL_38;
      }
      v68 = v28 & 1;
      v4 = (v26->u16[0] | (v26->u16[0] << 8)) & 0xFF00FF;
      v69 = *(_DWORD *)v25;
      v70 = (*(unsigned __int16 *)((char *)v26->u16 + v68) | (*(unsigned __int16 *)((char *)v26->u16 + v68) << 8)) & 0xFF00FF;
      v71 = *(_DWORD *)&v25[2 * v68];
      if ((_DWORD)v4 == v69 && v70 == v71)
        goto LABEL_145;
LABEL_38:
      v22 = ++v17 + v23;
    }
  }
  v29 = 0;
LABEL_40:
  v30 = __ldxr(WebCore::schemeRegistryLock);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, WebCore::schemeRegistryLock))
LABEL_44:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  if ((v29 & 1) == 0)
    goto LABEL_46;
LABEL_91:
  v31 = 1;
LABEL_48:
  v32 = v91;
  v91 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v32 -= 2;
  }
  return v31;
}

uint64_t WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(uint64_t *a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int16x8_t *v21;
  unsigned int v23;
  uint64_t result;
  int8x16_t *v25;
  int8x16_t *v26;
  unsigned int v27;
  __int32 v28;
  int v29;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  int16x8_t *v39;
  unsigned int v40;
  int16x8_t *v41;
  uint8x8_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint16x8_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  int v58;
  uint8x16_t v60;
  unsigned int v61;
  uint8x16_t v62;
  uint64_t v63;
  __int32 v64;
  int v65;
  int v66;
  uint16x8_t v68;
  unsigned int v69;
  uint16x8_t v70;
  int v71;
  int v72;
  uint16x8_t v73;
  unsigned int v74;
  uint16x8_t v75;
  uint16x8_t v76;
  unsigned int v77;
  uint16x8_t v78;

  v4 = *a1;
  if (*a1)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = -1640531527;
    v8 = (unint64_t)v6 & 0xFF00000000;
    if (((unint64_t)v6 & 0xFF00000000) != 0)
    {
      if ((v6 & 0xFFFFFFFE) != 0)
      {
        v9 = 0;
        do
        {
          v10 = ((v7 + v5[v9]) << 16) ^ (v5[v9 + 1] << 11) ^ (v7 + v5[v9]);
          v7 = v10 + (v10 >> 11);
          v11 = v9 + 3;
          v9 += 2;
        }
        while (v11 < v6);
      }
      if ((v6 & 1) == 0)
        goto LABEL_7;
      v31 = v5[v6 - 1];
    }
    else
    {
      if ((v6 & 0xFFFFFFFE) != 0)
      {
        v36 = 0;
        do
        {
          v37 = ((v7 + *(unsigned __int16 *)&v5[2 * v36]) << 16) ^ (*(unsigned __int16 *)&v5[2 * v36 + 2] << 11) ^ (v7 + *(unsigned __int16 *)&v5[2 * v36]);
          v7 = v37 + (v37 >> 11);
          v38 = v36 + 3;
          v36 += 2;
        }
        while (v38 < v6);
      }
      if ((v6 & 1) == 0)
        goto LABEL_7;
      v31 = *(unsigned __int16 *)&v5[2 * v6 - 2];
    }
    v7 = ((v7 + v31) ^ ((v7 + v31) << 11)) + (((v7 + v31) ^ ((v7 + v31) << 11)) >> 17);
LABEL_7:
    v12 = 0;
    v13 = *(_DWORD *)(v4 - 8);
    v14 = (v7 ^ (8 * v7)) + ((v7 ^ (8 * v7)) >> 5);
    v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
    v16 = (v15 ^ (v15 << 10)) & 0xFFFFFF;
    if (v16)
      v17 = v16;
    else
      v17 = 0x800000;
    while (1)
    {
      v18 = v17 & v13;
      v19 = *(_QWORD *)(v4 + 8 * v18);
      if (!v19)
        return 0;
      if (v19 == -1)
        goto LABEL_24;
      v20 = *(unsigned __int8 **)(v19 + 8);
      v21 = (int16x8_t *)*(unsigned int *)(v19 + 4);
      if (v20 == v5 || (_DWORD)v21 != (_DWORD)v6)
      {
        if (v20 == v5 && (_DWORD)v21 == (_DWORD)v6)
          return 1;
        goto LABEL_24;
      }
      if (!(_DWORD)v21)
        return 1;
      v23 = *(_DWORD *)(v19 + 16);
      if ((v23 & 4) == 0)
        break;
      if (v8)
      {
        if ((_DWORD)v6)
        {
          if (*v20 != *v5)
            goto LABEL_24;
          a4 = v6 - 1;
          if ((_DWORD)v6 == 1)
            return 1;
          v25 = (int8x16_t *)(v20 + 1);
          if ((_DWORD)v6 == 2)
          {
            v28 = v25->u8[0];
            v29 = v5[1];
          }
          else
          {
            v26 = (int8x16_t *)(v5 + 1);
            v27 = 32 - __clz((_DWORD)v6 - 2);
            if (v27 != 1)
            {
              switch(v27)
              {
                case 2u:
                  if (v25->u16[0] != v26->u16[0])
                    goto LABEL_24;
                  v28 = *(unsigned __int16 *)&v20[v6 - 2];
                  v29 = *(unsigned __int16 *)&v5[v6 - 2];
                  goto LABEL_30;
                case 3u:
                  if (v25->i32[0] != v26->i32[0])
                    goto LABEL_24;
                  v34 = &v5[v6];
                  v35 = &v20[v6];
                  goto LABEL_50;
                case 4u:
                  if (v25->i64[0] != v26->i64[0])
                    goto LABEL_24;
                  v32 = &v5[v6];
                  v33 = &v20[v6];
                  goto LABEL_46;
                case 5u:
                  v50 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v20[v6 - 16], *(int8x16_t *)&v5[v6 - 16]), vceqq_s8(*(int8x16_t *)(v20 + 1), *(int8x16_t *)(v5 + 1)));
                  v50.i8[0] = vminvq_u8((uint8x16_t)v50);
                  goto LABEL_74;
                default:
                  v60 = (uint8x16_t)vceqq_s8(*v25, *v26);
                  v60.i8[0] = vminvq_u8(v60);
                  if (!v60.i32[0])
                    goto LABEL_24;
                  if (a4 < 0x10)
                    return 1;
                  v61 = a4 & 0xF;
                  break;
              }
              while (1)
              {
                v62 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v25 + v61), *(int8x16_t *)((char *)v26 + v61));
                v62.i8[0] = vminvq_u8(v62);
                if (!v62.i32[0])
                  break;
                v61 += 16;
                result = 1;
                if (v61 >= a4)
                  return result;
              }
              goto LABEL_24;
            }
            v28 = v25->u16[0];
            v29 = v26->u16[0];
          }
LABEL_30:
          if (v28 == v29)
            return 1;
          goto LABEL_24;
        }
        goto LABEL_91;
      }
      if (!(_DWORD)v6)
        goto LABEL_91;
      if (*(_WORD *)v5 != *v20)
        goto LABEL_24;
      a4 = v6 - 1;
      v41 = (int16x8_t *)(v5 + 2);
      v42 = (uint8x8_t *)(v20 + 1);
      if (((_DWORD)v6 - 1) >= 8)
      {
        v73 = (uint16x8_t)vceqq_s16(*v41, (int16x8_t)vmovl_u8(*v42));
        v73.i16[0] = vminvq_u16(v73);
        if (v73.i32[0])
        {
          v74 = a4 & 7;
          while (1)
          {
            v75 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v41 + 2 * v74), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v42 + v74)));
            v75.i16[0] = vminvq_u16(v75);
            if (!v75.i32[0])
              break;
            v74 += 8;
            result = 1;
            if (v74 >= a4)
              return result;
          }
        }
        goto LABEL_24;
      }
      if (a4 < 4)
      {
        if (a4 < 2)
        {
          if ((_DWORD)v6 != 2)
            return 1;
          v71 = v42->u8[0];
          v72 = v41->u16[0];
LABEL_134:
          if (v72 == v71)
            return 1;
          goto LABEL_24;
        }
        v63 = a4 & 1;
        a4 = 2 * v63;
        v64 = v41->i32[0];
        v65 = (*(unsigned __int16 *)((char *)v42->u16 + v63) | (*(unsigned __int16 *)((char *)v42->u16 + v63) << 8)) & 0xFF00FF;
        v66 = *(__int32 *)((char *)v41->i32 + a4);
        if (((v42->u16[0] | (v42->u16[0] << 8)) & 0xFF00FF) == v64 && v65 == v66)
          return 1;
      }
      else
      {
        v43 = a4 & 3;
        a4 = 2 * v43;
        v44 = (v42->u32[0] | ((unint64_t)v42->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v45 = v41->i64[0];
        v46 = (*(unsigned int *)((char *)v42->u32 + v43) | ((unint64_t)*(unsigned int *)((char *)v42->u32 + v43) << 16)) & 0xFFFF0000FFFFLL;
        v47 = (v46 | (v46 << 8)) & 0xFF00FF00FF00FFLL;
        v48 = *(uint64_t *)((char *)v41->i64 + a4);
        if (((v44 | (v44 << 8)) & 0xFF00FF00FF00FFLL) == v45 && v47 == v48)
          return 1;
      }
LABEL_24:
      v17 = ++v12 + v18;
    }
    v23 = (_DWORD)v6 - 1;
    if (v8)
    {
      if (!(_DWORD)v6)
        goto LABEL_91;
      a4 = *v5;
      if (*(unsigned __int16 *)v20 != (_DWORD)a4)
        goto LABEL_24;
      a4 = (uint64_t)(v5 + 1);
      v21 = (int16x8_t *)(v20 + 2);
      if (v23 >= 8)
      {
        v68 = (uint16x8_t)vceqq_s16(*v21, (int16x8_t)vmovl_u8(*(uint8x8_t *)a4));
        v68.i16[0] = vminvq_u16(v68);
        if (v68.i32[0])
        {
          v69 = v23 & 7;
          while (1)
          {
            v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v21 + 2 * v69), (int16x8_t)vmovl_u8(*(uint8x8_t *)(a4 + v69)));
            v70.i16[0] = vminvq_u16(v70);
            if (!v70.i32[0])
              break;
            v69 += 8;
            result = 1;
            if (v69 >= v23)
              return result;
          }
        }
        goto LABEL_24;
      }
      if (v23 >= 4)
      {
        v51 = v23 & 3;
        v52 = (*(unsigned int *)a4 | ((unint64_t)*(unsigned int *)a4 << 16)) & 0xFFFF0000FFFFLL;
        v53 = (*(unsigned int *)(a4 + v51) | ((unint64_t)*(unsigned int *)(a4 + v51) << 16)) & 0xFFFF0000FFFFLL;
        a4 = (v53 | (v53 << 8)) & 0xFF00FF00FF00FFLL;
        v54 = *(uint64_t *)((char *)v21->i64 + 2 * v51);
        if (((v52 | (v52 << 8)) & 0xFF00FF00FF00FFLL) == v21->i64[0] && a4 == v54)
          return 1;
        goto LABEL_24;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        a4 = *(unsigned __int16 *)v5;
        if (*(unsigned __int16 *)v20 != (_DWORD)a4)
          goto LABEL_24;
        if ((_DWORD)v6 == 1)
          return 1;
        v39 = (int16x8_t *)(v20 + 2);
        a4 = ((_DWORD)v6 - 2);
        if ((_DWORD)v6 != 2)
        {
          v40 = __clz(a4);
          a4 = (uint64_t)(v5 + 2);
          switch(31 - v40)
          {
            case 0u:
              v28 = v39->i32[0];
              v29 = *(_DWORD *)a4;
              goto LABEL_30;
            case 1u:
              if (v39->i32[0] != *(_DWORD *)a4)
                goto LABEL_24;
              v34 = &v5[2 * v6];
              v35 = &v20[2 * v6];
LABEL_50:
              v28 = *((_DWORD *)v35 - 1);
              v29 = *((_DWORD *)v34 - 1);
              goto LABEL_30;
            case 2u:
              if (v39->i64[0] == *(_QWORD *)a4)
              {
                v32 = &v5[2 * v6];
                v33 = &v20[2 * v6];
LABEL_46:
                if (*((_QWORD *)v33 - 1) == *((_QWORD *)v32 - 1))
                  return 1;
              }
              goto LABEL_24;
            case 3u:
              v50 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v20[2 * v6 - 16], *(int16x8_t *)&v5[2 * v6 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v20 + 2), *(int16x8_t *)(v5 + 2)));
              v50.i16[0] = vminvq_u16(v50);
LABEL_74:
              if (v50.i32[0])
                return 1;
              goto LABEL_24;
            default:
              v76 = (uint16x8_t)vceqq_s16(*v39, *(int16x8_t *)a4);
              v76.i16[0] = vminvq_u16(v76);
              if (!v76.i32[0])
                goto LABEL_24;
              if (v23 < 8)
                return 1;
              v77 = v23 & 7;
              break;
          }
          while (1)
          {
            v78 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v39 + 2 * v77), *(int16x8_t *)(a4 + 2 * v77));
            v78.i16[0] = vminvq_u16(v78);
            if (!v78.i32[0])
              break;
            v77 += 8;
            result = 1;
            if (v77 >= v23)
              return result;
          }
          goto LABEL_24;
        }
        v28 = v39->u16[0];
        v29 = *((unsigned __int16 *)v5 + 1);
        goto LABEL_30;
      }
LABEL_91:
      __break(1u);
    }
    if (v23 < 2)
    {
      if (v23 != 1)
        return 1;
      v71 = *(unsigned __int8 *)a4;
      v72 = v21->u16[0];
      goto LABEL_134;
    }
    v56 = v23 & 1;
    v57 = (*(unsigned __int16 *)a4 | (*(unsigned __int16 *)a4 << 8)) & 0xFF00FF;
    a4 = (*(unsigned __int16 *)(a4 + v56) | (*(unsigned __int16 *)(a4 + v56) << 8)) & 0xFF00FF;
    v58 = *(__int32 *)((char *)v21->i32 + 2 * v56);
    if (v57 == v21->i32[0] && (_DWORD)a4 == v58)
      return 1;
    goto LABEL_24;
  }
  return 0;
}

void WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(WebCore::SecurityOriginData *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WebCore::Process *IdentifierInternal;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD v17[2];
  WTF::StringImpl *v18;
  _QWORD v19[2];
  WTF::StringImpl *v20;

  if (*(_QWORD *)this)
  {
    WTF::URL::protocol(this);
    if (v5 || (WTF::URL::host(this), v12) || (WTF::URL::port(this) & 0xFF0000) != 0)
    {
      if (WTF::URL::protocol(this))
      {
        v19[0] = WTF::URL::protocol(this);
        v19[1] = v6;
        WTF::StringView::convertToASCIILowercase((WTF::StringView *)v19);
      }
      else
      {
        v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v15 += 2;
        v20 = v15;
      }
      if (WTF::URL::host(this))
      {
        v17[0] = WTF::URL::host(this);
        v17[1] = v7;
        WTF::StringView::convertToASCIILowercase((WTF::StringView *)v17);
      }
      else
      {
        v16 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v16 += 2;
        v18 = v16;
      }
      v9 = WTF::URL::port(this);
      v10 = v20;
      if (v20)
        *(_DWORD *)v20 += 2;
      v11 = v18;
      if (v18)
        *(_DWORD *)v18 += 2;
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 16) = v9 & 0xFFFFFF;
      *(_DWORD *)(a2 + 24) = 0;
      if (v10 == (WTF::StringImpl *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x1940F8CC8);
      }
      v18 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v8);
          v10 = v20;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      v20 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
      WebCore::Process::identifier(IdentifierInternal);
      *(_QWORD *)a2 = IdentifierInternal;
      *(_QWORD *)(a2 + 8) = v14;
      *(_DWORD *)(a2 + 24) = 1;
    }
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

void WebCore::SecurityOrigin::create(uint64_t a1@<X0>, uint64_t *a2@<X1>, WTF::StringImpl **a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t *a9@<X8>, __int16 a10, int a11, char a12)
{
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t IdentifierInternal;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v33;
  char **v34;
  char *v35;

  v19 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v19 = 1;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v22 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v22 != -1)
  {
    v35 = &v33;
    v34 = &v35;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v34, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    v23 = WebCore::Process::globalIdentifier;
    *(_QWORD *)(v19 + 8) = IdentifierInternal;
    *(_QWORD *)(v19 + 16) = v23;
    *(_DWORD *)(v19 + 32) = 1;
    v24 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v24 += 2;
    *(_QWORD *)(v19 + 48) = 0;
    v25 = (WTF::StringImpl **)(v19 + 48);
    *(_QWORD *)(v19 + 40) = v24;
    *(_QWORD *)(v19 + 54) = 0;
    *(_WORD *)(v19 + 62) = 1;
    *a9 = v19;
    v26 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v26 == -1)
    {
      *(_DWORD *)(v19 + 32) = -1;
    }
    else
    {
      v35 = (char *)(v19 + 8);
      ((void (*)(char **, uint64_t, uint64_t))off_1E3402AA8[v26])(&v35, v19 + 8, a1);
    }
    v27 = *a2;
    *a2 = 0;
    v28 = *(WTF::StringImpl **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v27;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v20);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = *a3;
    *a3 = 0;
    v30 = *v25;
    *v25 = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v20);
      else
        *(_DWORD *)v30 -= 2;
    }
    *(_BYTE *)(v19 + 56) = a4;
    *(_BYTE *)(v19 + 57) = a5;
    *(_BYTE *)(v19 + 58) = a6;
    *(_BYTE *)(v19 + 59) = a7;
    *(_BYTE *)(v19 + 60) = a8;
    *(_WORD *)(v19 + 61) = a10;
    *(_BYTE *)(v19 + 63) = a12;
  }
  else
  {
    __break(1u);
  }
}

void WebCore::PlatformCALayer::PlatformCALayer(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t IdentifierInternal;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char **v9;
  char *v10;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &unk_1E334E260;
  *(_BYTE *)(a1 + 12) = a2;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v6 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v6 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    v7 = WebCore::Process::globalIdentifier;
    *(_QWORD *)(a1 + 16) = IdentifierInternal;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = a3;
  }
  else
  {
    __break(1u);
  }
}

void WebCore::Process::identifier(WebCore::Process *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    __break(1u);
}

uint64_t *WebCore::builtinLocalURLSchemes(WebCore *this)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  _QWORD v8[3];
  WTF::StringImpl *v9;
  WTF::StringImpl *v10[2];

  v10[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_217 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10[0] = (WTF::StringImpl *)v8[0];
    v7 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v9, (uint64_t *)&v7, (uint64_t)v8);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)v10, (uint64_t *)&v7, (uint64_t)v8);
    v2 = v7;
    v7 = 0;
    qword_1ECE83B18 = (uint64_t)v2;
    WTF::HashSet<WebCore::PublicSuffix,WTF::DefaultHash<WebCore::PublicSuffix>,WTF::HashTraits<WebCore::PublicSuffix>,WTF::HashTableTraits>::~HashSet(&v7, v3);
    v5 = v10[0];
    v10[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v9;
    v9 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    _MergedGlobals_217 = 1;
  }
  return &qword_1ECE83B18;
}

uint64_t *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  WTF::ASCIICaseInsensitiveHash *v3;
  int v5;
  unsigned int v7;
  uint64_t v8;
  WTF::ASCIICaseInsensitiveHash *v9;
  WTF::ASCIICaseInsensitiveHash *v10;
  const WTF::String *v11;
  WTF::ASCIICaseInsensitiveHash *v12;
  WTF::ASCIICaseInsensitiveHash *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
      *a1 = v8 + 16;
      *(_DWORD *)(v8 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = *a2;
      v10 = (WTF::ASCIICaseInsensitiveHash *)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(*a2);
      v12 = v10;
      v13 = v11;
      if (v9)
        v9 = (WTF::ASCIICaseInsensitiveHash *)((char *)v9 + 8 * *((unsigned int *)v9 - 1));
      if (v9 != v10)
      {
        do
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::ASCIICaseInsensitiveHash::hash(v12, v11);
          v17 = 0;
          do
          {
            v18 = v16 & v15;
            v16 = ++v17 + v18;
          }
          while (*(_QWORD *)(v14 + 8 * v18));
          v19 = *(WTF::StringImpl **)v12;
          v12 = (WTF::ASCIICaseInsensitiveHash *)((char *)v12 + 8);
          WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>::translate<WTF::String,WTF::String,WTF::String const&>((WTF::StringImpl **)(v14 + 8 * v18), v19);
          while (v12 != v13)
          {
            if ((unint64_t)(*(_QWORD *)v12 + 1) > 1)
              goto LABEL_16;
            v12 = (WTF::ASCIICaseInsensitiveHash *)((char *)v12 + 8);
          }
          v12 = v13;
LABEL_16:
          ;
        }
        while (v12 != v9);
      }
    }
  }
  return a1;
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>::translate<WTF::String,WTF::String,WTF::String const&>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = *a1;
  *a1 = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_11;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_11:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = a1;
  v3 = WTF::fastMalloc((WTF *)(((unint64_t)a1 << 6) | 0x10));
  result = v3 + 16;
  if (a1)
  {
    v5 = (_QWORD *)(v3 + 72);
    do
    {
      *(v5 - 7) = 0;
      *(v5 - 6) = 0;
      *((_BYTE *)v5 - 40) = 0;
      *((_DWORD *)v5 - 2) = 0;
      *(v5 - 4) = 0;
      *(v5 - 3) = 0;
      *((_DWORD *)v5 - 4) = 0;
      *v5 = 0;
      v5 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

const WebCore::MQ::MediaQueryEvaluator **WebCore::Style::ScopeRuleSets::evaluateDynamicMediaQueryRules(WebCore::Style::ScopeRuleSets *this, WebCore::Style::RuleSet **a2, const WebCore::MQ::MediaQueryEvaluator *a3)
{
  WebCore::Style::RuleSet **v4;
  WebCore::Style::RuleSet *Style;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WebCore::MQ::MediaQueryEvaluator *v11[2];

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 32) = 0;
  v11[0] = a3;
  v11[1] = this;
  WebCore::Style::ScopeRuleSets::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&)::$_0::operator()<WebCore::Style::RuleSet>(v11, *a2);
  v4 = a2;
  if (*((_BYTE *)a2 + 316))
  {
    v4 = a2;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4[4] + 2) + 8) + 1328);
      if (!*(_QWORD *)(v7 + 32))
      {
        if (*(_QWORD *)(v7 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v7);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v7);
        v9 = *(_QWORD *)(v7 + 32);
        if (*(_DWORD *)(v9 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        {
          v10 = *(_QWORD *)(v7 + 32);
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v9 + 32));
          v9 = v10;
        }
        if (*(_BYTE *)(v9 + 242)
          || *(_BYTE *)(v9 + 243)
          || *(_BYTE *)(v9 + 244)
          || *(_BYTE *)(v9 + 245)
          || *(_BYTE *)(v9 + 246)
          || *(_BYTE *)(v9 + 247)
          || *(_BYTE *)(v9 + 248))
        {
          *(_BYTE *)(v7 + 236) = 1;
        }
      }
      v8 = *(_QWORD *)(v7 + 32);
      v4 = (WebCore::Style::RuleSet **)(v8 + 32);
    }
    while (*(_BYTE *)(v8 + 348));
  }
  WebCore::Style::ScopeRuleSets::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&)::$_0::operator()<WebCore::Style::RuleSet>(v11, v4[3]);
  Style = (WebCore::Style::RuleSet *)WebCore::Style::ScopeRuleSets::userAgentMediaQueryStyle((WebCore::Style::ScopeRuleSets *)a2);
  return WebCore::Style::ScopeRuleSets::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&)::$_0::operator()<WebCore::Style::RuleSet>(v11, Style);
}

WTF *WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules@<X0>(WebCore::Style::RuleSet *this@<X0>, const WebCore::MQ::MediaQueryEvaluator *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  WTF *v6;
  WTF *result;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  int v11;
  int v12;
  void *v13;
  WebCore::Style::RuleSet *v14;
  WebCore::Style::RuleSet *v15;
  uint64_t v16;
  void *__src;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  WTF *v21;
  int v22;
  int v23;
  WTF *v24;
  int v25;
  _DWORD *v26[2];

  v26[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules((uint64_t)v20, this, a2, 0);
  if (v20[0])
  {
    LODWORD(v16) = 1;
    __src = &v19;
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = a3 + 24;
    v18 = 1;
    *(_QWORD *)(a3 + 16) = 1;
    *(_BYTE *)(a3 + 32) = 1;
    WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges((WebCore::Style::DynamicMediaQueryEvaluationChanges *)&v16, v5);
  }
  else if (v23)
  {
    v26[0] = v20;
    WTF::HashMap<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::HashTableTraits>::ensure<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&)::$_0>((uint64_t)&v16, (uint64_t *)this + 84, (char **)&v21, (uint64_t)v26);
    v8 = v16;
    LODWORD(v16) = 0;
    v9 = *(_DWORD **)(v8 + 16);
    ++*v9;
    v15 = 0;
    v26[0] = v9;
    WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&__src, v26, 1uLL);
    *(_DWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = a3 + 24;
    *(_QWORD *)(a3 + 16) = 1;
    v10 = __src;
    if (__src == &v19)
    {
      v12 = HIDWORD(v18);
      memcpy((void *)(a3 + 24), __src, 8 * HIDWORD(v18));
    }
    else
    {
      __src = &v19;
      *(_QWORD *)(a3 + 8) = v10;
      v11 = v18;
      v12 = HIDWORD(v18);
      LODWORD(v18) = 1;
      *(_DWORD *)(a3 + 16) = v11;
    }
    HIDWORD(v18) = 0;
    *(_DWORD *)(a3 + 20) = v12;
    *(_BYTE *)(a3 + 32) = 1;
    WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges((WebCore::Style::DynamicMediaQueryEvaluationChanges *)&v16, v10);
    v14 = (WebCore::Style::RuleSet *)v26[0];
    v26[0] = 0;
    if (v14)
      WTF::RefCounted<WebCore::Style::RuleSet>::deref(v14, v13);
    WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>::~Ref(&v15, v13);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  v6 = v24;
  if (v24)
  {
    v24 = 0;
    v25 = 0;
    WTF::fastFree(v6, v5);
  }
  result = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WebCore *WebCore::Style::Resolver::appendAuthorStyleSheets(_QWORD *a1, uint64_t a2)
{
  WebCore *result;
  uint64_t v4;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore *v11;

  WebCore::Style::ScopeRuleSets::appendAuthorStyleSheets((WebCore::Style::ScopeRuleSets *)(a1 + 4), a2, (uint64_t)(a1 + 45), a1 + 50);
  result = *(WebCore **)(a1[2] + 8);
  v4 = *((_QWORD *)result + 243);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 112);
    v6 = (WebCore *)*((_QWORD *)result + 331);
    if (!v6)
    {
      result = (WebCore *)WebCore::Document::ensureFontSelector(result);
      v6 = result;
    }
    v7 = v5 + 32;
    ++*((_DWORD *)v6 + 2);
    v11 = v6;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow(result);
    v10 = *(_QWORD *)(v9 + 80);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v9);
      v10 = *(_QWORD *)(v9 + 80);
    }
    WebCore::FontCache::updateFontCascade(v10, v7, &v11);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::Style::ScopeRuleSets::collectFeatures(WebCore::Style::ScopeRuleSets *this, WTF::StringImpl *a2)
{
  WebCore::Style::RuleFeatureSet *v3;
  uint64_t Style;
  void *v5;
  WebCore::Style::ScopeRuleSets *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Style::RuleSet *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Style::RuleSet *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Style::RuleSet *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  const WebCore::CSSSelector *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  const WebCore::CSSSelector *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  const WebCore::CSSSelector *v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  void **v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  void **v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  const WebCore::CSSSelector *v60[4];

  if (*((_BYTE *)this + 318))
  {
    __break(0xC471u);
    JUMPOUT(0x1940F9FC0);
  }
  v3 = (WebCore::Style::ScopeRuleSets *)((char *)this + 40);
  WebCore::Style::RuleFeatureSet::clear((WebCore::Style::ScopeRuleSets *)((char *)this + 40), a2);
  if (WebCore::Style::UserAgentStyle::defaultStyle)
    WebCore::Style::RuleFeatureSet::add(v3, (WTF::StringImpl **)(WebCore::Style::UserAgentStyle::defaultStyle + 472));
  *((_DWORD *)this + 77) = WebCore::Style::UserAgentStyle::defaultStyleVersion;
  Style = WebCore::Style::ScopeRuleSets::userAgentMediaQueryStyle(this);
  if (Style)
    WebCore::Style::RuleFeatureSet::add(v3, (WTF::StringImpl **)(Style + 472));
  if (*(_QWORD *)this)
    WebCore::Style::RuleFeatureSet::add(v3, (WTF::StringImpl **)(*(_QWORD *)this + 472));
  v6 = this;
  if (*((_BYTE *)this + 316))
  {
    v6 = this;
    do
    {
      v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 4) + 16) + 8) + 1328);
      if (!*(_QWORD *)(v48 + 32))
      {
        if (*(_QWORD *)(v48 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v48);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v48);
        v59 = *(_QWORD *)(v48 + 32);
        if (*(_DWORD *)(v59 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v59 + 32));
        if (*(_BYTE *)(v59 + 242)
          || *(_BYTE *)(v59 + 243)
          || *(_BYTE *)(v59 + 244)
          || *(_BYTE *)(v59 + 245)
          || *(_BYTE *)(v59 + 246)
          || *(_BYTE *)(v59 + 247)
          || *(_BYTE *)(v59 + 248))
        {
          *(_BYTE *)(v48 + 236) = 1;
        }
      }
      v49 = *(_QWORD *)(v48 + 32);
      v6 = (WebCore::Style::ScopeRuleSets *)(v49 + 32);
    }
    while (*(_BYTE *)(v49 + 348));
  }
  v7 = *((_QWORD *)v6 + 3);
  if (v7)
    WebCore::Style::RuleFeatureSet::add(v3, (WTF::StringImpl **)(v7 + 472));
  v8 = *((unsigned int *)this + 23);
  if ((_DWORD)v8)
  {
    v9 = WTF::fastMalloc((WTF *)0x328);
    v24 = 0;
    v25 = 0;
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 72) = v9 + 88;
    *(_QWORD *)(v9 + 120) = v9 + 136;
    *(_QWORD *)(v9 + 168) = v9 + 184;
    *(_QWORD *)(v9 + 216) = v9 + 232;
    *(_QWORD *)(v9 + 264) = v9 + 280;
    *(_QWORD *)(v9 + 312) = v9 + 328;
    *(_QWORD *)(v9 + 360) = v9 + 376;
    *(_QWORD *)(v9 + 408) = v9 + 424;
    *(_QWORD *)(v9 + 645) = 0;
    *(_OWORD *)(v9 + 616) = 0u;
    *(_OWORD *)(v9 + 632) = 0u;
    *(_OWORD *)(v9 + 584) = 0u;
    *(_OWORD *)(v9 + 600) = 0u;
    *(_OWORD *)(v9 + 552) = 0u;
    *(_OWORD *)(v9 + 568) = 0u;
    *(_OWORD *)(v9 + 520) = 0u;
    *(_OWORD *)(v9 + 536) = 0u;
    *(_OWORD *)(v9 + 488) = 0u;
    *(_OWORD *)(v9 + 504) = 0u;
    *(_OWORD *)(v9 + 456) = 0u;
    *(_OWORD *)(v9 + 472) = 0u;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_QWORD *)(v9 + 80) = 1;
    *(_QWORD *)(v9 + 128) = 1;
    *(_QWORD *)(v9 + 176) = 1;
    *(_QWORD *)(v9 + 224) = 1;
    *(_QWORD *)(v9 + 272) = 1;
    *(_QWORD *)(v9 + 320) = 1;
    *(_QWORD *)(v9 + 368) = 1;
    *(_QWORD *)(v9 + 416) = 1;
    *(_QWORD *)(v9 + 672) = 0;
    *(_DWORD *)(v9 + 680) = 0;
    *(_OWORD *)(v9 + 656) = 0u;
    *(_OWORD *)(v9 + 688) = 0u;
    *(_OWORD *)(v9 + 704) = 0u;
    *(_OWORD *)(v9 + 720) = 0u;
    *(_OWORD *)(v9 + 736) = 0u;
    *(_OWORD *)(v9 + 752) = 0u;
    *(_OWORD *)(v9 + 768) = 0u;
    *(_OWORD *)(v9 + 784) = 0u;
    v26 = 12 * v8;
    *(_WORD *)(v9 + 800) = 0;
    do
    {
      if (v25 >= *((unsigned int *)this + 23))
      {
        __break(0xC471u);
        JUMPOUT(0x1940FA04CLL);
      }
      WebCore::Style::RuleData::RuleData(v60, *(const WebCore::CSSSelector **)(*((_QWORD *)this + 10) + v24), *(_WORD *)(*((_QWORD *)this + 10) + v24 + 8), *(unsigned __int16 *)(*((_QWORD *)this + 10) + v24 + 10), *(_DWORD *)(v9 + 680), 0);
      WebCore::Style::RuleSet::addRule(v9, v60, 0, 0, 0);
      v28 = v60[0];
      v60[0] = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v28, v27);
        else
          --*(_DWORD *)v28;
      }
      ++v25;
      v24 += 12;
    }
    while (v26 != v24);
    WebCore::Style::RuleSet::shrinkToFit((WebCore::Style::RuleSet *)v9, v27);
  }
  else
  {
    v9 = 0;
  }
  v10 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v10, v5);
      WTF::fastFree(v39, v40);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *((unsigned int *)this + 27);
  if ((_DWORD)v11)
  {
    v12 = WTF::fastMalloc((WTF *)0x328);
    v29 = 0;
    v30 = 0;
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 72) = v12 + 88;
    *(_QWORD *)(v12 + 120) = v12 + 136;
    *(_QWORD *)(v12 + 168) = v12 + 184;
    *(_QWORD *)(v12 + 216) = v12 + 232;
    *(_QWORD *)(v12 + 264) = v12 + 280;
    *(_QWORD *)(v12 + 312) = v12 + 328;
    *(_QWORD *)(v12 + 360) = v12 + 376;
    *(_QWORD *)(v12 + 408) = v12 + 424;
    *(_QWORD *)(v12 + 645) = 0;
    *(_OWORD *)(v12 + 616) = 0u;
    *(_OWORD *)(v12 + 632) = 0u;
    *(_OWORD *)(v12 + 584) = 0u;
    *(_OWORD *)(v12 + 600) = 0u;
    *(_OWORD *)(v12 + 552) = 0u;
    *(_OWORD *)(v12 + 568) = 0u;
    *(_OWORD *)(v12 + 520) = 0u;
    *(_OWORD *)(v12 + 536) = 0u;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_OWORD *)(v12 + 504) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_QWORD *)(v12 + 80) = 1;
    *(_QWORD *)(v12 + 128) = 1;
    *(_QWORD *)(v12 + 176) = 1;
    *(_QWORD *)(v12 + 224) = 1;
    *(_QWORD *)(v12 + 272) = 1;
    *(_QWORD *)(v12 + 320) = 1;
    *(_QWORD *)(v12 + 368) = 1;
    *(_QWORD *)(v12 + 416) = 1;
    *(_QWORD *)(v12 + 672) = 0;
    *(_DWORD *)(v12 + 680) = 0;
    *(_OWORD *)(v12 + 656) = 0u;
    *(_OWORD *)(v12 + 688) = 0u;
    *(_OWORD *)(v12 + 704) = 0u;
    *(_OWORD *)(v12 + 720) = 0u;
    *(_OWORD *)(v12 + 736) = 0u;
    *(_OWORD *)(v12 + 752) = 0u;
    *(_OWORD *)(v12 + 768) = 0u;
    *(_OWORD *)(v12 + 784) = 0u;
    v31 = 12 * v11;
    *(_WORD *)(v12 + 800) = 0;
    do
    {
      if (v30 >= *((unsigned int *)this + 27))
      {
        __break(0xC471u);
        JUMPOUT(0x1940FA054);
      }
      WebCore::Style::RuleData::RuleData(v60, *(const WebCore::CSSSelector **)(*((_QWORD *)this + 12) + v29), *(_WORD *)(*((_QWORD *)this + 12) + v29 + 8), *(unsigned __int16 *)(*((_QWORD *)this + 12) + v29 + 10), *(_DWORD *)(v12 + 680), 0);
      WebCore::Style::RuleSet::addRule(v12, v60, 0, 0, 0);
      v33 = v60[0];
      v60[0] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v33, v32);
        else
          --*(_DWORD *)v33;
      }
      ++v30;
      v29 += 12;
    }
    while (v31 != v29);
    WebCore::Style::RuleSet::shrinkToFit((WebCore::Style::RuleSet *)v12, v32);
  }
  else
  {
    v12 = 0;
  }
  v13 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v13, v5);
      WTF::fastFree(v41, v42);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  v14 = *((unsigned int *)this + 41);
  if ((_DWORD)v14)
  {
    v15 = WTF::fastMalloc((WTF *)0x328);
    v34 = 0;
    v35 = 0;
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 72) = v15 + 88;
    *(_QWORD *)(v15 + 120) = v15 + 136;
    *(_QWORD *)(v15 + 168) = v15 + 184;
    *(_QWORD *)(v15 + 216) = v15 + 232;
    *(_QWORD *)(v15 + 264) = v15 + 280;
    *(_QWORD *)(v15 + 312) = v15 + 328;
    *(_QWORD *)(v15 + 360) = v15 + 376;
    *(_QWORD *)(v15 + 408) = v15 + 424;
    *(_QWORD *)(v15 + 645) = 0;
    *(_OWORD *)(v15 + 616) = 0u;
    *(_OWORD *)(v15 + 632) = 0u;
    *(_OWORD *)(v15 + 584) = 0u;
    *(_OWORD *)(v15 + 600) = 0u;
    *(_OWORD *)(v15 + 552) = 0u;
    *(_OWORD *)(v15 + 568) = 0u;
    *(_OWORD *)(v15 + 520) = 0u;
    *(_OWORD *)(v15 + 536) = 0u;
    *(_OWORD *)(v15 + 488) = 0u;
    *(_OWORD *)(v15 + 504) = 0u;
    *(_OWORD *)(v15 + 456) = 0u;
    *(_OWORD *)(v15 + 472) = 0u;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_QWORD *)(v15 + 80) = 1;
    *(_QWORD *)(v15 + 128) = 1;
    *(_QWORD *)(v15 + 176) = 1;
    *(_QWORD *)(v15 + 224) = 1;
    *(_QWORD *)(v15 + 272) = 1;
    *(_QWORD *)(v15 + 320) = 1;
    *(_QWORD *)(v15 + 368) = 1;
    *(_QWORD *)(v15 + 416) = 1;
    *(_QWORD *)(v15 + 672) = 0;
    *(_DWORD *)(v15 + 680) = 0;
    *(_OWORD *)(v15 + 656) = 0u;
    *(_OWORD *)(v15 + 688) = 0u;
    *(_OWORD *)(v15 + 704) = 0u;
    *(_OWORD *)(v15 + 720) = 0u;
    *(_OWORD *)(v15 + 736) = 0u;
    *(_OWORD *)(v15 + 752) = 0u;
    *(_OWORD *)(v15 + 768) = 0u;
    *(_OWORD *)(v15 + 784) = 0u;
    v36 = 12 * v14;
    *(_WORD *)(v15 + 800) = 0;
    do
    {
      if (v35 >= *((unsigned int *)this + 41))
      {
        __break(0xC471u);
        JUMPOUT(0x1940FA05CLL);
      }
      WebCore::Style::RuleData::RuleData(v60, *(const WebCore::CSSSelector **)(*((_QWORD *)this + 19) + v34), *(_WORD *)(*((_QWORD *)this + 19) + v34 + 8), *(unsigned __int16 *)(*((_QWORD *)this + 19) + v34 + 10), *(_DWORD *)(v15 + 680), 0);
      WebCore::Style::RuleSet::addRule(v15, v60, 0, 0, 0);
      v38 = v60[0];
      v60[0] = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v38, v37);
        else
          --*(_DWORD *)v38;
      }
      ++v35;
      v34 += 12;
    }
    while (v36 != v34);
    WebCore::Style::RuleSet::shrinkToFit((WebCore::Style::RuleSet *)v15, v37);
  }
  else
  {
    v15 = 0;
  }
  v16 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v16, v5);
      WTF::fastFree(v43, v44);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  v17 = *((_QWORD *)this + 31);
  if (v17)
  {
    *((_QWORD *)this + 31) = 0;
    v50 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v50)
    {
      v51 = (void **)(v17 + 8);
      do
      {
        v52 = (WTF::StringImpl *)*(v51 - 1);
        if (v52 != (WTF::StringImpl *)-1)
        {
          v5 = *v51;
          *v51 = 0;
          if (v5)
          {
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v51, (WTF *)v5);
            v52 = (WTF::StringImpl *)*(v51 - 1);
          }
          *(v51 - 1) = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v5);
            else
              *(_DWORD *)v52 -= 2;
          }
        }
        v51 += 2;
        --v50;
      }
      while (v50);
    }
    WTF::fastFree((WTF *)(v17 - 16), v5);
  }
  v18 = *((_QWORD *)this + 32);
  if (v18)
  {
    *((_QWORD *)this + 32) = 0;
    v53 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v53)
    {
      v54 = (void **)(v18 + 8);
      do
      {
        v55 = (WTF::StringImpl *)*(v54 - 1);
        if (v55 != (WTF::StringImpl *)-1)
        {
          v5 = *v54;
          *v54 = 0;
          if (v5)
          {
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v54, (WTF *)v5);
            v55 = (WTF::StringImpl *)*(v54 - 1);
          }
          *(v54 - 1) = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v5);
            else
              *(_DWORD *)v55 -= 2;
          }
        }
        v54 += 2;
        --v53;
      }
      while (v53);
    }
    WTF::fastFree((WTF *)(v18 - 16), v5);
  }
  v19 = *((_QWORD *)this + 33);
  if (v19)
  {
    *((_QWORD *)this + 33) = 0;
    v56 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v56)
    {
      v57 = (void **)(v19 + 8);
      do
      {
        v58 = (WTF::StringImpl *)*(v57 - 1);
        if (v58 != (WTF::StringImpl *)-1)
        {
          v5 = *v57;
          *v57 = 0;
          if (v5)
          {
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v57, (WTF *)v5);
            v58 = (WTF::StringImpl *)*(v57 - 1);
          }
          *(v57 - 1) = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v5);
            else
              *(_DWORD *)v58 -= 2;
          }
        }
        v57 += 2;
        --v56;
      }
      while (v56);
    }
    WTF::fastFree((WTF *)(v19 - 16), v5);
  }
  v20 = *((_QWORD *)this + 34);
  if (v20)
  {
    *((_QWORD *)this + 34) = 0;
    WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::deallocateTable(v20, (WTF *)v5);
  }
  v21 = *((_QWORD *)this + 35);
  if (v21)
  {
    *((_QWORD *)this + 35) = 0;
    WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::deallocateTable(v21, (WTF *)v5);
  }
  if (*((_BYTE *)this + 296))
  {
    v22 = *((_QWORD *)this + 36);
    if (v22)
    {
      v45 = *(unsigned int *)(v22 - 4);
      if ((_DWORD)v45)
      {
        v46 = (WTF::StringImpl **)*((_QWORD *)this + 36);
        do
        {
          v47 = *v46;
          if (*v46 != (WTF::StringImpl *)-1)
          {
            *v46 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v5);
              else
                *(_DWORD *)v47 -= 2;
            }
          }
          ++v46;
          --v45;
        }
        while (v45);
      }
      WTF::fastFree((WTF *)(v22 - 16), v5);
    }
    *((_BYTE *)this + 296) = 0;
  }
  if (*((_BYTE *)this + 305))
    *((_BYTE *)this + 305) = 0;
  return WebCore::Style::RuleFeatureSet::shrinkToFit(v3);
}

uint64_t WebCore::Style::RuleFeatureSet::add(WebCore::Style::RuleFeatureSet *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  _DWORD *v54;
  unsigned int v55;
  int i;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  WTF *v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  _DWORD *v77;
  WTF *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WebCore::Style::RuleFeatureSet *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  int *v96;
  uint64_t v97;
  BOOL v98;
  _BOOL4 v99;
  WTF::StringImpl *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  _DWORD *v110;
  WTF::StringImpl *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  _DWORD *v120;
  int *v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  _QWORD *v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  _DWORD *v141;
  WTF::StringImpl *v142;
  WTF *v143;
  uint64_t v144;
  WTF *v145;
  uint64_t v146;
  _DWORD *v147;
  WTF *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  int *v169;
  BOOL v170;
  _BOOL4 v171;
  uint64_t v173;
  uint64_t v174;
  _BYTE *v175;
  WebCore::Style::RuleFeatureSet *v176;
  _BYTE *v177;
  _BYTE *v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  _BYTE *v183;
  _BYTE *v184;
  _BYTE *v185;
  uint64_t v186;
  int *v187;
  uint64_t v188;
  int *v189;
  int *v190;
  uint64_t *v191;
  uint64_t v192;
  int v193;
  _QWORD *v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  int v207;
  unsigned int v208;
  _DWORD *v210;
  WTF::StringImpl *v211;
  WTF *v212;
  uint64_t v213;
  WTF *v214;
  uint64_t v215;
  _DWORD *v216;
  WTF *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  unsigned int v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  int *v238;
  BOOL v239;
  _BOOL4 v240;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _DWORD *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  uint64_t *v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  BOOL v262;
  _BOOL4 v263;
  const WebCore::Style::RuleFeatureSet *v265;
  WebCore::Style::RuleFeatureSet *v266;
  _BYTE v267[24];

  v4 = *a2;
  if (!*a2)
  {
    v7 = 0;
    v5 = 0;
LABEL_167:
    v6 = (WTF::StringImpl *)((char *)v4 + 8 * v5);
    goto LABEL_8;
  }
  v5 = *((unsigned int *)v4 - 1);
  v6 = (WTF::StringImpl *)((char *)v4 + 8 * v5);
  if (!*((_DWORD *)v4 - 3))
  {
    v7 = (WTF::StringImpl *)((char *)v4 + 8 * v5);
    goto LABEL_167;
  }
  v7 = *a2;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    v7 = *a2;
    while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
    {
      v7 = (WTF::StringImpl *)((char *)v7 + 8);
      v8 -= 8;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_8:
  if (v4)
    v9 = (WTF::StringImpl *)((char *)v4 + 8 * *((unsigned int *)v4 - 1));
  else
    v9 = 0;
  while (v7 != v9)
  {
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)this, v7, (uint64_t)v267);
    v253 = (WTF::StringImpl *)((char *)v7 + 8);
    v7 = v6;
    if (v253 != v6)
    {
      v7 = v253;
      while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
      {
        v7 = (WTF::StringImpl *)((char *)v7 + 8);
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  v10 = a2[1];
  if (!v10)
  {
    v13 = 0;
    v11 = 0;
LABEL_169:
    v12 = (WTF::StringImpl *)((char *)v10 + 8 * v11);
    goto LABEL_19;
  }
  v11 = *((unsigned int *)v10 - 1);
  v12 = (WTF::StringImpl *)((char *)v10 + 8 * v11);
  if (!*((_DWORD *)v10 - 3))
  {
    v13 = (WTF::StringImpl *)((char *)v10 + 8 * v11);
    goto LABEL_169;
  }
  v13 = a2[1];
  if ((_DWORD)v11)
  {
    v14 = 8 * v11;
    v13 = a2[1];
    while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
    {
      v13 = (WTF::StringImpl *)((char *)v13 + 8);
      v14 -= 8;
      if (!v14)
      {
        v13 = v12;
        break;
      }
    }
  }
LABEL_19:
  if (v10)
    v15 = (WTF::StringImpl *)((char *)v10 + 8 * *((unsigned int *)v10 - 1));
  else
    v15 = 0;
  while (v13 != v15)
  {
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)this + 1, v13, (uint64_t)v267);
    v254 = (WTF::StringImpl *)((char *)v13 + 8);
    v13 = v12;
    if (v254 != v12)
    {
      v13 = v254;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 = (WTF::StringImpl *)((char *)v13 + 8);
        if (v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
  v16 = a2[2];
  if (!v16)
  {
    v19 = 0;
    v17 = 0;
LABEL_171:
    v18 = (WTF::StringImpl *)((char *)v16 + 8 * v17);
    goto LABEL_30;
  }
  v17 = *((unsigned int *)v16 - 1);
  v18 = (WTF::StringImpl *)((char *)v16 + 8 * v17);
  if (!*((_DWORD *)v16 - 3))
  {
    v19 = (WTF::StringImpl *)((char *)v16 + 8 * v17);
    goto LABEL_171;
  }
  v19 = a2[2];
  if ((_DWORD)v17)
  {
    v20 = 8 * v17;
    v19 = a2[2];
    while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
    {
      v19 = (WTF::StringImpl *)((char *)v19 + 8);
      v20 -= 8;
      if (!v20)
      {
        v19 = v18;
        break;
      }
    }
  }
LABEL_30:
  if (v16)
    v21 = (WTF::StringImpl *)((char *)v16 + 8 * *((unsigned int *)v16 - 1));
  else
    v21 = 0;
  while (v19 != v21)
  {
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)this + 2, v19, (uint64_t)v267);
    v255 = (WTF::StringImpl *)((char *)v19 + 8);
    v19 = v18;
    if (v255 != v18)
    {
      v19 = v255;
      while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
      {
        v19 = (WTF::StringImpl *)((char *)v19 + 8);
        if (v19 == v18)
        {
          v19 = v18;
          break;
        }
      }
    }
  }
  v22 = a2[3];
  if (!v22)
  {
    v25 = 0;
    v23 = 0;
LABEL_173:
    v24 = (WTF::StringImpl *)((char *)v22 + 8 * v23);
    goto LABEL_41;
  }
  v23 = *((unsigned int *)v22 - 1);
  v24 = (WTF::StringImpl *)((char *)v22 + 8 * v23);
  if (!*((_DWORD *)v22 - 3))
  {
    v25 = (WTF::StringImpl *)((char *)v22 + 8 * v23);
    goto LABEL_173;
  }
  v25 = a2[3];
  if ((_DWORD)v23)
  {
    v26 = 8 * v23;
    v25 = a2[3];
    while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
    {
      v25 = (WTF::StringImpl *)((char *)v25 + 8);
      v26 -= 8;
      if (!v26)
      {
        v25 = v24;
        break;
      }
    }
  }
LABEL_41:
  if (v22)
    v27 = (WTF::StringImpl *)((char *)v22 + 8 * *((unsigned int *)v22 - 1));
  else
    v27 = 0;
  while (v25 != v27)
  {
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)this + 3, v25, (uint64_t)v267);
    v256 = (WTF::StringImpl *)((char *)v25 + 8);
    v25 = v24;
    if (v256 != v24)
    {
      v25 = v256;
      while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
      {
        v25 = (WTF::StringImpl *)((char *)v25 + 8);
        if (v25 == v24)
        {
          v25 = v24;
          break;
        }
      }
    }
  }
  v28 = a2[4];
  if (!v28)
  {
    v31 = 0;
    v29 = 0;
LABEL_175:
    v30 = (WTF::StringImpl *)((char *)v28 + 8 * v29);
    goto LABEL_52;
  }
  v29 = *((unsigned int *)v28 - 1);
  v30 = (WTF::StringImpl *)((char *)v28 + 8 * v29);
  if (!*((_DWORD *)v28 - 3))
  {
    v31 = (WTF::StringImpl *)((char *)v28 + 8 * v29);
    goto LABEL_175;
  }
  v31 = a2[4];
  if ((_DWORD)v29)
  {
    v32 = 8 * v29;
    v31 = a2[4];
    while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
    {
      v31 = (WTF::StringImpl *)((char *)v31 + 8);
      v32 -= 8;
      if (!v32)
      {
        v31 = v30;
        break;
      }
    }
  }
LABEL_52:
  if (v28)
    v33 = (WTF::StringImpl *)((char *)v28 + 8 * *((unsigned int *)v28 - 1));
  else
    v33 = 0;
  while (v31 != v33)
  {
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)this + 4, v31, (uint64_t)v267);
    v257 = (WTF::StringImpl *)((char *)v31 + 8);
    v31 = v30;
    if (v257 != v30)
    {
      v31 = v257;
      while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
      {
        v31 = (WTF::StringImpl *)((char *)v31 + 8);
        if (v31 == v30)
        {
          v31 = v30;
          break;
        }
      }
    }
  }
  v34 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v34)
  {
    v101 = a2[5];
    v103 = *((unsigned int *)this + 12);
    v102 = *((unsigned int *)this + 13);
    v104 = v102 + v34;
    if (v102 + v34 > v103)
    {
      v105 = v103 + (v103 >> 2);
      v106 = v105 >= 0x10 ? v105 + 1 : 16;
      v107 = v106 <= v104 ? v104 : v106;
      WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 40, v107);
      v102 = *((unsigned int *)this + 13);
      if (v104 < v102)
      {
        __break(0xC471u);
        JUMPOUT(0x1940FB780);
      }
    }
    v108 = *((_QWORD *)this + 5) + 12 * v102;
    v109 = (WTF::StringImpl *)((char *)v101 + 12 * v34);
    do
    {
      v110 = *(_DWORD **)v101;
      if (*(_QWORD *)v101)
        ++*v110;
      *(_QWORD *)v108 = v110;
      *(_DWORD *)(v108 + 8) = *((_DWORD *)v101 + 2);
      v101 = (WTF::StringImpl *)((char *)v101 + 12);
      v108 += 12;
    }
    while (v101 != v109);
    *((_DWORD *)this + 13) = v104;
  }
  v35 = *((unsigned int *)a2 + 17);
  if ((_DWORD)v35)
  {
    v111 = a2[7];
    v113 = *((unsigned int *)this + 16);
    v112 = *((unsigned int *)this + 17);
    v114 = v112 + v35;
    if (v112 + v35 > v113)
    {
      v115 = v113 + (v113 >> 2);
      v116 = v115 >= 0x10 ? v115 + 1 : 16;
      v117 = v116 <= v114 ? v114 : v116;
      WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 56, v117);
      v112 = *((unsigned int *)this + 17);
      if (v114 < v112)
      {
        __break(0xC471u);
        JUMPOUT(0x1940FB788);
      }
    }
    v118 = *((_QWORD *)this + 7) + 12 * v112;
    v119 = (WTF::StringImpl *)((char *)v111 + 12 * v35);
    do
    {
      v120 = *(_DWORD **)v111;
      if (*(_QWORD *)v111)
        ++*v120;
      *(_QWORD *)v118 = v120;
      *(_DWORD *)(v118 + 8) = *((_DWORD *)v111 + 2);
      v111 = (WTF::StringImpl *)((char *)v111 + 12);
      v118 += 12;
    }
    while (v111 != v119);
    *((_DWORD *)this + 17) = v114;
  }
  WebCore::Style::RuleFeatureSet::add(WebCore::Style::RuleFeatureSet const&)::$_0::operator()<WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits> const>((uint64_t *)this + 9, a2[9]);
  result = (uint64_t)WebCore::Style::RuleFeatureSet::add(WebCore::Style::RuleFeatureSet const&)::$_0::operator()<WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits> const>((uint64_t *)this + 10, a2[10]);
  v38 = a2[16];
  if (!v38)
  {
    v41 = 0;
    v39 = 0;
LABEL_177:
    v40 = (WTF::StringImpl *)((char *)v38 + 8 * v39);
    goto LABEL_65;
  }
  v39 = *((unsigned int *)v38 - 1);
  v40 = (WTF::StringImpl *)((char *)v38 + 8 * v39);
  if (!*((_DWORD *)v38 - 3))
  {
    v41 = (WTF::StringImpl *)((char *)v38 + 8 * v39);
    goto LABEL_177;
  }
  v41 = a2[16];
  if ((_DWORD)v39)
  {
    v42 = 8 * v39;
    v41 = a2[16];
    while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
    {
      v41 = (WTF::StringImpl *)((char *)v41 + 8);
      v42 -= 8;
      if (!v42)
      {
        v41 = v40;
        break;
      }
    }
  }
LABEL_65:
  if (v38)
    v43 = (WTF::StringImpl *)((char *)v38 + 8 * *((unsigned int *)v38 - 1));
  else
    v43 = 0;
  while (v41 != v43)
  {
    result = (uint64_t)WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)this + 16, v41, (uint64_t)v267);
    v258 = (WTF::StringImpl *)((char *)v41 + 8);
    v41 = v40;
    if (v258 != v40)
    {
      v41 = v258;
      while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
      {
        v41 = (WTF::StringImpl *)((char *)v41 + 8);
        if (v41 == v40)
        {
          v41 = v40;
          break;
        }
      }
    }
  }
  v44 = a2[11];
  v265 = (const WebCore::Style::RuleFeatureSet *)a2;
  v266 = this;
  if (v44)
  {
    v45 = *((unsigned int *)v44 - 1);
    v46 = (WTF::StringImpl *)((char *)v44 + 16 * v45);
    if (*((_DWORD *)v44 - 3))
    {
      v47 = v44;
      if ((_DWORD)v45)
      {
        v48 = 16 * v45;
        v47 = v44;
        while ((unint64_t)(*(_QWORD *)v47 + 1) <= 1)
        {
          v47 = (WTF::StringImpl *)((char *)v47 + 16);
          v48 -= 16;
          if (!v48)
          {
            v47 = v46;
            goto LABEL_76;
          }
        }
      }
      goto LABEL_76;
    }
    v47 = (WTF::StringImpl *)((char *)v44 + 16 * v45);
  }
  else
  {
    v47 = 0;
    v45 = 0;
  }
  v46 = (WTF::StringImpl *)((char *)v44 + 16 * v45);
LABEL_76:
  if (v44)
    v49 = (WTF::StringImpl *)((char *)v44 + 16 * *((unsigned int *)v44 - 1));
  else
    v49 = 0;
  if (v49 == v47)
    goto LABEL_139;
  v50 = (uint64_t *)((char *)this + 88);
  do
  {
    v51 = *v50;
    if (*v50
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v50, 8u, 0), (v51 = *v50) != 0))
    {
      v52 = *(_DWORD *)(v51 - 8);
    }
    else
    {
      v52 = 0;
    }
    v53 = 0;
    v54 = *(_DWORD **)v47;
    v55 = *(_DWORD *)(*(_QWORD *)v47 + 16) >> 8;
    for (i = 1; ; ++i)
    {
      v57 = v55 & v52;
      v58 = v51 + 16 * v57;
      result = *(_QWORD *)v58;
      if (*(_QWORD *)v58 == -1)
      {
        v53 = (_QWORD *)(v51 + 16 * v57);
        goto LABEL_85;
      }
      if (!result)
        break;
      if ((_DWORD *)result == v54)
        goto LABEL_89;
LABEL_85:
      v55 = i + v57;
    }
    if (v53)
    {
      *v53 = 0;
      v53[1] = 0;
      --*(_DWORD *)(*v50 - 16);
      v54 = *(_DWORD **)v47;
      v58 = (uint64_t)v53;
    }
    if (v54)
      *v54 += 2;
    *(_QWORD *)v58 = v54;
    result = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v73 = *(WTF **)(v58 + 8);
    *(_QWORD *)(v58 + 8) = result;
    if (v73)
    {
      v74 = *((unsigned int *)v73 + 3);
      if ((_DWORD)v74)
      {
        v75 = *(WTF **)v73;
        v76 = 24 * v74;
        do
        {
          v77 = *(_DWORD **)v75;
          *(_QWORD *)v75 = 0;
          if (v77)
          {
            if (*v77 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v77, v37);
            else
              --*v77;
          }
          v75 = (WTF *)((char *)v75 + 24);
          v76 -= 24;
        }
        while (v76);
      }
      v78 = *(WTF **)v73;
      if (*(_QWORD *)v73)
      {
        *(_QWORD *)v73 = 0;
        *((_DWORD *)v73 + 2) = 0;
        WTF::fastFree(v78, v37);
      }
      result = WTF::fastFree(v73, v37);
    }
    v79 = *v50;
    if (*v50)
      v80 = *(_DWORD *)(v79 - 12) + 1;
    else
      v80 = 1;
    *(_DWORD *)(v79 - 12) = v80;
    v81 = *v50;
    if (*v50)
      v82 = *(_DWORD *)(v81 - 12);
    else
      v82 = 0;
    v83 = (*(_DWORD *)(v81 - 16) + v82);
    v84 = *(unsigned int *)(v81 - 4);
    if (v84 > 0x400)
    {
      if (v84 <= 2 * v83)
        goto LABEL_138;
    }
    else if (3 * v84 <= 4 * v83)
    {
      if (!(_DWORD)v84)
      {
        v85 = 8;
        goto LABEL_134;
      }
LABEL_138:
      v85 = (_DWORD)v84 << (6 * *(_DWORD *)(v81 - 12) >= (2 * v84));
LABEL_134:
      result = (uint64_t)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v50, v85, (WTF::StringImpl **)v58);
      v58 = result;
    }
LABEL_89:
    v59 = (uint64_t *)*((_QWORD *)v47 + 1);
    v60 = *((unsigned int *)v59 + 3);
    if ((_DWORD)v60)
    {
      v61 = *(_QWORD *)(v58 + 8);
      v62 = *v59;
      v64 = *(unsigned int *)(v61 + 8);
      v63 = *(unsigned int *)(v61 + 12);
      v65 = v63 + v60;
      if (v63 + v60 > v64)
      {
        v66 = v64 + (v64 >> 2);
        v67 = v66 >= 0x10 ? v66 + 1 : 16;
        v68 = v67 <= v65 ? v65 : v67;
        result = WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v61, v68);
        v63 = *(unsigned int *)(v61 + 12);
        if (v65 < v63)
        {
          __break(0xC471u);
          JUMPOUT(0x1940FB700);
        }
      }
      v69 = *(_QWORD *)v61 + 24 * v63;
      v70 = v62 + 24 * v60;
      do
      {
        v71 = *(_DWORD **)v62;
        if (*(_QWORD *)v62)
          ++*v71;
        *(_QWORD *)v69 = v71;
        *(_DWORD *)(v69 + 8) = *(_DWORD *)(v62 + 8);
        *(_WORD *)(v69 + 12) = *(_WORD *)(v62 + 12);
        *(_QWORD *)(v69 + 16) = *(_QWORD *)(v62 + 16);
        v62 += 24;
        v69 += 24;
      }
      while (v62 != v70);
      *(_DWORD *)(v61 + 12) = v65;
    }
    v72 = (WTF::StringImpl *)((char *)v47 + 16);
    v47 = v46;
    if (v72 != v46)
    {
      v47 = v72;
      while ((unint64_t)(*(_QWORD *)v47 + 1) <= 1)
      {
        v47 = (WTF::StringImpl *)((char *)v47 + 16);
        if (v47 == v46)
        {
          v47 = v46;
          break;
        }
      }
    }
  }
  while (v47 != v49);
LABEL_139:
  v86 = *((_QWORD *)v265 + 17);
  if (!v86)
  {
    v90 = 0;
    v87 = 0;
    v89 = v266;
LABEL_179:
    v88 = (WTF::StringImpl *)(v86 + 8 * v87);
    goto LABEL_146;
  }
  v87 = *(unsigned int *)(v86 - 4);
  v88 = (WTF::StringImpl *)(v86 + 8 * v87);
  v89 = v266;
  if (!*(_DWORD *)(v86 - 12))
  {
    v90 = (WTF::StringImpl *)(v86 + 8 * v87);
    goto LABEL_179;
  }
  v90 = (WTF::StringImpl *)*((_QWORD *)v265 + 17);
  if ((_DWORD)v87)
  {
    v91 = 8 * v87;
    v90 = (WTF::StringImpl *)*((_QWORD *)v265 + 17);
    while ((unint64_t)(*(_QWORD *)v90 + 1) <= 1)
    {
      v90 = (WTF::StringImpl *)((char *)v90 + 8);
      v91 -= 8;
      if (!v91)
      {
        v90 = v88;
        break;
      }
    }
  }
LABEL_146:
  if (v86)
    v92 = (WTF::StringImpl *)(v86 + 8 * *(unsigned int *)(v86 - 4));
  else
    v92 = 0;
  if (v92 != v90)
  {
    v259 = (uint64_t *)((char *)v89 + 136);
    do
    {
      result = (uint64_t)WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add(v259, v90, (uint64_t)v267);
      v260 = (WTF::StringImpl *)((char *)v90 + 8);
      v90 = v88;
      if (v260 != v88)
      {
        v90 = v260;
        while ((unint64_t)(*(_QWORD *)v90 + 1) <= 1)
        {
          v90 = (WTF::StringImpl *)((char *)v90 + 8);
          if (v90 == v88)
          {
            v90 = v88;
            break;
          }
        }
      }
    }
    while (v90 != v92);
  }
  v93 = *((_QWORD *)v265 + 12);
  if (!v93)
  {
    v96 = 0;
    LODWORD(v94) = 0;
LABEL_210:
    v95 = (int *)(v93 + 24 * v94);
    goto LABEL_211;
  }
  v94 = *(unsigned int *)(v93 - 4);
  v95 = (int *)(v93 + 24 * v94);
  if (!*(_DWORD *)(v93 - 12))
  {
    v96 = (int *)(v93 + 24 * v94);
    goto LABEL_210;
  }
  v96 = (int *)*((_QWORD *)v265 + 12);
  if ((_DWORD)v94)
  {
    v97 = 24 * v94;
    v96 = (int *)*((_QWORD *)v265 + 12);
    while (1)
    {
      v98 = !(*v96 | *((unsigned __int8 *)v96 + 4)) && *((_QWORD *)v96 + 1) == 0;
      v99 = v98;
      if (*v96 != -1 && !v99)
        break;
      v96 += 6;
      v97 -= 24;
      if (!v97)
      {
        v96 = v95;
        break;
      }
    }
  }
LABEL_211:
  if (v93)
    v121 = (int *)(v93 + 24 * *(unsigned int *)(v93 - 4));
  else
    v121 = 0;
  if (v121 == v96)
    goto LABEL_294;
  v122 = (uint64_t *)((char *)v266 + 96);
  while (2)
  {
    v123 = *v122;
    if (*v122
      || (WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(v122, 8u, 0), (v123 = *v122) != 0))
    {
      v124 = *(_DWORD *)(v123 - 8);
    }
    else
    {
      v124 = 0;
    }
    v125 = 0;
    v126 = *v96;
    v127 = 9 * ((v126 + ~(v126 << 15)) ^ ((v126 + ~(v126 << 15)) >> 10));
    v128 = (v127 ^ (v127 >> 6)) + ~((v127 ^ (v127 >> 6)) << 11);
    v129 = *((unsigned __int8 *)v96 + 4);
    v130 = 9 * ((~(v129 << 15) + v129) ^ ((~(v129 << 15) + v129) >> 10));
    v131 = (v130 ^ (v130 >> 6)) + ~((v130 ^ (v130 >> 6)) << 11);
    v132 = v131 ^ HIWORD(v131);
    v133 = *((_QWORD *)v96 + 1);
    v134 = (0xD7862706ELL
          * (unint64_t)(277951225 * (v128 ^ HIWORD(v128))
                             + 95187966
                             * ((0xD7862706ELL
                                             * (unint64_t)(95187966 * (*(_DWORD *)(v133 + 16) >> 8)
                                                                              + 277951225 * v132)) >> 4))) >> 4;
    v135 = 1;
    while (2)
    {
      v136 = v134 & v124;
      v137 = v123 + 24 * v136;
      v138 = *(_DWORD *)v137;
      v139 = *(unsigned __int8 *)(v137 + 4);
      result = *(_DWORD *)v137 | v139;
      if ((_DWORD)result)
      {
        if (v138 == -1)
        {
          v125 = (_QWORD *)(v123 + 24 * v136);
        }
        else
        {
LABEL_222:
          if (v138 == v126 && v139 == v129 && *(_QWORD *)(v137 + 8) == v133)
            goto LABEL_259;
        }
        LODWORD(v134) = v135 + v136;
        ++v135;
        continue;
      }
      break;
    }
    result = *(_QWORD *)(v137 + 8);
    if (result)
      goto LABEL_222;
    if (v125)
    {
      *v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      --*(_DWORD *)(*v122 - 16);
      v126 = *v96;
      v137 = (uint64_t)v125;
    }
    *(_DWORD *)v137 = v126;
    *(_BYTE *)(v137 + 4) = *((_BYTE *)v96 + 4);
    v141 = (_DWORD *)*((_QWORD *)v96 + 1);
    if (v141)
      *v141 += 2;
    v142 = *(WTF::StringImpl **)(v137 + 8);
    *(_QWORD *)(v137 + 8) = v141;
    if (v142)
    {
      if (*(_DWORD *)v142 == 2)
        WTF::StringImpl::destroy(v142, v37);
      else
        *(_DWORD *)v142 -= 2;
    }
    result = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v143 = *(WTF **)(v137 + 16);
    *(_QWORD *)(v137 + 16) = result;
    if (v143)
    {
      v144 = *((unsigned int *)v143 + 3);
      if ((_DWORD)v144)
      {
        v145 = *(WTF **)v143;
        v146 = 16 * v144;
        do
        {
          v147 = *(_DWORD **)v145;
          *(_QWORD *)v145 = 0;
          if (v147)
          {
            if (*v147 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v147, v37);
            else
              --*v147;
          }
          v145 = (WTF *)((char *)v145 + 16);
          v146 -= 16;
        }
        while (v146);
      }
      v148 = *(WTF **)v143;
      if (*(_QWORD *)v143)
      {
        *(_QWORD *)v143 = 0;
        *((_DWORD *)v143 + 2) = 0;
        WTF::fastFree(v148, v37);
      }
      result = WTF::fastFree(v143, v37);
    }
    v149 = *v122;
    if (*v122)
      v150 = *(_DWORD *)(v149 - 12) + 1;
    else
      v150 = 1;
    *(_DWORD *)(v149 - 12) = v150;
    v151 = *v122;
    if (*v122)
      v152 = *(_DWORD *)(v151 - 12);
    else
      v152 = 0;
    v153 = (*(_DWORD *)(v151 - 16) + v152);
    v154 = *(unsigned int *)(v151 - 4);
    if (v154 > 0x400)
    {
      if (v154 <= 2 * v153)
        goto LABEL_290;
    }
    else if (3 * v154 <= 4 * v153)
    {
      if (!(_DWORD)v154)
      {
        v155 = 8;
        goto LABEL_258;
      }
LABEL_290:
      v155 = (_DWORD)v154 << (6 * *(_DWORD *)(v151 - 12) >= (2 * v154));
LABEL_258:
      result = WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(v122, v155, (int *)v137);
      v137 = result;
    }
LABEL_259:
    v156 = (uint64_t *)*((_QWORD *)v96 + 2);
    v157 = *((unsigned int *)v156 + 3);
    if ((_DWORD)v157)
    {
      v158 = *(_QWORD *)(v137 + 16);
      v159 = *v156;
      v161 = *(unsigned int *)(v158 + 8);
      v160 = *(unsigned int *)(v158 + 12);
      v162 = v160 + v157;
      if (v160 + v157 > v161)
      {
        v163 = v161 + (v161 >> 2);
        v164 = v163 >= 0x10 ? v163 + 1 : 16;
        v165 = v164 <= v162 ? v162 : v164;
        result = WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v158, v165);
        v160 = *(unsigned int *)(v158 + 12);
        if (v162 < v160)
        {
          __break(0xC471u);
          JUMPOUT(0x1940FB708);
        }
      }
      v166 = *(_QWORD *)v158 + 16 * v160;
      v167 = v159 + 16 * v157;
      do
      {
        v168 = *(_DWORD **)v159;
        if (*(_QWORD *)v159)
          ++*v168;
        *(_QWORD *)v166 = v168;
        *(_DWORD *)(v166 + 8) = *(_DWORD *)(v159 + 8);
        *(_WORD *)(v166 + 12) = *(_WORD *)(v159 + 12);
        v159 += 16;
        v166 += 16;
      }
      while (v159 != v167);
      *(_DWORD *)(v158 + 12) = v162;
    }
    v169 = v96 + 6;
    v96 = v95;
    if (v169 != v95)
    {
      v96 = v169;
      while (1)
      {
        v170 = !(*v96 | *((unsigned __int8 *)v96 + 4)) && *((_QWORD *)v96 + 1) == 0;
        v171 = v170;
        if (*v96 != -1 && !v171)
          break;
        v96 += 6;
        if (v96 == v95)
        {
          v96 = v95;
          break;
        }
      }
    }
    if (v96 != v121)
      continue;
    break;
  }
LABEL_294:
  v173 = *((_QWORD *)v265 + 18);
  if (!v173)
  {
    v177 = 0;
    v174 = 0;
    v176 = v266;
LABEL_303:
    v175 = (_BYTE *)(v173 + v174);
    goto LABEL_304;
  }
  v174 = *(unsigned int *)(v173 - 4);
  v175 = (_BYTE *)(v173 + v174);
  v176 = v266;
  if (!*(_DWORD *)(v173 - 12))
  {
    v177 = (_BYTE *)(v173 + v174);
    goto LABEL_303;
  }
  v177 = (_BYTE *)*((_QWORD *)v265 + 18);
  if ((_DWORD)v174)
  {
    v177 = (_BYTE *)*((_QWORD *)v265 + 18);
    while (*v177 >= 0xFEu)
    {
      ++v177;
      if (!--v174)
      {
        v177 = v175;
        break;
      }
    }
  }
LABEL_304:
  if (v173)
    v178 = (_BYTE *)(v173 + *(unsigned int *)(v173 - 4));
  else
    v178 = 0;
  while (v177 != v178)
  {
    result = (uint64_t)WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::add((uint64_t *)v176 + 18, v177, (uint64_t)v267);
    v179 = v177 + 1;
    v177 = v175;
    if (v179 != v175)
    {
      v177 = v179;
      while (*v177 >= 0xFEu)
      {
        if (++v177 == v175)
        {
          v177 = v175;
          break;
        }
      }
    }
  }
  v180 = *((_QWORD *)v265 + 19);
  if (!v180)
  {
    v183 = 0;
    v181 = 0;
LABEL_322:
    v182 = (_BYTE *)(v180 + v181);
    goto LABEL_323;
  }
  v181 = *(unsigned int *)(v180 - 4);
  v182 = (_BYTE *)(v180 + v181);
  if (!*(_DWORD *)(v180 - 12))
  {
    v183 = (_BYTE *)(v180 + v181);
    goto LABEL_322;
  }
  v183 = (_BYTE *)*((_QWORD *)v265 + 19);
  if ((_DWORD)v181)
  {
    v183 = (_BYTE *)*((_QWORD *)v265 + 19);
    while (*v183 >= 0xFEu)
    {
      ++v183;
      if (!--v181)
      {
        v183 = v182;
        break;
      }
    }
  }
LABEL_323:
  if (v180)
    v184 = (_BYTE *)(v180 + *(unsigned int *)(v180 - 4));
  else
    v184 = 0;
  while (v183 != v184)
  {
    result = (uint64_t)WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::add((uint64_t *)v176 + 19, v183, (uint64_t)v267);
    v185 = v183 + 1;
    v183 = v182;
    if (v185 != v182)
    {
      v183 = v185;
      while (*v183 >= 0xFEu)
      {
        if (++v183 == v182)
        {
          v183 = v182;
          break;
        }
      }
    }
  }
  v186 = *((_QWORD *)v265 + 13);
  if (!v186)
  {
    v187 = 0;
    LODWORD(v188) = 0;
    goto LABEL_334;
  }
  v188 = *(unsigned int *)(v186 - 4);
  v189 = (int *)(v186 + 24 * v188);
  if (*(_DWORD *)(v186 - 12))
  {
    v187 = (int *)*((_QWORD *)v265 + 13);
    if ((_DWORD)v188)
    {
      v261 = 24 * v188;
      v187 = (int *)*((_QWORD *)v265 + 13);
      while (1)
      {
        v262 = !(*v187 | *((unsigned __int8 *)v187 + 4)) && *((_QWORD *)v187 + 1) == 0;
        v263 = v262;
        if (*v187 != -1 && !v263)
          break;
        v187 += 6;
        v261 -= 24;
        if (!v261)
        {
          v187 = v189;
          break;
        }
      }
    }
  }
  else
  {
    v187 = (int *)(v186 + 24 * v188);
LABEL_334:
    v189 = (int *)(v186 + 24 * v188);
  }
  if (v186)
    v190 = (int *)(v186 + 24 * *(unsigned int *)(v186 - 4));
  else
    v190 = 0;
  if (v190 == v187)
    goto LABEL_418;
  v191 = (uint64_t *)((char *)v266 + 104);
  while (2)
  {
    v192 = *v191;
    if (*v191
      || (WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(v191, 8u, 0), (v192 = *v191) != 0))
    {
      v193 = *(_DWORD *)(v192 - 8);
    }
    else
    {
      v193 = 0;
    }
    v194 = 0;
    v195 = *v187;
    v196 = 9 * ((v195 + ~(v195 << 15)) ^ ((v195 + ~(v195 << 15)) >> 10));
    v197 = (v196 ^ (v196 >> 6)) + ~((v196 ^ (v196 >> 6)) << 11);
    v198 = *((unsigned __int8 *)v187 + 4);
    v199 = 9 * ((~(v198 << 15) + v198) ^ ((~(v198 << 15) + v198) >> 10));
    v200 = (v199 ^ (v199 >> 6)) + ~((v199 ^ (v199 >> 6)) << 11);
    v201 = v200 ^ HIWORD(v200);
    v202 = *((_QWORD *)v187 + 1);
    v203 = (0xD7862706ELL
          * (unint64_t)(277951225 * (v197 ^ HIWORD(v197))
                             + 95187966
                             * ((0xD7862706ELL
                                             * (unint64_t)(95187966 * (*(_DWORD *)(v202 + 16) >> 8)
                                                                              + 277951225 * v201)) >> 4))) >> 4;
    v204 = 1;
    while (2)
    {
      v205 = v203 & v193;
      v206 = v192 + 24 * v205;
      v207 = *(_DWORD *)v206;
      v208 = *(unsigned __int8 *)(v206 + 4);
      result = *(_DWORD *)v206 | v208;
      if ((_DWORD)result)
      {
        if (v207 == -1)
        {
          v194 = (_QWORD *)(v192 + 24 * v205);
        }
        else
        {
LABEL_345:
          if (v207 == v195 && v208 == v198 && *(_QWORD *)(v206 + 8) == v202)
            goto LABEL_384;
        }
        LODWORD(v203) = v204 + v205;
        ++v204;
        continue;
      }
      break;
    }
    result = *(_QWORD *)(v206 + 8);
    if (result)
      goto LABEL_345;
    if (v194)
    {
      *v194 = 0;
      v194[1] = 0;
      v194[2] = 0;
      --*(_DWORD *)(*v191 - 16);
      v195 = *v187;
      v206 = (uint64_t)v194;
    }
    *(_DWORD *)v206 = v195;
    *(_BYTE *)(v206 + 4) = *((_BYTE *)v187 + 4);
    v210 = (_DWORD *)*((_QWORD *)v187 + 1);
    if (v210)
      *v210 += 2;
    v211 = *(WTF::StringImpl **)(v206 + 8);
    *(_QWORD *)(v206 + 8) = v210;
    if (v211)
    {
      if (*(_DWORD *)v211 == 2)
        WTF::StringImpl::destroy(v211, v37);
      else
        *(_DWORD *)v211 -= 2;
    }
    result = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v212 = *(WTF **)(v206 + 16);
    *(_QWORD *)(v206 + 16) = result;
    if (v212)
    {
      v213 = *((unsigned int *)v212 + 3);
      if ((_DWORD)v213)
      {
        v214 = *(WTF **)v212;
        v215 = 24 * v213;
        do
        {
          v216 = *(_DWORD **)v214;
          *(_QWORD *)v214 = 0;
          if (v216)
          {
            if (*v216 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v216, v37);
            else
              --*v216;
          }
          v214 = (WTF *)((char *)v214 + 24);
          v215 -= 24;
        }
        while (v215);
      }
      v217 = *(WTF **)v212;
      if (*(_QWORD *)v212)
      {
        *(_QWORD *)v212 = 0;
        *((_DWORD *)v212 + 2) = 0;
        WTF::fastFree(v217, v37);
      }
      result = WTF::fastFree(v212, v37);
    }
    v218 = *v191;
    if (*v191)
      v219 = *(_DWORD *)(v218 - 12) + 1;
    else
      v219 = 1;
    *(_DWORD *)(v218 - 12) = v219;
    v220 = *v191;
    if (*v191)
      v221 = *(_DWORD *)(v220 - 12);
    else
      v221 = 0;
    v222 = (*(_DWORD *)(v220 - 16) + v221);
    v223 = *(unsigned int *)(v220 - 4);
    if (v223 > 0x400)
    {
      if (v223 <= 2 * v222)
      {
LABEL_382:
        v224 = (_DWORD)v223 << (6 * *(_DWORD *)(v220 - 12) >= (2 * v223));
        goto LABEL_383;
      }
    }
    else if (3 * v223 <= 4 * v222)
    {
      if ((_DWORD)v223)
        goto LABEL_382;
      v224 = 8;
LABEL_383:
      result = WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(v191, v224, (int *)v206);
      v206 = result;
    }
LABEL_384:
    v225 = (uint64_t *)*((_QWORD *)v187 + 2);
    v226 = *((unsigned int *)v225 + 3);
    if ((_DWORD)v226)
    {
      v227 = *(_QWORD *)(v206 + 16);
      v228 = *v225;
      v230 = *(unsigned int *)(v227 + 8);
      v229 = *(unsigned int *)(v227 + 12);
      v231 = v229 + v226;
      if (v229 + v226 > v230)
      {
        v232 = v230 + (v230 >> 2);
        v233 = v232 >= 0x10 ? v232 + 1 : 16;
        v234 = v233 <= v231 ? v231 : v233;
        result = WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v227, v234);
        v229 = *(unsigned int *)(v227 + 12);
        if (v231 < v229)
        {
          __break(0xC471u);
          JUMPOUT(0x1940FB710);
        }
      }
      v235 = *(_QWORD *)v227 + 24 * v229;
      v236 = v228 + 24 * v226;
      do
      {
        v237 = *(_DWORD **)v228;
        if (*(_QWORD *)v228)
          ++*v237;
        *(_QWORD *)v235 = v237;
        *(_DWORD *)(v235 + 8) = *(_DWORD *)(v228 + 8);
        *(_WORD *)(v235 + 12) = *(_WORD *)(v228 + 12);
        *(_QWORD *)(v235 + 16) = *(_QWORD *)(v228 + 16);
        v228 += 24;
        v235 += 24;
      }
      while (v228 != v236);
      *(_DWORD *)(v227 + 12) = v231;
    }
    v238 = v187 + 6;
    v187 = v189;
    if (v238 != v189)
    {
      v187 = v238;
      while (1)
      {
        v239 = !(*v187 | *((unsigned __int8 *)v187 + 4)) && *((_QWORD *)v187 + 1) == 0;
        v240 = v239;
        if (*v187 != -1 && !v240)
          break;
        v187 += 6;
        if (v187 == v189)
        {
          v187 = v189;
          break;
        }
      }
    }
    if (v187 != v190)
      continue;
    break;
  }
LABEL_418:
  v242 = *((unsigned int *)v265 + 31);
  if ((_DWORD)v242)
  {
    v243 = *((_QWORD *)v265 + 14);
    v245 = *((unsigned int *)v266 + 30);
    v244 = *((unsigned int *)v266 + 31);
    v246 = v244 + v242;
    if (v244 + v242 > v245)
    {
      v247 = v245 + (v245 >> 2);
      v248 = v247 >= 0x10 ? v247 + 1 : 16;
      v249 = v248 <= v246 ? v246 : v248;
      result = WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v266 + 112, v249);
      v244 = *((unsigned int *)v266 + 31);
      if (v246 < v244)
      {
        __break(0xC471u);
        JUMPOUT(0x1940FB790);
      }
    }
    v250 = *((_QWORD *)v266 + 14) + 12 * v244;
    v251 = v243 + 12 * v242;
    do
    {
      v252 = *(_DWORD **)v243;
      if (*(_QWORD *)v243)
        ++*v252;
      *(_QWORD *)v250 = v252;
      *(_DWORD *)(v250 + 8) = *(_DWORD *)(v243 + 8);
      v243 += 12;
      v250 += 12;
    }
    while (v243 != v251);
    *((_DWORD *)v266 + 31) = v246;
  }
  *((_BYTE *)v266 + 160) = (*((unsigned __int8 *)v266 + 160) | *((unsigned __int8 *)v265 + 160)) != 0;
  *((_BYTE *)v266 + 161) = (*((unsigned __int8 *)v266 + 161) | *((unsigned __int8 *)v265 + 161)) != 0;
  *((_BYTE *)v266 + 162) = (*((unsigned __int8 *)v266 + 162) | *((unsigned __int8 *)v265 + 162)) != 0;
  *((_BYTE *)v266 + 163) = (*((unsigned __int8 *)v266 + 163) | *((unsigned __int8 *)v265 + 163)) != 0;
  *((_BYTE *)v266 + 164) = (*((unsigned __int8 *)v266 + 164) | *((unsigned __int8 *)v265 + 164)) != 0;
  *((_BYTE *)v266 + 165) = (*((unsigned __int8 *)v266 + 165) | *((unsigned __int8 *)v265 + 165)) != 0;
  *((_BYTE *)v266 + 166) = (*((unsigned __int8 *)v266 + 166) | *((unsigned __int8 *)v265 + 166)) != 0;
  *((_BYTE *)v266 + 167) = (*((unsigned __int8 *)v266 + 167) | *((unsigned __int8 *)v265 + 167)) != 0;
  *((_BYTE *)v266 + 168) = (*((unsigned __int8 *)v266 + 168) | *((unsigned __int8 *)v265 + 168)) != 0;
  *((_BYTE *)v266 + 169) = (*((unsigned __int8 *)v266 + 169) | *((unsigned __int8 *)v265 + 169)) != 0;
  *((_BYTE *)v266 + 170) = (*((unsigned __int8 *)v266 + 170) | *((unsigned __int8 *)v265 + 170)) != 0;
  *((_BYTE *)v266 + 171) = (*((unsigned __int8 *)v266 + 171) | *((unsigned __int8 *)v265 + 171)) != 0;
  *((_BYTE *)v266 + 172) = (*((unsigned __int8 *)v266 + 172) | *((unsigned __int8 *)v265 + 172)) != 0;
  *((_BYTE *)v266 + 173) = (*((unsigned __int8 *)v266 + 173) | *((unsigned __int8 *)v265 + 173)) != 0;
  *((_BYTE *)v266 + 174) = (*((unsigned __int8 *)v266 + 174) | *((unsigned __int8 *)v265 + 174)) != 0;
  *((_BYTE *)v266 + 175) = (*((unsigned __int8 *)v266 + 175) | *((unsigned __int8 *)v265 + 175)) != 0;
  *((_BYTE *)v266 + 176) = (*((unsigned __int8 *)v266 + 176) | *((unsigned __int8 *)v265 + 176)) != 0;
  *((_BYTE *)v266 + 177) = (*((unsigned __int8 *)v266 + 177) | *((unsigned __int8 *)v265 + 177)) != 0;
  *((_BYTE *)v266 + 178) = (*((unsigned __int8 *)v266 + 178) | *((unsigned __int8 *)v265 + 178)) != 0;
  *((_BYTE *)v266 + 179) = (*((unsigned __int8 *)v266 + 179) | *((unsigned __int8 *)v265 + 179)) != 0;
  *((_BYTE *)v266 + 180) = (*((unsigned __int8 *)v266 + 180) | *((unsigned __int8 *)v265 + 180)) != 0;
  return result;
}

unint64_t WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          *(_DWORD *)(v7 + 8) = *((_DWORD *)v9 + 2);
          *(_WORD *)(v7 + 12) = *((_WORD *)v9 + 6);
          *(_QWORD *)(v7 + 16) = *((_QWORD *)v9 + 2);
          result = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, v6);
            else
              --*(_DWORD *)result;
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 24;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 12 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x15555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 12 * a2;
      result = WTF::fastMalloc((WTF *)(12 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 12 * v4);
        v9 = v3;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          *(_DWORD *)(v7 + 8) = *((_DWORD *)v9 + 2);
          result = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, v6);
            else
              --*(_DWORD *)result;
          }
          v9 = (WTF *)((char *)v9 + 12);
          v7 += 12;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int i;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  WTF *v32;
  _QWORD *v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  _DWORD *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  _DWORD *v48;
  WTF *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  WTF::StringImpl *v52;
  uint64_t result;
  uint64_t v56;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v56 = v5;
    do
    {
      v11 = (int *)(v4 + 24 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        v13 = *((unsigned __int8 *)v11 + 4);
        if (v12)
          v14 = 0;
        else
          v14 = v13 == 0;
        if (!v14 || *((_QWORD *)v11 + 1))
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
          v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
          v25 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
          v26 = (v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11);
          v27 = v22 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * (v24 ^ HIWORD(v24))
                                         + 95187966
                                         * ((0xD7862706ELL
                                                         * (unint64_t)(277951225 * (v26 ^ HIWORD(v26))
                                                                            + 95187966
                                                                            * (*(_DWORD *)(*((_QWORD *)v11 + 1) + 16) >> 8))) >> 4))) >> 4);
          for (i = 1; ; ++i)
          {
            v29 = v21 + 24 * v27;
            v30 = !*(_DWORD *)v29 && *(_BYTE *)(v29 + 4) == 0;
            if (v30 && !*(_QWORD *)(v29 + 8))
              break;
            v27 = (v27 + i) & v22;
          }
          v31 = v21 + 24 * v27;
          v34 = *(WTF **)(v31 + 16);
          v33 = (_QWORD *)(v31 + 16);
          v32 = v34;
          *v33 = 0;
          if (v34)
          {
            v35 = *((unsigned int *)v32 + 3);
            if ((_DWORD)v35)
            {
              v36 = *(WTF **)v32;
              v37 = 16 * v35;
              do
              {
                v38 = *(_DWORD **)v36;
                *(_QWORD *)v36 = 0;
                if (v38)
                {
                  if (*v38 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v38, v8);
                  else
                    --*v38;
                }
                v36 = (WTF *)((char *)v36 + 16);
                v37 -= 16;
              }
              while (v37);
            }
            v39 = *(WTF **)v32;
            if (*(_QWORD *)v32)
            {
              *(_QWORD *)v32 = 0;
              *((_DWORD *)v32 + 2) = 0;
              WTF::fastFree(v39, v8);
            }
            WTF::fastFree(v32, v8);
            v40 = *(WTF::StringImpl **)(v29 + 8);
            *(_QWORD *)(v29 + 8) = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v8);
              else
                *(_DWORD *)v40 -= 2;
            }
          }
          else
          {
            *(_QWORD *)(v29 + 8) = 0;
          }
          *(_DWORD *)v29 = *v11;
          *(_BYTE *)(v29 + 4) = *((_BYTE *)v11 + 4);
          v41 = *((_QWORD *)v11 + 1);
          *((_QWORD *)v11 + 1) = 0;
          *(_QWORD *)(v29 + 8) = v41;
          v42 = v4 + 24 * v9;
          v43 = *(_QWORD *)(v42 + 16);
          *(_QWORD *)(v42 + 16) = 0;
          *v33 = v43;
          v44 = *(WTF **)(v42 + 16);
          *(_QWORD *)(v42 + 16) = 0;
          if (v44)
          {
            v45 = *((unsigned int *)v44 + 3);
            if ((_DWORD)v45)
            {
              v46 = *(WTF **)v44;
              v47 = 16 * v45;
              do
              {
                v48 = *(_DWORD **)v46;
                *(_QWORD *)v46 = 0;
                if (v48)
                {
                  if (*v48 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v48, v8);
                  else
                    --*v48;
                }
                v46 = (WTF *)((char *)v46 + 16);
                v47 -= 16;
              }
              while (v47);
            }
            v49 = *(WTF **)v44;
            if (*(_QWORD *)v44)
            {
              *(_QWORD *)v44 = 0;
              *((_DWORD *)v44 + 2) = 0;
              WTF::fastFree(v49, v8);
            }
            WTF::fastFree(v44, v8);
          }
          v50 = (WTF::StringImpl *)*((_QWORD *)v11 + 1);
          *((_QWORD *)v11 + 1) = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v8);
            else
              *(_DWORD *)v50 -= 2;
          }
          if (v11 == a3)
            v10 = v29;
        }
        else
        {
          v15 = v4 + 24 * v9;
          v16 = *(WTF **)(v15 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          if (v16)
          {
            v17 = *((unsigned int *)v16 + 3);
            if ((_DWORD)v17)
            {
              v18 = *(WTF **)v16;
              v19 = 16 * v17;
              do
              {
                v20 = *(_DWORD **)v18;
                *(_QWORD *)v18 = 0;
                if (v20)
                {
                  if (*v20 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v20, v8);
                  else
                    --*v20;
                }
                v18 = (WTF *)((char *)v18 + 16);
                v19 -= 16;
              }
              while (v19);
            }
            v51 = *(WTF **)v16;
            if (*(_QWORD *)v16)
            {
              *(_QWORD *)v16 = 0;
              *((_DWORD *)v16 + 2) = 0;
              WTF::fastFree(v51, v8);
            }
            WTF::fastFree(v16, v8);
            v52 = (WTF::StringImpl *)*((_QWORD *)v11 + 1);
            *((_QWORD *)v11 + 1) = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WTF::StringImpl::destroy(v52, v8);
              else
                *(_DWORD *)v52 -= 2;
            }
          }
          else
          {
            *((_QWORD *)v11 + 1) = 0;
          }
        }
      }
      ++v9;
    }
    while (v9 != v56);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 16 * v5);
        v9 = v4;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          *(_DWORD *)(v7 + 8) = *((_DWORD *)v9 + 2);
          *(_WORD *)(v7 + 12) = *((_WORD *)v9 + 6);
          result = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, v6);
            else
              --*(_DWORD *)result;
          }
          v9 = (WTF *)((char *)v9 + 16);
          v7 += 16;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  _DWORD *v41;
  WTF *v42;
  WTF::StringImpl **result;
  uint64_t v45;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v45 = v6;
    do
    {
      v12 = (WTF::StringImpl **)(v5 + 16 * v10);
      v13 = *v12;
      if (*v12)
      {
        if (v13 != (WTF::StringImpl *)-1)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = *((_DWORD *)v13 + 4) >> 8;
          do
          {
            v18 = v17 & v15;
            v17 = ++v16 + v18;
          }
          while (*(_QWORD *)(v14 + 16 * v18));
          v19 = (WTF::StringImpl **)(v14 + 16 * v18);
          v20 = v19[1];
          v19[1] = 0;
          if (v20)
          {
            v21 = *((unsigned int *)v20 + 3);
            if ((_DWORD)v21)
            {
              v22 = *(WTF **)v20;
              v23 = 24 * v21;
              do
              {
                v24 = *(_DWORD **)v22;
                *(_QWORD *)v22 = 0;
                if (v24)
                {
                  if (*v24 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v24, v9);
                  else
                    --*v24;
                }
                v22 = (WTF *)((char *)v22 + 24);
                v23 -= 24;
              }
              while (v23);
            }
            v25 = *(WTF **)v20;
            if (*(_QWORD *)v20)
            {
              *(_QWORD *)v20 = 0;
              *((_DWORD *)v20 + 2) = 0;
              WTF::fastFree(v25, v9);
            }
            WTF::fastFree(v20, v9);
            v26 = *v19;
            *v19 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v9);
              else
                *(_DWORD *)v26 -= 2;
            }
          }
          else
          {
            *v19 = 0;
          }
          v27 = *v12;
          *v12 = 0;
          *v19 = v27;
          v28 = v5 + 16 * v10;
          v29 = *(WTF::StringImpl **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v19[1] = v29;
          v30 = *(WTF **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            v31 = *((unsigned int *)v30 + 3);
            if ((_DWORD)v31)
            {
              v32 = *(WTF **)v30;
              v33 = 24 * v31;
              do
              {
                v34 = *(_DWORD **)v32;
                *(_QWORD *)v32 = 0;
                if (v34)
                {
                  if (*v34 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v34, v9);
                  else
                    --*v34;
                }
                v32 = (WTF *)((char *)v32 + 24);
                v33 -= 24;
              }
              while (v33);
            }
            v35 = *(WTF **)v30;
            if (*(_QWORD *)v30)
            {
              *(_QWORD *)v30 = 0;
              *((_DWORD *)v30 + 2) = 0;
              WTF::fastFree(v35, v9);
            }
            WTF::fastFree(v30, v9);
          }
          v36 = *v12;
          *v12 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v9);
            else
              *(_DWORD *)v36 -= 2;
          }
          if (v12 == a3)
            v11 = v19;
        }
      }
      else
      {
        v37 = v12[1];
        v12[1] = 0;
        if (v37)
        {
          v38 = *((unsigned int *)v37 + 3);
          if ((_DWORD)v38)
          {
            v39 = *(WTF **)v37;
            v40 = 24 * v38;
            do
            {
              v41 = *(_DWORD **)v39;
              *(_QWORD *)v39 = 0;
              if (v41)
              {
                if (*v41 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v41, v9);
                else
                  --*v41;
              }
              v39 = (WTF *)((char *)v39 + 24);
              v40 -= 24;
            }
            while (v40);
          }
          v42 = *(WTF **)v37;
          if (*(_QWORD *)v37)
          {
            *(_QWORD *)v37 = 0;
            *((_DWORD *)v37 + 2) = 0;
            WTF::fastFree(v42, v9);
          }
          WTF::fastFree(v37, v9);
          v13 = *v12;
        }
        *v12 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v9);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      ++v10;
    }
    while (v10 != v45);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _DWORD *v28;
  WTF *v29;
  WTF::StringImpl **result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = v5 + 16 * v10;
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13)
      {
        if (v14 != (WTF::StringImpl *)-1)
        {
          v15 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(*a1, (WTF::StringImpl *)(v5 + 16 * v10));
          v16 = v5 + 16 * v10;
          v17 = *(WTF **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            v18 = *((unsigned int *)v17 + 3);
            if ((_DWORD)v18)
            {
              v19 = *(WTF **)v17;
              v20 = 16 * v18;
              do
              {
                v21 = *(_DWORD **)v19;
                *(_QWORD *)v19 = 0;
                if (v21)
                {
                  if (*v21 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v21, v9);
                  else
                    --*v21;
                }
                v19 = (WTF *)((char *)v19 + 16);
                v20 -= 16;
              }
              while (v20);
            }
            v22 = *(WTF **)v17;
            if (*(_QWORD *)v17)
            {
              *(_QWORD *)v17 = 0;
              *((_DWORD *)v17 + 2) = 0;
              WTF::fastFree(v22, v9);
            }
            WTF::fastFree(v17, v9);
          }
          v23 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v9);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v13 == a3)
            v11 = v15;
        }
      }
      else
      {
        v24 = *(WTF **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (v24)
        {
          v25 = *((unsigned int *)v24 + 3);
          if ((_DWORD)v25)
          {
            v26 = *(WTF **)v24;
            v27 = 16 * v25;
            do
            {
              v28 = *(_DWORD **)v26;
              *(_QWORD *)v26 = 0;
              if (v28)
              {
                if (*v28 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v28, v9);
                else
                  --*v28;
              }
              v26 = (WTF *)((char *)v26 + 16);
              v27 -= 16;
            }
            while (v27);
          }
          v29 = *(WTF **)v24;
          if (*(_QWORD *)v24)
          {
            *(_QWORD *)v24 = 0;
            *((_DWORD *)v24 + 2) = 0;
            WTF::fastFree(v29, v9);
          }
          WTF::fastFree(v24, v9);
          v14 = *(WTF::StringImpl **)v13;
        }
        *(_QWORD *)v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v9);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WebCore::Style::ScopeRuleSets::userAgentMediaQueryStyle(WebCore::Style::ScopeRuleSets *this)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  WebCore::Style::RuleSet *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  WTF *v12;
  void *v13;
  unsigned __int8 *v14[2];
  _QWORD v15[2];
  char v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  if (WebCore::Style::UserAgentStyle::mediaQueryStyleSheet)
  {
    v2 = *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 68)
       + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 52)
       + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 84)
       + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 100);
    if (!*((_QWORD *)this + 1) || v2 != *((_DWORD *)this + 78))
    {
      *((_DWORD *)this + 78) = v2;
      v4 = *((_QWORD *)this + 4) + 360;
      v5 = WTF::fastMalloc((WTF *)0x328);
      *(_DWORD *)v5 = 1;
      v7 = 0uLL;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_QWORD *)(v5 + 72) = v5 + 88;
      *(_QWORD *)(v5 + 80) = 1;
      *(_QWORD *)(v5 + 120) = v5 + 136;
      *(_QWORD *)(v5 + 128) = 1;
      *(_QWORD *)(v5 + 168) = v5 + 184;
      *(_QWORD *)(v5 + 176) = 1;
      *(_QWORD *)(v5 + 216) = v5 + 232;
      *(_QWORD *)(v5 + 224) = 1;
      *(_QWORD *)(v5 + 264) = v5 + 280;
      *(_QWORD *)(v5 + 272) = 1;
      *(_QWORD *)(v5 + 312) = v5 + 328;
      *(_QWORD *)(v5 + 320) = 1;
      *(_QWORD *)(v5 + 360) = v5 + 376;
      *(_QWORD *)(v5 + 368) = 1;
      *(_QWORD *)(v5 + 408) = v5 + 424;
      *(_QWORD *)(v5 + 416) = 1;
      *(_QWORD *)(v5 + 645) = 0;
      *(_OWORD *)(v5 + 616) = 0u;
      *(_OWORD *)(v5 + 632) = 0u;
      *(_OWORD *)(v5 + 584) = 0u;
      *(_OWORD *)(v5 + 600) = 0u;
      *(_OWORD *)(v5 + 552) = 0u;
      *(_OWORD *)(v5 + 568) = 0u;
      *(_OWORD *)(v5 + 520) = 0u;
      *(_OWORD *)(v5 + 536) = 0u;
      *(_OWORD *)(v5 + 488) = 0u;
      *(_OWORD *)(v5 + 504) = 0u;
      *(_OWORD *)(v5 + 456) = 0u;
      *(_OWORD *)(v5 + 472) = 0u;
      *(_QWORD *)(v5 + 672) = 0;
      *(_DWORD *)(v5 + 680) = 0;
      *(_OWORD *)(v5 + 656) = 0u;
      *(_OWORD *)(v5 + 688) = 0u;
      *(_OWORD *)(v5 + 704) = 0u;
      *(_OWORD *)(v5 + 720) = 0u;
      *(_OWORD *)(v5 + 736) = 0u;
      *(_OWORD *)(v5 + 752) = 0u;
      *(_OWORD *)(v5 + 768) = 0u;
      *(_OWORD *)(v5 + 784) = 0u;
      *(_WORD *)(v5 + 800) = 0;
      v8 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v5;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v8, v6);
          WTF::fastFree(v12, v13);
          v7 = 0uLL;
          v5 = *((_QWORD *)this + 1);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      v9 = *((_QWORD *)this + 4);
      ++*(_DWORD *)v5;
      v15[0] = v5;
      v15[1] = v4;
      v16 = 0;
      v17 = v7;
      v18 = v7;
      v19 = 0;
      v20 = v9;
      v21 = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      v25 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v28 = 0;
      v26 = 0;
      v27 = 0;
      v14[0] = 0;
      v14[1] = 0;
      WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)v15, (const WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::mediaQueryStyleSheet, v14);
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v10);
      WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)v15, v11);
    }
  }
  return *((_QWORD *)this + 1);
}

uint64_t WebCore::Style::RuleFeatureSet::clear(WebCore::Style::RuleFeatureSet *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD **v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;

  v3 = *(WTF::StringImpl ***)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    v23 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v23)
    {
      v24 = v3;
      do
      {
        v25 = *v24;
        if (*v24 != (WTF::StringImpl *)-1)
        {
          *v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, a2);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
        ++v24;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    v26 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v26)
    {
      v27 = v4;
      do
      {
        v28 = *v27;
        if (*v27 != (WTF::StringImpl *)-1)
        {
          *v27 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, a2);
            else
              *(_DWORD *)v28 -= 2;
          }
        }
        ++v27;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)(v4 - 2), a2);
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 2) = 0;
    v29 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v29)
    {
      v30 = v5;
      do
      {
        v31 = *v30;
        if (*v30 != (WTF::StringImpl *)-1)
        {
          *v30 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, a2);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        ++v30;
        --v29;
      }
      while (v29);
    }
    WTF::fastFree((WTF *)(v5 - 2), a2);
  }
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    v32 = *((unsigned int *)v6 - 1);
    if ((_DWORD)v32)
    {
      v33 = v6;
      do
      {
        v34 = *v33;
        if (*v33 != (WTF::StringImpl *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, a2);
            else
              *(_DWORD *)v34 -= 2;
          }
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)(v6 - 2), a2);
  }
  v7 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 4) = 0;
    v35 = *((unsigned int *)v7 - 1);
    if ((_DWORD)v35)
    {
      v36 = v7;
      do
      {
        v37 = *v36;
        if (*v36 != (WTF::StringImpl *)-1)
        {
          *v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, a2);
            else
              *(_DWORD *)v37 -= 2;
          }
        }
        ++v36;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v7 - 2), a2);
  }
  if (*((_DWORD *)this + 12))
  {
    v17 = *((unsigned int *)this + 13);
    if ((_DWORD)v17)
    {
      v44 = (_DWORD **)*((_QWORD *)this + 5);
      v45 = 12 * v17;
      do
      {
        v46 = *v44;
        *v44 = 0;
        if (v46)
        {
          if (*v46 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v46, a2);
          else
            --*v46;
        }
        v44 = (_DWORD **)((char *)v44 + 12);
        v45 -= 12;
      }
      while (v45);
      *((_DWORD *)this + 13) = 0;
    }
    v18 = (WTF *)*((_QWORD *)this + 5);
    if (v18)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v18, a2);
    }
  }
  if (*((_DWORD *)this + 16))
  {
    v19 = *((unsigned int *)this + 17);
    if ((_DWORD)v19)
    {
      v47 = (_DWORD **)*((_QWORD *)this + 7);
      v48 = 12 * v19;
      do
      {
        v49 = *v47;
        *v47 = 0;
        if (v49)
        {
          if (*v49 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v49, a2);
          else
            --*v49;
        }
        v47 = (_DWORD **)((char *)v47 + 12);
        v48 -= 12;
      }
      while (v48);
      *((_DWORD *)this + 17) = 0;
    }
    v20 = (WTF *)*((_QWORD *)this + 7);
    if (v20)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v20, a2);
    }
  }
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 9) = 0;
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v8, a2);
  }
  v9 = *((_QWORD *)this + 10);
  if (v9)
  {
    *((_QWORD *)this + 10) = 0;
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v9, a2);
  }
  v10 = *((_QWORD *)this + 13);
  if (v10)
  {
    *((_QWORD *)this + 13) = 0;
    WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::deallocateTable(v10, a2);
  }
  if (*((_DWORD *)this + 30))
  {
    v21 = *((unsigned int *)this + 31);
    if ((_DWORD)v21)
    {
      v50 = (_DWORD **)*((_QWORD *)this + 14);
      v51 = 12 * v21;
      do
      {
        v52 = *v50;
        *v50 = 0;
        if (v52)
        {
          if (*v52 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v52, a2);
          else
            --*v52;
        }
        v50 = (_DWORD **)((char *)v50 + 12);
        v51 -= 12;
      }
      while (v51);
      *((_DWORD *)this + 31) = 0;
    }
    v22 = (WTF *)*((_QWORD *)this + 14);
    if (v22)
    {
      *((_QWORD *)this + 14) = 0;
      *((_DWORD *)this + 30) = 0;
      WTF::fastFree(v22, a2);
    }
  }
  v11 = (WTF::StringImpl **)*((_QWORD *)this + 16);
  if (v11)
  {
    *((_QWORD *)this + 16) = 0;
    v38 = *((unsigned int *)v11 - 1);
    if ((_DWORD)v38)
    {
      v39 = v11;
      do
      {
        v40 = *v39;
        if (*v39 != (WTF::StringImpl *)-1)
        {
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, a2);
            else
              *(_DWORD *)v40 -= 2;
          }
        }
        ++v39;
        --v38;
      }
      while (v38);
    }
    WTF::fastFree((WTF *)(v11 - 2), a2);
  }
  v12 = *((_QWORD *)this + 11);
  if (v12)
  {
    *((_QWORD *)this + 11) = 0;
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v12, a2);
  }
  v13 = (WTF::StringImpl **)*((_QWORD *)this + 17);
  if (v13)
  {
    *((_QWORD *)this + 17) = 0;
    v41 = *((unsigned int *)v13 - 1);
    if ((_DWORD)v41)
    {
      v42 = v13;
      do
      {
        v43 = *v42;
        if (*v42 != (WTF::StringImpl *)-1)
        {
          *v42 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, a2);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
        ++v42;
        --v41;
      }
      while (v41);
    }
    WTF::fastFree((WTF *)(v13 - 2), a2);
  }
  result = *((_QWORD *)this + 12);
  if (result)
  {
    *((_QWORD *)this + 12) = 0;
    result = WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::deallocateTable(result, a2);
  }
  v15 = *((_QWORD *)this + 18);
  if (v15)
  {
    *((_QWORD *)this + 18) = 0;
    result = WTF::fastFree((WTF *)(v15 - 16), a2);
  }
  v16 = *((_QWORD *)this + 19);
  if (v16)
  {
    *((_QWORD *)this + 19) = 0;
    result = WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  *(_WORD *)((char *)this + 179) = 0;
  return result;
}

WebCore::ResourceResponseBase *WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this)
{
  int64x2_t v2;

  *(_QWORD *)this = 0;
  WTF::URL::invalidate(this);
  *((_BYTE *)this + 128) = 0;
  *((_WORD *)this + 68) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 138) = *((_BYTE *)this + 138) & 0xCE | 1;
  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 9) = v2;
  *((int64x2_t *)this + 10) = v2;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0x8000000000000000;
  *(int64x2_t *)((char *)this + 200) = v2;
  *((_QWORD *)this + 27) = 0x7FF8000000000000;
  *((_BYTE *)this + 224) &= 0xF0u;
  *((_WORD *)this + 116) &= 0xC000u;
  *((_BYTE *)this + 234) = *((_BYTE *)this + 234) & 0xF8 | 2;
  return this;
}

{
  int64x2_t v2;

  *(_QWORD *)this = 0;
  WTF::URL::invalidate(this);
  *((_BYTE *)this + 128) = 0;
  *((_WORD *)this + 68) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 138) = *((_BYTE *)this + 138) & 0xCE | 1;
  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 9) = v2;
  *((int64x2_t *)this + 10) = v2;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0x8000000000000000;
  *(int64x2_t *)((char *)this + 200) = v2;
  *((_QWORD *)this + 27) = 0x7FF8000000000000;
  *((_BYTE *)this + 224) &= 0xF0u;
  *((_WORD *)this + 116) &= 0xC000u;
  *((_BYTE *)this + 234) = *((_BYTE *)this + 234) & 0xF8 | 2;
  return this;
}

uint64_t WebCore::presentingApplicationPID(WebCore *this)
{
  {
    if (byte_1ECE90D38)
      return WebCore::presentingApplicationPIDOverride(void)::pid;
  }
  else
  {
    LOBYTE(WebCore::presentingApplicationPIDOverride(void)::pid) = 0;
    byte_1ECE90D38 = 0;
  }
  return getpid();
}

void WebCore::CSSPropertyParser::parseShorthand(WebCore::CSSParserTokenRange **this, WTF::StringImpl *a2, WebCore::CSSParserTokenRange *a3)
{
  int v4;
  void *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::CSSPropertyParsing *v12;
  uint64_t v13;
  int v14;
  WebCore *v15;
  uint64_t v16;
  WebCore *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WebCore *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  _DWORD *v36;
  WebCore *v37;
  WebCore *v38;
  _DWORD *v39;
  _DWORD *v40;
  WebCore *v41;
  int v42;
  WebCore::CSSParserTokenRange *v43;
  __int128 *v44;
  __int128 *v45;
  char v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned __int16 v50;
  int v51;
  int *v52;
  WTF::StringImpl *v53;
  WebCore::CSSParserTokenRange *v54;
  __int128 *v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  WebCore *v59;
  int *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  int *v65;
  WTF::StringImpl *v66;
  __int128 *v67;
  __int128 *v68;
  WebCore::CSSParserTokenRange *v69;
  double v70;
  char v71;
  double v72;
  WebCore::CSSParserTokenRange *v73;
  double v74;
  char v75;
  double v76;
  double v77;
  char v78;
  WebCore::CSSParserTokenRange *v79;
  int v80;
  uint64_t v81;
  int v82;
  __int128 *v83;
  int v84;
  WebCore::CSSParserTokenRange *v85;
  __int128 *v86;
  __int128 *v87;
  char v88;
  unsigned int v89;
  int v90;
  unsigned __int16 *v91;
  WebCore::CSSParserTokenRange *v92;
  WebCore *v93;
  __int128 *v94;
  __int128 *v95;
  int *v96;
  int v97;
  WebCore *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WebCore::CSSParserTokenRange *v102;
  __int128 *v103;
  int *v104;
  WebCore *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  WebCore::CSSParserTokenRange *v110;
  WTF::StringImpl *v111;
  int v112;
  int v113;
  int *v114;
  int v115;
  _DWORD *v116;
  _DWORD *v117;
  int *v118;
  int v119;
  WebCore *v120;
  _DWORD *v121;
  WTF *v122;
  WTF *v124;
  uint64_t v126;
  WTF::StringImpl *v127;
  __int128 *v128;
  WebCore *v129;
  WebCore *v130;
  WebCore *v131;
  WebCore *v132;
  WebCore *v133;
  int v134;
  WebCore *v135;
  int v136;
  unsigned int v137;
  int *v138;
  int v139;
  void *v140;
  uint64_t v141;
  double v142;
  double v143;
  double v144;
  float v145;
  int *v147;
  char v148;
  WTF::StringImpl *v149;
  double v150;
  float v151;
  int *v153;
  char v154;
  WTF::StringImpl *v155;
  int v156;
  __int128 *v157;
  char v158;
  __int128 *v159;
  unsigned int v160;
  void *started;
  uint64_t v162;
  unsigned int *v163;
  int v164;
  WebCore::CSSParserTokenRange *v165;
  uint64_t v166;
  WebCore *v167;
  uint64_t v168;
  _DWORD *v169;
  _DWORD **v170;
  uint64_t v171;
  _DWORD *v172;
  unsigned int *v173;
  int v174;
  WebCore::CSSParserTokenRange *v175;
  unsigned int *v176;
  int v177;
  WebCore::CSSParserTokenRange *v178;
  int v179;
  __int128 *v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned __int16 *v183;
  unsigned int v184;
  unsigned __int16 *v185;
  uint64_t v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WebCore::CSSParserTokenRange *v189;
  __int128 *v190;
  char v191;
  unsigned int v192;
  __int128 *v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  WebCore *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  WebCore *v204;
  unsigned __int16 *v205;
  unsigned int v206;
  unsigned __int16 *v207;
  uint64_t v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  int *v211;
  WTF::StringImpl *v212;
  WebCore *v213;
  int v214;
  WTF::StringImpl *v215;
  WebCore *v216;
  WebCore *v217;
  WebCore *v218;
  WebCore *v219;
  unsigned __int16 *v220;
  uint64_t v221;
  unsigned __int16 *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  unsigned __int16 *v232;
  unsigned int v233;
  WTF::StringImpl *v234;
  WebCore *v235;
  WebCore *v236;
  WebCore *v237;
  int v238;
  int v239;
  WebCore *v240;
  WebCore *v241;
  WebCore *v242;
  int v243;
  int v244;
  _BYTE v245[32];
  _DWORD *v246;
  int *v247;
  _DWORD *v248;
  _BYTE v249[32];
  WebCore *v250[2];
  _OWORD v251[2];
  __int128 v252;
  _OWORD v253[3];

  v4 = (int)a2;
  switch((int)a2)
  {
    case 460:
      *(_QWORD *)&v252 = WebCore::animationShorthand((WebCore *)this);
      *((_QWORD *)&v252 + 1) = v166;
      goto LABEL_66;
    case 461:
      *(_QWORD *)&v252 = WebCore::backgroundShorthand(void)::backgroundProperties;
      *((_QWORD *)&v252 + 1) = 0x1CD00000009;
      goto LABEL_3;
    case 462:
    case 511:
    case 549:
      v110 = this[2];
      *(_QWORD *)&v252 = v253;
      *((_QWORD *)&v252 + 1) = 4;
      v250[0] = (WebCore *)v251;
      v250[1] = (WebCore *)4;
      do
      {
        WebCore::CSSPropertyParserHelpers::consumePositionCoordinates((uint64_t *)this, *((unsigned __int8 *)v110 + 48), 0, v4 != 511, 1, (uint64_t)&v247);
        v112 = v249[0];
        if (!v249[0])
        {
          std::optional<WebCore::CSSPropertyParserHelpers::PositionCoordinates>::~optional((uint64_t)&v247, v111);
          v120 = 0;
          v121 = 0;
          goto LABEL_275;
        }
        v113 = HIDWORD(v252);
        if (HIDWORD(v252) == DWORD2(v252))
        {
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v252, (unint64_t)&v247);
          if (!v249[0])
          {
            __break(1u);
LABEL_491:
            WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)v250, (unint64_t)&v248);
            if (!v249[0])
              continue;
            goto LABEL_265;
          }
        }
        else
        {
          v114 = v247;
          v247 = 0;
          *(_QWORD *)(v252 + 8 * HIDWORD(v252)) = v114;
          HIDWORD(v252) = v113 + 1;
        }
        v115 = HIDWORD(v250[1]);
        if (HIDWORD(v250[1]) == LODWORD(v250[1]))
          goto LABEL_491;
        v116 = v248;
        v248 = 0;
        *((_QWORD *)v250[0] + HIDWORD(v250[1])) = v116;
        HIDWORD(v250[1]) = v115 + 1;
LABEL_265:
        v117 = v248;
        v248 = 0;
        if (v117)
        {
          if (*v117 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v117, v111);
          else
            *v117 -= 2;
        }
        v118 = v247;
        v247 = 0;
        if (v118)
        {
          if (*v118 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v118, v111);
          else
            *v118 -= 2;
        }
      }
      while (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)this, v111));
      v119 = HIDWORD(v252);
      if (HIDWORD(v252) == 1)
      {
        v120 = *(WebCore **)v252;
        *(_QWORD *)v252 = 0;
        if (!HIDWORD(v250[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x1940FFACCLL);
        }
        v121 = *(_DWORD **)v250[0];
        *(_QWORD *)v250[0] = 0;
      }
      else
      {
        v247 = (int *)v249;
        LODWORD(v248) = 4;
        v211 = (int *)v252;
        if ((_OWORD *)v252 == v253)
        {
          memcpy(v249, v253, 8 * HIDWORD(v252));
        }
        else
        {
          *(_QWORD *)&v252 = v253;
          v247 = v211;
          v238 = DWORD2(v252);
          DWORD2(v252) = 4;
          LODWORD(v248) = v238;
        }
        HIDWORD(v252) = 0;
        HIDWORD(v248) = v119;
        WebCore::CSSValueList::createCommaSeparated((uint64_t)&v247, (uint64_t *)&v242);
        v120 = v242;
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v247, v212);
        v242 = (WebCore *)v245;
        v243 = 4;
        v213 = v250[0];
        if ((_OWORD *)v250[0] == v251)
        {
          v214 = HIDWORD(v250[1]);
          memcpy(v245, v251, 8 * HIDWORD(v250[1]));
        }
        else
        {
          v250[0] = (WebCore *)v251;
          v242 = v213;
          v239 = (int)v250[1];
          v214 = HIDWORD(v250[1]);
          LODWORD(v250[1]) = 4;
          v243 = v239;
        }
        HIDWORD(v250[1]) = 0;
        v244 = v214;
        WebCore::CSSValueList::createCommaSeparated((uint64_t)&v242, (uint64_t *)&v246);
        v121 = v246;
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v242, v215);
      }
LABEL_275:
      if (HIDWORD(v250[1]))
      {
        v167 = v250[0];
        v168 = 8 * HIDWORD(v250[1]);
        do
        {
          v169 = *(_DWORD **)v167;
          *(_QWORD *)v167 = 0;
          if (v169)
          {
            if (*v169 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v169, a2);
            else
              *v169 -= 2;
          }
          v167 = (WebCore *)((char *)v167 + 8);
          v168 -= 8;
        }
        while (v168);
      }
      v122 = v250[0];
      if (v251 != (_OWORD *)v250[0] && v250[0] != 0)
      {
        v250[0] = 0;
        LODWORD(v250[1]) = 0;
        WTF::fastFree(v122, a2);
      }
      if (HIDWORD(v252))
      {
        v170 = (_DWORD **)v252;
        v171 = 8 * HIDWORD(v252);
        do
        {
          v172 = *v170;
          *v170 = 0;
          if (v172)
          {
            if (*v172 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v172, a2);
            else
              *v172 -= 2;
          }
          ++v170;
          v171 -= 8;
        }
        while (v171);
      }
      v124 = (WTF *)v252;
      if (v253 != (_OWORD *)v252 && (_QWORD)v252 != 0)
      {
        *(_QWORD *)&v252 = 0;
        DWORD2(v252) = 0;
        WTF::fastFree(v124, a2);
      }
      if (!v112 || *this != this[1])
      {
        if (v121)
        {
          if (*v121 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v121, a2);
          else
            *v121 -= 2;
        }
        if (!v120)
          return;
        if (*(_DWORD *)v120 != 2)
        {
          *(_DWORD *)v120 -= 2;
          return;
        }
        v15 = v120;
LABEL_382:
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
        return;
      }
      *(_QWORD *)&v252 = v120;
      if (v4 == 462)
        v126 = 63;
      else
        v126 = 335;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, v126, v4, (int **)&v252, (int)a3, 0);
      if ((_QWORD)v252)
      {
        if (*(_DWORD *)v252 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v127);
        else
          *(_DWORD *)v252 -= 2;
      }
      *(_QWORD *)&v252 = v121;
      if (v4 == 462)
        v13 = 64;
      else
        v13 = 336;
      v12 = (WebCore::CSSPropertyParsing *)this;
      v14 = v4;
LABEL_24:
      WebCore::CSSPropertyParser::addProperty((uint64_t)v12, v13, v14, (int **)&v252, (int)a3, 0);
      v15 = (WebCore *)v252;
      if ((_QWORD)v252)
      {
LABEL_25:
        if (*(_DWORD *)v15 != 2)
        {
          *(_DWORD *)v15 -= 2;
          return;
        }
LABEL_223:
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
      }
      return;
    case 463:
      if (!WebCore::CSSPropertyParser::consumeBorderShorthand((uint64_t)this, 485, 483, 471, (int)a3))
        return;
      *(_QWORD *)&v252 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 75, 463, (int **)&v252, (int)a3, 0);
      if ((_QWORD)v252)
      {
        if (*(_DWORD *)v252 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v8);
        else
          *(_DWORD *)v252 -= 2;
      }
      *(_QWORD *)&v252 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 74, 463, (int **)&v252, (int)a3, 0);
      if ((_QWORD)v252)
      {
        if (*(_DWORD *)v252 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v9);
        else
          *(_DWORD *)v252 -= 2;
      }
      *(_QWORD *)&v252 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 76, 463, (int **)&v252, (int)a3, 0);
      if ((_QWORD)v252)
      {
        if (*(_DWORD *)v252 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v10);
        else
          *(_DWORD *)v252 -= 2;
      }
      *(_QWORD *)&v252 = 0;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 72, 463, (int **)&v252, (int)a3, 0);
      if ((_QWORD)v252)
      {
        if (*(_DWORD *)v252 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v11);
        else
          *(_DWORD *)v252 -= 2;
      }
      *(_QWORD *)&v252 = 0;
      v12 = (WebCore::CSSPropertyParsing *)this;
      v13 = 73;
      v14 = 463;
      goto LABEL_24;
    case 464:
      v200 = 469;
      v201 = 468;
      v202 = 465;
      goto LABEL_555;
    case 465:
      v194 = WebCore::borderBlockColorShorthand((WebCore *)this);
      goto LABEL_587;
    case 466:
      started = WebCore::borderBlockEndShorthand((WebCore *)this);
      goto LABEL_408;
    case 467:
      started = WebCore::borderBlockStartShorthand((WebCore *)this);
      goto LABEL_408;
    case 468:
      v194 = WebCore::borderBlockStyleShorthand((WebCore *)this);
      goto LABEL_587;
    case 469:
      v194 = WebCore::borderBlockWidthShorthand((WebCore *)this);
      goto LABEL_587;
    case 470:
      v63 = &WebCore::borderBottomShorthand(void)::borderBottomProperties;
      v64 = 0x1D600000003;
      goto LABEL_112;
    case 471:
      v6 = &WebCore::borderColorShorthand(void)::borderColorProperties;
      v7 = 0x1D700000004;
      goto LABEL_5;
    case 472:
    case 510:
    case 542:
    case 548:
      WebCore::CSSPropertyParser::consumeBorderImage((uint64_t)this, (int)a2, (int)a3);
      return;
    case 473:
      v200 = 478;
      v201 = 477;
      v202 = 474;
LABEL_555:
      WebCore::CSSPropertyParser::consumeBorderShorthand((uint64_t)this, v200, v201, v202, (int)a3);
      return;
    case 474:
      v194 = WebCore::borderInlineColorShorthand((WebCore *)this);
      goto LABEL_587;
    case 475:
      started = WebCore::borderInlineEndShorthand((WebCore *)this);
      goto LABEL_408;
    case 476:
      started = WebCore::borderInlineStartShorthand((WebCore *)this);
      goto LABEL_408;
    case 477:
      v194 = WebCore::borderInlineStyleShorthand((WebCore *)this);
      goto LABEL_587;
    case 478:
      v194 = WebCore::borderInlineWidthShorthand((WebCore *)this);
      goto LABEL_587;
    case 479:
      v63 = &WebCore::borderLeftShorthand(void)::borderLeftProperties;
      v64 = 0x1DF00000003;
      goto LABEL_112;
    case 480:
    case 543:
      v252 = 0u;
      v253[0] = 0u;
      *(_OWORD *)v250 = 0u;
      v251[0] = 0u;
      if (WebCore::CSSPropertyParserHelpers::consumeRadii((uint64_t)&v252, (uint64_t *)v250, (__int128 **)this, *((unsigned __int8 *)this[2] + 48), (_DWORD)a2 == 543))
      {
        v16 = v252;
        *(_QWORD *)&v252 = 0;
        v17 = v250[0];
        v250[0] = 0;
        v18 = WTF::fastCompactMalloc((WTF *)0x18);
        *(_DWORD *)v18 = 2;
        v19 = (*(unsigned __int8 *)(v18 + 6) << 16) & 0xFC0000;
        *(_BYTE *)(v18 + 7) = 1;
        *(_QWORD *)(v18 + 8) = v16;
        *(_QWORD *)(v18 + 16) = v17;
        *(_WORD *)(v18 + 4) = -18432;
        *(_BYTE *)(v18 + 6) = (v19 | 0x10000u) >> 16;
        v247 = (int *)v18;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 383, 480, &v247, (int)a3, 0);
        if (v247)
        {
          if (*v247 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v247, v20);
          else
            *v247 -= 2;
        }
        v21 = *((_QWORD *)&v252 + 1);
        *((_QWORD *)&v252 + 1) = 0;
        v22 = v250[1];
        v250[1] = 0;
        v23 = WTF::fastCompactMalloc((WTF *)0x18);
        *(_DWORD *)v23 = 2;
        v24 = (((*(unsigned __int8 *)(v23 + 6) >> 2) & 0x3F) << 18) | 0x1B800;
        *(_BYTE *)(v23 + 7) = 1;
        *(_QWORD *)(v23 + 8) = v21;
        *(_QWORD *)(v23 + 16) = v22;
        *(_WORD *)(v23 + 4) = -18432;
        *(_BYTE *)(v23 + 6) = BYTE2(v24);
        v247 = (int *)v23;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 384, 480, &v247, (int)a3, 0);
        if (v247)
        {
          if (*v247 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v247, v25);
          else
            *v247 -= 2;
        }
        v26 = *(_QWORD *)&v253[0];
        *(_QWORD *)&v253[0] = 0;
        v27 = *(_QWORD *)&v251[0];
        *(_QWORD *)&v251[0] = 0;
        v28 = WTF::fastCompactMalloc((WTF *)0x18);
        *(_DWORD *)v28 = 2;
        v29 = (((*(unsigned __int8 *)(v28 + 6) >> 2) & 0x3F) << 18) | 0x1B800;
        *(_BYTE *)(v28 + 7) = 1;
        *(_QWORD *)(v28 + 8) = v26;
        *(_QWORD *)(v28 + 16) = v27;
        *(_WORD *)(v28 + 4) = -18432;
        *(_BYTE *)(v28 + 6) = BYTE2(v29);
        v247 = (int *)v28;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 363, 480, &v247, (int)a3, 0);
        if (v247)
        {
          if (*v247 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v247, v30);
          else
            *v247 -= 2;
        }
        v31 = *((_QWORD *)&v253[0] + 1);
        *((_QWORD *)&v253[0] + 1) = 0;
        v32 = *((_QWORD *)&v251[0] + 1);
        *((_QWORD *)&v251[0] + 1) = 0;
        v33 = WTF::fastCompactMalloc((WTF *)0x18);
        *(_DWORD *)v33 = 2;
        v34 = (((*(unsigned __int8 *)(v33 + 6) >> 2) & 0x3F) << 18) | 0x1B800;
        *(_BYTE *)(v33 + 7) = 1;
        *(_QWORD *)(v33 + 8) = v31;
        *(_QWORD *)(v33 + 16) = v32;
        *(_WORD *)(v33 + 4) = -18432;
        *(_BYTE *)(v33 + 6) = BYTE2(v34);
        v247 = (int *)v33;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 362, 480, &v247, (int)a3, 0);
        if (v247)
        {
          if (*v247 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v247, a2);
          else
            *v247 -= 2;
        }
      }
      v35 = (_DWORD *)*((_QWORD *)&v251[0] + 1);
      *((_QWORD *)&v251[0] + 1) = 0;
      if (v35)
      {
        if (*v35 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, a2);
        else
          *v35 -= 2;
      }
      v36 = *(_DWORD **)&v251[0];
      *(_QWORD *)&v251[0] = 0;
      if (v36)
      {
        if (*v36 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, a2);
        else
          *v36 -= 2;
      }
      v37 = v250[1];
      v250[1] = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, a2);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = v250[0];
      v250[0] = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, a2);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = (_DWORD *)*((_QWORD *)&v253[0] + 1);
      *((_QWORD *)&v253[0] + 1) = 0;
      if (v39)
      {
        if (*v39 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, a2);
        else
          *v39 -= 2;
      }
      v40 = *(_DWORD **)&v253[0];
      *(_QWORD *)&v253[0] = 0;
      if (v40)
      {
        if (*v40 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, a2);
        else
          *v40 -= 2;
      }
      v41 = (WebCore *)*((_QWORD *)&v252 + 1);
      *((_QWORD *)&v252 + 1) = 0;
      if (!v41)
        goto LABEL_62;
      if (*(_DWORD *)v41 == 2)
        goto LABEL_721;
      *(_DWORD *)v41 -= 2;
      goto LABEL_62;
    case 481:
      started = WebCore::borderRightShorthand((WebCore *)this);
      goto LABEL_408;
    case 482:
      WebCore::CSSPropertyParser::consumeBorderSpacing((WebCore::CSSPropertyParser *)this, (int)a3);
      return;
    case 483:
      v6 = &WebCore::borderStyleShorthand(void)::borderStyleProperties;
      v7 = 0x1E300000004;
      goto LABEL_5;
    case 484:
      v63 = &WebCore::borderTopShorthand(void)::borderTopProperties;
      v64 = 0x1E400000003;
      goto LABEL_112;
    case 485:
      v6 = &WebCore::borderWidthShorthand(void)::borderWidthProperties;
      v7 = 0x1E500000004;
      goto LABEL_5;
    case 486:
      started = WebCore::columnRuleShorthand((WebCore *)this);
      goto LABEL_408;
    case 487:
      WebCore::CSSPropertyParser::consumeColumns((__int128 **)this, a3);
      return;
    case 488:
      WebCore::CSSPropertyParser::consumeContainIntrinsicSizeShorthand((WebCore::CSSPropertyParser *)this, (int)a3);
      return;
    case 489:
      WebCore::CSSPropertyParser::consumeContainerShorthand((__int128 **)this, a3);
      return;
    case 490:
      v68 = (__int128 *)*this;
      v67 = (__int128 *)this[1];
      if (*this >= (WebCore::CSSParserTokenRange *)v67)
      {
        v68 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v68 & 0x3F) != 0)
      {
        v69 = *this;
      }
      else
      {
        v156 = *((_DWORD *)v68 + 4);
        if (v156 < 0)
        {
          v156 = WebCore::cssValueKeywordID(*((_QWORD *)v68 + 1), *((unsigned int *)v68 + 1) | ((unint64_t)((*(_DWORD *)v68 >> 22) & 1) << 32));
          *((_DWORD *)v68 + 4) = v156;
          v67 = (__int128 *)this[1];
        }
        v69 = *this;
        if ((unsigned __int16)v156 == 6)
        {
          WebCore::staticCSSValuePool[4664] += 2;
          if (v69 == (WebCore::CSSParserTokenRange *)v67)
          {
            v158 = 1;
            v157 = v67;
            {
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
              v157 = (__int128 *)*this;
            }
          }
          else
          {
            v157 = (__int128 *)((char *)v69 + 24);
            *this = (WebCore::CSSParserTokenRange *)((char *)v69 + 24);
          }
          while (1)
          {
            if (v157 < v67 || (v158 & 1) != 0)
            {
              v159 = v157 >= v67 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v157;
              v160 = *(_DWORD *)v159;
            }
            else
            {
              v160 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v160;
              v158 = 1;
              v157 = (__int128 *)*this;
            }
            if ((v160 & 0x3F) != 0x10)
              break;
            v157 = (__int128 *)((char *)v157 + 24);
            *this = (WebCore::CSSParserTokenRange *)v157;
          }
          if (v157 != v67)
          {
            v60 = &WebCore::staticCSSValuePool[4664];
            goto LABEL_230;
          }
          v60 = &WebCore::staticCSSValuePool[4664];
          v143 = 0.0;
          v142 = 0.0;
          goto LABEL_350;
        }
      }
      if (v69 == (WebCore::CSSParserTokenRange *)v67)
        return;
      *(_QWORD *)&v252 = 0;
      v250[0] = 0;
      v70 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve((__int128 **)this, (uint64_t *)&v252, (uint64_t)v250, 0x10100000000));
      v71 = (char)a2;
      if (v250[0])
        WTF::fastFree((WebCore *)((char *)v250[0] - 16), a2);
      if ((_QWORD)v252)
        WTF::fastFree((WTF *)(v252 - 16), a2);
      if (v71)
      {
        v72 = v70;
        if (v70 < 0.0)
          return;
        v60 = 0;
      }
      else
      {
        v163 = (unsigned int *)*this;
        if (*this >= this[1])
        {
          v163 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        v164 = WebCore::CSSParserToken::id(v163);
        if (!WebCore::CSSPropertyParserHelpers::isFlexBasisIdent(v164)
          || (WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v165, (int **)&v252),
              (v60 = (int *)v252) == 0))
        {
          WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)this[2] + 48), 1u, 1, 0, 0, 0, (uint64_t *)&v252);
          v60 = (int *)v252;
        }
        v72 = -1.0;
      }
      v73 = *this;
      if (*this == this[1])
      {
        v76 = -1.0;
      }
      else
      {
        *(_QWORD *)&v252 = 0;
        v250[0] = 0;
        v74 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve((__int128 **)this, (uint64_t *)&v252, (uint64_t)v250, 0x10100000000));
        v75 = (char)a2;
        if (v250[0])
          WTF::fastFree((WebCore *)((char *)v250[0] - 16), a2);
        if ((_QWORD)v252)
          WTF::fastFree((WTF *)(v252 - 16), a2);
        if (v75)
        {
          v76 = v74;
          if (v74 < 0.0)
            goto LABEL_229;
          if (v72 == -1.0)
          {
            v72 = v74;
            v76 = -1.0;
          }
        }
        else
        {
          v76 = -1.0;
          if (!v60)
          {
            v173 = (unsigned int *)*this;
            if (*this >= this[1])
            {
              v173 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              }
            }
            v174 = WebCore::CSSParserToken::id(v173);
            if (!WebCore::CSSPropertyParserHelpers::isFlexBasisIdent(v174)
              || (WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v175, (int **)&v252),
                  (v60 = (int *)v252) == 0))
            {
              WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)this[2] + 48), 1u, 1, 0, 0, 0, (uint64_t *)&v252);
              v60 = (int *)v252;
            }
            if (*this != this[1])
              goto LABEL_229;
          }
        }
        v73 = *this;
        if (*this != this[1])
        {
          *(_QWORD *)&v252 = 0;
          v250[0] = 0;
          v77 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve((__int128 **)this, (uint64_t *)&v252, (uint64_t)v250, 0x10100000000));
          v78 = (char)a2;
          if (v250[0])
            WTF::fastFree((WebCore *)((char *)v250[0] - 16), a2);
          if ((_QWORD)v252)
            WTF::fastFree((WTF *)(v252 - 16), a2);
          if (v78)
          {
            if (v77 < 0.0)
              goto LABEL_229;
            if (v72 == -1.0)
            {
              v72 = v77;
            }
            else if (v76 == -1.0)
            {
              v76 = v77;
            }
            else
            {
              if (v77 != 0.0)
                goto LABEL_229;
              dword_1ECE88BE8 += 2;
              if (v60)
              {
                if (*v60 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, a2);
                else
                  *v60 -= 2;
                v60 = &dword_1ECE88BE8;
              }
              else
              {
                v60 = &dword_1ECE88BE8;
              }
            }
          }
          else if (!v60)
          {
            v176 = (unsigned int *)*this;
            if (*this >= this[1])
            {
              v176 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              }
            }
            v177 = WebCore::CSSParserToken::id(v176);
            if (!WebCore::CSSPropertyParserHelpers::isFlexBasisIdent(v177)
              || (WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v178, (int **)&v252),
                  (v60 = (int *)v252) == 0))
            {
              WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *((unsigned __int8 *)this[2] + 48), 1u, 1, 0, 0, 0, (uint64_t *)&v252);
              v60 = (int *)v252;
            }
          }
          v79 = *this;
          v73 = this[1];
LABEL_339:
          if (v72 == -1.0)
            v142 = 1.0;
          else
            v142 = v72;
          if (v76 == -1.0)
            v143 = 1.0;
          else
            v143 = v76;
          if (!v60)
          {
            v60 = &WebCore::staticCSSValuePool[1040];
            dword_1ECE89BE8 += 2;
          }
          if (v79 == v73)
          {
            v144 = 3.40282347e38;
            if (v142 >= 3.40282347e38 || (v144 = -3.40282347e38, v142 <= -3.40282347e38))
            {
LABEL_351:
              if ((int)v144 <= 0xFF && *(_QWORD *)&v144 == COERCE__INT64((double)(int)v144))
              {
                v147 = &WebCore::staticCSSValuePool[4 * (int)v144 + 2064];
                *v147 += 2;
              }
              else
              {
                v147 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
                *v147 = 2;
                v148 = *((_BYTE *)v147 + 6);
                *((_WORD *)v147 + 2) = 1;
                *((_BYTE *)v147 + 6) = v148 & 0xFC;
                *((double *)v147 + 1) = v144;
              }
              *(_QWORD *)&v252 = v147;
              WebCore::CSSPropertyParser::addProperty((uint64_t)this, 120, 490, (int **)&v252, (int)a3, 0);
              if ((_QWORD)v252)
              {
                if (*(_DWORD *)v252 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v149);
                else
                  *(_DWORD *)v252 -= 2;
              }
              v150 = 3.40282347e38;
              if (v143 < 3.40282347e38)
              {
                v150 = -3.40282347e38;
                if (v143 > -3.40282347e38)
                {
                  v151 = v143;
                  v150 = v151;
                }
              }
              if ((int)v150 <= 0xFF && *(_QWORD *)&v150 == COERCE__INT64((double)(int)v150))
              {
                v153 = &WebCore::staticCSSValuePool[4 * (int)v150 + 2064];
                *v153 += 2;
              }
              else
              {
                v153 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
                *v153 = 2;
                v154 = *((_BYTE *)v153 + 6);
                *((_WORD *)v153 + 2) = 1;
                *((_BYTE *)v153 + 6) = v154 & 0xFC;
                *((double *)v153 + 1) = v150;
              }
              *(_QWORD *)&v252 = v153;
              WebCore::CSSPropertyParser::addProperty((uint64_t)this, 121, 490, (int **)&v252, (int)a3, 0);
              if ((_QWORD)v252)
              {
                if (*(_DWORD *)v252 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v155);
                else
                  *(_DWORD *)v252 -= 2;
              }
              *(_QWORD *)&v252 = v60;
              v12 = (WebCore::CSSPropertyParsing *)this;
              v13 = 118;
              v14 = 490;
              goto LABEL_24;
            }
LABEL_350:
            v145 = v142;
            v144 = v145;
            goto LABEL_351;
          }
LABEL_229:
          if (!v60)
            return;
LABEL_230:
          v82 = *v60 - 2;
          if (*v60 != 2)
          {
LABEL_179:
            *v60 = v82;
            return;
          }
          v15 = (WebCore *)v60;
          goto LABEL_382;
        }
      }
      v79 = v73;
      goto LABEL_339;
    case 491:
      started = WebCore::flexFlowShorthand((WebCore *)this);
      goto LABEL_408;
    case 492:
      v128 = (__int128 *)*this;
      if (*this >= this[1])
      {
        v128 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v128 & 0x3F) == 0)
      {
        v179 = *((_DWORD *)v128 + 4);
        if (v179 < 0)
        {
          v179 = WebCore::cssValueKeywordID(*((_QWORD *)v128 + 1), *((unsigned int *)v128 + 1) | ((unint64_t)((*(_DWORD *)v128 >> 22) & 1) << 32));
          *((_DWORD *)v128 + 4) = v179;
        }
        if ((unsigned __int16)v179 - 16 <= 0x19)
        {
          v180 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
          v181 = WebCore::CSSParserToken::id((unsigned int *)v180);
          if (*this == this[1])
          {
            v182 = v181;
            v183 = (unsigned __int16 *)WebCore::fontShorthand((WebCore *)v181);
            if (v184)
            {
              if (v182 > 0x48D)
              {
                __break(0xC471u);
                JUMPOUT(0x1940FF8D8);
              }
              v185 = v183;
              v186 = 2 * v184;
              do
              {
                v187 = *v185;
                WebCore::staticCSSValuePool[4 * v182 + 3088] += 2;
                *(_QWORD *)&v252 = &WebCore::staticCSSValuePool[4 * v182 + 3088];
                WebCore::CSSPropertyParser::addProperty((uint64_t)this, v187, 492, (int **)&v252, (int)a3, 1);
                if ((_QWORD)v252)
                {
                  if (*(_DWORD *)v252 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v188);
                  else
                    *(_DWORD *)v252 -= 2;
                }
                ++v185;
                v186 -= 2;
              }
              while (v186);
            }
          }
          return;
        }
      }
      v129 = 0;
      v240 = 0;
      v241 = 0;
      v130 = 0;
      v131 = 0;
      v132 = 0;
      v133 = 0;
      v252 = *(_OWORD *)this;
      v134 = 4;
      while (1)
      {
        if ((_QWORD)v252 == *((_QWORD *)&v252 + 1))
        {
LABEL_609:
          if ((_QWORD)v252 != *((_QWORD *)&v252 + 1))
          {
            WebCore::CSSPropertyParsing::consumeFontSize((__int128 **)&v252, this[2], (uint64_t *)v250);
            v216 = v250[0];
            if (v250[0])
            {
              if ((_QWORD)v252 != *((_QWORD *)&v252 + 1))
              {
                if (!WebCore::CSSPropertyParserHelpers::consumeSlashIncludingWhitespace((__int128 **)&v252, a2))
                {
                  v217 = 0;
                  goto LABEL_614;
                }
                WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90>((uint64_t)&v252, (int **)v250);
                v237 = v250[0];
                v250[0] = 0;
                if (v237)
                {
                  if (*(_DWORD *)v237 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v237, a2);
                  else
                    *(_DWORD *)v237 -= 2;
                  v217 = 0;
LABEL_698:
                  if ((_QWORD)v252 == *((_QWORD *)&v252 + 1))
                  {
LABEL_699:
                    v236 = v240;
                    v235 = v241;
                    goto LABEL_666;
                  }
LABEL_614:
                  v218 = WebCore::CSSPropertyParserHelpers::consumeFontFamily((__int128 **)&v252, (uint64_t *)v250);
                  v219 = v250[0];
                  if (!v250[0])
                    goto LABEL_699;
                  if ((_QWORD)v252 == *((_QWORD *)&v252 + 1))
                  {
                    *(_OWORD *)this = v252;
                    v220 = (unsigned __int16 *)WebCore::fontShorthand(v218);
                    v221 = a2;
                    if ((_DWORD)a2)
                    {
                      v222 = v220;
                      v223 = *v220;
                      v250[0] = v130;
                      WebCore::CSSPropertyParser::addProperty((uint64_t)this, v223, 492, (int **)v250, (int)a3, 1);
                      if (v250[0])
                      {
                        if (*(_DWORD *)v250[0] == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], a2);
                        else
                          *(_DWORD *)v250[0] -= 2;
                      }
                      if (v221 != 1)
                      {
                        v224 = v222[1];
                        v250[0] = v241;
                        WebCore::CSSPropertyParser::addProperty((uint64_t)this, v224, 492, (int **)v250, (int)a3, 1);
                        if (v250[0])
                        {
                          if (*(_DWORD *)v250[0] == 2)
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], a2);
                          else
                            *(_DWORD *)v250[0] -= 2;
                        }
                        if (v221 == 2)
                        {
                          v130 = 0;
                          v235 = 0;
                          v236 = v240;
                        }
                        else
                        {
                          v225 = v222[2];
                          v250[0] = v240;
                          WebCore::CSSPropertyParser::addProperty((uint64_t)this, v225, 492, (int **)v250, (int)a3, 1);
                          if (v250[0])
                          {
                            if (*(_DWORD *)v250[0] == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], a2);
                            else
                              *(_DWORD *)v250[0] -= 2;
                          }
                          if (v221 == 3)
                          {
                            v130 = 0;
                            v235 = 0;
                            v236 = 0;
                          }
                          else
                          {
                            v226 = v222[3];
                            v250[0] = v129;
                            WebCore::CSSPropertyParser::addProperty((uint64_t)this, v226, 492, (int **)v250, (int)a3, 1);
                            if (v250[0])
                            {
                              if (*(_DWORD *)v250[0] == 2)
                                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], a2);
                              else
                                *(_DWORD *)v250[0] -= 2;
                            }
                            if (v221 == 4)
                            {
                              v130 = 0;
                              v235 = 0;
                              v236 = 0;
                              v129 = 0;
                            }
                            else
                            {
                              v227 = v222[4];
                              v250[0] = v216;
                              WebCore::CSSPropertyParser::addProperty((uint64_t)this, v227, 492, (int **)v250, (int)a3, 1);
                              if (v250[0])
                              {
                                if (*(_DWORD *)v250[0] == 2)
                                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], a2);
                                else
                                  *(_DWORD *)v250[0] -= 2;
                              }
                              if (v221 == 5)
                              {
                                v130 = 0;
                                v235 = 0;
                                v236 = 0;
                                v129 = 0;
                                v216 = 0;
                              }
                              else
                              {
                                v228 = v222[5];
                                v250[0] = v217;
                                WebCore::CSSPropertyParser::addProperty((uint64_t)this, v228, 492, (int **)v250, (int)a3, 1);
                                if (v250[0])
                                {
                                  if (*(_DWORD *)v250[0] == 2)
                                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], a2);
                                  else
                                    *(_DWORD *)v250[0] -= 2;
                                }
                                if (v221 != 6)
                                {
                                  v229 = v222[6];
                                  v250[0] = v219;
                                  WebCore::CSSPropertyParser::addProperty((uint64_t)this, v229, 492, (int **)v250, (int)a3, 1);
                                  if (v250[0])
                                  {
                                    if (*(_DWORD *)v250[0] == 2)
                                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], v230);
                                    else
                                      *(_DWORD *)v250[0] -= 2;
                                  }
                                  v231 = v221 - 7;
                                  if (v221 != 7)
                                  {
                                    v232 = v222 + 7;
                                    do
                                    {
                                      v233 = *v232++;
                                      v250[0] = 0;
                                      WebCore::CSSPropertyParser::addProperty((uint64_t)this, v233, 492, (int **)v250, (int)a3, 1);
                                      if (v250[0])
                                      {
                                        if (*(_DWORD *)v250[0] == 2)
                                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], v234);
                                        else
                                          *(_DWORD *)v250[0] -= 2;
                                      }
                                      --v231;
                                    }
                                    while (v231);
                                  }
                                  return;
                                }
                                v130 = 0;
                                v235 = 0;
                                v236 = 0;
                                v129 = 0;
                                v216 = 0;
                                v217 = 0;
                              }
                            }
                          }
                        }
                        goto LABEL_664;
                      }
                      v130 = 0;
                    }
                  }
                  v236 = v240;
                  v235 = v241;
LABEL_664:
                  if (*(_DWORD *)v219 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v219, a2);
                  else
                    *(_DWORD *)v219 -= 2;
LABEL_666:
                  if (v217)
                  {
                    if (*(_DWORD *)v217 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v217, a2);
                    else
                      *(_DWORD *)v217 -= 2;
                  }
                  if (v216)
                  {
LABEL_670:
                    if (*(_DWORD *)v216 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v216, a2);
                    else
                      *(_DWORD *)v216 -= 2;
                  }
LABEL_672:
                  if (v129)
                  {
                    if (*(_DWORD *)v129 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v129, a2);
                    else
                      *(_DWORD *)v129 -= 2;
                  }
                  if (v236)
                  {
                    if (*(_DWORD *)v236 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v236, a2);
                    else
                      *(_DWORD *)v236 -= 2;
                  }
                  if (v235)
                  {
                    if (*(_DWORD *)v235 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v235, a2);
                    else
                      *(_DWORD *)v235 -= 2;
                  }
                  if (!v130)
                    return;
                  if (*(_DWORD *)v130 != 2)
                  {
                    *(_DWORD *)v130 -= 2;
                    return;
                  }
                  v15 = v130;
                  goto LABEL_223;
                }
                WebCore::CSSPropertyParsing::consumeLineHeight((__int128 **)&v252, this[2], (uint64_t *)v250);
                v217 = v250[0];
                if (v250[0])
                  goto LABEL_698;
              }
              v236 = v240;
              v235 = v241;
              goto LABEL_670;
            }
          }
          v236 = v240;
          v235 = v241;
          goto LABEL_672;
        }
        WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90>((uint64_t)&v252, (int **)v250);
        v135 = v250[0];
        v250[0] = 0;
        if (v135)
        {
          if (*(_DWORD *)v135 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v135, a2);
          else
            *(_DWORD *)v135 -= 2;
          goto LABEL_307;
        }
        if (!v133
          && (WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStyle((uint64_t)&v252, *((unsigned __int8 *)this[2] + 48), (int **)v250), (v130 = v250[0]) != 0))
        {
          v133 = v250[0];
        }
        else
        {
          if (!v132)
          {
            WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)50>((uint64_t)v250, (uint64_t)&v252);
            v241 = v250[0];
            if (v250[0])
            {
              v132 = v250[0];
              goto LABEL_307;
            }
            v241 = 0;
          }
          if (!v131)
          {
            WebCore::CSSPropertyParserHelpers::consumeFontWeight((__int128 **)&v252, v250);
            v240 = v250[0];
            if (v250[0])
            {
              v131 = v250[0];
              goto LABEL_307;
            }
            v240 = 0;
          }
          if (v129)
            goto LABEL_609;
          WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStretchKeywordValue((__int128 **)&v252, a2, (int **)v250);
          v129 = v250[0];
          if (!v250[0])
            goto LABEL_609;
        }
LABEL_307:
        if (!--v134)
          goto LABEL_609;
      }
    case 493:
      WebCore::CSSPropertyParser::consumeFontSynthesis((unsigned int **)this, (int)a3);
      return;
    case 494:
      WebCore::CSSPropertyParser::consumeFontVariantShorthand((__int128 **)this, a3);
      return;
    case 495:
      WebCore::CSSPropertyParsing::consumeColumnGap((__int128 **)this, this[2], (uint64_t *)&v252);
      WebCore::CSSPropertyParsing::consumeColumnGap((__int128 **)this, this[2], (uint64_t *)v250);
      v60 = (int *)v252;
      if ((_QWORD)v252)
      {
        v65 = (int *)v250[0];
        if (*this == this[1])
        {
          if (!v250[0])
          {
            *(_DWORD *)v252 += 2;
            v65 = v60;
          }
          v247 = v60;
          WebCore::CSSPropertyParser::addProperty((uint64_t)this, 211, 495, &v247, (int)a3, 0);
          if (v247)
          {
            if (*v247 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v247, v66);
            else
              *v247 -= 2;
          }
          v247 = v65;
          WebCore::CSSPropertyParser::addProperty((uint64_t)this, 92, 495, &v247, (int)a3, 0);
          v15 = (WebCore *)v247;
          if (v247)
            goto LABEL_25;
          return;
        }
      }
      else
      {
        v65 = (int *)v250[0];
      }
      if (v65)
      {
        if (*v65 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, a2);
        else
          *v65 -= 2;
      }
      goto LABEL_229;
    case 496:
      WebCore::CSSPropertyParser::consumeGridShorthand((WebCore::CSSPropertyParser *)this, (int)a3);
      return;
    case 497:
      WebCore::CSSPropertyParser::consumeGridAreaShorthand((__int128 **)this, a3);
      return;
    case 498:
    case 499:
      v91 = (unsigned __int16 *)WebCore::shorthandForProperty((int)a2);
      WebCore::CSSPropertyParserHelpers::consumeGridLine((__int128 **)this, v92, (int **)&v252);
      v93 = (WebCore *)v252;
      if (!(_QWORD)v252)
        return;
      v95 = (__int128 *)*this;
      v94 = (__int128 *)this[1];
      if (*this >= (WebCore::CSSParserTokenRange *)v94)
      {
        v95 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v95 & 0x3F) == 6 && *((_WORD *)v95 + 8) == 47)
      {
        v189 = *this;
        if (*this == (WebCore::CSSParserTokenRange *)v94)
        {
          v191 = 1;
          v190 = v94;
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v190 = (__int128 *)*this;
          }
        }
        else
        {
          v190 = (__int128 *)((char *)v189 + 24);
          *this = (WebCore::CSSParserTokenRange *)((char *)v189 + 24);
        }
        while (1)
        {
          if (v190 < v94 || (v191 & 1) != 0)
          {
            if (v190 >= v94)
              v190 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v192 = *(_DWORD *)v190;
          }
          else
          {
            v192 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v192;
            v191 = 1;
          }
          if ((v192 & 0x3F) != 0x10)
            break;
          v190 = (__int128 *)((char *)*this + 24);
          *this = (WebCore::CSSParserTokenRange *)v190;
        }
        WebCore::CSSPropertyParserHelpers::consumeGridLine((__int128 **)this, a2, (int **)v250);
        v93 = v250[0];
        if (!v250[0])
        {
LABEL_62:
          v15 = (WebCore *)v252;
          *(_QWORD *)&v252 = 0;
          if (!v15)
            return;
          goto LABEL_63;
        }
        v94 = (__int128 *)this[1];
      }
      else
      {
        if (((*(unsigned __int16 *)(v252 + 4) | (*(unsigned __int8 *)(v252 + 6) << 16)) & 0x3F87F) != 0x3F)
        {
          v96 = &WebCore::staticCSSValuePool[4664];
          v97 = *v96;
          *v96 += 2;
          if (*this == (WebCore::CSSParserTokenRange *)v94)
          {
            v98 = v93;
            v93 = (WebCore *)&WebCore::staticCSSValuePool[4664];
LABEL_203:
            v99 = *v91;
            *(_QWORD *)&v252 = 0;
            v250[0] = v98;
            WebCore::CSSPropertyParser::addProperty((uint64_t)this, v99, v4, (int **)v250, (int)a3, 0);
            if (v250[0])
            {
              if (*(_DWORD *)v250[0] == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], v100);
              else
                *(_DWORD *)v250[0] -= 2;
            }
            v101 = v91[1];
            v250[0] = v93;
            WebCore::CSSPropertyParser::addProperty((uint64_t)this, v101, v4, (int **)v250, (int)a3, 0);
            if (v250[0])
            {
              if (*(_DWORD *)v250[0] == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], a2);
              else
                *(_DWORD *)v250[0] -= 2;
            }
            goto LABEL_62;
          }
          v93 = (WebCore *)&WebCore::staticCSSValuePool[4664];
          goto LABEL_596;
        }
        *(_DWORD *)v252 += 2;
      }
      if (*this == (WebCore::CSSParserTokenRange *)v94)
      {
        v98 = (WebCore *)v252;
        goto LABEL_203;
      }
      v97 = *(_DWORD *)v93 - 2;
LABEL_596:
      if (v97)
        *(_DWORD *)v93 = v97;
      else
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v93, a2);
      goto LABEL_62;
    case 500:
      WebCore::CSSPropertyParser::consumeGridTemplateShorthand((uint64_t)this, 500, (int)a3);
      return;
    case 501:
      v140 = WebCore::insetShorthand((WebCore *)this);
      goto LABEL_336;
    case 502:
      v194 = WebCore::insetBlockShorthand((WebCore *)this);
      goto LABEL_587;
    case 503:
      v194 = WebCore::insetInlineShorthand((WebCore *)this);
      goto LABEL_587;
    case 504:
      *(_QWORD *)&v252 = 0;
      v250[0] = 0;
      v247 = 0;
      v103 = (__int128 *)*this;
      v102 = this[1];
      if (*this == v102)
      {
        v104 = 0;
        v105 = 0;
        v106 = 0;
        v107 = 0;
LABEL_234:
        *(_QWORD *)&v252 = v106;
        v250[0] = v105;
        v247 = v104;
        v108 = v104 == 0;
        if (!v105)
          ++v108;
        if (v107 <= v108)
        {
          if (v107 == 1)
          {
            if (!v104)
            {
              dword_1ECE8BC48 += 2;
              v247 = &WebCore::staticCSSValuePool[3112];
            }
          }
          else if (v107 == 2)
          {
            v250[0] = 0;
            if (v105)
            {
              if (*(_DWORD *)v105 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v105, a2);
              else
                *(_DWORD *)v105 -= 2;
            }
            dword_1ECE8BC48 += 2;
            v247 = &WebCore::staticCSSValuePool[3112];
            if (v104)
            {
              if (*v104 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v104, a2);
              else
                *v104 -= 2;
            }
          }
          WebCore::CSSPropertyParser::addProperty((uint64_t)this, 156, 504, (int **)&v252, (int)a3, 0);
          WebCore::CSSPropertyParser::addProperty((uint64_t)this, 155, 504, (int **)v250, (int)a3, 0);
          WebCore::CSSPropertyParser::addProperty((uint64_t)this, 157, 504, &v247, (int)a3, 0);
          v104 = v247;
        }
        v247 = 0;
        if (v104)
        {
LABEL_242:
          if (*v104 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v104, a2);
          else
            *v104 -= 2;
        }
        v105 = v250[0];
        goto LABEL_245;
      }
      v104 = 0;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      while (1)
      {
        if (v103 >= (__int128 *)v102)
        {
          v103 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v103 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if ((*(_DWORD *)v103 & 0x3F) != 0)
          goto LABEL_759;
        v136 = *((_DWORD *)v103 + 4);
        if (v136 < 0)
        {
          v136 = WebCore::cssValueKeywordID(*((_QWORD *)v103 + 1), *((unsigned int *)v103 + 1) | ((unint64_t)((*(_DWORD *)v103 >> 22) & 1) << 32));
          *((_DWORD *)v103 + 4) = v136;
        }
        if ((unsigned __int16)v136 != 6)
        {
LABEL_759:
          if (v106 || (WebCore::CSSPropertyParsing::parseStyleProperty(&v242, this, 156, 504, this[2]), !v242))
          {
            if (v105 || (WebCore::CSSPropertyParsing::parseStyleProperty(&v242, this, 155, 504, this[2]), !v242))
            {
              if (v104)
              {
                *(_QWORD *)&v252 = v106;
                v250[0] = v105;
                v247 = 0;
                goto LABEL_242;
              }
              WebCore::CSSPropertyParsing::parseStyleProperty(&v242, this, 157, 504, this[2]);
              v104 = (int *)v242;
              if (!v242)
              {
                *(_QWORD *)&v252 = v106;
LABEL_245:
                v250[0] = 0;
                if (v105)
                {
                  if (*(_DWORD *)v105 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v105, a2);
                  else
                    *(_DWORD *)v105 -= 2;
                }
                v15 = (WebCore *)v252;
                if (!(_QWORD)v252)
                  return;
LABEL_63:
                v42 = *(_DWORD *)v15 - 2;
                if (*(_DWORD *)v15 != 2)
                {
LABEL_64:
                  *(_DWORD *)v15 = v42;
                  return;
                }
                goto LABEL_223;
              }
            }
            else
            {
              v105 = v242;
            }
          }
          else
          {
            v106 = (uint64_t)v242;
          }
        }
        else
        {
          *(_QWORD *)&v252 = v106;
          v250[0] = v105;
          v247 = v104;
          v137 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)this, a2);
          if (v137 >= 0x10000)
          {
            if ((unsigned __int16)v137 >= 0x48Eu)
            {
              __break(0xC471u);
              JUMPOUT(0x1940FF8B8);
            }
            v138 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v137 + 3088];
            v139 = *v138;
            *v138 += 2;
            if (v139)
              *v138 = v139;
            else
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v138, a2);
          }
          ++v107;
        }
        v103 = (__int128 *)*this;
        v102 = this[1];
        if (*this == v102)
          goto LABEL_234;
      }
    case 505:
      v6 = &WebCore::marginShorthand(void)::marginProperties;
      v7 = 0x1F900000004;
      goto LABEL_5;
    case 506:
      v61 = &WebCore::marginBlockShorthand(void)::marginBlockProperties;
      v62 = 0x1FA00000002;
      goto LABEL_109;
    case 507:
      v61 = &WebCore::marginInlineShorthand(void)::marginInlineProperties;
      v62 = 0x1FB00000002;
      goto LABEL_109;
    case 508:
      WebCore::CSSPropertyParsing::parseStyleProperty(&v252, this, 161, 0, this[2]);
      v197 = (WebCore *)v252;
      if (!(_QWORD)v252)
        return;
      if (*this != this[1])
        goto LABEL_62;
      *(_QWORD *)&v252 = 0;
      *(_DWORD *)v197 += 2;
      v250[0] = v197;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 161, 508, (int **)v250, (int)a3, 0);
      if (v250[0])
      {
        if (*(_DWORD *)v250[0] == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], v198);
        else
          *(_DWORD *)v250[0] -= 2;
      }
      *(_DWORD *)v197 += 2;
      v250[0] = v197;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 160, 508, (int **)v250, (int)a3, 0);
      if (v250[0])
      {
        if (*(_DWORD *)v250[0] == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], v199);
        else
          *(_DWORD *)v250[0] -= 2;
      }
      *(_DWORD *)v197 += 2;
      v250[0] = v197;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 159, 508, (int **)v250, (int)a3, 0);
      if (v250[0])
      {
        if (*(_DWORD *)v250[0] == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], a2);
        else
          *(_DWORD *)v250[0] -= 2;
      }
      if (*(_DWORD *)v197 == 2)
      {
        v41 = v197;
LABEL_721:
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, a2);
      }
      else
      {
        *(_DWORD *)v197 -= 2;
      }
      goto LABEL_62;
    case 509:
      *(_QWORD *)&v252 = WebCore::shorthandForProperty(509);
      *((_QWORD *)&v252 + 1) = v203;
      v204 = (WebCore *)WebCore::CSSPropertyParser::consumeBackgroundShorthand(this, (uint64_t)&v252, a3);
      if ((_DWORD)v204)
      {
        v205 = (unsigned __int16 *)WebCore::maskBorderShorthand(v204);
        if (v206)
        {
          v207 = v205;
          v208 = 2 * v206;
          do
          {
            v209 = *v207;
            *(_QWORD *)&v252 = 0;
            WebCore::CSSPropertyParser::addProperty((uint64_t)this, v209, 509, (int **)&v252, (int)a3, 0);
            if ((_QWORD)v252)
            {
              if (*(_DWORD *)v252 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v210);
              else
                *(_DWORD *)v252 -= 2;
            }
            ++v207;
            v208 -= 2;
          }
          while (v208);
        }
      }
      return;
    case 512:
      WebCore::CSSPropertyParser::consumeOffset((__int128 **)this, (int)a3);
      return;
    case 513:
      v63 = &WebCore::outlineShorthand(void)::outlineProperties;
      v64 = 0x20100000003;
LABEL_112:
      *(_QWORD *)&v252 = v63;
      *((_QWORD *)&v252 + 1) = v64;
      goto LABEL_113;
    case 514:
      v44 = (__int128 *)*this;
      v43 = this[1];
      if (*this == v43)
      {
        v46 = 1;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        v45 = (__int128 *)*this;
        v44 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v45 = (__int128 *)((char *)v44 + 24);
        *this = (WebCore::CSSParserTokenRange *)((char *)v44 + 24);
      }
      while (1)
      {
        if (v45 < (__int128 *)v43 || (v46 & 1) != 0)
        {
          if (v45 >= (__int128 *)v43)
            v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v47 = *(_DWORD *)v45;
        }
        else
        {
          v47 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v47;
          v46 = 1;
        }
        if ((v47 & 0x3F) != 0x10)
          break;
        v45 = (__int128 *)((char *)*this + 24);
        *this = (WebCore::CSSParserTokenRange *)v45;
      }
      if ((*(_DWORD *)v44 & 0x3F) != 0)
      {
        LOWORD(v48) = 0;
      }
      else
      {
        v48 = *((_DWORD *)v44 + 4);
        if (v48 < 0)
        {
          v48 = WebCore::cssValueKeywordID(*((_QWORD *)v44 + 1), *((unsigned int *)v44 + 1) | ((unint64_t)((*(_DWORD *)v44 >> 22) & 1) << 32));
          *((_DWORD *)v44 + 4) = v48;
        }
      }
      WebCore::CSSPropertyParsing::isKeywordValidForStyleProperty(193, (unsigned __int16)v48, (uint64_t)this[2]);
      if (!v49)
        return;
      if (*this == this[1])
      {
        v50 = (unsigned __int16)(v48 - 891) <= 1u ? 394 : v48;
      }
      else
      {
        v193 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
        v50 = v48;
        LOWORD(v48) = (unsigned __int16)WebCore::CSSParserToken::id((unsigned int *)v193);
      }
      WebCore::CSSPropertyParsing::isKeywordValidForStyleProperty(193, (unsigned __int16)v48, (uint64_t)this[2]);
      if (!v51 || *this != this[1])
        return;
      if (v50 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1940FF72CLL);
      }
      v52 = &WebCore::staticCSSValuePool[4 * v50];
      v52[3088] += 2;
      *(_QWORD *)&v252 = v52 + 3088;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 192, 514, (int **)&v252, (int)a3, 0);
      if ((_QWORD)v252)
      {
        if (*(_DWORD *)v252 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v252, v53);
        else
          *(_DWORD *)v252 -= 2;
      }
      if ((unsigned __int16)v48 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1940FF74CLL);
      }
      WebCore::staticCSSValuePool[4 * (unsigned __int16)v48 + 3088] += 2;
      *(_QWORD *)&v252 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v48 + 3088];
      v12 = (WebCore::CSSPropertyParsing *)this;
      v13 = 193;
      v14 = 514;
      goto LABEL_24;
    case 515:
      WebCore::CSSPropertyParser::consumeOverscrollBehaviorShorthand((WebCore::CSSPropertyParser *)this, (int)a3);
      return;
    case 516:
      v6 = &WebCore::paddingShorthand(void)::paddingProperties;
      v7 = 0x20400000004;
LABEL_5:
      *(_QWORD *)&v252 = v6;
      *((_QWORD *)&v252 + 1) = v7;
      goto LABEL_6;
    case 517:
      v61 = &WebCore::paddingBlockShorthand(void)::paddingBlockProperties;
      v62 = 0x20500000002;
      goto LABEL_109;
    case 518:
      v61 = &WebCore::paddingInlineShorthand(void)::paddingInlineProperties;
      v62 = 0x20600000002;
LABEL_109:
      *(_QWORD *)&v252 = v61;
      *((_QWORD *)&v252 + 1) = v62;
      goto LABEL_110;
    case 519:
    case 520:
    case 521:
    case 544:
    case 545:
    case 546:
      WebCore::CSSPropertyParser::consumeLegacyBreakProperty((uint64_t)this, a2, (int)a3);
      return;
    case 522:
      WebCore::CSSPropertyParser::consumePerspectiveOrigin((WebCore::CSSPropertyParser *)this, (int)a3);
      return;
    case 523:
      WebCore::CSSPropertyParser::consumePlaceContentShorthand((__int128 **)this, (int)a3);
      return;
    case 524:
      WebCore::CSSPropertyParser::consumePlaceItemsShorthand((__int128 **)this, (int)a3);
      return;
    case 525:
      WebCore::CSSPropertyParser::consumePlaceSelfShorthand((__int128 **)this, (int)a3);
      return;
    case 526:
      v140 = WebCore::scrollMarginShorthand((WebCore *)this);
      goto LABEL_336;
    case 527:
      v194 = WebCore::scrollMarginBlockShorthand((WebCore *)this);
      goto LABEL_587;
    case 528:
      v194 = WebCore::scrollMarginInlineShorthand((WebCore *)this);
      goto LABEL_587;
    case 529:
      v140 = WebCore::scrollPaddingShorthand((WebCore *)this);
LABEL_336:
      *(_QWORD *)&v252 = v140;
      *((_QWORD *)&v252 + 1) = v141;
LABEL_6:
      WebCore::CSSPropertyParser::consume4ValueShorthand(this, (unsigned __int16 **)&v252, (int)a3);
      return;
    case 530:
      v194 = WebCore::scrollPaddingBlockShorthand((WebCore *)this);
      goto LABEL_587;
    case 531:
      v194 = WebCore::scrollPaddingInlineShorthand((WebCore *)this);
LABEL_587:
      *(_QWORD *)&v252 = v194;
      *((_QWORD *)&v252 + 1) = v195;
LABEL_110:
      WebCore::CSSPropertyParser::consume2ValueShorthand(this, (unsigned __int16 **)&v252, (int)a3);
      return;
    case 532:
      WebCore::CSSPropertyParser::consumeScrollTimelineShorthand((__int128 **)this, (int)a3);
      return;
    case 533:
      WebCore::CSSPropertyParserHelpers::consumeTextDecorationLine((__int128 **)this, a2, (int **)&v252);
      v15 = (WebCore *)v252;
      if (!(_QWORD)v252)
        return;
      if (*this != this[1])
      {
        *(_QWORD *)&v252 = 0;
        goto LABEL_63;
      }
      *(_QWORD *)&v252 = 0;
      v250[0] = v15;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 255, 533, (int **)v250, (int)a3, 0);
      if (v250[0])
      {
        if (*(_DWORD *)v250[0] == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v250[0], a2);
        else
          *(_DWORD *)v250[0] -= 2;
      }
      v15 = (WebCore *)v252;
      *(_QWORD *)&v252 = 0;
      if (!v15)
        return;
      goto LABEL_63;
    case 534:
      WebCore::CSSPropertyParser::consumeTextDecorationSkip((WebCore::CSSPropertyParser *)this, (int)a3);
      return;
    case 535:
      started = WebCore::textEmphasisShorthand((WebCore *)this);
      goto LABEL_408;
    case 536:
      WebCore::CSSPropertyParser::consumeTextWrapShorthand((WebCore::CSSPropertyParser *)this, (int)a3);
      return;
    case 537:
      WebCore::CSSPropertyParser::consumeTransformOrigin((WebCore::CSSPropertyParser *)this, (int)a3);
      return;
    case 538:
      *(_QWORD *)&v252 = &WebCore::transitionShorthandForParsing(void)::transitionProperties;
      *((_QWORD *)&v252 + 1) = 0x21A00000005;
LABEL_66:
      WebCore::CSSPropertyParser::consumeAnimationShorthand((WebCore::CSSPropertyParsing *)this, (WebCore::CSSParserTokenRange *)&v252, (int)a3);
      return;
    case 539:
      WebCore::CSSPropertyParser::consumeViewTimelineShorthand((__int128 **)this, (int)a3);
      return;
    case 540:
      *(_QWORD *)&v252 = 0;
      v55 = (__int128 *)*this;
      v54 = this[1];
      if (*this >= v54)
      {
        v55 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_BYTE *)v55 & 0x3F) != 0)
        goto LABEL_100;
      v83 = (__int128 *)*this;
      if (*this >= v54)
      {
        v83 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v83 & 0x3F) != 0)
        goto LABEL_100;
      v84 = *((_DWORD *)v83 + 4);
      if (v84 < 0)
      {
        v84 = WebCore::cssValueKeywordID(*((_QWORD *)v83 + 1), *((unsigned int *)v83 + 1) | ((unint64_t)((*(_DWORD *)v83 >> 22) & 1) << 32));
        *((_DWORD *)v83 + 4) = v84;
      }
      if ((unsigned __int16)v84 - 485 >= 3 && (unsigned __int16)v84 != 90)
      {
LABEL_100:
        v56 = 0;
        v57 = 0;
        v58 = 0;
      }
      else
      {
        v86 = (__int128 *)*this;
        v85 = this[1];
        if (*this == v85)
        {
          v88 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          v87 = (__int128 *)*this;
          v86 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v87 = (__int128 *)((char *)v86 + 24);
          *this = (WebCore::CSSParserTokenRange *)((char *)v86 + 24);
        }
        while (1)
        {
          if (v87 < (__int128 *)v85 || (v88 & 1) != 0)
          {
            if (v87 >= (__int128 *)v85)
              v87 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v89 = *(_DWORD *)v87;
          }
          else
          {
            v89 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v89;
            v88 = 1;
          }
          if ((v89 & 0x3F) != 0x10)
            break;
          v87 = (__int128 *)((char *)*this + 24);
          *this = (WebCore::CSSParserTokenRange *)v87;
        }
        if ((*(_DWORD *)v86 & 0x3F) != 0)
        {
          LOWORD(v90) = 0;
        }
        else
        {
          v90 = *((_DWORD *)v86 + 4);
          if (v90 < 0)
          {
            v90 = WebCore::cssValueKeywordID(*((_QWORD *)v86 + 1), *((unsigned int *)v86 + 1) | ((unint64_t)((*(_DWORD *)v86 >> 22) & 1) << 32));
            *((_DWORD *)v86 + 4) = v90;
          }
        }
        v58 = v90 & 0xFF00;
        v56 = v90;
        v57 = 0x10000;
      }
      if (HIWORD(v57))
      {
        v80 = (unsigned __int16)(v57 | v56 | v58);
        if (v80 == 485)
        {
          v60 = &WebCore::staticCSSValuePool[5368];
          *v60 += 2;
          *(_QWORD *)&v252 = v60;
          v81 = 0x1394u;
        }
        else
        {
          switch(v80)
          {
            case 90:
              v109 = 0x12F0u;
              break;
            case 487:
              v109 = 0x14F8u;
              break;
            case 486:
              v109 = 0x14FCu;
              break;
            default:
              goto LABEL_177;
          }
          v60 = &WebCore::staticCSSValuePool[v109];
          WebCore::staticCSSValuePool[v109] += 2;
          *(_QWORD *)&v252 = &WebCore::staticCSSValuePool[v109];
          v81 = 0x1768u;
        }
        v59 = (WebCore *)&WebCore::staticCSSValuePool[v81];
        WebCore::staticCSSValuePool[v81] += 2;
LABEL_168:
        v250[0] = v59;
        if (*this == this[1])
        {
          if (!v60)
          {
            WebCore::staticCSSValuePool[4848] += 2;
            *(_QWORD *)&v252 = &WebCore::staticCSSValuePool[4848];
          }
          if (!v59)
          {
            WebCore::staticCSSValuePool[5992] += 2;
            v250[0] = (WebCore *)&WebCore::staticCSSValuePool[5992];
          }
          WebCore::CSSPropertyParser::addProperty((uint64_t)this, 294, 540, (int **)&v252, (int)a3, 0);
          WebCore::CSSPropertyParser::addProperty((uint64_t)this, 270, 540, (int **)v250, (int)a3, 0);
          v59 = v250[0];
        }
        if (!v59)
        {
LABEL_177:
          v60 = (int *)v252;
          if (!(_QWORD)v252)
            return;
LABEL_178:
          v82 = *v60 - 2;
          if (*v60 != 2)
            goto LABEL_179;
          v15 = (WebCore *)v60;
          goto LABEL_223;
        }
LABEL_175:
        if (*(_DWORD *)v59 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, a2);
        else
          *(_DWORD *)v59 -= 2;
        goto LABEL_177;
      }
      if (*this == this[1])
      {
        v59 = 0;
      }
      else
      {
        WebCore::CSSPropertyParsing::consumeWhiteSpaceCollapse((uint64_t)this, &v247);
        v60 = v247;
        if (v247)
        {
          if (*this == this[1])
          {
            v59 = 0;
          }
          else
          {
            WebCore::CSSPropertyParsing::consumeTextWrapMode((uint64_t)this, &v247);
            v59 = (WebCore *)v247;
            if (!v247)
              goto LABEL_178;
          }
          goto LABEL_105;
        }
        WebCore::CSSPropertyParsing::consumeTextWrapMode((uint64_t)this, &v247);
        v59 = (WebCore *)v247;
        if (!v247)
          return;
        if (*this != this[1])
        {
          WebCore::CSSPropertyParsing::consumeWhiteSpaceCollapse((uint64_t)this, &v247);
          v60 = v247;
          if (!v247)
          {
            *(_QWORD *)&v252 = 0;
            goto LABEL_175;
          }
          goto LABEL_105;
        }
      }
      v60 = 0;
LABEL_105:
      *(_QWORD *)&v252 = v60;
      goto LABEL_168;
    case 541:
      WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithSingleValueOptimization<WebCore::CSSPropertyParser::parseShorthand(WebCore::CSSPropertyID,BOOL)::$_0,WebCore::CSSParserContext const&>(&v252, (__int128 **)this, (uint64_t)this[2]);
      v15 = (WebCore *)v252;
      if (!(_QWORD)v252)
        return;
      if (*this != this[1])
      {
        v42 = *(_DWORD *)v252 - 2;
        if (*(_DWORD *)v252 == 2)
          goto LABEL_382;
        goto LABEL_64;
      }
      v250[0] = (WebCore *)v252;
      WebCore::CSSPropertyParser::addProperty((uint64_t)this, 66, 541, (int **)v250, (int)a3, 0);
      v15 = v250[0];
      if (v250[0])
        goto LABEL_25;
      return;
    case 547:
      *(_QWORD *)&v252 = WebCore::shorthandForProperty(547);
      *((_QWORD *)&v252 + 1) = v196;
LABEL_3:
      WebCore::CSSPropertyParser::consumeBackgroundShorthand(this, (uint64_t)&v252, a3);
      return;
    case 550:
      WebCore::CSSPropertyParser::consumePrefixedPerspective(this, (int)a3);
      return;
    case 551:
      started = WebCore::webkitTextDecorationShorthand((WebCore *)this);
      goto LABEL_408;
    case 552:
      WebCore::CSSPropertyParser::consumeLegacyTextOrientation((WebCore::CSSPropertyParser *)this, a3);
      return;
    case 553:
      started = WebCore::webkitTextStrokeShorthand((WebCore *)this);
LABEL_408:
      *(_QWORD *)&v252 = started;
      *((_QWORD *)&v252 + 1) = v162;
LABEL_113:
      WebCore::CSSPropertyParser::consumeShorthandGreedily(this, (uint64_t *)&v252, (int)a3);
      return;
    default:
      return;
  }
}

int *WebCore::CSSPropertyParser::addProperty(uint64_t a1, uint64_t a2, int a3, int **a4, int a5, int a6)
{
  int v10;
  uint64_t v12;
  int *v13;
  int *result;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned __int16 *v21;
  int v22;
  WTF *v23;
  char v25;
  __int16 v26;
  WTF::StringImpl *v27;
  WTF *v28;
  int *v29;
  uint64_t v30;

  v10 = a2;
  if (a3)
  {
    WebCore::matchingShorthandsForLonghand(a2, (uint64_t)&v28);
    if (HIDWORD(v29) < 2)
    {
LABEL_19:
      LOBYTE(v12) = 0;
    }
    else
    {
      v12 = 0;
      v21 = (unsigned __int16 *)((char *)v28 + 12);
      while (1)
      {
        v22 = *v21;
        v21 += 8;
        if (v22 == a3)
          break;
        if (HIDWORD(v29) == ++v12)
          goto LABEL_19;
      }
    }
    v23 = v28;
    if (&v30 != (uint64_t *)v28 && v28 != 0)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      v25 = v12;
      WTF::fastFree(v23, v20);
      LOBYTE(v12) = v25;
    }
  }
  else
  {
    LOBYTE(v12) = 0;
  }
  v13 = *a4;
  if (!*a4 || (v13[1] & 0x100) != 0)
  {
    v13 = WebCore::staticCSSValuePool;
    result = *(int **)(a1 + 24);
    WebCore::staticCSSValuePool[0] += 2;
    if (a5)
      v26 = 0x2000;
    else
      v26 = 0;
    v17 = v10 & 0x3FF | ((a3 != 0) << 10) & 0xE7FF | v26 & 0xE7FF | ((v12 & 3) << 11) | ((WebCore::isInheritedPropertyTable[v10] != 0) << 15) | 0x4000;
    LOWORD(v28) = v17;
  }
  else
  {
    result = *(int **)(a1 + 24);
    if (a5)
      v15 = 0x2000;
    else
      v15 = 0;
    if (a6)
      v16 = 0x4000;
    else
      v16 = 0;
    v17 = v10 & 0x3FF | ((a3 != 0) << 10) & 0xE7FF | (v15 | v16) & 0xE7FF | ((v12 & 3) << 11) | ((WebCore::isInheritedPropertyTable[v10] != 0) << 15);
    LOWORD(v28) = v17;
    *a4 = 0;
  }
  v29 = v13;
  v18 = result[3];
  if ((_DWORD)v18 == result[2])
  {
    WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSProperty>((uint64_t)result, (unint64_t)&v28);
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*result == 2)
        return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v27);
      else
        *result -= 2;
    }
  }
  else
  {
    v19 = *(_QWORD *)result + 16 * v18;
    *(_WORD *)v19 = v17;
    *(_QWORD *)(v19 + 8) = v13;
    ++result[3];
  }
  return result;
}

uint64_t WebCore::matchingShorthandsForLonghand@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  switch((int)result)
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 12:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 44:
    case 45:
    case 46:
    case 54:
    case 56:
    case 57:
    case 58:
    case 60:
    case 68:
    case 69:
    case 70:
    case 71:
    case 77:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 91:
    case 96:
    case 98:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 123:
    case 124:
    case 125:
    case 127:
    case 128:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 146:
    case 147:
    case 151:
    case 152:
    case 153:
    case 158:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
    case 183:
    case 184:
    case 185:
    case 187:
    case 190:
    case 191:
    case 196:
    case 197:
    case 201:
    case 202:
    case 203:
    case 205:
    case 206:
    case 207:
    case 209:
    case 210:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 230:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 258:
    case 260:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 272:
    case 273:
    case 274:
    case 278:
    case 284:
    case 287:
    case 288:
    case 292:
    case 293:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 354:
    case 366:
    case 367:
    case 380:
    case 381:
    case 388:
    case 389:
    case 391:
    case 393:
    case 394:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 448:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 456:
    case 458:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      v3 = 0x100000004;
      break;
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 27:
    case 28:
    case 154:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::fontShorthand(void)::fontProperties;
      v4 = 0x1EC00000012;
      goto LABEL_73;
    case 17:
    case 18:
    case 19:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::fontSynthesisShorthand(void)::fontSynthesisProperties;
      v4 = 0x1ED00000003;
      goto LABEL_73;
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::fontShorthand(void)::fontProperties;
      *(_QWORD *)(a2 + 40) = 0x1EC00000012;
      *(_QWORD *)(a2 + 48) = &WebCore::fontVariantShorthand(void)::fontVariantProperties;
      v5 = 0x1EE00000007;
      goto LABEL_70;
    case 29:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::webkitTextOrientationShorthand(void)::webkitTextOrientationProperties;
      v4 = 0x22800000001;
      goto LABEL_73;
    case 41:
    case 148:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::placeContentShorthand(void)::placeContentProperties;
      v4 = 0x20B00000002;
      goto LABEL_73;
    case 42:
    case 149:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::placeItemsShorthand(void)::placeItemsProperties;
      v4 = 0x20C00000002;
      goto LABEL_73;
    case 43:
    case 150:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::placeSelfShorthand(void)::placeSelfProperties;
      v4 = 0x20D00000002;
      goto LABEL_73;
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 55:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = WebCore::animationShorthand(void)::animationProperties;
      v4 = 0x1CC00000008;
      goto LABEL_73;
    case 59:
    case 61:
    case 62:
    case 65:
    case 352:
    case 353:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = WebCore::backgroundShorthand(void)::backgroundProperties;
      v4 = 0x1CD00000009;
      goto LABEL_73;
    case 63:
    case 64:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = WebCore::backgroundShorthand(void)::backgroundProperties;
      *(_QWORD *)(a2 + 40) = 0x1CD00000009;
      *(_QWORD *)(a2 + 48) = &WebCore::backgroundPositionShorthand(void)::backgroundPositionProperties;
      v5 = 0x1CE00000002;
      goto LABEL_70;
    case 66:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = WebCore::backgroundShorthand(void)::backgroundProperties;
      *(_QWORD *)(a2 + 40) = 0x1CD00000009;
      *(_QWORD *)(a2 + 48) = &WebCore::webkitBackgroundSizeShorthand(void)::webkitBackgroundSizeProperties;
      v5 = 0x21D00000001;
      goto LABEL_70;
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderImageShorthand(void)::borderImageProperties;
      *(_QWORD *)(a2 + 56) = 0x1D800000005;
      *(_QWORD *)(a2 + 64) = WebCore::webkitBorderImageShorthand(void)::webkitBorderImageProperties;
      v6 = 0x21E00000005;
      goto LABEL_110;
    case 78:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::pageBreakAfterShorthand(void)::pageBreakAfterProperties;
      *(_QWORD *)(a2 + 40) = 0x20700000001;
      *(_QWORD *)(a2 + 48) = &WebCore::webkitColumnBreakAfterShorthand(void)::webkitColumnBreakAfterProperties;
      v5 = 0x22000000001;
      goto LABEL_70;
    case 79:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::pageBreakBeforeShorthand(void)::pageBreakBeforeProperties;
      *(_QWORD *)(a2 + 40) = 0x20800000001;
      *(_QWORD *)(a2 + 48) = &WebCore::webkitColumnBreakBeforeShorthand(void)::webkitColumnBreakBeforeProperties;
      v5 = 0x22100000001;
      goto LABEL_70;
    case 80:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::pageBreakInsideShorthand(void)::pageBreakInsideProperties;
      *(_QWORD *)(a2 + 40) = 0x20900000001;
      *(_QWORD *)(a2 + 48) = &WebCore::webkitColumnBreakInsideShorthand(void)::webkitColumnBreakInsideProperties;
      v5 = 0x22200000001;
      goto LABEL_70;
    case 90:
    case 97:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::columnsShorthand(void)::columnsProperties;
      v4 = 0x1E700000002;
      goto LABEL_73;
    case 92:
    case 211:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::gapShorthand(void)::gapProperties;
      v4 = 0x1EF00000002;
      goto LABEL_73;
    case 93:
    case 94:
    case 95:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::columnRuleShorthand(void)::columnRuleProperties;
      v4 = 0x1E600000003;
      goto LABEL_73;
    case 99:
    case 100:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::containerShorthand(void)::containerProperties;
      v4 = 0x1E900000002;
      goto LABEL_73;
    case 118:
    case 120:
    case 121:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::flexShorthand(void)::flexProperties;
      v4 = 0x1EA00000003;
      goto LABEL_73;
    case 119:
    case 122:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::flexFlowShorthand(void)::flexFlowProperties;
      v4 = 0x1EB00000002;
      goto LABEL_73;
    case 129:
    case 130:
    case 131:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::gridShorthand(void)::gridProperties;
      v4 = 0x1F000000006;
      goto LABEL_73;
    case 132:
    case 133:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::gridAreaShorthand(void)::gridAreaProperties;
      *(_QWORD *)(a2 + 40) = 0x1F100000004;
      *(_QWORD *)(a2 + 48) = &WebCore::gridColumnShorthand(void)::gridColumnProperties;
      v5 = 0x1F200000002;
      goto LABEL_70;
    case 134:
    case 135:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::gridAreaShorthand(void)::gridAreaProperties;
      *(_QWORD *)(a2 + 40) = 0x1F100000004;
      *(_QWORD *)(a2 + 48) = &WebCore::gridRowShorthand(void)::gridRowProperties;
      v5 = 0x1F300000002;
      goto LABEL_70;
    case 136:
    case 137:
    case 138:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::gridShorthand(void)::gridProperties;
      *(_QWORD *)(a2 + 40) = 0x1F000000006;
      *(_QWORD *)(a2 + 48) = &WebCore::gridTemplateShorthand(void)::gridTemplateProperties;
      v5 = 0x1F400000003;
      goto LABEL_70;
    case 155:
    case 156:
    case 157:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::listStyleShorthand(void)::listStyleProperties;
      v4 = 0x1F800000003;
      goto LABEL_73;
    case 159:
    case 160:
    case 161:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::markerShorthand(void)::markerProperties;
      v4 = 0x1FC00000003;
      goto LABEL_73;
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::maskShorthand(void)::maskProperties;
      *(_QWORD *)(a2 + 40) = 0x1FD0000000ELL;
      *(_QWORD *)(a2 + 48) = &WebCore::maskBorderShorthand(void)::maskBorderProperties;
      *(_QWORD *)(a2 + 56) = 0x1FE00000005;
      *(_QWORD *)(a2 + 64) = &WebCore::webkitMaskBoxImageShorthand(void)::webkitMaskBoxImageProperties;
      v6 = 0x22400000005;
      goto LABEL_110;
    case 167:
    case 168:
    case 169:
    case 170:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::maskShorthand(void)::maskProperties;
      *(_QWORD *)(a2 + 40) = 0x1FD0000000ELL;
      *(_QWORD *)(a2 + 48) = &WebCore::webkitMaskShorthand(void)::webkitMaskProperties;
      v5 = 0x22300000008;
      goto LABEL_70;
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::offsetShorthand(void)::offsetProperties;
      v4 = 0x20000000005;
      goto LABEL_73;
    case 186:
    case 188:
    case 189:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::outlineShorthand(void)::outlineProperties;
      v4 = 0x20100000003;
      goto LABEL_73;
    case 192:
    case 193:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::overflowShorthand(void)::overflowProperties;
      v4 = 0x20200000002;
      goto LABEL_73;
    case 198:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::webkitPerspectiveShorthand(void)::webkitPerspectiveProperties;
      v4 = 0x22600000001;
      goto LABEL_73;
    case 199:
    case 200:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::perspectiveOriginShorthand(void)::perspectiveOriginProperties;
      v4 = 0x20A00000002;
      goto LABEL_73;
    case 219:
    case 220:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::scrollTimelineShorthand(void)::scrollTimelineProperties;
      v4 = 0x21400000002;
      goto LABEL_73;
    case 254:
    case 257:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::webkitTextDecorationShorthand(void)::webkitTextDecorationProperties;
      v4 = 0x22700000003;
      goto LABEL_73;
    case 255:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::webkitTextDecorationShorthand(void)::webkitTextDecorationProperties;
      *(_QWORD *)(a2 + 40) = 0x22700000003;
      *(_QWORD *)(a2 + 48) = &WebCore::textDecorationShorthand(void)::textDecorationProperties;
      v5 = 0x21500000001;
      goto LABEL_70;
    case 256:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::textDecorationSkipShorthand(void)::textDecorationSkipProperties;
      v4 = 0x21600000001;
      goto LABEL_73;
    case 259:
    case 261:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::textEmphasisShorthand(void)::textEmphasisProperties;
      v4 = 0x21700000002;
      goto LABEL_73;
    case 270:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::textWrapShorthand(void)::textWrapProperties;
      *(_QWORD *)(a2 + 40) = 0x21800000002;
      *(_QWORD *)(a2 + 48) = &WebCore::whiteSpaceShorthand(void)::whiteSpaceProperties;
      v5 = 0x21C00000002;
      goto LABEL_70;
    case 271:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::textWrapShorthand(void)::textWrapProperties;
      v4 = 0x21800000002;
      goto LABEL_73;
    case 275:
    case 276:
    case 277:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::transformOriginShorthand(void)::transformOriginProperties;
      v4 = 0x21900000003;
      goto LABEL_73;
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::transitionShorthand(void)::transitionProperties;
      v4 = 0x21A00000005;
      goto LABEL_73;
    case 289:
    case 290:
    case 291:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::viewTimelineShorthand(void)::viewTimelineProperties;
      v4 = 0x21B00000003;
      goto LABEL_73;
    case 294:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::whiteSpaceShorthand(void)::whiteSpaceProperties;
      v4 = 0x21C00000002;
      goto LABEL_73;
    case 305:
    case 306:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderSpacingShorthand(void)::borderSpacingProperties;
      v4 = 0x1E200000002;
      goto LABEL_73;
    case 335:
    case 336:
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 8) = 4;
      result = WTF::fastMalloc((WTF *)0x50);
      *(_DWORD *)(a2 + 8) = 5;
      *(_QWORD *)a2 = result;
      v7 = (_QWORD *)(result + 16 * *(unsigned int *)(a2 + 12));
      *v7 = &WebCore::allShorthand(void)::allProperties;
      v7[1] = 0x1CB000001B5;
      LODWORD(v7) = *(_DWORD *)(a2 + 12) + 1;
      *(_DWORD *)(a2 + 12) = (_DWORD)v7;
      v8 = (_QWORD *)(*(_QWORD *)a2 + 16 * v7);
      *v8 = &WebCore::maskShorthand(void)::maskProperties;
      v8[1] = 0x1FD0000000ELL;
      LODWORD(v8) = *(_DWORD *)(a2 + 12) + 1;
      *(_DWORD *)(a2 + 12) = (_DWORD)v8;
      v9 = (_QWORD *)(*(_QWORD *)a2 + 16 * v8);
      *v9 = &WebCore::webkitMaskShorthand(void)::webkitMaskProperties;
      v9[1] = 0x22300000008;
      LODWORD(v9) = *(_DWORD *)(a2 + 12) + 1;
      *(_DWORD *)(a2 + 12) = (_DWORD)v9;
      v10 = (_QWORD *)(*(_QWORD *)a2 + 16 * v9);
      *v10 = &WebCore::maskPositionShorthand(void)::maskPositionProperties;
      v10[1] = 0x1FF00000002;
      LODWORD(v10) = *(_DWORD *)(a2 + 12) + 1;
      *(_DWORD *)(a2 + 12) = (_DWORD)v10;
      v11 = (_QWORD *)(*(_QWORD *)a2 + 16 * v10);
      *v11 = &WebCore::webkitMaskPositionShorthand(void)::webkitMaskPositionProperties;
      v11[1] = 0x22500000002;
      ++*(_DWORD *)(a2 + 12);
      return result;
    case 344:
    case 345:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::webkitTextStrokeShorthand(void)::webkitTextStrokeProperties;
      v4 = 0x22900000002;
      goto LABEL_73;
    case 355:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderBlockShorthand(void)::borderBlockProperties;
      *(_QWORD *)(a2 + 40) = 0x1D000000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderBlockEndShorthand(void)::borderBlockEndProperties;
      v12 = 0x1D200000003;
      goto LABEL_80;
    case 356:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderBlockShorthand(void)::borderBlockProperties;
      *(_QWORD *)(a2 + 40) = 0x1D000000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderBlockEndShorthand(void)::borderBlockEndProperties;
      v13 = 0x1D200000003;
      goto LABEL_82;
    case 357:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderBlockShorthand(void)::borderBlockProperties;
      *(_QWORD *)(a2 + 40) = 0x1D000000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderBlockEndShorthand(void)::borderBlockEndProperties;
      v14 = 0x1D200000003;
      goto LABEL_84;
    case 358:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderBlockShorthand(void)::borderBlockProperties;
      *(_QWORD *)(a2 + 40) = 0x1D000000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderBlockStartShorthand(void)::borderBlockStartProperties;
      v12 = 0x1D300000003;
LABEL_80:
      *(_QWORD *)(a2 + 56) = v12;
      *(_QWORD *)(a2 + 64) = &WebCore::borderBlockColorShorthand(void)::borderBlockColorProperties;
      v6 = 0x1D100000002;
      goto LABEL_110;
    case 359:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderBlockShorthand(void)::borderBlockProperties;
      *(_QWORD *)(a2 + 40) = 0x1D000000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderBlockStartShorthand(void)::borderBlockStartProperties;
      v13 = 0x1D300000003;
LABEL_82:
      *(_QWORD *)(a2 + 56) = v13;
      *(_QWORD *)(a2 + 64) = &WebCore::borderBlockStyleShorthand(void)::borderBlockStyleProperties;
      v6 = 0x1D400000002;
      goto LABEL_110;
    case 360:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderBlockShorthand(void)::borderBlockProperties;
      *(_QWORD *)(a2 + 40) = 0x1D000000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderBlockStartShorthand(void)::borderBlockStartProperties;
      v14 = 0x1D300000003;
LABEL_84:
      *(_QWORD *)(a2 + 56) = v14;
      *(_QWORD *)(a2 + 64) = &WebCore::borderBlockWidthShorthand(void)::borderBlockWidthProperties;
      v6 = 0x1D500000002;
      goto LABEL_110;
    case 361:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderColorShorthand(void)::borderColorProperties;
      v15 = 0x1D700000004;
      goto LABEL_88;
    case 362:
    case 363:
    case 383:
    case 384:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderRadiusShorthand(void)::borderRadiusProperties;
      *(_QWORD *)(a2 + 40) = 0x1E000000004;
      *(_QWORD *)(a2 + 48) = &WebCore::webkitBorderRadiusShorthand(void)::webkitBorderRadiusProperties;
      v5 = 0x21F00000004;
LABEL_70:
      *(_QWORD *)(a2 + 56) = v5;
      v3 = 0x300000004;
      break;
    case 364:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderStyleShorthand(void)::borderStyleProperties;
      v15 = 0x1E300000004;
      goto LABEL_88;
    case 365:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderWidthShorthand(void)::borderWidthProperties;
      v15 = 0x1E500000004;
LABEL_88:
      *(_QWORD *)(a2 + 56) = v15;
      *(_QWORD *)(a2 + 64) = &WebCore::borderBottomShorthand(void)::borderBottomProperties;
      v6 = 0x1D600000003;
      goto LABEL_110;
    case 368:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderInlineShorthand(void)::borderInlineProperties;
      *(_QWORD *)(a2 + 40) = 0x1D900000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderInlineEndShorthand(void)::borderInlineEndProperties;
      v16 = 0x1DB00000003;
      goto LABEL_93;
    case 369:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderInlineShorthand(void)::borderInlineProperties;
      *(_QWORD *)(a2 + 40) = 0x1D900000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderInlineEndShorthand(void)::borderInlineEndProperties;
      v17 = 0x1DB00000003;
      goto LABEL_95;
    case 370:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderInlineShorthand(void)::borderInlineProperties;
      *(_QWORD *)(a2 + 40) = 0x1D900000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderInlineEndShorthand(void)::borderInlineEndProperties;
      v18 = 0x1DB00000003;
      goto LABEL_97;
    case 371:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderInlineShorthand(void)::borderInlineProperties;
      *(_QWORD *)(a2 + 40) = 0x1D900000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderInlineStartShorthand(void)::borderInlineStartProperties;
      v16 = 0x1DC00000003;
LABEL_93:
      *(_QWORD *)(a2 + 56) = v16;
      *(_QWORD *)(a2 + 64) = &WebCore::borderInlineColorShorthand(void)::borderInlineColorProperties;
      v6 = 0x1DA00000002;
      goto LABEL_110;
    case 372:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderInlineShorthand(void)::borderInlineProperties;
      *(_QWORD *)(a2 + 40) = 0x1D900000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderInlineStartShorthand(void)::borderInlineStartProperties;
      v17 = 0x1DC00000003;
LABEL_95:
      *(_QWORD *)(a2 + 56) = v17;
      *(_QWORD *)(a2 + 64) = &WebCore::borderInlineStyleShorthand(void)::borderInlineStyleProperties;
      v6 = 0x1DD00000002;
      goto LABEL_110;
    case 373:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderInlineShorthand(void)::borderInlineProperties;
      *(_QWORD *)(a2 + 40) = 0x1D900000006;
      *(_QWORD *)(a2 + 48) = &WebCore::borderInlineStartShorthand(void)::borderInlineStartProperties;
      v18 = 0x1DC00000003;
LABEL_97:
      *(_QWORD *)(a2 + 56) = v18;
      *(_QWORD *)(a2 + 64) = &WebCore::borderInlineWidthShorthand(void)::borderInlineWidthProperties;
      v6 = 0x1DE00000002;
      goto LABEL_110;
    case 374:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderColorShorthand(void)::borderColorProperties;
      v19 = 0x1D700000004;
      goto LABEL_101;
    case 375:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderStyleShorthand(void)::borderStyleProperties;
      v19 = 0x1E300000004;
      goto LABEL_101;
    case 376:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderWidthShorthand(void)::borderWidthProperties;
      v19 = 0x1E500000004;
LABEL_101:
      *(_QWORD *)(a2 + 56) = v19;
      *(_QWORD *)(a2 + 64) = &WebCore::borderLeftShorthand(void)::borderLeftProperties;
      v6 = 0x1DF00000003;
      goto LABEL_110;
    case 377:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderColorShorthand(void)::borderColorProperties;
      v20 = 0x1D700000004;
      goto LABEL_105;
    case 378:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderStyleShorthand(void)::borderStyleProperties;
      v20 = 0x1E300000004;
      goto LABEL_105;
    case 379:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderWidthShorthand(void)::borderWidthProperties;
      v20 = 0x1E500000004;
LABEL_105:
      *(_QWORD *)(a2 + 56) = v20;
      *(_QWORD *)(a2 + 64) = &WebCore::borderRightShorthand(void)::borderRightProperties;
      v6 = 0x1E100000003;
      goto LABEL_110;
    case 382:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderColorShorthand(void)::borderColorProperties;
      v21 = 0x1D700000004;
      goto LABEL_109;
    case 385:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderStyleShorthand(void)::borderStyleProperties;
      v21 = 0x1E300000004;
      goto LABEL_109;
    case 386:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::borderShorthand(void)::borderProperties;
      *(_QWORD *)(a2 + 40) = 0x1CF00000011;
      *(_QWORD *)(a2 + 48) = &WebCore::borderWidthShorthand(void)::borderWidthProperties;
      v21 = 0x1E500000004;
LABEL_109:
      *(_QWORD *)(a2 + 56) = v21;
      *(_QWORD *)(a2 + 64) = &WebCore::borderTopShorthand(void)::borderTopProperties;
      v6 = 0x1E400000003;
LABEL_110:
      *(_QWORD *)(a2 + 72) = v6;
      v3 = 0x400000004;
      break;
    case 387:
    case 399:
    case 431:
    case 449:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::insetShorthand(void)::insetProperties;
      v4 = 0x1F500000004;
      goto LABEL_73;
    case 390:
    case 392:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::containIntrinsicSizeShorthand(void)::containIntrinsicSizeProperties;
      v4 = 0x1E800000002;
      goto LABEL_73;
    case 395:
    case 396:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::insetBlockShorthand(void)::insetBlockProperties;
      v4 = 0x1F600000002;
      goto LABEL_73;
    case 397:
    case 398:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::insetInlineShorthand(void)::insetInlineProperties;
      v4 = 0x1F700000002;
      goto LABEL_73;
    case 400:
    case 401:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::marginBlockShorthand(void)::marginBlockProperties;
      v4 = 0x1FA00000002;
      goto LABEL_73;
    case 402:
    case 405:
    case 406:
    case 407:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::marginShorthand(void)::marginProperties;
      v4 = 0x1F900000004;
      goto LABEL_73;
    case 403:
    case 404:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::marginInlineShorthand(void)::marginInlineProperties;
      v4 = 0x1FB00000002;
      goto LABEL_73;
    case 408:
    case 409:
    case 410:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::maskShorthand(void)::maskProperties;
      v4 = 0x1FD0000000ELL;
      goto LABEL_73;
    case 421:
    case 422:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::overscrollBehaviorShorthand(void)::overscrollBehaviorProperties;
      v4 = 0x20300000002;
      goto LABEL_73;
    case 423:
    case 424:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::paddingBlockShorthand(void)::paddingBlockProperties;
      v4 = 0x20500000002;
      goto LABEL_73;
    case 425:
    case 428:
    case 429:
    case 430:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::paddingShorthand(void)::paddingProperties;
      v4 = 0x20400000004;
      goto LABEL_73;
    case 426:
    case 427:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::paddingInlineShorthand(void)::paddingInlineProperties;
      v4 = 0x20600000002;
      goto LABEL_73;
    case 432:
    case 433:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::scrollMarginBlockShorthand(void)::scrollMarginBlockProperties;
      v4 = 0x20F00000002;
      goto LABEL_73;
    case 434:
    case 437:
    case 438:
    case 439:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::scrollMarginShorthand(void)::scrollMarginProperties;
      v4 = 0x20E00000004;
      goto LABEL_73;
    case 435:
    case 436:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::scrollMarginInlineShorthand(void)::scrollMarginInlineProperties;
      v4 = 0x21000000002;
      goto LABEL_73;
    case 440:
    case 441:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::scrollPaddingBlockShorthand(void)::scrollPaddingBlockProperties;
      v4 = 0x21200000002;
      goto LABEL_73;
    case 442:
    case 445:
    case 446:
    case 447:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::scrollPaddingShorthand(void)::scrollPaddingProperties;
      v4 = 0x21100000004;
      goto LABEL_73;
    case 443:
    case 444:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::scrollPaddingInlineShorthand(void)::scrollPaddingInlineProperties;
      v4 = 0x21300000002;
      goto LABEL_73;
    case 455:
    case 457:
      *(_QWORD *)(a2 + 16) = &WebCore::allShorthand(void)::allProperties;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 24) = 0x1CB000001B5;
      *(_QWORD *)(a2 + 32) = &WebCore::webkitMaskShorthand(void)::webkitMaskProperties;
      v4 = 0x22300000008;
LABEL_73:
      *(_QWORD *)(a2 + 40) = v4;
      v3 = 0x200000004;
      break;
    default:
      *(_QWORD *)a2 = a2 + 16;
      v3 = 4;
      break;
  }
  *(_QWORD *)(a2 + 8) = v3;
  return result;
}

BOOL WebCore::CSSPropertyParser::consume4ValueShorthand(_QWORD *a1, unsigned __int16 **a2, int a3)
{
  unsigned __int16 *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  _BOOL4 v12;
  int *v13;
  uint64_t v14;
  int v15;
  int *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  _BOOL8 v27;
  int *v28;
  int *v29;
  int *v31;
  int *v32;
  int *v33;

  v6 = *a2;
  WebCore::CSSPropertyParsing::parseStyleProperty(&v33, a1, **a2, *((unsigned __int16 *)a2 + 6), a1[2]);
  if (!v33)
    return 0;
  WebCore::CSSPropertyParsing::parseStyleProperty(&v32, a1, v6[1], *((unsigned __int16 *)a2 + 6), a1[2]);
  if (v32)
  {
    WebCore::CSSPropertyParsing::parseStyleProperty(&v31, a1, v6[2], *((unsigned __int16 *)a2 + 6), a1[2]);
    v7 = v31;
    if (v31)
    {
      WebCore::CSSPropertyParsing::parseStyleProperty(&v31, a1, v6[3], *((unsigned __int16 *)a2 + 6), a1[2]);
      v13 = v31;
      v11 = v32;
      v12 = v31 == 0;
      if (v32)
      {
        v9 = 0;
        v10 = 0;
        v12 = 0;
        if (v31)
          goto LABEL_6;
        goto LABEL_5;
      }
      v11 = v33;
      if (v33)
      {
        v10 = 0;
        v12 = 0;
        *v33 += 2;
        v32 = v11;
        v9 = 1;
        if (v13)
          goto LABEL_6;
        goto LABEL_5;
      }
      v10 = 0;
      v32 = 0;
LABEL_41:
      v9 = 1;
      goto LABEL_6;
    }
    v11 = v32;
    if (v32)
    {
      v7 = v33;
      v9 = 0;
      if (v33)
        *v33 += 2;
      v10 = 1;
      goto LABEL_5;
    }
  }
  v7 = v33;
  if (!v33)
  {
    v13 = 0;
    v32 = 0;
    v12 = 1;
    v10 = 1;
    goto LABEL_41;
  }
  v8 = *v33;
  v32 = v33;
  *v33 = v8 + 4;
  v9 = 1;
  v10 = 1;
  v11 = v7;
LABEL_5:
  *v11 += 2;
  v12 = 1;
  v13 = v11;
LABEL_6:
  v14 = *v6;
  v15 = *((unsigned __int16 *)a2 + 6);
  v16 = v33;
  v33 = 0;
  v31 = v16;
  WebCore::CSSPropertyParser::addProperty((uint64_t)a1, v14, v15, &v31, a3, 0);
  if (v31)
  {
    if (*v31 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v17);
    else
      *v31 -= 2;
  }
  v18 = v6[1];
  v19 = *((unsigned __int16 *)a2 + 6);
  v31 = v32;
  v32 = 0;
  WebCore::CSSPropertyParser::addProperty((uint64_t)a1, v18, v19, &v31, a3, v9);
  if (v31)
  {
    if (*v31 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v20);
    else
      *v31 -= 2;
  }
  v21 = v6[2];
  v22 = *((unsigned __int16 *)a2 + 6);
  v31 = v7;
  WebCore::CSSPropertyParser::addProperty((uint64_t)a1, v21, v22, &v31, a3, v10);
  if (v31)
  {
    if (*v31 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v23);
    else
      *v31 -= 2;
  }
  v24 = v6[3];
  v25 = *((unsigned __int16 *)a2 + 6);
  v31 = v13;
  WebCore::CSSPropertyParser::addProperty((uint64_t)a1, v24, v25, &v31, a3, v12);
  if (v31)
  {
    if (*v31 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v26);
    else
      *v31 -= 2;
  }
  v27 = *a1 == a1[1];
  v28 = v32;
  v32 = 0;
  if (v28)
  {
    if (*v28 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v26);
    else
      *v28 -= 2;
  }
  v29 = v33;
  v33 = 0;
  if (v29)
  {
    if (*v29 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v26);
    else
      *v29 -= 2;
  }
  return v27;
}

void WebCore::CSSPropertyParsing::isKeywordValidForStyleProperty(int a1, int a2, uint64_t a3)
{
  switch(a1)
  {
    case 56:
      WebCore::isKeywordValidForAppearance(a2);
      break;
    case 84:
      WebCore::isKeywordValidForClear(a2);
      break;
    case 110:
      WebCore::isKeywordValidForDominantBaseline(a2);
      break;
    case 118:
      WebCore::isKeywordValidForFlexBasis(a2);
      break;
    case 174:
      WebCore::isKeywordValidForMixBlendMode(a2);
      break;
    case 192:
      WebCore::isKeywordValidForOverflowX(a2);
      break;
    case 209:
      WebCore::isKeywordValidForResize(a2, a3);
      break;
    case 285:
      WebCore::isKeywordValidForUnicodeBidi(a2);
      break;
    case 411:
      WebCore::isKeywordValidForMaxBlockSize(a2);
      break;
    case 412:
      WebCore::isKeywordValidForMaxHeight(a2);
      break;
    default:
      return;
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeRadii(uint64_t a1, uint64_t *a2, __int128 **this, uint64_t a4, int a5)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  int *v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  int *v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  int *v23;
  int v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  int *v31;
  int **v32;
  int *v33;
  _DWORD *v34;
  int *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t result;
  WTF::StringImpl *v42;
  uint64_t v43;
  int *v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int *v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  int *v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int *v56;
  int v57;
  WTF::StringImpl *v58;
  int *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  int *v64;

  v10 = *this;
  v11 = this[1];
  if (*this == v11)
    goto LABEL_33;
  if (*this >= v11)
  {
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v10 & 0x3F) == 6)
  {
LABEL_33:
    v30 = 1;
    goto LABEL_34;
  }
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a4, 1u, 1, 0, 0, 0, (uint64_t *)&v64);
  v12 = (uint64_t)v64;
  v64 = 0;
  v13 = *(int **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
  {
    v14 = *v13 - 2;
    if (*v13 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, (WTF::StringImpl *)a2);
      v13 = v64;
      v64 = 0;
      if (!v13)
        goto LABEL_7;
      v14 = *v13 - 2;
      if (*v13 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, (WTF::StringImpl *)a2);
        goto LABEL_7;
      }
    }
    *v13 = v14;
LABEL_7:
    v12 = *(_QWORD *)a1;
  }
  if (!v12)
    return 0;
  v15 = *this;
  v16 = this[1];
  if (*this == v16)
    goto LABEL_33;
  if (*this >= v16)
  {
    v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v15 & 0x3F) == 6)
    goto LABEL_33;
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a4, 1u, 1, 0, 0, 0, (uint64_t *)&v64);
  v17 = (uint64_t)v64;
  v64 = 0;
  v18 = *(int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v17;
  if (v18)
  {
    v19 = *v18 - 2;
    if (*v18 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, (WTF::StringImpl *)a2);
      v18 = v64;
      v64 = 0;
      if (!v18)
        goto LABEL_15;
      v19 = *v18 - 2;
      if (*v18 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, (WTF::StringImpl *)a2);
        goto LABEL_15;
      }
    }
    *v18 = v19;
LABEL_15:
    v17 = *(_QWORD *)(a1 + 8);
  }
  if (!v17)
    return 0;
  v20 = *this;
  v21 = this[1];
  if (*this != v21)
  {
    if (*this >= v21)
    {
      v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v20 & 0x3F) != 6)
    {
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a4, 1u, 1, 0, 0, 0, (uint64_t *)&v64);
      v22 = (uint64_t)v64;
      v64 = 0;
      v23 = *(int **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v22;
      if (!v23)
        goto LABEL_24;
      v24 = *v23 - 2;
      if (*v23 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, (WTF::StringImpl *)a2);
        v23 = v64;
        v64 = 0;
        if (!v23)
          goto LABEL_23;
        v24 = *v23 - 2;
        if (*v23 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, (WTF::StringImpl *)a2);
          goto LABEL_23;
        }
      }
      *v23 = v24;
LABEL_23:
      v22 = *(_QWORD *)(a1 + 16);
LABEL_24:
      if (!v22)
        return 0;
      v25 = *this;
      v26 = this[1];
      if (*this == v26)
        goto LABEL_33;
      if (*this >= v26)
      {
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v25 & 0x3F) == 6)
        goto LABEL_33;
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a4, 1u, 1, 0, 0, 0, (uint64_t *)&v64);
      v27 = (uint64_t)v64;
      v64 = 0;
      v28 = *(int **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v27;
      if (!v28)
        goto LABEL_32;
      v29 = *v28 - 2;
      if (*v28 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, (WTF::StringImpl *)a2);
        v28 = v64;
        v64 = 0;
        if (!v28)
          goto LABEL_31;
        v29 = *v28 - 2;
        if (*v28 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, (WTF::StringImpl *)a2);
          goto LABEL_31;
        }
      }
      *v28 = v29;
LABEL_31:
      v27 = *(_QWORD *)(a1 + 24);
LABEL_32:
      if (!v27)
        return 0;
      goto LABEL_33;
    }
  }
  v30 = 0;
LABEL_34:
  v31 = *(int **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  if (*this == this[1])
  {
    v32 = (int **)(a1 + 8);
    if (((v30 | a5 ^ 1) & 1) != 0)
    {
      v33 = *v32;
      if (!*v32)
      {
        *v31 += 2;
        *v32 = v31;
        v33 = v31;
      }
      if (!*(_QWORD *)(a1 + 16))
      {
        *v31 += 2;
        *(_QWORD *)(a1 + 16) = v31;
      }
      if (!*(_QWORD *)(a1 + 24))
      {
        *v33 += 2;
        *(_QWORD *)(a1 + 24) = v33;
      }
      *v31 += 2;
      v34 = (_DWORD *)*a2;
      *a2 = (uint64_t)v31;
      if (v34)
      {
        if (*v34 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, (WTF::StringImpl *)a2);
        else
          *v34 -= 2;
      }
      v35 = *v32;
      if (*v32)
        *v35 += 2;
      v36 = (_DWORD *)a2[1];
      a2[1] = (uint64_t)v35;
      if (v36)
      {
        if (*v36 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, (WTF::StringImpl *)a2);
        else
          *v36 -= 2;
      }
      v37 = *(_DWORD **)(a1 + 16);
      if (v37)
        *v37 += 2;
      v38 = (_DWORD *)a2[2];
      a2[2] = (uint64_t)v37;
      if (v38)
      {
        if (*v38 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, (WTF::StringImpl *)a2);
        else
          *v38 -= 2;
      }
      v39 = *(_DWORD **)(a1 + 24);
      if (v39)
        *v39 += 2;
      v40 = (_DWORD *)a2[3];
      a2[3] = (uint64_t)v39;
      if (v40)
      {
        if (*v40 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, (WTF::StringImpl *)a2);
        else
          *v40 -= 2;
      }
      return 1;
    }
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)a2, (WTF::StringImpl *)(a1 + 8));
    v59 = *v32;
    *v32 = 0;
    if (v59)
    {
      if (*v59 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, v58);
      else
        *v59 -= 2;
    }
LABEL_119:
    WebCore::CSSPropertyParserHelpers::complete4Sides<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>(a1);
    WebCore::CSSPropertyParserHelpers::complete4Sides<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)a2);
    return 1;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeSlashIncludingWhitespace(this, (WebCore::CSSParserTokenRange *)a2);
  if (!(_DWORD)result)
    return result;
  if (*this == this[1])
  {
LABEL_120:
    if (*a2)
      goto LABEL_119;
    return 0;
  }
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a4, 1u, 1, 0, 0, 0, (uint64_t *)&v64);
  v43 = (uint64_t)v64;
  v64 = 0;
  v44 = (int *)*a2;
  *a2 = v43;
  if (v44)
  {
    v45 = *v44 - 2;
    if (*v44 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v42);
      v44 = v64;
      v64 = 0;
      if (!v44)
        goto LABEL_93;
      v45 = *v44 - 2;
      if (*v44 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v60);
        goto LABEL_93;
      }
    }
    *v44 = v45;
LABEL_93:
    v43 = *a2;
  }
  if (!v43)
    return 0;
  if (*this == this[1])
    goto LABEL_120;
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a4, 1u, 1, 0, 0, 0, (uint64_t *)&v64);
  v47 = (uint64_t)v64;
  v64 = 0;
  v48 = (int *)a2[1];
  a2[1] = v47;
  if (v48)
  {
    v49 = *v48 - 2;
    if (*v48 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v48, v46);
      v48 = v64;
      v64 = 0;
      if (!v48)
        goto LABEL_99;
      v49 = *v48 - 2;
      if (*v48 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v48, v61);
        goto LABEL_99;
      }
    }
    *v48 = v49;
LABEL_99:
    v47 = a2[1];
  }
  if (!v47)
    return 0;
  if (*this == this[1])
    goto LABEL_120;
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a4, 1u, 1, 0, 0, 0, (uint64_t *)&v64);
  v51 = (uint64_t)v64;
  v64 = 0;
  v52 = (int *)a2[2];
  a2[2] = v51;
  if (v52)
  {
    v53 = *v52 - 2;
    if (*v52 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v50);
      v52 = v64;
      v64 = 0;
      if (!v52)
        goto LABEL_105;
      v53 = *v52 - 2;
      if (*v52 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v62);
        goto LABEL_105;
      }
    }
    *v52 = v53;
LABEL_105:
    v51 = a2[2];
  }
  if (!v51)
    return 0;
  if (*this == this[1])
    goto LABEL_120;
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a4, 1u, 1, 0, 0, 0, (uint64_t *)&v64);
  v55 = (uint64_t)v64;
  v64 = 0;
  v56 = (int *)a2[3];
  a2[3] = v55;
  if (v56)
  {
    v57 = *v56 - 2;
    if (*v56 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v54);
      v56 = v64;
      v64 = 0;
      if (!v56)
        goto LABEL_111;
      v57 = *v56 - 2;
      if (*v56 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v63);
        goto LABEL_111;
      }
    }
    *v56 = v57;
LABEL_111:
    v55 = a2[3];
  }
  result = 0;
  if (v55 && *a2)
  {
    if (*this == this[1])
      goto LABEL_119;
    return 0;
  }
  return result;
}

BOOL WebCore::CSSPropertyParser::consume2ValueShorthand(_QWORD *a1, unsigned __int16 **a2, int a3)
{
  unsigned __int16 *v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  _BOOL8 v15;
  int *v16;
  int *v17;
  int *v19;
  int *v20;
  int *v21;

  v6 = *a2;
  WebCore::CSSPropertyParsing::parseStyleProperty(&v21, a1, **a2, *((unsigned __int16 *)a2 + 6), a1[2]);
  if (!v21)
    return 0;
  WebCore::CSSPropertyParsing::parseStyleProperty(&v20, a1, v6[1], *((unsigned __int16 *)a2 + 6), a1[2]);
  v8 = v20;
  v7 = v21;
  if (!v20)
  {
    if (v21)
      *v21 += 2;
    v20 = v7;
  }
  v9 = *v6;
  v10 = *((unsigned __int16 *)a2 + 6);
  v21 = 0;
  v19 = v7;
  WebCore::CSSPropertyParser::addProperty((uint64_t)a1, v9, v10, &v19, a3, 0);
  if (v19)
  {
    if (*v19 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v11);
    else
      *v19 -= 2;
  }
  v12 = v6[1];
  v13 = *((unsigned __int16 *)a2 + 6);
  v19 = v20;
  v20 = 0;
  WebCore::CSSPropertyParser::addProperty((uint64_t)a1, v12, v13, &v19, a3, v8 == 0);
  if (v19)
  {
    if (*v19 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v14);
    else
      *v19 -= 2;
  }
  v15 = *a1 == a1[1];
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v14);
    else
      *v16 -= 2;
  }
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*v17 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v14);
    else
      *v17 -= 2;
  }
  return v15;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeTextDecorationLine@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  __int128 *v13;
  WTF *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  int v18;
  int *v19;
  WTF *v20;
  unsigned int v21;
  WTF *v22;
  WTF *v24;
  uint64_t result;
  WTF *v28;
  uint64_t v29;
  _DWORD *v30;
  WTF *v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int *v35;
  int v36;
  unint64_t v38;
  __int128 *v39;
  __int128 *v40;
  char v41;
  unsigned int v42;
  int v43;
  WTF *v44;
  uint64_t v45;
  int v46;
  int v47;
  WTF *v48;
  int v49;
  unsigned int v50;
  _BYTE v51[32];
  int *v52;
  WTF *v53;
  uint64_t v54;
  _BYTE v55[32];
  WTF *v56;
  uint64_t v57;
  uint64_t v58;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  v34 = *((_DWORD *)v5 + 4);
  if (v34 < 0)
  {
    v34 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = v34;
  }
  if ((unsigned __int16)v34 != 6)
  {
LABEL_3:
    v56 = (WTF *)&v58;
    v57 = 4;
    while (1)
    {
      v7 = *this;
      v6 = this[1];
      if (*this >= v6)
      {
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_BYTE *)v7 & 0x3F) != 0)
        goto LABEL_6;
      v13 = *this;
      if (*this >= v6)
      {
        v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v13 & 0x3F) != 0)
        goto LABEL_6;
      v36 = *((_DWORD *)v13 + 4);
      if (v36 < 0)
      {
        v36 = WebCore::cssValueKeywordID(*((_QWORD *)v13 + 1), *((unsigned int *)v13 + 1) | ((unint64_t)((*(_DWORD *)v13 >> 22) & 1) << 32));
        *((_DWORD *)v13 + 4) = v36;
      }
      if ((unsigned __int16)v36 - 452 > 0x2B
        || ((1 << (v36 + 60)) & 0x80080400001) == 0)
      {
LABEL_6:
        v8 = 0;
        v9 = 0;
        v10 = 0;
      }
      else
      {
        v39 = *this;
        v38 = (unint64_t)this[1];
        if (*this == (__int128 *)v38)
        {
          v41 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
          v40 = *this;
          v39 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v40 = (__int128 *)((char *)v39 + 24);
          *this = (__int128 *)((char *)v39 + 24);
        }
        while (1)
        {
          if ((unint64_t)v40 < v38 || (v41 & 1) != 0)
          {
            if ((unint64_t)v40 >= v38)
              v40 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v42 = *(_DWORD *)v40;
          }
          else
          {
            v42 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v42;
            v41 = 1;
          }
          if ((v42 & 0x3F) != 0x10)
            break;
          v40 = (__int128 *)((char *)*this + 24);
          *this = v40;
        }
        if ((*(_DWORD *)v39 & 0x3F) != 0)
        {
          LOWORD(v43) = 0;
        }
        else
        {
          v43 = *((_DWORD *)v39 + 4);
          if (v43 < 0)
          {
            v43 = WebCore::cssValueKeywordID(*((_QWORD *)v39 + 1), *((unsigned int *)v39 + 1) | ((unint64_t)((*(_DWORD *)v39 >> 22) & 1) << 32));
            *((_DWORD *)v39 + 4) = v43;
          }
        }
        v10 = v43 & 0xFF00;
        v8 = v43;
        v9 = 0x10000;
      }
      v11 = v9 | v8 | v10;
      LODWORD(v53) = v11;
      if (v11 < 0x10000)
        break;
      v12 = HIDWORD(v57);
      if (HIDWORD(v57))
      {
        v44 = v56;
        v45 = HIDWORD(v57);
        do
        {
          v46 = *(unsigned __int16 *)v44;
          v44 = (WTF *)((char *)v44 + 2);
          if (v46 == (unsigned __int16)v11)
            goto LABEL_94;
        }
        while (--v45);
      }
      if (HIDWORD(v57) == (_DWORD)v57)
      {
        WTF::Vector<WebCore::CSSValueID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSValueID&>((uint64_t)&v56, (unint64_t)&v53);
      }
      else
      {
        *((_WORD *)v56 + HIDWORD(v57)) = v11;
        HIDWORD(v57) = v12 + 1;
      }
    }
    if (!HIDWORD(v57))
    {
LABEL_94:
      *a3 = 0;
      goto LABEL_37;
    }
    v53 = (WTF *)v55;
    v54 = 4;
    v14 = v56;
    v15 = 2 * HIDWORD(v57);
    do
    {
      v16 = *(unsigned __int16 *)v14;
      if (v16 >= 0x48E)
      {
        __break(0xC471u);
        JUMPOUT(0x194103038);
      }
      v17 = &WebCore::staticCSSValuePool[4 * v16 + 3088];
      *v17 += 2;
      v52 = v17;
      v18 = HIDWORD(v54);
      if (HIDWORD(v54) == (_DWORD)v54)
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)&v53, (uint64_t *)&v52);
      }
      else
      {
        v52 = 0;
        *((_QWORD *)v53 + HIDWORD(v54)) = v17;
        HIDWORD(v54) = v18 + 1;
      }
      v19 = v52;
      v52 = 0;
      if (v19)
      {
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, a2);
        else
          *v19 -= 2;
      }
      v14 = (WTF *)((char *)v14 + 2);
      v15 -= 2;
    }
    while (v15);
    v20 = v53;
    v48 = (WTF *)v51;
    v49 = 4;
    if (v53 == (WTF *)v55)
    {
      v21 = HIDWORD(v54);
      memcpy(v51, v55, 8 * HIDWORD(v54));
    }
    else
    {
      v53 = (WTF *)v55;
      v48 = v20;
      v47 = v54;
      v21 = HIDWORD(v54);
      LODWORD(v54) = 4;
      v49 = v47;
    }
    HIDWORD(v54) = 0;
    v50 = v21;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v48, (uint64_t *)&v52);
    *a3 = v52;
    if (v50)
    {
      v28 = v48;
      v29 = 8 * v50;
      do
      {
        v30 = *(_DWORD **)v28;
        *(_QWORD *)v28 = 0;
        if (v30)
        {
          if (*v30 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, a2);
          else
            *v30 -= 2;
        }
        v28 = (WTF *)((char *)v28 + 8);
        v29 -= 8;
      }
      while (v29);
    }
    v22 = v48;
    if (v51 != (_BYTE *)v48 && v48 != 0)
    {
      v48 = 0;
      v49 = 0;
      WTF::fastFree(v22, a2);
    }
    if (HIDWORD(v54))
    {
      v31 = v53;
      v32 = 8 * HIDWORD(v54);
      do
      {
        v33 = *(_DWORD **)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
        {
          if (*v33 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v33, a2);
          else
            *v33 -= 2;
        }
        v31 = (WTF *)((char *)v31 + 8);
        v32 -= 8;
      }
      while (v32);
    }
    v24 = v53;
    if (v55 != (_BYTE *)v53 && v53 != 0)
    {
      v53 = 0;
      LODWORD(v54) = 0;
      WTF::fastFree(v24, a2);
    }
LABEL_37:
    result = (uint64_t)v56;
    if (&v58 != (uint64_t *)v56 && v56 != 0)
    {
      v56 = 0;
      LODWORD(v57) = 0;
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
    if ((result & 0xFF0000) != 0)
    {
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1941030A0);
      }
      v35 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
      *v35 += 2;
    }
    else
    {
      v35 = 0;
    }
    *a3 = v35;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParsing::consumeWhiteSpaceCollapse@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  uint64_t v9;
  unsigned int v10;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this - 569 >= 3 && (unsigned __int16)this != 440)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v9 = this;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194103288);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::CSSPropertyParsing::consumeTextWrapMode@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int *v6;
  unsigned int v7;
  __int128 *v8;
  uint64_t v9;
  unsigned int v10;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  if ((unsigned __int16)this == 726 || (unsigned __int16)this == 481)
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
    {
      {
        v10 = this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = v10;
        v8 = *(__int128 **)v3;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v8 + 24);
      *(_QWORD *)v3 = v8;
    }
    while (1)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v3 + 8))
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v9 = this;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = v9;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v8;
    }
    if (v7 >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x194103468);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v6 += 2;
  }
  else
  {
LABEL_3:
    v6 = 0;
  }
  *a2 = v6;
  return this;
}

const __int16 *WebCore::animationShorthand(WebCore *this)
{
  return WebCore::animationShorthand(void)::animationProperties;
}

uint64_t WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStretchKeywordValue@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  uint64_t result;
  int *v5;

  result = WebCore::CSSPropertyParserHelpers::consumeFontStretchKeywordValueRaw(this, a2);
  if ((result & 0xFF0000) == 0)
  {
    v5 = 0;
LABEL_3:
    *a3 = v5;
    return result;
  }
  if ((unsigned __int16)result < 0x48Eu)
  {
    v5 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v5 += 2;
    goto LABEL_3;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

void *WebCore::borderRightShorthand(WebCore *this)
{
  return &WebCore::borderRightShorthand(void)::borderRightProperties;
}

void *WebCore::textEmphasisShorthand(WebCore *this)
{
  return &WebCore::textEmphasisShorthand(void)::textEmphasisProperties;
}

void *WebCore::insetShorthand(WebCore *this)
{
  return &WebCore::insetShorthand(void)::insetProperties;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  __int128 **v2;
  unint64_t v4;
  __int128 *v5;
  int *v6;
  unsigned int *v7;
  __int128 *v8;

  v2 = (__int128 **)result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_3;
  v7 = *(unsigned int **)result;
  if ((unint64_t)*v2 >= v4)
  {
    v7 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  result = (uint64_t)WebCore::CSSParserToken::id(v7);
  if ((_DWORD)result != 90)
  {
LABEL_3:
    v6 = 0;
LABEL_4:
    *a2 = v6;
    return result;
  }
  v8 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(v2);
  result = (uint64_t)WebCore::CSSParserToken::id((unsigned int *)v8);
  if (result < 0x48E)
  {
    v6 = &WebCore::staticCSSValuePool[4 * result + 3088];
    *v6 += 2;
    goto LABEL_4;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRangeOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  result = WebCore::uncacheWrapper<WebCore::Crypto,WebCore::JSCrypto>(a3, (uint64_t)v3);
  if (v3[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::HTMLTokenizer::flushBufferedEndTag(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _WORD *v10;
  __int16 v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;

  v2 = this;
  *(_WORD *)(this + 538) = 3;
  if (*(_DWORD *)(this + 552))
  {
    v3 = *(unsigned int *)(this + 556);
    this = *(_QWORD *)(this + 544);
    if ((_DWORD)v3)
    {
      v12 = 224 * v3;
      v13 = (WTF *)(this + 96);
      do
      {
        v14 = (WTF *)*((_QWORD *)v13 - 2);
        if (v13 != v14 && v14 != 0)
        {
          *((_QWORD *)v13 - 2) = 0;
          *((_DWORD *)v13 - 2) = 0;
          WTF::fastFree(v14, a2);
        }
        v16 = (WTF *)*((_QWORD *)v13 - 12);
        if ((WTF *)((char *)v13 - 80) != v16 && v16 != 0)
        {
          *((_QWORD *)v13 - 12) = 0;
          *((_DWORD *)v13 - 22) = 0;
          WTF::fastFree(v16, a2);
        }
        v13 = (WTF *)((char *)v13 + 224);
        v12 -= 224;
      }
      while (v12);
      *(_DWORD *)(v2 + 556) = 0;
      this = *(_QWORD *)(v2 + 544);
    }
    if (v2 + 560 != this)
    {
      if (!this)
      {
LABEL_65:
        *(_QWORD *)(v2 + 544) = v2 + 560;
        *(_DWORD *)(v2 + 552) = 10;
        goto LABEL_5;
      }
      *(_QWORD *)(v2 + 544) = 0;
      *(_DWORD *)(v2 + 552) = 0;
      WTF::fastFree((WTF *)this, a2);
      this = *(_QWORD *)(v2 + 544);
    }
    if (this)
      goto LABEL_5;
    goto LABEL_65;
  }
LABEL_5:
  v4 = *(unsigned int *)(v2 + 2980);
  if (!(_DWORD)v4)
    goto LABEL_11;
  v5 = *(unsigned __int8 **)(v2 + 2968);
  v6 = *(unsigned int *)(v2 + 16);
  v7 = *(unsigned int *)(v2 + 20);
  v8 = v7 + v4;
  if (v7 + v4 > v6)
  {
    v18 = v6 + (v6 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v8)
      v20 = v7 + v4;
    else
      v20 = v19;
    v21 = *(void **)(v2 + 8);
    if (v20 < 0x101)
    {
      v22 = (void *)(v2 + 24);
      *(_QWORD *)(v2 + 8) = v2 + 24;
      *(_DWORD *)(v2 + 16) = 256;
    }
    else
    {
      if (v20 >> 31)
        goto LABEL_67;
      v22 = (void *)WTF::fastMalloc((WTF *)(2 * v20));
      *(_DWORD *)(v2 + 16) = v20;
      *(_QWORD *)(v2 + 8) = v22;
    }
    this = (uint64_t)memcpy(v22, v21, 2 * v7);
    if ((void *)(v2 + 24) != v21 && v21)
    {
      if (*(void **)(v2 + 8) == v21)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
      }
      this = WTF::fastFree((WTF *)v21, a2);
    }
  }
  v9 = *(unsigned int *)(v2 + 20);
  if (v8 < v9)
  {
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x1941039D0);
  }
  v10 = (_WORD *)(*(_QWORD *)(v2 + 8) + 2 * v9);
  do
  {
    v11 = *v5++;
    *v10++ = v11;
    --v4;
  }
  while (v4);
  *(_DWORD *)(v2 + 20) = v8;
LABEL_11:
  if (!*(_DWORD *)(v2 + 2976))
    goto LABEL_16;
  if (*(_DWORD *)(v2 + 2980))
    *(_DWORD *)(v2 + 2980) = 0;
  this = *(_QWORD *)(v2 + 2968);
  if (v2 + 2984 == this)
  {
LABEL_15:
    if (this)
      goto LABEL_16;
    goto LABEL_55;
  }
  if (this)
  {
    *(_QWORD *)(v2 + 2968) = 0;
    *(_DWORD *)(v2 + 2976) = 0;
    WTF::fastFree((WTF *)this, a2);
    this = *(_QWORD *)(v2 + 2968);
    goto LABEL_15;
  }
LABEL_55:
  *(_QWORD *)(v2 + 2968) = v2 + 2984;
  *(_DWORD *)(v2 + 2976) = 32;
LABEL_16:
  if (!*(_DWORD *)(v2 + 2848))
    goto LABEL_21;
  if (*(_DWORD *)(v2 + 2852))
    *(_DWORD *)(v2 + 2852) = 0;
  this = *(_QWORD *)(v2 + 2840);
  if (v2 + 2856 == this)
  {
LABEL_20:
    if (this)
      goto LABEL_21;
    goto LABEL_62;
  }
  if (this)
  {
    *(_QWORD *)(v2 + 2840) = 0;
    *(_DWORD *)(v2 + 2848) = 0;
    WTF::fastFree((WTF *)this, a2);
    this = *(_QWORD *)(v2 + 2840);
    goto LABEL_20;
  }
LABEL_62:
  *(_QWORD *)(v2 + 2840) = v2 + 2856;
  *(_DWORD *)(v2 + 2848) = 32;
LABEL_21:
  if (!*(_DWORD *)(v2 + 2928))
    return this;
  if (*(_DWORD *)(v2 + 2932))
    *(_DWORD *)(v2 + 2932) = 0;
  this = *(_QWORD *)(v2 + 2920);
  if (v2 + 2936 != this)
  {
    if (!this)
      goto LABEL_57;
    *(_QWORD *)(v2 + 2920) = 0;
    *(_DWORD *)(v2 + 2928) = 0;
    WTF::fastFree((WTF *)this, a2);
    this = *(_QWORD *)(v2 + 2920);
  }
  if (!this)
  {
LABEL_57:
    *(_QWORD *)(v2 + 2920) = v2 + 2936;
    *(_DWORD *)(v2 + 2928) = 32;
  }
  return this;
}

uint64_t WebCore::Page::setZoomedOutPageScaleFactor(uint64_t this, float a2)
{
  BOOL v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(float *)(this + 360) != a2)
  {
    *(float *)(this + 360) = a2;
    this = *(_QWORD *)(this + 160);
    if (this)
      v2 = *(_BYTE *)(this + 144) == 0;
    else
      v2 = 0;
    if (v2)
    {
      v3 = (unsigned int *)(this + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      this = WebCore::LocalFrame::deviceOrPageScaleFactorChanged((WebCore::LocalFrame *)this);
      do
      {
        v5 = __ldaxr(v3);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v3));
      if (!v6)
      {
        atomic_store(1u, v3);
        v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v7 = off_1E31FE290;
        v7[1] = v3;
        v8 = (uint64_t)v7;
        WTF::ensureOnMainThread();
        this = v8;
        if (v8)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return this;
}

uint64_t WebCore::PlatformCALayerClient::platformCALayerContainsBitmapOnly(WebCore::PlatformCALayerClient *this, const WebCore::PlatformCALayer *a2)
{
  return 0;
}

_DWORD *WebCore::JSMutationRecord::destroy(WebCore::JSMutationRecord *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void PAL::SessionID::enableGenerationProtection(PAL::SessionID *this)
{
  PAL::generationProtectionEnabled = 1;
}

uint64_t WebCore::NativeImage::platformImage(WebCore::NativeImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
}

BOOL WebCore::LocalFrame::isRootFrame(WebCore::LocalFrame *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 79) + 8) == (_QWORD)this;
}

uint64_t WebCore::Page::setDelegatesScaling(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1098) = a2;
  return this;
}

uint64_t WebCore::setAuxiliaryProcessType(uint64_t result)
{
  WebCore::auxiliaryProcessType(void)::auxiliaryProcessType = result | 0x100;
  return result;
}

_QWORD *WebCore::RenderThemeIOS::cssValueToSystemColorMap(WebCore::RenderThemeIOS *this)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _OWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  _OWORD *v20;
  int v21;
  int v22;
  BOOL v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _OWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  _BYTE v44[11];
  __int16 v45;
  __int16 v46;
  char v47;
  unint64_t *v48;

  if ((byte_1ECE81F91 & 1) == 0)
  {
    v2 = 0;
    v3 = 0;
    v39 = 0;
    v46 = 256;
    while (1)
    {
      v4 = 0;
      v5 = 0;
      v38 = v2;
      v6 = *((unsigned __int8 *)&v46 + v3);
      v45 = 256;
      do
      {
        v7 = v4;
        v8 = *((unsigned __int8 *)&v45 + v5);
        WebCore::LocalCurrentTraitCollection::LocalCurrentTraitCollection((WebCore::LocalCurrentTraitCollection *)v44, (_DWORD)v6 != 0, *((_BYTE *)&v45 + v5));
        if ((byte_1ECE81F96 & 1) == 0)
        {
          qword_1ECE82030 = 0;
          qword_1ECE82028 = 0;
          byte_1ECE81F96 = 1;
        }
        v9 = atomic_load(&qword_1ECE81FF8);
        if (v9 != -1)
        {
          v42 = (unint64_t)&v47;
          v48 = &v42;
          std::__call_once(&qword_1ECE81FF8, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cssValueSystemColorInformationList(void)::$_0 &&>>);
        }
        if (HIDWORD(qword_1ECE82030))
        {
          v10 = (unsigned __int16 *)qword_1ECE82028;
          v11 = qword_1ECE82028 + 24 * HIDWORD(qword_1ECE82030);
          while (1)
          {
            v40 = *(_OWORD *)v10;
            v41 = *((_QWORD *)v10 + 2);
            WebCore::systemColorFromCSSValueSystemColorInformation((PAL *)&v42, (uint64_t)&v40, v6 != 0);
            if (v43)
              break;
LABEL_50:
            v10 += 12;
            if (v10 == (unsigned __int16 *)v11)
              goto LABEL_70;
          }
          v13 = *v10;
          v14 = v39;
          if (v39
            || (WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::rehash(&v39, 8u, 0), (v14 = v39) != 0))
          {
            v15 = *(_DWORD *)(v14 - 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = 0;
          v17 = 1;
          v18 = v13;
          while (1)
          {
            v19 = v18 & v15;
            v20 = (_OWORD *)(v14 + 16 * v19);
            v21 = *(_DWORD *)v20;
            v22 = *((unsigned __int8 *)v20 + 4);
            if (!(*(_DWORD *)v20 | v22) && !*((_BYTE *)v20 + 5))
              break;
            v23 = v21 == (_DWORD)v13 && v22 == (_DWORD)v6;
            if (v23 && *((unsigned __int8 *)v20 + 5) == (_DWORD)v8)
              goto LABEL_48;
            if (v21)
              v24 = 1;
            else
              v24 = v22 == 0;
            if (!v24 && *((_BYTE *)v20 + 5))
              v16 = (_OWORD *)(v14 + 16 * v19);
            v18 = v17 + v19;
            ++v17;
          }
          if (v16)
          {
            *v16 = xmmword_1968DE9D0;
            --*(_DWORD *)(v39 - 16);
            v25 = 0x10000000000000;
            v20 = v16;
          }
          else
          {
            v25 = *(_QWORD *)(v14 + 16 * v19 + 8);
          }
          *(_QWORD *)v20 = (v6 << 32) | (v8 << 40) | v13;
          if ((v25 & 0x8000000000000) != 0)
          {
            if ((v42 & 0x8000000000000) == 0
              || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v42 & 0xFFFFFFFFFFFFLL) + 4)
              || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v42 & 0xFFFFFFFFFFFFLL) + 8)
              || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v42 & 0xFFFFFFFFFFFFLL) + 0xC)
              || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v42 & 0xFFFFFFFFFFFFLL) + 0x10)
              || HIBYTE(v25) != HIBYTE(v42)
              || BYTE6(v25) != BYTE6(v42))
            {
              v34 = v20;
              v35 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                atomic_store(1u, v35);
                WTF::fastFree((WTF *)v35, v12);
                v20 = v34;
              }
LABEL_37:
              *((_QWORD *)v20 + 1) = v42;
              v42 = 0;
            }
          }
          else if (v25 != v42 || (v42 & 0x8000000000000) != 0)
          {
            goto LABEL_37;
          }
          v26 = v39;
          if (v39)
            v27 = *(_DWORD *)(v39 - 12) + 1;
          else
            v27 = 1;
          *(_DWORD *)(v39 - 12) = v27;
          v28 = (*(_DWORD *)(v26 - 16) + v27);
          v29 = *(unsigned int *)(v26 - 4);
          if (v29 > 0x400)
          {
            if (v29 <= 2 * v28)
            {
LABEL_44:
              v30 = (_DWORD)v29 << (6 * v27 >= (2 * v29));
              goto LABEL_47;
            }
          }
          else if (3 * v29 <= 4 * v28)
          {
            if ((_DWORD)v29)
              goto LABEL_44;
            v30 = 8;
LABEL_47:
            WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::rehash(&v39, v30, (int *)v20);
          }
LABEL_48:
          if (v43)
          {
            if ((v42 & 0x8000000000000) != 0)
            {
              v31 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                atomic_store(1u, v31);
                WTF::fastFree((WTF *)v31, v12);
              }
            }
          }
          goto LABEL_50;
        }
LABEL_70:
        WebCore::LocalCurrentTraitCollection::~LocalCurrentTraitCollection((WebCore::LocalCurrentTraitCollection *)v44);
        v4 = 1;
        v5 = 1;
      }
      while ((v7 & 1) == 0);
      v2 = 1;
      v3 = 1;
      if ((v38 & 1) != 0)
      {
        qword_1ECE81FA0 = v39;
        byte_1ECE81F91 = 1;
        return &qword_1ECE81FA0;
      }
    }
  }
  return &qword_1ECE81FA0;
}

void sub_194103F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  va_list va;

  va_start(va, a12);
  WebCore::LocalCurrentTraitCollection::~LocalCurrentTraitCollection((WebCore::LocalCurrentTraitCollection *)va);
  if (a7)
  {
    v14 = *(unsigned int *)(a7 - 4);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = a7 + 16 * i;
        if (*(_DWORD *)v16)
          v17 = 1;
        else
          v17 = *(_BYTE *)(v16 + 4) == 0;
        if (v17 || !*(_BYTE *)(v16 + 5))
        {
          v18 = *(_QWORD *)(v16 + 8);
          if ((v18 & 0x8000000000000) != 0)
          {
            v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, v13);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(a7 - 16), v13);
  }
  _Unwind_Resume(a1);
}

id WebCore::systemColorFromCSSValueSystemColorInformation(PAL *a1, uint64_t a2, int a3)
{
  id result;
  WebCore *v7;
  CGColor *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = objc_msgSend((id)PAL::getUIColorClass(a1), *(SEL *)(a2 + 8));
  if (result)
  {
    v7 = (WebCore *)objc_msgSend(result, "CGColor");
    result = (id)WebCore::roundAndClampToSRGBALossy(v7, v8);
    v9 = bswap32(result) | 0x1105000000000000;
    if (BYTE4(result))
      v10 = v9;
    else
      v10 = 0;
    v21 = v10;
    v11 = *(float *)(a2 + 20);
    if (v11 < 1.0)
    {
      result = (id)WebCore::Color::colorWithAlpha((uint64_t)&v21, v11 * (float)((float)v10 / 255.0), &v20);
      if (v10 != v20 || (v20 & 0x8000000000000) != 0)
        v21 = v20;
    }
    if (*(_BYTE *)(a2 + 16))
    {
      if (a3)
        v13 = -16777216;
      else
        v13 = -1;
      v19 = bswap32(v13) | 0x1104000000000000;
      result = WebCore::blendSourceOver((unint64_t *)&v19, (const WebCore::Color *)&v21, &v20);
      *(_QWORD *)a1 = 0;
      if (v20)
      {
        *(_QWORD *)a1 = v20;
        v20 = 0;
      }
      *((_BYTE *)a1 + 8) = 1;
      if ((v19 & 0x8000000000000) != 0)
      {
        result = (id)(v19 & 0xFFFFFFFFFFFFLL);
        do
        {
          v17 = __ldaxr((unsigned int *)result);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)result));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (id)WTF::fastFree((WTF *)result, v14);
        }
      }
      if ((v21 & 0x8000000000000) != 0)
      {
        result = (id)(v21 & 0xFFFFFFFFFFFFLL);
        do
        {
          v15 = __ldaxr((unsigned int *)result);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)result));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)result);
          return (id)WTF::fastFree((WTF *)result, v14);
        }
      }
    }
    else
    {
      *(_QWORD *)a1 = v21;
      *((_BYTE *)a1 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *((_BYTE *)a1 + 8) = 0;
  }
  return result;
}

void sub_194104188(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  if ((a10 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  if ((a12 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebCore::roundAndClampToSRGBALossy(WebCore *this, CGColor *a2)
{
  size_t NumberOfComponents;
  const CGFloat *Components;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  if (!this)
  {
    v10 = 0;
    v11 = 0;
    return v11 | (unint64_t)(v10 << 32);
  }
  NumberOfComponents = CGColorGetNumberOfComponents(this);
  Components = CGColorGetComponents(this);
  if (NumberOfComponents == 4)
  {
    v5 = *Components;
    v6 = Components[1];
    v7 = Components[2];
    v9 = 3;
    goto LABEL_7;
  }
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  if (NumberOfComponents == 2)
  {
    v5 = *Components;
    v9 = 1;
    v6 = v5;
    v7 = v5;
LABEL_7:
    v8 = Components[v9];
  }
  v12 = 1.0;
  if (v5 <= 1.0)
    v13 = v5;
  else
    v13 = 1.0;
  if (v5 < 0.0)
    v13 = 0.0;
  if (v6 <= 1.0)
    v14 = v6;
  else
    v14 = 1.0;
  if (v6 >= 0.0)
    v15 = v14;
  else
    v15 = 0.0;
  if (v7 <= 1.0)
    v16 = v7;
  else
    v16 = 1.0;
  if (v7 >= 0.0)
    v17 = v16;
  else
    v17 = 0.0;
  if (v8 <= 1.0)
    v12 = v8;
  if (v8 >= 0.0)
    v18 = v12;
  else
    v18 = 0.0;
  v19 = llroundf(v13 * 255.0);
  v20 = 255;
  if (v19 >= 255)
    v19 = 255;
  v21 = v19 & ~(v19 >> 63);
  v22 = llroundf(v15 * 255.0);
  if (v22 >= 255)
    v22 = 255;
  v23 = llroundf(v17 * 255.0);
  v24 = v22 & ~(v22 >> 63);
  if (v23 >= 255)
    v25 = 255;
  else
    v25 = v23;
  v26 = v25 & ~(v25 >> 63);
  v27 = llroundf(v18 * 255.0);
  if (v27 < 255)
    v20 = v27;
  v11 = ((v20 & ~(v20 >> 63)) << 24) | (v26 << 16) | (v24 << 8) | v21;
  v10 = 1;
  return v11 | (unint64_t)(v10 << 32);
}

uint64_t PAL::UIColorFunction(PAL *this)
{
  return qword_1ECE7ED30;
}

uint64_t WebCore::RenderBox::computeBackgroundIsKnownToBeObscured(WebCore::RenderBox *this, const WebCore::LayoutPoint *a2)
{
  WebCore::RenderBox *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WebCore::RenderLayerScrollableArea *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  const WebCore::RenderLayerModelObject *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t *v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;

  v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  *(_QWORD *)&v43 = &v49;
  *((_QWORD *)&v43 + 1) = &v49;
  v44 = &v49;
  v45 = &v49;
  v4 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v2 = this;
  *(_QWORD *)&v41 = &v43;
  ((void (*)(__int128 *__return_ptr, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v4])(&v48, &v41, v3 + 16);
  v7 = *((_QWORD *)v2 + 14) + 328;
  if (DWORD2(v48) != 1)
  {
    v49 = *((_QWORD *)v2 + 14) + 328;
    *(_QWORD *)&v43 = &v49;
    *((_QWORD *)&v43 + 1) = &v49;
    v44 = &v49;
    v45 = &v49;
    if (DWORD2(v48) != -1)
    {
      *(_QWORD *)&v41 = &v43;
      ((void (*)(uint64_t *__return_ptr, __int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[DWORD2(v48)])(&v47, &v41, &v48);
      goto LABEL_5;
    }
LABEL_59:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_60:
    v30 = *(WebCore::RenderLayerScrollableArea **)(v21 + 264);
    if (!v30 || !WebCore::RenderLayerScrollableArea::scrollingMayRevealBackground(v30))
      return (*(uint64_t (**)(WebCore::RenderBox *, __int128 *, uint64_t))(*(_QWORD *)v2 + 1608))(v2, &v41, 4);
    return 0;
  }
  v47 = *(_QWORD *)v7;
  if ((v47 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
    do
      LODWORD(v7) = __ldaxr(v22);
    while (__stlxr(v7 + 1, v22));
  }
LABEL_5:
  if (DWORD2(v48) != -1)
    ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[DWORD2(v48)])(&v43, &v48);
  if ((*((_DWORD *)v2 + 31) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)v2 + 13) + 239) & 2) != 0)
  {
    v42 = v47;
  }
  else
  {
    WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)v2 + 10, 61, 1, (WebCore::Color *)&v43);
    if ((_QWORD)v43 == 0x1104000000000000)
    {
      v42 = 0;
      if (v47)
      {
        v42 = v47;
        v47 = 0;
      }
    }
    else
    {
      if ((v47 & 0x8000000000000) != 0)
        v26 = *(float *)((v47 & 0xFFFFFFFFFFFFLL) + 0x10);
      else
        v26 = (float)v47 / 255.0;
      WebCore::Color::colorWithAlpha((uint64_t)&v43, v26, &v42);
      if ((v43 & 0x8000000000000) != 0)
      {
        v27 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v27);
          WTF::fastFree((WTF *)v27, v6);
        }
      }
    }
    if ((v47 & 0x8000000000000) != 0)
    {
      v23 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v6);
      }
    }
  }
  if ((v42 & 0x8000000000000) != 0)
  {
    v31 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v42 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
      v40 = 1;
      goto LABEL_65;
    }
  }
  else if ((_BYTE)v42)
  {
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 16) + 8);
  if (*(_QWORD *)(v7 + 8))
  {
    do
    {
      v39 = *(_QWORD *)(v7 + 16);
      v8 = v39 != 0;
      if (v39)
        break;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  else
  {
    if (*(_QWORD *)(v7 + 16))
      v7 = (uint64_t)WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v7 = 0;
    v8 = v7 != 0;
  }
  if ((v42 & 0x8000000000000) == 0)
    goto LABEL_17;
  v40 = v8;
  v31 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
  do
  {
LABEL_65:
    v32 = __ldaxr(v31);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v31));
  if (!v33)
  {
    atomic_store(1u, v31);
    WTF::fastFree((WTF *)v31, v6);
    if ((v40 & 1) == 0)
      return 0;
    goto LABEL_18;
  }
  v8 = v40;
LABEL_17:
  if (!v8)
    return 0;
LABEL_18:
  result = 0;
  v10 = *((unsigned __int8 *)v2 + 46);
  if (v10 != 35 && v10 != 63)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)v2 + 3) + 8))
      return 0;
    v11 = *((_QWORD *)v2 + 20);
    v12 = ((int)(v11 - (v7 & 0xFFFFFFC0) + 32) >> 6) + (int)v11 / 64;
    v13 = ((int)(HIDWORD(v11) - (v11 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v11) / 64;
    *(_QWORD *)&v48 = 0;
    v14 = v12 << 6;
    if (v12 < -33554432)
      v14 = 0x80000000;
    if (v12 <= 0x1FFFFFF && v13 <= 0x1FFFFFF)
    {
      if (v13 >= -33554432)
        v16 = v13 << 6;
      else
        v16 = 0x80000000;
    }
    else
    {
      if (v12 >= 0x2000000)
        v14 = 0x7FFFFFFF;
      if (v13 >= -33554432)
        v38 = v13 << 6;
      else
        v38 = 0x80000000;
      if (v13 <= 0x1FFFFFF)
        v16 = v38;
      else
        v16 = 0x7FFFFFFF;
    }
    *((_QWORD *)&v48 + 1) = __PAIR64__(v16, v14);
    WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v2 + 80, 61, 0, (unint64_t *)&v49);
    v18 = v49;
    v19 = v49 & 0x8000000000000;
    if ((v49 & 0x8000000000000) != 0)
    {
      if (*(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
        goto LABEL_33;
    }
    else if ((_BYTE)v49)
    {
      goto LABEL_33;
    }
    v34 = *(const WebCore::RenderLayerModelObject **)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 16) + 8);
    if (*((_QWORD *)v34 + 2) && !*((_QWORD *)v34 + 1))
    {
      WebCore::BackgroundPainter::calculateBackgroundImageGeometry(v2, 0, v34, a2, (const WebCore::LayoutPoint *)&v48, (uint64_t)&v43);
      v41 = v43;
      v20 = v46 == 0;
      v18 = v49;
      v19 = v49 & 0x8000000000000;
LABEL_34:
      if (v19)
      {
        v35 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          WTF::fastFree((WTF *)v35, v17);
        }
      }
      if (!v20)
        return 0;
      v21 = *((_QWORD *)v2 + 18);
      if (!v21)
        return (*(uint64_t (**)(WebCore::RenderBox *, __int128 *, uint64_t))(*(_QWORD *)v2 + 1608))(v2, &v41, 4);
      goto LABEL_60;
    }
LABEL_33:
    v41 = v48;
    v20 = 1;
    goto LABEL_34;
  }
  return result;
}

uint64_t WebCore::LocalFrameView::documentBackgroundColor@<X0>(uint64_t this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  WebCore::RenderObject *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  WTF *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;

  v3 = this;
  v5 = *(_QWORD *)(this + 328);
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
  {
    this = *(_QWORD *)(v6 + 8);
    if (this)
    {
      this = WebCore::Page::outermostFullscreenDocument((WebCore::Page *)this);
      v7 = this;
      if (this)
        goto LABEL_6;
      v5 = *(_QWORD *)(v3 + 328);
    }
  }
  v7 = *(_QWORD *)(v5 + 296);
  if (!v7)
  {
    *a3 = 0;
    return this;
  }
LABEL_6:
  v8 = *(_QWORD *)(v7 + 1272);
  if (!v8)
  {
    v61 = 0;
    v62 = 0;
    goto LABEL_35;
  }
  if ((*(_WORD *)(v8 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
    && (v9 = *(_QWORD *)(v8 + 80)) != 0)
  {
    while ((*(_WORD *)(v9 + 28) & 0x10) == 0)
    {
      v9 = *(_QWORD *)(v9 + 56);
      if (!v9)
        goto LABEL_20;
    }
    v10 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
    if (v11 != v10)
    {
LABEL_14:
      if (v11 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
      {
        while (1)
        {
          v9 = *(_QWORD *)(v9 + 56);
          if (!v9)
            break;
          if ((*(_WORD *)(v9 + 28) & 0x10) != 0)
          {
            v11 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
            if (v11 != v10)
              goto LABEL_14;
            break;
          }
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_20:
  v61 = 0;
  v62 = 0;
  v12 = *(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    if ((*(_BYTE *)(v12 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194104B20);
    }
    this = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v12 + 80, 61, 0, &v60);
    v13 = v62;
    if ((v62 & 0x8000000000000) != 0)
    {
      if ((v60 & 0x8000000000000) == 0)
        goto LABEL_25;
      v64 = *(_OWORD *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
      v63 = *(_OWORD *)((v60 & 0xFFFFFFFFFFFFLL) + 4);
      this = WebCore::operator==<float,4ul>((float *)&v64, (float *)&v63);
      v13 = v62;
      if (!(_DWORD)this || HIBYTE(v62) != HIBYTE(v60) || BYTE6(v62) != BYTE6(v60))
        goto LABEL_25;
      v13 = v60;
    }
    else if (v62 != v60 || (v60 & 0x8000000000000) != 0)
    {
LABEL_25:
      if ((v13 & 0x8000000000000) != 0)
      {
        this = v13 & 0xFFFFFFFFFFFFLL;
        do
        {
          v45 = __ldaxr((unsigned int *)this);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, (unsigned int *)this));
        if (!v46)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
      v62 = v60;
      goto LABEL_27;
    }
    if ((v13 & 0x8000000000000) != 0)
    {
      this = v13 & 0xFFFFFFFFFFFFLL;
      do
      {
        v52 = __ldaxr((unsigned int *)this);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, (unsigned int *)this));
      if (!v53)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
  }
LABEL_27:
  if (!v9 || (*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_35;
  if ((*(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194104B40);
  }
  this = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 80, 61, 0, &v60);
  v14 = v61;
  if ((v61 & 0x8000000000000) != 0)
  {
    if ((v60 & 0x8000000000000) == 0)
      goto LABEL_33;
    v64 = *(_OWORD *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
    v63 = *(_OWORD *)((v60 & 0xFFFFFFFFFFFFLL) + 4);
    this = WebCore::operator==<float,4ul>((float *)&v64, (float *)&v63);
    v14 = v61;
    if (!(_DWORD)this || HIBYTE(v61) != HIBYTE(v60) || BYTE6(v61) != BYTE6(v60))
      goto LABEL_33;
    v14 = v60;
  }
  else if (v61 != v60 || (v60 & 0x8000000000000) != 0)
  {
LABEL_33:
    if ((v14 & 0x8000000000000) != 0)
    {
      this = v14 & 0xFFFFFFFFFFFFLL;
      do
      {
        v47 = __ldaxr((unsigned int *)this);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, (unsigned int *)this));
      if (!v48)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
    v61 = v60;
    goto LABEL_35;
  }
  if ((v14 & 0x8000000000000) != 0)
  {
    this = v14 & 0xFFFFFFFFFFFFLL;
    do
    {
      v54 = __ldaxr((unsigned int *)this);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, (unsigned int *)this));
    if (!v55)
    {
      atomic_store(1u, (unsigned int *)this);
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
LABEL_35:
  v15 = *(_QWORD *)(v7 + 1992);
  if (v15)
  {
    ++*(_DWORD *)(v15 + 8);
    v16 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8);
    v17 = *(uint64_t **)(v16 + 3096);
    if (v17)
    {
      v29 = 0;
      v30 = (uint64_t *)(v16 + 3104);
      while (1)
      {
        v31 = v29 ? v29 + 1 : v30;
        v29 = (uint64_t *)*v31;
        v32 = *v29;
        if ((*(_BYTE *)(*v29 + 54) & 0x40) != 0)
          break;
        if (v29 == v17)
          goto LABEL_37;
      }
      v35 = *(_DWORD *)(v32 + 24);
      *(_DWORD *)(v32 + 24) = v35 + 2;
      v36 = (WebCore::RenderObject *)(*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL);
      if (v36)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194104F30);
        }
        this = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v36 + 80, 61, 0, (unint64_t *)&v64);
        if ((*((_BYTE *)v36 + 21) & 0x40) != 0
          && (this = WebCore::RenderObject::rareData(v36), (v56 = *(WTF **)(this + 16)) != 0))
        {
          ++*(_DWORD *)v56;
          v57 = *((_QWORD *)v56 + 1);
          if (v57)
          {
            this = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v57 + 80, 61, 0, (unint64_t *)&v63);
          }
          else
          {
            *(_QWORD *)&v63 = 0;
            if ((_QWORD)v64)
            {
              *(_QWORD *)&v63 = v64;
              *(_QWORD *)&v64 = 0;
            }
          }
          if (*(_DWORD *)v56 == 1)
            this = WTF::fastFree(v56, a2);
          else
            --*(_DWORD *)v56;
        }
        else
        {
          *(_QWORD *)&v63 = 0;
          if ((_QWORD)v64)
          {
            *(_QWORD *)&v63 = v64;
            *(_QWORD *)&v64 = 0;
          }
        }
        if ((v64 & 0x8000000000000) != 0)
        {
          this = v64 & 0xFFFFFFFFFFFFLL;
          do
          {
            v58 = __ldaxr((unsigned int *)this);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, (unsigned int *)this));
          if (!v59)
          {
            atomic_store(1u, (unsigned int *)this);
            this = WTF::fastFree((WTF *)this, a2);
          }
        }
        v35 = *(_DWORD *)(v32 + 24) - 2;
      }
      else
      {
        *(_QWORD *)&v63 = 0;
      }
      if (v35)
      {
        *(_DWORD *)(v32 + 24) = v35;
      }
      else if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)v32);
      }
    }
    else
    {
LABEL_37:
      *(_QWORD *)&v63 = 0;
    }
    v18 = *(_DWORD *)(v15 + 8);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x194104B00);
    }
    *(_DWORD *)(v15 + 8) = v18 - 1;
    if ((BYTE6(v63) & 4) != 0)
    {
      if ((v61 & 0x4000000000000) != 0)
      {
        WebCore::blendSourceOver(&v61, (const WebCore::Color *)&v63, &v64);
        this = (uint64_t)WebCore::Color::operator=(&v61, &v64);
        if ((v64 & 0x8000000000000) != 0)
        {
          this = v64 & 0xFFFFFFFFFFFFLL;
          do
          {
            v27 = __ldaxr((unsigned int *)this);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, (unsigned int *)this));
          if (!v28)
          {
            atomic_store(1u, (unsigned int *)this);
            this = WTF::fastFree((WTF *)this, a2);
          }
        }
      }
      else
      {
        this = (uint64_t)WebCore::Color::operator=(&v61, &v63);
      }
    }
  }
  else
  {
    *(_QWORD *)&v63 = 0;
  }
  if ((v61 & 0x4000000000000) != 0)
  {
    if ((v62 & 0x4000000000000) != 0)
    {
      v19 = *(_QWORD *)(v3 + 1024);
      v60 = v19;
      if ((v19 & 0x8000000000000) != 0)
      {
        v23 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
      }
      WebCore::blendSourceOver(&v60, (const WebCore::Color *)&v62, &v64);
      this = (uint64_t)WebCore::blendSourceOver((unint64_t *)&v64, (const WebCore::Color *)&v61, a3);
      if ((v64 & 0x8000000000000) != 0)
      {
        this = v64 & 0xFFFFFFFFFFFFLL;
        do
        {
          v49 = __ldaxr((unsigned int *)this);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, (unsigned int *)this));
        if (!v50)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
      if ((v60 & 0x8000000000000) == 0)
        goto LABEL_45;
      this = v60 & 0xFFFFFFFFFFFFLL;
      do
      {
        v51 = __ldaxr((unsigned int *)this);
        v22 = --v51 == 0;
      }
      while (__stlxr(v51, (unsigned int *)this));
    }
    else
    {
      v25 = *(_QWORD *)(v3 + 1024);
      *(_QWORD *)&v64 = v25;
      if ((v25 & 0x8000000000000) != 0)
      {
        v37 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
      }
      this = (uint64_t)WebCore::blendSourceOver((unint64_t *)&v64, (const WebCore::Color *)&v61, a3);
      if ((v64 & 0x8000000000000) == 0)
        goto LABEL_45;
      this = v64 & 0xFFFFFFFFFFFFLL;
      do
      {
        v26 = __ldaxr((unsigned int *)this);
        v22 = --v26 == 0;
      }
      while (__stlxr(v26, (unsigned int *)this));
    }
    goto LABEL_128;
  }
  if ((v62 & 0x4000000000000) != 0)
  {
    v20 = *(_QWORD *)(v3 + 1024);
    *(_QWORD *)&v64 = v20;
    if ((v20 & 0x8000000000000) != 0)
    {
      v33 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
    }
    this = (uint64_t)WebCore::blendSourceOver((unint64_t *)&v64, (const WebCore::Color *)&v62, a3);
    if ((v64 & 0x8000000000000) == 0)
      goto LABEL_45;
    this = v64 & 0xFFFFFFFFFFFFLL;
    do
    {
      v21 = __ldaxr((unsigned int *)this);
      v22 = --v21 == 0;
    }
    while (__stlxr(v21, (unsigned int *)this));
LABEL_128:
    if (v22)
    {
      atomic_store(1u, (unsigned int *)this);
      this = WTF::fastFree((WTF *)this, a2);
    }
    goto LABEL_45;
  }
  *a3 = 0;
LABEL_45:
  if ((v63 & 0x8000000000000) != 0)
  {
    this = v63 & 0xFFFFFFFFFFFFLL;
    do
    {
      v39 = __ldaxr((unsigned int *)this);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, (unsigned int *)this));
    if (!v40)
    {
      atomic_store(1u, (unsigned int *)this);
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  if ((v61 & 0x8000000000000) != 0)
  {
    this = v61 & 0xFFFFFFFFFFFFLL;
    do
    {
      v41 = __ldaxr((unsigned int *)this);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)this));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)this);
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  if ((v62 & 0x8000000000000) != 0)
  {
    this = v62 & 0xFFFFFFFFFFFFLL;
    do
    {
      v43 = __ldaxr((unsigned int *)this);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, (unsigned int *)this));
    if (!v44)
    {
      atomic_store(1u, (unsigned int *)this);
      return WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

unsigned int *WebCore::RenderStyle::visitedDependentColorWithColorFilter@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unsigned int *result;
  void *v9;
  unsigned int v10;
  BOOL v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 320) + 20))
  {
    WebCore::RenderStyle::visitedDependentColor(a1, a2, a3, (uint64_t *)&v17);
    result = (unsigned int *)WebCore::RenderStyle::colorByApplyingColorFilter(a1, (const WebCore::Color *)&v17, a4);
    if ((v17 & 0x8000000000000) == 0)
      return result;
    result = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(result);
      v11 = --v15 == 0;
    }
    while (__stlxr(v15, result));
    goto LABEL_14;
  }
  result = (unsigned int *)WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)a1, a2, 0, (WebCore::Color *)&v17);
  if ((*(_DWORD *)(a1 + 44) & 0xC00) != 0x800
    || (a3 & 0x20000) != 0
    || (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 239) & 2) != 0)
  {
    *a4 = v17;
    return result;
  }
  result = (unsigned int *)WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)a1, a2, 1, (WebCore::Color *)&v16);
  if (a2 == 61 && v16 == 0x1104000000000000)
  {
    *a4 = 0;
    if (v17)
    {
      *a4 = v17;
      v17 = 0;
    }
  }
  else
  {
    if ((v17 & 0x8000000000000) != 0)
      v12 = *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10);
    else
      v12 = (float)v17 / 255.0;
    result = (unsigned int *)WebCore::Color::colorWithAlpha((uint64_t)&v16, v12, (uint64_t *)a4);
    if ((v16 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, result));
      if (!v14)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  if ((v17 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(result);
      v11 = --v10 == 0;
    }
    while (__stlxr(v10, result));
LABEL_14:
    if (v11)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  return result;
}

unint64_t *WebCore::blendSourceOver@<X0>(unint64_t *this@<X0>, const WebCore::Color *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  float v10;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t *v32;
  char v34;
  char v35;

  v4 = *this;
  if ((*this & 0x8000000000000) != 0)
  {
    if (*(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
      goto LABEL_5;
  }
  else if (!*this)
  {
    goto LABEL_5;
  }
  if ((*(_QWORD *)a2 & 0x8000000000000) == 0)
  {
    if (*(_QWORD *)a2 == 255)
      goto LABEL_5;
    if (!*(_QWORD *)a2)
      goto LABEL_8;
    goto LABEL_17;
  }
  v10 = *(float *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFLL) + 0x10);
  if (v10 == 1.0)
  {
LABEL_5:
    v5 = *(_QWORD *)a2;
    *a3 = *(_QWORD *)a2;
    if ((v5 & 0x8000000000000) != 0)
    {
      v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    return this;
  }
  if (v10 <= 0.0)
  {
LABEL_8:
    *a3 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    return this;
  }
LABEL_17:
  v32 = this;
  v12 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>(this, (uint64_t)&v34);
  v13 = HIBYTE(v12);
  this = (unint64_t *)WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>((unint64_t *)a2, (uint64_t)&v35);
  if (!HIBYTE(v12))
    goto LABEL_18;
  v17 = this >> 24;
  if (this >> 24)
  {
    if (v17 == 255)
    {
LABEL_18:
      v14 = *(_QWORD *)a2;
      *a3 = *(_QWORD *)a2;
      if ((v14 & 0x8000000000000) != 0)
      {
        v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      return this;
    }
    v18 = 255 * (v17 + v13) - v17 * v13;
    v19 = (v17 ^ 0xFF) * v13;
    v20 = 255 * v17;
    v21 = (v20 * this + v19 * v12) / v18;
    v22 = (v20 * BYTE1(this) + v19 * BYTE1(v12)) / v18;
    v23 = (v20 * BYTE2(this) + v19 * BYTE2(v12)) / v18;
    if (v21 >= 255)
      v21 = 255;
    v24 = v21 & ~(v21 >> 31);
    if (v22 >= 255)
      v25 = 255;
    else
      v25 = v22;
    v26 = v25 & ~(v25 >> 31);
    if (v23 >= 255)
      v23 = 255;
    v27 = v23 & ~(v23 >> 31);
    if (v18 / 255 >= 255)
      v28 = 255;
    else
      v28 = v18 / 255;
    *a3 = bswap32((v27 << 16) | ((v28 & ~(v28 >> 31)) << 24) | (v26 << 8) | v24) | 0x1104000000000000;
  }
  else
  {
    v29 = *v32;
    *a3 = *v32;
    if ((v29 & 0x8000000000000) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
  }
  return this;
}

uint64_t WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  __int128 v4;
  _QWORD v5[2];

  v2 = *a1;
  if ((*a1 & 0x8000000000000) == 0)
    return bswap32(v2);
  v4 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
  v5[0] = a2;
  v5[1] = &v4;
  return _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIhNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)v5);
}

unsigned int *WebCore::RenderBox::updateFromStyle(WebCore::RenderBox *this)
{
  WebCore::RenderBox *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *result;
  void *v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t (*v8)();
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _BOOL4 v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  unsigned int v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)();
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t i;
  uint64_t v63;
  uint64_t v65;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int *v79;
  char v80;
  uint64_t v81;
  _BYTE v82[20];
  __int128 v83;
  char v84;
  _BYTE v85[20];
  __int128 v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t **v97;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  v93 = &v92;
  v94 = &v92;
  v95 = &v92;
  v96 = &v92;
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 != -1)
  {
    v1 = this;
    v97 = &v93;
    result = (unsigned int *)((unsigned int *(*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v3])(&v90, &v97, v2 + 16);
    if (v91 == 1)
    {
      v89 = *(_QWORD *)(*((_QWORD *)v1 + 14) + 328);
      if ((v89 & 0x8000000000000) != 0)
      {
        v43 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFLL);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 + 1, v43));
      }
LABEL_5:
      if (v91 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v91])(&v93, &v90);
      if ((*((_DWORD *)v1 + 31) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)v1 + 13) + 239) & 2) != 0)
      {
        v88 = v89;
      }
      else
      {
        result = (unsigned int *)WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)v1 + 10, 61, 1, (WebCore::Color *)&v93);
        if (v93 == (uint64_t *)0x1104000000000000)
        {
          v88 = 0;
          if (v89)
          {
            v88 = v89;
            v89 = 0;
          }
        }
        else
        {
          if ((v89 & 0x8000000000000) != 0)
            v56 = *(float *)((v89 & 0xFFFFFFFFFFFFLL) + 0x10);
          else
            v56 = (float)v89 / 255.0;
          result = (unsigned int *)WebCore::Color::colorWithAlpha((uint64_t)&v93, v56, &v88);
          if (((unint64_t)v93 & 0x8000000000000) != 0)
          {
            result = (unsigned int *)((unint64_t)v93 & 0xFFFFFFFFFFFFLL);
            do
            {
              v57 = __ldaxr(result);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, result));
            if (!v58)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
            }
          }
        }
        if ((v89 & 0x8000000000000) != 0)
        {
          result = (unsigned int *)(v89 & 0xFFFFFFFFFFFFLL);
          do
          {
            v54 = __ldaxr(result);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, result));
          if (!v55)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
          }
        }
      }
      v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      if ((v88 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v88 & 0xFFFFFFFFFFFFLL);
        if (*(float *)((v88 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
        {
          v9 = 1;
          goto LABEL_188;
        }
      }
      else if ((_BYTE)v88)
      {
        goto LABEL_96;
      }
      v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 11) + 16) + 8);
      if (*(_QWORD *)(v7 + 8))
      {
        do
        {
          v81 = *(_QWORD *)(v7 + 16);
          v9 = v81 != 0;
          if (v81)
            break;
          v7 = *(_QWORD *)(v7 + 8);
        }
        while (v7);
      }
      else
      {
        if (*(_QWORD *)(v7 + 16))
          v8 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v8 = 0;
        v9 = v8 != 0;
      }
      if ((v88 & 0x8000000000000) == 0)
        goto LABEL_17;
      result = (unsigned int *)(v88 & 0xFFFFFFFFFFFFLL);
      do
      {
LABEL_188:
        v76 = __ldaxr(result);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, result));
      if (!v77)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
      }
      v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
LABEL_17:
      if (v9)
        goto LABEL_96;
      v10 = *((_QWORD *)v1 + 11);
      v11 = *(_QWORD *)(v10 + 24);
      if (*(float *)(v11 + 120) != 0.0 && (*(_BYTE *)(v11 + 124) & 0xF) != 0)
      {
        if (!*(_DWORD *)(v11 + 112))
        {
          v50 = *(_QWORD *)(v11 + 104);
          if ((v50 & 0x4000000000000) != 0)
          {
            if ((v50 & 0x8000000000000) != 0)
            {
              if (*(float *)((v50 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                goto LABEL_20;
            }
            else if (!*(_QWORD *)(v11 + 104))
            {
              goto LABEL_20;
            }
          }
        }
        if ((*(_BYTE *)(v11 + 124) & 0xF) != 1)
          goto LABEL_96;
      }
LABEL_20:
      if (*(float *)(v11 + 144) != 0.0 && (*(_BYTE *)(v11 + 148) & 0xF) != 0)
      {
        if (!*(_DWORD *)(v11 + 136))
        {
          v51 = *(_QWORD *)(v11 + 128);
          if ((v51 & 0x4000000000000) != 0)
          {
            if ((v51 & 0x8000000000000) != 0)
            {
              if (*(float *)((v51 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                goto LABEL_22;
            }
            else if (!*(_QWORD *)(v11 + 128))
            {
              goto LABEL_22;
            }
          }
        }
        if ((*(_BYTE *)(v11 + 148) & 0xF) != 1)
          goto LABEL_96;
      }
LABEL_22:
      if (*(float *)(v11 + 168) != 0.0 && (*(_BYTE *)(v11 + 172) & 0xF) != 0)
      {
        if (!*(_DWORD *)(v11 + 160))
        {
          v52 = *(_QWORD *)(v11 + 152);
          if ((v52 & 0x4000000000000) != 0)
          {
            if ((v52 & 0x8000000000000) != 0)
            {
              if (*(float *)((v52 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                goto LABEL_24;
            }
            else if (!*(_QWORD *)(v11 + 152))
            {
              goto LABEL_24;
            }
          }
        }
        if ((*(_BYTE *)(v11 + 172) & 0xF) != 1)
          goto LABEL_96;
      }
LABEL_24:
      if (*(float *)(v11 + 192) == 0.0 || (*(_BYTE *)(v11 + 196) & 0xF) == 0)
      {
LABEL_26:
        if (!*(_QWORD *)(*(_QWORD *)(v11 + 200) + 8))
          v6 = 0;
        if (!v6)
        {
          v12 = *(_QWORD *)(v10 + 32);
          if ((*(_DWORD *)(v12 + 148) & 0x1FC000) == 0)
          {
            v13 = *(_QWORD *)(v12 + 88);
            v14 = (unsigned int *)((char *)v1 + 20);
            v15 = *((_DWORD *)v1 + 5);
            if (!v13)
            {
              v15 &= 0x9FFFFFFF;
              goto LABEL_32;
            }
LABEL_97:
            if ((v15 & 0x60000000) != 0)
              goto LABEL_33;
            v15 = v15 & 0x9FFFFFFF | 0x20000000;
LABEL_32:
            *v14 = v15;
LABEL_33:
            v16 = *((_QWORD *)v1 + 12);
            v18 = (v16 & 0x1Fu) > 0x19 || ((1 << (v16 & 0x1F)) & 0x3528029) == 0;
            v19 = v15 & 0xFE7FFFFE | (((v16 >> 19) & 3) << 23) | v18;
            *((_DWORD *)v1 + 5) = v19;
            v20 = (unsigned __int16)*((_DWORD *)v1 + 31) >> 13;
            switch((unsigned __int16)*((_DWORD *)v1 + 31) >> 13)
            {
              case 1:
                *v14 = v19 & 0xFFFFEFFF;
                goto LABEL_212;
              case 2:
              case 4:
                *v14 = v19 | 0x1000;
                goto LABEL_42;
              case 3:
              case 5:
                v21 = 4096;
                goto LABEL_40;
              default:
                v21 = 0;
LABEL_40:
                *v14 = v21 | v19 & 0xFFFFEFFF;
                if (v20 <= 5 && ((1 << v20) & 0x2A) != 0)
LABEL_212:
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 1383) = 1;
LABEL_42:
                v22 = *(_QWORD *)(*((_QWORD *)v1 + 11) + 40);
                v23 = *(_BYTE *)(v22 + 462);
                v24 = *(_BYTE *)(v22 + 642) & 3;
                if (v24 == 2)
                {
                  v80 = 25;
                }
                else
                {
                  if (v24 != 1)
                    goto LABEL_44;
                  v80 = 21;
                }
                v23 |= v80;
LABEL_44:
                if ((v23 & 2) != 0)
                {
                  if ((*(_BYTE *)v14 & 1) != 0
                    || (v78 = v14,
                        result = (unsigned int *)WebCore::RenderObject::isAtomicInlineLevelBox(v1),
                        v14 = v78,
                        (_DWORD)result))
                  {
                    if ((*((_QWORD *)v1 + 12) & 0x1FLL) != 0x19
                      && (*((unsigned __int8 *)v1 + 46) - 36 > 4 || (*((_BYTE *)v1 + 52) & 7) == 1))
                    {
                      v26 = *v14;
LABEL_172:
                      v25 = 0x80000;
                      goto LABEL_47;
                    }
                  }
                }
                if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 11) + 40) + 636) & 0xC0000) == 0
                  || (*(_BYTE *)v14 & 1) == 0
                  && (v79 = v14,
                      result = (unsigned int *)WebCore::RenderObject::isAtomicInlineLevelBox(v1),
                      v14 = v79,
                      !(_DWORD)result)
                  || (*((_QWORD *)v1 + 12) & 0x1FLL) == 0x19
                  || (v67 = *((unsigned __int8 *)v1 + 46), (v67 - 36) <= 4) && v67 != 36)
                {
                  v25 = 0;
                  v26 = *v14;
                  goto LABEL_47;
                }
                v68 = v67 == 63 || v67 == 35;
                v26 = *v14;
                if (!v68)
                  goto LABEL_172;
                v25 = 0;
LABEL_47:
                v27 = v26 & 0xFFF7FFFF | v25;
                *((_DWORD *)v1 + 5) = v27;
                v28 = *((_QWORD *)v1 + 3);
                v29 = *(_QWORD *)(v28 + 8);
                v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 8) + 1272);
                if ((v30 == v29 || *((_BYTE *)v1 + 46) == 49) && (v27 & 0x60000000) == 0)
                  v27 = v27 & 0x9FFFFFFF | 0x20000000;
                v31 = *((_QWORD *)v1 + 12);
                if ((v31 & 0xE000000) == 0 || (v27 & 0x1800000) == 0x1000000)
                  v33 = 0;
                else
                  v33 = 2048;
                v34 = v33 | v27 & 0xFFFFF7FF;
                *((_DWORD *)v1 + 5) = v34;
                if ((v27 & 0x80000) != 0 || (v31 & 0x1C00) != 0)
                {
                  if (v30 == v29)
                    goto LABEL_62;
                }
                else if (v30 == v29 || (v31 & 0xE000) == 0)
                {
                  goto LABEL_62;
                }
                if ((*((_BYTE *)v1 + 45) & 0x40) == 0)
                  goto LABEL_62;
                if ((*((_BYTE *)v1 + 45) & 1) == 0)
                {
                  v45 = *(_QWORD *)(v28 + 8);
                  if (v45)
                  {
                    v46 = *(_WORD *)(v45 + 28);
                    if ((v46 & 0x10) != 0)
                    {
                      v47 = *(_QWORD *)(*(_QWORD *)(v45 + 96) + 24);
                      if (v47 == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                      {
                        v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 40) + 8) + 1272);
                        v61 = *(_QWORD *)(v60 + 64) & 0xFFFFFFFFFFFFLL;
                        if (v61 && (*(_BYTE *)((*(_QWORD *)(v60 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x194105D60);
                        }
                        if ((*(_WORD *)(v60 + 28) & 0x10) != 0
                          && *(_QWORD *)(*(_QWORD *)(v60 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
                        {
                          for (i = *(_QWORD *)(v60 + 80); i; i = *(_QWORD *)(i + 56))
                          {
                            if ((*(_WORD *)(i + 28) & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == v47)
                              break;
                          }
                          if ((v46 & 8) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x194105D40);
                          }
                          if (i == v45 && (*(_BYTE *)(v61 + 22) & 8) == 0 && (*(_QWORD *)(v61 + 96) & 0x1C00) == 0)
                          {
                            v63 = *(_QWORD *)(*((_QWORD *)v1 + 11) + 40);
                            if ((*(_BYTE *)(v63 + 642) & 3u) - 3 <= 0xFFFFFFFD && *(_BYTE *)(v63 + 462) == 0)
                            {
                              v65 = *(_QWORD *)(*(_QWORD *)(v61 + 88) + 40);
                              if ((*(_BYTE *)(v65 + 642) & 3u) - 3 <= 0xFFFFFFFD && *(_BYTE *)(v65 + 462) == 0)
                                goto LABEL_62;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (WebCore::RenderBox::s_hadNonVisibleOverflow)
                  goto LABEL_93;
                v48 = *((_QWORD *)v1 + 24);
                v49 = WTF::RefPtr<WebCore::RenderOverflow,WTF::RawPtrTraits<WebCore::RenderOverflow>,WTF::DefaultRefDerefTraits<WebCore::RenderOverflow>>::unspecifiedBoolTypeInstance;
                if (!v48)
                  v49 = 0;
                if (!v49)
                  goto LABEL_93;
                goto LABEL_175;
            }
          }
        }
LABEL_96:
        v14 = (unsigned int *)((char *)v1 + 20);
        v15 = *((_DWORD *)v1 + 5);
        goto LABEL_97;
      }
      if (!*(_DWORD *)(v11 + 184))
      {
        v53 = *(_QWORD *)(v11 + 176);
        if ((v53 & 0x4000000000000) != 0)
        {
          if ((v53 & 0x8000000000000) != 0)
          {
            if (*(float *)((v53 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_26;
          }
          else if (!*(_QWORD *)(v11 + 176))
          {
            goto LABEL_26;
          }
        }
      }
      if ((*(_BYTE *)(v11 + 196) & 0xF) != 1)
        goto LABEL_96;
      goto LABEL_26;
    }
    v92 = *((_QWORD *)v1 + 14) + 328;
    v93 = &v92;
    v94 = &v92;
    v95 = &v92;
    v96 = &v92;
    if (v91 != -1)
    {
      v97 = &v93;
      result = (unsigned int *)((unsigned int *(*)(uint64_t *__return_ptr, uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v91])(&v89, &v97, &v90);
      goto LABEL_5;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_175:
  if (v48)
  {
    v69 = *(_QWORD *)(v48 + 20);
    v70 = (uint64_t *)(v48 + 28);
  }
  else
  {
    v69 = 0;
    v70 = (uint64_t *)((char *)v1 + 160);
  }
  v71 = *v70;
  *(_QWORD *)&v86 = v69;
  *((_QWORD *)&v86 + 1) = v71;
  v87 = 1;
  v85[0] = 0;
  v85[16] = 0;
  WebCore::RenderObject::issueRepaint((uint64_t)v1, &v86, 1, 1, (uint64_t)v85);
  *(_QWORD *)&v83 = WebCore::RenderBox::layoutOverflowRect(v1);
  *((_QWORD *)&v83 + 1) = v72;
  v84 = 1;
  v82[0] = 0;
  v82[16] = 0;
  result = (unsigned int *)WebCore::RenderObject::issueRepaint((uint64_t)v1, &v83, 1, 1, (uint64_t)v82);
  v34 = *((_DWORD *)v1 + 5);
LABEL_93:
  v34 |= 0x10000u;
  *((_DWORD *)v1 + 5) = v34;
LABEL_62:
  v36 = *((_QWORD *)v1 + 11);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 32) + 40) + 20))
    goto LABEL_63;
  v41 = *(_QWORD *)(v36 + 40);
  if (*(_QWORD *)(v41 + 328))
    goto LABEL_63;
  if (*(_QWORD *)(v41 + 320))
    goto LABEL_63;
  if (*(_QWORD *)(v41 + 312))
    goto LABEL_63;
  if (*(_QWORD *)(v41 + 304))
    goto LABEL_63;
  v42 = *(_DWORD *)(v41 + 636);
  if ((v42 & 0x180) == 0x80 || *(float *)(v41 + 260) != -1.0)
    goto LABEL_63;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 672) & 0x10) == 0
    || (v42 & 0x400) == 0
    || (result = (unsigned int *)WebCore::RenderElement::element(v1)) == 0
    || (result = (unsigned int *)WebCore::RenderElement::element(v1), (v73 = *((_QWORD *)result + 4)) == 0)
    || (*(_WORD *)(v73 + 28) & 8) == 0
    || (v74 = *(_QWORD *)(v73 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v37 = 0;
    v34 = *((_DWORD *)v1 + 5);
    goto LABEL_64;
  }
  if ((*(_BYTE *)(v74 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194105E78);
  }
  v75 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v74 + 88) + 40) + 636) & 0x380;
  v34 = *((_DWORD *)v1 + 5);
  if (v75 == 128)
  {
LABEL_63:
    v37 = 0x20000;
    goto LABEL_64;
  }
  v37 = 0;
LABEL_64:
  *((_DWORD *)v1 + 5) = v34 & 0xFFFDFFFF | v37;
  v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 11) + 40) + 208);
  v39 = v34 & 0x4000;
  if (v38)
    v40 = 0;
  else
    v40 = v39 == 0;
  if (!v40)
  {
    v59 = v38 != 0;
    result = (unsigned int *)WebCore::RenderObject::ensureRareData(v1, v5);
    *(_BYTE *)result = v59;
  }
  return result;
}

_QWORD *WebCore::RenderStyle::colorResolvingCurrentColor@<X0>(_QWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, WebCore::Color *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  const WebCore::StyleColor *v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t **v45;
  int v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;

  v6 = result;
  if (a2 != 61)
  {
    if (a2 > 341)
    {
      switch(a2)
      {
        case 342:
          if (!(_DWORD)a3)
            goto LABEL_16;
          v9 = result[3] + 80;
          break;
        case 344:
          if (!(_DWORD)a3)
            goto LABEL_29;
          v9 = result[3] + 64;
          break;
        case 355:
        case 358:
        case 368:
        case 371:
          goto LABEL_74;
        case 361:
          if ((_DWORD)a3)
            v9 = *(_QWORD *)(*(_QWORD *)(result[1] + 32) + 56) + 72;
          else
LABEL_31:
            v9 = *(_QWORD *)(v6[1] + 24) + 176;
          goto LABEL_5;
        case 374:
          if ((_DWORD)a3)
            v9 = *(_QWORD *)(*(_QWORD *)(result[1] + 32) + 56) + 24;
          else
LABEL_35:
            v9 = *(_QWORD *)(v6[1] + 24) + 104;
          goto LABEL_5;
        case 377:
          if ((_DWORD)a3)
            v9 = *(_QWORD *)(*(_QWORD *)(result[1] + 32) + 56) + 40;
          else
LABEL_37:
            v9 = *(_QWORD *)(v6[1] + 24) + 128;
          goto LABEL_5;
        case 382:
          if ((_DWORD)a3)
            v9 = *(_QWORD *)(*(_QWORD *)(result[1] + 32) + 56) + 56;
          else
LABEL_33:
            v9 = *(_QWORD *)(v6[1] + 24) + 152;
          goto LABEL_5;
        default:
          goto LABEL_133;
      }
      goto LABEL_5;
    }
    if (a2 > 151)
    {
      switch(a2)
      {
        case 232:
          goto LABEL_158;
        case 233:
        case 236:
        case 237:
        case 238:
        case 239:
        case 240:
        case 241:
        case 242:
        case 243:
        case 244:
        case 245:
        case 246:
        case 247:
        case 248:
        case 249:
        case 250:
        case 251:
        case 252:
        case 253:
        case 255:
        case 256:
        case 257:
        case 258:
          goto LABEL_133;
        case 234:
          goto LABEL_140;
        case 235:
          if ((a3 & 1) == 0)
            goto LABEL_139;
          result = WebCore::StyleColor::StyleColor((WebCore::StyleColor *)&v43, (const WebCore::StyleColor *)(result[3] + 272));
          v11 = v44;
          if (v44 == 1)
            goto LABEL_108;
          v12 = v6[4];
          goto LABEL_107;
        case 254:
          if (!(_DWORD)a3)
            goto LABEL_53;
          v9 = *(_QWORD *)(*(_QWORD *)(result[1] + 32) + 56) + 88;
          goto LABEL_5;
        case 259:
          if (!(_DWORD)a3)
            goto LABEL_27;
          v9 = result[3] + 96;
          goto LABEL_5;
        default:
          if (a2 == 152)
            goto LABEL_161;
          if (a2 != 186)
            goto LABEL_133;
          if (!(_DWORD)a3)
            goto LABEL_162;
          v37 = (const WebCore::StyleColor *)(*(_QWORD *)(*(_QWORD *)(result[1] + 32) + 56) + 104);
          break;
      }
      goto LABEL_160;
    }
    if (a2 > 82)
    {
      if (a2 > 92)
      {
        switch(a2)
        {
          case ']':
            if ((_DWORD)a3)
              v37 = (const WebCore::StyleColor *)(*(_QWORD *)(*(_QWORD *)(result[1] + 32) + 24) + 40);
            else
LABEL_154:
              v37 = (const WebCore::StyleColor *)(*(_QWORD *)(*(_QWORD *)(v6[1] + 32) + 24) + 16);
            goto LABEL_160;
          case 'r':
LABEL_153:
            v36 = *(_QWORD *)(v6[7] + 16);
            break;
          case '|':
LABEL_84:
            v36 = *(_QWORD *)(v6[7] + 56);
            break;
          default:
            goto LABEL_133;
        }
LABEL_159:
        v37 = (const WebCore::StyleColor *)(v36 + 8);
        goto LABEL_160;
      }
      if (a2 == 83)
      {
        if ((_DWORD)a3)
          v9 = result[3] + 128;
        else
LABEL_69:
          v9 = v6[3] + 112;
        goto LABEL_5;
      }
    }
    else
    {
      if (a2 == 5)
      {
        if ((_DWORD)a3)
          v27 = (uint64_t *)(result[4] + 336);
        else
LABEL_57:
          v27 = (uint64_t *)(v6[4] + 328);
        v28 = *v27;
        if ((v28 & 0x8000000000000) != 0)
        {
          v38 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 + 1, v38));
        }
        v43 = v28;
        v44 = 0;
        goto LABEL_7;
      }
      if (a2 == 39)
      {
LABEL_90:
        v37 = (const WebCore::StyleColor *)(v6[3] + 144);
LABEL_160:
        result = WebCore::StyleColor::StyleColor((WebCore::StyleColor *)&v43, v37);
        goto LABEL_7;
      }
    }
LABEL_133:
    result = (_QWORD *)WebCore::StyleColor::StyleColor((uint64_t)&v43);
    goto LABEL_7;
  }
  if ((_DWORD)a3)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(result[1] + 32) + 56) + 8;
    goto LABEL_5;
  }
  while (1)
  {
    v8 = *(_QWORD *)(v6[1] + 16);
LABEL_4:
    v9 = v8 + 16;
LABEL_5:
    v49 = (uint64_t *)&v48;
    v50 = (uint64_t *)&v48;
    v51 = (uint64_t *)&v48;
    v52 = (uint64_t *)&v48;
    v10 = *(unsigned int *)(v9 + 8);
    if ((_DWORD)v10 == -1)
      goto LABEL_73;
    v45 = &v49;
    result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v10])(&v43, &v45);
LABEL_7:
    v11 = v44;
    if (v44 != 1)
    {
      v12 = v6[4];
      if ((_DWORD)a3)
LABEL_107:
        v13 = (uint64_t **)(v12 + 336);
      else
        v13 = (uint64_t **)(v12 + 328);
      v48 = v13;
      v49 = (uint64_t *)&v48;
      v50 = (uint64_t *)&v48;
      v51 = (uint64_t *)&v48;
      v52 = (uint64_t *)&v48;
      if (v11 != -1)
      {
        v45 = &v49;
        result = (_QWORD *)((uint64_t (*)(uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v11])(&v45, &v43);
        v14 = v44;
        if (v44 == -1)
          return result;
        return (_QWORD *)((uint64_t (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v49, &v43);
      }
      goto LABEL_73;
    }
    if (a2 != 254)
      break;
    v17 = v6[3];
    v18 = *(_DWORD *)(v17 + 236);
    if ((v18 & 0x40000) == 0)
    {
      v19 = *(float *)(v17 + 4);
LABEL_40:
      if (v19 <= 0.0)
        goto LABEL_41;
      goto LABEL_123;
    }
    v40 = *(unsigned __int8 *)(v17 + 248);
    if (v40 != 11)
    {
      if (v40 == 13)
        goto LABEL_41;
      if (!*(_BYTE *)(v17 + 250))
      {
        if (*(int *)(v17 + 244) < 1)
          goto LABEL_41;
        goto LABEL_123;
      }
      v19 = *(float *)(v17 + 244);
      goto LABEL_40;
    }
LABEL_123:
    if ((v18 & 0x80000) != 0)
      v41 = 235;
    else
      v41 = 344;
    result = (_QWORD *)WebCore::RenderStyle::colorResolvingCurrentColor(v6, v41, a3);
    if ((*(_QWORD *)a4 & 0x8000000000000) != 0)
    {
      if (*(float *)((*(_QWORD *)a4 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
        goto LABEL_21;
    }
    else if (*(_QWORD *)a4)
    {
      goto LABEL_21;
    }
    WebCore::Color::~Color(a4, v42);
    v17 = v6[3];
LABEL_41:
    v20 = v17 + 32;
    v21 = v17 + 80;
    if ((_DWORD)a3)
      v22 = v21;
    else
      v22 = v20;
    v49 = &v47;
    v50 = &v47;
    v51 = &v47;
    v52 = &v47;
    v23 = *(unsigned int *)(v22 + 8);
    if ((_DWORD)v23 != -1)
    {
      v48 = &v49;
      result = ((_QWORD *(*)(uint64_t ***__return_ptr, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v23])(&v45, &v48);
      v24 = v6[4];
      if (v46 == 1)
      {
        v29 = (uint64_t *)(v24 + 328);
        v30 = (uint64_t *)(v24 + 336);
        if ((_DWORD)a3)
          v29 = v30;
        v31 = *v29;
        *(_QWORD *)a4 = v31;
        if ((v31 & 0x8000000000000) != 0)
        {
          v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
        }
        goto LABEL_50;
      }
      v25 = v24 + 328;
      v26 = v24 + 336;
      if (!(_DWORD)a3)
        v26 = v25;
      v47 = v26;
      v49 = &v47;
      v50 = &v47;
      v51 = &v47;
      v52 = &v47;
      if (v46 != -1)
      {
        v48 = &v49;
        result = (_QWORD *)((uint64_t (*)(uint64_t ***, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v46])(&v48, &v45);
LABEL_50:
        if (v46 != -1)
          result = (_QWORD *)((uint64_t (*)(uint64_t **, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v46])(&v49, &v45);
        goto LABEL_21;
      }
    }
LABEL_73:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_74:
    LOWORD(result) = a2;
    while (1)
    {
      result = (_QWORD *)WebCore::CSSProperty::resolveDirectionAwareProperty((unsigned __int16)result, (*((_DWORD *)v6 + 10) >> 26) & 1, (unsigned __int16)*((_DWORD *)v6 + 11) >> 13);
      if ((_DWORD)result == 61)
        break;
      if ((int)result <= 343)
      {
        if ((int)result > 341)
        {
          if ((_DWORD)result == 342)
          {
LABEL_16:
            v9 = v6[3] + 32;
            goto LABEL_5;
          }
          goto LABEL_133;
        }
        if ((int)result > 258)
        {
          if ((_DWORD)result == 259)
          {
LABEL_27:
            v9 = v6[3] + 48;
            goto LABEL_5;
          }
          goto LABEL_133;
        }
        if ((int)result > 233)
        {
          if ((_DWORD)result == 254)
          {
LABEL_53:
            v9 = *(_QWORD *)(v6[1] + 40) + 272;
            goto LABEL_5;
          }
          if ((_DWORD)result == 234)
          {
LABEL_140:
            v36 = *(_QWORD *)(v6[7] + 24);
            goto LABEL_159;
          }
          if ((_DWORD)result != 235)
            goto LABEL_133;
LABEL_139:
          v37 = (const WebCore::StyleColor *)(v6[3] + 256);
          goto LABEL_160;
        }
        if ((int)result > 82)
        {
          if ((int)result <= 92)
          {
            if ((_DWORD)result == 83)
              goto LABEL_69;
            goto LABEL_133;
          }
          if ((int)result > 151)
          {
            if ((_DWORD)result == 152)
            {
LABEL_161:
              v37 = (const WebCore::StyleColor *)(*(_QWORD *)(v6[7] + 56) + 24);
              goto LABEL_160;
            }
            if ((_DWORD)result == 186)
            {
LABEL_162:
              v37 = (const WebCore::StyleColor *)(*(_QWORD *)(v6[1] + 16) + 32);
              goto LABEL_160;
            }
            if ((_DWORD)result != 232)
              goto LABEL_133;
LABEL_158:
            v36 = *(_QWORD *)(v6[7] + 48);
            goto LABEL_159;
          }
          switch((_DWORD)result)
          {
            case ']':
              goto LABEL_154;
            case 'r':
              goto LABEL_153;
            case '|':
              goto LABEL_84;
          }
        }
        else
        {
          if ((_DWORD)result == 5)
            goto LABEL_57;
          if ((_DWORD)result == 39)
            goto LABEL_90;
        }
        goto LABEL_133;
      }
      if ((int)result > 360)
      {
        switch((int)result)
        {
          case 368:
          case 371:
            continue;
          case 369:
          case 370:
          case 372:
          case 373:
          case 375:
          case 376:
            goto LABEL_133;
          case 374:
            goto LABEL_35;
          case 377:
            goto LABEL_37;
          default:
            if ((_DWORD)result == 361)
              goto LABEL_31;
            if ((_DWORD)result != 382)
              goto LABEL_133;
            goto LABEL_33;
        }
      }
      if ((_DWORD)result == 344)
      {
LABEL_29:
        v8 = v6[3];
        goto LABEL_4;
      }
      if ((_DWORD)result != 355 && (_DWORD)result != 358)
        goto LABEL_133;
    }
  }
  if ((_DWORD)a3)
LABEL_108:
    v15 = (uint64_t *)(v6[4] + 336);
  else
    v15 = (uint64_t *)(v6[4] + 328);
  v16 = *v15;
  *(_QWORD *)a4 = v16;
  if ((v16 & 0x8000000000000) != 0)
  {
    v34 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
LABEL_21:
  v14 = v44;
  if (v44 == -1)
    return result;
  return (_QWORD *)((uint64_t (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v49, &v43);
}

uint64_t WebCore::Page::outermostFullscreenDocument(WebCore::Page *this)
{
  uint64_t v1;
  BOOL v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::HTMLFrameOwnerElement **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  void *v16;
  WebCore::FullscreenManager *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WebCore::HTMLFrameOwnerElement **v23;
  WebCore::HTMLFrameOwnerElement ***v24;
  WebCore::HTMLFrameOwnerElement *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v1 = *((_QWORD *)this + 20);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v3 = (unsigned int *)(v1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v28 = 0;
  v20 = *(_QWORD *)(v1 + 296);
  if (v20)
  {
    *(_DWORD *)(v20 + 24) += 2;
    v27 = v20;
    while (1)
    {
      v5 = *(_QWORD *)(v20 + 1992);
      if (!v5)
      {
        v13 = WTF::fastMalloc((WTF *)0x90);
        *(_QWORD *)v13 = 0;
        *(_DWORD *)(v13 + 8) = 0;
        v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v20);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 16) = v14;
        *(_BYTE *)(v13 + 40) = 0;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 112) = 0u;
        *(_DWORD *)(v13 + 127) = 0;
        *(_QWORD *)(v13 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
        v17 = *(WebCore::FullscreenManager **)(v20 + 1992);
        *(_QWORD *)(v20 + 1992) = v13;
        if (v17)
        {
          WebCore::FullscreenManager::~FullscreenManager(v17, v16);
          if (*(_DWORD *)(v18 + 8))
          {
            *(_OWORD *)(v18 + 112) = 0u;
            *(_OWORD *)(v18 + 128) = 0u;
            *(_OWORD *)(v18 + 80) = 0u;
            *(_OWORD *)(v18 + 96) = 0u;
            *(_OWORD *)(v18 + 48) = 0u;
            *(_OWORD *)(v18 + 64) = 0u;
            *(_OWORD *)(v18 + 16) = 0u;
            *(_OWORD *)(v18 + 32) = 0u;
            *(_OWORD *)v18 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v18, v19);
          }
        }
        v5 = *(_QWORD *)(v20 + 1992);
      }
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
      v7 = *(WebCore::HTMLFrameOwnerElement ***)(v6 + 3096);
      if (!v7)
        break;
      v23 = 0;
      while (1)
      {
        v24 = v23 ? (WebCore::HTMLFrameOwnerElement ***)(v23 + 1) : (WebCore::HTMLFrameOwnerElement ***)(v6 + 3104);
        v23 = *v24;
        v25 = *v23;
        if ((*((_BYTE *)*v23 + 54) & 0x40) != 0)
          break;
        if (v23 == v7)
          goto LABEL_12;
      }
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v28, v27);
      if (((*(uint64_t (**)(WebCore::HTMLFrameOwnerElement *))(*(_QWORD *)v25 + 192))(v25) & 1) == 0)
        break;
      v26 = WebCore::HTMLFrameOwnerElement::contentDocument(v25);
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v27, v26);
      v20 = v27;
      if (!v27)
      {
        v20 = (uint64_t)v28;
        goto LABEL_15;
      }
    }
LABEL_12:
    v8 = v27;
    v20 = (uint64_t)v28;
    v27 = 0;
    if (!v8)
    {
LABEL_15:
      v9 = v20;
      goto LABEL_16;
    }
    if (*(_DWORD *)(v8 + 24) != 2)
    {
      *(_DWORD *)(v8 + 24) -= 2;
      goto LABEL_15;
    }
    if ((*(_WORD *)(v8 + 30) & 0x400) != 0)
      goto LABEL_15;
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
    v9 = (uint64_t)v28;
LABEL_16:
    v28 = 0;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
  }
  do
  {
    v10 = __ldaxr(v3);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v3));
  if (!v11)
  {
    atomic_store(1u, v3);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E31FE290;
    v21[1] = v3;
    v28 = v21;
    WTF::ensureOnMainThread();
    v22 = (uint64_t)v28;
    v28 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  return v20;
}

uint64_t WebCore::RenderBox::foregroundIsKnownToBeOpaqueInRect(WebCore::RenderBox *this, const WebCore::LayoutRect *a2, int a3)
{
  WebCore::Element *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::RenderObject *v11;
  WebCore::RenderObject *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v16;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t (*v33)();
  _BOOL4 v34;
  _BOOL4 v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  __int128 v47;

  if (a3)
  {
    if ((*((_BYTE *)this + 45) & 1) != 0)
    {
      v6 = 0;
    }
    else
    {
      v6 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
      if (v6 && (*((_WORD *)v6 + 14) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194106BACLL);
      }
    }
    v7 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) >> 18) & 3;
    if (!v7
      || ((*((_BYTE *)this + 96) & 0x1F) != 0xD ? (v46 = (*((_BYTE *)this + 96) & 0x1Eu) - 14 > 0xFFFFFFF5) : (v46 = 0),
          v46
       || v7 != 2 && (!v6 || WebCore::Element::isRelevantToUser(v6))
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248)
                   + 479)))
    {
      v8 = *((unsigned int *)this + 16);
      v9 = v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
      if (!v9)
        return v9 & v8;
      v10 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if (!v10)
      {
LABEL_34:
        LODWORD(v9) = 0;
        return v9 & v8;
      }
      while ((*(_BYTE *)(v10 + 45) & 4) == 0)
      {
        v8 = *(unsigned int *)(v10 + 47) | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32);
        if (!v8)
          goto LABEL_34;
        LODWORD(v9) = 0;
        v10 = *(_QWORD *)((*(unsigned int *)(v10 + 47) | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
        if (!v10)
          return v9 & v8;
      }
      while (1)
      {
        if ((*(_BYTE *)(v10 + 98) & 0x38) != 0)
        {
          v11 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v10);
          v12 = *(WebCore::RenderObject **)(v10 + 32);
          if (v12)
            v12 = (WebCore::RenderObject *)*((_QWORD *)v12 + 1);
          if (v11 != v12)
            goto LABEL_28;
        }
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 104) + 239) & 4) != 0 || (*(_BYTE *)(v10 + 120) & 0x30) != 0)
          goto LABEL_28;
        v13 = *(_QWORD *)(v10 + 88);
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 240) || *(_DWORD *)(v10 + 160) == 0;
        if (v14 || *(_DWORD *)(v10 + 164) == 0)
          goto LABEL_28;
        v16 = *(_QWORD **)(v10 + 144);
        if (!v16)
          break;
        if (v16[32] || (*(_BYTE *)(*(_QWORD *)(v13 + 8) + 68) & 2) == 0)
          goto LABEL_28;
        v27 = v16[4];
        v28 = *(_DWORD *)(v27 + 20);
        if ((v28 & 0x20000) != 0)
        {
          v38 = v16[4];
          if ((*(_BYTE *)(v27 + 45) & 2) != 0)
            v38 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8);
          v39 = *(_QWORD *)(v38 + 88);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 32) + 40) + 20))
            goto LABEL_28;
          v40 = *(_QWORD **)(v39 + 40);
          if (v40[41] || v40[38] || v40[39] || v40[40] || (v28 & 0x100000) != 0)
            goto LABEL_28;
        }
        v29 = *(_QWORD *)(v27 + 88);
        v30 = *(_QWORD *)(v29 + 32);
        if (*(float *)(v30 + 4) < 1.0)
          goto LABEL_28;
        v31 = *(_QWORD *)(v30 + 48);
        if (*(_QWORD *)(v31 + 8))
        {
          while (!*(_QWORD *)(v31 + 16))
          {
            v31 = *(_QWORD *)(v31 + 8);
            if (!v31)
              goto LABEL_59;
          }
          goto LABEL_28;
        }
        if (*(_QWORD *)(v31 + 16))
          v32 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v32 = 0;
        if (v32)
          goto LABEL_28;
LABEL_59:
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 216) + 8))
          v33 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v33 = 0;
        if (!v33 && !*(_DWORD *)(*(_QWORD *)(v30 + 32) + 20))
        {
          v18 = *(_DWORD *)(v10 + 20);
          if ((v18 & 0x10000) != 0
            && ((*(_BYTE *)(v10 + 45) & 2) != 0
              ? (v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 96))
              : (v42 = *(_QWORD *)(v10 + 96)),
                (v43 = v42 & 0x1C00, v43 != 2048) && v43 && (v44 = v16[33]) != 0))
          {
            v45 = *(_QWORD *)(v44 + 104);
            v35 = v45 == 0;
            v34 = HIDWORD(v45) == 0;
          }
          else
          {
            v34 = 1;
            v35 = 1;
          }
          if (v34 && v35)
            goto LABEL_38;
        }
LABEL_28:
        v8 = *(unsigned int *)(v10 + 47);
        v9 = v8 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32);
        if (!v9)
          return v9 & v8;
        v10 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
        if (!v10)
          goto LABEL_34;
        while ((*(_BYTE *)(v10 + 45) & 4) == 0)
        {
          v8 = *(unsigned int *)(v10 + 47) | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32);
          if (!v8)
            goto LABEL_34;
          LODWORD(v9) = 0;
          v10 = *(_QWORD *)((*(unsigned int *)(v10 + 47) | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
          if (!v10)
            return v9 & v8;
        }
      }
      v18 = *(_DWORD *)(v10 + 20);
LABEL_38:
      v19 = *(_DWORD *)(v10 + 152);
      v20 = *(_DWORD *)(v10 + 156);
      if ((v18 & 0x1800000) == 0x800000)
      {
        v41 = WebCore::RenderBoxModelObject::relativePositionOffset((WebCore::RenderBoxModelObject *)v10);
        if (__OFADD__(v19, (_DWORD)v41))
          v19 = (v19 >> 31) + 0x7FFFFFFF;
        else
          v19 += v41;
        if (__OFADD__(v20, HIDWORD(v41)))
          v20 = (v20 >> 31) + 0x7FFFFFFF;
        else
          v20 += HIDWORD(v41);
      }
      v47 = *(_OWORD *)a2;
      if (v19 == 0x80000000)
        v21 = 0x7FFFFFFF;
      else
        v21 = -v19;
      if (v20 == 0x80000000)
        v22 = 0x7FFFFFFF;
      else
        v22 = -v20;
      v23 = __OFADD__((_DWORD)v47, v21);
      v24 = v47 + v21;
      if (v23)
        v24 = (v47 >> 31) + 0x7FFFFFFF;
      LODWORD(v47) = v24;
      v23 = __OFADD__(DWORD1(v47), v22);
      v25 = DWORD1(v47) + v22;
      if (v23)
        v25 = (DWORD1(v47) >> 31) + 0x7FFFFFFF;
      DWORD1(v47) = v25;
      v26 = v25 | v24;
      if (((v25 | v24) & 0x80000000) != 0)
      {
        if ((*(_BYTE *)(v10 + 98) & 0x38) == 0)
          goto LABEL_51;
      }
      else
      {
        v23 = __OFADD__(v25, HIDWORD(v47));
        v36 = v25 + HIDWORD(v47);
        if (v23)
          v36 = 0x7FFFFFFF;
        if (v36 <= *(_DWORD *)(v10 + 164))
        {
          v23 = __OFADD__(v24, DWORD2(v47));
          v37 = v24 + DWORD2(v47);
          if (v23)
            v37 = 0x7FFFFFFF;
          if (v37 <= *(_DWORD *)(v10 + 160)
            && (WebCore::RenderBox::backgroundIsKnownToBeOpaqueInRect((WebCore::RenderBox *)v10, (const WebCore::LayoutRect *)&v47)|| ((*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v10 + 1608))(v10, &v47, (a3 - 1)) & 1) != 0))
          {
LABEL_51:
            LODWORD(v8) = v26 >= 0;
            LODWORD(v9) = 1;
            return v9 & v8;
          }
        }
      }
      goto LABEL_28;
    }
  }
  return 0;
}

uint64_t WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int i;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_OWORD *)(result + 16);
    do
    {
      *v12++ = xmmword_1968DE9D0;
      --v11;
    }
    while (v11);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    while (1)
    {
      v16 = (int *)(v6 + 16 * v13);
      v17 = *v16;
      v18 = *((unsigned __int8 *)v16 + 4);
      if (*v16 || v18 == 0)
        break;
      if (!*((_BYTE *)v16 + 5))
        goto LABEL_27;
LABEL_43:
      if (++v13 == v15)
        return WTF::fastFree((WTF *)(v6 - 16), v10);
    }
    if (v17)
      v20 = 0;
    else
      v20 = v18 == 0;
    if (v20 && !*((_BYTE *)v16 + 5))
    {
      v21 = *(_QWORD *)(v6 + 16 * v13 + 8);
      if ((v21 & 0x8000000000000) != 0)
      {
        v22 = v15;
        v23 = v14;
        v24 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, v10);
        }
        v14 = v23;
        v15 = v22;
      }
      goto LABEL_43;
    }
LABEL_27:
    v27 = *a1;
    if (*a1)
      v28 = *(_DWORD *)(v27 - 8);
    else
      v28 = 0;
    for (i = 0; ; v17 = i + v30)
    {
      v30 = v17 & v28;
      v31 = v27 + 16 * v30;
      v32 = !*(_DWORD *)v31 && *(_BYTE *)(v31 + 4) == 0;
      if (v32 && !*(_BYTE *)(v31 + 5))
        break;
      ++i;
    }
    v33 = v27 + 16 * v30;
    v36 = *(_QWORD *)(v33 + 8);
    v35 = (_QWORD *)(v33 + 8);
    v34 = v36;
    if ((v36 & 0x8000000000000) != 0)
    {
      v45 = v15;
      v44 = v14;
      v41 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
      do
      {
        v42 = __ldaxr(v41);
        v43 = --v42 == 0;
      }
      while (__stlxr(v42, v41));
      v14 = v44;
      v16 = (int *)(v6 + 16 * v13);
      if (v43)
      {
        atomic_store(1u, v41);
        WTF::fastFree((WTF *)v41, v10);
        v16 = (int *)(v6 + 16 * v13);
        v15 = v45;
        v14 = v44;
      }
    }
    *(_QWORD *)v31 = *(_QWORD *)v16;
    v37 = v6 + 16 * v13;
    *v35 = 0;
    v40 = *(_QWORD *)(v37 + 8);
    v38 = (_QWORD *)(v37 + 8);
    v39 = v40;
    if (v40)
    {
      *v35 = v39;
      *v38 = 0;
    }
    if (v16 == a3)
      v14 = v31;
    goto LABEL_43;
  }
  if (v6)
    return WTF::fastFree((WTF *)(v6 - 16), v10);
  return result;
}

BOOL WebCore::RenderBox::backgroundIsKnownToBeOpaqueInRect(WebCore::RenderBox *this, const WebCore::LayoutRect *a2)
{
  void *v4;
  _BOOL8 v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  signed int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  signed int v17;
  signed int v18;
  int v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;

  if (!WebCore::BackgroundPainter::paintsOwnBackground(this, a2))
    return 0;
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 61, 0, &v24);
  if ((v24 & 0x8000000000000) != 0)
  {
    if (*(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
      goto LABEL_4;
  }
  else if ((_BYTE)v24 != 0xFF)
  {
    goto LABEL_4;
  }
  v7 = *((_QWORD *)this + 11);
  if ((*(_DWORD *)(*(_QWORD *)(v7 + 32) + 148) & 0x1FC000) == 0)
  {
    v8 = *(_QWORD *)(v7 + 40);
    if (((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000
       || ((*(unsigned int *)(v8 + 636) | ((unint64_t)(*(unsigned __int16 *)(v8 + 640) | (*(unsigned __int8 *)(v8 + 642) << 16)) << 32)) & 0x20000000000000) == 0)
      && !*(_QWORD *)(v8 + 264)
      && (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderBox *)((char *)this + 80)) & 1) == 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
      if (!*(_QWORD *)(v9 + 8))
      {
        LODWORD(v9) = (*(unsigned __int8 *)(v9 + 58) >> 2) & 7;
        if ((_DWORD)v9)
        {
          if ((_DWORD)v9 == 1)
          {
            v10 = WebCore::RenderBox::paddingBoxRect(this);
            v9 = HIDWORD(v10);
          }
          else if ((_DWORD)v9 == 2)
          {
            v10 = WebCore::RenderBox::contentBoxRect(this);
            v9 = HIDWORD(v10);
          }
          else
          {
            LODWORD(v10) = 0;
            LODWORD(v9) = 0;
            v4 = 0;
          }
        }
        else
        {
          LODWORD(v10) = 0;
          v4 = (void *)*((_QWORD *)this + 20);
        }
        v11 = *(_DWORD *)a2;
        if ((int)v10 <= *(_DWORD *)a2)
        {
          v12 = v10 + (_DWORD)v4;
          if (__OFADD__((_DWORD)v10, (_DWORD)v4))
            v12 = (v10 >> 31) + 0x7FFFFFFF;
          v13 = *((_DWORD *)a2 + 2);
          v14 = __OFADD__(v11, v13);
          v15 = v11 + v13;
          if (v14)
            v15 = (v11 >> 31) + 0x7FFFFFFF;
          if (v12 >= v15)
          {
            v16 = *((_DWORD *)a2 + 1);
            if ((int)v9 <= v16)
            {
              v14 = __OFADD__((_DWORD)v9, HIDWORD(v4));
              v17 = v9 + HIDWORD(v4);
              v18 = (v9 >> 31) + 0x7FFFFFFF;
              if (!v14)
                v18 = v17;
              v19 = *((_DWORD *)a2 + 3);
              v14 = __OFADD__(v16, v19);
              v20 = v16 + v19;
              if (v14)
                v20 = (v16 >> 31) + 0x7FFFFFFF;
              v5 = v18 >= v20;
              goto LABEL_5;
            }
          }
        }
      }
    }
  }
LABEL_4:
  v5 = 0;
LABEL_5:
  if ((v24 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v4);
    }
  }
  return v5;
}

BOOL WebCore::BackgroundPainter::paintsOwnBackground(WebCore::BackgroundPainter *this, const WebCore::RenderBoxModelObject *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WebCore::FillLayer *v8;
  uint64_t v9;
  uint64_t (*v10)();
  BOOL hasImageInAnyLayer;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 1;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v3)
    return 1;
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0)
    return 1;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    return 1;
  if ((WebCore::RenderElement::shouldApplyAnyContainment(this) & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272)
                 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 1;
  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                      + 8)
                                          + 1272)
                              + 64) & 0xFFFFFFFFFFFFLL)
                 + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194107228);
  }
  if ((WebCore::RenderElement::shouldApplyAnyContainment((WebCore::RenderElement *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272)
                                                                                               + 64) & 0xFFFFFFFFFFFFLL)) & 1) != 0)
    return 1;
  WebCore::RenderStyle::visitedDependentColor(v5 + 80, 61, 0, &v17);
  v7 = v17;
  if ((v17 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
      v16 = 1;
      do
      {
LABEL_27:
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (v15)
      {
        hasImageInAnyLayer = v16;
        goto LABEL_19;
      }
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v6);
      if ((v16 & 1) == 0)
        goto LABEL_20;
      return 1;
    }
  }
  else if ((_BYTE)v17)
  {
    return 1;
  }
  v8 = *(WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 16) + 8);
  if (*((_QWORD *)v8 + 1))
  {
    hasImageInAnyLayer = WebCore::FillLayer::hasImageInAnyLayer(v8);
    v7 = v17;
    v9 = v17 & 0x8000000000000;
  }
  else
  {
    v9 = v17 & 0x8000000000000;
    if (*((_QWORD *)v8 + 2))
      v10 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v10 = 0;
    hasImageInAnyLayer = v10 != 0;
  }
  if (v9)
  {
    v16 = hasImageInAnyLayer;
    v13 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    goto LABEL_27;
  }
LABEL_19:
  if (hasImageInAnyLayer)
    return 1;
LABEL_20:
  v12 = *((_QWORD *)this + 4);
  if (v12)
    v12 = *(_QWORD *)(v12 + 8);
  return v12 != v5;
}

BOOL WebCore::RenderLayerScrollableArea::scrollingMayRevealBackground(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 12);
  v2 = *(_QWORD *)(v1 + 32);
  if (v2)
    v3 = (*(_BYTE *)(v2 + 45) & 4) == 0;
  else
    v3 = 1;
  if (!v3 && (*(_BYTE *)(v2 + 22) & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 96);
    if (((v4 >> 10) & 7) - 3 < 2 || ((unsigned __int16)v4 >> 13) - 3 < 2)
      return 1;
  }
  if (*((_BYTE *)this + 79))
    return *(_QWORD *)(v1 + 256) != 0;
  return 0;
}

void WebCore::LocalCurrentTraitCollection::~LocalCurrentTraitCollection(WebCore::LocalCurrentTraitCollection *this)
{
  const void *v2;

  objc_msgSend((id)PAL::getUITraitCollectionClass(this), "setCurrentTraitCollection:", *(_QWORD *)this);
  v2 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  objc_msgSend((id)PAL::getUITraitCollectionClass(this), "setCurrentTraitCollection:", *(_QWORD *)this);
  v2 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v2)
    CFRelease(v2);
}

void sub_194107354(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

WebCore::LocalCurrentTraitCollection *WebCore::LocalCurrentTraitCollection::LocalCurrentTraitCollection(WebCore::LocalCurrentTraitCollection *this, char a2, char a3)
{
  void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  _QWORD v12[4];
  char v13;
  char v14;

  *(_QWORD *)this = 0;
  v6 = (void *)objc_msgSend((id)PAL::getUITraitCollectionClass(this), "currentTraitCollection");
  v7 = v6;
  if (v6)
    CFRetain(v6);
  v8 = *(const void **)this;
  *(_QWORD *)this = v7;
  if (v8)
  {
    CFRelease(v8);
    v7 = *(void **)this;
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZN7WebCore27LocalCurrentTraitCollectionC2Ebb_block_invoke;
  v12[3] = &__block_descriptor_34_e27_v16__0___UIMutableTraits__8l;
  v13 = a2;
  v14 = a3;
  v9 = (void *)objc_msgSend(v7, "traitCollectionByModifyingTraits:", v12);
  v10 = v9;
  if (v9)
    v9 = (void *)CFRetain(v9);
  objc_msgSend((id)PAL::getUITraitCollectionClass((PAL *)v9), "setCurrentTraitCollection:", v10);
  if (v10)
    CFRelease(v10);
  return this;
}

void sub_194107454(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t PAL::UITraitCollectionFunction(PAL *this)
{
  return qword_1ECE7EDF0;
}

unint64_t WebCore::RenderBoxModelObject::relativePositionOffset(WebCore::RenderBoxModelObject *this)
{
  const WebCore::RenderBox *v2;
  WebCore::RenderObject *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  float *v7;
  float *v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  WebCore::RenderBox *v17;
  WebCore::RenderBox *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  int v23;
  unsigned __int8 v24;
  unsigned int v25;
  char v26;
  void *v27;
  float v28;
  float v29;
  double v30;
  double v32;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  int v40;
  _BOOL4 v41;
  int v42;
  int v43;
  float v44;
  double v45;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  double v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  int i;
  uint64_t v69;
  uint64_t v70;
  int v72;
  unint64_t v73;
  WebCore::RenderObject *v74;
  int v75;
  int v76;
  float v77;
  double v78;
  int v79;
  int v80;
  float v81;
  double v82;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  WebCore::RenderBox *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  float v114;
  float v115;
  int v116;
  float v117;
  int v118;
  int v119;
  int v120;
  BOOL v121;
  int v122;
  unint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  double v133;
  float v134;
  double v135;
  BOOL v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  WebCore::RenderBox *v149;
  unsigned int v150[2];
  WebCore::RenderBox **v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int v158;
  int v159;
  int v160;
  int v161;

  v3 = WebCore::RenderObject::containingBlock(this);
  v149 = v3;
  v4 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  if ((*((_BYTE *)this + 45) & 1) == 0)
    goto LABEL_2;
  v57 = (*((_BYTE *)this + 45) & 2) != 0
      ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96)
      : *((_QWORD *)this + 12);
  if ((v57 & 0x1F) != 1 && (v57 & 0x1F) != 14)
    goto LABEL_2;
  v5 = 0;
  if ((*((_BYTE *)this + 45) & 0x40) == 0)
    goto LABEL_132;
  v6 = 0;
  if ((v57 & 0xF80000000000) != 0)
    goto LABEL_3;
  if (((*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 176))(this) & 1) == 0)
  {
    v60 = *((unsigned __int8 *)this + 46);
    if (v60 != 20)
    {
      if ((*((_BYTE *)this + 52) & 7) != 1)
      {
        v5 = 0;
        if (v60 != 49)
        {
          v6 = 0;
          if (v60 == 26)
            goto LABEL_3;
LABEL_109:
          if ((*((_BYTE *)this + 22) & 0x80) != 0)
          {
            if ((*((_BYTE *)this + 45) & 0x40) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194108088);
            }
            if ((*(_WORD *)((_BYTE *)this + 69) & 0x10) != 0)
            {
              {
                v61 = dword_1ECE91378 + 1;
              }
              else
              {
                WebCore::continuationChainNodeMap(void)::map = 0;
                *(_QWORD *)&dword_1ECE91378 = 0;
                v61 = 1;
              }
              dword_1ECE91378 = v61;
              v62 = *((_QWORD *)this + 1);
              v63 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
              v64 = (~(v62 << 32) + v62) ^ ((unint64_t)(~(v62 << 32) + v62) >> 22);
              v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
              v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
              v67 = v63 & ((v66 >> 31) ^ v66);
              for (i = 1; ; ++i)
              {
                v69 = v67;
                v70 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v67);
                if (v70 != -1 && v70 == v62)
                  break;
                v67 = (v69 + i) & v63;
              }
              v99 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v69 + 8);
              while (1)
              {
                v99 = (_QWORD *)v99[2];
                if (!v99)
                  break;
                if (*v99)
                  v100 = *(_QWORD *)(*v99 + 8);
                else
                  v100 = 0;
                if (v100 && (*(_BYTE *)(v100 + 45) & 0x20) != 0)
                {
                  v6 = 0;
                  v5 = 0;
                  do
                  {
                    if ((*(_BYTE *)(v100 + 45) & 0x20) == 0)
                      break;
                    v108 = *(_DWORD *)(v100 + 20);
                    if ((v108 & 0x800000) != 0)
                    {
                      v109 = v108 & 0x1800000;
                      if (v109 == 0x800000)
                      {
                        v110 = WebCore::RenderBoxModelObject::relativePositionOffset((WebCore::RenderBoxModelObject *)v100);
                        v111 = HIDWORD(v110);
                      }
                      else if (v109 == 25165824)
                      {
                        WebCore::RenderBoxModelObject::constrainingRectForStickyPosition((WebCore::RenderBoxModelObject *)v100, v59);
                        v158 = v129;
                        v159 = v130;
                        v160 = v131;
                        v161 = v132;
                        *(_QWORD *)v150 = off_1E34043D0;
                        v151 = 0;
                        v152 = 0;
                        v153 = 0u;
                        v154 = 0u;
                        v155 = 0u;
                        v156 = 0u;
                        v157 = 0u;
                        WebCore::RenderBoxModelObject::computeStickyPositionConstraints((WebCore::RenderBoxModelObject *)v100, (WebCore::StickyPositionViewportConstraints *)v150, (const WebCore::FloatRect *)&v158);
                        v133 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)v150, (const WebCore::FloatRect *)&v158)* 64.0;
                        v59 = v134;
                        v135 = v134 * 64.0;
                        v137 = v135 >= 2147483650.0 || v133 <= -2147483650.0 || v135 <= -2147483650.0;
                        if (v137 || v133 >= 2147483650.0)
                        {
                          if (v133 > -2147483650.0)
                            v139 = (int)v133;
                          else
                            v139 = 0x80000000;
                          if (v133 < 2147483650.0)
                            LODWORD(v110) = v139;
                          else
                            LODWORD(v110) = 0x7FFFFFFF;
                          v59 = v59 * 64.0;
                          if (v59 > -2147483650.0)
                            v140 = (int)v59;
                          else
                            v140 = 0x80000000;
                          if (v59 < 2147483650.0)
                            LODWORD(v111) = v140;
                          else
                            LODWORD(v111) = 0x7FFFFFFF;
                        }
                        else
                        {
                          LODWORD(v110) = (int)v133;
                          LODWORD(v111) = (int)v135;
                        }
                      }
                      else
                      {
                        LODWORD(v111) = 0;
                        LODWORD(v110) = 0;
                      }
                      if (__OFADD__(v5, (_DWORD)v110))
                        v5 = (v5 >> 31) + 0x7FFFFFFF;
                      else
                        v5 += v110;
                      v48 = __OFADD__((_DWORD)v6, (_DWORD)v111);
                      v112 = v6 + v111;
                      if (v48)
                        v6 = (v6 >> 31) + 0x7FFFFFFF;
                      else
                        v6 = v112;
                    }
                    v113 = *(_QWORD *)(v100 + 32);
                    if (!v113)
                      break;
                    v100 = *(_QWORD *)(v113 + 8);
                  }
                  while (v100);
                  goto LABEL_3;
                }
              }
            }
          }
          goto LABEL_2;
        }
LABEL_132:
        v6 = 0;
        goto LABEL_3;
      }
      if ((*((_BYTE *)this + 53) & 2) == 0)
      {
        v5 = 0;
        if (v60 != 26)
        {
          v6 = 0;
          if (v60 == 49)
            goto LABEL_3;
          goto LABEL_109;
        }
        goto LABEL_132;
      }
    }
  }
LABEL_2:
  v5 = 0;
  v6 = 0;
LABEL_3:
  v7 = (float *)(v4 + 32);
  v8 = (float *)(v4 + 8);
  v9 = v4[12];
  if (v9 != 4 || v4[28] || v4[36] != 4 || v4[20] || (*((_BYTE *)v3 + 123) & 4) != 0)
  {
    v10 = v4[36];
    if (v4[36])
    {
      *(_QWORD *)v150 = this;
      v151 = &v149;
      if (v4[20] && (*((_BYTE *)v3 + 123) & 4) != 0)
      {
        if (v4[20] == 4)
          v118 = 0;
        else
          v118 = WebCore::RenderBoxModelObject::relativePositionOffset(void)const::$_0::operator()((uint64_t)v150);
        v119 = WebCore::valueForLength(v4 + 16, v118);
        if (v119 == 0x80000000)
          v5 = 0x7FFFFFFF;
        else
          v5 = -v119;
        goto LABEL_161;
      }
      if (v10 == 4)
      {
LABEL_151:
        v81 = *((float *)v4 + 8);
        if (!v4[38])
          v81 = (float)SLODWORD(v81);
      }
      else
      {
        v116 = WebCore::RenderBoxModelObject::relativePositionOffset(void)const::$_0::operator()((uint64_t)v150);
        if (v4[36] != 3)
        {
          v80 = 0;
          switch(v4[36])
          {
            case 0u:
            case 1u:
            case 9u:
              v80 = v116;
              break;
            case 4u:
              goto LABEL_151;
            case 0xBu:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v4 + 32), (float)v116 * 0.015625);
              goto LABEL_153;
            default:
              goto LABEL_158;
          }
          goto LABEL_158;
        }
        v117 = *((float *)v4 + 8);
        if (!v4[38])
          v117 = (float)SLODWORD(v117);
        v81 = (float)((float)((float)v116 * 0.015625) * v117) / 100.0;
      }
LABEL_153:
      v82 = v81 * 64.0;
      if (v82 < 2147483650.0 && v82 > -2147483650.0)
        goto LABEL_157;
      if (v82 >= 2147483650.0)
      {
LABEL_147:
        v80 = 0x7FFFFFFF;
        goto LABEL_158;
      }
      if (v82 <= -2147483650.0)
        v80 = 0x80000000;
      else
LABEL_157:
        v80 = (int)v82;
    }
    else
    {
      v11 = v4[20];
      if (!v4[20])
      {
LABEL_6:
        if (!v9 && !v4[28])
          return v5 | (unint64_t)(v6 << 32);
        v13 = 0;
        if (this)
        {
          v14 = 0;
          v15 = 0;
          if ((*((_BYTE *)this + 45) & 4) != 0)
          {
            v16 = WebCore::RenderBox::overridingContainingBlockContentHeight(this, (unsigned __int16)*((_DWORD *)v149 + 31) >> 13);
            if ((_BYTE)v2)
            {
              v13 = BYTE4(v16);
              v15 = v16 & 0xFFFFFF00;
              v14 = v16;
            }
            else
            {
              v13 = 0;
              v14 = 0;
              v15 = 0;
            }
          }
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
        v17 = v149;
        if (v149)
        {
          if ((*((_BYTE *)v149 + 45) & 4) != 0)
            v18 = v149;
          else
            v18 = 0;
        }
        else
        {
          v18 = 0;
        }
        v19 = *(_QWORD *)(*((_QWORD *)v149 + 11) + 8);
        v20 = (unsigned int *)(v19 + 4);
        v21 = (unsigned int *)(v19 + 12);
        if (((*((_DWORD *)v149 + 31) >> 13) & 6u) - 2 >= 4)
          v22 = v21;
        else
          v22 = v20;
        v150[0] = 0;
        LOBYTE(v150[1]) = *((_BYTE *)v22 + 4);
        v23 = LOBYTE(v150[1]);
        v24 = *((_BYTE *)v22 + 5);
        *(_WORD *)((char *)&v150[1] + 1) = v24;
        v25 = LOBYTE(v150[1]) - 2;
        if (v25 >= 9)
        {
          if (LOBYTE(v150[1]) == 11)
          {
            v27 = (void *)*v22;
            v150[0] = *v22;
            v142 = v15;
            v146 = v14;
            WebCore::Length::ref((int *)v150);
            v15 = v142;
            v14 = v146;
            LOBYTE(v159) = 11;
            *(_WORD *)((char *)&v159 + 1) = v24;
            goto LABEL_164;
          }
          v27 = 0;
          v26 = 0;
        }
        else
        {
          BYTE2(v150[1]) = *((_BYTE *)v22 + 6);
          v26 = BYTE2(v150[1]);
          if (BYTE2(v150[1]))
          {
            v150[0] = *v22;
            v27 = (void *)v150[0];
            v26 = 1;
          }
          else
          {
            v27 = (void *)*v22;
            v150[0] = *v22;
          }
        }
        v158 = 0;
        LOBYTE(v159) = v150[1];
        *(_WORD *)((char *)&v159 + 1) = v24;
        if (v25 < 9)
        {
          BYTE2(v159) = v26;
          v158 = (int)v27;
          v34 = v27;
          goto LABEL_45;
        }
        v34 = 0;
        if (LOBYTE(v150[1]) != 11)
        {
LABEL_45:
          if ((v150[1] & 0xF7) != 3)
          {
LABEL_47:
            v35 = 0;
            goto LABEL_48;
          }
          goto LABEL_46;
        }
LABEL_164:
        v147 = v14;
        v158 = (int)v27;
        v85 = v15;
        WebCore::Length::ref(&v158);
        v15 = v85;
        v14 = v147;
        v34 = v27;
LABEL_46:
        if ((*((_DWORD *)v17 + 5) & 0x1800000) == 0x1000000)
          goto LABEL_47;
        v141 = v15;
        v145 = v14;
        v74 = v17;
        while (1)
        {
          v74 = WebCore::RenderObject::containingBlock(v74);
          if (!v74)
          {
            v35 = 0;
            goto LABEL_194;
          }
          v15 = v141;
          if ((*((_BYTE *)v74 + 45) & 1) == 0)
            goto LABEL_126;
          v97 = *((_BYTE *)v74 + 52) & 7;
          if (v97 == 1)
            break;
          v15 = v141;
          if (v97 == 3)
          {
            v98 = 8;
LABEL_198:
            v15 = v141;
            if ((*((_BYTE *)v74 + 53) & v98) != 0)
              goto LABEL_126;
          }
          if (*((_BYTE *)v74 + 46) == 49)
          {
LABEL_126:
            v35 = 0;
            v75 = *((unsigned __int8 *)v74 + 46);
            if (v75 == 49 || v75 == 37)
              goto LABEL_130;
            if ((*((_DWORD *)v74 + 5) & 0x1800000) != 0x1000000)
            {
              v35 = (char *)v74;
LABEL_130:
              v14 = v145;
              goto LABEL_48;
            }
            v94 = (unsigned __int16)*((_DWORD *)v74 + 31) >> 13;
            if ((v94 - 1) > 4)
              v95 = 0;
            else
              v95 = qword_1969FC6C8[v94 - 1];
            v96 = *(_QWORD *)(*((_QWORD *)v74 + 11) + 24) + 8;
            if (*(_BYTE *)(v96 + 8 * v95 + 4))
            {
              v103 = ((unsigned __int16)*((_DWORD *)v74 + 31) >> 13) - 1;
              if (v103 > 4)
                v104 = 2;
              else
                v104 = qword_1969FC6F0[v103];
              if (*(_BYTE *)(v96 + 8 * v104 + 4))
                v35 = 0;
              else
                v35 = (char *)v74;
            }
            else
            {
              v35 = (char *)v74;
            }
LABEL_194:
            v15 = v141;
            v14 = v145;
LABEL_48:
            if (v23 == 11)
            {
              v143 = v15;
              v148 = v14;
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v34);
              v15 = v143;
              v14 = v148;
            }
            if ((v23 & 0xFFFFFFF7) != 3 || !v35)
            {
              if (v18)
                goto LABEL_52;
              LOBYTE(v36) = 1;
              goto LABEL_57;
            }
            v72 = v15;
            v76 = v14;
            if (!v18)
            {
              LOBYTE(v36) = 1;
              goto LABEL_256;
            }
            WebCore::RenderBlock::addPercentHeightDescendant((WebCore::RenderBlock *)v35, v18);
            v14 = v76;
            v15 = v72;
LABEL_52:
            v36 = *((_QWORD *)v18 + 4);
            if (v36)
            {
              v37 = *(_QWORD *)(v36 + 8);
              if (!v37)
                goto LABEL_56;
              if (*(char *)(v37 + 45) < 0 && (*((_DWORD *)v18 + 5) & 0x400) == 0)
              {
                v144 = v14;
                v50 = *((_QWORD *)v17 + 4);
                if (v50)
                  v51 = *(_QWORD *)(v50 + 8);
                else
                  v51 = 0;
                if ((*(char *)(v51 + 45) & 0x80000000) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194107F40);
                }
                v52 = v15;
                v53 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 88) + 32) + 16) + 20);
                v54 = (v53 >> 1) & 1;
                v55 = (v53 & 2) == 0;
                if ((*(_BYTE *)(v51 + 21) & 0x10) != 0)
                  v55 = v54;
                if (v55 != (*((_DWORD *)v18 + 5) & 0x1000u) >> 12)
                {
                  if (WebCore::RenderFlexibleBox::alignmentForChild((WebCore::RenderFlexibleBox *)v51, v18) == 3)
                  {
                    v56 = WebCore::RenderBox::overridingLogicalHeight(v18);
                    goto LABEL_136;
                  }
                  goto LABEL_137;
                }
                v56 = WebCore::RenderFlexibleBox::usedChildOverridingMainSizeForPercentageResolution((WebCore::RenderFlexibleBox *)v51, v18);
LABEL_136:
                if ((v56 & 0xFF00000000) == 0)
                {
LABEL_137:
                  v36 = *((_QWORD *)v18 + 4);
                  v15 = v52;
                  if (!v36)
                  {
                    v14 = v144;
                    goto LABEL_57;
                  }
                  v37 = *(_QWORD *)(v36 + 8);
                  v14 = v144;
                  if (!v37)
                  {
LABEL_56:
                    LOBYTE(v36) = 0;
                    goto LABEL_57;
                  }
                  goto LABEL_55;
                }
                v39 = 0;
                v15 = v52;
                goto LABEL_282;
              }
LABEL_55:
              if (*(_BYTE *)(v37 + 46) != 12 || (*((_BYTE *)v18 + 21) & 4) != 0)
                goto LABEL_56;
              v72 = v15;
              v144 = v14;
              v73 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(v18);
              if ((_BYTE)v2)
              {
                v39 = (v73 & 0xFF00000000) == 0;
                v15 = v72;
                goto LABEL_282;
              }
              LOBYTE(v36) = 0;
              v14 = v144;
LABEL_256:
              v15 = v72;
            }
LABEL_57:
            v38 = LOBYTE(v150[1]);
            if (LOBYTE(v150[1]))
            {
              if (!v35)
              {
                v39 = 0;
                goto LABEL_60;
              }
LABEL_274:
              v144 = v14;
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 3) + 8) + 40) + 8) + 3384) != 2
                || v35[45] < 0
                || v35[46] == 5)
              {
                v122 = v15;
                if ((v36 & 1) == 0
                  && (v123 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(v18), (_BYTE)v2))
                {
                  v124 = (v123 & 0xFF00000000) == 0;
                }
                else
                {
                  v124 = (unint64_t)WebCore::RenderBlock::availableLogicalHeightForPercentageComputation((WebCore::RenderBlock *)v35, v2) >> 32 == 0;
                }
                v39 = v124;
                v15 = v122;
              }
              else
              {
                v39 = 0;
              }
              goto LABEL_282;
            }
            v144 = v14;
            if ((*((_DWORD *)v17 + 5) & 0x1800000) != 0x1000000
              || ((v101 = (unsigned __int16)*((_DWORD *)v17 + 31) >> 13, (v101 - 1) > 4)
                ? (v102 = 0)
                : (v102 = qword_1969FC6C8[v101 - 1]),
                  v105 = *(_QWORD *)(*((_QWORD *)v17 + 11) + 24) + 8,
                  !*(_BYTE *)(v105 + 8 * v102 + 4)))
            {
              v39 = 1;
              goto LABEL_282;
            }
            v106 = ((unsigned __int16)*((_DWORD *)v17 + 31) >> 13) - 1;
            if (v106 > 4)
              v107 = 2;
            else
              v107 = qword_1969FC6F0[v106];
            v120 = *(unsigned __int8 *)(v105 + 8 * v107 + 4);
            v39 = v120 == 0;
            if (v120)
              v121 = v35 == 0;
            else
              v121 = 1;
            if (!v121)
              goto LABEL_274;
LABEL_282:
            v38 = LOBYTE(v150[1]);
            v14 = v144;
LABEL_60:
            if (v38 == 11)
            {
              v86 = v15;
              v87 = v14;
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v150[0]);
              v14 = v87;
              v15 = v86;
            }
            v40 = v15 | v14;
            if (!v39)
              goto LABEL_62;
            v91 = v149;
            v92 = *(_QWORD *)(*((_QWORD *)v149 + 3) + 8);
            v93 = *(_QWORD *)(*(_QWORD *)(v92 + 40) + 8);
            if (*(_BYTE *)(v93 + 3384) != 2)
              goto LABEL_186;
            v125 = *(_QWORD *)(*((_QWORD *)v149 + 11) + 8);
            v126 = v125 + 4;
            v127 = v125 + 12;
            if (((*((_DWORD *)v149 + 31) >> 13) & 6u) - 2 >= 4)
              v126 = v127;
            if (*(_BYTE *)(v126 + 4)
              || (v128 = *((_DWORD *)v149 + 5), (v128 & 0x800) != 0)
              || (v128 & 0x1800000) == 0x1000000
              || *(_QWORD *)(v93 + 1272) != v92
              && ((*((_BYTE *)v149 + 45) & 1) != 0
               || (*(_WORD *)(v92 + 28) & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v92 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
              || WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio(v149, v2)
              || (*((_BYTE *)v91 + 20) & 1) == 0)
            {
LABEL_186:
              v41 = v13 != 0;
            }
            else
            {
LABEL_62:
              v41 = 1;
            }
            v42 = v4[12];
            if (v4[12] && ((v42 & 0xFFFFFFF7) != 3 ? (v43 = 1) : (v43 = v41), v43 == 1))
            {
              if (v42 == 4)
              {
LABEL_69:
                v44 = *((float *)v4 + 2);
                if (!v4[14])
                  v44 = (float)SLODWORD(v44);
                goto LABEL_71;
              }
              if (!v13)
              {
                v40 = WebCore::RenderBox::availableHeight(v149);
                v42 = v4[12];
              }
              if (v42 == 3)
              {
                v114 = *((float *)v4 + 2);
                if (!v4[14])
                  v114 = (float)SLODWORD(v114);
                v44 = (float)((float)((float)v40 * 0.015625) * v114) / 100.0;
LABEL_71:
                v45 = v44 * 64.0;
                if (v45 >= 2147483650.0 || v45 <= -2147483650.0)
                {
                  if (v45 >= 2147483650.0)
                  {
                    v47 = 0x7FFFFFFF;
                  }
                  else
                  {
                    if (v45 > -2147483650.0)
                      goto LABEL_75;
                    v47 = 0x80000000;
                  }
                }
                else
                {
LABEL_75:
                  v47 = (int)v45;
                }
              }
              else
              {
                v47 = 0;
                switch(v42)
                {
                  case 0:
                  case 1:
                  case 9:
                    v47 = v40;
                    break;
                  case 4:
                    goto LABEL_69;
                  case 11:
                    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v4 + 8), (float)v40 * 0.015625);
                    goto LABEL_71;
                  default:
                    break;
                }
              }
              v48 = __OFADD__((_DWORD)v6, v47);
              v49 = (v6 + v47);
              if (v48)
                v6 = (v6 >> 31) + 0x7FFFFFFF;
              else
LABEL_77:
                v6 = v49;
            }
            else
            {
              v88 = v4[28];
              if (v4[28])
              {
                if ((v88 & 0xFFFFFFF7) != 3)
                  v41 = 1;
                if (v41)
                {
                  if (v88 == 4)
                  {
                    v40 = 0;
                  }
                  else if (!v13)
                  {
                    v40 = WebCore::RenderBox::availableHeight(v149);
                  }
                  v89 = WebCore::valueForLength(v4 + 24, v40);
                  if (v89 == 0x80000000)
                    v90 = 0x7FFFFFFF;
                  else
                    v90 = -v89;
                  v48 = __OFADD__((_DWORD)v6, v90);
                  v49 = (v6 + v90);
                  if (!v48)
                    goto LABEL_77;
                  v6 = (v6 >> 31) + 0x7FFFFFFF;
                }
              }
            }
            return v5 | (unint64_t)(v6 << 32);
          }
        }
        v98 = 16;
        goto LABEL_198;
      }
      *(_QWORD *)v150 = this;
      v151 = &v149;
      if (v11 == 4)
      {
LABEL_141:
        v77 = *((float *)v4 + 4);
        if (!v4[22])
          v77 = (float)SLODWORD(v77);
      }
      else
      {
        v79 = WebCore::RenderBoxModelObject::relativePositionOffset(void)const::$_0::operator()((uint64_t)v150);
        if (v4[20] != 3)
        {
          v80 = 0;
          switch(v4[20])
          {
            case 0u:
            case 1u:
            case 9u:
              goto LABEL_146;
            case 4u:
              goto LABEL_141;
            case 0xBu:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v4 + 16), (float)v79 * 0.015625);
              goto LABEL_143;
            default:
              goto LABEL_158;
          }
          goto LABEL_158;
        }
        v115 = *((float *)v4 + 4);
        if (!v4[22])
          v115 = (float)SLODWORD(v115);
        v77 = (float)((float)((float)v79 * 0.015625) * v115) / 100.0;
      }
LABEL_143:
      v78 = v77 * 64.0;
      if (v78 >= 2147483650.0)
      {
        v80 = -2147483647;
      }
      else
      {
        if (v78 <= -2147483650.0)
          goto LABEL_147;
        v79 = (int)v78;
LABEL_146:
        if (v79 == 0x80000000)
          goto LABEL_147;
        v80 = -v79;
      }
    }
LABEL_158:
    v48 = __OFADD__(v5, v80);
    v84 = v5 + v80;
    if (v48)
      v5 = (v5 >> 31) + 0x7FFFFFFF;
    else
      v5 = v84;
LABEL_161:
    v9 = v4[12];
    goto LABEL_6;
  }
  if (v4[38])
    v28 = *v7;
  else
    v28 = (float)*(int *)v7;
  if (v4[14])
    v29 = *v8;
  else
    v29 = (float)*(int *)v8;
  v30 = (float)((float)((float)(int)v5 * 0.015625) + v28) * 64.0;
  if (v30 >= 2147483650.0 || v30 <= -2147483650.0)
  {
    if (v30 > -2147483650.0)
      v138 = (int)v30;
    else
      v138 = 0x80000000;
    if (v30 < 2147483650.0)
      v5 = v138;
    else
      v5 = 0x7FFFFFFF;
  }
  else
  {
    v5 = (int)v30;
  }
  v32 = (float)((float)((float)(int)v6 * 0.015625) + v29) * 64.0;
  if (v32 < 2147483650.0 && v32 > -2147483650.0)
    goto LABEL_40;
  if (v32 >= 2147483650.0)
  {
    v6 = 0x7FFFFFFFLL;
    return v5 | (unint64_t)(v6 << 32);
  }
  if (v32 <= -2147483650.0)
    v6 = 0x80000000;
  else
LABEL_40:
    v6 = (int)v32;
  return v5 | (unint64_t)(v6 << 32);
}

uint64_t PAL::initUITraitCollection(PAL *this)
{
  if (qword_1ECE7EDE8 != -1)
    dispatch_once(&qword_1ECE7EDE8, &__block_literal_global_56_3);
  return qword_1ECE7EDF0;
}

uint64_t PAL::initUIColor(PAL *this)
{
  if (qword_1ECE7ED28 != -1)
    dispatch_once(&qword_1ECE7ED28, &__block_literal_global_32_3);
  return qword_1ECE7ED30;
}

uint64_t WebCore::AuthenticationChallengeBase::error(WebCore::AuthenticationChallengeBase *this)
{
  return (uint64_t)this + 336;
}

uint64_t WebCore::AuthenticationChallengeBase::previousFailureCount(WebCore::AuthenticationChallengeBase *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t WebCore::AuthenticationChallengeBase::proposedCredential(WebCore::AuthenticationChallengeBase *this)
{
  return (uint64_t)this + 40;
}

uint64_t WebCore::AuthenticationChallengeBase::failureResponse(WebCore::AuthenticationChallengeBase *this)
{
  return (uint64_t)this + 80;
}

uint64_t WebCore::NetworkStorageSession::trackingPreventionEnabled(WebCore::NetworkStorageSession *this)
{
  return *((unsigned __int8 *)this + 136);
}

_BYTE *WebCore::ResourceRequestBase::httpHeaderField@<X0>(_BYTE *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _BYTE *v4;
  unint64_t v6;
  unint64_t v7;
  _DWORD **v8;
  _DWORD *v9;

  v4 = this;
  if ((this[184] & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4[184] |= 1u;
  }
  v6 = *((unsigned int *)v4 + 27);
  if (!(_DWORD)v6)
  {
LABEL_7:
    v9 = 0;
LABEL_8:
    *a3 = v9;
    return this;
  }
  v7 = 0;
  v8 = (_DWORD **)(*((_QWORD *)v4 + 12) + 8);
  while (*((unsigned __int16 *)v8 - 4) != a2)
  {
    ++v7;
    v8 += 2;
    if (v6 == v7)
      goto LABEL_7;
  }
  if (v7 < v6)
  {
    v9 = *v8;
    if (*v8)
      *v9 += 2;
    goto LABEL_8;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::CSSTokenizer::consumeURLToken(uint64_t this, uint64_t a2)
{
  WebCore::CSSTokenizer *v2;
  uint64_t v3;
  WebCore::CSSTokenizerInputStream *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  int v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  char v65;

  v2 = (WebCore::CSSTokenizer *)a2;
  v3 = this;
  v4 = (WebCore::CSSTokenizerInputStream *)(a2 + 848);
  v5 = *(_QWORD *)(a2 + 864);
  v6 = *(unsigned int *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD *)(a2 + 856);
  v9 = *(_QWORD *)(a2 + 848);
  if ((v6 & 4) != 0)
  {
    if (v9 < v8)
    {
      v10 = *(unsigned int *)(v5 + 4);
      if (v9 > v10)
        v10 = *(_QWORD *)(a2 + 848);
      do
      {
        if (v10 == v9)
          goto LABEL_141;
        v11 = *(unsigned __int8 *)(v7 + v9);
        v12 = v11 > 0x20;
        v13 = (1 << v11) & 0x100003600;
        if (v12 || v13 == 0)
          goto LABEL_22;
        *(_QWORD *)v4 = ++v9;
      }
      while (v8 != v9);
    }
  }
  else if (v9 < v8)
  {
    v15 = *(unsigned int *)(v5 + 4);
    if (v9 > v15)
      v15 = *(_QWORD *)(a2 + 848);
    while (1)
    {
      if (v15 == v9)
        goto LABEL_141;
      v16 = *(unsigned __int16 *)(v7 + 2 * v9);
      v12 = v16 > 0x20;
      v17 = (1 << v16) & 0x100003600;
      if (v12 || v17 == 0)
        break;
      *(_QWORD *)v4 = ++v9;
      if (v8 == v9)
        goto LABEL_40;
    }
LABEL_22:
    if (v9 < v8)
    {
      v19 = *(unsigned int *)(v5 + 4);
      if (v19 >= v9)
        v20 = (v19 - v9);
      else
        v20 = 0;
      v21 = 0;
      if ((v6 & 4) != 0)
      {
        while (v20 != v21)
        {
          this = *(unsigned __int8 *)(*(_QWORD *)(v5 + 8) + v9 + v21);
          a2 = this;
          if ((_DWORD)this == 41)
            goto LABEL_89;
          if (this >= 0x21
            && (this - 34 > 0x3A
             || ((1 << (this - 34)) & 0x400000000000061) == 0))
          {
            ++v21;
            if (this != 127 && v9 + v21 < v8)
              continue;
          }
          goto LABEL_40;
        }
LABEL_147:
        __break(0xC471u);
LABEL_150:
        JUMPOUT(0x194108C48);
      }
      while (1)
      {
        if (v20 == v21)
          goto LABEL_147;
        this = *(unsigned __int16 *)(*(_QWORD *)(v5 + 8) + 2 * v9 + 2 * v21);
        a2 = this;
        if ((_DWORD)this == 41)
          break;
        if (this >= 0x21
          && ((unsigned __int16)this - 34 > 0x3A
           || ((1 << (this - 34)) & 0x400000000000061) == 0))
        {
          ++v21;
          if ((unsigned __int16)this != 127 && v9 + v21 < v8)
            continue;
        }
        goto LABEL_40;
      }
LABEL_89:
      if (v8 >= v9)
        LODWORD(v8) = v9;
      *(_QWORD *)v4 = (v21 + 1) + v9;
      if (v19 <= v8)
      {
        v44 = 0x100000000;
        v41 = "";
      }
      else
      {
        v41 = *(const char **)(v5 + 8);
        if ((int)v19 - (int)v8 > v21)
          goto LABEL_93;
        if ((_DWORD)v8)
        {
          LODWORD(v21) = v19 - v8;
LABEL_93:
          v42 = (v6 >> 2) & 1;
          v43 = v8;
          v44 = v21;
          v45 = v19 - v8;
          if ((_DWORD)v42)
          {
            if (v45 < v21)
              goto LABEL_141;
            v41 += v43;
            v44 = v21 | 0x100000000;
          }
          else
          {
            if (v45 < v21)
              goto LABEL_141;
            v41 += 2 * v43;
          }
          goto LABEL_96;
        }
        v44 = v19 & 0xFFFFFFFEFFFFFFFFLL | (((v6 >> 2) & 1) << 32);
      }
LABEL_96:
      v46 = *(unsigned __int8 *)(v3 + 3);
      if ((v44 & 0x100000000) != 0)
        v47 = 4194308;
      else
        v47 = 4;
      *(_QWORD *)(v3 + 8) = v41;
      *(_DWORD *)v3 = v47 | (v46 << 24);
      *(_DWORD *)(v3 + 4) = v44;
      *(_DWORD *)(v3 + 16) = -1;
      return this;
    }
  }
LABEL_40:
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  while (1)
  {
    this = WebCore::CSSTokenizer::consume(v2);
    if ((int)this > 31)
    {
      switch((int)this)
      {
        case ' ':
          goto LABEL_64;
        case '"':
        case '\'':
        case '(':
          goto LABEL_127;
        case ')':
          goto LABEL_120;
        default:
          goto LABEL_45;
      }
    }
    if ((this - 9) < 2 || (this - 12) < 2)
      break;
    if (!(_DWORD)this)
      goto LABEL_120;
LABEL_45:
    if ((_DWORD)this == 127 || this < 9 || (_DWORD)this == 11 || (this - 14) < 0x12)
      goto LABEL_127;
    if ((_DWORD)this == 92)
    {
      v24 = WebCore::CSSTokenizerInputStream::peek(v4, 0);
      if (v24 <= 0xD && ((1 << v24) & 0x3400) != 0)
        goto LABEL_127;
      v25 = WebCore::CSSTokenizer::consumeEscape(v2);
      WTF::StringBuilder::append<char32_t>((WTF::StringBuilder *)&v62, v25);
    }
    else
    {
      LOWORD(v61) = this;
      if (v63 && ((v26 = v64, v64 < *((_DWORD *)v63 + 1)) ? (v27 = v62 == 0) : (v27 = 0), v27))
      {
        if ((*((_BYTE *)v63 + 16) & 4) != 0)
        {
          if (this > 0xFF)
            goto LABEL_59;
          v29 = *((_QWORD *)v63 + 1);
          ++v64;
          *(_BYTE *)(v29 + v26) = this;
        }
        else
        {
          v28 = *((_QWORD *)v63 + 1);
          ++v64;
          *(_WORD *)(v28 + 2 * v26) = this;
        }
      }
      else
      {
LABEL_59:
        WTF::StringBuilder::append();
      }
    }
  }
LABEL_64:
  v30 = *((_QWORD *)v2 + 108);
  v31 = *(_DWORD *)(v30 + 16);
  v32 = *(_QWORD *)(v30 + 8);
  v33 = *((_QWORD *)v2 + 107);
  v34 = *((_QWORD *)v2 + 106);
  if ((v31 & 4) == 0)
  {
    if (v34 >= v33)
      goto LABEL_114;
    v48 = *(unsigned int *)(v30 + 4);
    if (v34 > v48)
      v48 = *((_QWORD *)v2 + 106);
    while (v48 != v34)
    {
      v49 = *(unsigned __int16 *)(v32 + 2 * v34);
      v12 = v49 > 0x20;
      v50 = (1 << v49) & 0x100003600;
      if (v12 || v50 == 0)
        goto LABEL_114;
      *(_QWORD *)v4 = ++v34;
      if (v33 == v34)
        goto LABEL_120;
    }
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  if (v34 < v33)
  {
    v35 = *(unsigned int *)(v30 + 4);
    if (v34 > v35)
      v35 = *((_QWORD *)v2 + 106);
    while (v35 != v34)
    {
      v36 = *(unsigned __int8 *)(v32 + v34);
      v12 = v36 > 0x20;
      v37 = (1 << v36) & 0x100003600;
      if (v12 || v37 == 0)
        goto LABEL_114;
      *(_QWORD *)v4 = ++v34;
      if (v33 == v34)
        goto LABEL_120;
    }
    goto LABEL_141;
  }
LABEL_114:
  if (v34 >= v33)
  {
LABEL_120:
    WTF::StringBuilder::toString((WTF::StringBuilder *)&v62, &v61);
    v54 = WebCore::CSSTokenizer::registerString(v2, (const WTF::String *)&v61);
    if ((a2 & 0xFF00000000) != 0)
      v55 = 4194308;
    else
      v55 = 4;
    v56 = *(unsigned __int8 *)(v3 + 3);
    *(_QWORD *)(v3 + 8) = v54;
    *(_DWORD *)v3 = v55 | (v56 << 24);
    *(_DWORD *)(v3 + 4) = a2;
    *(_DWORD *)(v3 + 16) = -1;
    v57 = v61;
    v61 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v57 -= 2;
    }
    goto LABEL_134;
  }
  if (*(_DWORD *)(v30 + 4) <= v34)
  {
    __break(0xC471u);
    goto LABEL_150;
  }
  v52 = *(_QWORD *)(v30 + 8);
  if ((v31 & 4) != 0)
    v53 = *(unsigned __int8 *)(v52 + v34);
  else
    v53 = *(unsigned __int16 *)(v52 + 2 * v34);
  if (v53 == 41)
  {
    *(_QWORD *)v4 = v34 + 1;
    goto LABEL_120;
  }
  if (!v53)
    goto LABEL_120;
LABEL_127:
  while (1)
  {
    v58 = WebCore::CSSTokenizer::consume(v2);
    if (!v58)
      break;
    v59 = v58;
    if (v58 == 41)
      break;
    v60 = WebCore::CSSTokenizerInputStream::peek(v4, 0);
    if (v59 == 92 && (v60 > 0xD || ((1 << v60) & 0x3400) == 0))
      WebCore::CSSTokenizer::consumeEscape(v2);
  }
  *(_QWORD *)v3 = (*(unsigned __int8 *)(v3 + 3) << 24) | 5u;
  *(_QWORD *)(v3 + 8) = 0;
LABEL_134:
  this = (uint64_t)v63;
  v63 = 0;
  if (this)
  {
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
      goto LABEL_137;
    }
LABEL_142:
    WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
  }
LABEL_137:
  this = (uint64_t)v62;
  v62 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

const char *WebCore::CSSTokenizerInputStream::rangeAt(const char *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;

  if (this)
  {
    v3 = (uint64_t)this;
    v4 = *((_DWORD *)this + 4);
    this = (const char *)*((_QWORD *)this + 1);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((v4 >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0x100000000;
  }
  if (v5 <= a2)
    return "";
  if (v5 - a2 <= a3)
  {
    if (!a2)
      return this;
    a3 = v5 - a2;
  }
  v6 = v5 - (unint64_t)a2;
  if ((v5 & 0x100000000) != 0)
  {
    if (v6 >= a3)
    {
      this += a2;
      return this;
    }
  }
  else if (v6 >= a3)
  {
    this += 2 * a2;
    return this;
  }
  __break(1u);
  return this;
}

uint64_t WebCore::Page::addLayoutMilestones(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 660) |= a2;
  return result;
}

__n128 WebCore::AffineTransform::operator CGAffineTransform@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t WebCore::ResourceResponse::nsURLResponse(WebCore::ResourceResponse *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 30);
  if (!result)
  {
    if ((*((_BYTE *)this + 138) & 1) != 0)
    {
      return 0;
    }
    else
    {
      WebCore::ResourceResponse::initNSURLResponse(this);
      return *((_QWORD *)this + 30);
    }
  }
  return result;
}

WebCore::NetworkStorageSession *WebCore::NetworkStorageSession::NetworkStorageSession(WebCore::NetworkStorageSession *this, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v10;

  *(_QWORD *)this = 0;
  v6 = *a3;
  *a3 = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = a5;
  *((_BYTE *)this + 41) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_WORD *)this + 68) = 0;
  *((_BYTE *)this + 200) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_BYTE *)this + 216) = 0;
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 232) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_WORD *)this + 132) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)((char *)this + 69) = 0;
  *(_OWORD *)((char *)this + 109) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 34) = 0;
  v7 = *a4;
  if (*a4)
  {
    *a4 = 0;
  }
  else
  {
    WebCore::NetworkStorageSession::cookieStorage(this, &v10);
    v7 = v10;
  }
  v8 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v7;
  if (v8)
    CFRelease(v8);
  return this;
}

uint64_t WebCore::NetworkStorageSession::cookieAcceptPolicy(WebCore::NetworkStorageSession *this)
{
  const void *v1;
  unint64_t v2;
  const void *v5;

  WebCore::NetworkStorageSession::cookieStorage(this, &v5);
  v1 = v5;
  v2 = WebCore::httpCookieAcceptPolicy((uint64_t)v5);
  if (v1)
    CFRelease(v1);
  if (v2 >= 4)
    return 1;
  else
    return v2;
}

void sub_194108EA0(_Unwind_Exception *exception_object, int a2)
{
  const void *v2;
  const void *v4;
  NSException *v6;

  v4 = v2;
  if (v4)
    CFRelease(v4);
  if (a2 == 1)
  {
    v6 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v6);
    objc_end_catch();
    JUMPOUT(0x194108E8CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::httpCookieAcceptPolicy(uint64_t a1)
{
  if (a1)
    return (int)CFHTTPCookieStorageGetCookieAcceptPolicy();
  else
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage"), "cookieAcceptPolicy");
}

void WebCore::setImageSourceAllowableTypes(uint64_t a1)
{
  CFTypeRef v1;
  CFTypeRef cf;

  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)&cf);
  CGImageSourceSetAllowableTypes();
  v1 = cf;
  cf = 0;
  if (v1)
    CFRelease(v1);
}

void sub_194108F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WebCore::ResourceRequest *WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this, NSURLRequest *a2)
{
  _DWORD *v4;
  NSURLRequestAttribution v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  int v11;
  char v12;
  char v13;
  char v15;
  char v16;

  *((_QWORD *)WebCore::ResourceRequestBase::RequestData::RequestData(this) + 19) = 0;
  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v4 += 2;
  *((_QWORD *)this + 20) = v4;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 180) = 0;
  *((_BYTE *)this + 184) = *((_BYTE *)this + 184) & 0xE0 | 0xA;
  *((_QWORD *)this + 24) = a2;
  if (a2)
    CFRetain(a2);
  v5 = -[NSURLRequest attribution](a2, "attribution");
  v6 = *((_BYTE *)this + 184);
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v6 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v6;
  }
  v7 = *((_BYTE *)this + 148);
  if ((v5 == NSURLRequestAttributionDeveloper) == ((v7 & 4) == 0))
  {
    *((_BYTE *)this + 148) = v7 & 0xFB | (4 * (v5 == NSURLRequestAttributionDeveloper));
    *((_BYTE *)this + 184) = v6 & 0xFD;
  }
  v8 = -[NSURLRequest _privacyProxyFailClosedForUnreachableNonMainHosts](a2, "_privacyProxyFailClosedForUnreachableNonMainHosts");
  v9 = *((_BYTE *)this + 184);
  if ((v9 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v9 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v9;
  }
  v10 = *((_BYTE *)this + 148);
  if (((v8 ^ ((v10 & 8) == 0)) & 1) == 0)
  {
    if (v8)
      v15 = 8;
    else
      v15 = 0;
    *((_BYTE *)this + 148) = v10 & 0xF7 | v15;
    *((_BYTE *)this + 184) = v9 & 0xFD;
  }
  v11 = -[NSURLRequest _useEnhancedPrivacyMode](a2, "_useEnhancedPrivacyMode");
  v12 = *((_BYTE *)this + 184);
  if ((v12 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v12 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v12;
  }
  v13 = *((_BYTE *)this + 148);
  if (((v11 ^ ((v13 & 0x10) == 0)) & 1) == 0)
  {
    if (v11)
      v16 = 16;
    else
      v16 = 0;
    *((_BYTE *)this + 148) = v13 & 0xEF | v16;
    *((_BYTE *)this + 184) = v12 & 0xFD;
  }
  return this;
}

void sub_194109124(_Unwind_Exception *a1, void *a2)
{
  WebCore::ResourceRequestBase::RequestData *v2;
  WebCore::FormData *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  bmalloc::api *v7;
  void *v8;

  v4 = (WebCore::FormData *)*((_QWORD *)v2 + 21);
  *((_QWORD *)v2 + 21) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::FormData::~FormData(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 20);
  *((_QWORD *)v2 + 20) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 19);
  *((_QWORD *)v2 + 19) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData(v2, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

_BYTE *WebCore::ResourceRequestBase::setIsAppInitiated(_BYTE *this, int a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  char v6;

  v3 = this;
  v4 = this[184];
  if ((v4 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4 = v3[184] | 1;
    v3[184] = v4;
  }
  v5 = v3[148];
  if (((((v5 & 4) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v6 = 4;
    else
      v6 = 0;
    v3[148] = v5 & 0xFB | v6;
    v3[184] = v4 & 0xFD;
  }
  return this;
}

_BYTE *WebCore::ResourceRequestBase::setPrivacyProxyFailClosedForUnreachableNonMainHosts(_BYTE *this, int a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  char v6;

  v3 = this;
  v4 = this[184];
  if ((v4 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4 = v3[184] | 1;
    v3[184] = v4;
  }
  v5 = v3[148];
  if (((((v5 & 8) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v6 = 8;
    else
      v6 = 0;
    v3[148] = v5 & 0xF7 | v6;
    v3[184] = v4 & 0xFD;
  }
  return this;
}

_BYTE *WebCore::ResourceRequestBase::setUseAdvancedPrivacyProtections(_BYTE *this, int a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  char v6;

  v3 = this;
  v4 = this[184];
  if ((v4 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4 = v3[184] | 1;
    v3[184] = v4;
  }
  v5 = v3[148];
  if (((((v5 & 0x10) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v6 = 16;
    else
      v6 = 0;
    v3[148] = v5 & 0xEF | v6;
    v3[184] = v4 & 0xFD;
  }
  return this;
}

uint64_t WebCore::ResourceRequestBase::setDidFilterLinkDecoration(uint64_t this, int a2)
{
  char v2;
  char v3;

  v2 = *(_BYTE *)(this + 148);
  if (((((v2 & 0x20) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v3 = 32;
    else
      v3 = 0;
    *(_BYTE *)(this + 148) = v2 & 0xDF | v3;
  }
  return this;
}

WTF::StringImpl *WebCore::ResourceRequestBase::setCachePartition(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::ResourceRequestBase::RequestData *WebCore::ResourceRequestBase::RequestData::RequestData(WebCore::ResourceRequestBase::RequestData *this)
{
  uint64_t v3;

  *(_QWORD *)this = 0;
  WTF::URL::invalidate(this);
  *((_QWORD *)this + 5) = 0;
  WTF::URL::invalidate((WebCore::ResourceRequestBase::RequestData *)((char *)this + 40));
  *((_QWORD *)this + 10) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 11) = v3;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 36) = 0x10000;
  *((_BYTE *)this + 148) = *((_BYTE *)this + 148) & 0x80 | 4;
  return this;
}

void sub_19410942C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v6;

  v4 = v3;
  WebCore::ContentType::~ContentType(v4, a2);
  WebCore::ContentType::~ContentType(v2, v6);
  _Unwind_Resume(a1);
}

void sub_19410944C(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;

  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  JUMPOUT(0x19410943CLL);
}

void sub_19410947C(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;

  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  JUMPOUT(0x194109444);
}

void WebCore::IOSurface::create(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  const void *v15;
  __IOSurface *v16;
  const __CFString *v17;
  const __CFString *v18;
  BOOL v19;

  if (a1)
  {
    WebCore::IOSurfacePool::takeSurface(a1, a2, (uint64_t)a3, a5, a6);
    v11 = *a6;
    if (*a6)
    {
      if (*(unsigned __int8 *)(v11 + 56) != a4)
      {
        v16 = *(__IOSurface **)(v11 + 48);
        v17 = (const __CFString *)*MEMORY[0x1E0CBC048];
        v18 = WebCore::surfaceNameToNSString(a4);
        IOSurfaceSetValue(v16, v17, v18);
        *(_BYTE *)(*a6 + 56) = a4;
      }
      return;
    }
    *a6 = 0;
  }
  v19 = 0;
  v12 = WTF::fastMalloc((WTF *)0x40);
  WebCore::IOSurface::IOSurface(v12, a2, a3, a4, a5, &v19);
  if (v19)
  {
    *a6 = v12;
  }
  else
  {
    *a6 = 0;
    v13 = *(const void **)(v12 + 48);
    *(_QWORD *)(v12 + 48) = 0;
    if (v13)
      CFRelease(v13);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v12 + 40));
    if (*(_BYTE *)(v12 + 16))
    {
      v15 = *(const void **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v15)
        CFRelease(v15);
    }
    WTF::fastFree((WTF *)v12, v14);
  }
}

void sub_1941095CC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<WebCore::IOSurface>::~unique_ptr[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void WebCore::IOSurfacePool::takeSurface(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int *v14;
  int v15;
  int v16;
  int v18;
  unint64_t v20;
  WebCore::IOSurface *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  WebCore::IOSurface *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  const void *v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  void *v43;
  WTF *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const double *v55;
  int64x2_t v56;
  uint64_t *v57;
  uint64_t *v58;
  WTF::Lock *v59;
  uint32_t oldState[2];

  v9 = a1 + 4;
  if (__ldaxr((unsigned __int8 *)(a1 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_4;
  }
  MEMORY[0x19AEA534C](a1 + 4);
LABEL_4:
  v11 = *(_QWORD *)(a1 + 40);
  v57 = (uint64_t *)(a1 + 40);
  if (!v11)
    goto LABEL_70;
  v12 = *(_DWORD *)(v11 - 8);
  v13 = v12 & ((0xD7862706ELL * (unint64_t)(277951225 * a2 + 95187966 * HIDWORD(a2))) >> 4);
  v14 = (int *)(v11 + 40 * v13);
  v15 = *v14;
  v16 = v14[1];
  if (*v14 != (_DWORD)a2 || v16 != HIDWORD(a2))
  {
    v18 = 1;
    while (v15 | v16)
    {
      v13 = (v13 + v18) & v12;
      v14 = (int *)(v11 + 40 * v13);
      v15 = *v14;
      v16 = v14[1];
      ++v18;
      if (*v14 == (_DWORD)a2 && v16 == HIDWORD(a2))
        goto LABEL_16;
    }
    v14 = (int *)(v11 + 40 * *(unsigned int *)(v11 - 4));
  }
LABEL_16:
  if (v14 == (int *)(v11 + 40 * *(unsigned int *)(v11 - 4)))
  {
LABEL_70:
    *a5 = 0;
    goto LABEL_50;
  }
  v58 = a5;
  v59 = (WTF::Lock *)v9;
  v20 = *((_QWORD *)v14 + 1);
  v21 = (WebCore::IOSurface *)(v14 + 2);
  if (v20 == *((_QWORD *)v14 + 2))
  {
LABEL_81:
    v51 = *(_QWORD *)(a1 + 48);
    v9 = (uint64_t)v59;
    if (v51 == *(_QWORD *)(a1 + 56))
    {
LABEL_82:
      *v58 = 0;
    }
    else
    {
      while (!WebCore::surfaceMatchesParameters(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v51), a2, a3, a4)
           || IOSurfaceIsInUse(*(IOSurfaceRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v51) + 48)))
      {
        v52 = *(unsigned int *)(a1 + 72);
        v51 += v52 + 1;
        do
          v51 -= v52;
        while (v51 >= v52);
        if (*(_QWORD *)(a1 + 56) == v51)
          goto LABEL_82;
      }
      v53 = *(_QWORD *)(a1 + 64);
      v54 = *(_QWORD *)(v53 + 8 * v51);
      *(_QWORD *)(v53 + 8 * v51) = 0;
      *v58 = v54;
      WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>::remove((unint64_t *)(a1 + 48), v51);
      v55 = (const double *)(v54 + 32);
      v56 = (int64x2_t)vld1q_dup_f64(v55);
      *(int64x2_t *)(a1 + 104) = vsubq_s64(*(int64x2_t *)(a1 + 104), v56);
      WTF::HashMap<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 80), v54);
      oldState[0] = 0;
      IOSurfaceSetPurgeable(*(IOSurfaceRef *)(v54 + 48), 0, oldState);
    }
LABEL_50:
    v41 = __ldxr((unsigned __int8 *)v9);
    if (v41 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    return;
  }
  while (1)
  {
    v22 = *(_QWORD *)(*((_QWORD *)v14 + 3) + 8 * v20);
    if (*(_BYTE *)(v22 + 4))
      v23 = *(_DWORD *)v22 == a4;
    else
      v23 = 0;
    if (!v23)
      goto LABEL_78;
    WebCore::IOSurface::ensureColorSpace(*(IOSurfaceRef **)(*((_QWORD *)v14 + 3) + 8 * v20));
    v24 = *(unsigned __int8 *)(v22 + 16);
    if (!*(_BYTE *)(v22 + 16))
    {
      __break(1u);
      goto LABEL_74;
    }
    v25 = v21;
    v26 = *(const void **)(v22 + 8);
    if (v26)
      break;
    v21 = v25;
    if ((CGColorSpaceEqualToColorSpace() & 1) != 0)
      goto LABEL_26;
LABEL_78:
    v50 = v14[8];
    v20 += v50 + 1;
    do
      v20 -= v50;
    while (v20 >= v50);
    if (*((_QWORD *)v14 + 2) == v20)
      goto LABEL_81;
  }
  CFRetain(*(CFTypeRef *)(v22 + 8));
  v9 = CGColorSpaceEqualToColorSpace();
  CFRelease(v26);
  v21 = v25;
  if (!(_DWORD)v9)
    goto LABEL_78;
LABEL_26:
  if (*(_QWORD *)(v22 + 24) != a2)
    goto LABEL_78;
  v27 = *((_QWORD *)v14 + 3);
  v9 = *(_QWORD *)(v27 + 8 * v20);
  *(_QWORD *)(v27 + 8 * v20) = 0;
  *v58 = v9;
  if (*((_QWORD *)v14 + 2) != v20)
  {
    v28 = *((_QWORD *)v14 + 3);
    v29 = (uint64_t *)(v28 + 8 * v20);
    v30 = *v29;
    *v29 = 0;
    if (v30)
    {
      v31 = *(const void **)(v30 + 48);
      *(_QWORD *)(v30 + 48) = 0;
      if (v31)
        CFRelease(v31);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v30 + 40));
      if (*(_BYTE *)(v30 + 16))
      {
        v33 = *(const void **)(v30 + 8);
        *(_QWORD *)(v30 + 8) = 0;
        if (v33)
          CFRelease(v33);
      }
      WTF::fastFree((WTF *)v30, v32);
    }
    if (*(_QWORD *)v21 > v20)
    {
      memmove((void *)(v28 + 8 * v20), (const void *)(v28 + 8 * v20 + 8), 8 * *((_QWORD *)v14 + 2) - (8 * v20 + 8));
      *((_QWORD *)v14 + 2) = (*((_QWORD *)v14 + 2) + (unint64_t)v14[8] - 1) % v14[8];
    }
    else
    {
      memmove((void *)(v28 + 8 * *(_QWORD *)v21 + 8), (const void *)(v28 + 8 * *(_QWORD *)v21), 8 * v20 - 8 * *(_QWORD *)v21);
      *((_QWORD *)v14 + 1) = (*((_QWORD *)v14 + 1) + 1) % (unint64_t)v14[8];
    }
  }
  *(_QWORD *)oldState = a2;
  v34 = *(_QWORD *)(a1 + 88);
  v35 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v35)
  {
    v36 = v35 - 1;
    v37 = (_DWORD *)(v34 + 8 * v35 - 4);
    do
    {
      if (*(v37 - 1) == (_DWORD)a2 && *v37 == HIDWORD(a2))
        break;
      v37 -= 2;
      --v36;
    }
    while (v36 != -1);
  }
  else
  {
    v36 = -1;
  }
  v39 = v34 + 8 * v36;
  if (v39 + 8 != v34 + 8 * v35)
  {
    memmove((void *)v39, (const void *)(v39 + 8), 8 * v35 - 8 * v36 - 8);
    LODWORD(v35) = *(_DWORD *)(a1 + 100);
  }
  v40 = v35 - 1;
  *(_DWORD *)(a1 + 100) = v40;
  if (v40 == *(_DWORD *)(a1 + 96))
  {
    WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntSize&>(a1 + 88, (unint64_t)oldState);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v40) = a2;
    ++*(_DWORD *)(a1 + 100);
  }
  if (*((_QWORD *)v14 + 1) != *((_QWORD *)v14 + 2))
    goto LABEL_49;
  v42 = *v57;
  if (!*v57 || (v42 += 40 * *(unsigned int *)(v42 - 4), (int *)v42 != v14))
  {
    if ((int *)v42 != v14)
    {
      *(_QWORD *)v14 = -1;
      WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>::destroyAll(v21);
      v44 = (WTF *)*((_QWORD *)v14 + 3);
      if (v44)
      {
        *((_QWORD *)v14 + 3) = 0;
        v14[8] = 0;
        WTF::fastFree(v44, v43);
      }
      ++*(_DWORD *)(*v57 - 16);
      v24 = *v57;
      if (*v57)
      {
        v45 = *(_DWORD *)(v24 - 12) - 1;
LABEL_64:
        *(_DWORD *)(v24 - 12) = v45;
        v46 = *v57;
        if (*v57)
        {
          v47 = 6 * *(_DWORD *)(v46 - 12);
          v48 = *(_DWORD *)(v46 - 4);
          if (v47 < v48 && v48 >= 9)
            WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::rehash(v57, v48 >> 1, 0);
        }
        goto LABEL_68;
      }
LABEL_74:
      v45 = -1;
      goto LABEL_64;
    }
  }
LABEL_68:
  v49 = *(_DWORD *)(a1 + 100);
  if (v49)
  {
    *(_DWORD *)(a1 + 100) = v49 - 1;
LABEL_49:
    *(_QWORD *)(a1 + 104) -= *(_QWORD *)(v9 + 32);
    WTF::HashMap<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 80), v9);
    oldState[0] = 0;
    IOSurfaceSetPurgeable(*(IOSurfaceRef *)(v9 + 48), 0, oldState);
    v9 = (uint64_t)v59;
    goto LABEL_50;
  }
  __break(0xC471u);
}

CFTypeRef WebCore::ResourceRequest::nsURLRequest(WebCore::ResourceRequest *this, int a2)
{
  char v4;
  const void *v5;

  v4 = *((_BYTE *)this + 184);
  if ((v4 & 2) == 0)
  {
    WebCore::ResourceRequest::doUpdatePlatformRequest(this);
    v4 = *((_BYTE *)this + 184) | 2;
    *((_BYTE *)this + 184) = v4;
  }
  if (a2 == 1 && (v4 & 8) == 0)
  {
    WebCore::ResourceRequest::doUpdatePlatformHTTPBody(this);
    *((_BYTE *)this + 184) |= 8u;
  }
  v5 = (const void *)*((_QWORD *)this + 24);
  if (v5)
    CFRetain(v5);
  return (id)CFMakeCollectable(v5);
}

WebCore::ResourceRequest *WebCore::ResourceRequest::doUpdatePlatformHTTPBody(WebCore::ResourceRequest *this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  char v5;
  WebCore::FormData *v6;
  void *v7;
  WTF::StringImpl *v8;
  const void *v9;
  bmalloc::api *v10;
  void *v11;
  id v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::FormData *v16;

  v1 = (uint64_t)this;
  v2 = *((_BYTE *)this + 184);
  if ((v2 & 1) == 0)
  {
    this = (WebCore::ResourceRequest *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v2 = *(_BYTE *)(v1 + 184) | 1;
    *(_BYTE *)(v1 + 184) = v2;
  }
  if ((v2 & 1) == 0)
  {
    this = (WebCore::ResourceRequest *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v1);
    *(_BYTE *)(v1 + 184) |= 1u;
  }
  if (*(_QWORD *)v1)
  {
    v3 = objc_msgSend(*(id *)(v1 + 192), "mutableCopy");
    if (v3)
    {
      v4 = (void *)v3;
      if ((*(_BYTE *)(v1 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v1);
        *(_BYTE *)(v1 + 184) |= 1u;
      }
      objc_msgSend(v4, "setURL:", WTF::URL::operator NSURL *());
    }
    else
    {
      v12 = objc_alloc(MEMORY[0x1E0C92C28]);
      if ((*(_BYTE *)(v1 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v1);
        *(_BYTE *)(v1 + 184) |= 1u;
      }
      v4 = (void *)objc_msgSend(v12, "initWithURL:", WTF::URL::operator NSURL *());
    }
    objc_msgSend(v4, "setAttribution:", (*(_BYTE *)(v1 + 148) & 4) == 0);
    objc_msgSend(v4, "_setPrivacyProxyFailClosedForUnreachableNonMainHosts:", (*(unsigned __int8 *)(v1 + 148) >> 3) & 1);
    objc_msgSend(v4, "_setUseEnhancedPrivacyMode:", (*(unsigned __int8 *)(v1 + 148) >> 4) & 1);
    v5 = *(_BYTE *)(v1 + 184);
    if ((v5 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v1);
      v5 = *(_BYTE *)(v1 + 184) | 1;
      *(_BYTE *)(v1 + 184) = v5;
    }
    if ((v5 & 4) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceHTTPBody((WebCore::ResourceRequest *)v1);
      *(_BYTE *)(v1 + 184) |= 4u;
    }
    v6 = *(WebCore::FormData **)(v1 + 168);
    if (v6)
    {
      ++*(_DWORD *)v6;
      v16 = v6;
      if (*((_DWORD *)v6 + 5))
        WebCore::setHTTPBody(v4, (uint64_t *)&v16);
    }
    else
    {
      v16 = 0;
    }
    v7 = (void *)objc_msgSend(v4, "HTTPBodyStream");
    if (v7)
    {
      v13 = objc_msgSend(v7, "propertyForKey:", WebCore::formDataStreamLengthPropertyName((WebCore *)v7));
      if (v13)
      {
        objc_msgSend(v4, "setValue:forHTTPHeaderField:", v13, CFSTR("Content-Length"));
        MEMORY[0x19AEA5508](&v15, v13);
        WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(v1 + 96), (WTF::StringImpl *)0x15, &v15);
        v14 = v15;
        v15 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v8);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
    }
    v9 = *(const void **)(v1 + 192);
    *(_QWORD *)(v1 + 192) = v4;
    if (v9)
      CFRelease(v9);
    this = v16;
    v16 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::FormData::~FormData(this, v8);
        return (WebCore::ResourceRequest *)bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  return this;
}

void sub_194109E50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WebCore::FormData *a10)
{
  const void *v10;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
    WTF::RefCounted<WebCore::FormData>::deref(a10, a2);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponse>::encodeForPersistence(WTF::Persistence *a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x19AEA46BC](a1, *(_BYTE *)(a2 + 138) & 1);
  if ((*(_BYTE *)(a2 + 138) & 1) == 0)
  {
    WebCore::ResourceResponse::platformLazyInit(a2, 2);
    WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
    WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
    WTF::Persistence::Encoder::operator<<();
    WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
    WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
    WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
    WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::encodeForPersistence((uint64_t)a1, a2 + 80);
    WTF::Persistence::Encoder::operator<<();
    WTF::Persistence::Coder<std::optional<WebCore::CertificateInfo>>::encodeForPersistence<WTF::Persistence::Encoder>(a1, a2 + 120);
    WTF::Persistence::Encoder::operator<<();
    WTF::Persistence::Encoder::operator<<();
    WTF::Persistence::Encoder::operator<<();
    MEMORY[0x19AEA46BC](a1, (*(unsigned __int16 *)(a2 + 232) >> 6) & 1);
    WTF::Persistence::Encoder::operator<<();
    WTF::Persistence::Encoder::operator<<();
    JUMPOUT(0x19AEA46BCLL);
  }
  return result;
}

void WTF::Persistence::Coder<std::optional<WebCore::CertificateInfo>>::encodeForPersistence<WTF::Persistence::Encoder>(WTF::Persistence *a1, uint64_t a2)
{
  uint64_t v4;
  const __CFData *v5;
  const __CFData *v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(_BYTE *)(a2 + 8))
LABEL_7:
    JUMPOUT(0x19AEA46BCLL);
  MEMORY[0x19AEA46BC](a1, 1);
  if (*(_BYTE *)(a2 + 8))
  {
    v4 = SecTrustSerialize();
    if (!v4)
      goto LABEL_7;
    v5 = (const __CFData *)v4;
    MEMORY[0x19AEA46BC](a1, 1);
    WTF::Persistence::encodeCFData(a1, v5, v6);
    CFRelease(v5);
  }
  else
  {
    v7 = std::__throw_bad_optional_access[abi:sn180100]();
    WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::encodeForPersistence(v7, v8);
  }
}

WTF::StringImpl *WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::encodeForPersistence(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  _QWORD v9[3];
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  WTF::Persistence::Encoder::operator<<();
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v12, a2, *(WTF::StringImpl **)a2, *(_QWORD *)(a2 + 16));
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v9, a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 12)), *(_QWORD *)(a2 + 16) + 16 * *(unsigned int *)(a2 + 28));
  while (v13 != v9[1] || v14 != v9[2])
  {
    WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
    WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)v12, v4);
  }
  v5 = v11;
  v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ResourceResponse::initNSURLResponse(WebCore::ResourceResponse *this)
{
  void *v2;
  WTF::StringImpl *v3;
  const __CFString *v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  id v8;
  void *v9;
  const void *v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  const __CFString *v18;
  uint64_t v19;
  const void *v20;
  _QWORD v21[6];
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*((_WORD *)this + 68) && (*((_BYTE *)this + 8) & 2) != 0)
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v22, (uint64_t)this + 80, *((WTF::StringImpl **)this + 10), *((_QWORD *)this + 12));
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v21, (uint64_t)this + 80, (WTF::StringImpl *)(*((_QWORD *)this + 10) + 16 * *((unsigned int *)this + 23)), *((_QWORD *)this + 12) + 16 * *((unsigned int *)this + 27));
    while (v23 != v21[1] || v24 != v21[2])
    {
      if (v26)
        v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E3487BC0;
      if (v25)
        v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v5 = &stru_1E3487BC0;
      objc_msgSend(v2, "setObject:forKey:", v4, v5);
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)v22, v6);
    }
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::~HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v21, v3);
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::~HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v22, v7);
    v8 = objc_alloc(MEMORY[0x1E0C92C18]);
    v9 = (void *)objc_msgSend(v8, "initWithURL:statusCode:HTTPVersion:headerFields:", WTF::URL::operator NSURL *(), *((__int16 *)this + 68), *MEMORY[0x1E0C930E8], v2);
    v10 = (const void *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = v9;
    if (v10)
    {
      CFRelease(v10);
      v9 = (void *)*((_QWORD *)this + 30);
    }
    if (*((_QWORD *)this + 5))
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E3487BC0;
    objc_msgSend(v9, "_setMIMEType:", v11);
  }
  else
  {
    v13 = *((_QWORD *)this + 6);
    v12 = *((_QWORD *)this + 7);
    if (v13 < 0)
      v14 = -1;
    else
      v14 = *((_QWORD *)this + 6);
    if (v12 && *(_DWORD *)(v12 + 4))
      v15 = WTF::StringImpl::operator NSString *();
    else
      v15 = 0;
    v16 = objc_alloc(MEMORY[0x1E0C92C88]);
    v17 = WTF::URL::operator NSURL *();
    if (*((_QWORD *)this + 5))
      v18 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v18 = &stru_1E3487BC0;
    v19 = objc_msgSend(v16, "initWithURL:MIMEType:expectedContentLength:textEncodingName:", v17, v18, v14, v15);
    v20 = (const void *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = v19;
    if (v20)
      CFRelease(v20);
  }
}

void sub_19410A3E4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::~HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)va, a2);
  _Unwind_Resume(a1);
}

void WebCore::NetworkStorageSession::setCookie(WebCore::NetworkStorageSession *this, const WebCore::Cookie *a2)
{
  id v3;
  id v4;

  WebCore::NetworkStorageSession::nsCookieStorage(this, &v4);
  v3 = v4;
  objc_msgSend(v4, "setCookie:", WebCore::Cookie::operator NSHTTPCookie *((uint64_t)a2));
  if (v3)
    CFRelease(v3);
}

void sub_19410A468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  NSException *v14;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v14 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v14);
  objc_end_catch();
}

void WebCore::NetworkStorageSession::nsCookieStorage(WebCore::NetworkStorageSession *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  id v5;
  const void *v6;
  const void *v7;

  WebCore::NetworkStorageSession::cookieStorage(this, &v7);
  if (*((_BYTE *)this + 40)
    || (v4 = v7) != 0
    && v4 != (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage"), "_cookieStorage"))
  {
    v5 = objc_alloc(MEMORY[0x1E0C92C08]);
    v4 = v7;
    *a2 = objc_msgSend(v5, "_initWithCFHTTPCookieStorage:", v7);
  }
  else
  {
    v6 = (const void *)objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage");
    *a2 = v6;
    if (v6)
      CFRetain(v6);
  }
  if (v4)
    CFRelease(v4);
}

void sub_19410A56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NetworkStorageSession::cookieStorage@<X0>(WebCore::NetworkStorageSession *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WebCore::NetworkStorageSession::processMayUseCookieAPI(this);
  if ((result & 1) == 0 && !*((_BYTE *)this + 40))
    goto LABEL_8;
  result = *((_QWORD *)this + 4);
  if (result)
  {
    *a2 = result;
    return (uint64_t)CFRetain((CFTypeRef)result);
  }
  if (*((_QWORD *)this + 3))
  {
    result = _CFURLStorageSessionCopyCookieStorage();
    *a2 = result;
  }
  else
  {
LABEL_8:
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::NetworkStorageSession::processMayUseCookieAPI(WebCore::NetworkStorageSession *this)
{
  return WebCore::NetworkStorageSession::m_processMayUseCookieAPI;
}

uint64_t WebCore::Cookie::operator NSHTTPCookie *(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;

  if (*(_QWORD *)a1
    || *(_QWORD *)(a1 + 8)
    || *(_QWORD *)(a1 + 16)
    || *(_QWORD *)(a1 + 24)
    || *(double *)(a1 + 32) != 0.0
    || *(_BYTE *)(a1 + 48)
    || *(_BYTE *)(a1 + 56)
    || *(_BYTE *)(a1 + 57)
    || *(_BYTE *)(a1 + 58)
    || *(_QWORD *)(a1 + 64)
    || *(_QWORD *)(a1 + 72))
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 14);
    if (*(_QWORD *)(a1 + 64))
      objc_msgSend(v2, "setObject:forKey:", WTF::StringImpl::operator NSString *(), *MEMORY[0x1E0C92A98]);
    if (*(_QWORD *)(a1 + 72))
      objc_msgSend(v2, "setObject:forKey:", WTF::URL::operator NSURL *(), *MEMORY[0x1E0C92AA0]);
    if (*(_QWORD *)(a1 + 16))
      objc_msgSend(v2, "setObject:forKey:", WTF::StringImpl::operator NSString *(), *MEMORY[0x1E0C92AB0]);
    if (*(_QWORD *)a1)
      objc_msgSend(v2, "setObject:forKey:", WTF::StringImpl::operator NSString *(), *MEMORY[0x1E0C92AD0]);
    if (*(_QWORD *)(a1 + 24))
      objc_msgSend(v2, "setObject:forKey:", WTF::StringImpl::operator NSString *(), *MEMORY[0x1E0C92AE0]);
    if (*(_QWORD *)(a1 + 8))
      objc_msgSend(v2, "setObject:forKey:", WTF::StringImpl::operator NSString *(), *MEMORY[0x1E0C92B10]);
    if (*(_BYTE *)(a1 + 48))
    {
      v3 = objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", *(double *)(a1 + 40) / 1000.0);
      objc_msgSend(v2, "setObject:forKey:", v3, *MEMORY[0x1E0C92AB8]);
    }
    objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 32) / 1000.0 + -978307200.0), CFSTR("Created"));
    v4 = *(unsigned int *)(a1 + 124);
    if ((_DWORD)v4)
    {
      v5 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", 5 * v4);
      v6 = *(unsigned int *)(a1 + 124);
      if ((_DWORD)v6 == 1)
      {
        v7 = 0;
      }
      else
      {
        v8 = 0;
        do
        {
          if (v8 >= v6)
            goto LABEL_49;
          objc_msgSend(v5, "appendFormat:", CFSTR("%hu, "), *(unsigned __int16 *)(*(_QWORD *)(a1 + 112) + 2 * v8++));
          v6 = *(unsigned int *)(a1 + 124);
          v7 = v6 - 1;
        }
        while (v8 < v6 - 1);
        if (!(_DWORD)v6)
        {
LABEL_49:
          __break(0xC471u);
          JUMPOUT(0x19410A990);
        }
      }
      objc_msgSend(v5, "appendFormat:", CFSTR("%hu"), *(unsigned __int16 *)(*(_QWORD *)(a1 + 112) + 2 * v7));
      if (v5)
        objc_msgSend(v2, "setObject:forKey:", v5, *MEMORY[0x1E0C92AE8]);
    }
    if (*(_BYTE *)(a1 + 57))
      objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0C92B08]);
    if (*(_BYTE *)(a1 + 58))
      objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0C92AA8]);
    if (*(_BYTE *)(a1 + 56))
      objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("HttpOnly"));
    v9 = *(unsigned __int8 *)(a1 + 128);
    if (v9 == 1)
    {
      v10 = (_QWORD *)MEMORY[0x1E0C92AF0];
    }
    else
    {
      if (v9 != 2)
      {
LABEL_47:
        objc_msgSend(v2, "setObject:forKey:", CFSTR("1"), *MEMORY[0x1E0C92B18]);
        return objc_msgSend(MEMORY[0x1E0C92C00], "cookieWithProperties:", v2);
      }
      v10 = (_QWORD *)MEMORY[0x1E0C92B00];
    }
    if (*v10)
      objc_msgSend(v2, "setObject:forKey:", *v10, CFSTR("SameSite"));
    goto LABEL_47;
  }
  return 0;
}

void WebCore::ResourceRequest::doUpdatePlatformRequest(WebCore::ResourceRequest *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  void *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  const __CFString *v25;
  WTF::StringImpl *v26;
  CFTypeRef v27;
  const UInt8 *v28;
  CFIndex v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  void *v35;
  uint64_t v36;
  WTF::String *v37;
  uint64_t v38;
  CFStringEncoding v39;
  unint64_t v40;
  CFStringRef v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  void *v47;
  uint64_t v48;
  WTF *v49;
  const void *v50;
  WTF::StringImpl *v51;
  const __CFString *v52;
  char v53;
  WTF::StringImpl *v54;
  unsigned __int16 v55;
  WTF::StringImpl *v56;
  CFTypeRef cf;
  WTF *v58[3];
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  CFStringRef theString[3];
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  WTF *v69;
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v53 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v53;
    if ((v53 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
  }
  v2 = (void *)*((_QWORD *)this + 24);
  if (*(_QWORD *)this)
  {
    v3 = objc_msgSend(v2, "mutableCopy");
    if (v3)
    {
      v4 = (void *)v3;
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      objc_msgSend(v4, "setURL:", WTF::URL::operator NSURL *());
    }
    else
    {
      v5 = objc_alloc(MEMORY[0x1E0C92C28]);
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      v4 = (void *)objc_msgSend(v5, "initWithURL:", WTF::URL::operator NSURL *());
    }
    objc_msgSend(v4, "setAttribution:", (*((_BYTE *)this + 148) & 4) == 0);
    objc_msgSend(v4, "_setPrivacyProxyFailClosedForUnreachableNonMainHosts:", (*((unsigned __int8 *)this + 148) >> 3) & 1);
    objc_msgSend(v4, "_setUseEnhancedPrivacyMode:", (*((unsigned __int8 *)this + 148) >> 4) & 1);
    if (WebCore::ResourceRequest::s_httpPipeliningEnabled)
    {
      objc_msgSend(v4, "_CFURLRequest");
      CFURLRequestSetShouldPipelineHTTP();
    }
    objc_msgSend(v4, "_CFURLRequest");
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    CFURLRequestSetRequestPriority();
    v6 = *((_BYTE *)this + 184);
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v6 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v6;
    }
    if (!*((_BYTE *)this + 146))
    {
      objc_msgSend(v4, "_CFURLRequest");
      _CFURLRequestSetProtocolProperty();
      v6 = *((_BYTE *)this + 184);
    }
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    if (*((unsigned __int8 *)this + 144) >= 4u)
      v7 = 1;
    else
      v7 = *((unsigned __int8 *)this + 144);
    objc_msgSend(v4, "setCachePolicy:", v7);
    objc_msgSend(v4, "_CFURLRequest");
    _CFURLRequestSetProtocolProperty();
    v8 = *((_BYTE *)this + 184);
    if ((v8 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v8 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v8;
    }
    if (*((double *)this + 10) != 0.0)
    {
      objc_msgSend(v4, "setTimeoutInterval:");
      v8 = *((_BYTE *)this + 184);
    }
    if ((v8 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    objc_msgSend(v4, "setMainDocumentURL:", WTF::URL::operator NSURL *());
    v9 = *((_BYTE *)this + 184);
    if ((v9 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v9 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v9;
    }
    v10 = *((_QWORD *)this + 11);
    if (v10 && *(_DWORD *)(v10 + 4))
    {
      if ((v9 & 1) != 0
        || (WebCore::ResourceRequest::doUpdateResourceRequest(this), *((_BYTE *)this + 184) |= 1u,
                                                                     *((_QWORD *)this + 11)))
      {
        v52 = (const __CFString *)WTF::StringImpl::operator NSString *();
      }
      else
      {
        v52 = &stru_1E3487BC0;
      }
      objc_msgSend(v4, "setHTTPMethod:", v52);
      v9 = *((_BYTE *)this + 184);
    }
    if ((v9 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    objc_msgSend(v4, "setHTTPShouldHandleCookies:", (*((unsigned __int8 *)this + 148) >> 1) & 1);
    v11 = *((unsigned __int8 *)this + 145);
    objc_msgSend(v4, "URL");
    if (v11 != 1 && v11 == 2 && byte_1ECE81ED9 != 1)
    {
      qword_1ECE81EE8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", &stru_1E3487BC0);
      byte_1ECE81ED9 = 1;
    }
    objc_msgSend(v4, "_setProperty:forKey:");
    if ((*((_BYTE *)this + 148) & 1) != 0)
      v12 = MEMORY[0x1E0C9AAB0];
    else
      v12 = MEMORY[0x1E0C9AAA0];
    objc_msgSend(v4, "_setProperty:forKey:", v12, CFSTR("_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation"));
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v13 = (void *)objc_msgSend(v4, "allHTTPHeaderFields");
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v66;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v66 != v15)
            objc_enumerationMutation(v13);
          objc_msgSend(v4, "setValue:forHTTPHeaderField:", 0, *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * i));
        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
      }
      while (v14);
    }
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)theString, (uint64_t)this + 96, *((WTF::StringImpl **)this + 12), *((_QWORD *)this + 14));
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v58, (uint64_t)this + 96, (WTF::StringImpl *)(*((_QWORD *)this + 12) + 16 * *((unsigned int *)this + 27)), *((_QWORD *)this + 14) + 16 * *((unsigned int *)this + 31));
    while (theString[1] != (CFStringRef)v58[1] || theString[2] != (CFStringRef)v58[2])
    {
      v18 = v62;
      if (v62)
        *(_DWORD *)v62 += 2;
      v54 = v18;
      v19 = v63;
      v55 = v63;
      v20 = v64;
      if (v64)
      {
        *(_DWORD *)v64 += 2;
        v21 = v55;
      }
      else
      {
        v21 = (unsigned __int16)v63;
      }
      v56 = v20;
      if ((v19 & 0xFF0000) != 0 && v21 == 49 && !WTF::String::containsOnlyASCII((WTF::String *)&v56))
      {
        WTF::String::utf8();
        if (v69)
        {
          v28 = (const UInt8 *)v69 + 16;
          v29 = *((_QWORD *)v69 + 1);
        }
        else
        {
          v29 = 0;
          v28 = 0;
        }
        cf = CFStringCreateWithBytes(0, v28, v29, 0x201u, 0);
        v30 = v69;
        v69 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1)
            WTF::fastFree(v30, v22);
          else
            --*(_DWORD *)v30;
        }
      }
      else
      {
        WTF::String::createCFString((WTF::String *)&v56);
      }
      v23 = v56;
      v56 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
        else
          *(_DWORD *)v54 -= 2;
      }
      v24 = cf;
      if (v62)
        v25 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v25 = &stru_1E3487BC0;
      objc_msgSend(v4, "setValue:forHTTPHeaderField:", v24, v25, 0);
      v27 = cf;
      cf = 0;
      if (v27)
        CFRelease(v27);
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)theString, v26);
    }
    v31 = v60;
    v60 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v17);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = v59;
    v59 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v17);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v64;
    v64 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v17);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v17);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 35));
    v36 = *((unsigned int *)this + 35);
    if ((_DWORD)v36)
    {
      v37 = (WTF::String *)*((_QWORD *)this + 16);
      v38 = 8 * v36;
      do
      {
        WTF::String::createCFString(v37);
        v39 = CFStringConvertIANACharSetNameToEncoding(theString[0]);
        v40 = CFStringConvertEncodingToNSStringEncoding(v39);
        v41 = theString[0];
        theString[0] = 0;
        if (v41)
          CFRelease(v41);
        if (v40 != 0xFFFFFFFF)
        {
          v42 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v40);
          if (v42)
            objc_msgSend(v35, "addObject:", v42);
        }
        v37 = (WTF::String *)((char *)v37 + 8);
        v38 -= 8;
      }
      while (v38);
    }
    objc_msgSend(v4, "setContentDispositionEncodingFallbackArray:", v35);
    if (v35)
      CFRelease(v35);
    v44 = *((_QWORD *)this + 20);
    if (v44)
    {
      *(_DWORD *)v44 += 2;
      theString[0] = (CFStringRef)v44;
      if (*(_DWORD *)(v44 + 4))
      {
        v45 = (void *)MEMORY[0x1E0CB3940];
        WTF::String::utf8();
        if (v58[0])
          v46 = (char *)v58[0] + 16;
        else
          v46 = 0;
        v48 = objc_msgSend(v45, "stringWithUTF8String:", v46);
        v49 = v58[0];
        v58[0] = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 1)
            WTF::fastFree(v49, v47);
          else
            --*(_DWORD *)v49;
        }
        objc_msgSend(MEMORY[0x1E0C92C78], "setProperty:forKey:inRequest:", v48, *MEMORY[0x1E0C93078], v4);
      }
    }
    else
    {
      theString[0] = 0;
    }
    v50 = (const void *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v4;
    if (v50)
      CFRelease(v50);
    v51 = (WTF::StringImpl *)theString[0];
    theString[0] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v43);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  else
  {
    *((_QWORD *)this + 24) = 0;
    if (v2)
      CFRelease(v2);
  }
}

void sub_19410B298(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, CFTypeRef a12, WTF *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, CFTypeRef cf, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF *a33)
{
  const void *v33;

  if (a33)
  {
    if (*(_DWORD *)a33 == 1)
      WTF::fastFree(a33, a2);
    else
      --*(_DWORD *)a33;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (v33)
    CFRelease(v33);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ResourceResponseBase::containsInvalidHTTPHeaders(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponseBase *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unsigned int v16;
  int v17;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v25;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _BYTE v31[8];
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  v1 = this;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  v2 = (WTF::StringImpl *)*((_QWORD *)v1 + 10);
  v1 = (WebCore::ResourceResponseBase *)((char *)v1 + 80);
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v31, (uint64_t)v1, v2, *((_QWORD *)v1 + 2));
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v26, (uint64_t)v1, (WTF::StringImpl *)(*(_QWORD *)v1 + 16 * *((unsigned int *)v1 + 3)), *((_QWORD *)v1 + 2) + 16 * *((unsigned int *)v1 + 7));
  while (1)
  {
    if (v32 == v27 && v33 == v28)
    {
      v19 = 0;
      goto LABEL_39;
    }
    WTF::String::trim();
    v4 = v25;
    if (!v25)
      goto LABEL_11;
    v5 = *((unsigned int *)v25 + 1);
    if ((_DWORD)v5)
    {
      v6 = *((_DWORD *)v25 + 4);
      v7 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
      if ((v6 & 4) != 0)
        v8 = *v7;
      else
        v8 = *(unsigned __int16 *)v7;
      v9 = 0;
      if (v8 != 9 && v8 != 32)
      {
        v10 = (v5 - 1);
        v11 = (v6 & 4) != 0 ? v7[v10] : *(unsigned __int16 *)&v7[2 * v10];
        v9 = 0;
        if (v11 != 9 && v11 != 32)
        {
          if ((v6 & 4) != 0)
          {
            while (1)
            {
              v12 = *v7;
              v13 = v12 > 0xD;
              v14 = (1 << v12) & 0x2401;
              if (!v13 && v14 != 0)
                break;
              ++v7;
              v9 = 1;
              if (!--v5)
                goto LABEL_9;
            }
          }
          else
          {
            while (1)
            {
              v16 = *(unsigned __int16 *)v7;
              v13 = v16 > 0xD;
              v17 = (1 << v16) & 0x2401;
              if (!v13 && v17 != 0)
                break;
              v7 += 2;
              v9 = 1;
              if (!--v5)
                goto LABEL_9;
            }
          }
          v9 = 0;
        }
      }
    }
    else
    {
      v9 = 1;
    }
LABEL_9:
    v25 = 0;
    if (*(_DWORD *)v4 == 2)
      break;
    *(_DWORD *)v4 -= 2;
    if (!v9)
      goto LABEL_52;
LABEL_11:
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)v31, v3);
  }
  WTF::StringImpl::destroy(v4, v3);
  if ((v9 & 1) != 0)
    goto LABEL_11;
LABEL_52:
  v19 = 1;
LABEL_39:
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v3);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v29;
  v29 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v3);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v35;
  v35 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v3);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v34;
  v34 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v3);
    else
      *(_DWORD *)v23 -= 2;
  }
  return v19;
}

uint64_t WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++(uint64_t a1, WTF::StringImpl *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == **(_QWORD **)a1 + 16 * *(unsigned int *)(*(_QWORD *)a1 + 12))
  {
    v6 = *(_QWORD *)(a1 + 16) + 16;
    *(_QWORD *)(a1 + 16) = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4 + 16;
    if (WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue(a1, (WTF::StringImpl *)(v4 + 16)))
      return a1;
    v6 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD **)a1;
  }
  if (v3[2] + 16 * *((unsigned int *)v3 + 7) != v6)
  {
    v7 = *(_DWORD **)v6;
    if (*(_QWORD *)v6)
      *v7 += 2;
    v8 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (*(_BYTE *)(a1 + 34))
      *(_BYTE *)(a1 + 34) = 0;
    v9 = *(_DWORD **)(v6 + 8);
    if (v9)
      *v9 += 2;
    v10 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  return a1;
}

BOOL WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v11;

  v2 = a2;
  v3 = **(_QWORD **)a1 + 16 * *(unsigned int *)(*(_QWORD *)a1 + 12);
  if ((WTF::StringImpl *)v3 != a2)
  {
    v5 = (&WebCore::headerNameStrings)[2 * *(unsigned __int16 *)a2 + 1];
    if (v5)
    {
      a2 = (WTF::StringImpl *)(v5 - 1);
      if (v5 == (char *)1)
      {
        v6 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v6 = v11;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_WORD *)(a1 + 32) = *(_WORD *)v2;
    *(_BYTE *)(a1 + 34) = 1;
    v8 = (_DWORD *)*((_QWORD *)v2 + 1);
    if (v8)
      *v8 += 2;
    v9 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return v3 != (_QWORD)v2;
}

uint64_t WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4)
{
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (WTF::StringImpl **)(a1 + 24);
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (!WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue(a1, a3))
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(*(_QWORD *)a1 + 16) + 16 * *(unsigned int *)(*(_QWORD *)a1 + 28) != v7)
    {
      v9 = *(WTF::StringImpl **)v7;
      if (*(_QWORD *)v7)
        *(_DWORD *)v9 += 2;
      v10 = *v5;
      *v5 = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v6);
        else
          *(_DWORD *)v10 -= 2;
      }
      if (*(_BYTE *)(a1 + 34))
        *(_BYTE *)(a1 + 34) = 0;
      v11 = *(_DWORD **)(v7 + 8);
      if (v11)
        *v11 += 2;
      v12 = *(WTF::StringImpl **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v6);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
  return a1;
}

void sub_19410B9CC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::KeyValue *v2;

  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::KeyValue::~KeyValue(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::IOSurface::IOSurface(uint64_t a1, uint64_t a2, const void **a3, int a4, unsigned int a5, BOOL *a6)
{
  const void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  const __CFDictionary *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  IOSurfaceRef v36;
  const void *v37;
  CFPropertyListRef v38;
  NSObject *v39;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL *v46;
  int v47;
  unint64_t v48;
  _QWORD v49[5];
  _QWORD v50[5];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[5];
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t buf[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  const __CFString *v73;
  void *v74;
  const __CFString *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v48 = HIDWORD(a2);
  *(_DWORD *)a1 = a5;
  *(_BYTE *)(a1 + 4) = 1;
  v11 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if (v11)
    CFRetain(v11);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = a4;
  v47 = a4;
  v46 = a6;
  v12 = a5;
  v13 = 1647534392;
  v14 = 1999843442;
  switch(a5)
  {
    case 0u:
    case 1u:
      v14 = 1111970369;
      goto LABEL_6;
    case 2u:
      v13 = 875704934;
      v12 = 1;
      goto LABEL_12;
    case 3u:
      goto LABEL_6;
    case 4u:
LABEL_12:
      v41 = v13;
      v24 = *MEMORY[0x1E0CBBF08];
      v25 = MEMORY[0x19AEA2B38](*MEMORY[0x1E0CBBF08], v12 * (int)a2);
      v43 = *MEMORY[0x1E0CBBEE0];
      v45 = MEMORY[0x19AEA2B38]();
      v44 = MEMORY[0x19AEA2B38](v24, (int)a2);
      v42 = MEMORY[0x19AEA2B38](v43, v44 * (a2 >> 32));
      v51 = *MEMORY[0x1E0CBC178];
      v26 = v51;
      v56[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
      v52 = *MEMORY[0x1E0CBC140];
      v27 = v52;
      v56[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v48);
      v53 = *MEMORY[0x1E0CBC098];
      v28 = v53;
      v29 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v25);
      v30 = *MEMORY[0x1E0CBC160];
      v56[2] = v29;
      v56[3] = &unk_1E349D7F8;
      v31 = *MEMORY[0x1E0CBC168];
      v54 = v30;
      v55 = v31;
      v56[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v45);
      v57[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v56, &v51, 5);
      v49[0] = v26;
      v50[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
      v49[1] = v27;
      v50[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v48);
      v49[2] = v28;
      v50[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v44);
      v49[3] = v30;
      v50[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v45);
      v49[4] = v31;
      v50[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v42);
      v57[1] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v50, v49, 5);
      v32 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v57, 2);
      v58 = *MEMORY[0x1E0CBC1E0];
      *(_QWORD *)buf = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
      v59 = *MEMORY[0x1E0CBC008];
      v68 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v48);
      v60 = *MEMORY[0x1E0CBC070];
      v69 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v41);
      v61 = v43;
      v33 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v42 + v45);
      v34 = *MEMORY[0x1E0CBBF10];
      v70 = v33;
      v71 = &unk_1E349D7C8;
      v35 = *MEMORY[0x1E0CBC158];
      v62 = v34;
      v63 = v35;
      v72 = v32;
      v64 = *MEMORY[0x1E0CBC048];
      v73 = WebCore::surfaceNameToNSString(v47);
      v23 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, &v58, 7);
      goto LABEL_13;
    case 5u:
    case 6u:
      v14 = 1380401729;
LABEL_6:
      v15 = *MEMORY[0x1E0CBBF08];
      v16 = MEMORY[0x19AEA2B38](*MEMORY[0x1E0CBBF08], (4 * a2));
      v17 = *MEMORY[0x1E0CBBEE0];
      v18 = MEMORY[0x19AEA2B38](*MEMORY[0x1E0CBBEE0], v16 * (a2 >> 32));
      v58 = *MEMORY[0x1E0CBC1E0];
      *(_QWORD *)buf = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
      v59 = *MEMORY[0x1E0CBC008];
      v68 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v48);
      v60 = *MEMORY[0x1E0CBC070];
      v69 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v14);
      v61 = *MEMORY[0x1E0CBBF00];
      v70 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 4);
      v62 = v15;
      v71 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v16);
      v63 = v17;
      v19 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v18);
      v20 = *MEMORY[0x1E0CBBF10];
      v72 = v19;
      v73 = (const __CFString *)&unk_1E349D7C8;
      v21 = *MEMORY[0x1E0CBBFB8];
      v64 = v20;
      v65 = v21;
      v74 = &unk_1E349D7E0;
      v66 = *MEMORY[0x1E0CBC048];
      if ((a4 - 1) > 0xA)
        v22 = CFSTR("WebKit");
      else
        v22 = (const __CFString *)*((_QWORD *)&off_1E334F300 + (char)(a4 - 1));
      v75 = v22;
      v23 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, &v58, 9);
LABEL_13:
      a6 = v46;
      break;
    default:
      v23 = 0;
      break;
  }
  v36 = IOSurfaceCreate(v23);
  v37 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v36;
  if (v37)
  {
    CFRelease(v37);
    v36 = *(IOSurfaceRef *)(a1 + 48);
  }
  *a6 = v36 != 0;
  if (v36)
  {
    if (!*(_BYTE *)(a1 + 16))
      __break(1u);
    v38 = CGColorSpaceCopyPropertyList(*(CGColorSpaceRef *)(a1 + 8));
    IOSurfaceSetValue(*(IOSurfaceRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E0CBBF90], v38);
    if (v38)
      CFRelease(v38);
    *(_QWORD *)(a1 + 32) = IOSurfaceGetAllocSize(*(IOSurfaceRef *)(a1 + 48));
  }
  else
  {
    v39 = qword_1ECE7C3D8;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C3D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a2;
      LOWORD(v68) = 1024;
      *(_DWORD *)((char *)&v68 + 2) = v48;
      HIWORD(v68) = 1024;
      LODWORD(v69) = a5;
      _os_log_error_impl(&dword_1940B8000, v39, OS_LOG_TYPE_ERROR, "IOSurface creation failed for size: (%d %d) and format: (%d)", buf, 0x14u);
    }
  }
  return a1;
}

void sub_19410BFE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  WTF::MachSendRight *v2;
  const void *v3;
  const void *v5;
  const void *v6;

  if (v3)
    CFRelease(v3);
  v5 = *(const void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v5)
    CFRelease(v5);
  WTF::MachSendRight::~MachSendRight(v2);
  if (*(_BYTE *)(v1 + 16))
  {
    v6 = *(const void **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v6)
      CFRelease(v6);
  }
  _Unwind_Resume(a1);
}

const __CFString *WebCore::surfaceNameToNSString(int a1)
{
  if ((a1 - 1) > 0xA)
    return CFSTR("WebKit");
  else
    return (const __CFString *)*((_QWORD *)&off_1E334F300 + (char)(a1 - 1));
}

unint64_t WebCore::ResourceRequest::doUpdateResourceRequest(WebCore::ResourceRequest *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  char v27;
  void *v28;
  unint64_t RequestPriority;
  char v30;
  void *v31;
  void *v32;
  WTF **v33;
  unint64_t result;
  int v35;
  WTF *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t i;
  CFStringEncoding v49;
  uint64_t v50;
  WTF *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[5];
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;
  WTF::StringImpl *v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19AEA52E0](&v57, objc_msgSend(*((id *)this + 24), "URL"));
  v3 = v57;
  v57 = 0;
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v2);
      v5 = v57;
    }
    else
    {
      v5 = 0;
      *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = v58;
  *(_OWORD *)((char *)this + 8) = v58;
  LODWORD(v58) = v6 & 0xFFFFFFFE;
  *(_OWORD *)((char *)this + 24) = v59;
  v57 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (!*((_BYTE *)this + 144))
  {
    v7 = objc_msgSend(*((id *)this + 24), "cachePolicy");
    if (v7 >= 4)
      v8 = 1;
    else
      v8 = v7;
    *((_BYTE *)this + 144) = v8;
  }
  objc_msgSend(*((id *)this + 24), "timeoutInterval");
  *((_QWORD *)this + 10) = v9;
  MEMORY[0x19AEA52E0](&v57, objc_msgSend(*((id *)this + 24), "mainDocumentURL"));
  v11 = v57;
  v57 = 0;
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      v13 = v57;
    }
    else
    {
      v13 = 0;
      *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = v58;
  LODWORD(v58) = v58 & 0xFFFFFFFE;
  v15 = v59;
  *((_OWORD *)this + 3) = v14;
  *((_OWORD *)this + 4) = v15;
  v57 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  MEMORY[0x19AEA52E0](&v57, objc_msgSend(*((id *)this + 24), "_propertyForKey:", CFSTR("_kCFHTTPCookiePolicyPropertySiteForCookies")));
  v16 = (char)v57;
  if (v57)
  {
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v60, (const WTF::URL *)&v57);
    v17 = WTF::URL::host(this);
    v20 = WebCore::RegistrableDomain::matches(&v60, v17, v18);
    v21 = v60;
    v60 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v20)
      v16 = 1;
    else
      v16 = 2;
  }
  *((_BYTE *)this + 145) = v16;
  *((_BYTE *)this + 148) = *((_BYTE *)this + 148) & 0xFE | objc_msgSend((id)objc_msgSend(*((id *)this + 24), "_propertyForKey:", CFSTR("_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation")), "BOOLValue");
  if (objc_msgSend(*((id *)this + 24), "HTTPMethod"))
  {
    MEMORY[0x19AEA5508](&v60);
    v23 = v60;
    v60 = 0;
    v24 = (WTF::StringImpl *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v23;
    if (v24)
    {
      v25 = *(_DWORD *)v24 - 2;
      if (*(_DWORD *)v24 != 2)
      {
LABEL_28:
        *(_DWORD *)v24 = v25;
        goto LABEL_29;
      }
      WTF::StringImpl::destroy(v24, v22);
      v24 = v60;
      v60 = 0;
      if (v24)
      {
        v25 = *(_DWORD *)v24 - 2;
        if (*(_DWORD *)v24 != 2)
          goto LABEL_28;
        WTF::StringImpl::destroy(v24, v46);
      }
    }
  }
LABEL_29:
  if (objc_msgSend(*((id *)this + 24), "HTTPShouldHandleCookies"))
    v27 = 2;
  else
    v27 = 0;
  *((_BYTE *)this + 148) = *((_BYTE *)this + 148) & 0xFD | v27;
  v28 = (void *)*((_QWORD *)this + 24);
  if (v28)
  {
    objc_msgSend(v28, "_CFURLRequest");
    RequestPriority = CFURLRequestGetRequestPriority();
    if (RequestPriority >= 5)
      v30 = 0;
    else
      v30 = RequestPriority;
  }
  else
  {
    v30 = 0;
  }
  *((_BYTE *)this + 146) = v30;
  WebCore::HTTPHeaderMap::clear((WTF::StringImpl **)this + 12, v26);
  v31 = (void *)objc_msgSend(*((id *)this + 24), "allHTTPHeaderFields");
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 3221225472;
  v56[2] = ___ZN7WebCore15ResourceRequest23doUpdateResourceRequestEv_block_invoke;
  v56[3] = &__block_descriptor_40_e35_v32__0__NSString_8__NSString_16_B24l;
  v56[4] = this;
  objc_msgSend(v31, "enumerateKeysAndObjectsUsingBlock:", v56);
  v33 = (WTF **)((char *)this + 128);
  if (*((_DWORD *)this + 34))
  {
    if (*((_DWORD *)this + 35))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)this + 32, 0);
    v51 = *v33;
    if (*v33)
    {
      *((_QWORD *)this + 16) = 0;
      *((_DWORD *)this + 34) = 0;
      WTF::fastFree(v51, v32);
    }
  }
  result = objc_msgSend((id)objc_msgSend(*((id *)this + 24), "contentDispositionEncodingFallbackArray"), "count");
  v35 = result;
  if (result > *((unsigned int *)this + 34))
  {
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v36 = *v33;
    v37 = *((unsigned int *)this + 35);
    v38 = (void *)WTF::fastMalloc((WTF *)(8 * result));
    *((_DWORD *)this + 34) = v35;
    *((_QWORD *)this + 16) = v38;
    memcpy(v38, v36, 8 * v37);
    if (v36)
    {
      if (*v33 == v36)
      {
        *((_QWORD *)this + 16) = 0;
        *((_DWORD *)this + 34) = 0;
      }
      WTF::fastFree(v36, v39);
    }
  }
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v40 = (void *)objc_msgSend(*((id *)this + 24), "contentDispositionEncodingFallbackArray", 0);
  v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v52, v61, 16);
  if (v42)
  {
    v47 = *(_QWORD *)v53;
    do
    {
      for (i = 0; i != v42; ++i)
      {
        if (*(_QWORD *)v53 != v47)
          objc_enumerationMutation(v40);
        v49 = CFStringConvertNSStringEncodingToEncoding(objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * i), "unsignedLongValue"));
        if (v49 != -1)
        {
          v60 = (WTF::StringImpl *)CFStringConvertEncodingToIANACharSetName(v49);
          v50 = *((unsigned int *)this + 35);
          if ((_DWORD)v50 == *((_DWORD *)this + 34))
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,__CFString const*>((uint64_t)this + 128, &v60);
          }
          else
          {
            MEMORY[0x19AEA5508]((char *)*v33 + 8 * v50);
            ++*((_DWORD *)this + 35);
          }
        }
      }
      v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v52, v61, 16);
    }
    while (v42);
  }
  if (*((_QWORD *)this + 24))
  {
    v41 = (WTF::StringImpl *)objc_msgSend(MEMORY[0x1E0C92C78], "propertyForKey:inRequest:", *MEMORY[0x1E0C93078]);
    if (v41)
    {
      MEMORY[0x19AEA5508](&v60);
      v43 = v60;
      v60 = 0;
      v44 = (WTF::StringImpl *)*((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = v43;
      if (v44)
      {
        v45 = *(_DWORD *)v44 - 2;
        if (*(_DWORD *)v44 != 2)
        {
LABEL_45:
          *(_DWORD *)v44 = v45;
          goto LABEL_46;
        }
        WTF::StringImpl::destroy(v44, v41);
        v44 = v60;
        v60 = 0;
        if (v44)
        {
          v45 = *(_DWORD *)v44 - 2;
          if (*(_DWORD *)v44 != 2)
            goto LABEL_45;
          WTF::StringImpl::destroy(v44, v41);
        }
      }
    }
  }
LABEL_46:
  result = (unint64_t)v57;
  v57 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v41);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19410C5D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27)
{
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WebCore::HTTPHeaderMap::clear(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v2 = this;
  if (*((_DWORD *)this + 2))
  {
    v3 = *((unsigned int *)this + 3);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      v5 = (WTF::StringImpl **)((char *)*this + 8);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v5 += 2;
        v4 -= 16;
      }
      while (v4);
      *((_DWORD *)v2 + 3) = 0;
    }
    this = (WTF::StringImpl **)*v2;
    if (*v2)
    {
      *v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      this = (WTF::StringImpl **)WTF::fastFree((WTF *)this, a2);
    }
  }
  if (*((_DWORD *)v2 + 6))
  {
    v7 = *((unsigned int *)v2 + 7);
    if ((_DWORD)v7)
    {
      WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(v2[2], (WTF::StringImpl *)((char *)v2[2] + 16 * v7));
      *((_DWORD *)v2 + 7) = 0;
    }
    this = (WTF::StringImpl **)v2[2];
    if (this)
    {
      v2[2] = 0;
      *((_DWORD *)v2 + 6) = 0;
      return (WTF::StringImpl **)WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef cf;

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  *a2 = v4;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = (void *)v4;
    v8 = *(WTF **)a1;
    v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement(v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        v10 = cf;
        cf = 0;
        CFRelease(v10);
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_19410C7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _QWORD *v10;
  const void *v11;

  if (cf)
    CFRelease(cf);
  *v10 = 0;
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

void WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::~HTTPHeaderMapConstIterator(WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

uint64_t WebCore::ScrollView::setScrollOffset(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)a2;
  if (*((_BYTE *)this + 104))
  {
    v5 = WebCore::ScrollableArea::maximumScrollOffset((WebCore::ScrollView *)((char *)this + 64));
    v6 = HIDWORD(v5);
    if ((int)v3 >= (int)v5)
      v7 = v5;
    else
      v7 = v3;
    v8 = v7 & ~(v7 >> 31);
    if (SHIDWORD(v3) < SHIDWORD(v5))
      LODWORD(v6) = HIDWORD(v3);
    v3 = v8 | ((unint64_t)(v6 & ~((int)v6 >> 31)) << 32);
  }
  v9 = (v3 - (*((_QWORD *)this + 12) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v3
                                                                                      - *((_QWORD *)this + 12));
  return (*(uint64_t (**)(WebCore::ScrollView *, unint64_t *))(*(_QWORD *)this + 304))(this, &v9);
}

uint64_t WebCore::LocalFrameView::scrollTo(int32x2_t *this, const WebCore::IntPoint *a2)
{
  int32x2_t *v4;
  uint64_t v5;
  int v6;
  __int32 v7;
  __int32 v8;
  unint64_t v9;
  BOOL v10;
  WebCore::LocalFrame *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  const WebCore::IntPoint *v17;
  const WebCore::IntPoint *v18;
  uint64_t v19;
  unint64_t v20;

  v4 = this + 8;
  v5 = (*(uint64_t (**)(int32x2_t *, _QWORD, uint64_t))(*(_QWORD *)&this[8] + 832))(this + 8, 0, 1);
  v6 = *((_DWORD *)a2 + 1);
  v7 = v4[17].i32[0];
  v8 = v4[17].i32[1];
  v10 = *(_DWORD *)a2 == v7;
  v9 = (*(_DWORD *)a2 - v7) | ((unint64_t)(v6 - v8) << 32);
  v20 = v9;
  v10 = v10 && v6 == v8;
  if (!v10)
  {
    if (this[5])
    {
      WebCore::ScrollView::platformSetScrollPosition((id *)this, a2);
    }
    else
    {
      this[25] = *(int32x2_t *)a2;
      if (!this[39].i8[6])
      {
        if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)this + 640))(this))
        {
          if (!this[34].i8[0])
            this[34].i8[0] = 1;
          this[33] = (int32x2_t)v9;
        }
        else
        {
          (*(void (**)(int32x2_t *))(*(_QWORD *)this + 688))(this);
          WebCore::ScrollView::scrollContents(this, (const WebCore::IntSize *)&v20);
          (*(void (**)(int32x2_t *))(*(_QWORD *)this + 696))(this);
        }
      }
    }
  }
  if (v5 != (*(uint64_t (**)(int32x2_t *, _QWORD, uint64_t))(*(_QWORD *)v4 + 832))(v4, 0, 1))
  {
    (*(void (**)(int32x2_t *, _QWORD, uint64_t))(*(_QWORD *)&this[8] + 832))(v4, 0, 1);
    WebCore::LocalFrameView::scrollPositionChanged((WebCore::LocalFrameView *)this, v17, v18);
  }
  v11 = (WebCore::LocalFrame *)this[41];
  v12 = *((_QWORD *)v11 + 3);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      WebCore::PageOverlayController::didScrollFrame(*(WebCore::PageOverlayController **)(v13 + 1232), v11);
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 80) + 8) + 200);
        if (v19)
          WebCore::InspectorOverlay::update(*(WebCore::InspectorOverlay **)(v19 + 72));
      }
    }
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&this[41] + 280) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 960))(v15);
}

unint64_t WebCore::ScrollView::calculateOverhangAreasForPainting(WebCore::ScrollView *this, WebCore::IntRect *a2, WebCore::IntRect *a3)
{
  WebCore::ScrollableArea *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t result;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  WebCore::Widget *v20;
  int v21;
  WebCore::Widget *v22;
  unint64_t v23;
  int v24;
  _DWORD *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;

  v6 = (WebCore::ScrollView *)((char *)this + 64);
  if (!(*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 400))((char *)this + 64)
    || (v20 = (WebCore::Widget *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 400))(v6),
        ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v20 + 272))(v20) & 1) != 0))
  {
    v7 = 0;
  }
  else
  {
    WebCore::Widget::frameRect(v20);
    v7 = v21;
  }
  if (!(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 392))(v6)
    || (v22 = (WebCore::Widget *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 392))(v6),
        ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v22 + 272))(v22) & 1) != 0))
  {
    LODWORD(v8) = 0;
  }
  else
  {
    WebCore::Widget::frameRect(v22);
    v8 = HIDWORD(v23);
  }
  v9 = (*(uint64_t (**)(WebCore::ScrollableArea *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))(v6, 0, 1);
  v10 = *((_QWORD *)this + 12);
  v11 = v10 + v9;
  v12 = (v10 & 0xFFFFFFFF00000000) + v9;
  v13 = HIDWORD(v12);
  if (v12 < 0)
  {
    result = WebCore::Widget::frameRect(this);
    *(_QWORD *)a2 = result;
    v25 = (_DWORD *)((char *)a2 + 8);
    *((_DWORD *)a2 + 3) = -(int)v13;
LABEL_18:
    *v25 = v24 - v7;
    goto LABEL_8;
  }
  v14 = (unint64_t)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 496))(v6) >> 32;
  LODWORD(v14) = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 528))(v6) + v14;
  result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 536))(v6);
  if ((_DWORD)v14 + (_DWORD)result)
  {
    v16 = (unint64_t)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 496))(v6) >> 32;
    v17 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 528))(v6);
    v18 = v17 + (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 536))(v6) + v16;
    result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 488))(v6);
    if (v18 - HIDWORD(result) < (int)v13)
    {
      v26 = WebCore::ScrollableArea::totalContentsSize(v6) >> 32;
      v27 = ((unint64_t)(*(uint64_t (**)(WebCore::ScrollableArea *))(*((_QWORD *)this + 8) + 488))(v6) >> 32)
          - v26
          + v13;
      *(_QWORD *)a2 = WebCore::Widget::frameRect(this);
      *((_QWORD *)a2 + 1) = v28;
      v25 = (_DWORD *)((char *)a2 + 8);
      result = WebCore::Widget::frameRect(this);
      *((_DWORD *)a2 + 1) = HIDWORD(result) - v8 - v27 + v29;
      *((_DWORD *)a2 + 3) = v27;
      v24 = *((_DWORD *)a2 + 2);
      goto LABEL_18;
    }
  }
LABEL_8:
  if (v11 < 0)
  {
    *((_DWORD *)a3 + 2) = -v11;
    WebCore::Widget::frameRect(this);
    *((_DWORD *)a3 + 3) = v30 - v8 - *((_DWORD *)a2 + 3);
    *(_DWORD *)a3 = WebCore::Widget::frameRect(this);
    v31 = *((_DWORD *)a2 + 1);
    v32 = (unint64_t)WebCore::Widget::frameRect(this) >> 32;
    result = WebCore::Widget::frameRect(this);
    v33 = HIDWORD(result);
  }
  else
  {
    v19 = *((_DWORD *)this + 64);
    if (!v19)
      return result;
    result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v6 + 488))(v6);
    if (v19 - (int)result >= v11)
      return result;
    v34 = *((_DWORD *)this + 64);
    v35 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*((_QWORD *)this + 8) + 488))(v6) - v34 + v11;
    *((_DWORD *)a3 + 2) = v35;
    WebCore::Widget::frameRect(this);
    *((_DWORD *)a3 + 3) = v36 - v8 - *((_DWORD *)a2 + 3);
    v37 = WebCore::Widget::frameRect(this);
    *(_DWORD *)a3 = v37 - v7 - v35 + v38;
    v31 = *((_DWORD *)a2 + 1);
    v32 = (unint64_t)WebCore::Widget::frameRect(this) >> 32;
    result = WebCore::Widget::frameRect(this);
    v33 = HIDWORD(result);
  }
  if (v31 == (_DWORD)v32)
    LODWORD(v33) = *((_DWORD *)a2 + 3) + v33;
  *((_DWORD *)a3 + 1) = v33;
  return result;
}

unint64_t WebCore::ScrollView::maximumScrollPosition(WebCore::ScrollView *this)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = (_QWORD *)((char *)this + 64);
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 496))((char *)this + 64);
  v3 = v2;
  v4 = (*(uint64_t (**)(_QWORD *))(*v1 + 528))(v1) + HIDWORD(v2);
  v5 = v4 + (*(uint64_t (**)(_QWORD *))(*v1 + 536))(v1);
  v6 = (*(uint64_t (**)(_QWORD *))(*v1 + 488))(v1);
  v7 = v1[4];
  v8 = (((unint64_t)(v5 - HIDWORD(v6)) << 32) - (v7 & 0xFFFFFFFF00000000)) >> 32;
  return (v3 - (_DWORD)v7 - (_DWORD)v6) & ~((v3 - (int)v7 - (int)v6) >> 31) | ((unint64_t)(v8 & ~((int)v8 >> 31)) << 32);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::visibleSize(WebCore::ScrollView *this)
{
  uint64_t v1;

  (*(void (**)(WebCore::ScrollView *, _QWORD, uint64_t))(*(_QWORD *)this + 832))(this, 0, 1);
  return v1;
}

unint64_t WebCore::ScrollView::documentScrollPositionRelativeToViewOrigin(WebCore::ScrollView *this)
{
  char *v2;
  uint64_t v3;
  WebCore::Widget *v4;
  float v5;
  int v7;

  v2 = (char *)this + 64;
  v3 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v2 + 704))(v2))
  {
    v4 = (WebCore::Widget *)*((_QWORD *)this + 20);
    if (!v4)
      goto LABEL_3;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
    {
      WebCore::Widget::frameRect(v4);
      LODWORD(v4) = v7;
      goto LABEL_3;
    }
  }
  LODWORD(v4) = 0;
LABEL_3:
  v5 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))(v2);
  return (v3 - (_DWORD)v4) | ((unint64_t)(HIDWORD(v3)
                                                                           - (int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1)+ v5)) << 32);
}

uint64_t WebCore::LocalFrameView::visualViewportRect(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  float v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  float v37;
  _QWORD *v38;
  _QWORD *v39;

  if (*((_BYTE *)this + 1124))
    return *(_QWORD *)((char *)this + 1108);
  v2 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
  v37 = (float)(int)v2;
  v3 = (float)SHIDWORD(v2);
  v4 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4
    && (v31 = *(_QWORD *)(v4 + 24)) != 0
    && (v32 = *(_QWORD *)(v31 + 8)) != 0)
  {
    v7 = *(_DWORD *)(v32 + 664);
  }
  else
  {
    v7 = 0;
  }
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, v5);
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v35 = off_1E31FE290;
    v35[1] = v5;
    v38 = v35;
    WTF::ensureOnMainThread();
    if (v38)
      (*(void (**)(_QWORD *))(*v38 + 8))(v38);
  }
  v10 = (float)v7;
  v11 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this);
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  do
  {
    v14 = __ldaxr(v12);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v12));
  if (!v15)
  {
    atomic_store(1u, v12);
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v36 = off_1E31FE290;
    v36[1] = v12;
    v39 = v36;
    WTF::ensureOnMainThread();
    if (v39)
      (*(void (**)(_QWORD *))(*v39 + 8))(v39);
  }
  (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 496))((char *)this + 64);
  (*(void (**)(char *))(*((_QWORD *)this + 8) + 528))((char *)this + 64);
  (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 536))((char *)this + 64);
  v16 = *((_QWORD *)this + 41);
  v17 = *(_QWORD *)(v16 + 24);
  v18 = 1.0;
  if (v17)
  {
    v19 = *(_QWORD *)(v17 + 8);
    if (v19)
    {
      v20 = (*(_DWORD *)v19)++;
      if (*(_QWORD *)(*(_QWORD *)(v16 + 128) + 8) == v16 && !*(_BYTE *)(v19 + 1098))
        v18 = *(float *)(v19 + 356);
      if (v20)
      {
        *(_DWORD *)v19 = v20;
      }
      else
      {
        WebCore::Page::~Page((WebCore::Page *)v19);
        WTF::fastFree(v33, v34);
      }
    }
  }
  if (v3 <= 0.0)
    v21 = v3;
  else
    v21 = 0.0;
  v22 = v3 - v10;
  if ((float)(v3 - v10) < 0.0)
    v22 = 0.0;
  v23 = (float)(v21 + v22) * (float)(1.0 / v18);
  v24 = (float)((float)(1.0 / v18) * v37) * 64.0;
  v25 = 0x7FFFFFFFLL;
  v26 = 0x80000000;
  if (v24 > -2147483650.0)
    v26 = (int)v24;
  if (v24 < 2147483650.0)
    v25 = v26;
  v27 = v23 * 64.0;
  v28 = 0x7FFFFFFF00000000;
  v29 = 0x8000000000000000;
  if (v27 > -2147483650.0)
    v29 = (unint64_t)(int)v27 << 32;
  if (v27 < 2147483650.0)
    v28 = v29;
  return v28 | v25;
}

uint64_t WebCore::ScrollView::unobscuredContentRect(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  float v7;
  id *v9;
  id v10;
  WebCore::Widget *v11;
  unint64_t v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  const CGRect *v17;
  void *v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  const CGRect *v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  const CGRect *v28;
  CGRect v29;

  if (*(_QWORD *)(a1 + 40))
    return WebCore::ScrollView::platformUnobscuredContentRect(a1);
  if (!*(_BYTE *)(a1 + 196))
  {
    if ((a2 & 1) != 0)
      goto LABEL_6;
    v3 = a1 + 64;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 400))(a1 + 64))
    {
      v9 = (id *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 400))(a1 + 64);
      if (((*((uint64_t (**)(id *))*v9 + 34))(v9) & 1) == 0)
      {
        v10 = v9[5];
        if (v10)
        {
          if (objc_msgSend(v9[5], "conformsToProtocol:", &unk_1EE342188))
            v10 = (id)objc_msgSend(v10, "superview");
          objc_msgSend(v10, "frame");
          v29.origin.x = v24;
          v29.origin.y = v25;
          v29.size.width = v26;
          v29.size.height = v27;
          WebCore::enclosingIntRect(&v29, v28);
        }
      }
    }
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 392))(a1 + 64)
      || (v11 = (WebCore::Widget *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 392))(a1 + 64),
          ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v11 + 272))(v11) & 1) != 0))
    {
LABEL_6:
      LODWORD(v4) = 0;
    }
    else
    {
      WebCore::Widget::frameRect(v11);
      v4 = HIDWORD(v12);
    }
    v5 = *(void **)(a1 + 40);
    if (!v5)
      goto LABEL_8;
    if (objc_msgSend(*(id *)(a1 + 40), "conformsToProtocol:", &unk_1EE342188))
      v5 = (void *)objc_msgSend(v5, "superview");
    objc_msgSend(v5, "frame");
    v29.origin.x = v13;
    v29.origin.y = v14;
    v29.size.width = v15;
    v29.size.height = v16;
    WebCore::enclosingIntRect(&v29, v17);
    v18 = *(void **)(a1 + 40);
    if (v18)
    {
      if (objc_msgSend(*(id *)(a1 + 40), "conformsToProtocol:", &unk_1EE342188))
        v18 = (void *)objc_msgSend(v18, "superview");
      objc_msgSend(v18, "frame");
      v29.origin.x = v19;
      v29.origin.y = v20;
      v29.size.width = v21;
      v29.size.height = v22;
      WebCore::enclosingIntRect(&v29, v23);
    }
    else
    {
LABEL_8:
      v6 = *(_QWORD *)(a1 + 56);
    }
    v7 = (float)(int)(float)((float)(int)((HIDWORD(v6) - v4) & ~((HIDWORD(v6) - (int)v4) >> 31))
                           - (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 408))(a1, 0));
    ceilf((float)(1.0 / (*(float (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1)) * v7);
  }
  return *(_QWORD *)(a1 + 200);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::visibleContentRectInternal(uint64_t a1, char a2, int a3)
{
  id *v4;
  uint64_t v5;

  v4 = (id *)(a1 - 64);
  v5 = *(_QWORD *)(a1 - 24);
  if (a3 == 1 && v5)
    return WebCore::ScrollView::platformVisibleContentRect(v4, a2);
  else
    return WebCore::ScrollView::unobscuredContentRect((uint64_t)v4, a2);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::horizontalScrollbar(WebCore::ScrollView *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::verticalScrollbar(WebCore::ScrollView *this)
{
  return *((_QWORD *)this + 12);
}

float WebCore::FrameView::topContentInset(WebCore::ScrollView *a1, int a2)
{
  BOOL v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  if (*((_QWORD *)a1 + 5))
    v2 = a2 == 1;
  else
    v2 = 0;
  if (v2)
    return WebCore::ScrollView::platformTopContentInset(a1);
  v3 = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)a1 + 720))(a1);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = 0.0;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3)
  {
    v10 = *(_QWORD *)(v3 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        v6 = *(float *)(v11 + 372);
    }
  }
  do
  {
    v7 = __ldaxr(v4);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v4));
  if (!v8)
  {
    atomic_store(1u, v4);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E31FE290;
    v12[1] = v4;
    v13 = v12;
    WTF::ensureOnMainThread();
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  return v6;
}

uint64_t WebCore::LocalFrameView::frame(WebCore::LocalFrameView *this)
{
  return *((_QWORD *)this + 41);
}

uint64_t `non-virtual thunk to'WebCore::FrameView::headerHeight(WebCore::FrameView *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 8) + 720))((char *)this - 64);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1
    && (v4 = *(_QWORD *)(v1 + 24)) != 0
    && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = *(unsigned int *)(v5 + 664);
  }
  else
  {
    v6 = 0;
  }
  do
  {
    v7 = __ldaxr(v2);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v2));
  if (!v8)
  {
    atomic_store(1u, v2);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v2;
    v11 = v10;
    WTF::ensureOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return v6;
}

float WebCore::FrameView::visibleContentScaleFactor(WebCore::FrameView *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  float v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = 1.0;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1)
  {
    v8 = *(_QWORD *)(v1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        if (*(_BYTE *)(v9 + 1098))
          v4 = *(float *)(v9 + 356);
      }
    }
  }
  do
  {
    v5 = __ldaxr(v2);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v2));
  if (!v6)
  {
    atomic_store(1u, v2);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v2;
    v11 = v10;
    WTF::ensureOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return v4;
}

uint64_t `non-virtual thunk to'WebCore::FrameView::footerHeight(WebCore::FrameView *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 8) + 720))((char *)this - 64);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1
    && (v5 = *(_QWORD *)(v1 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v4 = *(unsigned int *)(v6 + 668);
  }
  else
  {
    v4 = 0;
  }
  do
  {
    v7 = __ldaxr(v2);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v2));
  if (!v8)
  {
    atomic_store(1u, v2);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v2;
    v11 = v10;
    WTF::ensureOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return v4;
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::contentsSize(WebCore::ScrollView *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::shouldPlaceVerticalScrollbarOnLeft(WebCore::LocalFrameView *this)
{
  return 0;
}

unint64_t WebCore::RenderLayerScrollableArea::contentsSize(WebCore::RenderLayerScrollableArea *this)
{
  unsigned int v1;
  WebCore::RenderLayerScrollableArea *v3;
  unsigned int v4;

  if (*((_BYTE *)this + 76))
  {
    v3 = this;
    WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
    this = v3;
    v4 = *((_DWORD *)v3 + 22);
    if (*((_BYTE *)v3 + 76))
    {
      WebCore::RenderLayerScrollableArea::computeScrollDimensions(v3);
      this = v3;
    }
    v1 = v4;
  }
  else
  {
    v1 = *((_DWORD *)this + 22);
  }
  return v1 | ((unint64_t)*((unsigned int *)this + 23) << 32);
}

unint64_t WebCore::RenderLayerScrollableArea::visibleSize(WebCore::RenderLayerScrollableArea *this)
{
  WebCore::RenderBox *v1;
  BOOL v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  v1 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
  if (v1)
    v2 = (*((_BYTE *)v1 + 45) & 4) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  v3 = WebCore::RenderBox::clientWidth(*(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32));
  v5 = (((int)(v3 - (v4 & 0xFFFFFFC0) + 32) >> 6) + v3 / 64);
  v6 = WebCore::RenderBox::clientHeight(v1);
  return v5 | ((unint64_t)(((int)(v6 - (v7 & 0xFFFFFFC0) + 32) >> 6) + v6 / 64) << 32);
}

uint64_t WebCore::ScrollableArea::headerHeight(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::footerHeight(WebCore::ScrollableArea *this)
{
  return 0;
}

WTF *WebCore::updateSnapOffsetsForScrollableArea(WTF *a1, uint64_t a2, WebCore::RenderStyle *a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  unsigned int v8;
  WTF *result;
  uint64_t *v13;
  int isEmptyIgnoringNullReferences;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  __int16 v19;
  char v20;
  BOOL v21;
  int v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  int v26;
  WebCore::Length *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  _BOOL4 v32;
  int *v33;
  float v34;
  float v35;
  int *v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  WebCore::Length *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  __int16 v53;
  int v54;
  int v55;
  int v56;
  signed int v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  WebCore::Element *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  signed int v70;
  int v71;
  int v72;
  signed int v73;
  int v74;
  signed int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  WTF *v94;
  void *v95;
  _BOOL4 v96;
  _BOOL4 v97;
  unint64_t v98;
  int v99;
  unsigned int v100;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  WebCore::ScrollableArea *v109;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117;
  int v118;
  float v119;
  float v120;
  int v121;
  float v122;
  _OWORD v123[2];
  _DWORD v124[4];
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  WTF *v129;
  uint64_t v130;
  WTF *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[3];

  v135[0] = a4;
  v135[1] = a5;
  v8 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 463);
  if (!(v8 >> 8))
    return WebCore::ScrollableArea::clearSnapOffsets(a1);
  v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 1944)
                  + 496);
  v109 = a1;
  isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD *)*v13);
  a1 = v109;
  if (isEmptyIgnoringNullReferences)
    return WebCore::ScrollableArea::clearSnapOffsets(a1);
  v133 = 0;
  v134 = 0;
  v131 = 0;
  v132 = 0;
  v129 = 0;
  v130 = 0;
  v98 = WebCore::ScrollableArea::maximumScrollOffset(v109);
  v15 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v109 + 416))(v109);
  v16 = (_DWORD)v15 << 6;
  if ((int)v15 < -33554432)
    v16 = 0x80000000;
  if ((int)v15 > 0x1FFFFFF)
    v16 = 0x7FFFFFFF;
  v100 = v16;
  v17 = HIDWORD(v15) << 6;
  if (SHIDWORD(v15) < -33554432)
    v17 = 0x80000000;
  if (SHIDWORD(v15) <= 0x1FFFFFF)
    v18 = v17;
  else
    v18 = 0x7FFFFFFF;
  v99 = v18;
  v19 = WebCore::axesFlippedForWritingModeAndDirection(a6, a7);
  v20 = 2;
  switch(a6)
  {
    case 1:
    case 2:
      goto LABEL_15;
    case 3:
    case 5:
      LOBYTE(a6) = 3;
      goto LABEL_15;
    case 4:
      goto LABEL_16;
    default:
      LOBYTE(a6) = 0;
LABEL_15:
      v20 = a6;
LABEL_16:
      v107 = v20 & 0xFE;
      v21 = v107 == 2;
      v22 = v21;
      v23 = !v21;
      v24 = v8 == 4;
      if ((_BYTE)v8)
        v25 = v8 == 4;
      else
        v25 = 1;
      if (v8 == 1)
        v24 = 1;
      if (v8 == 2)
      {
        v24 = v23;
        v25 = v21;
      }
      if (v8 != 3)
        v22 = v24;
      v106 = v22;
      if (v8 == 3)
        v26 = v23;
      else
        v26 = v25;
      v105 = v26;
      v27 = (WebCore::Length *)WebCore::RenderStyle::scrollPadding(a3);
      v102 = WebCore::computeScrollSnapPortOrAreaRect((unsigned int *)v135, v27, 0);
      v108 = v28;
      WTF::WeakHashSet<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v111, v13);
      WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(&v127, v13);
      v29 = v112;
      v30 = v128;
      if (v112 != v128)
      {
        v103 = HIBYTE(v19);
        v104 = v19;
        v31 = __OFADD__((_DWORD)v102, (_DWORD)v108);
        v97 = v31;
        v32 = __OFADD__(HIDWORD(v102), HIDWORD(v108));
        v96 = v32;
        do
        {
          v33 = *(int **)(*(_QWORD *)v29 + 8);
          if (WebCore::RenderObject::enclosingScrollableContainerForSnapping((uint64_t)v33) == a2
            && WebCore::RenderElement::element((WebCore::RenderElement *)v33))
          {
            v34 = (float)v33[40] * 0.015625;
            v35 = (float)v33[41] * 0.015625;
            v116 = 0;
            v117 = v34 + 0.0;
            v118 = 0;
            v119 = v34 + 0.0;
            v120 = v35 + 0.0;
            v121 = 0;
            v122 = v35 + 0.0;
            v36 = v33;
            WebCore::RenderObject::localToContainerQuad((uint64_t)v33, (float *)&v116, a2, 0xAu, v123);
            v124[0] = WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v123);
            v124[1] = v37;
            v124[2] = v38;
            v124[3] = v39;
            WebCore::LayoutRect::LayoutRect((int *)&v125, (const WebCore::FloatRect *)v124);
            if (((*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v109 + 32))(v109) & 1) == 0)
            {
              v40 = v125 + v100;
              if (__OFADD__((_DWORD)v125, v100))
                v40 = (v125 >> 31) + 0x7FFFFFFF;
              LODWORD(v125) = v40;
              v41 = HIDWORD(v125) + v99;
              if (__OFADD__(HIDWORD(v125), v99))
                v41 = (HIDWORD(v125) >> 31) + 0x7FFFFFFF;
              HIDWORD(v125) = v41;
            }
            v42 = (WebCore::Length *)WebCore::RenderStyle::scrollMargin((WebCore::RenderStyle *)(v33 + 20));
            v125 = WebCore::computeScrollSnapPortOrAreaRect((unsigned int *)&v125, v42, 1);
            v126 = v43;
            v44 = (unsigned __int8 *)WebCore::RenderStyle::scrollSnapAlign((WebCore::RenderStyle *)(v33 + 20));
            v45 = *v44;
            v46 = v44[1];
            v47 = WebCore::RenderStyle::scrollSnapStop((WebCore::RenderStyle *)(v33 + 20));
            v48 = (unsigned __int16)v36[31] >> 13;
            if ((v48 - 2) <= 3)
            {
              v49 = HIDWORD(v126);
              v50 = v103;
              v51 = v104;
              v52 = HIDWORD(v108);
            }
            else
            {
              v49 = v126;
              v50 = v103;
              v51 = v104;
              v52 = v108;
            }
            if (v49 > v52)
            {
              v53 = WebCore::axesFlippedForWritingModeAndDirection(v48, (v36[30] >> 26) & 1);
              v51 = v53;
              v50 = HIBYTE(v53);
            }
            if (v107 == 2)
              v54 = v45;
            else
              v54 = v46;
            if (v107 == 2)
              v45 = v46;
            if (v54)
              v55 = v105;
            else
              v55 = 0;
            if (v45)
              v56 = v106;
            else
              v56 = 0;
            if ((v55 & 1) != 0 || v56)
            {
              v57 = (v125 >> 31) + 0x7FFFFFFF;
              if (!__OFSUB__((_DWORD)v125, (_DWORD)v102))
                v57 = v125 - v102;
              v58 = (HIDWORD(v125) >> 31) + 0x7FFFFFFF;
              if (!__OFSUB__(HIDWORD(v125), HIDWORD(v102)))
                v58 = HIDWORD(v125) - HIDWORD(v102);
              v59 = WebCore::ScrollableArea::scrollOffsetFromPosition((uint64_t)v109, (((int)(v57 - ((HIDWORD(v125) - HIDWORD(v102)) & 0xFFFFFFC0) + 32) >> 6) + v57 / 64) | ((unint64_t)(((int)(v58 - ((HIDWORD(v125) - HIDWORD(v102)) & 0xFFFFFFC0) + 32) >> 6) + v58 / 64) << 32));
              v60 = ((_DWORD)v59 << 6);
              if ((int)v59 < -33554432)
                v60 = 0x80000000;
              v61 = HIDWORD(v59) << 38;
              if (SHIDWORD(v59) < -33554432)
                v61 = 0x8000000000000000;
              v62 = 0x7FFFFFFF00000000;
              if (SHIDWORD(v59) <= 0x1FFFFFF)
                v62 = v61;
              if ((int)v59 > 0x1FFFFFF)
                v60 = 0x7FFFFFFFLL;
              *(_QWORD *)&v123[0] = v62 | v60;
              *((_QWORD *)&v123[0] + 1) = v126;
              if (HIDWORD(v132) == (_DWORD)v132)
              {
                WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>((uint64_t)&v131, (unint64_t)v123);
              }
              else
              {
                *((_OWORD *)v131 + HIDWORD(v132)) = v123[0];
                ++HIDWORD(v132);
              }
              if (WebCore::RenderElement::element((WebCore::RenderElement *)v36))
                v63 = WebCore::RenderElement::element((WebCore::RenderElement *)v36) == a8;
              else
                v63 = 0;
              v64 = (WebCore::Element *)WebCore::RenderElement::element((WebCore::RenderElement *)v36);
              v65 = WebCore::Element::identifier(v64);
              v116 = v65;
              v66 = HIDWORD(v130);
              if (HIDWORD(v130) == (_DWORD)v130)
              {
                WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)&v129, (unint64_t)&v116);
              }
              else
              {
                *((_QWORD *)v129 + HIDWORD(v130)) = v65;
                HIDWORD(v130) = v66 + 1;
              }
              if (v55)
              {
                v67 = v125;
                v68 = v125 + v126;
                if (__OFADD__((_DWORD)v125, (_DWORD)v126))
                  v68 = (v125 >> 31) + 0x7FFFFFFF;
                switch(v54)
                {
                  case 3:
                    if (!v51)
                      v67 = v68;
                    break;
                  case 2:
                    v69 = __OFADD__((_DWORD)v125, v68);
                    v70 = v125 + v68;
                    if (v69)
                      v70 = (v125 >> 31) + 0x7FFFFFFF;
                    if (v70 >= 0)
                      v71 = v70;
                    else
                      v71 = v70 + 1;
                    v67 = v71 >> 1;
                    break;
                  case 1:
                    if (v51)
                      v67 = v68;
                    break;
                  default:
                    v67 = 0;
                    break;
                }
                v72 = v102 + v108;
                if (v97)
                  v72 = (v102 >> 31) + 0x7FFFFFFF;
                switch(v54)
                {
                  case 3:
                    if (v51)
                      v72 = v102;
                    break;
                  case 2:
                    v69 = __OFADD__((_DWORD)v102, v72);
                    v73 = v102 + v72;
                    if (v69)
                      v73 = (v102 >> 31) + 0x7FFFFFFF;
                    v72 = v73 / 2;
                    break;
                  case 1:
                    if (!v51)
                      v72 = v102;
                    break;
                  default:
                    v72 = 0;
                    break;
                }
                v69 = __OFSUB__(v67, v72);
                v74 = v67 - v72;
                if (v69)
                  v74 = (v67 >> 31) + 0x7FFFFFFF;
                v75 = WebCore::ScrollableArea::scrollOffsetFromPosition((uint64_t)v109, (((int)(v74 - (v67 & 0xFFFFFFC0) + 32) >> 6) + v74 / 64));
                if ((int)(v98 & ~((int)v98 >> 31)) <= v75)
                  v76 = v98;
                else
                  v76 = v75;
                v77 = v76 & ~(v76 >> 31);
                if (v77 >> 25)
                  v78 = 0x7FFFFFFFLL;
                else
                  v78 = v77 << 6;
                WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_1::operator()(&v133, (void *)v78, v47, SDWORD2(v123[0]) > (int)v108, v116, v63, HIDWORD(v132) - 1);
              }
              if (v56)
              {
                v79 = HIDWORD(v125);
                v80 = HIDWORD(v125) + HIDWORD(v126);
                if (__OFADD__(HIDWORD(v125), HIDWORD(v126)))
                  v80 = (HIDWORD(v125) >> 31) + 0x7FFFFFFF;
                switch(v45)
                {
                  case 3:
                    if (!v50)
                      v79 = v80;
                    break;
                  case 2:
                    v69 = __OFADD__(HIDWORD(v125), v80);
                    v81 = HIDWORD(v125) + v80;
                    if (v69)
                      v81 = (HIDWORD(v125) >> 31) + 0x7FFFFFFF;
                    if (v81 >= 0)
                      v82 = v81;
                    else
                      v82 = v81 + 1;
                    v79 = v82 >> 1;
                    break;
                  case 1:
                    if (v50)
                      v79 = v80;
                    break;
                  default:
                    v79 = 0;
                    break;
                }
                v83 = HIDWORD(v102) + HIDWORD(v108);
                if (v96)
                  v83 = (HIDWORD(v102) >> 31) + 0x7FFFFFFF;
                switch(v45)
                {
                  case 3:
                    if (v50)
                      v83 = HIDWORD(v102);
                    break;
                  case 2:
                    v69 = __OFADD__(HIDWORD(v102), v83);
                    v84 = HIDWORD(v102) + v83;
                    if (v69)
                      v84 = (HIDWORD(v102) >> 31) + 0x7FFFFFFF;
                    v83 = v84 / 2;
                    break;
                  case 1:
                    if (!v50)
                      v83 = HIDWORD(v102);
                    break;
                  default:
                    v83 = 0;
                    break;
                }
                v69 = __OFSUB__(v79, v83);
                v85 = v79 - v83;
                if (v69)
                  v85 = (v79 >> 31) + 0x7FFFFFFF;
                v86 = WebCore::ScrollableArea::scrollOffsetFromPosition((uint64_t)v109, (unint64_t)(((int)(v85 - (v79 & 0xFFFFFFC0) + 32) >> 6) + v85 / 64) << 32);
                v87 = HIDWORD(v86);
                if ((HIDWORD(v98) & ~(SHIDWORD(v98) >> 31)) <= SHIDWORD(v86))
                  LODWORD(v87) = HIDWORD(v98);
                v88 = v87 & ~((int)v87 >> 31);
                if (v88 >> 25)
                  v89 = 0x7FFFFFFFLL;
                else
                  v89 = v88 << 6;
                WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_1::operator()(&v134, (void *)v89, v47, SHIDWORD(v123[0]) > SHIDWORD(v108), v116, v63, HIDWORD(v132) - 1);
              }
            }
          }
          WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v111);
          v29 = v112;
        }
        while (v112 != v30);
      }
      WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::values(&v111, &v133);
      v127 = 0;
      v128 = 0;
      WTF::Mapper<WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::SizedIteratorRange<WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>,WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>>(WTF::SizedIteratorRange<WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>,WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>> const&)::{lambda(WebCore::SnapOffset<WebCore::LayoutUnit>&&)#1},WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>,WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>> const&,void>::map((uint64_t)&v127, &v111);
      if (HIDWORD(v128))
        std::sort[abi:sn180100]<WebCore::SnapOffset<WebCore::LayoutUnit> *,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0>((uint64_t)v127, (int *)&v127[5 * HIDWORD(v128)]);
      WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::values(&v111, &v134);
      v123[0] = 0uLL;
      WTF::Mapper<WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::SizedIteratorRange<WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>,WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>>(WTF::SizedIteratorRange<WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>,WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>> const&)::{lambda(WebCore::SnapOffset<WebCore::LayoutUnit>&&)#1},WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::LayoutUnit,WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LayoutUnit>>,WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>>> const&,void>::map((uint64_t)v123, &v111);
      if (HIDWORD(v123[0]))
        std::sort[abi:sn180100]<WebCore::SnapOffset<WebCore::LayoutUnit> *,WebCore::updateSnapOffsetsForScrollableArea(WebCore::ScrollableArea &,WebCore::RenderBox const&,WebCore::RenderStyle const&,WebCore::LayoutRect,WebCore::WritingMode,WebCore::TextDirection,WebCore::Element *)::$_0>(*(uint64_t *)&v123[0], (int *)(*(_QWORD *)&v123[0] + 40 * HIDWORD(v123[0])));
      LOBYTE(v111) = BYTE1(v8);
      WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v112, (unsigned int *)&v127);
      WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v113, (unsigned int *)v123);
      WTF::Vector<WebCore::LayoutRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v114, (uint64_t)&v131);
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v115, (uint64_t)&v129);
      WebCore::ScrollableArea::setScrollSnapOffsetInfo(v109, (uint64_t)&v111);
      WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::~ScrollSnapOffsetsInfo((uint64_t)&v111, v90);
      WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF **)v123, v91);
      WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF **)&v127, v92);
      if (v129)
        WTF::fastFree(v129, v93);
      v94 = v131;
      if (v131)
      {
        v131 = 0;
        LODWORD(v132) = 0;
        WTF::fastFree(v94, v93);
      }
      WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::~HashMap(&v133, v93);
      result = (WTF *)WTF::HashMap<WebCore::LayoutUnit,WebCore::SnapOffset<WebCore::LayoutUnit>,WTF::DefaultHash<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTraits<WebCore::SnapOffset<WebCore::LayoutUnit>>,WTF::HashTableTraits>::~HashMap(&v134, v95);
      break;
  }
  return result;
}

WTF *WebCore::RenderLayerScrollableArea::updateSnapOffsets(WTF *this)
{
  uint64_t v1;
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (!v1)
    return this;
  v2 = this;
  v3 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  while (1)
  {
    if ((*(_BYTE *)(v3 + 45) & 1) == 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
      if (v4)
        break;
    }
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
    {
      v3 = *(_QWORD *)(v8 + 8);
      if (v3)
        continue;
    }
    return this;
  }
  v5 = *(_WORD *)(v4 + 28);
  if ((v5 & 8) == 0)
    goto LABEL_30;
  if ((v5 & 0x10) != 0)
  {
    for (i = *(_QWORD *)(*((_QWORD *)this + 12) + 32); ; i = *(_QWORD *)(*(_QWORD *)(i + 32) + 8))
    {
      if ((*(_BYTE *)(i + 45) & 1) == 0)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(i + 24) + 8);
        if (v7)
          break;
      }
    }
    if ((*(_WORD *)(v7 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19410E634);
    }
    if ((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
    {
      while (1)
      {
        if ((*(_BYTE *)(v1 + 45) & 1) == 0)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
          if (v9)
            break;
        }
        v1 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
      }
      if ((*(_WORD *)(v9 + 28) & 8) != 0)
      {
        if ((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            v10 = (_DWORD *)(*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL);
          else
            v10 = 0;
        }
        else
        {
          v10 = 0;
        }
        v11 = WebCore::RenderBox::paddingBoxRect((WebCore::RenderBox *)v10);
        return WebCore::updateSnapOffsetsForScrollableArea(v2, (uint64_t)v10, (WebCore::RenderStyle *)(v10 + 20), v11, v12, (unsigned __int16)v10[31] >> 13, (v10[30] >> 26) & 1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 12) + 32)+ 24)+ 8)+ 40)+ 8)+ 1248));
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x19410E614);
    }
  }
  return this;
}

unint64_t WebCore::RenderBox::paddingBoxRect(WebCore::RenderBox *this)
{
  uint64_t v2;
  unint64_t v3;

  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  }
  v2 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 992))(this);
  return HIDWORD(v3) | (v2 << 32);
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::horizontalOverscrollBehavior(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1272);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    if (*(_QWORD *)(v1 + 1944))
      return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 636) >> 1) & 3;
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::verticalOverscrollBehavior(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1272);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    if (*(_QWORD *)(v1 + 1944))
      return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 636) >> 3) & 3;
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

WTF *WebCore::setStateScrollingNodeSnapOffsetsAsFloat(uint64_t a1, uint64_t a2, float a3)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  WTF *v13;
  uint64_t v14;
  char *v15;
  WTF *v16;
  WTF *v17[2];
  WTF *v18[2];
  WTF *v19[2];
  WTF *v20[2];
  uint64_t v21;

  if (a2)
  {
    WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::convertUnits<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>>((uint64_t)v17, a2, a3);
    WebCore::ScrollingStateScrollingNode::setSnapOffsetsInfo(a1, (unsigned __int8 *)v17);
    return (WTF *)WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::~ScrollSnapOffsetsInfo((uint64_t)v17, v9);
  }
  else
  {
    v21 = 0;
    *(_OWORD *)v19 = 0u;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)v18 = 0u;
    if ((WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::isEqual((unsigned __int8 *)(a1 + 168), (unsigned __int8 *)v17) & 1) == 0)
    {
      WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::operator=((_BYTE *)(a1 + 168), (uint64_t)v17);
      v10 = *(_QWORD *)(a1 + 40);
      if ((v10 & 0x100) == 0)
      {
        *(_QWORD *)(a1 + 40) = v10 | 0x100;
        WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(a1 + 48), 1);
      }
    }
    v5 = v20[1];
    if (v20[1])
    {
      v20[1] = 0;
      LODWORD(v21) = 0;
      WTF::fastFree(v5, v4);
    }
    v6 = v19[1];
    if (v19[1])
    {
      v19[1] = 0;
      LODWORD(v20[0]) = 0;
      WTF::fastFree(v6, v4);
    }
    v7 = v18[1];
    if (HIDWORD(v19[0]))
    {
      v11 = 40 * HIDWORD(v19[0]);
      v12 = (char *)v18[1] + 24;
      do
      {
        v13 = *(WTF **)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)v12 = 0;
          *((_DWORD *)v12 + 2) = 0;
          WTF::fastFree(v13, v4);
        }
        v12 += 40;
        v11 -= 40;
      }
      while (v11);
      v7 = v18[1];
    }
    if (v7)
    {
      v18[1] = 0;
      LODWORD(v19[0]) = 0;
      WTF::fastFree(v7, v4);
    }
    result = v17[1];
    if (HIDWORD(v18[0]))
    {
      v14 = 40 * HIDWORD(v18[0]);
      v15 = (char *)v17[1] + 24;
      do
      {
        v16 = *(WTF **)v15;
        if (*(_QWORD *)v15)
        {
          *(_QWORD *)v15 = 0;
          *((_DWORD *)v15 + 2) = 0;
          WTF::fastFree(v16, v4);
        }
        v15 += 40;
        v14 -= 40;
      }
      while (v14);
      result = v17[1];
    }
    if (result)
    {
      v17[1] = 0;
      LODWORD(v18[0]) = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

uint64_t WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::isEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t result;
  float *v6;
  float *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float *v23;
  float32x2_t *v24;
  uint64_t i;
  unint64_t v26;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int32x2_t v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;

  if (*a1 != *a2)
    return 0;
  v2 = *((_DWORD *)a1 + 5);
  if (v2 != *((_DWORD *)a2 + 5))
    return 0;
  if (v2)
  {
    v34 = *((unsigned int *)a1 + 5);
    v36 = a2;
    v38 = a1;
    v10 = *((_QWORD *)a1 + 1);
    v11 = *((_QWORD *)a2 + 1);
    result = WebCore::operator==<float>(v10, v11);
    if (!(_DWORD)result)
      return result;
    v12 = v10 + 40;
    v13 = v11 + 40;
    v14 = 1;
    do
    {
      v15 = v14;
      if (v34 == v14)
        break;
      v32 = WebCore::operator==<float>(v12, v13);
      v14 = v15 + 1;
      v12 += 40;
      v13 += 40;
    }
    while (v32);
    a2 = v36;
    a1 = v38;
    if (v15 < v34)
      return 0;
  }
  v3 = *((_DWORD *)a1 + 9);
  if (v3 != *((_DWORD *)a2 + 9))
    return 0;
  if (v3)
  {
    v35 = *((unsigned int *)a1 + 9);
    v37 = a2;
    v39 = a1;
    v16 = *((_QWORD *)a1 + 3);
    v17 = *((_QWORD *)a2 + 3);
    result = WebCore::operator==<float>(v16, v17);
    if (!(_DWORD)result)
      return result;
    v18 = v16 + 40;
    v19 = v17 + 40;
    v20 = 1;
    do
    {
      v21 = v20;
      if (v35 == v20)
        break;
      v33 = WebCore::operator==<float>(v18, v19);
      v20 = v21 + 1;
      v18 += 40;
      v19 += 40;
    }
    while (v33);
    a2 = v37;
    a1 = v39;
    if (v21 < v35)
      return 0;
  }
  v4 = *((unsigned int *)a1 + 13);
  if ((_DWORD)v4 != *((_DWORD *)a2 + 13))
    return 0;
  if (!(_DWORD)v4)
    return 1;
  v6 = (float *)*((_QWORD *)a1 + 5);
  v7 = (float *)*((_QWORD *)a2 + 5);
  if (*v6 != *v7 || v6[1] != v7[1])
    return 0;
  if (v6[2] != v7[2] || v6[3] != v7[3])
    return 0;
  v22 = 0;
  v23 = v6 + 6;
  v24 = (float32x2_t *)(v7 + 6);
  for (i = 1; ; ++i)
  {
    if (v4 == i)
    {
      v26 = *((unsigned int *)a1 + 13);
      return v26 >= v4;
    }
    ++v22;
    if (*(v23 - 2) != v24[-1].f32[0] || *(v23 - 1) != v24[-1].f32[1])
      break;
    v26 = i;
    v28 = *(float32x2_t *)v23;
    v23 += 4;
    v29 = v28;
    v30 = *v24;
    v24 += 2;
    v31 = vceq_f32(v29, v30);
    if ((v31.i32[0] & v31.i32[1] & 1) == 0)
      return v26 >= v4;
  }
  v26 = v22;
  return v26 >= v4;
}

BOOL `non-virtual thunk to'WebCore::LocalFrameView::horizontalNativeScrollbarVisibility(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameView::styleHidesScrollbarWithOrientation((WebCore::LocalFrameView *)((char *)this - 64), 0);
}

BOOL `non-virtual thunk to'WebCore::LocalFrameView::verticalNativeScrollbarVisibility(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameView::styleHidesScrollbarWithOrientation((WebCore::LocalFrameView *)((char *)this - 64), 1);
}

BOOL WebCore::LocalFrameView::styleHidesScrollbarWithOrientation(WebCore::LocalFrameView *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::RenderStyle *v8;
  _BOOL8 v9;
  WTF *v10;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  WebCore::Style *v18;
  uint64_t v19;

  WebCore::LocalFrameView::rootElementForCustomScrollbarPartStyle((uint64_t)&v19, a1);
  v3 = v19;
  if (!v19)
    return 0;
  v4 = *(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL;
  if (v4 && (*(_BYTE *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19410EE24);
  }
  v12 = 10;
  v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v5 += 2;
  v13 = v5;
  v14 = 128;
  v15 = 0;
  v16 = a2;
  v17 = 0x1000000;
  WebCore::RenderElement::getUncachedPseudoStyle(v4, &v12, v4 + 80, 0, &v18);
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v18;
  if (v18)
  {
    v9 = (*((_QWORD *)v18 + 2) & 0x1FLL) == 26;
    v18 = 0;
    WebCore::RenderStyle::~RenderStyle(v8, v6);
    if (*(_DWORD *)v10)
    {
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v10, v6);
    }
  }
  else
  {
    v9 = 0;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v9;
}

uint64_t WebCore::LocalFrameView::rootElementForCustomScrollbarPartStyle(uint64_t this, WebCore::LocalFrameView *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;

  v2 = (_QWORD *)this;
  v3 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 296);
  if (!v3)
    goto LABEL_21;
  v4 = *(_QWORD *)(v3 + 1272);
  if (!v4)
    goto LABEL_21;
  if ((*(_WORD *)(v4 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v5 = *(_QWORD *)(v4 + 80);
    if (v5)
    {
      while ((*(_WORD *)(v5 + 28) & 0x10) == 0)
      {
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          goto LABEL_17;
      }
      v7 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      for (i = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24); i != v7; i = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24))
      {
        if (i == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
          break;
        do
        {
          v5 = *(_QWORD *)(v5 + 56);
          if (!v5)
            goto LABEL_17;
        }
        while ((*(_WORD *)(v5 + 28) & 0x10) == 0);
      }
      if ((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_28;
        if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x67) & 2) != 0)
        {
          this = WebCore::RenderStyle::usesStandardScrollbarStyle((WebCore::RenderStyle *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                         + 80));
          if ((this & 1) == 0)
          {
            this = WebCore::LocalFrameView::scrollbarWidthStyle(a2);
            if (!(_DWORD)this)
              goto LABEL_27;
          }
        }
      }
    }
  }
LABEL_17:
  v5 = *(_QWORD *)(v3 + 1272);
  if (v5)
  {
    if ((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x67) & 2) != 0)
        {
          this = WebCore::RenderStyle::usesStandardScrollbarStyle((WebCore::RenderStyle *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                         + 80));
          if ((this & 1) == 0)
          {
LABEL_27:
            *(_DWORD *)(v5 + 24) += 2;
            goto LABEL_22;
          }
        }
        goto LABEL_21;
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x19410EFACLL);
    }
LABEL_21:
    v5 = 0;
  }
LABEL_22:
  *v2 = v5;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::scrollbarWidthStyle(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1272);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    if (*(_QWORD *)(v1 + 1944))
      return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 586);
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

WebCore::Document *`non-virtual thunk to'WebCore::LocalFrameView::useDarkAppearance(WebCore::LocalFrameView *this)
{
  WebCore::Document *result;
  uint64_t v2;
  uint64_t v3;

  result = *(WebCore::Document **)(*((_QWORD *)this + 33) + 296);
  if (result)
  {
    v2 = *((_QWORD *)result + 159);
    if (!v2)
      return (WebCore::Document *)WebCore::Document::useDarkAppearance(result, 0);
    v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v3)
      return (WebCore::Document *)WebCore::Document::useDarkAppearance(result, 0);
    if ((*(_BYTE *)(v3 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19410F098);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 32) + 148) & 4) != 0)
      return (WebCore::Document *)WebCore::Document::useDarkAppearance(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40)+ 8), (const WebCore::RenderStyle *)(v3 + 80));
    else
      return (WebCore::Document *)WebCore::Document::useDarkAppearance(result, 0);
  }
  return result;
}

WebCore::Document *WebCore::LocalFrameView::recalculateBaseBackgroundColor(WebCore::LocalFrameView *this, float a2)
{
  WebCore::Document *result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  result = *(WebCore::Document **)(*((_QWORD *)this + 41) + 296);
  if (result)
  {
    v4 = *((_QWORD *)result + 159);
    if (!v4)
      goto LABEL_6;
    v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v5)
      goto LABEL_6;
    if ((*(_BYTE *)(v5 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19410F188);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 32) + 148) & 4) != 0)
      result = (WebCore::Document *)WebCore::RenderObject::styleColorOptions((WebCore::RenderObject *)v5);
    else
LABEL_6:
      result = (WebCore::Document *)WebCore::Document::styleColorOptions(result, 0);
  }
  if (*((unsigned __int8 *)this + 1370) != result)
  {
    *((_BYTE *)this + 1370) = (_BYTE)result;
    LOBYTE(v12) = 0;
    v13 = 0;
    if (*((_BYTE *)this + 1369))
    {
      v11 = 0x1104000000000000;
      std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>((unint64_t *)&v12, &v11, a2);
      if ((v11 & 0x8000000000000) != 0)
      {
        v8 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v6);
        }
      }
    }
    WebCore::LocalFrameView::updateBackgroundRecursively((uint64_t)this, &v12);
    return (WebCore::Document *)std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v12, v7);
  }
  return result;
}

uint64_t WebCore::Document::styleColorOptions(WebCore::Document *this, const WebCore::RenderStyle *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;

  v4 = *((_QWORD *)this + 66);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (v6 = *(_QWORD *)(v5 + 24)) != 0
    && (v7 = *(unsigned __int8 **)(v6 + 8)) != 0)
  {
    v8 = (*(_DWORD *)v7)++;
    v9 = v7[450];
    if (v8)
    {
      *(_DWORD *)v7 = v8;
      if (!v9)
        goto LABEL_9;
      goto LABEL_7;
    }
    WebCore::Page::~Page((WebCore::Page *)v7);
    WTF::fastFree(v18, v19);
    if (v9)
LABEL_7:
      v9 = 2;
  }
  else
  {
    v9 = 0;
  }
LABEL_9:
  if (WebCore::Document::useDarkAppearance(this, a2))
    v10 = v9 | 4;
  else
    v10 = v9;
  v11 = *((_QWORD *)this + 66);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 24);
      if (v13)
      {
        v14 = *(unsigned __int8 **)(v13 + 8);
        if (v14)
        {
          v15 = (*(_DWORD *)v14)++;
          v16 = v14[451];
          if (v15)
          {
            *(_DWORD *)v14 = v15;
            if (!v16)
              return v10;
          }
          else
          {
            WebCore::Page::~Page((WebCore::Page *)v14);
            WTF::fastFree(v20, v21);
            if (!v16)
              return v10;
          }
          return v10 | 8;
        }
      }
    }
  }
  return v10;
}

BOOL WebCore::Document::useDarkAppearance(WebCore::Document *this, const WebCore::RenderStyle *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  WTF *v30;
  void *v31;
  WTF *v32;
  void *v33;
  _BOOL8 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  if (!a2 || (v3 = *((_QWORD *)a2 + 3), v4 = *(unsigned __int8 *)(v3 + 302), !*(_BYTE *)(v3 + 302)))
    v4 = *((unsigned __int8 *)this + 3372);
  if ((v4 & 2) != 0 && (v4 & 1) == 0)
    return 1;
  v5 = *((_QWORD *)this + 66);
  if (!v5)
  {
    LODWORD(v34) = 0;
    return v34 & (v4 >> 1);
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        ++*(_DWORD *)v8;
        v9 = *(_QWORD *)(v8 + 160);
        if (v9)
          v10 = *(_BYTE *)(v9 + 144) == 0;
        else
          v10 = 0;
        if (!v10)
        {
          v34 = 0;
LABEL_35:
          if (*(_DWORD *)v8 == 1)
          {
            WebCore::Page::~Page((WebCore::Page *)v8);
            WTF::fastFree(v30, v31);
          }
          else
          {
            --*(_DWORD *)v8;
          }
          goto LABEL_37;
        }
        v11 = (unsigned int *)(v9 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        v13 = *(_QWORD *)(v9 + 288);
        if (!v13)
        {
          v34 = 0;
          goto LABEL_33;
        }
        ++*(_DWORD *)(v13 + 8);
        (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v13 + 328) + 280)
                                                                             + 16)
                                                               + 896))(&v41);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v37 = *(_QWORD *)(*(_QWORD *)(v13 + 328) + 24);
          if (v37)
          {
            v38 = *(_QWORD *)(v37 + 8);
            if (v38)
            {
              v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 80) + 8) + 200);
              if (v39)
              {
                v16 = *(WTF::StringImpl **)(v39 + 136);
                if (v16)
                {
                  if (*((_DWORD *)v16 + 1))
                  {
                    *(_DWORD *)v16 += 2;
                    v40 = v41;
                    v41 = v16;
                    if (!v40)
                      goto LABEL_21;
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, v14);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                }
              }
            }
          }
        }
        v16 = v41;
        if (!v41)
        {
          v16 = *(WTF::StringImpl **)(v13 + 1040);
          if (!v16)
          {
            if (!WebCore::screenAtomData)
            {
LABEL_24:
              if (*(_BYTE *)(v8 + 454))
              {
                v20 = *(unsigned __int8 *)(v8 + 453);
              }
              else
              {
                v18 = *(_QWORD *)(*(_QWORD *)(v9 + 280) + 88);
                if (v18)
                {
                  v19 = *(_DWORD *)(v18 + 24);
                  *(_DWORD *)(v18 + 24) = v19 + 1;
                  if (*(_BYTE *)(v18 + 3529))
                  {
                    v34 = *(unsigned __int8 *)(v18 + 3529) == 2;
                    if (v19)
                      *(_DWORD *)(v18 + 24) = v19;
                    else
                      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
                    goto LABEL_31;
                  }
                  if (v19)
                    *(_DWORD *)(v18 + 24) = v19;
                  else
                    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
                }
                v20 = *(unsigned __int8 *)(v8 + 452);
              }
              v34 = v20 != 0;
LABEL_31:
              if (*(_DWORD *)(v13 + 8) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
              else
                --*(_DWORD *)(v13 + 8);
              do
              {
LABEL_33:
                v21 = __ldaxr(v11);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v11));
              if (!v22)
              {
                atomic_store(1u, v11);
                v35 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v35 = off_1E31FE290;
                *((_QWORD *)v35 + 1) = v11;
                v41 = v35;
                WTF::ensureOnMainThread();
                v36 = v41;
                v41 = 0;
                if (v36)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v36 + 8))(v36);
              }
              goto LABEL_35;
            }
LABEL_64:
            v34 = 0;
            goto LABEL_31;
          }
          *(_DWORD *)v16 += 2;
        }
LABEL_21:
        v17 = WebCore::screenAtomData;
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
        if (v16 == (WTF::StringImpl *)v17)
          goto LABEL_24;
        goto LABEL_64;
      }
    }
  }
  v34 = 0;
LABEL_37:
  v23 = *((_QWORD *)this + 66);
  if (!v23)
    return v34 & (v4 >> 1);
  v24 = *(_QWORD *)(v23 + 8);
  if (!v24)
    return v34 & (v4 >> 1);
  v25 = *(_QWORD *)(v24 + 24);
  if (!v25)
    return v34 & (v4 >> 1);
  v26 = *(unsigned __int8 **)(v25 + 8);
  if (!v26)
    return v34 & (v4 >> 1);
  v27 = (*(_DWORD *)v26)++;
  v28 = v26[450];
  if (!v27)
  {
    WebCore::Page::~Page((WebCore::Page *)v26);
    WTF::fastFree(v32, v33);
    if (v28)
      return v34;
    return v34 & (v4 >> 1);
  }
  *(_DWORD *)v26 = v27;
  if (!v28)
    return v34 & (v4 >> 1);
  return v34;
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::horizontalScrollbarMode(WebCore::ScrollView *this)
{
  unsigned __int8 *v1;
  __int16 v3;

  if (*((_QWORD *)this - 3))
  {
    v3 = 0;
    WebCore::ScrollView::platformScrollbarModes((uint64_t)this - 64, (uint64_t)&v3 + 1, (uint64_t)&v3);
    v1 = (unsigned __int8 *)&v3 + 1;
  }
  else
  {
    v1 = (unsigned __int8 *)this + 104;
  }
  return *v1;
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::verticalScrollbarMode(WebCore::ScrollView *this)
{
  unsigned __int8 *v1;
  __int16 v3;

  if (*((_QWORD *)this - 3))
  {
    v3 = 0;
    WebCore::ScrollView::platformScrollbarModes((uint64_t)this - 64, (uint64_t)&v3 + 1, (uint64_t)&v3);
    v1 = (unsigned __int8 *)&v3;
  }
  else
  {
    v1 = (unsigned __int8 *)this + 105;
  }
  return *v1;
}

WTF *`non-virtual thunk to'WebCore::LocalFrameView::updateSnapOffsets(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameView::updateSnapOffsets((WebCore::LocalFrameView *)((char *)this - 64));
}

unint64_t WebCore::ScrollableArea::reachableTotalContentsSize(WebCore::ScrollableArea *this)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int v5;

  v2 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 496))(this);
  v3 = v2;
  v4 = HIDWORD(v2);
  v5 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 528))(this);
  return v3 | ((unint64_t)(v5
                                + (*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 536))(this)
                                + v4) << 32);
}

unint64_t WebCore::ScrollableArea::scrollbarIntrusion(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  unint64_t v3;
  WebCore::Widget *v5;
  unsigned int v6;
  WebCore::Widget *v7;
  uint64_t v8;

  if (!(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 400))(this)
    || (v5 = (WebCore::Widget *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 400))(this),
        ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v5 + 272))(v5) & 1) != 0))
  {
    v2 = 0;
  }
  else
  {
    WebCore::Widget::frameRect(v5);
    v2 = v6;
  }
  if (!(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 392))(this)
    || (v7 = (WebCore::Widget *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 392))(this),
        ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v7 + 272))(v7) & 1) != 0))
  {
    v3 = 0;
  }
  else
  {
    WebCore::Widget::frameRect(v7);
    v3 = v8 & 0xFFFFFFFF00000000;
  }
  return v3 | v2;
}

int32x2_t *WebCore::ScrollView::scrollTo(int32x2_t *this, const WebCore::IntPoint *a2)
{
  int v2;
  __int32 v3;
  __int32 v4;
  unint64_t v5;
  BOOL v6;
  int32x2_t *v7;
  unint64_t v8;

  v2 = *((_DWORD *)a2 + 1);
  v3 = this[25].i32[0];
  v4 = this[25].i32[1];
  v6 = *(_DWORD *)a2 == v3;
  v5 = (*(_DWORD *)a2 - v3) | ((unint64_t)(v2 - v4) << 32);
  v8 = v5;
  v6 = v6 && v2 == v4;
  if (!v6)
  {
    v7 = this;
    if (this[5])
    {
      return (int32x2_t *)WebCore::ScrollView::platformSetScrollPosition((id *)this, a2);
    }
    else
    {
      this[25] = *(int32x2_t *)a2;
      if (!this[39].i8[6])
      {
        this = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 640))(this);
        if ((_DWORD)this)
        {
          if (!v7[34].i8[0])
            v7[34].i8[0] = 1;
          v7[33] = (int32x2_t)v5;
        }
        else
        {
          (*(void (**)(int32x2_t *))(*(_QWORD *)v7 + 688))(v7);
          WebCore::ScrollView::scrollContents(v7, (const WebCore::IntSize *)&v8);
          return (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v7 + 696))(v7);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::horizontalOverscrollBehavior(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v1)
    v2 = (*(_BYTE *)(v1 + 45) & 4) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 636) >> 1) & 3;
}

uint64_t WebCore::RenderLayerScrollableArea::verticalOverscrollBehavior(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v1)
    v2 = (*(_BYTE *)(v1 + 45) & 4) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 636) >> 3) & 3;
}

uint64_t WebCore::RenderLayerScrollableArea::verticalNativeScrollbarVisibility(WebCore::RenderLayerScrollableArea *this)
{
  _BYTE *v1;

  v1 = (_BYTE *)*((_QWORD *)this + 17);
  if (!v1)
  {
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
      return 0;
    }
    if (!BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      return 0;
    return 2;
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 280))(*((_QWORD *)this + 17)) & 1) == 0)
  {
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
        return 2;
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    if (!v1[137])
      return 0;
    return 2;
  }
  return 1;
}

uint64_t WebCore::RenderLayerScrollableArea::scrollbarWidthStyle(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v1)
    v2 = (*(_BYTE *)(v1 + 45) & 4) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 586);
}

BOOL WebCore::RenderLayerScrollableArea::useDarkAppearance(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  WebCore::Document *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  v2 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40) + 8);
  if ((*(_BYTE *)(v1 + 45) & 2) != 0)
  {
    v1 = *(_QWORD *)(v1 + 32);
    if (v1)
      v1 = *(_QWORD *)(v1 + 8);
  }
  return WebCore::Document::useDarkAppearance(v2, (const WebCore::RenderStyle *)(v1 + 80));
}

uint64_t WebCore::ScrollableArea::horizontalScrollbarMode(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalScrollbarMode(WebCore::ScrollableArea *this)
{
  return 0;
}

unint64_t WebCore::ScrollableArea::totalContentsSize(WebCore::ScrollableArea *this)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int v5;

  v2 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 496))(this);
  v3 = v2;
  v4 = HIDWORD(v2);
  v5 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 528))(this);
  return v3 | ((unint64_t)(v5
                                + (*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 536))(this)
                                + v4) << 32);
}

unsigned int *WebCore::Editor::renderLayerDidScroll(unsigned int *this, const WebCore::RenderLayer *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 62);
  if (v2)
  {
    if (*(_DWORD *)(v2 - 12))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
      v4 = *(_QWORD *)(v3 + 120);
      if (v4)
      {
        v5 = *(_BYTE *)(v3 + 132) & 7;
        if (v5 <= 4 && (((1 << v5) & 0x19) != 0 || (v4 = *(_QWORD *)(v4 + 32)) != 0))
        {
          v6 = this;
          v8 = *(_DWORD *)(v4 + 24);
          *(_DWORD *)(v4 + 24) = v8 + 2;
          v9 = v4;
          this = (unsigned int *)(*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL);
          if (this)
          {
            this = (unsigned int *)WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)this);
            if (this)
            {
              while (this != (unsigned int *)a2)
              {
                this = (unsigned int *)*((_QWORD *)this + 5);
                if (!this)
                  goto LABEL_14;
              }
              this = (unsigned int *)*((_QWORD *)v6 + 62);
              if (this)
              {
                *((_QWORD *)v6 + 62) = 0;
                this = (unsigned int *)WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable((uint64_t *)this, a2);
                v8 = *(_DWORD *)(v9 + 24) - 2;
              }
            }
          }
LABEL_14:
          if (v8)
          {
            *(_DWORD *)(v9 + 24) = v8;
          }
          else
          {
            this = (unsigned int *)v9;
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
          }
        }
      }
    }
  }
  return this;
}

BOOL WebCore::LocalFrameView::shouldDeferScrollUpdateAfterContentSizeChange(WebCore::LocalFrameView *this)
{
  return *((unsigned __int8 *)this + 480) - 1 < 3;
}

_QWORD *WebCore::LocalFrameView::updateCompositingLayersAfterScrolling(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::RenderView *v19;
  WebCore::RenderLayerCompositor *v20;
  WebCore::RenderLayerCompositor *v21;
  WebCore::RenderLayerCompositor *v22;
  WTF *v23;
  void *v24;

  v1 = this;
  v2 = this[41];
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    goto LABEL_39;
  this = *(_QWORD **)(v3 + 8);
  if (!this)
    goto LABEL_39;
  if (this[20] != v2)
    goto LABEL_39;
  this = (_QWORD *)WebCore::Page::scrollingCoordinator((WebCore::Page *)this);
  if (!this)
    goto LABEL_39;
  v4 = this;
  v5 = *(_QWORD *)(*(_QWORD *)(this[3] + 8) + 160);
  this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  if (this != v1)
    goto LABEL_39;
  v11 = *(_QWORD *)(v1[41] + 296);
  if (v11 && (v12 = *(_QWORD *)(v11 + 1944)) != 0 && (v13 = *(_QWORD *)(*(_QWORD *)(v12 + 144) + 256)) != 0)
  {
    v14 = *(_QWORD *)(v13 + 224);
    v15 = *(_QWORD *)(v13 + 232);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v4 + 360))(v4, v14, v15);
  if ((_BYTE)this || *((_BYTE *)v1 + 108))
  {
LABEL_39:
    if (*((_BYTE *)v1 + 481) != 2)
    {
      v6 = (uint64_t **)v1[163];
      if (v6)
      {
        v7 = *v6;
        if (*v6)
        {
          if (*((_DWORD *)v7 - 3))
          {
            v8 = *((unsigned int *)v7 - 1);
            if ((_DWORD)v8)
            {
              v9 = 8 * v8;
              for (i = *v6; (unint64_t)(*i + 1) <= 1; ++i)
              {
                v9 -= 8;
                if (!v9)
                  return this;
              }
            }
            else
            {
              i = *v6;
            }
            v16 = &v7[v8];
            if (i != v16)
            {
              v17 = *i;
LABEL_25:
              if (*(_QWORD *)(v17 + 8))
              {
                v18 = *(_QWORD *)(v1[41] + 296);
                if (v18)
                {
                  v19 = *(WebCore::RenderView **)(v18 + 1944);
                  if (v19)
                  {
                    v20 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v19 + 50);
                    if (!v20)
                    {
                      v21 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                      v20 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v21, v19);
                      v22 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v19 + 50);
                      *((_QWORD *)v19 + 50) = v20;
                      if (v22)
                      {
                        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v22);
                        WTF::fastFree(v23, v24);
                        v20 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v19 + 50);
                      }
                    }
                    return (_QWORD *)WebCore::RenderLayerCompositor::updateCompositingLayers((unint64_t)v20, 2u, 0);
                  }
                }
              }
              else
              {
                while (++i != v16)
                {
                  v17 = *i;
                  if ((unint64_t)(*i + 1) > 1)
                  {
                    if (i != v16)
                      goto LABEL_25;
                    return this;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

double WebCore::ResourceRequestBase::defaultTimeoutInterval(WebCore::ResourceRequestBase *this)
{
  return *(double *)&WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
}

uint64_t WebCore::Page::renderTreeSize(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v12 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3400728;
  v2[1] = &v12;
  v11 = v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v11);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v4;
    v13 = v9;
    WTF::ensureOnMainThread();
    v10 = v13;
    v13 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  return v12;
}

uint64_t WebCore::IOSurface::nameForRenderingPurpose(unsigned int a1)
{
  if (a1 > 8)
    return 0;
  else
    return byte_1968DD320[(char)a1];
}

WebCore::RenderLayer *WebCore::RenderLayer::updateDescendantDependentFlags(WebCore::RenderLayer *this)
{
  WebCore::RenderLayer *v1;
  unint64_t v2;
  WebCore::RenderLayer *v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::RenderLayer *v20;
  void *v21;

  v1 = this;
  v2 = *((_QWORD *)this + 3);
  if ((v2 & 0x11000000102000) != 0)
  {
    if ((v2 & 0x1000000000000) != 0)
    {
      *((_QWORD *)this + 3) = v2 & 0xFFFEFFFFFFFFFFFFLL;
      this = (WebCore::RenderLayer *)WebCore::RenderLayer::updateSelfPaintingLayer((uint64_t)this);
    }
    v3 = (WebCore::RenderLayer *)*((_QWORD *)v1 + 8);
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      do
      {
        this = (WebCore::RenderLayer *)WebCore::RenderLayer::updateDescendantDependentFlags(v3);
        v8 = *((_QWORD *)v3 + 3);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 4) + 88) + 40) + 636) & 0x1F00000) == 0x100000)
        {
          v9 = (*((_QWORD *)v3 + 3) & 0xALL) == 0;
          if ((v8 & 0x800000000000) == 0)
            v9 = 0;
        }
        else
        {
          v9 = 1;
        }
        v7 |= (v8 & 0x280000) != 0;
        v6 |= (*((_QWORD *)v3 + 3) & 0x1800) != 0;
        v5 |= v9;
        v4 |= (v8 & 0xC000000000000) != 0;
        v3 = (WebCore::RenderLayer *)*((_QWORD *)v3 + 7);
      }
      while (v3);
      v10 = 0x200000;
      if ((v7 & 1) == 0)
        v10 = 0;
      v11 = 4096;
      if ((v6 & 1) == 0)
        v11 = 0;
      v12 = 0x8000000000000;
      if ((v4 & 1) == 0)
        v12 = 0;
      v13 = 0x800000000000;
      if ((v5 & 1) == 0)
        v13 = 0;
      v14 = v11 | v10 | v12 | v13;
    }
    else
    {
      v14 = 0;
    }
    v2 = *((_QWORD *)v1 + 3) & 0xFFE77FFFFFCFCFFFLL | v14;
    *((_QWORD *)v1 + 3) = v2;
  }
  if ((v2 & 0x40000) != 0)
  {
    v15 = *((_QWORD *)v1 + 4);
    if ((*(_BYTE *)(*(_QWORD *)(v15 + 104) + 239) & 0x18) == 0
      || (v16 = *(_QWORD *)(v15 + 32)) != 0 && *(_QWORD *)(v16 + 8))
    {
      this = (WebCore::RenderLayer *)WebCore::RenderLayer::computeHasVisibleContent(v1);
      v18 = *((_QWORD *)v1 + 3);
      if (((this ^ ((v18 & 0x80000) == 0)) & 1) == 0)
      {
        v19 = 0x80000;
        if (!(_DWORD)this)
          v19 = 0;
        *((_QWORD *)v1 + 3) = v18 & 0xFFFFFFFFFFF7FFFFLL | v19;
        if ((v18 & 4) == 0)
        {
          v20 = v1;
          while (1)
          {
            v20 = (WebCore::RenderLayer *)*((_QWORD *)v20 + 5);
            if (!v20)
              break;
            if ((*((_BYTE *)v20 + 24) & 0x4A) != 0)
            {
              this = (WebCore::RenderLayer *)WebCore::RenderLayer::dirtyZOrderLists(v20, v17);
              if ((*((_BYTE *)v20 + 26) & 8) == 0)
              {
                while (1)
                {
                  v20 = (WebCore::RenderLayer *)*((_QWORD *)v20 + 5);
                  if (!v20)
                    break;
                  if ((*((_BYTE *)v20 + 24) & 0x4A) != 0)
                  {
                    this = (WebCore::RenderLayer *)WebCore::RenderLayer::dirtyZOrderLists(v20, v21);
                    if ((*((_BYTE *)v20 + 26) & 8) != 0)
                      break;
                  }
                }
              }
              break;
            }
          }
        }
      }
      *((_QWORD *)v1 + 3) &= ~0x40000uLL;
    }
  }
  return this;
}

float *WebCore::RenderObject::rectsForRepaintingAfterLayout@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float *result;
  __int128 v9;
  char v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  double v29;
  double v30;
  int v31;
  int v32;
  double v33;
  double v34;
  int v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double v45;
  int v47;
  float v48;
  float v49;
  float v50;
  double v51;
  int v53;
  double v54;
  int v56;
  double v57;
  int v59;
  WTF *v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  _OWORD v68[2];
  int v69;
  char v70;

  result = (float *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 656))(&v65, a1, a3);
  if (v66 < 1 || v67 <= 0)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 32) = 0;
    return result;
  }
  result = (float *)(*(_QWORD *(**)(_OWORD *__return_ptr, _QWORD *, uint64_t *, uint64_t, uint64_t))(*a1 + 472))(v68, a1, &v65, a2, 0xC00000000);
  if (!v70)
  {
    __break(0xC471u);
    JUMPOUT(0x194110500);
  }
  v9 = v68[1];
  *(_OWORD *)a4 = v68[0];
  *(_OWORD *)(a4 + 16) = v9;
  v10 = v69;
  *(_DWORD *)(a4 + 32) = v69;
  if (v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 528);
    v12 = 1.0;
    if (v11)
    {
      v13 = *(_QWORD *)(v11 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          result = *(float **)(v14 + 8);
          if (result)
          {
            v15 = (*(_DWORD *)result)++;
            v12 = result[91];
            if (v15)
            {
              *(_DWORD *)result = v15;
            }
            else
            {
              WebCore::Page::~Page((uint64_t)result);
              result = (float *)WTF::fastFree(v60, v61);
            }
          }
        }
      }
    }
    v16 = *(_DWORD *)(a4 + 16);
    v17 = (double)v16 * 0.015625;
    if (v17 < 0.0)
      v18 = round((v17 + (double)-v16) * v12) / v12 - (double)-v16;
    else
      v18 = round(v17 * v12) / v12;
    v19 = *(_DWORD *)(a4 + 20);
    v20 = (double)v19 * 0.015625;
    if (v20 < 0.0)
      v21 = round((v20 + (double)-v19) * v12) / v12 - (double)-v19;
    else
      v21 = round(v20 * v12) / v12;
    v22 = *(_DWORD *)(a4 + 24);
    v23 = *(_DWORD *)(a4 + 16);
    v24 = -v23 < 0;
    v25 = -v23 & 0x3F;
    v26 = v23 & 0x3F;
    if (!v24)
      v26 = -v25;
    v27 = __OFADD__(v26, v22);
    v28 = v26 + v22;
    if (v27)
      v28 = (v26 >> 31) + 0x7FFFFFFF;
    v29 = (double)v28 * 0.015625;
    if (v29 < 0.0)
      v30 = round((v29 + (double)-v28) * v12) / v12 - (double)-v28;
    else
      v30 = round(v29 * v12) / v12;
    v31 = *(_DWORD *)(a4 + 28);
    v32 = *(_DWORD *)(a4 + 20);
    v33 = (double)v26 * 0.015625;
    if (v33 < 0.0)
      v34 = round((v33 + (double)-v26) * v12) / v12 - (double)-v26;
    else
      v34 = round(v33 * v12) / v12;
    if (v32 <= 0)
      v35 = -(-v32 & 0x3F);
    else
      v35 = *(_DWORD *)(a4 + 20) & 0x3F;
    v27 = __OFADD__(v35, v31);
    v36 = v35 + v31;
    if (v27)
      v36 = (v35 >> 31) + 0x7FFFFFFF;
    v37 = (double)v36 * 0.015625;
    if (v37 < 0.0)
      v38 = round((v37 + (double)-v36) * v12) / v12 - (double)-v36;
    else
      v38 = round(v37 * v12) / v12;
    v39 = (double)v35 * 0.015625;
    if (v39 < 0.0)
      v40 = round((v39 + (double)-v35) * v12) / v12 - (double)-v35;
    else
      v40 = round(v39 * v12) / v12;
    v41 = v21;
    v42 = v18;
    v43 = v30;
    v44 = v34;
    v45 = v42 * 64.0;
    if (v45 >= 2147483650.0 || v45 <= -2147483650.0)
    {
      if (v45 > -2147483650.0)
        v62 = (int)v45;
      else
        v62 = 0x80000000;
      if (v45 < 2147483650.0)
        v47 = v62;
      else
        v47 = 0x7FFFFFFF;
    }
    else
    {
      v47 = (int)v45;
    }
    v48 = v38;
    v50 = v43 - v44;
    *(_DWORD *)(a4 + 16) = v47;
    v51 = v41 * 64.0;
    if (v51 >= 2147483650.0 || v51 <= -2147483650.0)
    {
      if (v51 > -2147483650.0)
        v63 = (int)v51;
      else
        v63 = 0x80000000;
      if (v51 < 2147483650.0)
        v53 = v63;
      else
        v53 = 0x7FFFFFFF;
    }
    else
    {
      v53 = (int)v51;
    }
    *(_DWORD *)(a4 + 20) = v53;
    v54 = v50 * 64.0;
    if (v54 >= 2147483650.0 || v54 <= -2147483650.0)
    {
      if (v54 > -2147483650.0)
        v64 = (int)v54;
      else
        v64 = 0x80000000;
      if (v54 < 2147483650.0)
        v56 = v64;
      else
        v56 = 0x7FFFFFFF;
    }
    else
    {
      v56 = (int)v54;
    }
    *(_DWORD *)(a4 + 24) = v56;
    v49 = v40;
    v57 = (float)(v48 - v49) * 64.0;
    if (v57 < 2147483650.0 && v57 > -2147483650.0)
      goto LABEL_55;
    if (v57 >= 2147483650.0)
    {
      v59 = 0x7FFFFFFF;
      goto LABEL_56;
    }
    if (v57 <= -2147483650.0)
      v59 = 0x80000000;
    else
LABEL_55:
      v59 = (int)v57;
LABEL_56:
    *(_DWORD *)(a4 + 28) = v59;
  }
  return result;
}

void WebCore::RenderBox::computeVisibleRectsInContainer(WebCore::RenderBox *this@<X0>, WebCore::RenderObject *a2@<X2>, __n128 *a3@<X1>, _BOOL8 a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::RenderInline *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  unsigned __int32 v31;
  unsigned __int32 v32;
  unsigned int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  WebCore::WillChangeData *v40;
  uint64_t v41;
  char v42;
  int v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v51;
  unsigned __int32 v52;
  unsigned __int32 v53;
  const WebCore::RenderBox *v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  char v75;
  WTF *v76;
  uint64_t v77;
  char v78;
  _OWORD *v79;
  float64x2_t v80;
  __int128 v81;
  float64x2_t v82;
  __int128 v83;
  int8x16_t v84;
  int8x16_t v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BOOL4 v92;
  int v93;
  float v95;
  float v96;
  float v97;
  float v98;
  float64x2_t v100;
  WTF *v101;
  double v102;
  double v103;
  float v104;
  float v105;
  float v106;
  float v107;
  double v108;
  double v109;
  float v110;
  double v111;
  double v112;
  float v113;
  float v114;
  double v115;
  double v116;
  float v117;
  double v118;
  double v119;
  float v120;
  float v121;
  float v122;
  int v123;
  int v124;
  int v126;
  float v127;
  int v128;
  int v129;
  int v131;
  float v132;
  float v133;
  int v134;
  int v135;
  unsigned int v137;
  float v138;
  unsigned int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  float v147;
  float v148;
  float v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  int v164;
  int v165;
  int v166;
  int v167;
  char v168;
  uint64_t v169;
  WTF *v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  float v178;
  float v179;
  int v180;
  char v181;
  uint64_t v182;
  int v183;
  int v184;
  signed int v185;
  int v186;
  float v187;
  float v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  int v196;
  int v197;
  int v198;
  int v199;
  unsigned int v200;
  __n128 v201;
  int v202;
  char v203;
  char v204;
  int v205;
  WTF *v206;
  void *v207;
  char v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  WTF *v214;
  int isCurrentlyAffectingProperty;
  WTF::StringImpl *v216;
  void *v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int v222;
  int i;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  WTF *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  WebCore::KeyframeEffect *v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  float v245;
  double v246;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  float v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  double v274;
  double v275;
  double v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v282;
  float v283;
  float v285;
  float v286;
  float v288;
  float v289;
  WTF *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned __int8 v299;
  char v300;
  WebCore::RenderBox *v301;
  WebCore::RenderBox *v302;
  WTF *v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  WTF *v306;
  WTF::StringImpl *v307;
  char v308;
  WTF **v309;
  uint64_t v310;
  WTF *v311;
  unint64_t v312;
  int isAtomicInlineLevelBox;
  unint64_t v314;
  int v315;
  int v316;
  double v317;
  int v318;
  double v319;
  int v320;
  double v321;
  int v322;
  double v323;
  double v324;
  double v325;
  uint64_t v326;
  WTF *v327;
  WTF::StringImpl *v328;
  WTF *v329;
  WTF *v330;
  int v331;
  WTF::StringImpl *v332;
  WTF *v333;
  char v334;
  char v335;
  WTF *v336;
  char v337;
  char v338;
  char v339;
  char v340;
  char v341;
  char v342;
  int v343;
  int v344;
  int v345;
  uint64_t v346;
  WTF *v347[2];
  __int128 v348;
  __int128 v349;
  float64x2_t v350;
  __int128 v351;
  int8x16_t v352;
  __int128 v353;
  __int128 v354;
  char v355;
  __n128 v356;
  __n128 v357;
  __int32 v358;
  WebCore::RenderBox *v359;
  char *v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  char v363;

  v10 = HIDWORD(a4);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  if (!*(_DWORD *)(v11 + 492))
  {
    v12 = *(unsigned int *)(v11 + 508);
    if ((_DWORD)v12)
    {
      if (!a2
        && *(_QWORD *)(*(_QWORD *)(v11 + 496) + 8 * v12 - 8)
        && (*((_QWORD *)this + 12) & 0x380000) != 0x300000
        && (a4 & 0x100000000) == 0)
      {
        WebCore::RenderBox::computeVisibleRectsUsingPaintOffset((uint64_t)this, (const WebCore::RenderObject::RepaintRects *)a3, a5);
LABEL_294:
        *(_BYTE *)(a5 + 36) = 1;
        return;
      }
    }
  }
  v13 = a3[1];
  v356 = *a3;
  v357 = v13;
  v358 = a3[2].n128_i32[0];
  if ((*((_BYTE *)this + 21) & 0x40) != 0)
  {
    v218 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
    v219 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v220 = 9 * ((v219 + ~(v219 << 13)) ^ ((v219 + ~(v219 << 13)) >> 8));
    v221 = (v220 ^ (v220 >> 15)) + ~((v220 ^ (v220 >> 15)) << 27);
    v222 = v218 & ((v221 >> 31) ^ v221);
    for (i = 1; ; ++i)
    {
      v224 = v222;
      v225 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v222);
      if (v225 != -1 && *(WebCore::RenderBox **)(v225 + 8) == this)
        break;
      v222 = (v224 + i) & v218;
    }
    if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v224 + 8))
    {
      v226 = HIDWORD(a4);
      v347[0] = (WTF *)WebCore::RenderBox::reflectedRect(this, (const WebCore::LayoutRect *)&v356);
      v347[1] = v227;
      LOBYTE(v348) = 0;
      LOBYTE(v349) = 0;
      WebCore::RenderObject::RepaintRects::unite(&v356, (__n128 *)v347);
      v10 = v226;
    }
  }
  if (a2 == this)
  {
    v200 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v200 <= 5 && ((1 << v200) & 0x2A) != 0)
      WebCore::RenderBox::flipForWritingMode((uint64_t)this, (WebCore::RenderObject::RepaintRects *)&v356);
    if (BYTE2(a4))
      WebCore::RenderObject::RepaintRects::encloseToIntRects((uint64_t)&v356);
    goto LABEL_293;
  }
  v355 = 0;
  v360 = &v355;
  v361 = a2;
  v14 = *((_BYTE *)this + 45);
  if ((v14 & 2) != 0 || *((_BYTE *)this + 46) == 17)
  {
    v18 = *((_QWORD *)this + 4);
    if (!v18)
      goto LABEL_293;
    goto LABEL_15;
  }
  v359 = this;
  v347[0] = (WTF *)&v360;
  v347[1] = (WTF *)&v361;
  *(_QWORD *)&v348 = &v359;
  if ((v14 & 1) != 0)
    goto LABEL_580;
  v15 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v15)
    goto LABEL_580;
  if ((*(_WORD *)(v15 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941115C8);
  }
  if ((*(_BYTE *)(v15 + 23) & 0x20) == 0)
  {
LABEL_580:
    v16 = *((_QWORD *)this + 12);
    if ((v16 & 0xF80000000000) != 0x480000000000)
    {
      v17 = (v16 >> 19) & 7;
      if (v17 <= 3 && v17 != 2)
      {
        v18 = *((_QWORD *)this + 4);
        if (v18)
        {
LABEL_15:
          v19 = *(WebCore::RenderInline **)(v18 + 8);
          goto LABEL_16;
        }
        goto LABEL_356;
      }
      v36 = *((_QWORD *)this + 4);
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 8);
        if (v37)
          ++*(_DWORD *)(v37 + 16);
      }
      else
      {
        v37 = 0;
      }
      if (v17 == 2)
      {
        if (v37)
        {
          while (1)
          {
            v38 = *(unsigned __int8 *)(v37 + 46);
            if (v38 == 49 || (*(_BYTE *)(v37 + 98) & 0x38) != 0)
              break;
            if (((*(_BYTE *)(v37 + 45) & 0x40) != 0 || (v38 - 36) <= 4 && v38 != 38)
              && (*(_BYTE *)(v37 + 22) & 2) != 0)
            {
              break;
            }
            v39 = *(_QWORD *)(*(_QWORD *)(v37 + 88) + 40);
            if (*(_DWORD *)(*(_QWORD *)(v39 + 72) + 20))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v37 + 24) + 8))
                break;
            }
            if ((*(_BYTE *)(v37 + 45) & 0x40) != 0)
            {
              v40 = *(WebCore::WillChangeData **)(v39 + 200);
              if (v40)
              {
                v228 = v10;
                if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v37 + 24) + 8)) & 1) != 0)goto LABEL_490;
                v38 = *(unsigned __int8 *)(v37 + 46);
                v10 = v228;
              }
            }
            if (v38 == 67 || v38 == 90)
              break;
            v41 = *(_QWORD *)(*(_QWORD *)(v37 + 88) + 40);
            v42 = *(_BYTE *)(v41 + 462);
            v43 = *(_BYTE *)(v41 + 642) & 3;
            v44 = v42 | 0x19;
            if (v43 == 1)
              v42 |= 0x15u;
            v45 = v43 == 2 ? v44 : v42;
            if ((v45 & 3) != 0)
            {
              if ((*(_BYTE *)(v37 + 20) & 1) != 0
                || (v312 = v10,
                    isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v37),
                    v10 = v312,
                    isAtomicInlineLevelBox))
              {
                if ((*(_QWORD *)(v37 + 96) & 0x1FLL) != 0x19
                  && (*(unsigned __int8 *)(v37 + 46) - 36 > 4 || (*(_BYTE *)(v37 + 52) & 7) == 1))
                {
                  break;
                }
              }
            }
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 88) + 40) + 636) & 0xC0000) != 0)
            {
              if ((*(_BYTE *)(v37 + 20) & 1) != 0
                || (v314 = v10,
                    v315 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v37),
                    v10 = v314,
                    v315))
              {
                if ((*(_QWORD *)(v37 + 96) & 0x1FLL) != 0x19)
                {
                  v244 = *(unsigned __int8 *)(v37 + 46);
                  if ((v244 - 36) <= 4)
                  {
                    if (v244 == 36)
                      break;
                  }
                  else if (v244 != 63 && v244 != 35)
                  {
                    break;
                  }
                }
              }
            }
            if (v360 && (WTF::StringImpl *)v37 == v361)
              *v360 = 1;
            v46 = *(_QWORD *)(v37 + 32);
            if (v46)
            {
              v46 = *(_QWORD *)(v46 + 8);
              if (v46)
                ++*(_DWORD *)(v46 + 16);
            }
            v47 = *(_DWORD *)(v37 + 16);
            if (!v47)
            {
              __break(0xC471u);
              JUMPOUT(0x194111694);
            }
            v19 = 0;
            *(_DWORD *)(v37 + 16) = v47 - 1;
            v37 = v46;
            if (!v46)
              goto LABEL_16;
          }
          v19 = (WebCore::RenderInline *)v37;
LABEL_392:
          v235 = *(_DWORD *)(v37 + 16);
          if (!v235)
          {
            __break(0xC471u);
            JUMPOUT(0x1941118B0);
          }
LABEL_393:
          *(_DWORD *)(v37 + 16) = v235 - 1;
          goto LABEL_16;
        }
      }
      else if (v37)
      {
        while (1)
        {
          v228 = v10;
          if (WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v37))
          {
LABEL_490:
            v19 = (WebCore::RenderInline *)v37;
            LOBYTE(v10) = v228;
            goto LABEL_392;
          }
          v10 = v228;
          if ((*(_BYTE *)(v37 + 45) & 1) == 0)
          {
            v229 = *(_QWORD *)(*(_QWORD *)(v37 + 24) + 8);
            if (v229)
            {
              if ((*(_WORD *)(v229 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x194111AD8);
              }
              if ((*(_BYTE *)(v229 + 23) & 0x20) != 0)
                goto LABEL_468;
            }
          }
          if ((*(_QWORD *)(v37 + 96) & 0xF80000000000) == 0x480000000000)
          {
LABEL_468:
            WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)v347);
            LOBYTE(v10) = v228;
            v19 = *(WebCore::RenderInline **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v359 + 3) + 8) + 40)
                                                        + 8)
                                            + 1944);
            goto LABEL_392;
          }
          if (v360 && (WTF::StringImpl *)v37 == v361)
            *v360 = 1;
          v230 = *(_QWORD *)(v37 + 32);
          if (!v230)
            break;
          v231 = *(_QWORD *)(v230 + 8);
          if (v231)
            ++*(_DWORD *)(v231 + 16);
          v232 = *(_DWORD *)(v37 + 16);
          if (!v232)
            goto LABEL_451;
          v19 = 0;
          *(_DWORD *)(v37 + 16) = v232 - 1;
          v37 = v231;
          if (!v231)
            goto LABEL_16;
        }
        v235 = *(_DWORD *)(v37 + 16);
        if (!v235)
        {
LABEL_451:
          __break(0xC471u);
          JUMPOUT(0x194111AB8);
        }
        v19 = 0;
        goto LABEL_393;
      }
LABEL_356:
      v19 = 0;
      goto LABEL_16;
    }
  }
  v308 = v10;
  WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)v347);
  LOBYTE(v10) = v308;
  v19 = *(WebCore::RenderInline **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v359 + 3) + 8) + 40) + 8)
                                  + 1944);
LABEL_16:
  if (!v19)
  {
LABEL_293:
    v201 = v357;
    *(__n128 *)a5 = v356;
    *(__n128 *)(a5 + 16) = v201;
    *(_DWORD *)(a5 + 32) = v358;
    goto LABEL_294;
  }
  v20 = (unint64_t)a4 >> 8;
  v21 = *((_QWORD *)this + 4);
  if ((!v21 || (v22 = *(_QWORD *)(v21 + 8)) == 0 || ((*((_DWORD *)this + 31) ^ *(_DWORD *)(v22 + 124)) & 0xE000) != 0)
    && ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000 || !BYTE1(a4)))
  {
    v203 = v10;
    WebCore::RenderBox::flipForWritingMode((uint64_t)this, (WebCore::RenderObject::RepaintRects *)&v356);
    LOBYTE(v10) = v203;
    LOBYTE(v20) = 1;
  }
  v23 = *((_QWORD *)this + 19);
  v24 = HIDWORD(v23);
  if ((*((_BYTE *)this + 52) & 7) == 3 && (*((_BYTE *)this + 53) & 4) != 0)
  {
    v48 = HIDWORD(v23) & 0xFFFFFFC0;
    v49 = v23 - (v23 & 0xFFFFFFC0);
    if (__OFSUB__((_DWORD)v23, v23 & 0xFFFFFFC0))
      v49 = (v23 >> 31) + 0x7FFFFFFF;
    _VF = __OFSUB__(HIDWORD(v23), v48);
    v51 = HIDWORD(v23) - v48;
    if (_VF)
      v51 = (HIDWORD(v23) >> 31) + 0x7FFFFFFF;
    v52 = v356.n128_u32[2] + v49;
    if (__OFADD__(v356.n128_u32[2], v49))
      v52 = (v356.n128_u32[2] >> 31) + 0x7FFFFFFF;
    v356.n128_u32[2] = v52;
    v53 = v356.n128_u32[3] + v51;
    if (__OFADD__(v356.n128_u32[3], v51))
      v53 = (v356.n128_u32[3] >> 31) + 0x7FFFFFFF;
    v356.n128_u32[3] = v53;
    if ((_BYTE)v358)
    {
      _VF = __OFADD__(v357.n128_u32[2], v49);
      v233 = v357.n128_u32[2] + v49;
      if (_VF)
        v233 = (v357.n128_u32[2] >> 31) + 0x7FFFFFFF;
      v357.n128_u32[2] = v233;
      _VF = __OFADD__(v357.n128_u32[3], v51);
      v234 = v357.n128_u32[3] + v51;
      if (_VF)
        v234 = (v357.n128_u32[3] >> 31) + 0x7FFFFFFF;
      v357.n128_u32[3] = v234;
    }
    v23 &= 0xFFFFFFC0FFFFFFC0;
    v24 = HIDWORD(v23);
    LOBYTE(v25) = 1;
    v26 = (*((_DWORD *)this + 24) >> 19) & 7;
    if ((*((_BYTE *)this + 21) & 0x80) == 0)
      goto LABEL_24;
LABEL_23:
    v27 = *((_QWORD *)this + 18);
    v28 = *(_QWORD *)(v27 + 32);
    v29 = *(_DWORD *)(v28 + 20);
    if ((v29 & 0x20000) != 0)
    {
      v69 = *(_QWORD *)(v27 + 32);
      if ((*(_BYTE *)(v28 + 45) & 2) != 0)
        v69 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8);
      v70 = *(_QWORD *)(v69 + 88);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v70 + 32) + 40) + 20)
        || (v177 = *(_QWORD **)(v70 + 40), v177[41])
        || v177[38]
        || v177[39]
        || v177[40]
        || (v29 & 0x100000) != 0)
      {
        v346 = a5;
        if (!*(_QWORD *)(v27 + 200))
        {
          v351 = xmmword_1969FCC00;
          v352 = (int8x16_t)xmmword_1969FCC10;
          v353 = xmmword_1969FCC20;
          v354 = unk_1969FCC30;
          *(_OWORD *)v347 = constinit_103;
          v348 = *(_OWORD *)algn_1969FCBD0;
          v349 = xmmword_1969FCBE0;
          v350 = xmmword_1969FCBF0;
          v30 = v26 == 6;
          goto LABEL_127;
        }
        v71 = (*(_QWORD *)(v28 + 96) >> 43) & 0x1FLL;
        if ((_DWORD)v71)
        {
          v74 = 0;
          v78 = 1;
          switch((int)v71)
          {
            case 5:
              v340 = v25;
              v343 = v24;
              v335 = v10;
              v338 = v20;
              v210 = *(_QWORD *)(v28 + 32);
              if (!v210)
                goto LABEL_312;
              v211 = *(_QWORD *)(v210 + 8);
              if (!v211)
                goto LABEL_312;
              while (2)
              {
                if (*(_BYTE *)(v211 + 46) == 19)
                {
                  if (WebCore::RenderElement::element((WebCore::RenderElement *)v211))
                  {
                    v242 = *(_QWORD *)(v211 + 248);
                    if (v242)
                    {
                      if (*(_QWORD *)(v242 + 8) == v28)
                      {
                        v303 = (WTF *)WebCore::RenderElement::element((WebCore::RenderElement *)v211);
                        v304 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
                        if (*MEMORY[0x1E0CBF2F8])
                          *(_DWORD *)v304 += 4;
                        LODWORD(v71) = 5;
                        LODWORD(v361) = 5;
                        v305 = v304;
                        v362 = v304;
                        v363 = 1;
                        v306 = v303;
                        v347[0] = v303;
                        goto LABEL_473;
                      }
                    }
                  }
                }
                v243 = *(_QWORD *)(v211 + 32);
                if (v243)
                {
                  v74 = 0;
                  v211 = *(_QWORD *)(v243 + 8);
                  v78 = 1;
                  LOBYTE(v10) = v335;
                  LOBYTE(v25) = v340;
                  LODWORD(v24) = v343;
                  if (!v211)
                    goto LABEL_121;
                  continue;
                }
                break;
              }
LABEL_312:
              v74 = 0;
              v78 = 1;
              LOBYTE(v10) = v335;
              LOBYTE(v20) = v338;
              LOBYTE(v25) = v340;
              LODWORD(v24) = v343;
              goto LABEL_121;
            case 6:
            case 7:
              goto LABEL_114;
            case 9:
              v340 = v25;
              v343 = v24;
              v335 = v10;
              v338 = v20;
              v309 = *(WTF ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 24) + 8) + 40) + 8) + 3096);
              if (!v309)
                goto LABEL_312;
              break;
            case 12:
              v340 = v25;
              v343 = v24;
              v335 = v10;
              v338 = v20;
              if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 24) + 8) + 40) + 8) + 1272))
                goto LABEL_312;
              v291 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 24) + 8) + 40) + 8) + 1272);
              v293 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
              if (*MEMORY[0x1E0CBF2F8])
                *(_DWORD *)v293 += 4;
              LODWORD(v71) = 12;
              goto LABEL_456;
            case 13:
            case 14:
            case 15:
            case 16:
              v340 = v25;
              v343 = v24;
              v335 = v10;
              v338 = v20;
              if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 24) + 8) + 40) + 8) + 1272))
                goto LABEL_312;
              v291 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 24) + 8) + 40) + 8) + 1272);
              v292 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v28 + 88) + 40) + 592);
              v293 = v292;
              if (v292)
                *(_DWORD *)v292 += 4;
LABEL_456:
              LODWORD(v361) = v71;
              v294 = v293;
              v362 = v293;
              v363 = 1;
              v347[0] = v291;
              LODWORD(v347[1]) = v71;
              BYTE8(v348) = 1;
              *(_QWORD *)&v348 = 0;
              WebCore::Styleable::~Styleable((WebCore::Styleable *)v347, (WTF::StringImpl *)a3);
              WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v361, v295);
              v76 = v291;
              v74 = 1;
              v5 = v294;
              goto LABEL_457;
            default:
              goto LABEL_121;
          }
          while (1)
          {
            v310 = *((_QWORD *)*v309 + 8) & 0xFFFFFFFFFFFFLL;
            if (v310)
            {
              if ((*(_BYTE *)((*((_QWORD *)*v309 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x194111F90);
              }
              WebCore::RenderElement::backdropRenderer(v310, v347);
              v311 = v347[0];
              if (v347[0])
              {
                v326 = *((_QWORD *)v347[0] + 1);
                v347[0] = 0;
                if (*(_DWORD *)v311 == 1)
                  WTF::fastFree(v311, a3);
                else
                  --*(_DWORD *)v311;
                if (v326 == v28)
                  break;
              }
            }
            v74 = 0;
            v309 = (WTF **)v309[2];
            v78 = 1;
            LOBYTE(v10) = v335;
            LOBYTE(v20) = v338;
            LOBYTE(v25) = v340;
            LODWORD(v24) = v343;
            if (!v309)
              goto LABEL_121;
          }
          v327 = *v309;
          v328 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
          if (*MEMORY[0x1E0CBF2F8])
            *(_DWORD *)v328 += 4;
          LODWORD(v71) = 9;
          LODWORD(v361) = 9;
          v305 = v328;
          v362 = v328;
          v363 = 1;
          v306 = v327;
          v347[0] = v327;
LABEL_473:
          LODWORD(v347[1]) = v71;
          BYTE8(v348) = 1;
          *(_QWORD *)&v348 = 0;
          WebCore::Styleable::~Styleable((WebCore::Styleable *)v347, (WTF::StringImpl *)a3);
          WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v361, v307);
          v76 = v306;
          v74 = 1;
          v5 = v305;
LABEL_457:
          v75 = 0;
          LOBYTE(v10) = v335;
        }
        else
        {
LABEL_114:
          if ((*(_BYTE *)(v28 + 45) & 1) != 0 || (v72 = *(_QWORD *)(*(_QWORD *)(v28 + 24) + 8)) == 0)
          {
            v74 = 0;
            v78 = 1;
            goto LABEL_121;
          }
          v73 = *(unsigned __int16 *)(v72 + 28);
          if ((v73 & 8) == 0)
          {
            __break(0xC471u);
            goto LABEL_359;
          }
          if ((~v73 & 0x408) != 0)
          {
            v74 = 0;
            LODWORD(v71) = 0;
            v75 = 1;
            v76 = (WTF *)v72;
            goto LABEL_119;
          }
          v340 = v25;
          v343 = v24;
          v338 = v20;
          v168 = v10;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 368))(v72))
          {
            v169 = *(_QWORD *)(v72 + 112);
            LOBYTE(v10) = v168;
            LOBYTE(v25) = v340;
            LODWORD(v24) = v343;
            if (v169)
              v170 = *(WTF **)(v169 + 8);
            else
              v170 = 0;
            if ((~*(unsigned __int16 *)(v72 + 28) & 0x408) != 0)
            {
              LODWORD(v71) = 0;
            }
            else
            {
              v333 = v170;
              v202 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 368))(v72);
              LOBYTE(v25) = v340;
              LODWORD(v24) = v343;
              LOBYTE(v10) = v168;
              LODWORD(v71) = v202;
              v170 = v333;
            }
            v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
            if (!*MEMORY[0x1E0CBF2F8])
            {
              v75 = 0;
LABEL_258:
              v74 = 1;
              LOBYTE(v20) = v338;
              v77 = *((_QWORD *)v170 + 9) & 0xFFFFFFFFFFFFLL;
              if (!v77)
                goto LABEL_120;
LABEL_259:
              v173 = *(unsigned int *)(v77 + 164);
              if ((_DWORD)v173)
              {
                v174 = *(uint64_t **)(v77 + 152);
                v175 = 8 * v173;
                if ((v75 & 1) != 0)
                {
                  while (1)
                  {
                    v176 = *v174;
                    if (!*(_BYTE *)(*v174 + 96))
                      break;
                    ++v174;
                    v175 -= 8;
                    if (!v175)
                      goto LABEL_120;
                  }
                }
                else
                {
                  while (1)
                  {
                    v176 = *v174;
                    if (*(_BYTE *)(*v174 + 96))
                    {
                      if (*(_DWORD *)(v176 + 80) == (_DWORD)v71 && *(_QWORD *)(v176 + 88) == (_QWORD)v5)
                        break;
                    }
                    ++v174;
                    v175 -= 8;
                    if (!v175)
                      goto LABEL_120;
                  }
                }
                if (*(_QWORD *)v176)
                {
                  v331 = v74;
                  v332 = v5;
                  v337 = v10;
                  v342 = v25;
                  v345 = v24;
                  v339 = v20;
                  WebCore::KeyframeEffectStack::sortedEffects((unsigned int ***)v347, *(unsigned int ***)v176);
                  v214 = v347[0];
                  if (HIDWORD(v347[1]))
                  {
                    v329 = (WTF *)((char *)v347[0] + 8 * HIDWORD(v347[1]));
                    v330 = v347[0];
                    v236 = 8 * HIDWORD(v347[1]) - 8;
                    do
                    {
                      if (*(_QWORD *)v330)
                        v237 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v330 + 8);
                      else
                        v237 = 0;
                      isCurrentlyAffectingProperty = WebCore::KeyframeEffect::isCurrentlyAffectingProperty(v237, 273, 1);
                      if ((isCurrentlyAffectingProperty & 1) != 0)
                        break;
                      v330 = (WTF *)((char *)v330 + 8);
                      v238 = v236;
                      v236 -= 8;
                    }
                    while (v238);
                    do
                    {
                      v239 = *(unsigned int **)v214;
                      *(_QWORD *)v214 = 0;
                      if (v239)
                      {
                        do
                        {
                          v240 = __ldaxr(v239);
                          v241 = v240 - 1;
                        }
                        while (__stlxr(v241, v239));
                        if (!v241)
                        {
                          atomic_store(1u, v239);
                          WTF::fastFree((WTF *)v239, a3);
                        }
                      }
                      v214 = (WTF *)((char *)v214 + 8);
                    }
                    while (v214 != v329);
                    v214 = v347[0];
                  }
                  else
                  {
                    isCurrentlyAffectingProperty = 0;
                  }
                  if (v214)
                    WTF::fastFree(v214, a3);
                  if (isCurrentlyAffectingProperty)
                  {
                    WebCore::RenderElement::animatedStyle(*(WebCore::RenderElement **)(v27 + 32), (const WebCore::RenderElement *)a3, &v361);
                    v351 = xmmword_1969FCC00;
                    v352 = (int8x16_t)xmmword_1969FCC10;
                    v353 = xmmword_1969FCC20;
                    v354 = unk_1969FCC30;
                    *(_OWORD *)v347 = constinit_103;
                    v348 = *(_OWORD *)algn_1969FCBD0;
                    v349 = xmmword_1969FCBE0;
                    v350 = xmmword_1969FCBF0;
                    v216 = v361;
                    WebCore::RenderLayer::updateTransformFromStyle(v27, (uint64_t)v347, (uint64_t)v361, 0x1Fu);
                    WebCore::RenderStyle::~RenderStyle(v216, v217);
                    if (*(_DWORD *)v216)
                    {
                      *((_OWORD *)v216 + 2) = 0u;
                      *((_OWORD *)v216 + 3) = 0u;
                      *(_OWORD *)v216 = 0u;
                      *((_OWORD *)v216 + 1) = 0u;
                    }
                    else
                    {
                      WTF::fastFree(v216, a3);
                    }
                    v78 = 0;
                    LOBYTE(v10) = v337;
                    LOBYTE(v20) = v339;
                    LOBYTE(v25) = v342;
                    LODWORD(v24) = v345;
                    v5 = v332;
                    v74 = v331;
LABEL_122:
                    a5 = v346;
                    v30 = v26 == 6;
                    if (v5 && (v78 & 1) == 0 && v74)
                    {
                      if (*(_DWORD *)v5 == 2)
                      {
                        v208 = v10;
                        v209 = v25;
                        v344 = v24;
                        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a3);
                        LODWORD(v24) = v344;
                        LOBYTE(v25) = v209;
                        LOBYTE(v10) = v208;
                        v30 = v26 == 6;
                      }
                      else
                      {
                        *(_DWORD *)v5 -= 2;
                      }
                    }
LABEL_127:
                    v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 528);
                    v87 = 1.0;
                    if (v86)
                    {
                      v88 = *(_QWORD *)(v86 + 8);
                      if (v88)
                      {
                        v89 = *(_QWORD *)(v88 + 24);
                        if (v89)
                        {
                          v90 = *(_QWORD *)(v89 + 8);
                          if (v90)
                          {
                            v91 = (*(_DWORD *)v90)++;
                            v87 = *(float *)(v90 + 364);
                            if (v91)
                            {
                              *(_DWORD *)v90 = v91;
                            }
                            else
                            {
                              v334 = v10;
                              v204 = v25;
                              v205 = v24;
                              WebCore::Page::~Page(v90);
                              WTF::fastFree(v206, v207);
                              LODWORD(v24) = v205;
                              LOBYTE(v25) = v204;
                              LOBYTE(v10) = v334;
                              v30 = v26 == 6;
                            }
                          }
                        }
                      }
                    }
                    v92 = 0;
                    if ((_BYTE)v358)
                    {
                      v93 = v356.n128_i32[1];
                      if (v357.n128_u64[0] == v356.n128_u64[0])
                      {
                        v92 = v357.n128_u32[2] == v356.n128_u32[2] && v357.n128_u32[3] == v356.n128_u32[3];
                        v93 = v357.n128_i32[1];
                      }
                    }
                    else
                    {
                      v93 = v356.n128_i32[1];
                    }
                    v95 = (float)v356.n128_i32[0] * 0.015625;
                    v96 = (float)v93 * 0.015625;
                    v97 = (float)v356.n128_i32[2] * 0.015625;
                    v98 = (float)v356.n128_i32[3] * 0.015625;
                    _V21.D[1] = v350.f64[1];
                    v100.f64[0] = *((float64_t *)&v348 + 1);
                    *(_QWORD *)&v100.f64[1] = v348;
                    if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v100), (int32x4_t)vceqzq_f64(v350)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64((float64x2_t)vextq_s8(v352, (int8x16_t)v351, 8uLL)), (int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v351, v352, 8uLL), (float64x2_t)xmmword_1968A14C0)))))) & 1) != 0|| *((double *)&v354 + 1) != 1.0)
                    {
                      v102 = *((double *)&v349 + 1);
                      v103 = *(double *)&v349;
                      v101 = v347[1];
                    }
                    else
                    {
                      v101 = v347[1];
                      v102 = *((double *)&v349 + 1);
                      v103 = *(double *)&v349;
                      if (*(double *)&v347[1] == 0.0
                        && *(double *)&v349 == 0.0
                        && *(double *)v347 == 1.0
                        && *((double *)&v349 + 1) == 1.0)
                      {
                        v178 = *(double *)&v353;
                        v179 = *((double *)&v353 + 1);
                        v120 = v95 + v178;
                        v121 = v96 + v179;
                        goto LABEL_172;
                      }
                      if (*(double *)&v354 == 0.0)
                      {
                        v104 = v95 + v97;
                        v105 = v96 + v98;
                        if (*(double *)v347 <= 0.0)
                          v106 = v104;
                        else
                          v106 = (float)v356.n128_i32[0] * 0.015625;
                        if (*(double *)v347 <= 0.0)
                          v107 = (float)v356.n128_i32[0] * 0.015625;
                        else
                          v107 = v104;
                        v108 = *(double *)v347 * v107;
                        v109 = *(double *)v347 * v106;
                        if (*(double *)&v347[1] <= 0.0)
                          v110 = v104;
                        else
                          v110 = (float)v356.n128_i32[0] * 0.015625;
                        if (*(double *)&v347[1] <= 0.0)
                          v104 = (float)v356.n128_i32[0] * 0.015625;
                        v111 = *(double *)&v347[1] * v104;
                        v112 = *(double *)&v347[1] * v110;
                        if (*(double *)&v349 <= 0.0)
                          v113 = (float)v93 * 0.015625;
                        else
                          v113 = v105;
                        if (*(double *)&v349 <= 0.0)
                          v114 = v105;
                        else
                          v114 = (float)v93 * 0.015625;
                        v115 = v108 + *(double *)&v349 * v113;
                        v116 = v109 + *(double *)&v349 * v114;
                        if (*((double *)&v349 + 1) <= 0.0)
                          v117 = (float)v93 * 0.015625;
                        else
                          v117 = v105;
                        if (*((double *)&v349 + 1) > 0.0)
                          v105 = (float)v93 * 0.015625;
                        v118 = v111 + *((double *)&v349 + 1) * v117;
                        v119 = v112 + *((double *)&v349 + 1) * v105;
                        v120 = v116 + *(double *)&v353;
                        v121 = v119 + *((double *)&v353 + 1);
                        v97 = v115 - v116;
                        v98 = v118 - v119;
                        goto LABEL_172;
                      }
                    }
                    v245 = v95 + v97;
                    v246 = v95;
                    _D23 = v96;
                    v248 = *(double *)&v353 + v95 * *(double *)v347;
                    v249 = v248 + v96 * v103;
                    v250 = *((double *)&v353 + 1) + v95 * *(double *)&v101;
                    v251 = v250 + v96 * v102;
                    v252 = *((double *)&v354 + 1) + v246 * *((double *)&v348 + 1);
                    __asm { FMLA            D27, D23, V21.D[1] }
                    if (_D27 != 1.0 && _D27 != 0.0)
                    {
                      v249 = v249 / _D27;
                      v251 = v251 / _D27;
                    }
                    v256 = v96 + v98;
                    v257 = v245;
                    v258 = *(double *)&v353 + v245 * *(double *)v347;
                    v259 = v258 + _D23 * v103;
                    v260 = *((double *)&v353 + 1) + v245 * *(double *)&v101;
                    v261 = v260 + _D23 * v102;
                    v262 = *((double *)&v354 + 1) + v257 * *((double *)&v348 + 1);
                    v263 = v262 + _D23 * v350.f64[1];
                    if (v263 != 1.0 && v263 != 0.0)
                    {
                      v259 = v259 / v263;
                      v261 = v261 / v263;
                    }
                    v264 = v256;
                    v265 = v258 + v256 * v103;
                    v266 = v260 + v256 * v102;
                    v267 = v262 + v256 * v350.f64[1];
                    if (v267 != 1.0 && v267 != 0.0)
                    {
                      v265 = v265 / v267;
                      v266 = v266 / v267;
                    }
                    v268 = v249;
                    v269 = v251;
                    v270 = v259;
                    v271 = v261;
                    v272 = v265;
                    v273 = v266;
                    v274 = v248 + v264 * v103;
                    v275 = v250 + v264 * v102;
                    v276 = v252 + v264 * v350.f64[1];
                    if (v276 != 1.0 && v276 != 0.0)
                    {
                      v274 = v274 / v276;
                      v275 = v275 / v276;
                    }
                    v277 = v274;
                    v278 = v275;
                    if (v277 >= v272)
                      v120 = v265;
                    else
                      v120 = v274;
                    if (v270 >= v268)
                      v279 = v268;
                    else
                      v279 = v270;
                    if (v120 >= v279)
                      v120 = v279;
                    v280 = fabsf(v120);
                    if (v280 == INFINITY || v280 > 2147500000.0)
                      v120 = (float)((SLODWORD(v120) >> 31) ^ 0x7FFFFFFF);
                    if (v278 >= v273)
                      v121 = v266;
                    else
                      v121 = v278;
                    if (v271 >= v269)
                      v282 = v251;
                    else
                      v282 = v271;
                    if (v121 >= v282)
                      v121 = v282;
                    v283 = fabsf(v121);
                    if (v283 == INFINITY || v283 > 2147500000.0)
                      v121 = (float)((SLODWORD(v121) >> 31) ^ 0x7FFFFFFF);
                    if (v268 < v270)
                      v268 = v270;
                    if (v272 >= v277)
                      v285 = v265;
                    else
                      v285 = v277;
                    if (v268 < v285)
                      v268 = v285;
                    v286 = fabsf(v268);
                    if (v286 == INFINITY || v286 > 2147500000.0)
                      v268 = (float)((SLODWORD(v268) >> 31) ^ 0x7FFFFFFF);
                    if (v269 < v271)
                      v269 = v271;
                    if (v273 >= v278)
                      v288 = v266;
                    else
                      v288 = v278;
                    if (v269 < v288)
                      v269 = v288;
                    v289 = fabsf(v269);
                    if (v289 == INFINITY || v289 > 2147500000.0)
                      v269 = (float)((SLODWORD(v269) >> 31) ^ 0x7FFFFFFF);
                    v97 = v268 - v120;
                    v98 = v269 - v121;
                    a5 = v346;
                    v30 = v26 == 6;
LABEL_172:
                    v122 = floorf(v120 * 64.0);
                    if (v122 > -2147500000.0)
                      v123 = (int)v122;
                    else
                      v123 = 0x80000000;
                    if (v122 < 2147500000.0)
                      v124 = v123;
                    else
                      v124 = 0x7FFFFFFF;
                    if (v122 >= 2147500000.0 || v122 <= -2147500000.0)
                      v126 = v124;
                    else
                      v126 = (int)v122;
                    v127 = floorf(v121 * 64.0);
                    if (v127 > -2147500000.0)
                      v128 = (int)v127;
                    else
                      v128 = 0x80000000;
                    if (v127 < 2147500000.0)
                      v129 = v128;
                    else
                      v129 = 0x7FFFFFFF;
                    if (v127 >= 2147500000.0 || v127 <= -2147500000.0)
                      v131 = v129;
                    else
                      v131 = (int)v127;
                    v132 = v121 + v98;
                    v133 = ceilf((float)(v120 + v97) * 64.0);
                    if (v133 > -2147500000.0)
                      v134 = (int)v133;
                    else
                      v134 = 0x80000000;
                    if (v133 < 2147500000.0)
                      v135 = v134;
                    else
                      v135 = 0x7FFFFFFF;
                    if (v133 >= 2147500000.0 || v133 <= -2147500000.0)
                      v137 = v135;
                    else
                      v137 = (int)v133;
                    v138 = ceilf(v132 * 64.0);
                    if (v138 >= 2147500000.0 || v138 <= -2147500000.0)
                    {
                      if (v138 >= 2147500000.0)
                      {
                        v140 = 0x7FFFFFFF;
                      }
                      else if (v138 <= -2147500000.0)
                      {
                        v140 = 0x80000000;
                      }
                      else
                      {
                        v140 = (int)v138;
                      }
                      a5 = v346;
                      v30 = v26 == 6;
                    }
                    else
                    {
                      v140 = (int)v138;
                    }
                    _VF = __OFSUB__(v137, v126);
                    v141 = v137 - v126;
                    v142 = (v137 >> 31) + 0x7FFFFFFF;
                    if (!_VF)
                      v142 = v141;
                    _VF = __OFSUB__(v140, v131);
                    v143 = v140 - v131;
                    v144 = (v140 >> 31) + 0x7FFFFFFF;
                    if (!_VF)
                      v144 = v143;
                    _VF = __OFADD__(v126, v142);
                    v145 = v126 + v142;
                    if (_VF)
                      v145 = (v126 >> 31) + 0x7FFFFFFF;
                    _VF = __OFADD__(v131, v144);
                    v146 = v131 + v144;
                    if (_VF)
                      v146 = (v131 >> 31) + 0x7FFFFFFF;
                    v147 = floorf((float)(v87 * (float)v131) * 0.015625) / v87;
                    v148 = floorf((float)(v87 * (float)v126) * 0.015625) / v87;
                    v149 = (float)(ceilf((float)(v87 * (float)v145) * 0.015625) / v87) - v148;
                    v150 = v148 * 64.0;
                    v151 = v147;
                    v152 = v147 * 64.0;
                    v153 = v149;
                    v154 = v149 * 64.0;
                    v155 = (float)((float)(ceilf((float)(v87 * (float)v146) * 0.015625) / v87) - v147);
                    v156 = v155 * 64.0;
                    if (v152 < 2147483650.0
                      && v154 < 2147483650.0
                      && v156 < 2147483650.0
                      && v150 > -2147483650.0
                      && v152 > -2147483650.0
                      && v154 > -2147483650.0
                      && v156 > -2147483650.0
                      && v150 < 2147483650.0)
                    {
                      v164 = (int)v150;
                      v165 = (int)v152;
                      v166 = (int)v154;
                      v167 = (int)v156;
                    }
                    else
                    {
                      if (v150 > -2147483650.0)
                        v316 = (int)v150;
                      else
                        v316 = 0x80000000;
                      if (v150 < 2147483650.0)
                        v164 = v316;
                      else
                        v164 = 0x7FFFFFFF;
                      v317 = v151 * 64.0;
                      if (v317 > -2147483650.0)
                        v318 = (int)v317;
                      else
                        v318 = 0x80000000;
                      if (v317 < 2147483650.0)
                        v165 = v318;
                      else
                        v165 = 0x7FFFFFFF;
                      v319 = v153 * 64.0;
                      if (v319 > -2147483650.0)
                        v320 = (int)v319;
                      else
                        v320 = 0x80000000;
                      if (v319 < 2147483650.0)
                        v166 = v320;
                      else
                        v166 = 0x7FFFFFFF;
                      v321 = v155 * 64.0;
                      if (v321 > -2147483650.0)
                        v322 = (int)v321;
                      else
                        v322 = 0x80000000;
                      if (v321 < 2147483650.0)
                        v167 = v322;
                      else
                        v167 = 0x7FFFFFFF;
                    }
                    v356.n128_u64[0] = __PAIR64__(v165, v164);
                    v356.n128_u64[1] = __PAIR64__(v167, v166);
                    if (v92)
                    {
                      if ((_BYTE)v358)
                      {
                        v357 = v356;
                        goto LABEL_26;
                      }
                    }
                    else
                    {
                      if (!(_BYTE)v358)
                        goto LABEL_26;
                      v180 = v24;
                      v341 = v25;
                      v181 = v10;
                      v182 = WebCore::TransformationMatrix::mapRect((WebCore::TransformationMatrix *)v347, (const WebCore::LayoutRect *)&v357);
                      v185 = v182 + v184;
                      if (__OFADD__((_DWORD)v182, v184))
                        v185 = (v182 >> 31) + 0x7FFFFFFF;
                      v186 = HIDWORD(v182) + v183;
                      LOBYTE(v10) = v181;
                      LOBYTE(v25) = v341;
                      LODWORD(v24) = v180;
                      if (__OFADD__(HIDWORD(v182), v183))
                        v186 = (HIDWORD(v182) >> 31) + 0x7FFFFFFF;
                      v187 = floorf((float)(v87 * (float)SHIDWORD(v182)) * 0.015625) / v87;
                      v188 = floorf((float)(v87 * (float)(int)v182) * 0.015625) / v87;
                      v189 = v188 * 64.0;
                      v190 = v187;
                      v191 = v187 * 64.0;
                      v192 = (float)((float)(ceilf((float)(v87 * (float)v185) * 0.015625) / v87) - v188);
                      v193 = (float)((float)(ceilf((float)(v87 * (float)v186) * 0.015625) / v87) - v187);
                      if (v191 >= 2147483650.0
                        || (v194 = v192 * 64.0, v192 * 64.0 >= 2147483650.0)
                        || (v195 = v193 * 64.0, v193 * 64.0 >= 2147483650.0)
                        || v189 <= -2147483650.0
                        || v191 <= -2147483650.0
                        || v194 <= -2147483650.0
                        || v195 <= -2147483650.0
                        || v189 >= 2147483650.0)
                      {
                        if (v189 >= 2147483650.0)
                        {
                          v196 = 0x7FFFFFFF;
                        }
                        else if (v189 <= -2147483650.0)
                        {
                          v196 = 0x80000000;
                        }
                        else
                        {
                          v196 = (int)v189;
                        }
                        v323 = v190 * 64.0;
                        if (v323 >= 2147483650.0)
                        {
                          v197 = 0x7FFFFFFF;
                        }
                        else if (v323 <= -2147483650.0)
                        {
                          v197 = 0x80000000;
                        }
                        else
                        {
                          v197 = (int)v323;
                        }
                        v324 = v192 * 64.0;
                        if (v324 >= 2147483650.0)
                        {
                          v198 = 0x7FFFFFFF;
                        }
                        else if (v324 <= -2147483650.0)
                        {
                          v198 = 0x80000000;
                        }
                        else
                        {
                          v198 = (int)v324;
                        }
                        v325 = v193 * 64.0;
                        if (v325 >= 2147483650.0)
                        {
                          v199 = 0x7FFFFFFF;
                        }
                        else if (v325 <= -2147483650.0)
                        {
                          v199 = 0x80000000;
                        }
                        else
                        {
                          v199 = (int)v325;
                        }
                        a5 = v346;
                        LOBYTE(v10) = v181;
                        LOBYTE(v25) = v341;
                        LODWORD(v24) = v180;
                      }
                      else
                      {
                        v196 = (int)v189;
                        v197 = (int)v191;
                        v198 = (int)v194;
                        v199 = (int)v195;
                      }
                      v30 = v26 == 6;
                      if ((_BYTE)v358)
                      {
                        v357.n128_u64[0] = __PAIR64__(v197, v196);
                        v357.n128_u64[1] = __PAIR64__(v199, v198);
                        goto LABEL_26;
                      }
                    }
LABEL_359:
                    __break(1u);
                    goto LABEL_360;
                  }
                  v78 = 0;
                  LOBYTE(v10) = v337;
                  LOBYTE(v20) = v339;
                  LOBYTE(v25) = v342;
                  LODWORD(v24) = v345;
                  v5 = v332;
                  v74 = v331;
LABEL_121:
                  v79 = *(_OWORD **)(v27 + 200);
                  v80 = *((float64x2_t *)v79 + 3);
                  v82 = *(float64x2_t *)v79;
                  v81 = v79[1];
                  v349 = v79[2];
                  v350 = v80;
                  *(float64x2_t *)v347 = v82;
                  v348 = v81;
                  v83 = v79[7];
                  v85 = *((int8x16_t *)v79 + 4);
                  v84 = *((int8x16_t *)v79 + 5);
                  v353 = v79[6];
                  v354 = v83;
                  v351 = (__int128)v85;
                  v352 = v84;
                  goto LABEL_122;
                }
              }
LABEL_120:
              v78 = 0;
              goto LABEL_121;
            }
            v171 = *(_DWORD *)v5;
            *(_DWORD *)v5 += 4;
            v172 = v171 + 2;
            if (v171 != -2)
            {
LABEL_257:
              v75 = 0;
              *(_DWORD *)v5 = v172;
              goto LABEL_258;
            }
            v336 = v170;
            v212 = v5;
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a3);
            v5 = v212;
            v172 = *(_DWORD *)v212;
            *(_DWORD *)v212 += 2;
            if (v172)
            {
              LOBYTE(v10) = v168;
              LOBYTE(v25) = v340;
              LODWORD(v24) = v343;
              v170 = v336;
              goto LABEL_257;
            }
            WTF::StringImpl::destroy(v212, (WTF::StringImpl *)a3);
            v5 = v212;
            v75 = 0;
            v74 = 1;
            LOBYTE(v10) = v168;
            LOBYTE(v20) = v338;
            LOBYTE(v25) = v340;
            LODWORD(v24) = v343;
            v76 = v336;
LABEL_119:
            v77 = *((_QWORD *)v76 + 9) & 0xFFFFFFFFFFFFLL;
            if (!v77)
              goto LABEL_120;
            goto LABEL_259;
          }
          v74 = 0;
          LODWORD(v71) = 0;
          v75 = 1;
          v76 = (WTF *)v72;
          LOBYTE(v10) = v168;
        }
        LOBYTE(v20) = v338;
        LOBYTE(v25) = v340;
        LODWORD(v24) = v343;
        goto LABEL_119;
      }
    }
LABEL_24:
    v30 = a4;
    if (v26 == 6)
      v30 = 1;
LABEL_26:
    v31 = v356.n128_u32[0] + v23;
    if (__OFADD__(v356.n128_u32[0], (_DWORD)v23))
      v31 = (v356.n128_u32[0] >> 31) + 0x7FFFFFFF;
    v356.n128_u32[0] = v31;
    v32 = v356.n128_u32[1] + v24;
    if (__OFADD__(v356.n128_u32[1], (_DWORD)v24))
      v32 = (v356.n128_u32[1] >> 31) + 0x7FFFFFFF;
    v356.n128_u32[1] = v32;
    if ((_BYTE)v358)
    {
      v33 = v357.n128_u32[0] + v23;
      if (__OFADD__(v357.n128_u32[0], (_DWORD)v23))
        v33 = (v357.n128_u32[0] >> 31) + 0x7FFFFFFF;
      v357.n128_u32[0] = v33;
      v34 = v357.n128_u32[1] + v24;
      if (__OFADD__(v357.n128_u32[1], (_DWORD)v24))
        v34 = (v357.n128_u32[1] >> 31) + 0x7FFFFFFF;
      v357.n128_u32[1] = v34;
    }
    if (v26 == 2 && (*((_BYTE *)v19 + 22) & 0x80) != 0 && (*((_BYTE *)v19 + 45) & 0x20) != 0)
    {
      v54 = this;
      v55 = v10;
      v56 = v25;
      v57 = WebCore::RenderInline::offsetForInFlowPositionedInline(v19, v54);
      WebCore::RenderObject::RepaintRects::move((uint64_t)&v356, v57);
      LOBYTE(v25) = v56;
      LOBYTE(v10) = v55;
    }
    else if ((*((_QWORD *)this + 12) & 0x280000) == 0x80000)
    {
      v58 = *((_QWORD *)this + 18);
      if (v58)
      {
        v61 = v58 + 148;
        v60 = *(_DWORD *)(v58 + 148);
        v59 = *(_DWORD *)(v61 + 4);
        v62 = v31 + v60;
        if (__OFADD__(v31, v60))
          v62 = (v31 >> 31) + 0x7FFFFFFF;
        v356.n128_u32[0] = v62;
        v63 = v32 + v59;
        if (__OFADD__(v32, v59))
          v63 = (v32 >> 31) + 0x7FFFFFFF;
        v356.n128_u32[1] = v63;
        if ((_BYTE)v358)
        {
          v64 = v357.n128_u32[0] + v60;
          if (__OFADD__(v357.n128_u32[0], v60))
            v64 = (v357.n128_u32[0] >> 31) + 0x7FFFFFFF;
          v357.n128_u32[0] = v64;
          v65 = v357.n128_u32[1] + v59;
          if (__OFADD__(v357.n128_u32[1], v59))
            v65 = (v357.n128_u32[1] >> 31) + 0x7FFFFFFF;
          v357.n128_u32[1] = v65;
          if ((*((_BYTE *)v19 + 22) & 1) == 0)
            goto LABEL_39;
LABEL_105:
          if ((*((_BYTE *)v19 + 45) & 0x10) != 0)
          {
            v66 = v10;
            v67 = v25;
            v68 = (*(uint64_t (**)(WebCore::RenderInline *, __n128 *, WebCore::RenderObject *, unint64_t))(*(_QWORD *)v19 + 816))(v19, &v356, a2, a4 & 0xFFFFFFFFFF000000 | ((unint64_t)v25 << 16) | ((unint64_t)v20 << 8) | v30);
            LOBYTE(v25) = v67;
            if ((v68 & 1) == 0)
            {
              if ((v66 & 1) != 0)
              {
                *(_BYTE *)a5 = 0;
                *(_BYTE *)(a5 + 36) = 0;
                return;
              }
              goto LABEL_293;
            }
            goto LABEL_39;
          }
LABEL_360:
          __break(0xC471u);
          JUMPOUT(0x1941116D4);
        }
      }
    }
    if ((*((_BYTE *)v19 + 22) & 1) == 0)
    {
LABEL_39:
      if (!v355)
      {
        (*(void (**)(WebCore::RenderInline *, __n128 *, WebCore::RenderObject *, unint64_t))(*(_QWORD *)v19 + 472))(v19, &v356, a2, a4 & 0xFFFFFFFFFF000000 | ((unint64_t)v25 << 16) | ((unint64_t)v20 << 8) | v30);
        return;
      }
      v296 = WebCore::RenderObject::offsetFromAncestorContainer(a2, v19);
      v297 = -(int)v296;
      if ((v296 & 0xFFFFFFFF00000000) == 0x8000000000000000)
        v298 = 0x7FFFFFFF00000000;
      else
        v298 = -(uint64_t)(v296 & 0xFFFFFFFF00000000);
      if ((_DWORD)v296 == 0x80000000)
        v297 = 0x7FFFFFFFLL;
      WebCore::RenderObject::RepaintRects::move((uint64_t)&v356, v298 | v297);
      goto LABEL_293;
    }
    goto LABEL_105;
  }
  v25 = (unint64_t)a4 >> 16;
  if (*((_BYTE *)this + 46) != 25)
  {
LABEL_22:
    v26 = (*((_DWORD *)this + 24) >> 19) & 7;
    if ((*((_BYTE *)this + 21) & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  v299 = v20;
  v300 = v10;
  v361 = (WTF::StringImpl *)v356.n128_u64[0];
  v347[0] = (WTF *)WebCore::RenderBox::flipForWritingMode(this, (const WebCore::LayoutPoint *)&v361);
  v301 = WebCore::RenderMultiColumnFlow::physicalTranslationFromFlowToFragment(this, (WebCore::LayoutPoint *)v347);
  if (!v301)
  {
    LOBYTE(v10) = v300;
    LOBYTE(v20) = v299;
    v25 = (unint64_t)a4 >> 16;
    v24 = HIDWORD(v23);
    goto LABEL_22;
  }
  v302 = v301;
  v356.n128_u64[0] = WebCore::RenderBox::flipForWritingMode(v301, (const WebCore::LayoutPoint *)v347);
  (*(void (**)(WebCore::RenderBox *, __n128 *, WebCore::RenderObject *, unint64_t))(*(_QWORD *)v302 + 472))(v302, &v356, a2, a4 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v299 << 8));
}

uint64_t WebCore::RenderBox::applyCachedClipAndScrollPosition(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  signed int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v50;
  uint64_t v51;
  signed int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;

  v4 = HIDWORD(a4);
  v5 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  v46 = v5 > 5;
  v6 = (1 << v5) & 0x2A;
  if (!v46 && v6 != 0)
  {
    v67 = a1;
    v70 = HIDWORD(a4);
    v61 = a3;
    v64 = a2;
    WebCore::RenderObject::RepaintRects::flipForWritingMode(a2, *(_QWORD *)(a1 + 160), (*(_DWORD *)(a1 + 20) & 0x1000) == 0);
    a1 = v67;
    LOBYTE(v4) = v70;
    a3 = v61;
    a2 = v64;
  }
  if ((v4 & 4) != 0
    || a1 != a3
    || (~*(_DWORD *)(a1 + 20) & 0x18000) != 0
    || (v60 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 264)) == 0
    || !*(_BYTE *)(v60 + 79)
    || !*(_QWORD *)(*(_QWORD *)(v60 + 96) + 256))
  {
    if ((*(_BYTE *)(a1 + 22) & 1) == 0
      || ((*(_BYTE *)(a1 + 45) & 2) != 0
        ? (v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 96))
        : (v51 = *(_QWORD *)(a1 + 96)),
          v8 = v51 & 0x1C00,
          v8 == 2048))
    {
      LODWORD(v8) = 0;
    }
    else if (v8)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 264);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 104);
        v8 = HIDWORD(v9);
        goto LABEL_10;
      }
    }
    LODWORD(v9) = 0;
LABEL_10:
    v10 = -(int)v9;
    if (v10 >= -33554432)
      v11 = v10 << 6;
    else
      v11 = 0x80000000;
    if (v10 <= 0x1FFFFFF)
      v12 = v11;
    else
      v12 = 0x7FFFFFFF;
    if ((int)v8 <= 0x2000000)
      v13 = -64 * v8;
    else
      v13 = 0x80000000;
    if ((int)v8 >= -33554431)
      v14 = v13;
    else
      v14 = 0x7FFFFFFF;
    v15 = *(_DWORD *)a2 + v12;
    if (__OFADD__(*(_DWORD *)a2, v12))
      v15 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)a2 = v15;
    v16 = *(_DWORD *)(a2 + 4);
    v17 = v16 + v14;
    if (__OFADD__(v16, v14))
      v17 = (v16 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(a2 + 4) = v17;
    if (*(_BYTE *)(a2 + 32))
    {
      v18 = *(_DWORD *)(a2 + 16);
      v19 = __OFADD__(v18, v12);
      v20 = v18 + v12;
      if (v19)
        v20 = (v18 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(a2 + 16) = v20;
      v21 = *(_DWORD *)(a2 + 20);
      v19 = __OFADD__(v21, v14);
      v22 = v21 + v14;
      if (v19)
        v22 = (v21 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(a2 + 20) = v22;
    }
  }
  if ((v4 & 2) == 0
    && (~*(_DWORD *)(a1 + 20) & 0x18000) == 0
    && (v23 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 264)) != 0
    && *(_BYTE *)(v23 + 79)
    && *(_QWORD *)(*(_QWORD *)(v23 + 96) + 256)
    || a1 == a3 && (v4 & 8) == 0)
  {
    v50 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    v47 = 1;
    if (v50 <= 5 && ((1 << v50) & 0x2A) != 0)
    {
      WebCore::RenderObject::RepaintRects::flipForWritingMode(a2, *(_QWORD *)(a1 + 160), (*(_DWORD *)(a1 + 20) & 0x1000) == 0);
      return 1;
    }
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 144);
    v26 = *(_DWORD *)(v24 + 164);
    v25 = *(_DWORD *)(v24 + 168);
    LODWORD(v27) = v26 << 6;
    if (v26 < -33554432)
      LODWORD(v27) = 0x80000000;
    if (v26 <= 0x1FFFFFF)
      v27 = v27;
    else
      v27 = 0x7FFFFFFFLL;
    if (v25 >= -33554432)
      v28 = v25 << 6;
    else
      v28 = 0x80000000;
    if (v25 <= 0x1FFFFFF)
      v29 = v28;
    else
      v29 = 0x7FFFFFFFLL;
    v72 = 0;
    v73 = v27 | (v29 << 32);
    v30 = *(_QWORD *)(a1 + 96);
    v31 = *(_DWORD *)(a1 + 20);
    if ((v31 & 0x80000) == 0 && (v30 & 0x1C00) == 0)
    {
      v62 = a2;
      v65 = a1;
      v68 = v4;
      WebCore::LayoutRect::expandToInfiniteX(&v72);
      a1 = v65;
      LOBYTE(v4) = v68;
      a2 = v62;
      v30 = *(_QWORD *)(v65 + 96);
      v31 = *(_DWORD *)(v65 + 20);
    }
    if ((v31 & 0x80000) == 0 && (v30 & 0xE000) == 0)
    {
      v63 = a2;
      v66 = a1;
      v69 = v4;
      WebCore::LayoutRect::expandToInfiniteY((uint64_t)&v72);
      a1 = v66;
      LOBYTE(v4) = v69;
      a2 = v63;
    }
    v33 = *(_DWORD *)a2;
    v32 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)a2 <= (int)v72)
      v34 = v72;
    else
      v34 = *(_DWORD *)a2;
    if ((int)v32 <= SHIDWORD(v72))
      v35 = HIDWORD(v72);
    else
      v35 = v32;
    v36 = *(_DWORD *)(a2 + 8);
    v19 = __OFADD__(v33, v36);
    v37 = v33 + v36;
    v38 = v19;
    if ((v4 & 1) != 0)
    {
      if (v38)
        v37 = (v33 >> 31) + 0x7FFFFFFF;
      v52 = v72 + v73;
      if (__OFADD__((_DWORD)v72, (_DWORD)v73))
        v52 = (v72 >> 31) + 0x7FFFFFFF;
      if (v52 < v37)
        v37 = v52;
      v53 = *(_DWORD *)(a2 + 12);
      v19 = __OFADD__(v32, v53);
      v54 = v32 + v53;
      if (v19)
        v54 = (v32 >> 31) + 0x7FFFFFFF;
      v55 = HIDWORD(v72) + HIDWORD(v73);
      if (__OFADD__(HIDWORD(v72), HIDWORD(v73)))
        v55 = (HIDWORD(v72) >> 31) + 0x7FFFFFFF;
      if (v55 >= v54)
        v56 = v54;
      else
        v56 = v55;
      v57 = v34 <= v37 && (int)v35 <= v56;
      v47 = v57;
      if (!v57)
      {
        v37 = 0;
        v56 = 0;
        v34 = 0;
        v35 = 0;
      }
      *(_QWORD *)a2 = v34 | (unint64_t)(v35 << 32);
      v19 = __OFSUB__(v37, v34);
      v58 = v37 - v34;
      if (v19)
        v58 = (v37 >> 31) + 0x7FFFFFFF;
      v19 = __OFSUB__(v56, (_DWORD)v35);
      v59 = (v56 - v35);
      if (v19)
        v59 = (v56 >> 31) + 0x7FFFFFFF;
      *(_QWORD *)(a2 + 8) = v58 | (unint64_t)(v59 << 32);
    }
    else
    {
      if (v38)
        v37 = (v33 >> 31) + 0x7FFFFFFF;
      v39 = v72 + v73;
      if (__OFADD__((_DWORD)v72, (_DWORD)v73))
        v39 = (v72 >> 31) + 0x7FFFFFFF;
      if (v39 >= v37)
        v39 = v37;
      v40 = *(_DWORD *)(a2 + 12);
      v19 = __OFADD__(v32, v40);
      v41 = v32 + v40;
      if (v19)
        v41 = (v32 >> 31) + 0x7FFFFFFF;
      v42 = HIDWORD(v72) + HIDWORD(v73);
      if (__OFADD__(HIDWORD(v72), HIDWORD(v73)))
        v42 = (HIDWORD(v72) >> 31) + 0x7FFFFFFF;
      if (v42 >= v41)
        v43 = v41;
      else
        v43 = v42;
      if (v34 >= v39 || (int)v35 >= v43)
      {
        v39 = 0;
        v43 = 0;
        v34 = 0;
        v35 = 0;
      }
      *(_QWORD *)a2 = v34 | (unint64_t)(v35 << 32);
      v19 = __OFSUB__(v39, v34);
      v44 = v39 - v34;
      if (v19)
        v44 = (v39 >> 31) + 0x7FFFFFFF;
      v45 = (v43 - v35);
      if (__OFSUB__(v43, (_DWORD)v35))
        v45 = (v43 >> 31) + 0x7FFFFFFF;
      *(_QWORD *)(a2 + 8) = v44 | (unint64_t)(v45 << 32);
      v46 = v44 <= 0 || (int)v45 <= 0;
      v47 = !v46;
    }
    v48 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if (v48 <= 5 && ((1 << v48) & 0x2A) != 0)
    {
      v71 = v47;
      WebCore::RenderObject::RepaintRects::flipForWritingMode(a2, *(_QWORD *)(a1 + 160), (*(_DWORD *)(a1 + 20) & 0x1000) == 0);
      return v71;
    }
  }
  return v47;
}

BOOL WebCore::RenderLayerScrollableArea::usesCompositedScrolling(WebCore::RenderLayerScrollableArea *this)
{
  return *((_BYTE *)this + 79) && *(_QWORD *)(*((_QWORD *)this + 12) + 256) != 0;
}

void WebCore::RenderBox::localRectsForRepaint(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::ShadowData *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t (*v32)();
  WebCore::RenderStyle *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v38;
  uint64_t v39;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  float v54;
  float v55;
  float v56;
  WebCore::RenderStyle *v57;
  uint64_t v58;
  float v59;
  double v60;
  int v61;
  int v62;
  _BOOL4 v63;
  int v64;
  int v65;
  int v66;

  v5 = *(unsigned __int8 *)(a1 + 46);
  if (v5 != 83)
  {
    if ((*(_BYTE *)(a1 + 52) & 7) != 4)
    {
      v6 = v5 - 67;
      v7 = v6 > 0x13;
      v8 = 1 << v6;
      v9 = 917521;
      goto LABEL_4;
    }
    if (v5 != 85 && (*(_BYTE *)(a1 + 53) & 1) != 0)
    {
      v41 = v5 - 67;
      v7 = v41 > 0x13;
      v8 = 1 << v41;
      v9 = 655377;
LABEL_4:
      v10 = v8 & v9;
      if (v7 || v10 == 0)
        goto LABEL_9;
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v45 = a1;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      v45 = a1;
      do
        v45 = *(_QWORD *)(*(_QWORD *)(v45 + 32) + 8);
      while ((*(_BYTE *)(v45 + 45) & 0x10) == 0);
    }
    while ((*(_BYTE *)(v45 + 21) & 0x80) == 0)
    {
      do
        v45 = *(_QWORD *)(*(_QWORD *)(v45 + 32) + 8);
      while ((*(_BYTE *)(v45 + 45) & 0x10) == 0);
    }
    v46 = *(_QWORD *)(*(_QWORD *)(v45 + 144) + 224);
    if (v46)
    {
      if (*(_QWORD *)(v46 + 8))
        goto LABEL_57;
    }
  }
LABEL_9:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0 || (*(_BYTE *)(a1 + 120) & 0x30) != 0)
  {
    v42 = a1;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      v42 = a1;
      do
        v42 = *(_QWORD *)(*(_QWORD *)(v42 + 32) + 8);
      while ((*(_BYTE *)(v42 + 45) & 0x10) == 0);
    }
    while ((*(_BYTE *)(v42 + 21) & 0x80) == 0)
    {
      do
        v42 = *(_QWORD *)(*(_QWORD *)(v42 + 32) + 8);
      while ((*(_BYTE *)(v42 + 45) & 0x10) == 0);
    }
    if ((*(_BYTE *)(*(_QWORD *)(v42 + 144) + 26) & 8) == 0)
    {
LABEL_57:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return;
    }
  }
  v12 = *(_QWORD *)(a1 + 192);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 20);
    v14 = (uint64_t *)(v12 + 28);
  }
  else
  {
    v13 = 0;
    v14 = (uint64_t *)(a1 + 160);
  }
  v15 = *v14;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v17 = *(unsigned int *)(v16 + 508);
  if (!(_DWORD)v17)
  {
    v18 = 0;
LABEL_15:
    LODWORD(v19) = 0;
    goto LABEL_16;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v16 + 496) + 8 * v17 - 8);
  if (!v18)
    goto LABEL_15;
  v19 = *(_QWORD *)(v18 + 64);
  v18 = v19 & 0xFFFFFFFF00000000;
LABEL_16:
  v20 = HIDWORD(v18);
  v21 = __OFADD__((_DWORD)v13, (_DWORD)v19);
  LODWORD(v19) = v13 + v19;
  if (v21)
    v19 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v19 = v19;
  v23 = HIDWORD(v13);
  v21 = __OFADD__((_DWORD)v23, (_DWORD)v20);
  v22 = v23 + v20;
  LODWORD(v23) = (v23 >> 31) + 0x7FFFFFFF;
  if (v21)
    v23 = v23;
  else
    v23 = v22;
  *(_QWORD *)a3 = v19 | (v23 << 32);
  *(_QWORD *)(a3 + 8) = v15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (a2)
  {
    v25 = *(_DWORD *)(a1 + 160);
    v24 = *(_DWORD *)(a1 + 164);
    v26 = *(WebCore::ShadowData **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 88);
    if (v26)
    {
      v43 = WebCore::ShadowData::shadowOutsetExtent(v26);
      v28 = HIDWORD(v44);
      if (__OFADD__(v25, HIDWORD(v43)))
        v30 = (v25 >> 31) + 0x7FFFFFFF;
      else
        v30 = v25 + HIDWORD(v43);
      if (__OFADD__(v24, (_DWORD)v44))
        v29 = (v24 >> 31) + 0x7FFFFFFF;
      else
        v29 = v24 + v44;
      v27 = v43;
    }
    else
    {
      v27 = 0;
      LODWORD(v28) = 0;
      v29 = *(_DWORD *)(a1 + 164);
      v30 = *(_DWORD *)(a1 + 160);
    }
    v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 200);
    if (*(_QWORD *)(v31 + 8))
      v32 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v32 = 0;
    if (v32 && !WebCore::LengthBox::isZero((WebCore::LengthBox *)(v31 + 80)))
    {
      v47 = WebCore::RenderStyle::imageOutsets(a1 + 80, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 200));
      v50 = -v49;
      if (__OFSUB__(0, v49))
        v50 = 0x7FFFFFFF;
      if (v50 < (int)v28)
        LODWORD(v28) = v50;
      v51 = v25 + HIDWORD(v47);
      if (__OFADD__(v25, HIDWORD(v47)))
        v51 = (v25 >> 31) + 0x7FFFFFFF;
      if (v30 <= v51)
        v30 = v51;
      v52 = -(int)v47;
      if (__OFSUB__(0, (_DWORD)v47))
        v52 = 0x7FFFFFFF;
      if (v52 >= (int)v27)
        v27 = v27;
      else
        v27 = v52;
      v53 = v24 + v48;
      if (__OFADD__(v24, v48))
        v53 = (v24 >> 31) + 0x7FFFFFFF;
      if (v29 <= v53)
        v29 = v53;
    }
    v33 = (WebCore::RenderStyle *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
    v34 = *(_QWORD *)(*((_QWORD *)v33 + 1) + 16);
    v35 = *(unsigned __int8 *)(v34 + 52);
    if ((v35 & 0xF) != 0 && (v35 & 0xE) != 0 && (v35 & 0xF) != 0)
    {
      v54 = *(float *)(v34 + 48);
      v55 = 3.0;
      if (((v54 < 3.0) & (v35 >> 4)) != 0 || v54 > 0.0)
      {
        if (v54 >= 3.0)
          v55 = *(float *)(v34 + 48);
        if ((v35 & 0x10) != 0)
          v56 = v55;
        else
          v56 = *(float *)(v34 + 48);
        if ((float)(WebCore::RenderStyle::outlineOffset(v33) + v56) > 0.0)
        {
          v57 = (WebCore::RenderStyle *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
          v58 = *(_QWORD *)(*((_QWORD *)v57 + 1) + 16);
          v59 = 0.0;
          if ((*(_BYTE *)(v58 + 52) & 0xF) != 0)
          {
            v59 = *(float *)(v58 + 48);
            if ((*(_BYTE *)(v58 + 52) & 0x10) != 0 && v59 < 3.0)
              v59 = 3.0;
          }
          v60 = fmaxf(v59 + WebCore::RenderStyle::outlineOffset(v57), 0.0) * 64.0;
          if (v60 >= 2147483650.0)
          {
            v61 = 0x7FFFFFFF;
          }
          else if (v60 <= -2147483650.0)
          {
            v61 = 0x80000000;
          }
          else
          {
            v61 = (int)v60;
          }
          v62 = -v61;
          v63 = __OFSUB__(0, v61);
          v64 = -v61;
          if (__OFSUB__(0, v61))
            v64 = 0x7FFFFFFF;
          if (v64 < (int)v28)
            LODWORD(v28) = v64;
          v65 = v25 + v61;
          if (__OFADD__(v25, v61))
            v65 = (v25 >> 31) + 0x7FFFFFFF;
          if (v30 <= v65)
            v30 = v65;
          if (v63)
            v62 = 0x7FFFFFFF;
          if (v62 >= (int)v27)
            v27 = v27;
          else
            v27 = v62;
          v21 = __OFADD__(v24, v61);
          v66 = v24 + v61;
          if (v21)
            v66 = (v24 >> 31) + 0x7FFFFFFF;
          if (v29 <= v66)
            v29 = v66;
        }
      }
    }
    v38 = v30 - v28;
    if (__OFSUB__(v30, (_DWORD)v28))
      v38 = (v30 >> 31) + 0x7FFFFFFF;
    v39 = (v29 - v27);
    if (__OFSUB__(v29, (_DWORD)v27))
      v39 = (v29 >> 31) + 0x7FFFFFFF;
    *(_QWORD *)(a3 + 16) = v28 | (v27 << 32);
    *(_QWORD *)(a3 + 24) = v38 | (unint64_t)(v39 << 32);
    *(_BYTE *)(a3 + 32) = 1;
  }
}

uint64_t WebCore::RenderBlock::outlineStyleForRepaint(WebCore::RenderBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x10) == 0)
    goto LABEL_2;
  ++dword_1ECE91378;
  v3 = *((_QWORD *)this + 1);
  v4 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v5 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v8);
  if (v9 == -1 || v9 != v3)
  {
    v13 = 1;
    do
    {
      v8 = ((_DWORD)v8 + v13) & v4;
      v14 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v8);
      ++v13;
    }
    while (v14 == -1 || v14 != v3);
  }
  v11 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v8 + 8) + 16);
  if (!v11 || (v12 = *v11) == 0 || (v2 = *(_QWORD *)(v12 + 8)) == 0)
  {
LABEL_2:
    if ((*((_BYTE *)this + 45) & 2) == 0)
      return (uint64_t)this + 80;
    v2 = *((_QWORD *)this + 4);
    if (v2)
      v2 = *(_QWORD *)(v2 + 8);
  }
  return v2 + 80;
}

uint64_t WebCore::RenderView::computeVisibleRectsInContainer@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  __int128 v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  const WebCore::TransformationMatrix *v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  float v31;
  WebCore::RenderView *v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int v45;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8) + 3382))
  {
    v29 = a2[1];
    *(_OWORD *)a5 = *a2;
    *(_OWORD *)(a5 + 16) = v29;
    v12 = *((_DWORD *)a2 + 8);
  }
  else
  {
    v5 = a2[1];
    v43 = *a2;
    v44 = v5;
    v45 = *((_DWORD *)a2 + 8);
    v6 = (unsigned __int16)*(_DWORD *)(result + 124) >> 13;
    v7 = v6 > 5;
    v8 = (1 << v6) & 0x2A;
    if (!v7 && v8 != 0)
    {
      v39 = a5;
      v40 = a4;
      v42 = a3;
      v32 = (WebCore::RenderView *)result;
      v33 = WebCore::RenderView::viewWidth((WebCore::RenderView *)result);
      v34 = WebCore::RenderView::viewHeight(v32);
      v35 = v33 << 6;
      if (v33 < -33554432)
        v35 = 0x80000000;
      if (v33 > 0x1FFFFFF || v34 > 0x1FFFFFF)
      {
        if (v33 >= 0x2000000)
          v35 = 0x7FFFFFFF;
        if (v34 >= -33554432)
          LODWORD(v36) = v34 << 6;
        else
          LODWORD(v36) = 0x80000000;
        if (v34 <= 0x1FFFFFF)
          v36 = v36;
        else
          v36 = 0x7FFFFFFFLL;
        v37 = (unsigned __int16)*((_DWORD *)v32 + 31) >> 13;
        v38 = 2;
        switch(v37)
        {
          case 1:
          case 2:
            goto LABEL_49;
          case 3:
          case 5:
LABEL_52:
            LOBYTE(v37) = 3;
            goto LABEL_49;
          case 4:
            break;
          default:
LABEL_48:
            LOBYTE(v37) = 0;
LABEL_49:
            v38 = v37;
            break;
        }
      }
      else
      {
        LODWORD(v36) = v34 << 6;
        if (v34 >= -33554432)
          v36 = v36;
        else
          v36 = 0x80000000;
        v37 = (unsigned __int16)*((_DWORD *)v32 + 31) >> 13;
        v38 = 2;
        switch((unsigned __int16)*((_DWORD *)v32 + 31) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_49;
          case 3:
          case 5:
            goto LABEL_52;
          case 4:
            break;
          default:
            goto LABEL_48;
        }
      }
      WebCore::RenderObject::RepaintRects::flipForWritingMode((uint64_t)&v43, v35 | (unint64_t)(v36 << 32), (v38 & 6) != 2);
      a5 = v39;
      a4 = v40;
      result = (uint64_t)v32;
      a3 = v42;
    }
    if ((a4 & 1) != 0)
    {
      v41 = a3;
      v13 = a5;
      v14 = result;
      v15 = *(_QWORD *)(result + 248);
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 328) + 136) + 704) & 0x1000) != 0)
      {
        v19 = WebCore::LocalFrameView::scrollPositionForFixedPosition((int32x2_t *)v15);
        v21 = v19 & 0xFFFFFFFF00000000;
      }
      else
      {
        if (*(_BYTE *)(v15 + 1176))
          v16 = *(_QWORD *)(v15 + 1180);
        else
          v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 + 64) + 832))(v15 + 64, 0, 1);
        v17 = HIDWORD(v16);
        v18 = (_DWORD)v16 << 6;
        if ((int)v16 < -33554432)
          v18 = 0x80000000;
        if ((int)v16 <= 0x1FFFFFF)
          LODWORD(v19) = v18;
        else
          LODWORD(v19) = 0x7FFFFFFF;
        v20 = v17 << 38;
        if ((int)v17 < -33554432)
          v20 = 0x8000000000000000;
        v7 = (int)v17 <= 0x1FFFFFF;
        v21 = 0x7FFFFFFF00000000;
        if (v7)
          v21 = v20;
      }
      v22 = v21 | v19;
      v23 = HIDWORD(v21);
      v24 = v43 + (v21 | v19);
      v25 = (v43 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__((_DWORD)v43, v22))
        v25 = v24;
      v26 = (DWORD1(v43) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(DWORD1(v43), (_DWORD)v23))
        v26 = DWORD1(v43) + v23;
      *(_QWORD *)&v43 = __PAIR64__(v26, v25);
      a5 = v13;
      result = v14;
      a3 = v41;
      if ((_BYTE)v45)
      {
        v27 = v44 + v22;
        if (__OFADD__((_DWORD)v44, v22))
          v27 = (v44 >> 31) + 0x7FFFFFFF;
        LODWORD(v44) = v27;
        v28 = DWORD1(v44) + v23;
        if (__OFADD__(DWORD1(v44), (_DWORD)v23))
          v28 = (DWORD1(v44) >> 31) + 0x7FFFFFFF;
        DWORD1(v44) = v28;
        a5 = v13;
        result = v14;
        a3 = v41;
      }
    }
    if (!a3 && (*(_BYTE *)(result + 21) & 0x80) != 0)
    {
      v10 = *(const WebCore::TransformationMatrix **)(*(_QWORD *)(result + 144) + 200);
      if (v10)
      {
        v30 = a5;
        v31 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24)
                                                                                                 + 8)
                                                                                     + 40)
                                                                         + 8));
        result = WebCore::RenderObject::RepaintRects::transform((uint64_t)&v43, v10, v31);
        a5 = v30;
      }
    }
    v11 = v44;
    *(_OWORD *)a5 = v43;
    *(_OWORD *)(a5 + 16) = v11;
    v12 = v45;
  }
  *(_DWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 36) = 1;
  return result;
}

uint64_t WebCore::RenderLayer::updateLayerPosition(uint64_t a1, WebCore::RenderObject *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  WebCore::WillChangeData *v56;
  uint64_t v57;
  char v58;
  int v59;
  char v60;
  char v61;
  uint64_t v62;
  WebCore::RenderView *v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v87;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  WebCore::RenderView *v92;
  WebCore::RenderLayerCompositor *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  float v102;
  double v103;
  double v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  WebCore::RenderLayerCompositor *v110;
  WTF *v111;
  void *v112;
  WebCore::RenderLayerCompositor *v113;
  WebCore::RenderLayerCompositor *v114;
  WTF *v115;
  void *v116;
  WebCore::RenderObject *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  WebCore::RenderObject *v125;
  WebCore::RenderObject *v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  int v131;
  unsigned int v132;
  const WebCore::RenderBox *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  int isAtomicInlineLevelBox;
  uint64_t v142;
  int v143;
  double v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  int v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _DWORD v156[4];

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v4 + 45) & 0x20) == 0 || (*(_BYTE *)(v4 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(v4 + 45) & 4) != 0)
    {
      v5 = *(_QWORD *)(v4 + 152);
      v6 = *(_QWORD *)(v4 + 160);
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40) + 8) + 528);
      v8 = v5;
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8);
        v8 = *(_QWORD *)(v4 + 152);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 288);
          v8 = *(_QWORD *)(v4 + 152);
          if (v10)
          {
            v8 = *(_QWORD *)(v4 + 152);
            if (*(_BYTE *)(v10 + 1383))
            {
              v127 = a2;
              v128 = WebCore::RenderBox::topLeftLocationWithFlipping((WebCore::RenderBox *)v4);
              a2 = v127;
              v8 = v128;
            }
          }
        }
      }
      if ((int)v5 <= 0)
        v11 = -(-(int)v5 & 0x3F);
      else
        v11 = v5 & 0x3F;
      v12 = v11 + v6;
      if (__OFADD__(v11, (_DWORD)v6))
        v12 = (v11 >> 31) + 0x7FFFFFFF;
      v13 = BYTE4(v5) & 0x3F;
      if (SHIDWORD(v5) <= 0)
        v13 = -(-HIDWORD(v5) & 0x3F);
      v14 = v13 + HIDWORD(v6);
      if (__OFADD__(v13, HIDWORD(v6)))
        v14 = (v13 >> 31) + 0x7FFFFFFF;
      v15 = v12 / 64 - ((int)(v11 + 32) >> 6) + ((int)(v12 - (((v13 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6);
      v16 = v14 / 64 - ((int)(v13 + 32) >> 6) + ((int)(v14 - (v12 & 0xFFFFFFC0) + 32) >> 6);
      LODWORD(v17) = v15 << 6;
      if (v15 < -33554432)
        LODWORD(v17) = 0x80000000;
      if (v15 <= 0x1FFFFFF)
        v17 = v17;
      else
        v17 = 0x7FFFFFFFLL;
      v18 = v16 << 6;
      if (v16 < -33554432)
        v18 = 0x80000000;
      if (v16 <= 0x1FFFFFF)
        v19 = v18;
      else
        v19 = 0x7FFFFFFFLL;
      v20 = v17 | (v19 << 32);
    }
    else
    {
      v125 = a2;
      if ((*(_BYTE *)(v4 + 52) & 7) == 4 && (*(_BYTE *)(v4 + 53) & 1) == 0)
      {
        v145 = *(_OWORD *)(v4 + 152);
        v149 = v145;
        WebCore::enclosingIntRect((uint64_t *)&v149);
        v136 = ((_DWORD)v135 << 6);
        if ((int)v135 < -33554432)
          v136 = 0x80000000;
        v137 = 0x8000000000000000;
        if (SHIDWORD(v135) >= -33554432)
          v137 = HIDWORD(v135) << 38;
        v138 = 0x7FFFFFFF00000000;
        if (SHIDWORD(v135) <= 0x1FFFFFF)
          v138 = v137;
        if ((int)v135 > 0x1FFFFFF)
          v136 = 0x7FFFFFFFLL;
        v20 = v138 | v136;
        a3 = *(double *)&v145;
        v8 = v145;
      }
      else
      {
        v20 = 0;
        v8 = 0;
      }
      a2 = v125;
    }
  }
  else
  {
    v117 = a2;
    WebCore::RenderInline::linesBoundingBox((WebCore::LegacyInlineBox **)v4, a2);
    v119 = v118;
    a2 = v117;
    v8 = 0;
    v120 = ((_DWORD)v119 << 6);
    if ((int)v119 < -33554432)
      v120 = 0x80000000;
    v121 = 0x8000000000000000;
    if (SHIDWORD(v119) >= -33554432)
      v121 = HIDWORD(v119) << 38;
    v122 = 0x7FFFFFFF00000000;
    if (SHIDWORD(v119) <= 0x1FFFFFF)
      v122 = v121;
    v123 = (int)v119 <= 0x1FFFFFF;
    v124 = 0x7FFFFFFFLL;
    if (v123)
      v124 = v120;
    v20 = v122 | v124;
  }
  v21 = ((int)v20 / 64);
  v22 = HIDWORD(v8);
  v23 = (SHIDWORD(v20) / 64);
  v24 = (_DWORD)v21 == *(_DWORD *)(v3 + 164) && (_DWORD)v23 == *(_DWORD *)(v3 + 168);
  v25 = !v24;
  if (!v24)
  {
    *(_QWORD *)(v3 + 164) = v21 | (v23 << 32);
    v62 = *(_QWORD *)(v3 + 32);
    if (a2 && (*(_BYTE *)(v62 + 22) & 1) != 0)
      *(_DWORD *)a2 |= 4u;
    v63 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 24) + 8) + 40) + 8)
                                  + 1944);
    if (!*((_QWORD *)v63 + 50))
    {
      v113 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      WebCore::RenderLayerCompositor::RenderLayerCompositor(v113, v63);
      v114 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v63 + 50);
      *((_QWORD *)v63 + 50) = v113;
      v22 = HIDWORD(v8);
      if (v114)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v114);
        WTF::fastFree(v115, v116);
      }
    }
    v64 = *(_BYTE **)(v3 + 32);
    if ((v64[52] & 7) == 3
      && (v64[53] & 4) != 0
      && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v64 + 1696))(v64))
    {
      WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdate(v3);
    }
  }
  v26 = *(_QWORD *)(v3 + 32);
  if ((*(_DWORD *)(v26 + 20) & 0x1800000) != 0x1000000)
  {
    v27 = *(_QWORD *)(v26 + 32);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (v28)
      {
        while ((*(_BYTE *)(v28 + 21) & 0x80) == 0)
        {
          if ((*(_BYTE *)(v28 + 45) & 4) != 0 && *(_BYTE *)(v28 + 46) != 39)
          {
            v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 24) + 8) + 40) + 8) + 528);
            if (v29
              && (v30 = *(_QWORD *)(v29 + 8)) != 0
              && (v31 = *(_QWORD *)(v30 + 288)) != 0
              && *(_BYTE *)(v31 + 1383))
            {
              v32 = WebCore::RenderBox::topLeftLocationWithFlipping((WebCore::RenderBox *)v28);
            }
            else
            {
              v32 = *(_QWORD *)(v28 + 152);
            }
            v33 = HIDWORD(v32);
            v34 = __OFADD__((_DWORD)v8, (_DWORD)v32);
            v35 = v8 + v32;
            if (v34)
              LODWORD(v8) = (v8 >> 31) + 0x7FFFFFFF;
            else
              LODWORD(v8) = v35;
            if (__OFADD__((_DWORD)v22, (_DWORD)v33))
              v22 = (v22 >> 31) + 0x7FFFFFFF;
            else
              v22 = (v22 + v33);
          }
          v36 = *(_QWORD *)(v28 + 32);
          if (v36)
          {
            v28 = *(_QWORD *)(v36 + 8);
            if (v28)
              continue;
          }
          goto LABEL_59;
        }
        if (*(_BYTE *)(v28 + 46) == 39)
        {
          v129 = WebCore::RenderBox::topLeftLocationOffset((WebCore::RenderBox *)v28);
          if ((_DWORD)v129 == 0x80000000)
            v130 = 0x7FFFFFFF;
          else
            v130 = -(int)v129;
          if (HIDWORD(v129) == 0x80000000)
            v131 = 0x7FFFFFFF;
          else
            v131 = -HIDWORD(v129);
          if (__OFADD__((_DWORD)v8, v130))
            LODWORD(v8) = (v8 >> 31) + 0x7FFFFFFF;
          else
            LODWORD(v8) = v8 + v130;
          v34 = __OFADD__((_DWORD)v22, v131);
          v132 = v22 + v131;
          if (v34)
            v22 = (v22 >> 31) + 0x7FFFFFFF;
          else
            v22 = v132;
        }
      }
    }
  }
LABEL_59:
  v37 = *(_QWORD *)(v3 + 32);
  if ((*(_DWORD *)(v37 + 20) & 0x1800000) == 0x1000000)
  {
    v38 = *(_QWORD *)(v3 + 40);
    if (v38)
    {
      v50 = (*(_DWORD *)(v37 + 96) >> 19) & 7;
      do
      {
        v51 = *(_QWORD *)(v3 + 32);
        if ((*(_BYTE *)(v51 + 45) & 1) == 0)
        {
          v52 = *(_QWORD *)(*(_QWORD *)(v51 + 24) + 8);
          if (v52)
          {
            if ((*(_WORD *)(v52 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194113884);
            }
            if ((*(_BYTE *)(v52 + 23) & 0x20) != 0)
              goto LABEL_257;
          }
        }
        if ((*(_QWORD *)(v51 + 96) & 0xF80000000000) == 0x480000000000)
        {
LABEL_257:
          if ((*(_BYTE *)(v38 + 24) & 1) != 0)
            goto LABEL_122;
        }
        else
        {
          v53 = *(_QWORD *)(v38 + 32);
          if (v50 == 2)
          {
            v54 = *(unsigned __int8 *)(v53 + 46);
            if (v54 == 49
              || (*(_BYTE *)(v53 + 98) & 0x38) != 0
              || ((*(_BYTE *)(v53 + 45) & 0x40) != 0 || (v54 - 36) <= 4 && v54 != 38)
              && (*(_BYTE *)(v53 + 22) & 2) != 0)
            {
              goto LABEL_122;
            }
            v55 = *(_QWORD *)(*(_QWORD *)(v53 + 88) + 40);
            if (*(_DWORD *)(*(_QWORD *)(v55 + 72) + 20))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v53 + 24) + 8))
                goto LABEL_122;
            }
            if ((*(_BYTE *)(v53 + 45) & 0x40) != 0)
            {
              v56 = *(WebCore::WillChangeData **)(v55 + 200);
              if (v56)
              {
                v146 = *(_QWORD *)(v38 + 32);
                v139 = WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v56, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v53 + 24) + 8));
                v53 = v146;
                if ((v139 & 1) != 0)
                  goto LABEL_122;
                v54 = *(unsigned __int8 *)(v146 + 46);
              }
            }
            if (v54 == 67 || v54 == 90)
              goto LABEL_122;
            v57 = *(_QWORD *)(*(_QWORD *)(v53 + 88) + 40);
            v58 = *(_BYTE *)(v57 + 462);
            v59 = *(_BYTE *)(v57 + 642) & 3;
            v60 = v58 | 0x19;
            if (v59 == 1)
              v58 |= 0x15u;
            v61 = v59 == 2 ? v60 : v58;
            if ((v61 & 3) != 0)
            {
              if ((*(_BYTE *)(v53 + 20) & 1) != 0
                || (v147 = v38,
                    v140 = v53,
                    isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v53),
                    v53 = v140,
                    v38 = v147,
                    isAtomicInlineLevelBox))
              {
                if ((*(_QWORD *)(v53 + 96) & 0x1FLL) != 0x19
                  && (*(unsigned __int8 *)(v53 + 46) - 36 > 4 || (*(_BYTE *)(v53 + 52) & 7) == 1))
                {
LABEL_122:
                  v65 = *(_QWORD *)(v38 + 32);
                  v66 = *(_DWORD *)(v65 + 20);
                  if ((v66 & 0x10000) != 0)
                  {
                    v67 = *(_QWORD *)(v38 + 264);
                    if (v67)
                    {
                      v70 = v67 + 104;
                      v68 = *(_DWORD *)(v67 + 104);
                      v69 = *(_DWORD *)(v70 + 4);
                      v71 = v68 << 6;
                      v72 = v69 << 6;
                      if (v68 < -33554432)
                        v71 = 0x80000000;
                      if (v68 > 0x1FFFFFF)
                        v71 = 0x7FFFFFFF;
                      if (v69 < -33554432)
                        v72 = 0x80000000;
                      if (v69 <= 0x1FFFFFF)
                        v73 = v72;
                      else
                        v73 = 0x7FFFFFFF;
                      if (v71 == 0x80000000)
                        v74 = 0x7FFFFFFF;
                      else
                        v74 = -v71;
                      if (v73 == 0x80000000)
                        v75 = 0x7FFFFFFF;
                      else
                        v75 = -v73;
                      v34 = __OFADD__((_DWORD)v8, v74);
                      v76 = v8 + v74;
                      if (v34)
                        LODWORD(v8) = (v8 >> 31) + 0x7FFFFFFF;
                      else
                        LODWORD(v8) = v76;
                      v34 = __OFADD__((_DWORD)v22, v75);
                      v77 = (v22 + v75);
                      if (v34)
                        v22 = (v22 >> 31) + 0x7FFFFFFF;
                      else
                        v22 = v77;
                    }
                  }
                  if ((v66 & 0x800000) != 0 && (*(_BYTE *)(v65 + 45) & 0x20) != 0)
                  {
                    if ((*(_BYTE *)(*(_QWORD *)(v3 + 32) + 45) & 4) != 0)
                      v133 = *(const WebCore::RenderBox **)(v3 + 32);
                    else
                      v133 = 0;
                    v134 = WebCore::RenderInline::offsetForInFlowPositionedInline((WebCore::RenderInline *)v65, v133);
                    if (__OFADD__((_DWORD)v8, (_DWORD)v134))
                      LODWORD(v8) = (v8 >> 31) + 0x7FFFFFFF;
                    else
                      LODWORD(v8) = v8 + v134;
                    if (__OFADD__((_DWORD)v22, HIDWORD(v134)))
                      v22 = (v22 >> 31) + 0x7FFFFFFF;
                    else
                      v22 = (v22 + HIDWORD(v134));
                  }
                  goto LABEL_146;
                }
              }
            }
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 88) + 40) + 636) & 0xC0000) != 0)
            {
              if ((*(_BYTE *)(v53 + 20) & 1) != 0
                || (v148 = v38,
                    v142 = v53,
                    v143 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v53),
                    v53 = v142,
                    v38 = v148,
                    v143))
              {
                if ((*(_QWORD *)(v53 + 96) & 0x1FLL) != 0x19)
                {
                  v108 = *(unsigned __int8 *)(v53 + 46);
                  if ((v108 - 36) <= 4)
                  {
                    if (v108 == 36)
                      goto LABEL_122;
                  }
                  else if (v108 != 63 && v108 != 35)
                  {
                    goto LABEL_122;
                  }
                }
              }
            }
          }
          else if (v50 == 6 && WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v53))
          {
            goto LABEL_122;
          }
        }
        v38 = *(_QWORD *)(v38 + 40);
      }
      while (v38);
    }
  }
  v38 = *(_QWORD *)(v3 + 40);
  if (v38)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v38 + 32) + 22) & 1) != 0)
    {
      v39 = *(_QWORD *)(v38 + 264);
      if (v39)
      {
        v42 = v39 + 104;
        v40 = *(_DWORD *)(v39 + 104);
        v41 = *(_DWORD *)(v42 + 4);
        v43 = v40 << 6;
        v44 = v41 << 6;
        if (v40 < -33554432)
          v43 = 0x80000000;
        if (v40 > 0x1FFFFFF)
          v43 = 0x7FFFFFFF;
        if (v41 < -33554432)
          v44 = 0x80000000;
        if (v41 <= 0x1FFFFFF)
          v45 = v44;
        else
          v45 = 0x7FFFFFFF;
        if (v43 == 0x80000000)
          v46 = 0x7FFFFFFF;
        else
          v46 = -v43;
        if (v45 == 0x80000000)
          v47 = 0x7FFFFFFF;
        else
          v47 = -v45;
        v34 = __OFADD__((_DWORD)v8, v46);
        v48 = v8 + v46;
        if (v34)
          LODWORD(v8) = (v8 >> 31) + 0x7FFFFFFF;
        else
          LODWORD(v8) = v48;
        v34 = __OFADD__((_DWORD)v22, v47);
        v49 = (v22 + v47);
        if (v34)
          v22 = (v22 >> 31) + 0x7FFFFFFF;
        else
          v22 = v49;
      }
    }
LABEL_146:
    *(_QWORD *)(v3 + 184) = *(_QWORD *)(v38 + 192);
  }
  v78 = *(_QWORD *)(v3 + 264);
  if (v78 && *(_BYTE *)(v78 + 79))
  {
    v90 = *(_QWORD *)(v3 + 192);
    if (!v90 || (v91 = *(_QWORD *)(v3 + 184)) != 0 && v90 == v91)
      *(_QWORD *)(v3 + 192) = ++WebCore::nextScrollingScope(void)::currentScope;
  }
  else
  {
    v79 = *(_QWORD *)(v3 + 184);
    v80 = *(_QWORD *)(v3 + 192);
    if (!v80 || !v79 || v80 != v79)
      *(_QWORD *)(v3 + 192) = v79;
  }
  v81 = *(_QWORD *)(v3 + 32);
  v82 = *(_DWORD *)(v81 + 20);
  if ((v82 & 0x800000) != 0 && (*(_BYTE *)(v81 + 45) & 8) != 0)
  {
    v83 = v82 & 0x1800000;
    if (v83 == 0x800000)
    {
      v84 = WebCore::RenderBoxModelObject::relativePositionOffset(*(WebCore::RenderBoxModelObject **)(v3 + 32));
      v85 = HIDWORD(v84);
    }
    else if (v83 == 25165824)
    {
      WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(*(WebCore::RenderBoxModelObject **)(v3 + 32), a3);
      v156[0] = v98;
      v156[1] = v99;
      v156[2] = v100;
      v156[3] = v101;
      v150 = 0;
      *(_QWORD *)&v149 = off_1E34043D0;
      *((_QWORD *)&v149 + 1) = 0;
      v151 = 0u;
      v152 = 0u;
      v153 = 0u;
      v154 = 0u;
      v155 = 0u;
      WebCore::RenderBoxModelObject::computeStickyPositionConstraints((WebCore::RenderBoxModelObject *)v81, (WebCore::StickyPositionViewportConstraints *)&v149, (const WebCore::FloatRect *)v156);
      v103 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)&v149, (const WebCore::FloatRect *)v156)* 64.0;
      v104 = v102 * 64.0;
      if (v104 >= 2147483650.0 || v103 <= -2147483650.0 || v104 <= -2147483650.0 || v103 >= 2147483650.0)
      {
        if (v103 >= 2147483650.0)
        {
          LODWORD(v84) = 0x7FFFFFFF;
        }
        else if (v103 <= -2147483650.0)
        {
          LODWORD(v84) = 0x80000000;
        }
        else
        {
          LODWORD(v84) = (int)v103;
        }
        v144 = v102 * 64.0;
        if (v144 >= 2147483650.0)
        {
          v85 = 0x7FFFFFFFLL;
        }
        else if (v144 <= -2147483650.0)
        {
          v85 = 0x80000000;
        }
        else
        {
          v85 = (int)v144;
        }
      }
      else
      {
        LODWORD(v84) = (int)v103;
        v85 = (int)v104;
      }
    }
    else
    {
      v85 = 0;
      LODWORD(v84) = 0;
    }
    if (*(_DWORD *)(v3 + 148) != (_DWORD)v84 || *(_DWORD *)(v3 + 152) != (_DWORD)v85)
      v25 = 1;
    *(_QWORD *)(v3 + 148) = v84 | (unint64_t)(v85 << 32);
    if (__OFADD__((_DWORD)v8, (_DWORD)v84))
      LODWORD(v8) = (v8 >> 31) + 0x7FFFFFFF;
    else
      LODWORD(v8) = v8 + v84;
    v34 = __OFADD__((_DWORD)v22, (_DWORD)v85);
    v87 = v22 + v85;
    if (v34)
      v22 = (v22 >> 31) + 0x7FFFFFFF;
    else
      v22 = v87;
  }
  if (*(_DWORD *)(v3 + 156) == (_DWORD)v8 && *(_DWORD *)(v3 + 160) == (_DWORD)v22)
    result = v25;
  else
    result = 1;
  *(_QWORD *)(v3 + 156) = v8 | (v22 << 32);
  if ((_DWORD)result == 1)
  {
    v92 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 24) + 8)
                                                          + 40)
                                              + 8)
                                  + 1944);
    v93 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v92 + 50);
    if (!v93)
    {
      v109 = result;
      v93 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      WebCore::RenderLayerCompositor::RenderLayerCompositor(v93, v92);
      v110 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v92 + 50);
      *((_QWORD *)v92 + 50) = v93;
      if (v110)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v110);
        WTF::fastFree(v111, v112);
        v93 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v92 + 50);
      }
      result = v109;
    }
    if (*((_DWORD *)v93 + 50))
    {
      if (!*(_QWORD *)(v3 + 256))
        goto LABEL_182;
      *(_DWORD *)(v3 + 12) |= 0x40u;
      if ((*(_BYTE *)(v3 + 24) & 4) != 0)
      {
        v105 = *(_QWORD *)(v3 + 40);
        if (!v105)
          goto LABEL_182;
      }
      else
      {
        v105 = v3;
        do
        {
          v105 = *(_QWORD *)(v105 + 40);
          if (!v105)
            goto LABEL_182;
        }
        while ((*(_BYTE *)(v105 + 24) & 0x4A) == 0);
      }
      do
      {
        v106 = *(_DWORD *)(v105 + 12);
        if ((v106 & 2) != 0)
          break;
        v107 = result;
        *(_DWORD *)(v105 + 12) = v106 | 2;
        if ((*(_BYTE *)(v105 + 24) & 4) != 0)
        {
          v105 = *(_QWORD *)(v105 + 40);
        }
        else
        {
          do
          {
            v105 = *(_QWORD *)(v105 + 40);
            result = v107;
            if (!v105)
              goto LABEL_182;
          }
          while ((*(_BYTE *)(v105 + 24) & 0x4A) == 0);
        }
        result = v107;
      }
      while (v105);
LABEL_182:
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          break;
        v94 = *(_QWORD *)(v3 + 24);
        if ((v94 & 0x4A) != 0)
        {
          *(_DWORD *)(v3 + 12) |= 0x10u;
          if ((v94 & 4) != 0)
          {
            v95 = *(_QWORD *)(v3 + 40);
            if (v95)
            {
LABEL_188:
              do
              {
                v96 = *(_DWORD *)(v95 + 12);
                if ((v96 & 1) != 0)
                  break;
                *(_DWORD *)(v95 + 12) = v96 | 1;
                if ((*(_BYTE *)(v95 + 24) & 4) == 0)
                {
                  while (1)
                  {
                    v95 = *(_QWORD *)(v95 + 40);
                    if (!v95)
                      goto LABEL_189;
                    if ((*(_BYTE *)(v95 + 24) & 0x4A) != 0)
                      goto LABEL_208;
                  }
                }
                v95 = *(_QWORD *)(v95 + 40);
LABEL_208:
                ;
              }
              while (v95);
            }
          }
          else
          {
            v95 = v3;
            while (1)
            {
              v95 = *(_QWORD *)(v95 + 40);
              if (!v95)
                break;
              if ((*(_BYTE *)(v95 + 24) & 0x4A) != 0)
                goto LABEL_188;
            }
          }
LABEL_189:
          *(_DWORD *)(v3 + 12) |= 0x800u;
          if ((*(_BYTE *)(v3 + 24) & 4) != 0)
          {
            v3 = *(_QWORD *)(v3 + 40);
            if (v3)
            {
LABEL_192:
              while (1)
              {
                v97 = *(_DWORD *)(v3 + 12);
                if ((v97 & 2) != 0)
                  break;
                *(_DWORD *)(v3 + 12) = v97 | 2;
                if ((*(_BYTE *)(v3 + 24) & 4) == 0)
                {
                  while (1)
                  {
                    v3 = *(_QWORD *)(v3 + 40);
                    if (!v3)
                      return result;
                    if ((*(_BYTE *)(v3 + 24) & 0x4A) != 0)
                      goto LABEL_196;
                  }
                }
                v3 = *(_QWORD *)(v3 + 40);
LABEL_196:
                if (!v3)
                  return result;
              }
            }
          }
          else
          {
            while (1)
            {
              v3 = *(_QWORD *)(v3 + 40);
              if (!v3)
                break;
              if ((*(_BYTE *)(v3 + 24) & 0x4A) != 0)
                goto LABEL_192;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

